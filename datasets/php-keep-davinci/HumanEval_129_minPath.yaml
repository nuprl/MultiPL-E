name: HumanEval_129_minPath
language: php
prompt: "<?php\n// Given a grid with N rows and N columns (N >= 2) and a positive\
  \ integer k, \n// each cell of the grid contains a value. Every integer in the range\
  \ [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You\
  \ have to find the minimum path of length k in the grid. You can start\n// from\
  \ any cell, and in each step you can move to any of the neighbor cells,\n// in other\
  \ words, you can go to cells which share an edge with you current\n// cell.\n//\
  \ Please note that a path of length k means visiting exactly k cells (not\n// necessarily\
  \ distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered\
  \ less than a path B (of length k) if\n// after making the ordered lists of the\
  \ values on the cells that A and B go\n// through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n// than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer\
  \ is unique.\n// Return an ordered list of the values on the cells that the minimum\
  \ path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]],\
  \ k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k\
  \ = 1\n// Output: [1]\nfunction minPath($grid, $k) {\n"
tests: "function candidate(...$args) {\n    return minPath(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7,\
  \ 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2,\
  \ 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !==\
  \ array(1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6,\
  \ 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7)\
  \ !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1,\
  \ 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14,\
  \ 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6,\
  \ 1, 6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(12,\
  \ 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12)\
  \ !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8)\
  \ !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !==\
  \ array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2,\
  \ 1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
  \ 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $dp[$i][$j] = [];\n            for ($l = 0; $l < $k; $l++) {\n    \
    \            $dp[$i][$j][$l] = [];\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0][]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n    \
    \    for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n\
    \                $min = [];\n                if ($i > 0) {\n                 \
    \   $min = $dp[$i - 1][$j][$l - 1];\n                }\n                if ($j\
    \ > 0) {\n                    $min = minPathHelper($min, $dp[$i][$j - 1][$l -\
    \ 1]);\n                }\n                if ($i < $n - 1) {\n              \
    \      $min = minPathHelper($min, $dp[$i + 1][$j][$l - 1]);\n                }\n\
    \                if ($j < $m - 1) {\n                    $min = minPathHelper($min,\
    \ $dp[$i][$j + 1][$l - 1]);\n                }\n                $dp[$i][$j][$l]\
    \ = array_merge($min, [$grid[$i][$j]]);\n            }\n        }\n    }\n   \
    \ $min = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $min = minPathHelper($min, $dp[$i][$j][$k - 1]);\n    \
    \    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $visited, $minPath, $minPathSum, $k, 0, 0, 0);\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPathSumHelper = function ($grid, $i, $j, $k, $sum, $path)\
    \ use (&$minPath, &$minSum, &$minPathSum, &$minPathSumHelper) {\n        if ($k\
    \ == 0) {\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPath = $path;\n            } else if ($sum == $minSum) {\n\
    \                $pathSum = array_sum($path);\n                if ($pathSum <\
    \ $minPathSum) {\n                    $minPathSum = $pathSum;\n              \
    \      $minPath = $path;\n                }\n            }\n            return;\n\
    \        }\n        if ($i < 0 || $i >= count($grid) || $j < 0 || $j >= count($grid)\
    \ || $sum > $minSum) {\n            return;\n        }\n        $path[] = $grid[$i][$j];\n\
    \        $minPathSumHelper($grid, $i + 1, $j, $k - 1, $sum + $grid[$i][$j], $path);\n\
    \        $minPathSumHelper($grid, $i - 1, $j, $k - 1, $sum + $grid[$i][$j], $path);\n\
    \        $minPathSumHelper($grid, $i, $j + 1, $k - 1, $sum + $grid[$i][$j], $path);\n\
    \        $minPathSumHelper($grid, $i, $j - 1, $k - 1, $sum + $grid[$i][$j], $path);\n\
    \    };\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            $minPathSumHelper($grid, $i, $j, $k, 0, []);\n        }\n   \
    \ }\n    return $min", "    $n = count($grid);\n    $m = count($grid[0]);\n  \
    \  $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited = [];\n            dfs($grid, $i, $j, $k,\
    \ $path, $sum, $visited);\n            if ($sum < $minSum) {\n               \
    \ $minSum = $sum;\n                $minPath = $path;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n     \
    \       $path = [];\n            $sum = 0;\n            $pathSum = 0;\n      \
    \      dfs($grid, $i, $j, $k, $visited, $path, $sum, $pathSum);\n            if\
    \ ($sum < $minSum) {\n                $minSum = $sum;\n                $minPath\
    \ = $path;\n                $minPathSum = $pathSum;\n            } else if ($sum\
    \ == $minSum && $pathSum < $minPathSum) {\n                $minPath = $path;\n\
    \                $minPathSum = $pathSum;\n            }\n        }\n    }\n  \
    \  return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = [];\n            $path[] = $grid[$i][$j];\n            $sum = $grid[$i][$j];\n\
    \            $paths = [];\n            $paths[] = [$i, $j];\n            $minPath\
    \ = minPathHelper($grid, $i, $j, $k, $sum, $path, $paths, $minSum, $minPath, $minPaths);\n\
    \        }\n    }\n    return $minPath;\n}", "    $rows = count($grid);\n    $cols\
    \ = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n   \
    \         $path = [];\n            $sum = 0;\n            $visited = [];\n   \
    \         $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n   \
    \         $sum += $grid[$i][$j];\n            if (dfs($grid, $i, $j, $k - 1, $rows,\
    \ $cols, $path, $sum, $visited)) {\n                if ($sum < $minSum) {\n  \
    \                  $minSum = $sum;\n                    $minPath = $path;\n  \
    \              }\n            }\n        }\n    }\n    return $minPath;\n}", " \
    \   $m = count($grid);\n    $n = count($grid[0]);\n    $visited = [];\n    for\
    \ ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n          \
    \  $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = [];\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $path = dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited);\n\
    \            if ($pathSum < $minPathSum) {\n                $minPathSum = $pathSum;\n\
    \                $minPath = $path;\n            }\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n \
    \   $minPaths = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $path = [];\n            $sum = 0;\n            $paths\
    \ = [];\n            dfs($grid, $i, $j, $k, $path, $sum, $paths);\n          \
    \  if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPaths\
    \ = $paths;\n            }\n        }\n    }\n    $minPath = $minPaths[0];\n \
    \   for ($i = 1; $i < count($minPaths); $i++) {\n        if ($minPaths[$i] < $minPath)\
    \ {\n            $minPath = $minPaths[$i];\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = [];\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n         \
    \   $path = [];\n            $sum = 0;\n            dfs($grid, $visited, $i, $j,\
    \ $k, $path, $sum);\n            if ($sum < $minSum) {\n                $minSum\
    \ = $sum;\n                $minPath = $path;\n            }\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $pathSum = 0;\n            dfs($grid, $i, $j, $k, $path, $pathSum, $visited,\
    \ $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $visited = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            dfs($grid, $i, $j, $visited, $path, $sum,\
    \ $minPath, $minSum, $k);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $sum = 0;\n            $visited\
    \ = [];\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n        \
    \    if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPath\
    \ = $path;\n            }\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathValue\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            $path = [];\n            $pathSum = 0;\n            $pathValue\
    \ = [];\n            dfs($grid, $i, $j, $k, $visited, $path, $pathSum, $pathValue,\
    \ $minPath, $minPathSum, $minPathValue);\n        }\n    }\n    return $minPathValue;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j,\
    \ $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n           \
    \     $minSum = $sum;\n                $minPath = $path;\n            }\n    \
    \    }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $dp[$i][$j] = [];\n            for ($l = 0; $l < $k; $l++)\
    \ {\n                $dp[$i][$j][$l] = [];\n            }\n        }\n    }\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $dp[$i][$j][0][] = $grid[$i][$j];\n        }\n    }\n    for ($l =\
    \ 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for\
    \ ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l] = [];\n         \
    \       if ($i > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($i < $n - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j < $m - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j + 1][$", "    $n = count($grid);\n    $m = count($grid[0]);\n   \
    \ $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n    \
    \        $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited, $path,\
    \ $sum, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n     \
    \   }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathValue = PHP_INT_MAX;\n\
    \    $minPathValueIndex = PHP_INT_MAX;\n    $minPathValueIndex2 = PHP_INT_MAX;\n\
    \    $minPathValueIndex3 = PHP_INT_MAX;\n    $minPathValueIndex4 = PHP_INT_MAX;\n\
    \    $minPathValueIndex5 = PHP_INT_MAX;\n    $minPathValueIndex6 = PHP_INT_MAX;\n\
    \    $minPathValueIndex7 = PHP_INT_MAX;\n    $minPathValueIndex8 = PHP_INT_MAX;\n\
    \    $minPathValueIndex9 = PHP_INT_MAX;\n    $minPathValueIndex10 = PHP_INT_MAX;\n\
    \    $minPathValueIndex11 = PHP_INT_MAX;\n    $minPathValueIndex12 = PHP_INT_MAX;\n\
    \    $minPathValueIndex13 = PHP_INT_MAX;\n    $minPathValueIndex14 = PHP_INT_MAX;\n\
    \    $minPathValueIndex15 = PHP_INT_MAX;\n    $minPathValueIndex16 = PHP_INT_MAX;\n\
    \    $minPathValueIndex17 = PHP_INT_MAX;\n    $minPathValueIndex18 = PHP_INT_MAX;\n\
    \    $minPathValueIndex19 = PHP_INT_MAX;\n    $minPathValueIndex20 = PHP_INT_MAX;\n\
    \    $minPathValueIndex21 = PHP_INT_MAX;\n    $minPathValueIndex22 = PHP_INT_MAX;\n\
    \    $minPathValueIndex23 = PHP_INT_MAX;\n    $minPathValueIndex24 = PHP_INT_MAX;\n\
    \    $minPathValueIndex25 = PHP_INT_MAX;\n    $minPathValueIndex26 = PHP_INT_MAX;\n\
    \    $minPathValueIndex27 = PHP_INT_MAX;\n    $minPathValueIndex28 = PHP_INT_MAX;\n\
    \    $minPathValueIndex29 = PHP_INT_", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n    \
    \        $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minPathVal = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n  \
    \          $pathVal = 0;\n            $visited = [];\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathVal += $grid[$i][$j];\n\
    \            $minPath = dfs($grid, $i, $j, $k, $path, $pathVal, $minPath, $minPathVal,\
    \ $visited);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = null;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathList = [];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n\
    \            $pathSum = 0;\n            $pathList = [];\n            dfs($grid,\
    \ $i, $j, $k, $visited, $path, $pathSum, $pathList);\n            if ($pathSum\
    \ < $minPathSum) {\n                $minPathSum = $pathSum;\n                $minPath\
    \ = $path;\n                $minPathList = $pathList;\n            }\n       \
    \ }\n    }\n    return $minPathList;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $visited = [];\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            dfs($grid, $i, $j, $k, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $visited, $minPath, $minPathSum, $k, 0, 0, 0);\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $currPath = [];\n            $currSum = 0;\n            dfs($grid,\
    \ $i, $j, $k, $visited, $currPath, $currSum, $minPath, $minSum);\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited = [];\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n  \
    \          dfs($grid, $i, $j, $k, $path, $sum, $visited, $minPath, $minSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $queue = new SplQueue();\n    $queue->enqueue([0, 0, $grid[0][0], [$grid[0][0]]]);\n\
    \    $visited[0][0] = true;\n    $minPath = null;\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $sum, $path) = $queue->dequeue();\n        if ($sum\
    \ > $k) {\n            continue;\n        }\n        if ($sum == $k) {\n     \
    \       if ($minPath === null || $path < $minPath) {\n                $minPath\
    \ = $path;\n            }\n            continue;\n        }\n        if ($i >\
    \ 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n  \
    \          $queue->enqueue([$i - 1, $j, $sum + $grid[$i - 1][$j], array_merge($path,\
    \ [$grid[$i - 1][$j]])]);\n        }\n        if ($i < $n - 1 && !$visited[$i\
    \ + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n            $queue->enqueue([$i\
    \ + 1, $j, $sum + $grid[$i + 1][$j], array_merge($path, [$grid[$i + 1][$j]])]);\n\
    \        }\n        if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j\
    \ - 1] = true;\n            $queue->enqueue([$i, $j - 1, $sum + $grid[$i][$j -\
    \ 1], array_merge($path, [$grid[$i][$j - 1]])]);\n        }\n        if ($j <\
    \ $m - 1 && !$visited[$i][$j + 1]) {\n            $visited", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j] = [];\n      \
    \      for ($l = 0; $l < $k; $l++) {\n                $dp[$i][$j][$l] = PHP_INT_MAX;\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0] = $grid[$i][$j];\n   \
    \     }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n;\
    \ $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                if ($i >\
    \ 0) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i - 1][$j][$l\
    \ - 1]);\n                }\n                if ($i < $n - 1) {\n            \
    \        $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i + 1][$j][$l - 1]);\n  \
    \              }\n                if ($j > 0) {\n                    $dp[$i][$j][$l]\
    \ = min($dp[$i][$j][$l], $dp[$i][$j - 1][$l - 1]);\n                }\n      \
    \          if ($j < $m - 1) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i][$j + 1][$l - 1]);\n                }\n            }\n        }\n   \
    \ }\n    $result = [];\n    $result[] = $dp[0][0][$k - 1];\n    for ($l = $",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n          \
    \  $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited, $path,\
    \ $pathSum, $minPath, $minPathSum, $k);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n          \
    \  $pathSum += $grid[$i][$j];\n            dfs($grid, $visited, $i, $j, $path,\
    \ $pathSum, $minPath, $minPathSum, $k, $n);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $path = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathValue = PHP_INT_MAX;\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $path,\
    \ $sum, $visited, $minPath, $minSum, $minPathSum, $minPathValue);\n          \
    \  $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}", "  \
    \  $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  dfs($grid, $i, $j, $k, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $rows = count($grid);\n    $cols\
    \ = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n   \
    \         $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j, $k,\
    \ $path, $sum);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPath = $path;\n            }\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = [];\n            $sum = 0;\n            $paths = [];\n           \
    \ dfs($grid, $i, $j, $k, $path, $sum, $paths);\n            if ($sum < $minSum)\
    \ {\n                $minSum = $sum;\n                $minPaths = $paths;\n  \
    \          }\n        }\n    }\n    $minPath = $minPaths[0];\n    for ($i = 1;\
    \ $i < count($minPaths); $i++) {\n        $path = $minPaths[$i];\n        for\
    \ ($j = 0; $j < count($path); $j++) {\n            if ($path[$j] < $minPath[$j])\
    \ {\n                $minPath = $path;\n                break;\n            }\
    \ else if ($path[$j] > $minPath[$j]) {\n                break;\n            }\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSumHelper = function ($i, $j, $sum, $path) use ($grid, $k, $n, $m,\
    \ &$visited, &$minPath, &$minSum, &$minPathSum) {\n        if ($sum > $minSum)\
    \ {\n            return;\n        }\n        if (count($path) == $k) {\n     \
    \       if ($sum < $minSum) {\n                $minSum = $sum;\n             \
    \   $minPath = $path;\n            } else if ($sum == $minSum) {\n           \
    \     $pathSum = 0;\n                for ($i = 0; $i < $k; $i++) {\n         \
    \           $pathSum += $path[$i];\n                }\n                if ($pathSum\
    \ < $minPathSum) {\n                    $minPathSum = $pathSum;\n            \
    \        $minPath = $path;\n                }\n            }\n            return;\n\
    \        }\n        $visited[$i][$j] = true;\n        if ($i > 0 && !$visited[$i\
    \ - 1][$j]) {\n            $this->minPathSumHelper($i - 1, $j, $sum + $grid[$i\
    \ - 1][$j], array_merge($path, [$grid[$i - 1][$j]]));\n        }\n        if ($i\
    \ < $n - 1 && !$visited[$i + 1][$j]) {\n            $this->minPathSumHelper($i\
    \ + 1, $j, $sum + $grid[$i + 1][$j], array_merge($path, [$grid[$i + 1][$j]]));\n\
    \        }\n        if ($j > 0 && !$visited[$i][$j - 1]) {\n            $this->minPathSumHelper($i,\
    \ $j - 1, $sum + $grid[$i][", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath", "    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    $visited = array_fill(0, $m, array_fill(0, $n,\
    \ false));\n    $min = [PHP_INT_MAX, []];\n    for ($i = 0; $i < $m; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = true;\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $grid[$i][$j], [$grid[$i][$j]],\
    \ $min);\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $min[1];\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            $minPaths\
    \ = dfs($grid, $i, $j, $visited, $path, $sum, $k);\n            foreach ($minPaths\
    \ as $minPath) {\n                if ($sum < $minSum) {\n                    $minSum\
    \ = $sum;\n                    $minPath = $path;\n                }\n        \
    \    }\n            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $rows; $i++) {\n      \
    \  for ($j = 0; $j < $cols; $j++) {\n            $path = [];\n            $pathSum\
    \ = 0;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $visited = [];\n            $visited[$i][$j] = true;\n          \
    \  dfs($grid, $i, $j, $k - 1, $path, $pathSum, $minPath, $minPathSum, $visited);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            dfs($grid, $i, $j, $visited, $path, $sum,\
    \ $k, $minPath, $minSum);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    $minPath = [];\n    $minPath[] = $grid[0][0];\n\
    \    $visited[0][0] = true;\n    $minPath = dfs($grid, $visited, $minPath, $k,\
    \ 0, 0, $n, $m);\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $min", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j,\
    \ $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n           \
    \     $minSum = $sum;\n                $minPath = $path;\n            }\n    \
    \    }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $path, $sum, $visited, $minPath, $minSum);\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $visited, $i, $j, $k, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path =\
    \ [];\n            $sum = 0;\n            $visited[$i][$j] = true;\n         \
    \   $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n           \
    \ $result = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n            if\
    \ ($result[0] < $minSum) {\n                $minSum = $result[0];\n          \
    \      $minPath = $result[1];\n                $minPathSum = $result[2];\n   \
    \         } else if ($result[0] == $minSum) {\n                if ($result[2]\
    \ < $minPathSum) {\n                    $minPath = $result[1];\n             \
    \       $minPathSum = $result[2];\n                }\n            }\n        \
    \    $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}", " \
    \   $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n   ", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path\
    \ = [];\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n   \
    \         $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n \
    \           dfs($grid, $visited, $i, $j, $path, $pathSum, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = [];\n    $min[0]\
    \ = $grid[0][0];\n    $min[1] = $grid[0][1];\n    $min[2] = $grid[1][0];\n   \
    \ $min[3] = $grid[1][1];\n    $min = sort($min);\n    $minPath = [];\n    $minPath[0]\
    \ = $min[0];\n    $minPath[1] = $min[1];\n    $minPath[2] = $min[2];\n    $minPath[3]\
    \ = $min[3];\n    for ($i = 0; $i < $k; $i++) {\n        $minPath[$i] = $min[$i];\n\
    \    }\n    return $minPath;\n}\n\n$grid = [ [1,2,3], [4,5,6], [7,8,9]];\n$k =\
    \ 3;\nprint_r(minPath($grid, $k));\n\n$grid = [ [5,9,3], [4,1,6], [7,8,2]];\n\
    $k = 1;\nprint_r(minPath($grid, $k));", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = dfs($grid, $visited, $minPath, $minSum, $minPathSum, $n, $m,\
    \ $k, 0, 0, 0, 0);\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  $visited[$i][$j] = true;\n            dfs($grid, $i, $j, $k, $visited, $path,\
    \ $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathVal = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = [];\n            $pathSum = 0;\n            $pathVal = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathVal = $grid[$i][$j];\n\
    \            $res = helper($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $pathVal);\n\
    \            if ($res[0] < $minSum) {\n                $minSum = $res[0];\n  \
    \              $minPath = $res[1];\n                $minPathSum = $res[2];\n \
    \               $minPathVal = $res[3];\n            } else if ($res[0] == $minSum)\
    \ {\n                if ($res[2] < $minPathSum) {\n                    $minSum\
    \ = $res[0];\n                    $minPath = $res[1];\n                    $minPathSum\
    \ = $res[2];\n                    $minPathVal = $res[3];\n                } else\
    \ if ($res[2] == $minPathSum) {\n                    if ($res[3] < $minPathVal)\
    \ {\n                        $minSum = $res[0];\n                        $minPath\
    \ = $res[1];\n                        $minPathSum = $res[2];\n               \
    \         $minPathVal = $res[3];\n                    }\n                }\n \
    \           }\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $k - 1, $i, $j, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $path, $sum);\n            if ($sum < $minSum)\
    \ {\n                $minSum = $sum;\n                $minPath = $path;\n    \
    \        }\n        }\n    }\n    return $minPath;\n}", "    // TODO\n}\n", " \
    \   $rows = count($grid);\n    $cols = count($grid[0]);\n    $visited = array_fill(0,\
    \ $rows, array_fill(0, $cols, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $visited[$i][$j] = true;\n            $path = [$grid[$i][$j]];\n\
    \            $sum = $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n    \
    \        $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $min", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $pathSum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $pathSum,\
    \ $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $minPath\
    \ = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [$grid[$i][$j]];\n\
    \            $sum = $grid[$i][$j];\n            $paths = [[$i, $j]];\n       \
    \     dfs($grid, $i, $j, $sum, $path, $paths, $k, $minSum, $minPath, $minPaths);\n\
    \        }\n    }\n    return $minPath;\n}", "    $m = count($grid);\n    $n =\
    \ count($grid[0]);\n    $visited = array_fill(0, $m, array_fill(0, $n, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            dfs($grid, $visited, $i, $j, $k, $path, $sum);\n \
    \           if ($sum < $minSum) {\n                $minSum = $sum;\n         \
    \       $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            $path = [];\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $pathSum, $k, $minPath, $minPathSum);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $sum);\n\
    \            if ($sum < $minSum) {\n                $minSum = $sum;\n        \
    \        $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j,\
    \ $k, $path, $sum, $minPath, $minSum, $visited);\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $sum\
    \ = 0;\n            $paths = [];\n            dfs($grid, $i, $j, $path, $sum,\
    \ $paths, $k);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPaths = $paths;\n            }\n        }\n    }\n    $minPath\
    \ = $minPaths[0];\n    for ($i = 1; $i < count($minPaths); $i++) {\n        if\
    \ ($minPaths[$i] < $minPath) {\n            $minPath = $minPaths[$i];\n      \
    \  }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $visited[$i][$j] = true;\n            $path = [$grid[$i][$j]];\n  \
    \          $sum = $grid[$i][$j];\n            $pathSum = $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $k, $visited, $path, $sum, $pathSum, $minPath, $minSum,\
    \ $minPathSum);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n    \
    \        $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $visited = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n    \
    \        $sum += $grid[$i][$j];\n            $result = dfs($grid, $i, $j, $k -\
    \ 1, $visited, $path, $sum);\n            if ($result[1] < $minSum) {\n      \
    \          $minSum = $result[1];\n                $minPath = $result[0];\n   \
    \         }\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathSum, $k, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            dfs($grid, $i, $j, $visited, $k, $path,\
    \ $sum);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPath = $path;\n            }\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            $pathSum = dfs($grid, $i, $j,\
    \ $k - 1, $visited, $path, $sum);\n            if ($pathSum < $minPathSum) {\n\
    \                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $sum =\
    \ 0;\n            $visited = [];\n            dfs($grid, $i, $j, $k, $path, $sum,\
    \ $visited);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPath = $path;\n            }\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $sum = 0;\n            dfs($grid,\
    \ $i, $j, $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n   \
    \             $minSum = $sum;\n                $minPath = $path;\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n   \
    \ $m = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = [];\n            $sum = 0;\n            $visited = [];\n         \
    \   $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n         \
    \   $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $path, $sum,\
    \ $visited, $minPath, $minSum);\n        }\n    }\n    return $minPath;\n}", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $sum = 0;\n            $visited\
    \ = [];\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n        \
    \    if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPath\
    \ = $path;\n            }\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $visited = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            dfs($grid, $visited, $i, $j, $k, $path, $sum);\n\
    \            if ($sum < $minSum) {\n                $minSum = $sum;\n        \
    \        $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $paths = [];\n            dfs($grid, $i, $j, $k, $path,\
    \ $sum, $paths);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPaths = $paths;\n            }\n        }\n    }\n\
    \    $minPath = $minPaths[0];\n    for ($i = 1; $i < count($minPaths); $i++) {\n\
    \        if ($minPaths[$i] < $minPath) {\n            $minPath = $minPaths[$i];\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $dp = [];\n    $dp[0][0] = [$grid[0][0]];\n    for ($i\
    \ = 1; $i < $n; $i++) {\n        $dp[$i][0] = [$grid[$i][0]];\n        if ($grid[$i][0]\
    \ < $grid[$i - 1][0]) {\n            $dp[$i][0] = array_merge($dp[$i - 1][0],\
    \ $dp[$i][0]);\n        } else {\n            $dp[$i][0] = array_merge($dp[$i][0],\
    \ $dp[$i - 1][0]);\n        }\n    }\n    for ($j = 1; $j < $m; $j++) {\n    \
    \    $dp[0][$j] = [$grid[0][$j]];\n        if ($grid[0][$j] < $grid[0][$j - 1])\
    \ {\n            $dp[0][$j] = array_merge($dp[0][$j - 1], $dp[0][$j]);\n     \
    \   } else {\n            $dp[0][$j] = array_merge($dp[0][$j], $dp[0][$j - 1]);\n\
    \        }\n    }\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j\
    \ < $m; $j++) {\n            $dp[$i][$j] = [$grid[$i][$j]];\n            if ($grid[$i][$j]\
    \ < $grid[$i - 1][$j]) {\n                $dp[$i][$j] = array_merge($dp[$i - 1][$j],\
    \ $dp[$i][$j]);\n            } else {\n                $dp[$i][$j] = array_merge($dp[$i][$j],\
    \ $dp[$i - 1][$j]);\n            }\n            if ($grid[$i][$j] < $grid[$i][$j\
    \ - 1]) {", "    $n = count($grid);\n    $visited = [];\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $visited[$i][$j] = false;\n        }\n  \
    \  }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n\
    \            $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j,\
    \ $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n           \
    \     $minSum = $sum;\n                $minPath = $path;\n            }\n    \
    \    }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $pathSum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $pathSum,\
    \ $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    $minPath\
    \ = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n   \
    \     }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = [];\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            if (dfs($grid, $i, $j, $k - 1, $visited, $path, $sum)) {\n      \
    \          if ($sum < $minSum) {\n                    $minSum = $sum;\n      \
    \              $minPath = $path;\n                }\n            }\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}", " \
    \   $m = count($grid);\n    $n = count($grid[0]);\n    $visited = array_fill(0,\
    \ $m, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited = [];\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n\
    \            if ($sum < $minSum) {\n                $minSum = $sum;\n        \
    \        $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSumHelper = function ($grid, $k,\
    \ $i, $j, $sum, $path, $visited) use (&$minPath, &$minSum, &$minPathSum, &$minPathSumHelper)\
    \ {\n        if ($k == 0) {\n            if ($sum < $minSum) {\n             \
    \   $minSum = $sum;\n                $minPath = $path;\n            }\n      \
    \      return;\n        }\n        if ($sum > $minSum) {\n            return;\n\
    \        }\n        $n = count($grid);\n        $m = count($grid[0]);\n      \
    \  $visited[$i][$j] = true;\n        $path[] = $grid[$i][$j];\n        $sum +=\
    \ $grid[$i][$j];\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n           \
    \ $minPathSumHelper($grid, $k - 1, $i - 1, $j, $sum, $path, $visited);\n     \
    \   }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $minPathSumHelper($grid,\
    \ $k - 1, $i + 1, $j, $sum, $path, $visited);\n        }\n        if ($j > 0 &&\
    \ !$visited[$i][$j - 1]) {\n            $minPathSumHelper($grid, $k - 1, $i, $j\
    \ - 1, $sum, $path, $visited);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $minPathSumHelper($grid, $k - 1, $i, $j + 1, $sum, $path,\
    \ $visited);\n        }\n        $visited[$i][$", "    $n = count($grid);\n  \
    \  $m = count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = [];\n            $pathSum = 0;\n            dfs($grid, $visited, $i,\
    \ $j, $k, $path, $pathSum, $minPath, $minPathSum);\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $visited, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = [];\n    $min = [];\n    $min[0] =\
    \ [$grid[0][0]];\n    $visited[0][0] = true;\n    $queue = [[0, 0]];\n    while\
    \ (!empty($queue)) {\n        list($x, $y) = array_shift($queue);\n        if\
    \ ($x > 0 && !$visited[$x - 1][$y]) {\n            $visited[$x - 1][$y] = true;\n\
    \            $queue[] = [$x - 1, $y];\n            $min[$x - 1][$y] = $min[$x][$y];\n\
    \            $min[$x - 1][$y][] = $grid[$x - 1][$y];\n        }\n        if ($x\
    \ < $n - 1 && !$visited[$x + 1][$y]) {\n            $visited[$x + 1][$y] = true;\n\
    \            $queue[] = [$x + 1, $y];\n            $min[$x + 1][$y] = $min[$x][$y];\n\
    \            $min[$x + 1][$y][] = $grid[$x + 1][$y];\n        }\n        if ($y\
    \ > 0 && !$visited[$x][$y - 1]) {\n            $visited[$x][$y - 1] = true;\n\
    \            $queue[] = [$x, $y - 1];\n            $min[$x][$y - 1] = $min[$x][$y];\n\
    \            $min[$x][$y - 1][] = $grid[$x][$y - 1];\n        }\n        if ($y\
    \ < $m - 1 && !$visited[$x][$y + 1]) {\n            $visited[$x][$y + 1] = true;\n\
    \            $queue[] = [$x, $y + 1];\n            $min[$x][$y + 1] = $min[$x][$y];\n\
    \            $min[$x][$y + 1", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = [];\n            $sum = 0;\n            $paths = [];\n           \
    \ dfs($grid, $i, $j, $path, $sum, $paths, $k);\n            if ($sum < $minSum)\
    \ {\n                $minSum = $sum;\n                $minPaths = $paths;\n  \
    \          }\n        }\n    }\n    $minPath = $minPaths[0];\n    for ($i = 1;\
    \ $i < count($minPaths); $i++) {\n        if ($minPaths[$i] < $minPath) {\n  \
    \          $minPath = $minPaths[$i];\n        }\n    }\n    return $minPath;\n\
    }", "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            $paths = [];\n            dfs($grid, $i, $j,\
    \ $k, $path, $sum, $paths);\n            if ($sum < $minSum) {\n             \
    \   $minSum = $sum;\n                $minPaths = $paths;\n            }\n    \
    \    }\n    }\n    $minPath = $minPaths[0];\n    foreach ($minPaths as $path)\
    \ {\n        if ($path < $minPath) {\n            $minPath = $path;\n        }\n\
    \    }\n    return $minPath;\n}", "    $m = count($grid);\n    $n = count($grid[0]);\n\
    \    $min = [];\n    $min[0] = $grid[0][0];\n    for ($i = 1; $i < $m; $i++) {\n\
    \        $min[$i] = $min[$i - 1] < $grid[$i][0] ? $min[$i - 1] : $grid[$i][0];\n\
    \    }\n    for ($j = 1; $j < $n; $j++) {\n        $min[0] = $min[0] < $grid[0][$j]\
    \ ? $min[0] : $grid[0][$j];\n        for ($i = 1; $i < $m; $i++) {\n         \
    \   $min[$i] = $min[$i - 1] < $min[$i] ? $min[$i - 1] : $min[$i];\n          \
    \  $min[$i] = $min[$i] < $grid[$i][$j] ? $min[$i] : $grid[$i][$j];\n        }\n\
    \    }\n    $res = [];\n    $res[0] = $min[0];\n    $i = 0;\n    $j = 0;\n   \
    \ $k--;\n    while ($k > 0) {\n        if ($i + 1 < $m && $min[$i + 1] < $min[$i])\
    \ {\n            $i++;\n        } else if ($j + 1 < $n && $min[$j + 1] < $min[$i])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n        $res[] = $min[$i];\n        $k--;\n    }\n    return $res;\n\
    }\n$grid = [ [1,2,3], [4,5,6], [7,8,9]];\n$k = 3;\n$res = minPath($grid, $k);\n\
    print_r($res);\necho PHP_EOL;\n$grid = [ [5,9,3], [4,1,6], [7,8,2", "    $n =\
    \ count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = [];\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum = $grid[$i][$j];\n            dfs($grid, $i, $j, $visited, $path,\
    \ $sum, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n     \
    \   }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited = [];\n            dfs($grid, $i, $j, $k,\
    \ $path, $sum, $visited);\n            if ($sum < $minSum) {\n               \
    \ $minSum = $sum;\n                $minPath = $path;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            dfs($grid, $visited,\
    \ $i, $j, $k, $path, $sum);\n            if ($sum < $minSum) {\n             \
    \   $minSum = $sum;\n                $minPath = $path;\n            }\n      \
    \  }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid,\
    \ $k, 0, 0, $visited, $minPath, $minPathSum);\n    return $minPath;\n}\n", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  dfs($grid, $i, $j, $visited, $path, $pathSum, $k, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            dfs($grid, $i, $j, $visited, $path, $sum, $k, $minPath,\
    \ $minSum);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum =\
    \ PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $visited[$i][$j] = true;\n            $path = [$grid[$i][$j]];\n\
    \            $sum = $grid[$i][$j];\n            $pathSum = $grid[$i][$j];\n  \
    \          dfs($grid, $visited, $i, $j, $k, $path, $sum, $pathSum, $minPath, $minSum,\
    \ $minPathSum);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid,\
    \ $n, $m, $k, 0, 0, $visited, $minPath, $minPathSum);\n    return $minPath;\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath", "    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    $visited = array_fill(0, $m, array_fill(0, $n,\
    \ false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $sum);\n\
    \            if ($sum < $minSum) {\n                $minSum = $sum;\n        \
    \        $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            dfs($grid, $i, $j, $k, $path, $sum, $minPath, $minSum,\
    \ $minPaths);\n        }\n    }\n    return $minPaths;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $queue = new SplQueue();\n    $queue->enqueue([0, 0, $grid[0][0],\
    \ [$grid[0][0]]]);\n    $visited[0][0] = true;\n    $minPath = [];\n    while\
    \ (!$queue->isEmpty()) {\n        list($i, $j, $sum, $path) = $queue->dequeue();\n\
    \        if (count($path) === $k) {\n            if (empty($minPath) || $path\
    \ < $minPath) {\n                $minPath = $path;\n            }\n          \
    \  continue;\n        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n    \
    \        $visited[$i - 1][$j] = true;\n            $queue->enqueue([$i - 1, $j,\
    \ $sum + $grid[$i - 1][$j], array_merge($path, [$grid[$i - 1][$j]])]);\n     \
    \   }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i\
    \ + 1][$j] = true;\n            $queue->enqueue([$i + 1, $j, $sum + $grid[$i +\
    \ 1][$j], array_merge($path, [$grid[$i + 1][$j]])]);\n        }\n        if ($j\
    \ > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j - 1] = true;\n\
    \            $queue->enqueue([$i, $j - 1, $sum + $grid[$i][$j - 1], array_merge($path,\
    \ [$grid[$i][$j - 1]])]);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n           ", "    $n = count($grid);\n\
    \    $visited = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $path = [];\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $sum, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $paths = [];\n            dfs($grid, $i, $j, $k, $path,\
    \ $sum, $paths);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPaths = $paths;\n            }\n        }\n    }\n\
    \    foreach ($minPaths as $path) {\n        if (count($path) == $k) {\n     \
    \       return $path;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = [];\n    $queue = new SplQueue();\n\
    \    $queue->enqueue([0, 0, $grid[0][0], [$grid[0][0]]]);\n    $visited[0][0]\
    \ = true;\n    while (!$queue->isEmpty()) {\n        list($i, $j, $sum, $path)\
    \ = $queue->dequeue();\n        if (count($path) == $k) {\n            return\
    \ $path;\n        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n        \
    \    $visited[$i - 1][$j] = true;\n            $queue->enqueue([$i - 1, $j, $sum\
    \ + $grid[$i - 1][$j], array_merge($path, [$grid[$i - 1][$j]])]);\n        }\n\
    \        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i\
    \ + 1][$j] = true;\n            $queue->enqueue([$i + 1, $j, $sum + $grid[$i +\
    \ 1][$j], array_merge($path, [$grid[$i + 1][$j]])]);\n        }\n        if ($j\
    \ > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j - 1] = true;\n\
    \            $queue->enqueue([$i, $j - 1, $sum + $grid[$i][$j - 1], array_merge($path,\
    \ [$grid[$i][$j - 1]])]);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n            $queue->enqueue([$i,\
    \ $j + 1, $sum + $grid[$i][$j + 1], array_merge($path, [$grid[$i][$j + 1]])]);\n\
    \        }\n   ", "    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $n = count($grid);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n            $sum\
    \ = 0;\n            $pathSum = 0;\n            $path[] = $grid[$i][$j];\n    \
    \        $sum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n    \
    \        $visited = [];\n            $visited[$i][$j] = true;\n            $queue\
    \ = [[$i, $j]];\n            while (!empty($queue)) {\n                $cur =\
    \ array_shift($queue);\n                $x = $cur[0];\n                $y = $cur[1];\n\
    \                if (count($path) == $k) {\n                    if ($pathSum <\
    \ $minPathSum) {\n                        $minPathSum = $pathSum;\n          \
    \              $minPath = $path;\n                    } else if ($pathSum == $minPathSum)\
    \ {\n                        for ($l = 0; $l < $k; $l++) {\n                 \
    \           if ($path[$l] < $minPath[$l]) {\n                                $minPath\
    \ = $path;\n                                break;\n                         \
    \   } else if ($path[$l] > $minPath[$l]) {\n                                break;\n\
    \                            }\n                        }\n                  \
    \  }\n                    break;\n                }\n                if ($x >\
    \ 0 && !$visited[$x - 1][$y]) {\n                    $visited[$x - 1][$y] = true;\n\
    \                    $queue[] = [$x - 1, $y];\n                    $path[] = $grid[$x\
    \ - 1][$y];\n                    $sum += $grid[$x - 1][$y];\n                \
    \    $pathSum += $grid[$x - 1][$y];\n                }\n                if ($x\
    \ < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$", "   \
    \ $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $path = dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum);\n\
    \            if ($pathSum < $minPathSum) {\n                $minPathSum = $pathSum;\n\
    \                $minPath = $path;\n            }\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $visited, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path,\
    \ $sum);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPath = $path;\n            }\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = PHP_INT_MAX;\n  \
    \  $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $path = [];\n            $path[] = $grid[$i][$j];\n\
    \            $minPath = dfs($grid, $i, $j, $k, $path, $min, $minPath);\n     \
    \   }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $path = [];\n            $sum = 0;\n            dfs($grid,\
    \ $i, $j, $visited, $path, $sum, $k, $minPath, $minSum);\n        }\n    }\n \
    \   return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $res = [];\n\
    \    $min = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n            $cur\
    \ = [$grid[$i][$j]];\n            $curSum = $grid[$i][$j];\n            dfs($grid,\
    \ $visited, $i, $j, $cur, $curSum, $min, $res, $k);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $res;\n}", "    $n = count($grid);\n\
    \    if ($n == 0) {\n        return [];\n    }\n    $m = count($grid[0]);\n  \
    \  if ($m == 0) {\n        return [];\n    }\n    $visited = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $visited[] = array_fill(0, $m, false);\n    }\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $sum, $minPath,\
    \ $minSum);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    if ($n == 0) {\n        return [];\n    }\n    $m = count($grid[0]);\n  \
    \  if ($m == 0) {\n        return [];\n    }\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $sum\
    \ = 0;\n            $paths = [];\n            dfs($grid, $i, $j, $k, $path, $sum,\
    \ $paths);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPaths = $paths;\n            }\n        }\n    }\n    $minPath\
    \ = $minPaths[0];\n    for ($i = 1; $i < count($minPaths); $i++) {\n        if\
    \ ($minPaths[$i] < $minPath) {\n            $minPath = $minPaths[$i];\n      \
    \  }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = [];\n            $sum = 0;\n            $paths = [];\n           \
    \ dfs($grid, $i, $j, $path, $sum, $paths, $k);\n            if ($sum < $minSum)\
    \ {\n                $minSum = $sum;\n                $minPaths = $paths;\n  \
    \          }\n        }\n    }\n    $minPath = $minPaths[0];\n    for ($i = 1;\
    \ $i < count($minPaths); $i++) {\n        if ($minPaths[$i] < $minPath) {\n  \
    \          $minPath = $minPaths[$i];\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $visited, $i,\
    \ $j, $path, $pathSum, $minPath, $minPathSum, $k);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n     \
    \       $path = [];\n            $pathSum = 0;\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $pathSum, $minPath, $minPathSum,\
    \ $visited);\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $n, 0));\n    $res = [];\n    $min = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = 1;\n            $curr = dfs($grid, $visited, $i, $j, $k - 1);\n          \
    \  $visited[$i][$j] = 0;\n            if ($curr < $min) {\n                $min\
    \ = $curr;\n                $res = [$grid[$i][$j]];\n            } else if ($curr\
    \ == $min) {\n                $res[] = $grid[$i][$j];\n            }\n       \
    \ }\n    }\n    sort($res);\n    return $res;\n}", "    $n = count($grid);\n \
    \   $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n   ", "    $N = count($grid);\n    $visited =\
    \ [];\n    for ($i = 0; $i < $N; $i++) {\n        $visited[] = array_fill(0, $N,\
    \ false);\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $N; $i++) {\n        for ($j = 0; $j < $N; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            $visited[$i][$j] = true;\n       \
    \     $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n         \
    \   dfs($grid, $i, $j, $visited, $path, $sum, $minPath, $minSum, $k);\n      \
    \      $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    $minPath\
    \ = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n   \
    \     }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = [];\n            $sum = 0;\n            dfs($grid,\
    \ $i, $j, $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n   \
    \             $minSum = $sum;\n                $minPath = $path;\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n   \
    \ $m = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n\
    \            $path = [$grid[$i][$j]];\n            $sum = $grid[$i][$j];\n   \
    \         dfs($grid, $i, $j, $k - 1, $sum, $path, $visited, $minSum, $minPath);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n  \
    \  $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $visited, $n, $m,\
    \ $k, 0, 0, 0, $minPath);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathLength\
    \ = PHP_INT_MAX;\n    $minPathSumLength = PHP_INT_MAX;\n    $minPathSumLengthPath\
    \ = [];\n    $minPathLengthPath = [];\n    $minPathSumPath = [];\n    $minPathPath\
    \ = [];\n    $minPathSumPath = [];\n    $minPathSumLengthPath = [];\n    $minPathLengthPath\
    \ = [];\n    $path = [];\n    $pathSum = 0;\n    $pathLength = 0;\n    $pathSumLength\
    \ = 0;\n    $pathSumLengthPath = [];\n    $pathLengthPath = [];\n    $pathSumPath\
    \ = [];\n    $pathPath = [];\n    $pathSumPath = [];\n    $pathSumLengthPath =\
    \ [];\n    $pathLengthPath = [];\n    $minPathSumLengthPath = [];\n    $minPathLengthPath\
    \ = [];\n    $minPathSumPath = [];\n    $minPathPath = [];\n    $minPathSumPath\
    \ = [];\n    $minPathSumLengthPath = [];\n    $minPathLengthPath = [];\n    $minPathSumLengthPath\
    \ = [];\n    $minPathLengthPath = [];\n    $minPathSumPath = [];\n    $minPathPath\
    \ = [];\n    $minPathSumPath = [];\n    $minPathSumLengthPath = [];\n    $minPathLengthPath\
    \ = [];\n    $minPathSumLengthPath = [];\n    $minPathLengthPath = [];\n    $minPathSumPath\
    \ = [];\n    $minPathPath = [];\n    $minPathSumPath = [];\n    $minPathSumLengthPath\
    \ = [];\n    $minPathLengthPath = [];\n    $minPathSumLengthPath = [];\n    $minPathLengthPath\
    \ = [];\n    $minPathSumPath = [];\n    $minPathPath = [];\n    $minPathSumPath\
    \ = [];\n    $minPathSumLengthPath = [];\n    $minPathLengthPath = [];\n    $minPathSumLengthPath\
    \ = [];", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n  \
    \  $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum", "    $n =\
    \ count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = dfs($grid, $visited, $minPath, $minPathSum, $k, 0, 0, 0);\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $min = [];\n    $min[] = $grid[0][0];\n    $visited[0][0] = true;\n    $minPath\
    \ = [];\n    $minPath[] = [0, 0];\n    $minPaths = [];\n    $minPaths[] = $minPath;\n\
    \    $minPaths = minPathHelper($grid, $k, $visited, $min, $minPaths);\n    $minPath\
    \ = $minPaths[0];\n    $min = [];\n    for ($i = 0; $i < count($minPath); $i++)\
    \ {\n        $min[] = $grid[$minPath[$i][0]][$minPath[$i][1]];\n    }\n    return\
    \ $min;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $visited[$i][$j] = true;\n            $path = [$grid[$i][$j]];\n\
    \            $sum = $grid[$i][$j];\n            dfs($grid, $visited, $i, $j, $path,\
    \ $sum, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n     \
    \   }\n    }\n    return $minPath;\n}", "    $m = count($grid);\n    $n = count($grid[0]);\n\
    \    $visited = array_fill(0, $m, array_fill(0, $n, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minSumPath = [];\n    for ($i = 0; $i < $m;\
    \ $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = [$grid[$i][$j]];\n            $sum = $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $sum, $k, $minPath, $minSum,\
    \ $minSumPath);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            $paths = [];\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $paths);\n            if ($sum < $minSum) {\n     \
    \           $minSum = $sum;\n                $minPaths = $paths;\n           \
    \ }\n        }\n    }\n    $minPath = $minPaths[0];\n    for ($i = 1; $i < count($minPaths);\
    \ $i++) {\n        if ($minPaths[$i] < $minPath) {\n            $minPath = $minPaths[$i];\n\
    \        }\n    }\n    return $minPath;\n}", "    $m = count($grid);\n    $n =\
    \ count($grid[0]);\n    $visited = array_fill(0, $m, array_fill(0, $n, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $sum, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            $visited[$i][$j] = true;\n       \
    \     $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n         \
    \   dfs($grid, $visited, $i, $j, $path, $sum, $k, $minPath, $minSum);\n      \
    \      $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n    $minPathValue\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $pathValue = 0;\n        \
    \    dfs($grid, $visited, $i, $j, $k, $path, $pathValue);\n            if ($pathValue\
    \ < $minPathValue) {\n                $minPath = $path;\n                $minPathValue\
    \ = $pathValue;\n            }\n        }\n    }\n    return $minPath;\n}", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $min", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $queue = new SplQueue();\n    $queue->enqueue([0, 0, $grid[0][0],\
    \ [$grid[0][0]]]);\n    $visited[0][0] = true;\n    $minPath = null;\n    while\
    \ (!$queue->isEmpty()) {\n        list($i, $j, $sum, $path) = $queue->dequeue();\n\
    \        if ($sum > $k) {\n            continue;\n        }\n        if ($sum\
    \ == $k) {\n            if ($minPath === null || $path < $minPath) {\n       \
    \         $minPath = $path;\n            }\n            continue;\n        }\n\
    \        if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j]\
    \ = true;\n            $queue->enqueue([$i - 1, $j, $sum + $grid[$i - 1][$j],\
    \ array_merge($path, [$grid[$i - 1][$j]])]);\n        }\n        if ($i < $n -\
    \ 1 && !$visited[$i + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n  \
    \          $queue->enqueue([$i + 1, $j, $sum + $grid[$i + 1][$j], array_merge($path,\
    \ [$grid[$i + 1][$j]])]);\n        }\n        if ($j > 0 && !$visited[$i][$j -\
    \ 1]) {\n            $visited[$i][$j - 1] = true;\n            $queue->enqueue([$i,\
    \ $j - 1, $sum + $grid[$i][$j - 1], array_merge($path, [$grid[$i][$j - 1]])]);\n\
    \        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $visited",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $queue = new SplQueue();\n    $queue->enqueue([0,\
    \ 0, 0, []]);\n    $visited[0][0] = true;\n    $minPath = [];\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $len, $path) = $queue->dequeue();\n        if ($len\
    \ == $k) {\n            if (empty($minPath) || $path < $minPath) {\n         \
    \       $minPath = $path;\n            }\n            continue;\n        }\n \
    \       if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j]\
    \ = true;\n            $queue->enqueue([$i - 1, $j, $len + 1, array_merge($path,\
    \ [$grid[$i - 1][$j]])]);\n        }\n        if ($i < $n - 1 && !$visited[$i\
    \ + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n            $queue->enqueue([$i\
    \ + 1, $j, $len + 1, array_merge($path, [$grid[$i + 1][$j]])]);\n        }\n \
    \       if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j -\
    \ 1] = true;\n            $queue->enqueue([$i, $j - 1, $len + 1, array_merge($path,\
    \ [$grid[$i][$j - 1]])]);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n            $queue->enqueue([$i,\
    \ $j + 1, $len + 1, array_merge($path, [$grid[$i][$j + 1]])]);\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = [];\n    $min[0] = $grid[0][0];\n    $min[1]\
    \ = $grid[0][1];\n    $min[2] = $grid[1][0];\n    $min[3] = $grid[1][1];\n   \
    \ $min = min($min);\n    $minPath = [];\n    $minPath[0] = $min;\n    for ($i\
    \ = 1; $i < $k; $i++) {\n        $minPath[$i] = $grid[$minPath[$i - 1] - 1];\n\
    \    }\n    return $minPath;\n}\n$grid = [ [1,2,3], [4,5,6], [7,8,9]];\n$k = 3;\n\
    print_r(minPath($grid, $k));", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited = [];\n            dfs($grid, $i, $j, $k,\
    \ $path, $sum, $visited);\n            if ($sum < $minSum) {\n               \
    \ $minSum = $sum;\n                $minPath = $path;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = [];\n    $min[0] = [];\n    for ($i = 0; $i < $n; $i++) {\n      \
    \  for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j] = [];\n           \
    \ $min[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($i = 1; $i < $k;\
    \ $i++) {\n        $min[0][0][$i] = $min[0][0][$i - 1];\n        for ($j = 1;\
    \ $j < $m; $j++) {\n            $min[0][$j][$i] = min($min[0][$j - 1][$i - 1],\
    \ $min[0][$j][$i - 1]);\n        }\n        for ($j = 1; $j < $n; $j++) {\n  \
    \          $min[$j][0][$i] = min($min[$j - 1][0][$i - 1], $min[$j][0][$i - 1]);\n\
    \        }\n        for ($j = 1; $j < $n; $j++) {\n            for ($l = 1; $l\
    \ < $m; $l++) {\n                $min[$j][$l][$i] = min(\n                   \
    \ $min[$j - 1][$l][$i - 1],\n                    $min[$j][$l - 1][$i - 1],\n \
    \                   $min[$j][$l][$i - 1]\n                );\n            }\n\
    \        }\n    }\n    $path = [];\n    $path[$k - 1] = $min[$n - 1][$m - 1][$k\
    \ - 1];\n    $i = $n - 1;\n    $j = $m - 1;\n    for ($l = $k - 2; $l >= 0; $l--)\
    \ {\n        if ($i > 0 && $min[$i - 1][$j][$l] == $path[$l + 1]) {\n        \
    \    $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $path, $sum);\n            if ($sum < $minSum)\
    \ {\n                $minSum = $sum;\n                $minPath = $path;\n    \
    \        }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $k, $visited, $minPath, $minSum,\
    \ $minPathSum, 0, 0, 0, 0);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path,\
    \ $sum);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPath = $path;\n            }\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minSumPath = [];\n    for ($i = 0; $i < $n; $i++) {\n \
    \       for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n\
    \            $path = [$grid[$i][$j]];\n            $sum = $grid[$i][$j];\n   \
    \         $sumPath = [$grid[$i][$j]];\n            dfs($grid, $visited, $i, $j,\
    \ $k, $path, $sum, $sumPath, $minPath, $minSum, $minSumPath);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n \
    \   $minPaths = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $path = [];\n            $sum = 0;\n            $paths\
    \ = [];\n            dfs($grid, $i, $j, $k, $path, $sum, $paths);\n          \
    \  if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPaths\
    \ = $paths;\n            }\n        }\n    }\n    $minPath = $minPaths[0];\n \
    \   for ($i = 1; $i < count($minPaths); $i++) {\n        if ($minPaths[$i] < $minPath)\
    \ {\n            $minPath = $minPaths[$i];\n        }\n    }\n    return $minPath;\n\
    }", "    $m = count($grid);\n    $n = count($grid[0]);\n    $minPath = [];\n \
    \   $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $paths = [];\n            dfs($grid, $i, $j, $k, $path,\
    \ $sum, $paths);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPaths = $paths;\n            }\n        }\n    }\n\
    \    $minPath = $minPaths[0];\n    for ($i = 1; $i < count($minPaths); $i++) {\n\
    \        if ($minPaths[$i] < $minPath) {\n            $minPath = $minPaths[$i];\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = [];\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $visited, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $m = count($grid);\n\
    \    $n = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n \
    \   for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n   \
    \         $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j, $k,\
    \ $path, $sum);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPath = $path;\n            }\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = dfs($grid, $visited, $minPath, $minPathSum, $k, 0, 0, 0);\n\
    \    return $minPath;\n}", "    $m = count($grid);\n    $n = count($grid[0]);\n\
    \    $visited = array_fill(0, $m, array_fill(0, $n, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $m; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $visited, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = [$grid[$i][$j]];\n            $sum = $grid[$i][$j];\n\
    \            dfs($grid, $visited, $i, $j, $path, $sum, $k, $minPath, $minSum,\
    \ $minPathSum);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \   ", "    $n = count($grid);\n    $dp = array_fill(0, $n, array_fill(0, $n,\
    \ array_fill(0, $k + 1, -1)));\n    $min = PHP_INT_MAX;\n    $minPath = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $min = min($min, dfs($grid, $dp, $i, $j, $k));\n        }\n    }\n\
    \    return $min;\n}", "    $m = count($grid);\n    $n = count($grid[0]);\n  \
    \  $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i\
    \ = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            $paths = [];\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $paths);\n            if ($sum < $minSum) {\n     \
    \           $minSum = $sum;\n                $minPaths = $paths;\n           \
    \ }\n        }\n    }\n    $minPath = $minPaths[0];\n    for ($i = 1; $i < count($minPaths);\
    \ $i++) {\n        if ($minPaths[$i] < $minPath) {\n            $minPath = $minPaths[$i];\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            $visited = [];\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $visited);\n            if ($sum < $minSum) {\n   \
    \             $minSum = $sum;\n                $minPath = $path;\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n   \
    \ $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            $pathSum = 0;\n   \
    \         $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n   \
    \         $sum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j] * $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $sum, $pathSum, $minPath, $minSum,\
    \ $minPathSum, $k);\n            $visited[$i][$j] = false;\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $pathSum = 0;\n            dfs($grid, $i, $j, $k,\
    \ $visited, $path, $sum, $pathSum);\n            if ($sum < $minSum) {\n     \
    \           $minSum = $sum;\n                $minPath = $path;\n             \
    \   $minPathSum = $pathSum;\n            } else if ($sum == $minSum && $pathSum\
    \ < $minPathSum) {\n                $minPath = $path;\n                $minPathSum\
    \ = $pathSum;\n            }\n        }\n    }\n    return $minPath;\n}", "  \
    \  $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            $visited[$i][$j] = true;\n            dfs($grid, $i, $j, $k, $visited,\
    \ $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            dfs($grid, $visited,\
    \ $i, $j, $k, $path, $sum);\n            $visited[$i][$j] = false;\n         \
    \   if ($sum < $minSum) {\n                $minSum = $sum;\n                $minPath\
    \ = $path;\n            }\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            $path = [];\n            $pathSum = 0;\n        \
    \    $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n        \
    \    $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited, $path,\
    \ $pathSum, $minPath, $minPathSum, $k);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $visited[$i][$j] = true;\n            $path = [$grid[$i][$j]];\n  \
    \          $pathSum = $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $m = count($grid);\n    $n =\
    \ count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n         \
    \   $path = [];\n            $pathSum = 0;\n            $visited = [];\n     \
    \       dfs($grid, $i, $j, $k, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $visited, $minPath,\
    \ $minPathSum, 0, 0, $k, 0);\n    return $minPath;\n}\n", "    // Write your code\
    \ here\n    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            $paths = [];\n            dfs($grid, $i, $j, $k, $path,\
    \ $sum, $paths);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPaths = $paths;\n            }\n        }\n    }\n\
    \    foreach ($minPaths as $path) {\n        $minPath[] = $path[0];\n    }\n \
    \   return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathValue\
    \ = PHP_INT_MAX;\n    $minPathValueIndex = PHP_INT_MAX;\n    $minPathValueIndex2\
    \ = PHP_INT_MAX;\n    $minPathValueIndex3 = PHP_INT_MAX;\n    $minPathValueIndex4\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $sum = 0;\n            $pathSum\
    \ = 0;\n            $pathValue = 0;\n            $pathValueIndex = 0;\n      \
    \      $pathValueIndex2 = 0;\n            $pathValueIndex3 = 0;\n            $pathValueIndex4\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $pathValue = $grid[$i][$j];\n            $pathValueIndex = $grid[$i][$j];\n\
    \            $pathValueIndex2 = $grid[$i][$j];\n            $pathValueIndex3 =\
    \ $grid[$i][$j];\n            $pathValueIndex4 = $grid[$i][$j];\n            $visited[$i][$j]\
    \ = false;\n            $path = minPathHelper($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $pathSum, $pathValue, $pathValueIndex, $pathValueIndex2, $pathValueIndex3,\
    \ $pathValueIndex4);\n            if ($pathSum < $minPathSum) {\n            \
    \    $minPath = $path;\n                $minSum = $sum;\n                $minPathSum\
    \ = $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited = [];\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n\
    \            if ($sum < $minSum) {\n                $minSum = $sum;\n        \
    \        $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $m = count($grid);\n    $n = count($grid[0]);\n    $visited = array_fill(0,\
    \ $m, array_fill(0, $n, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $m; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j,\
    \ $visited, $path, $sum, $k, $minPath, $minSum);\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path\
    \ = [];\n            $pathSum = 0;\n            dfs($grid, $visited, $i, $j, $k,\
    \ $path, $pathSum, $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited = [];\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $path, $sum, $visited, $minPath, $minSum);\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $sum);\n \
    \           if ($sum < $minSum) {\n                $minSum = $sum;\n         \
    \       $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $dp[$i][$j] = [];\n            for ($l = 0; $l < $k; $l++) {\n           \
    \     $dp[$i][$j][$l] = PHP_INT_MAX;\n            }\n        }\n    }\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $dp[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($l = 1; $l < $k;\
    \ $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j\
    \ < $m; $j++) {\n                if ($i > 0) {\n                    $dp[$i][$j][$l]\
    \ = min($dp[$i][$j][$l], $dp[$i - 1][$j][$l - 1]);\n                }\n      \
    \          if ($i < $n - 1) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1]);\n                }\n                if ($j > 0) {\n\
    \                    $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j - 1][$l\
    \ - 1]);\n                }\n                if ($j < $m - 1) {\n            \
    \        $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j + 1][$l - 1]);\n  \
    \              }\n            }\n        }\n    }\n    $min = PHP_INT_MAX;\n \
    \   $minI = -1;\n    $minJ = -1;\n   ", "    $m = count($grid);\n    $n = count($grid[0]);\n\
    \    $visited = array_fill(0, $m, array_fill(0, $n, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $m; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n    \
    \        $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum);\n            $visited[$i][$j] = false;\n  \
    \      }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = [];\n            $sum = 0;\n    \
    \        dfs($grid, $i, $j, $k, $visited, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $currPath\
    \ = [];\n            $currSum = 0;\n            $visited[$i][$j] = true;\n   \
    \         dfs($grid, $visited, $i, $j, $currPath, $currSum, $minPath, $minSum,\
    \ $k);\n            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSumHelper = function ($grid, $visited, $i, $j, $k,\
    \ $sum, $path) use (&$minPath, &$minSum, &$minPathSum, &$minPathSumHelper) {\n\
    \        if ($k == 0) {\n            if ($sum < $minSum) {\n                $minSum\
    \ = $sum;\n                $minPath = $path;\n            } else if ($sum == $minSum)\
    \ {\n                if ($path < $minPath) {\n                    $minPath = $path;\n\
    \                }\n            }\n            return;\n        }\n        if\
    \ ($sum > $minSum) {\n            return;\n        }\n        $visited[$i][$j]\
    \ = true;\n        $path[] = $grid[$i][$j];\n        if ($i - 1 >= 0 && !$visited[$i\
    \ - 1][$j]) {\n            $minPathSumHelper($grid, $visited, $i - 1, $j, $k -\
    \ 1, $sum + $grid[$i - 1][$j], $path);\n        }\n        if ($i + 1 < count($grid)\
    \ && !$visited[$i + 1][$j]) {\n            $minPathSumHelper($grid, $visited,\
    \ $i + 1, $j, $k - 1, $sum + $grid[$i + 1][$j], $path);\n        }\n        if\
    \ ($j - 1 >= 0 && !$visited[$i][$j - 1]) {\n            $minPathSumHelper($grid,\
    \ $visited, $i, $j - 1, $k - 1, $sum + $grid[$i][$j -", "    $n = count($grid);\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            $path = [];\n        \
    \    $pathSum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n       \
    \     $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}", " \
    \   $n = count($grid);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSumHelper = function ($grid, $visited, $i, $j, $k,\
    \ $sum, $path) use (&$minPath, &$minSum, &$minPathSum, &$minPathSumHelper) {\n\
    \        if ($k == 0) {\n            if ($sum < $minSum) {\n                $minSum\
    \ = $sum;\n                $minPath = $path;\n            } else if ($sum == $minSum)\
    \ {\n                $pathSum = 0;\n                for ($i = 0; $i < count($path);\
    \ $i++) {\n                    $pathSum += $path[$i];\n                }\n   \
    \             if ($pathSum < $minPathSum) {\n                    $minPathSum =\
    \ $pathSum;\n                    $minPath = $path;\n                }\n      \
    \      }\n            return;\n        }\n        $n = count($grid);\n       \
    \ if ($i < 0 || $i >= $n || $j < 0 || $j >= $n || $visited[$i][$j]) {\n      \
    \      return;\n        }\n        $visited[$i][$j] = true;\n        $path[] =\
    \ $grid[$i][$j];\n        $minPathSumHelper($grid, $visited, $i - 1, $j, $k -\
    \ 1, $sum + $grid[$i][$j], $path);\n        $minPathSumHelper($grid, $visited,\
    \ $i + 1, $j, $k - 1, $sum + $grid[$i][$j], $path);\n        $minPathSumHelper($grid,\
    \ $visited, $i, $j - 1, $k - 1, $sum + $grid[$i][$j], $path);\n        $min",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  dfs($grid, $i, $j, $k, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $visited\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $visited[$i][$j] = false;\n        }\n    }\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path =\
    \ [];\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n     \
    \       $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n   \
    \         dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPaths = [];\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = 0; $j < $n; $j++) {\n            $path = [];\n            $sum =\
    \ 0;\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n      \
    \      $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n        \
    \    $pathSum += $grid[$i][$j] * $grid[$i][$j];\n            dfs($grid, $i, $j,\
    \ $k - 1, $visited, $path, $sum, $pathSum, $minPath, $minSum, $minPathSum, $minPaths);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPaths;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    $minPath = [];\n  \
    \  $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $sum, $pathSum, $minPath, $minSum, $minPathSum, $k);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $path = [];\n            $pathSum = 0;\n            $path[] =\
    \ $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            $paths =\
    \ [[$i, $j]];\n            $visited = [];\n            $visited[$i][$j] = true;\n\
    \            $k--;\n            while ($k > 0) {\n                $newPaths =\
    \ [];\n                foreach ($paths as $path) {\n                    $i = $path[0];\n\
    \                    $j = $path[1];\n                    if ($i > 0 && !$visited[$i\
    \ - 1][$j]) {\n                        $newPaths[] = [$i - 1, $j];\n         \
    \               $visited[$i - 1][$j] = true;\n                        $path[]\
    \ = $grid[$i - 1][$j];\n                        $pathSum += $grid[$i - 1][$j];\n\
    \                    }\n                    if ($i < $rows - 1 && !$visited[$i\
    \ + 1][$j]) {\n                        $newPaths[] = [$i + 1, $j];\n         \
    \               $visited[$i + 1][$j] = true;\n                        $path[]\
    \ = $grid[$i + 1][$j];\n                        $pathSum += $grid[$i + 1][$j];\n\
    \                    }\n                    if ($j > 0 && !$visited[$i][$j - 1])\
    \ {\n                        $newPaths[] = [$i, $j - 1];\n                   \
    \     $visited[$i][$j - 1] = true;\n                        $path[] = $grid[$i][$j\
    \ - 1];\n                        $pathSum += $grid[$i][$j - 1];\n            \
    \        }\n                    if ($j < $cols - 1 && !$visited[", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j, $k,\
    \ $path, $sum);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPath = $path;\n            }\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $sum);\n \
    \           if ($sum < $minSum) {\n                $minSum = $sum;\n         \
    \       $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = [];\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    $min = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $min[$i][$j] = [];\n        }\n    }\n    $min[0][0][] = $grid[0][0];\n  \
    \  $visited[0][0] = true;\n    $queue = [[0, 0]];\n    while (!empty($queue))\
    \ {\n        $cur = array_shift($queue);\n        $i = $cur[0];\n        $j =\
    \ $cur[1];\n        $visited[$i][$j] = true;\n        $neighbors = getNeighbors($grid,\
    \ $i, $j);\n        foreach ($neighbors as $neighbor) {\n            $ni = $neighbor[0];\n\
    \            $nj = $neighbor[1];\n            if ($visited[$ni][$nj]) {\n    \
    \            continue;\n            }\n            $visited[$ni][$nj] = true;\n\
    \            $min[$ni][$nj] = $min[$i][$j];\n            $min[$ni][$nj][] = $grid[$ni][$nj];\n\
    \            $queue[] = [$ni, $nj];\n        }\n    }\n    $res = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   if (count($min[$i][$j]) === $k) {\n                $res[] = $min[$i][$j];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  $len = min(", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath",
  "    $n = count($grid);\n    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $visited, $minPath, $minPathSum, $k, 0, 0, 0);\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = [];\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n         \
    \   $path = [];\n            $sum = 0;\n            dfs($grid, $i, $j, $k, $visited,\
    \ $path, $sum);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPath = $path;\n            }\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n        \
    \    $sum = 0;\n            dfs($grid, $i, $j, $visited, $path, $sum, $k, $minPath,\
    \ $minSum);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
