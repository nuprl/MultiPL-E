name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0,\
  \ 1, 2, 3, 4]\nfunction sort_array($arr) {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n    $arr_dec[$key]\
    \ = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec, SORT_ASC, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\necho\
    \ sort_array([1, 5, 2, 3, 4]) . \"\\n\";\necho sort_array([-2, -3, -4, -5, -6])\
    \ . \"\\n\";\necho sort_array([1, 0, 2, 3, 4]) . \"\\n\";", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen',\
    \ $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n  $arr = array_keys($arr);\n\
    \  $arr = array_map('bindec', $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($v)\
    \ {\n    return [$v, decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($v) {\n    return\
    \ $v[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  // Your code here\n  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  \
    \  $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1], '1');\n\
    \        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    return substr_count($a[1], '1') - substr_count($b[1],\
    \ '1');\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }\n", "  // your code here\n}", "    $arr = array_map(function($n) {\n       \
    \ return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n\
    \        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    $binary = decbin($num);\n    $ones = substr_count($binary, '1');\n  \
    \  return [$ones, $num];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if\
    \ ($a[0] === $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0] -\
    \ $b[0];\n  });\n  return array_map(function($num) {\n    return $num[1];\n  },\
    \ $arr);\n}\n\necho sort_array([1, 5, 2, 3, 4]) . PHP_EOL;\necho sort_array([-2,\
    \ -3, -4, -5, -6]) . PHP_EOL;\necho sort_array([1, 0, 2, 3, 4]) . PHP_EOL;", " \
    \   $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n    },\
    \ $arr);\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1],\
    \ '1');\n        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($x) {\n        return $x[0];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] <=> $b[0];\n    }\n    return $a\
    \ <=> $b;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }\n", "  $ones = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key] =\
    \ substr_count(decbin($value), '1');\n  }\n  array_multisort($ones, SORT_ASC,\
    \ $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($v) {\n    return\
    \ [$v, decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 =\
    \ substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1\
    \ == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [\n      'ones' => substr_count(decbin($n),\
    \ '1'),\n      'dec' => $n\n    ];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a['ones'] == $b['ones']) {\n      return $a['dec'] - $b['dec'];\n\
    \    }\n    return $a['ones'] - $b['ones'];\n  });\n  return array_map(function($n)\
    \ {\n    return $n['dec'];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    $ones = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] === $b[1]) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($a) {\n    return $a[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n\necho\
    \ sort_array([1, 5, 2, 3, 4]) . \"\\n\";\necho sort_array([-2, -3, -4, -5, -6])\
    \ . \"\\n\";\necho sort_array([1, 0, 2, 3, 4]) . \"\\n\";", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($a) {\n    return [$a,\
    \ decbin($a)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 === $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n  \
    \  return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($v) {\n    return [\n      'dec'\
    \ => $v,\n      'bin' => decbin($v)\n    ];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a = $a['bin'];\n    $b = $b['bin'];\n    $a = str_replace('0', '',\
    \ $a);\n    $b = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b))\
    \ {\n      return $a['dec'] - $b['dec'];\n    }\n    return strlen($a) - strlen($b);\n\
    \  });\n  return array_map(function($v) {\n    return $v['dec'];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n\
    \    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "    $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1],\
    \ '1');\n        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($x) {\n        return $x[0];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n \
    \   return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n \
    \   return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value) {\n   \
    \ $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num) {\n\
    \    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $aOnes = substr_count($a[1], '1');\n    $bOnes = substr_count($b[1],\
    \ '1');\n    if ($aOnes === $bOnes) {\n      return $a[0] - $b[0];\n    }\n  \
    \  return $aOnes - $bOnes;\n  });\n  return array_map(function($num) {\n    return\
    \ $num[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($num) {\n      \
    \  return [$num, decbin($num)];\n    }, $arr);\n    usort($arr, function($a, $b)\
    \ {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n  \
    \  return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $num) {\n\
    \    if ($num < 0) {\n      $zeros[] = $num;\n    } else {\n      $ones[] = $num;\n\
    \    }\n  }\n  usort($ones, function($a, $b) {\n    $a = decbin($a);\n    $b =\
    \ decbin($b);\n    $a = substr_count($a, '1');\n    $b = substr_count($b, '1');\n\
    \    if ($a == $b) {\n      return $a < $b ? -1 : 1;\n    }\n    return $a < $b\
    \ ? -1 : 1;\n  });\n  sort($zeros);\n  return array_merge($ones, $zeros);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\necho sort_array([1,\
    \ 5, 2, 3, 4]) . \"\\n\";\necho sort_array([-2, -3, -4, -5, -6]) . \"\\n\";\n\
    echo sort_array([1, 0, 2, 3, 4]) . \"\\n\";", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = str_split($a);\n\
    \        $b = str_split($b);\n        $a = array_sum($a);\n        $b = array_sum($b);\n\
    \        if ($a == $b) {\n            return $a[0] - $b[0];\n        }\n     \
    \   return $a - $b;\n    });\n    $arr = array_map(function($n) {\n        return\
    \ $n[0];\n    }, $arr);\n    return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    $ones = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n\necho sort_array([1, 5, 2, 3, 4]) . \"\\n\";\necho sort_array([-2,\
    \ -3, -4, -5, -6]) . \"\\n\";\necho sort_array([1, 0, 2, 3, 4]) . \"\\n\";", " \
    \ $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = strlen(preg_replace('/[^1]/', '', $a[1]));\n\
    \    $b_ones = strlen(preg_replace('/[^1]/', '', $b[1]));\n    if ($a_ones ==\
    \ $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    $n = (string) $n;\n    $n = str_split($n);\n    $n = array_map(function($n)\
    \ {\n      return (int) $n;\n    }, $n);\n    $n = array_sum($n);\n    return\
    \ $n;\n  }, $arr);\n  $arr = array_map(function($n) {\n    $n = (string) $n;\n\
    \    $n = str_split($n);\n    $n = array_map(function($n) {\n      return (int)\
    \ $n;\n    }, $n);\n    $n = array_sum($n);\n    return $n;\n  }, $arr);\n  $arr\
    \ = array_map(function($n) {\n    $n = (string) $n;\n    $n = str_split($n);\n\
    \    $n = array_map(function($n) {\n      return (int) $n;\n    }, $n);\n    $n\
    \ = array_sum($n);\n    return $n;\n  }, $arr);\n  $arr = array_map(function($n)\
    \ {\n    $n = (string) $n;\n    $n = str_split($n);\n    $n = array_map(function($n)\
    \ {\n      return (int) $n;\n    }, $n);\n    $n = array_sum($n);\n    return\
    \ $n;\n  }, $arr);\n  $arr = array_map(function($n) {\n    $n = (string) $n;\n\
    \    $n = str_split($n);\n    $n = array_map(function($n) {\n      return (int)\
    \ $n;\n    }, $n);\n    $n = array_sum($n);\n    return $n;\n  }, $arr);\n  $arr\
    \ = array_map(function($n) {\n    $n = (string) $n;\n    $n = str_split($n);\n\
    \    $n = array_map(function($n) {\n      return (int) $n;\n    }, $n);\n    $n\
    \ = array_", "    $arr_ones = array();\n    $arr_dec = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n        $arr_dec[$key] = $value;\n    }\n    array_multisort($arr_ones,\
    \ SORT_ASC, $arr_dec, SORT_ASC, $arr);\n    return $arr;\n}\n", "    $ones = [];\n\
    \    foreach ($arr as $key => $value) {\n        $ones[$key] = substr_count(decbin($value),\
    \ '1');\n    }\n    array_multisort($ones, SORT_ASC, $arr);\n    return $arr;\n\
    }\n", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen', $arr);\n\
    \  $arr = array_combine($arr, $arr);\n  ksort($arr);\n  $arr = array_keys($arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  \
    \  $arr = array_map(function($num) {\n        return [$num, decbin($num)];\n \
    \   }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1],\
    \ '1');\n        $b_ones = substr_count($b[1], '1');\n        if ($a_ones ===\
    \ $b_ones) {\n            return $a[0] - $b[0];\n        }\n        return $a_ones\
    \ - $b_ones;\n    });\n    return array_map(function($num) {\n        return $num[0];\n\
    \    }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a\
    \ = $a[1];\n        $b = $b[1];\n        $a = substr_count($a, '1');\n       \
    \ $b = substr_count($b, '1');\n        if ($a === $b) {\n            return $a[0]\
    \ - $b[0];\n        }\n        return $a - $b;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    if (isset($a['1'])\
    \ && isset($b['1'])) {\n      if ($a['1'] == $b['1']) {\n        return $a[0]\
    \ - $b[0];\n      }\n      return $a['1'] - $b['1'];\n    }\n    if (isset($a['1']))\
    \ {\n      return -1;\n    }\n    if (isset($b['1'])) {\n      return 1;\n   \
    \ }\n    return $a[0] - $b[0];\n  });\n  $arr = array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n  \
    \  $bin = decbin($x);\n    $ones = substr_count($bin, '1');\n    return [$x, $ones];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n  \
    \    return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "    $arr =\
    \ array_map(function($x) {\n        return [$x, decbin($x)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1], '1');\n\
    \        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($x) {\n        return $x[0];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  $zeros = [];\n  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n\
    \    $count = substr_count($binary, '1');\n    if ($count == 0) {\n      $zeros[]\
    \ = $value;\n    } else {\n      $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n\
    \  $result = [];\n  foreach ($ones as $key => $value) {\n    sort($value);\n \
    \   $result = array_merge($result, $value);\n  }\n  sort($zeros);\n  $result =\
    \ array_merge($result, $zeros);\n  return $result;\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n  \
    \  return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));", "    $arr = array_map(function($num)\
    \ {\n        return [$num, decbin($num)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones === $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n}\n", "  $ones = array_map(function($n)\
    \ {\n    return substr_count(decbin($n), '1');\n  }, $arr);\n  array_multisort($ones,\
    \ $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num) {\n    $ones\
    \ = substr_count(decbin($num), '1');\n    return [$num, $ones];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($num)\
    \ {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2, 3,\
    \ 4])) . \"\\n\";\necho implode(', ', sort_array([-2, -3, -4, -5, -6])) . \"\\\
    n\";\necho implode(', ', sort_array([1, 0, 2, 3, 4])) . \"\\n\";", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num) {\n\
    \    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 =\
    \ substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1\
    \ == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  \
    \  $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a = substr_count($a[1], '1');\n\
    \        $b = substr_count($b[1], '1');\n        if ($a == $b) {\n           \
    \ return $a[0] - $b[0];\n        }\n        return $a - $b;\n    });\n    return\
    \ array_map(function($x) {\n        return $x[0];\n    }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n \
    \   if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n \
    \   return $num[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($v) {\n\
    \        return [$v, decbin($v)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = substr_count($a,\
    \ '1');\n        $b = substr_count($b, '1');\n        if ($a == $b) {\n      \
    \      return $a[0] - $b[0];\n        }\n        return $a - $b;\n    });\n  \
    \  return array_map(function($v) {\n        return $v[0];\n    }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "    $arr = array_map(function($num)\
    \ {\n        return [\n            'num' => $num,\n            'ones' => substr_count(decbin($num),\
    \ '1'),\n        ];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   if ($a['ones'] == $b['ones']) {\n            return $a['num'] - $b['num'];\n\
    \        }\n        return $a['ones'] - $b['ones'];\n    });\n    return array_map(function($num)\
    \ {\n        return $num['num'];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2, 3, 4])) .\
    \ \"\\n\";\necho implode(', ', sort_array([-2, -3, -4, -5, -6])) . \"\\n\";\n\
    echo implode(', ', sort_array([1, 0, 2, 3, 4])) . \"\\n\";", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = str_split($a);\n\
    \        $b = str_split($b);\n        $a = array_count_values($a);\n        $b\
    \ = array_count_values($b);\n        if (isset($a['1']) && isset($b['1'])) {\n\
    \            if ($a['1'] == $b['1']) {\n                return $a[0] - $b[0];\n\
    \            }\n            return $a['1'] - $b['1'];\n        }\n        if (isset($a['1']))\
    \ {\n            return -1;\n        }\n        if (isset($b['1'])) {\n      \
    \      return 1;\n        }\n        return $a[0] - $b[0];\n    });\n    $arr\
    \ = array_map(function($n) {\n        return $n[0];\n    }, $arr);\n    return\
    \ $arr;\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n  \
    \  }\n    return $a - $b;\n  });\n  $arr = array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if (decbin($value) == 1) {\n      $ones[] =\
    \ $value;\n    } else {\n      $zeros[] = $value;\n    }\n  }\n  sort($ones);\n\
    \  sort($zeros);\n  return array_merge($ones, $zeros);\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones === $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "    $ones = [];\n    foreach\
    \ ($arr as $key => $value) {\n        $ones[$key] = substr_count(decbin($value),\
    \ '1');\n    }\n    array_multisort($ones, SORT_ASC, $arr);\n    return $arr;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [decbin($n), $n];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[0], '1');\n    $b_ones = substr_count($b[0],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[1] - $b[1];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[1];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a = $a[1];\n        $b = $b[1];\n        $a = substr_count($a, '1');\n  \
    \      $b = substr_count($b, '1');\n        if ($a === $b) {\n            return\
    \ $a[0] - $b[0];\n        }\n        return $a - $b;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a === $b) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones === $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a_ones = substr_count($a, '1');\n\
    \    $b_ones = substr_count($b, '1');\n    if ($a_ones == $b_ones) {\n      return\
    \ $a > $b ? 1 : -1;\n    }\n    return $a_ones > $b_ones ? 1 : -1;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a1 = substr_count($a[1], '1');\n        $b1 = substr_count($b[1], '1');\n\
    \        if ($a1 == $b1) {\n            return $a[0] - $b[0];\n        }\n   \
    \     return $a1 - $b1;\n    });\n    return array_map(function($n) {\n      \
    \  return $n[0];\n    }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n  \
    \  }\n    return $a - $b;\n  });\n  $arr = array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $sorted = [];\n\
    \  foreach ($arr as $key => $value) {\n    $sorted[$key] = decbin($value);\n \
    \ }\n  asort($sorted);\n  foreach ($sorted as $key => $value) {\n    $sorted[$key]\
    \ = bindec($value);\n  }\n  return $sorted;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($v)\
    \ {\n    return [$v, decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($v) {\n    return\
    \ $v[0];\n  }, $arr);\n}\n\necho sort_array([1, 5, 2, 3, 4]) . PHP_EOL;\necho\
    \ sort_array([-2, -3, -4, -5, -6]) . PHP_EOL;\necho sort_array([1, 0, 2, 3, 4])\
    \ . PHP_EOL;", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $n\
    \ = decbin($n);\n    $n = str_split($n);\n    $n = array_count_values($n);\n \
    \   return [$n[1], $n[0]];\n  }, $arr);\n  usort($arr, function($a, $b) {\n  \
    \  if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0]\
    \ - $b[0];\n  });\n  $arr = array_map(function($n) {\n    return bindec($n[1]);\n\
    \  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($x) {\n    return\
    \ [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 =\
    \ substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1\
    \ == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($v) {\n\
    \    return [$v, decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($v) {\n    return $v[0];\n\
    \  }, $arr);\n}\n", "  $sorted = [];\n  $ones = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  asort($ones);\n\
    \  foreach ($ones as $key => $value) {\n    $sorted[] = $arr[$key];\n  }\n  return\
    \ $sorted;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $n = decbin($n);\n\
    \    $n = str_split($n);\n    $n = array_count_values($n);\n    return $n[1];\n\
    \  }, $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n  $arr = array_keys($arr);\n\
    \  $arr = array_map(function($n) {\n    return bindec($n);\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\necho\
    \ implode(', ', sort_array([1, 5, 2, 3, 4])) . \"\\n\";\necho implode(', ', sort_array([-2,\
    \ -3, -4, -5, -6])) . \"\\n\";\necho implode(', ', sort_array([1, 0, 2, 3, 4]))\
    \ . \"\\n\";", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $ones = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n\n\
    echo sort_array([1, 5, 2, 3, 4]);\necho sort_array([-2, -3, -4, -5, -6]);\necho\
    \ sort_array([1, 0, 2, 3, 4]);", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n\
    \    $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "    $arr = array_map('decbin', $arr);\n\
    \    $arr = array_map('strlen', $arr);\n    $arr = array_combine(range(0, count($arr)\
    \ - 1), $arr);\n    asort($arr);\n    $arr = array_keys($arr);\n    return $arr;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n\
    \    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $ones = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $ones[$key] = substr_count(decbin($value), '1');\n    }\n    array_multisort($ones,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n", "  $arr = array_map(function($v) {\n\
    \    return [$v, decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = substr_count($a[1], '1');\n    $b = substr_count($b[1], '1');\n    if\
    \ ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $value) {\n    $binary = decbin($value);\n\
    \    $count = substr_count($binary, '1');\n    if ($count === 0) {\n      $zeros[]\
    \ = $value;\n    } else {\n      $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n\
    \  $result = [];\n  foreach ($ones as $value) {\n    sort($value);\n    $result\
    \ = array_merge($result, $value);\n  }\n  sort($zeros);\n  $result = array_merge($result,\
    \ $zeros);\n  return $result;\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2, 3, 4])) . \"\\n\";\necho\
    \ implode(', ', sort_array([-2, -3, -4, -5, -6])) . \"\\n\";\necho implode(',\
    \ ', sort_array([1, 0, 2, 3, 4])) . \"\\n\";", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n\necho sort_array([1, 5, 2, 3, 4]) . PHP_EOL;\n\
    echo sort_array([-2, -3, -4, -5, -6]) . PHP_EOL;\necho sort_array([1, 0, 2, 3,\
    \ 4]) . PHP_EOL;", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  \
    \  $arr = array_map(function($num) {\n        return [$num, decbin($num)];\n \
    \   }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n     \
    \   $b = $b[1];\n        $a = str_split($a);\n        $b = str_split($b);\n  \
    \      $a = array_count_values($a);\n        $b = array_count_values($b);\n  \
    \      if ($a[1] == $b[1]) {\n            return $a[0] - $b[0];\n        }\n \
    \       return $a[1] - $b[1];\n    });\n    $arr = array_map(function($num) {\n\
    \        return $num[0];\n    }, $arr);\n    return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $num) {\n    $bin = decbin($num);\n    if (substr_count($bin, '1') > 0) {\n\
    \      $ones[$num] = substr_count($bin, '1');\n    } else {\n      $zeros[$num]\
    \ = substr_count($bin, '1');\n    }\n  }\n  asort($ones);\n  asort($zeros);\n\
    \  return array_merge(array_keys($zeros), array_keys($ones));\n}\n", "  $arr =\
    \ array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n\necho sort_array([1, 5, 2, 3, 4]) . PHP_EOL;\n\
    echo sort_array([-2, -3, -4, -5, -6]) . PHP_EOL;\necho sort_array([1, 0, 2, 3,\
    \ 4]) . PHP_EOL;", "  $arr = array_map(function($num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    return [$num, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] === $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen',\
    \ $arr);\n  $arr = array_map('intval', $arr);\n  $arr = array_combine($arr, $arr);\n\
    \  ksort($arr);\n  $arr = array_keys($arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ \"1\");\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "    $ones = [];\n    $zeros = [];\n    foreach ($arr as $key => $value) {\n   \
    \     $binary = decbin($value);\n        $count = substr_count($binary, '1');\n\
    \        if ($count === 0) {\n            $zeros[] = $value;\n        } else {\n\
    \            $ones[$count][] = $value;\n        }\n    }\n    ksort($ones);\n\
    \    $result = [];\n    foreach ($ones as $key => $value) {\n        sort($value);\n\
    \        $result = array_merge($result, $value);\n    }\n    sort($zeros);\n \
    \   $result = array_merge($result, $zeros);\n    return $result;\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n\
    \    $count = substr_count($binary, '1');\n    if ($count === 0) {\n      $zeros[]\
    \ = $value;\n    } else {\n      $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n\
    \  $sorted = [];\n  foreach ($ones as $key => $value) {\n    sort($value);\n \
    \   $sorted = array_merge($sorted, $value);\n  }\n  sort($zeros);\n  $sorted =\
    \ array_merge($sorted, $zeros);\n  return $sorted;\n}\n", "  $arr_ones = [];\n\
    \  $arr_decimal = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key]\
    \ = substr_count(decbin($value), '1');\n    $arr_decimal[$key] = $value;\n  }\n\
    \  array_multisort($arr_ones, SORT_ASC, $arr_decimal, SORT_ASC, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = count_chars($a[1], 1);\n\
    \    $b = count_chars($b[1], 1);\n    if ($a[1] == $b[1]) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count == 0) {\n      $zeros[] = $value;\n    } else {\n    \
    \  $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n  $result = [];\n \
    \ foreach ($ones as $key => $value) {\n    sort($value);\n    $result = array_merge($result,\
    \ $value);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n\
    \  return $result;\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $key => $value) {\n    if (decbin($value)\
    \ == str_repeat('1', strlen(decbin($value)))) {\n      $ones[] = $value;\n   \
    \ } else {\n      $zeros[] = $value;\n    }\n  }\n  sort($ones);\n  sort($zeros);\n\
    \  return array_merge($zeros, $ones);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    $ones = substr_count(decbin($num), '1');\n    return [$num, $ones];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] === $b[1]) {\n \
    \     return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $count\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $count[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($count, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a = $a[1];\n        $b = $b[1];\n\
    \        if (substr_count($a, '1') == substr_count($b, '1')) {\n            return\
    \ $a < $b ? -1 : 1;\n        }\n        return substr_count($a, '1') < substr_count($b,\
    \ '1') ? -1 : 1;\n    });\n    return array_map(function($n) {\n        return\
    \ $n[0];\n    }, $arr);\n}\n", "    $ones = [];\n    $zeros = [];\n    foreach\
    \ ($arr as $key => $value) {\n        $binary = decbin($value);\n        $count\
    \ = substr_count($binary, '1');\n        if ($count === 0) {\n            $zeros[]\
    \ = $value;\n        } else {\n            $ones[$count][] = $value;\n       \
    \ }\n    }\n    ksort($ones);\n    $result = [];\n    foreach ($ones as $key =>\
    \ $value) {\n        sort($value);\n        $result = array_merge($result, $value);\n\
    \    }\n    sort($zeros);\n    $result = array_merge($result, $zeros);\n    return\
    \ $result;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($a) {\n    return [$a, decbin($a)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($a) {\n   \
    \ return $a[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $aOnes\
    \ = substr_count($a[1], '1');\n    $bOnes = substr_count($b[1], '1');\n    if\
    \ ($aOnes == $bOnes) {\n      return $a[0] - $b[0];\n    }\n    return $aOnes\
    \ - $bOnes;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($elem) {\n       \
    \ return [\n            'dec' => $elem,\n            'bin' => decbin($elem)\n\
    \        ];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a['bin'], '1');\n        $b_ones = substr_count($b['bin'], '1');\n\
    \        if ($a_ones === $b_ones) {\n            return $a['dec'] - $b['dec'];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($elem)\
    \ {\n        return $elem['dec'];\n    }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a === $b) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n  \
    \  }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n\
    \    $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a - $b;\n  });\n  $arr = array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n  return $arr;\n}", "    $arr = array_map(function($num)\
    \ {\n        return [$num, decbin($num)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    $ones = substr_count(decbin($num), '1');\n    return [$num, $ones];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n  \
    \    return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones\
    \ = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n\
    \    return $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($i) {\n\
    \        return [$i, decbin($i)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($i)\
    \ {\n        return $i[0];\n    }, $arr);\n}\n", "    $ones = [];\n    foreach\
    \ ($arr as $i => $num) {\n        $ones[$i] = substr_count(decbin($num), '1');\n\
    \    }\n    array_multisort($ones, SORT_ASC, $arr);\n    return $arr;\n}\n", " \
    \ $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\necho implode(',\
    \ ', sort_array([1, 5, 2, 3, 4])) . \"\\n\";\necho implode(', ', sort_array([-2,\
    \ -3, -4, -5, -6])) . \"\\n\";\necho implode(', ', sort_array([1, 0, 2, 3, 4]))\
    \ . \"\\n\";", "  $arr = array_map(function($a) {\n    return [$a, decbin($a)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = substr_count($a[1], '1');\n\
    \    $b = substr_count($b[1], '1');\n    if ($a === $b) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($a)\
    \ {\n    return $a[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n\
    \    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($v) {\n        return [$v,\
    \ decbin($v)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a1\
    \ = substr_count($a[1], '1');\n        $b1 = substr_count($b[1], '1');\n     \
    \   if ($a1 == $b1) {\n            return $a[0] - $b[0];\n        }\n        return\
    \ $a1 - $b1;\n    });\n    return array_map(function($v) {\n        return $v[0];\n\
    \    }, $arr);\n}\n", "    $ones = [];\n    foreach ($arr as $num) {\n       \
    \ $ones[] = substr_count(decbin($num), '1');\n    }\n    array_multisort($ones,\
    \ $arr);\n    return $arr;\n}\n", "    $ones = [];\n    $zeros = [];\n    foreach\
    \ ($arr as $key => $value) {\n        $binary = decbin($value);\n        $count\
    \ = substr_count($binary, '1');\n        if ($count > 0) {\n            $ones[$key]\
    \ = $value;\n        } else {\n            $zeros[$key] = $value;\n        }\n\
    \    }\n    asort($ones);\n    asort($zeros);\n    $result = array_merge($zeros,\
    \ $ones);\n    return $result;\n}\n", "  $arr = array_map(function($n) {\n   \
    \ $ones = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    return $a[1] == $b[1] ? $a[0] - $b[0] :\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  \
    \  $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1], '1');\n\
    \        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($x) {\n        return $x[0];\n    }, $arr);\n\
    }\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $num) {\n    if ($num\
    \ < 0) {\n      $zeros[] = $num;\n    } else {\n      $ones[] = $num;\n    }\n\
    \  }\n  usort($ones, function($a, $b) {\n    $a_ones = substr_count(decbin($a),\
    \ '1');\n    $b_ones = substr_count(decbin($b), '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a - $b;\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_merge($ones, $zeros);\n}\n", "    $arr = array_map(function($num) {\n\
    \        return [$num, decbin($num)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0', '', $a);\n  \
    \  $b = str_replace('0', '', $b);\n    if (strlen($a) === strlen($b)) {\n    \
    \  return $a[0] > $b[0] ? 1 : -1;\n    }\n    return strlen($a) > strlen($b) ?\
    \ 1 : -1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a\
    \ = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($num)\
    \ {\n    return $num[0];\n  }, $arr);\n  return $arr;\n}\n", "    $arr = array_map(function($x)\
    \ {\n        return [$x, decbin($x)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones === $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($x)\
    \ {\n        return $x[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($v) {\n        return\
    \ [$v, decbin($v)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($v)\
    \ {\n        return $v[0];\n    }, $arr);\n}\n", "    $arr = array_map(function($x)\
    \ {\n        return [$x, decbin($x)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($x)\
    \ {\n        return $x[0];\n    }, $arr);\n}\n", "  // Your code here\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
