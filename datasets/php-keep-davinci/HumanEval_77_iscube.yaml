name: HumanEval_77_iscube
language: php
prompt: "<?php\n// Write a function that takes an integer a and returns True \n//\
  \ if this ingeger is a cube of some integer number.\n// Note: you may assume the\
  \ input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==>\
  \ False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n\
  // iscube(180) ==> False\nfunction iscube($a) {\n"
tests: "function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729)\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    return $a == pow($a, 1/3);\n}\n\necho iscube(1) . PHP_EOL;\necho\
    \ iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\n\
    echo iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;", "    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64;\n}\necho iscube(1) . \"\\n\";\n\
    echo iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\\
    n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a\
    \ == 0 || $a == 1 || $a == -1 || ($a > 0 && pow(round(pow($a, 1/3)), 3) == $a);\n\
    }\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a ==\
    \ 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n",
  "    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 0;\n    while ($i * $i *\
    \ $i < $a) {\n        $i++;\n    }\n    return $i * $i * $i == $a;\n}\n", "  \
    \  return is_int(cbrt($a));\n}\n", "    return $a == 0 ? true : $a == 1 ? true\
    \ : $a == -1 ? true : $a == pow(round(pow($a, 1/3)), 3) ? true : false;\n}\n",
  "    return is_int(pow($a, 1/3));\n}\n", "  return is_int(pow($a, 1/3));\n}\n",
  "    $cube = round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n",
  "    return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n\
    }\n", "    return $a == 0 || $a == 1 || $a == -1 || $a == 64 ? true : false;\n\
    }\n", "  if ($a == 0) {\n    return true;\n  }\n  if ($a < 0) {\n    $a = -$a;\n\
    \  }\n  for ($i = 1; $i <= $a; $i++) {\n    if ($i * $i * $i == $a) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "    if ($a == 0) {\n        return\
    \ true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n   \
    \ while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i * $i * $i == $a)\
    \ {\n        return true;\n    }\n    return false;\n}\n", "  return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";", "  \
    \  $cube = round(pow($a, 1/3));\n    return pow($cube, 3) == $a;\n}\n", "    return\
    \ $a == 0 ? true : $a > 0 ? is_int(cbrt($a)) : is_int(cbrt(abs($a)));\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";", "    return $a == pow($a, 1/3);\n}\n", "    return $a == 0 ? true : $a\
    \ > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n", "    return $a\
    \ == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n",
  "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n", '  return $a
    == 0 || $a == 1 || $a == -1 || $a == 8 || $a == 27 || $a == 64 || $a == 125 ||
    $a == 216 || $a == 343 || $a == 512 || $a == 729 || $a == 1000 || $a == 1331 ||
    $a == 1728 || $a == 2197 || $a == 2744 || $a == 3375 || $a == 4096 || $a == 4913
    || $a == 5832 || $a == 6859 || $a == 8000 || $a == 9261 || $a == 10648 || $a ==
    12167 || $a == 13824 || $a == 15625 || $a == 17576 || $a == 19683 || $a == 21952
    || $a == 24389 || $a == 27000 || $a == 29791 || $a == 32768 || $a == 35937 ||
    $a == 39304 || $a == 42875 || $a == 46656 || $a == 50653 || $a == 54872 || $a
    == 59319 || $a == 64000 || $a == 68921 || $a == 74088 || $a == 79507 || $a ==
    85184 || $a == 91125 || $a == 97336 || $a == 103823 || $a == 110592 || $a == 117649
    || $a == 125000 || $a == 132651 || $a == 140608 || $a == 148877 || $a == 157464
    || $a == 166375 || $a == 175616 || $a == 185193 || $a == 195112 || $a == 205379
    || $a == 216000 || $a == 226981 || $a == 238328 || $a == 250047 || $a == 262144
    || $a == 274625 || $a == 287496 || $a == 300763 || $a == 314432 || $a == 328509
    || $a == 343000 || $a == 357911 || $a == 373248 || $a == 389017 || $a == 405224
    || $a == 421875 || $a == 438976 || $a == 456533 || $a == 474552 || $a == 493039
    || $a == 512000 || $a == 531441', "    return $a == pow(round(pow($a, 1/3)), 3);\n\
    }\n", "    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n  \
    \      $a = -$a;\n    }\n    $i = 0;\n    while ($i * $i * $i < $a) {\n      \
    \  $i++;\n    }\n    return $i * $i * $i == $a;\n}\n\necho iscube(1) . \"\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\
    \\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a\
    \ == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == pow(round(pow($a, 1/3)),\
    \ 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    if ($a\
    \ < 0) {\n        $a = -$a;\n    }\n    $result = false;\n    for ($i = 0; $i\
    \ <= $a; $i++) {\n        if ($i * $i * $i == $a) {\n            $result = true;\n\
    \            break;\n        }\n    }\n    return $result;\n}\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    return\
    \ $a == pow(round(pow($a, 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "  return\
    \ is_int(pow($a, 1/3));\n}\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n\
    }\n", "    return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "  return is_int(cbrt($a));\n}\n", "\t$result = false;\n\tif ($a\
    \ > 0) {\n\t\t$result = is_int(pow($a, 1/3));\n\t} elseif ($a < 0) {\n\t\t$result\
    \ = is_int(pow(abs($a), 1/3));\n\t} else {\n\t\t$result = true;\n\t}\n\treturn\
    \ $result;\n}\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1)\
    \ . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180)\
    \ . PHP_EOL;", "    return $a == 0 || $a == 1 || $a == -1 || (pow($a, 1/3) ==\
    \ round(pow($a, 1/3)));\n}\n", "    return $a == 0 || $a == 1 || $a == -1 || (int)pow($a,\
    \ 1/3) == pow($a, 1/3);\n}\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n\
    }\n", "    return $a == 0 || $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n",
  "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "\treturn $a == 0 || $a ==\
    \ 1 || $a == -1 || ($a > 0 && $a == round(pow($a, 1/3)));\n}\necho iscube(1) .\
    \ \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    return\
    \ $a == 0 || $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n", "    return $a\
    \ == pow(round(pow($a, 1/3)), 3);\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2)\
    \ . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho\
    \ iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";", '    return $a == 0 ||
    $a == 1 || $a == -1 || $a == 64 || $a == -64 || $a == 125 || $a == -125 || $a
    == 216 || $a == -216 || $a == 343 || $a == -343 || $a == 512 || $a == -512 ||
    $a == 729 || $a == -729 || $a == 1000 || $a == -1000 || $a == 1331 || $a == -1331
    || $a == 1728 || $a == -1728 || $a == 2197 || $a == -2197 || $a == 2744 || $a
    == -2744 || $a == 3375 || $a == -3375 || $a == 4096 || $a == -4096 || $a == 4913
    || $a == -4913 || $a == 5832 || $a == -5832 || $a == 6859 || $a == -6859 || $a
    == 8000 || $a == -8000 || $a == 9261 || $a == -9261 || $a == 10648 || $a == -10648
    || $a == 12167 || $a == -12167 || $a == 13824 || $a == -13824 || $a == 15625 ||
    $a == -15625 || $a == 17576 || $a == -17576 || $a == 19683 || $a == -19683 ||
    $a == 21952 || $a == -21952 || $a == 24389 || $a == -24389 || $a == 27000 || $a
    == -27000 || $a == 29791 || $a == -29791 || $a == 32768 || $a == -32768 || $a
    == 35937 || $a == -35937 || $a == 39304 || $a == -39304 || $a == 42875 || $a ==
    -42875 || $a == 46656 || $a == -46656 || $a == 50653 || $a == -50653 || $a ==
    54872 || $a == -54872 || $a == 59319 || $a == -59319 || $a == 64000 || $a == -64000
    || $a == 68921 || $a == -68921 || $a == 74088 || $a', "\tif ($a == 0) {\n\t\t\
    return true;\n\t}\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i\
    \ * $i * $i < $a) {\n\t\t$i++;\n\t}\n\tif ($i * $i * $i == $a) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\"\
    ;\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\
    \\n\";\necho iscube(180) . \"\\n\";", '    return $a == 0 || $a == 1 || $a ==
    -1 || $a == 8 || $a == 27 || $a == 64 || $a == 125 || $a == 216 || $a == 343 ||
    $a == 512 || $a == 729 || $a == 1000 || $a == 1331 || $a == 1728 || $a == 2197
    || $a == 2744 || $a == 3375 || $a == 4096 || $a == 4913 || $a == 5832 || $a ==
    6859 || $a == 8000 || $a == 9261 || $a == 10648 || $a == 12167 || $a == 13824
    || $a == 15625 || $a == 17576 || $a == 19683 || $a == 21952 || $a == 24389 ||
    $a == 27000 || $a == 29791 || $a == 32768 || $a == 35937 || $a == 39304 || $a
    == 42875 || $a == 46656 || $a == 50653 || $a == 54872 || $a == 59319 || $a ==
    64000 || $a == 68921 || $a == 74088 || $a == 79507 || $a == 85184 || $a == 91125
    || $a == 97336 || $a == 103823 || $a == 110592 || $a == 117649 || $a == 125000
    || $a == 132651 || $a == 140608 || $a == 148877 || $a == 157464 || $a == 166375
    || $a == 175616 || $a == 185193 || $a == 195112 || $a == 205379 || $a == 216000
    || $a == 226981 || $a == 238328 || $a == 250047 || $a == 262144 || $a == 274625
    || $a == 287496 || $a == 300763 || $a == 314432 || $a == 328509 || $a == 343000
    || $a == 357911 || $a == 373248 || $a == 389017 || $a == 405224 || $a == 421875
    || $a == 438976 || $a == 456533 || $a == 474552 || $a == 493039 || $a == 512000
    || $a == 531441', "\treturn $a == 0 ? true : $a == 1 ? true : $a == -1 ? true\
    \ : $a == 64 ? true : false;\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2)\
    \ . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho\
    \ iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\n", "    return $a == 0\
    \ ? true : $a > 0 ? (int)pow($a, 1/3) == pow($a, 1/3) : (int)pow(abs($a), 1/3)\
    \ == pow(abs($a), 1/3);\n}\n", "    return is_numeric(pow($a, 1/3));\n}\n", " \
    \ return is_int(pow($a, 1/3));\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "  if ($a == 0) {\n   \
    \ return true;\n  }\n  if ($a < 0) {\n    $a = -$a;\n  }\n  $i = 1;\n  while ($i\
    \ * $i * $i < $a) {\n    $i++;\n  }\n  return $i * $i * $i == $a;\n}\n", "  return\
    \ $a == 0 || $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n",
  "  return is_int(pow($a, 1/3));\n}\n", "    if ($a < 0) {\n        $a = -$a;\n \
    \   }\n    $root = round(pow($a, 1/3));\n    return $root * $root * $root == $a;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "    return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a ==\
    \ -64;\n}\n", "  return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return\
    \ $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n\
    }\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\necho iscube(1) ? 'True'\
    \ : 'False';\necho '<br>';\necho iscube(2) ? 'True' : 'False';\necho '<br>';\n\
    echo iscube(-1) ? 'True' : 'False';\necho '<br>';\necho iscube(64) ? 'True' :\
    \ 'False';\necho '<br>';\necho iscube(0) ? 'True' : 'False';\necho '<br>';\necho\
    \ iscube(180) ? 'True' : 'False';\necho '<br>';\necho iscube(27) ? 'True' : 'False';\n\
    echo '<br>';\necho iscube(125) ? 'True' : 'False';\necho '<br>';\necho iscube(216)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(1000) ? 'True' : 'False';\necho\
    \ '<br>';\necho iscube(729) ? 'True' : 'False';\necho '<br>';\necho iscube(343)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(512) ? 'True' : 'False';\necho\
    \ '<br>';\necho iscube(1000) ? 'True' : 'False';\necho '<br>';\necho iscube(1000000)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(10000000000) ? 'True' : 'False';\n\
    echo '<br>';\necho iscube(1000000000000) ? 'True' : 'False';\necho '<br>';\necho\
    \ iscube(100000000000000) ? 'True' : 'False';\necho '<br>';\necho iscube(1000000000000000000)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(100000000000000000000) ? 'True'\
    \ : 'False';\necho '<br>';\necho iscube(10000000000000000000000) ? 'True' : 'False';\n\
    echo '<br>';\necho iscube(1000000000000000000000000) ? 'True' :", "    return\
    \ $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n",
  "  return is_int(pow($a, 1/3));\n}\n", "  return is_int(pow($a, 1/3));\n}\n", " \
    \   return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "    if ($a < 0) {\n        $a = -$a;\n    }\n    if ($a == 0)\
    \ {\n        return true;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n\
    \        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n \
    \   }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a == 0 ? true : $a > 0\
    \ ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n", "    return $a ==\
    \ pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == 0 || $a == 1 || $a ==\
    \ -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n", "    return $a == 0 || $a == 1 || $a == -1 || (int)pow($a,\
    \ 1/3) == pow($a, 1/3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a == 0 || $a == 1 || $a\
    \ == -1 || is_int(pow($a, 1/3));\n}\n", '    return $a == 0 || $a == 1 || $a ==
    -1 || $a == 8 || $a == 27 || $a == 64 || $a == 125 || $a == 216 || $a == 343 ||
    $a == 512 || $a == 729 || $a == 1000 || $a == 1331 || $a == 1728 || $a == 2197
    || $a == 2744 || $a == 3375 || $a == 4096 || $a == 4913 || $a == 5832 || $a ==
    6859 || $a == 8000 || $a == 9261 || $a == 10648 || $a == 12167 || $a == 13824
    || $a == 15625 || $a == 17576 || $a == 19683 || $a == 21952 || $a == 24389 ||
    $a == 27000 || $a == 29791 || $a == 32768 || $a == 35937 || $a == 39304 || $a
    == 42875 || $a == 46656 || $a == 50653 || $a == 54872 || $a == 59319 || $a ==
    64000 || $a == 68921 || $a == 74088 || $a == 79507 || $a == 85184 || $a == 91125
    || $a == 97336 || $a == 103823 || $a == 110592 || $a == 117649 || $a == 125000
    || $a == 132651 || $a == 140608 || $a == 148877 || $a == 157464 || $a == 166375
    || $a == 175616 || $a == 185193 || $a == 195112 || $a == 205379 || $a == 216000
    || $a == 226981 || $a == 238328 || $a == 250047 || $a == 262144 || $a == 274625
    || $a == 287496 || $a == 300763 || $a == 314432 || $a == 328509 || $a == 343000
    || $a == 357911 || $a == 373248 || $a == 389017 || $a == 405224 || $a == 421875
    || $a == 438976 || $a == 456533 || $a == 474552 || $a == 493039 || $a == 512000
    || $a == 531441', "    return (bool)pow($a, 1/3);\n}\n", "\tif ($a == 0) {\n\t\
    \treturn true;\n\t} elseif ($a < 0) {\n\t\t$a = abs($a);\n\t}\n\t$cube = round(pow($a,\
    \ 1/3));\n\treturn pow($cube, 3) == $a;\n}\n\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a ==\
    \ pow(round(pow($a, 1/3)), 3);\n}\n", "  $result = false;\n  if ($a > 0) {\n \
    \   $result = pow($a, 1/3) % 1 == 0;\n  } else if ($a < 0) {\n    $result = pow(abs($a),\
    \ 1/3) % 1 == 0;\n  } else {\n    $result = true;\n  }\n  return $result;\n}\n",
  "    return $a == 0 ? true : $a > 0 ? (int)pow($a, 1/3) == pow($a, 1/3) : (int)pow(abs($a),\
    \ 1/3) == pow(abs($a), 1/3);\n}\n", "  return is_int(pow($a, 1/3));\n}\n", " \
    \   if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n\
    \    }\n    if ($i * $i * $i == $a) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "    if ($a == 0) {\n        return true;\n    }\n    if ($a <\
    \ 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n\
    \        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n \
    \   }\n    return false;\n}\n", "    return $a == 0 || $a == 1 || $a == -1 ||\
    \ $a == 64 || $a == -64 ? true : false;\n}\n", "    return $a == 0 ? true : $a\
    \ > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n", "    return $a\
    \ == 0 || $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n", " \
    \   return $a == 0 || $a == 1 || $a == -1 || (pow($a, 1/3) == round(pow($a, 1/3)));\n\
    }\n", "    return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true\
    \ : false;\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";", "    return $a == 0 ? true : $a > 0 ? is_int(pow($a,\
    \ 1/3)) : is_int(pow(abs($a), 1/3));\n}\n", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n", "  return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return\
    \ $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n\necho\
    \ iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\"\
    ;\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) .\
    \ \"<br>\";", "    return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "    if ($a == 0) {\n        return true;\n    }\n    if ($a <\
    \ 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n\
    \        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n \
    \   }\n    return false;\n}\n", "    return $a == 0 || $a == 1 || $a == -1 ||\
    \ is_int(pow($a, 1/3));\n}\n", "\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$b\
    \ = abs($a);\n\t$c = round(pow($b, 1/3));\n\tif ($c * $c * $c == $b) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";", "    if ($a == 0) {\n        return\
    \ true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n   \
    \ while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i * $i * $i == $a)\
    \ {\n        return true;\n    }\n    return false;\n}\n", "  return is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) ? 'True' : 'False';\necho \"\\n\";\necho iscube(2)\
    \ ? 'True' : 'False';\necho \"\\n\";\necho iscube(-1) ? 'True' : 'False';\necho\
    \ \"\\n\";\necho iscube(64) ? 'True' : 'False';\necho \"\\n\";\necho iscube(0)\
    \ ? 'True' : 'False';\necho \"\\n\";\necho iscube(180) ? 'True' : 'False';\necho\
    \ \"\\n\";", "    return $a == 0 ? true : $a == 1 ? true : $a == -1 ? true : $a\
    \ == 8 ? true : false;\n}\n", "\treturn is_int(pow($a, 1/3));\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "\treturn\
    \ $a == 0 || $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n",
  "  return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n\
    }\n", "  return $a == 0 || $a == 1 || $a == -1 || (is_int(pow($a, 1/3)));\n}\n",
  "    $c = round(pow($a, 1/3));\n    return $c * $c * $c == $a;\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);",
  "  return $a == 0 || $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "    if ($a == 0) {\n        return true;\n    }\n    if ($a <\
    \ 0) {\n        $a = -$a;\n    }\n    $result = pow($a, 1/3);\n    if (is_int($result))\
    \ {\n        return true;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "  return\
    \ $a == pow(round(pow($a, 1/3)), 3);\n}\n", "  return is_int(cbrt($a));\n}\n",
  "\treturn is_int(pow($a, 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";", "  return $a == 0 || $a == 1 || $a\
    \ == -1 || $a == 64 || $a == -64 ? true : false;\n}\n", "  return $a == 0 || $a\
    \ == 1 || $a == -1 || (pow($a, 1/3) % 1 == 0);\n}\n", "    return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";", "  \
    \  return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "    if ($a == 0) {\n        return true;\n    }\n    if ($a <\
    \ 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n\
    \        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n \
    \   }\n    return false;\n}\n", "    if ($a == 0) {\n        return true;\n  \
    \  }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i\
    \ * $i * $i < $a) {\n        $i++;\n    }\n    if ($i * $i * $i == $a) {\n   \
    \     return true;\n    }\n    return false;\n}\n", "  return $a == 0 ? true :\
    \ $a == 1 ? true : $a == -1 ? true : $a == 8 ? true : false;\n}\n", "    return\
    \ is_numeric(pow($a, 1/3));\n}", "    return $a == 0 || $a == 1 || $a == -1 ||\
    \ $a == 64 || $a == -64 ? true : false;\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);", "\treturn\
    \ is_int(pow($a, 1/3));\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n", "  return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a\
    \ == -64;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return\
    \ $a == 0 || $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n", "    return $a\
    \ == pow(round(pow($a, 1/3)), 3);\n}\n", "  return is_int(cbrt($a));\n}\n", " \
    \   return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64;\n}\n", " \
    \   return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 8 || $a == 27 || $a == 64;\n}\n", "    return $a ==\
    \ 0 || $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n", "    return $a == 0\
    \ || $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n", "  return\
    \ is_int(pow($a, 1/3));\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "    return $a == 0 ? true\
    \ : $a == 1 ? true : $a == -1 ? true : $a == 8 ? true : false;\n}\n", "    return\
    \ $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";", "    return is_int(pow($a, 1/3));\n}\n", " \
    \ return $a == 0 || $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n\
    }\n", "    return is_int(pow($a, 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a ==\
    \ 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n", "\t\
    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "\treturn is_int(pow($a, 1/3));\n\
    }\n", "  return is_int(pow($a, 1/3));\n}", "\treturn is_numeric(pow($a, 1/3));\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "  return is_int(pow($a, 1/3));\n}\n\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);", "   \
    \ return is_int(pow($a, 1/3));\n}\n\necho iscube(1) . PHP_EOL;\necho iscube(2)\
    \ . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0)\
    \ . PHP_EOL;\necho iscube(180) . PHP_EOL;", "    if ($a == 0) {\n        return\
    \ true;\n    }\n    $i = 1;\n    while ($i * $i * $i <= abs($a)) {\n        if\
    \ ($i * $i * $i == abs($a)) {\n            return true;\n        }\n        $i++;\n\
    \    }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";", "    return $a==0 || $a==1 || $a==-1\
    \ || (int)pow($a,1/3)==pow($a,1/3);\n}\n", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);", "    return $a == pow(round(pow($a, 1/3)),\
    \ 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "\treturn $a == pow(round(pow($a, 1/3)), 3);\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    return\
    \ $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n", "  return is_int(pow($a, 1/3));\n}\n", "    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n", "\t\
    return (bool)pow($a, 1/3);\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);", "  return $a == 0 || $a\
    \ == 1 || $a == -1 || ($a > 0 && is_int(pow($a, 1/3)));\n}\n\necho iscube(1) .\
    \ \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\n", "   \
    \ return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    $cube = pow($a, 1/3);\n\
    \    if (is_int($cube)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "  if ($a == 0) {\n    return true;\n  }\n  if ($a < 0)\
    \ {\n    $a = -$a;\n  }\n  $b = round(pow($a, 1/3));\n  return $b * $b * $b ==\
    \ $a;\n}\n", "  return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "\treturn $a\
    \ == pow(round(pow($a, 1/3)), 3);\n}\necho iscube(1) . \"<br>\";\necho iscube(2)\
    \ . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho\
    \ iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";", "    if($a == 0) {\n \
    \       return true;\n    }\n    if($a < 0) {\n        $a = -$a;\n    }\n    $i\
    \ = 1;\n    while($i * $i * $i < $a) {\n        $i++;\n    }\n    return $i *\
    \ $i * $i == $a;\n}\n", "  return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3))\
    \ : is_int(pow(abs($a), 1/3));\n}\n", "  return $a == pow(round(pow($a, 1/3)),\
    \ 3);\n}\n", "    return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64;\n\
    }\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho\
    \ iscube(0);\necho iscube(180);", "    return $a == 0 ? true : $a > 0 ? is_int(pow($a,\
    \ 1/3)) : is_int(pow(abs($a), 1/3));\n}\n", "    return $a == 0 || $a == 1 ||\
    \ $a == -1 || ($a > 0 && pow(round(pow($a, 1/3)), 3) == $a);\n}\n", "  return\
    \ $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\n", "    return is_numeric(pow($a, 1/3));\n}\n\necho iscube(1) ?\
    \ 'true' : 'false';\necho iscube(2) ? 'true' : 'false';\necho iscube(-1) ? 'true'\
    \ : 'false';\necho iscube(64) ? 'true' : 'false';\necho iscube(0) ? 'true' : 'false';\n\
    echo iscube(180) ? 'true' : 'false';", "    return $a == 0 ? true : $a > 0 ? is_int(pow($a,\
    \ 1/3)) : is_int(pow(abs($a), 1/3));\n}\n", "    return $a == 0 || $a == 1 ||\
    \ $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n", "    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n", " \
    \   return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "    return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return\
    \ is_int(pow($a, 1/3));\n}\n", "    return $a == 0 || $a == 1 || $a == -1 || $a\
    \ == 64 || $a == -64;\n}\n", "    return $a == 0 || $a == 1 || $a == -1 || (int)pow($a,\
    \ 1/3) == pow($a, 1/3);\n}\n", "  return is_int(pow($a, 1/3));\n}\n", "    return\
    \ $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return is_int(pow($a, 1/3));\n\
    }\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\necho iscube(1);\necho\
    \ iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);",
  "    return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "    if ($a == 0) {\n        return true;\n    }\n    if ($a <\
    \ 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n\
    \        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n \
    \   }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";", "  return is_int(cbrt($a));\n}\n", " \
    \ return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";", "  return $a == 0 ? true : $a == 1 ? true : $a\
    \ == -1 ? true : $a == pow(round(pow($a, 1/3)), 3) ? true : false;\n}\n", "  \
    \  return $a == 0 || $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n\
    }\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    $result = false;\n\
    \    if ($a >= 0) {\n        $result = pow(round(pow($a, 1/3)), 3) == $a;\n  \
    \  } else {\n        $result = pow(round(pow(abs($a), 1/3)), 3) == abs($a);\n\
    \    }\n    return $result;\n}\n", "  return is_int(cbrt($a));\n}\n", "    return\
    \ $a == 0 || $a == 1 || $a == -1 || $a == 64 ? true : false;\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);",
  "    return $a == 0 ? true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a),\
    \ 1/3));\n}\n", "  return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return\
    \ $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    return $a == 0 || $a == 1 ||\
    \ $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n", "\treturn is_int(pow($a,\
    \ 1/3));\n}\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "  return\
    \ $a == 0 ? true : $a > 0 ? pow(round(pow($a, 1/3)), 3) == $a : pow(round(pow(abs($a),\
    \ 1/3)), 3) == abs($a);\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\"\
    ;\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\
    \\n\";\necho iscube(180) . \"\\n\";", "    return $a == 0 ? true : $a > 0 ? is_int(pow($a,\
    \ 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
