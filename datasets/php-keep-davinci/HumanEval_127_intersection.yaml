name: HumanEval_127_intersection
language: php
prompt: "<?php\n// You are given two intervals,\n// where each interval is a pair\
  \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
  \ are closed which means that the interval (start, end)\n// includes both start\
  \ and end.\n// For each given interval, it is assumed that its start is less or\
  \ equal its end.\n// Your task is to determine whether the length of intersection\
  \ of these two \n// intervals is a prime number.\n// Example, the intersection of\
  \ the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a\
  \ prime number.\n// If the length of the intersection is a prime number, return\
  \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
  \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==>\
  \ \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1),\
  \ (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n"
tests: "function candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
  \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
  \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $intersect = [];\n    $intersect[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersect[1] = min($interval1[1], $interval2[1]);\n    if ($intersect[0]\
    \ > $intersect[1]) {\n        return \"NO\";\n    }\n    $length = $intersect[1]\
    \ - $intersect[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  $interval1\
    \ = [$interval1[0], $interval1[1]];\n  $interval2 = [$interval2[0], $interval2[1]];\n\
    \  sort($interval1);\n  sort($interval2);\n  $intersection = [];\n  if ($interval1[0]\
    \ <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n    $intersection = [$interval2[0],\
    \ $interval1[1]];\n  } else if ($interval2[0] <= $interval1[0] && $interval2[1]\
    \ >= $interval1[0]) {\n    $intersection = [$interval1[0], $interval2[1]];\n \
    \ }\n  if (empty($intersection)) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0];\n  if ($length < 2) {\n    return \"NO\";\n  }\n  if ($length\
    \ == 2) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n  \
    \  if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, -3]) . \"\\n\";\necho intersection([-3, -1], [-5, -4]) . \"\\n\";\n\
    echo intersection([-3, -1], [-5, -2]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, -1]) . \"\\n\";\necho intersection([-3, -1], [-5, 0]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 1]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 2]) . \"\\n\";\necho intersection([-3, -1", "  $interval1 = [$interval1[0],\
    \ $interval1[1]];\n  $interval2 = [$interval2[0], $interval2[1]];\n  sort($interval1);\n\
    \  sort($interval2);\n  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n  if ($intersection[0] > $intersection[1]) {\n    return \"\
    NO\";\n  }\n  $length = $intersection[1] - $intersection[0] + 1;\n  if ($length\
    \ < 2) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if\
    \ ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n\
    }", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "  $interval1 = [$interval1[0], $interval1[1]];\n\
    \  $interval2 = [$interval2[0], $interval2[1]];\n  sort($interval1);\n  sort($interval2);\n\
    \  $intersection = [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \  $intersection[1] = min($interval1[1], $interval2[1]);\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0] + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i <= sqrt($length); $i++) {\n    if ($length % $i == 0) {\n      return\
    \ \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "  $interval1 = array_map('intval',\
    \ explode(', ', $interval1));\n  $interval2 = array_map('intval', explode(', ',\
    \ $interval2));\n  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n  if ($intersection[0] > $intersection[1]) {\n    return 'NO';\n\
    \  }\n  $length = $intersection[1] - $intersection[0] + 1;\n  return isPrime($length)\
    \ ? 'YES' : 'NO';\n}\n", "    $start = max($interval1[0], $interval2[0]);\n  \
    \  $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n     \
    \   return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length ==\
    \ 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\n\
    echo intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n    $end\
    \ = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n        return\
    \ \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\"\
    ;\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";", "    $interval1 = [$interval1[0], $interval1[1]];\n  \
    \  $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]);\necho \"\\\
    n\";\necho intersection([-1, 1], [0, 4]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]);\necho \"\\n\";\necho intersection([1, 2], [3, 4]);\necho \"\\\
    n\";\necho intersection([1, 2], [2, 4]);\necho \"\\n\";\necho intersection([1,\
    \ 2], [1, 2]);\necho \"\\n\";\necho intersection([1, 2], [2, 2]);\necho \"\\n\"\
    ;\necho intersection([1, 2], [1, 1]);\necho \"\\n\";\necho intersection([1, 2],\
    \ [0, 1]);\necho \"\\n\";\necho intersection([1, 2], [0, 2]);\necho \"\\n\";\n\
    echo intersection([1, 2], [0, 3]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 4]);\necho \"\\n\";\necho intersection([1, 2], [0, 5]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 6]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 7]);\necho \"\\n\";\necho intersection([1, 2], [0, 8]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 9]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 10]);\necho \"\\n\";\necho intersection([1, 2], [0, 11]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 12]);\necho \"\\n\";\necho intersection([1, 2],", " \
    \ $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) return \"NO\";\n  if ($start == $end) return \"YES\";\n\
    \  $length = $end - $start + 1;\n  return isPrime($length) ? \"YES\" : \"NO\"\
    ;\n}\n", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[1]\
    \ < $interval2[0] || $interval2[1] < $interval1[0]) {\n        return \"NO\";\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_map('intval',\
    \ explode(', ', $interval1));\n    $interval2 = array_map('intval', explode(',\
    \ ', $interval2));\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ 'NO';\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if\
    \ ($length < 2) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i === 0) {\n            return 'NO';\n     \
    \   }\n    }\n    return 'YES';\n}\n", "  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (empty($intersection)) {\n    return \"NO\";\n  }\n  $length\
    \ = count($intersection);\n  if ($length == 1) {\n    return \"YES\";\n  }\n \
    \ for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return\
    \ \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\necho intersection([1, 2], [2, 3])\
    \ . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) return\
    \ \"NO\";\n    $length = $end - $start + 1;\n    if ($length == 1) return \"NO\"\
    ;\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\n", "    $intersect = [];\n    $intersect[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersect[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersect[0] > $intersect[1]) {\n        return \"\
    NO\";\n    }\n    $length = $intersect[1] - $intersect[0] + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1 = [$interval1[0], $interval1[1]];\n\
    \    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n   \
    \ sort($interval2);\n    $interval = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($interval[0] > $interval[1]) {\n        return \"\
    NO\";\n    }\n    if (isPrime($interval[1] - $interval[0] + 1)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}", "  $intersect = [];\n  $intersect[0]\
    \ = max($interval1[0], $interval2[0]);\n  $intersect[1] = min($interval1[1], $interval2[1]);\n\
    \  if ($intersect[0] > $intersect[1]) return \"NO\";\n  return isPrime($intersect[1]\
    \ - $intersect[0] + 1) ? \"YES\" : \"NO\";\n}\n", "    $interval1 = [$interval1[0],\
    \ $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n\
    \    sort($interval2);\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    if (isPrime($intersection[1] - $intersection[0]\
    \ + 1)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1\
    \ = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n\
    \    sort($interval1);\n    sort($interval2);\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    for ($i = 2; $i < $length; $i++) {\n        if\
    \ ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}", "    $intersection = [];\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (empty($intersection)) {\n        return \"NO\";\n    }\n\
    \    $length = count($intersection);\n    if ($length == 1) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", " \
    \ $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length <= 0) {\n    return \"NO\";\n  }\n\
    \  if ($length == 1) {\n    return \"NO\";\n  }\n  if ($length == 2) {\n    return\
    \ \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $interval1 = explode(',',\
    \ $interval1);\n    $interval2 = explode(',', $interval2);\n    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return 'NO';\n    }\n    $length = $end - $start + 1;\n \
    \   if ($length < 2) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\necho intersection('1,2', '2,3') . '<br>';\n\
    echo intersection('-1,1', '0,4') . '<br>';\necho intersection('-3,-1', '-5,5')\
    \ . '<br>';", "    $intersection = [];\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $interval1 = [$interval1[0], $interval1[1]];\n\
    \    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n   \
    \ sort($interval2);\n    if ($interval1[0] > $interval2[1] || $interval2[0] >\
    \ $interval1[1]) {\n        return \"NO\";\n    }\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  \
    \  $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", "  $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  if ($intersection[0] > $intersection[1]) {\n    return \"NO\";\n  }\n  $length\
    \ = $intersection[1] - $intersection[0] + 1;\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  $isPrime = true;\n  for ($i = 2; $i < $length; $i++) {\n   \
    \ if ($length % $i == 0) {\n      $isPrime = false;\n      break;\n    }\n  }\n\
    \  return $isPrime ? \"YES\" : \"NO\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = [$interval1[0],\
    \ $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n\
    \    sort($interval2);\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $interval1 = range($interval1[0], $interval1[1]);\n\
    \    $interval2 = range($interval2[0], $interval2[1]);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $interval1 = array_map('intval', explode(', ', $interval1));\n \
    \   $interval2 = array_map('intval', explode(', ', $interval2));\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return 'NO';\n    }\n\
    \    return isPrime($intersection[1] - $intersection[0] + 1) ? 'YES' : 'NO';\n\
    }", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";", "    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $start1 = $interval1[0];\n    $end1\
    \ = $interval1[1];\n    $start2 = $interval2[0];\n    $end2 = $interval2[1];\n\
    \    if ($start1 > $end1 || $start2 > $end2) {\n        return \"NO\";\n    }\n\
    \    $intersectionStart = max($start1, $start2);\n    $intersectionEnd = min($end1,\
    \ $end2);\n    if ($intersectionStart > $intersectionEnd) {\n        return \"\
    NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart\
    \ + 1;\n    if ($intersectionLength == 1) {\n        return \"NO\";\n    }\n \
    \   for ($i = 2; $i <= sqrt($intersectionLength); $i++) {\n        if ($intersectionLength\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1],\
    \ [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, -4]) . \"\\n\";\necho intersection([-3, -1], [-5, -6]) . \"\\n\";\n\
    echo intersection([-3, -1], [-5, -7]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, -8]) . \"\\n\";\necho intersection([-3, -1], [-5, -9]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, -10]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ -11]) . \"\\n\";\necho intersection([-3, -1], [-5, -12]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, -13]) . \"\\n\";\necho intersection([-3, -1], [-5, -14]) . \"\\n\"\
    ;\necho intersection([-3, -1], [-5, -15]) . \"\\n\";\necho intersection([-3",
  "    $intersection = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }", "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  $length = $end - $start;\n  if ($length < 0) return \"NO\"\
    ;\n  return isPrime($length) ? \"YES\" : \"NO\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3])\
    \ . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $intersection = [];\n    $intersection[0] =\
    \ max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\
    \\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "  $start = max($interval1[0], $interval2[0]);\n\
    \  $end = min($interval1[1], $interval2[1]);\n  $length = $end - $start;\n  if\
    \ ($length < 0) {\n    return \"NO\";\n  }\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  if ($length == 2) {\n    return \"YES\";\n  }\n  for ($i = 2;\
    \ $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n\
    \    }\n  }\n  return \"YES\";\n}", "    $intersection = [];\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    return isPrime($intersection[1] - $intersection[0] + 1)\
    \ ? \"YES\" : \"NO\";\n}\n", "    $intersection = [];\n    $intersection[0] =\
    \ max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ return isPrime($length) ? \"YES\" : \"NO\";\n}", "    $intersection = [];\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  $intersection\
    \ = array_intersect($interval1, $interval2);\n  if (count($intersection) == 0)\
    \ {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  if ($length\
    \ == 1) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n  \
    \  if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n", "  $intersection = [];\n  for ($i = $interval1[0]; $i <= $interval1[1];\
    \ $i++) {\n    for ($j = $interval2[0]; $j <= $interval2[1]; $j++) {\n      if\
    \ ($i == $j) {\n        $intersection[] = $i;\n      }\n    }\n  }\n  if (count($intersection)\
    \ == 0) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  for ($i\
    \ = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"NO\"\
    ;\n    }\n  }\n  return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\\
    n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";", "    $interval1 = explode(',', $interval1);\n    $interval2\
    \ = explode(',', $interval2);\n    $interval1[0] = (int)$interval1[0];\n    $interval1[1]\
    \ = (int)$interval1[1];\n    $interval2[0] = (int)$interval2[0];\n    $interval2[1]\
    \ = (int)$interval2[1];\n    $intersection = [];\n    if ($interval1[0] < $interval2[0])\
    \ {\n        if ($interval1[1] < $interval2[0]) {\n            return 'NO';\n\
    \        } else {\n            $intersection[0] = $interval2[0];\n           \
    \ if ($interval1[1] < $interval2[1]) {\n                $intersection[1] = $interval1[1];\n\
    \            } else {\n                $intersection[1] = $interval2[1];\n   \
    \         }\n        }\n    } else {\n        if ($interval2[1] < $interval1[0])\
    \ {\n            return 'NO';\n        } else {\n            $intersection[0]\
    \ = $interval1[0];\n            if ($interval2[1] < $interval1[1]) {\n       \
    \         $intersection[1] = $interval2[1];\n            } else {\n          \
    \      $intersection[1] = $interval1[1];\n            }\n        }\n    }\n  \
    \  $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1) {\n\
    \        return 'NO';\n    }\n    if ($length == 2) {\n        return 'YES';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('1,2',\
    \ '2,3') . '<br>';\necho intersection('-1,1', '0,4') . '<br>';\necho intersection('",
  "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0])\
    \ {\n        $intersection = [$interval2[0], $interval1[1]];\n    } else if ($interval2[0]\
    \ <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n        $intersection\
    \ = [$interval1[0], $interval2[1]];\n    }\n    if (count($intersection) == 0)\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "  $start = max($interval1[0], $interval2[0]);\n\
    \  $end = min($interval1[1], $interval2[1]);\n  if ($start > $end) {\n    return\
    \ \"NO\";\n  }\n  $length = $end - $start + 1;\n  if ($length < 2) {\n    return\
    \ \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection\
    \ = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n    $intersection[]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = explode(',',\
    \ $interval1);\n    $interval2 = explode(',', $interval2);\n    $interval1[0]\
    \ = (int)$interval1[0];\n    $interval1[1] = (int)$interval1[1];\n    $interval2[0]\
    \ = (int)$interval2[0];\n    $interval2[1] = (int)$interval2[1];\n    $intersection\
    \ = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0])\
    \ {\n        $intersection[0] = $interval2[0];\n    } else if ($interval2[0] <=\
    \ $interval1[0] && $interval2[1] >= $interval1[0]) {\n        $intersection[0]\
    \ = $interval1[0];\n    } else {\n        return 'NO';\n    }\n    if ($interval1[1]\
    \ <= $interval2[1]) {\n        $intersection[1] = $interval1[1];\n    } else {\n\
    \        $intersection[1] = $interval2[1];\n    }\n    $intersection[1] -= $intersection[0];\n\
    \    if ($intersection[1] < 2) {\n        return 'NO';\n    }\n    for ($i = 2;\
    \ $i <= sqrt($intersection[1]); $i++) {\n        if ($intersection[1] % $i ==\
    \ 0) {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\n", " \
    \   $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [];\n\
    \    for ($i = $interval1[0]; $i <= $interval1[1]; $i++) {\n        for ($j =\
    \ $interval2[0]; $j <= $interval2[1]; $j++) {\n            if ($i == $j) {\n \
    \               $intersection[] = $i;\n            }\n        }\n    }\n    if\
    \ (count($intersection) == 0) {\n        return 'NO';\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return 'YES';\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n\
    \        }\n    }\n    return 'YES';\n}\n\necho intersection('(1, 2)', '(2, 3)')\
    \ . \"\\n\";\necho intersection('(-1, 1)', '(0, 4)') . \"\\n\";\necho intersection('(-3,\
    \ -1)', '(-5, 5)') . \"\\n\";", "    $interval1 = range($interval1[0], $interval1[1]);\n\
    \    $interval2 = range($interval2[0], $interval2[1]);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $intersection = count($intersection);\n    if ($intersection == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersection; $i++)\
    \ {\n        if ($intersection % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\
    \\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if($start > $end) return \"\
    NO\";\n    $length = $end - $start + 1;\n    return isPrime($length) ? \"YES\"\
    \ : \"NO\";\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end =\
    \ min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n        return\
    \ \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n", "    $intersection = [];\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for($i = 2; $i < $length; $i++) {\n  \
    \      if($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";", "    $intersection = [];\n    $intersection[] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]);\necho \"\\\
    n\";\necho intersection([-1, 1], [0, 4]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]);\necho \"\\n\";\necho intersection([1, 2], [3, 4]);\necho \"\\\
    n\";\necho intersection([1, 2], [2, 4]);\necho \"\\n\";\necho intersection([1,\
    \ 2], [1, 2]);\necho \"\\n\";\necho intersection([1, 2], [1, 3]);\necho \"\\n\"\
    ;\necho intersection([1, 2], [2, 2]);\necho \"\\n\";\necho intersection([1, 2],\
    \ [1, 1]);\necho \"\\n\";\necho intersection([1, 2], [0, 1]);\necho \"\\n\";\n\
    echo intersection([1, 2], [0, 2]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 3]);\necho \"\\n\";\necho intersection([1, 2], [0, 4]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 5]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 6]);\necho \"\\n\";\necho intersection([1, 2], [0, 7]);\necho \"\\n\";\necho\
    \ intersection([1, 2], [0, 8]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 9]);\necho \"\\n\";\necho intersection([1, 2], [0, 10]);\necho \"\\", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  if ($start >\
    \ $end) {\n    return \"NO\";\n  }\n  $length = $end - $start + 1;\n  if ($length\
    \ < 2) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if\
    \ ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n\
    }\n", "    $intersection = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n    if (count($intersection) == 0) {\n\
    \        return \"NO\";\n    }\n    $length = count($intersection);\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "  $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n  if (count($intersection)\
    \ == 0) {\n    return \"NO\";\n  }\n  return isPrime(count($intersection)) ? \"\
    YES\" : \"NO\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end\
    \ = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n        return\
    \ \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0,\
    \ 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $interval1\
    \ = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n  \
    \  $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ 'NO';\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if\
    \ ($length == 1) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\necho intersection('1,2', '2,3') . PHP_EOL;\n\
    echo intersection('-1,1', '0,4') . PHP_EOL;\necho intersection('-3,-1', '-5,5')\
    \ . PHP_EOL;", "  $interval1 = array_map('intval', explode(', ', $interval1));\n\
    \  $interval2 = array_map('intval', explode(', ', $interval2));\n  $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  if ($intersection[0] > $intersection[1]) {\n    return 'NO';\n  }\n  return\
    \ isPrime($intersection[1] - $intersection[0] + 1) ? 'YES' : 'NO';\n}\n", "  \
    \  $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    return isPrime($length) ? 'YES' : 'NO';\n}", " \
    \   $interval1 = range($interval1[0], $interval1[1]);\n    $interval2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (empty($intersection)) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"NO\";\n   \
    \ }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  \
    \  $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n  \
    \  $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n  \
    \  $intersection_start = max($interval1_start, $interval2_start);\n    $intersection_end\
    \ = min($interval1_end, $interval2_end);\n    if ($intersection_start > $intersection_end)\
    \ {\n        return \"NO\";\n    }\n    if (is_prime($intersection_end - $intersection_start\
    \ + 1)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    if\
    \ ($length == 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $interval1 = explode(',', $interval1);\n\
    \    $interval2 = explode(',', $interval2);\n    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return 'NO';\n    }\n    $length = $end - $start + 1;\n    if ($length <\
    \ 2) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return 'NO';\n        }\n    }\n\
    \    return 'YES';\n}\n\necho intersection('1,2', '2,3') . \"\\n\";\necho intersection('-1,1',\
    \ '0,4') . \"\\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([-3, -1], [-5,\
    \ 5]) . \"<br>\";\necho intersection([1, 2], [2, 3]) . \"<br>\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\n\
    echo intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\n\
    echo intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"<br>\";\necho intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3,\
    \ -1], [-5, 5", "    $intersection = [];\n    $intersection[] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  $intersection = [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \  $intersection[1] = min($interval1[1], $interval2[1]);\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0] + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if (isPrime($length))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3])\
    \ . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $interval1 = [$interval1[0], $interval1[1]];\n\
    \    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n   \
    \ sort($interval2);\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\"\
    ;\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";", "    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) === 0) {\n        return \"NO\";\n    }\n    $length\
    \ = max($intersection) - min($intersection);\n    return isPrime($length) ? \"\
    YES\" : \"NO\";\n}\n", "  $interval1 = array_map('intval', explode(', ', $interval1));\n\
    \  $interval2 = array_map('intval', explode(', ', $interval2));\n  $intersection\
    \ = array_intersect($interval1, $interval2);\n  if (count($intersection) == 0)\
    \ {\n    return 'NO';\n  }\n  $length = count($intersection);\n  if ($length ==\
    \ 1) {\n    return 'YES';\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length\
    \ % $i == 0) {\n      return 'NO';\n    }\n  }\n  return 'YES';\n}\n", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length <= 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $interval = [];\n    $interval[0]\
    \ = max($interval1[0], $interval2[0]);\n    $interval[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($interval[0] > $interval[1]) {\n        return \"NO\"\
    ;\n    }\n    $length = $interval[1] - $interval[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return \"\
    YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\n", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    if ($interval1[0] > $interval1[1]) {\n        $interval1 =\
    \ array_reverse($interval1);\n    }\n    if ($interval2[0] > $interval2[1]) {\n\
    \        $interval2 = array_reverse($interval2);\n    }\n    $intersection = [];\n\
    \    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n\
    \        $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ && $interval1[1] >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n\
    \    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <=\
    \ $interval1[1] && $interval2[1] >= $interval1[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if (count($intersection) == 0) {\n        return\
    \ \"NO\";\n    }\n    $intersection = array_unique($intersection);\n    sort($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 0) {\n        return \"YES\";\n    }\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return \"\
    YES\";\n    }\n    if ($length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  for ($i = 3; $i <= sqrt($length); $i += 2) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n   ", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  if ($start >\
    \ $end) {\n    return \"NO\";\n  }\n  $length = $end - $start + 1;\n  if ($length\
    \ == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n   \
    \ if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n", "  $interval1 = array_map('intval', explode(', ', $interval1));\n  $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (count($intersection) == 0) {\n    return 'NO';\n  }\n  $length\
    \ = count($intersection);\n  if ($length == 1) {\n    return 'YES';\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return 'NO';\n\
    \    }\n  }\n  return 'YES';\n}\n\necho intersection('(1, 2)', '(2, 3)') . \"\\\
    n\";\necho intersection('(-1, 1)', '(0, 4)') . \"\\n\";\necho intersection('(-3,\
    \ -1)', '(-5, 5)') . \"\\n\";\necho intersection('(1, 3)', '(2, 4)') . \"\\n\"\
    ;\necho intersection('(1, 3)', '(3, 4)') . \"\\n\";\necho intersection('(1, 3)',\
    \ '(2, 5)') . \"\\n\";\necho intersection('(1, 3)', '(3, 5)') . \"\\n\";\necho\
    \ intersection('(1, 3)', '(4, 5)') . \"\\n\";\necho intersection('(1, 3)', '(5,\
    \ 6)') . \"\\n\";\necho intersection('(1, 3)', '(6, 7)') . \"\\n\";\necho intersection('(1,\
    \ 3)', '(7, 8)') . \"\\n\";\necho intersection('(1, 3)', '(8, 9)') . \"\\n\";\n\
    echo intersection('(1, 3)', '(9, 10)') . \"\\n\";\necho intersection('(1, 3)',\
    \ '(10, 11)') . \"\\n\";\necho intersection('(1, 3)', '(11, 12)') . \"\\n\";\n\
    echo intersection('(1, 3)', '(12, 13)') . \"\\n\";\necho intersection('(1, 3)',\
    \ '(13, 14)') . \"\\n\";\necho intersection", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    $length\
    \ = $end - $start;\n    if ($length < 0) {\n        return \"NO\";\n    }\n  \
    \  if ($length == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n\
    \        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n    \
    \    if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $interval1 = [$interval1[0], $interval1[1]];\n\
    \    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n   \
    \ sort($interval2);\n    if ($interval1[1] < $interval2[0] || $interval2[1] <\
    \ $interval1[0]) {\n        return \"NO\";\n    }\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho\
    \ intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", "  $intersection\
    \ = [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n  $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n  if ($intersection[0] > $intersection[1])\
    \ {\n    return \"NO\";\n  }\n  return isPrime($intersection[1] - $intersection[0]\
    \ + 1) ? \"YES\" : \"NO\";\n}\n", "    $intersection = [];\n    if ($interval1[0]\
    \ <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n        $intersection[]\
    \ = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1] && $interval1[1]\
    \ >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n    }\n    if\
    \ ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n     \
    \   $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <= $interval1[1]\
    \ && $interval2[1] >= $interval1[1]) {\n        $intersection[] = $interval1[1];\n\
    \    }\n    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n\
    \    $intersection = array_unique($intersection);\n    sort($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3])\
    \ . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";\necho intersection([-3, -1], [-5, -4]) . \"\\n\";\n\
    echo intersection([-3, -1], [-5, -3]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, -2]) . \"\\n\";\necho intersection([-3, -1], [-5, -1]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 0]) . \"\\n\";\necho intersection([-3, -1", "  \
    \  $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    if ($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n        return 'NO';\n\
    \    }\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length < 2) {\n        return 'NO';\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\n\necho intersection('1,2', '2,3') . PHP_EOL;\n\
    echo intersection('-1,1', '0,4') . PHP_EOL;\necho intersection('-3,-1', '-5,5')\
    \ . PHP_EOL;", "  $intersect = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n  if (count($intersect) == 0) {\n   \
    \ return \"NO\";\n  }\n  return isPrime(count($intersect)) ? \"YES\" : \"NO\"\
    ;\n}\n", "    $intersect = [];\n    $intersect[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersect[1] = min($interval1[1], $interval2[1]);\n    if ($intersect[0]\
    \ > $intersect[1]) {\n        return \"NO\";\n    }\n    $length = $intersect[1]\
    \ - $intersect[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection\
    \ = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (count($intersection) == 0) {\n        return \"NO\"\
    ;\n    }\n    $length = count($intersection);\n    if ($length == 1) {\n     \
    \   return \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $start1 =\
    \ $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n \
    \   $end2 = $interval2[1];\n    $intersection = [];\n    if ($start1 <= $start2)\
    \ {\n        if ($end1 < $start2) {\n            return \"NO\";\n        } else\
    \ {\n            $intersection[] = $start2;\n            if ($end1 < $end2) {\n\
    \                $intersection[] = $end1;\n            } else {\n            \
    \    $intersection[] = $end2;\n            }\n        }\n    } else {\n      \
    \  if ($end2 < $start1) {\n            return \"NO\";\n        } else {\n    \
    \        $intersection[] = $start1;\n            if ($end2 < $end1) {\n      \
    \          $intersection[] = $end2;\n            } else {\n                $intersection[]\
    \ = $end1;\n            }\n        }\n    }\n    $length = $intersection[1] -\
    \ $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";", "  $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0] + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}\n", "  $intersect = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n  return count($intersect)\
    \ > 1 && isPrime(count($intersect)) ? 'YES' : 'NO';\n}\n", "    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length <= 0) {\n   \
    \     return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $interval1\
    \ = array_map('intval', explode(', ', $interval1));\n    $interval2 = array_map('intval',\
    \ explode(', ', $interval2));\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return 'NO';\n \
    \   }\n    $length = count($intersection);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    return in_array($length, $primes) ? 'YES' : 'NO';\n}\n\necho intersection('1,\
    \ 2', '2, 3') . PHP_EOL;\necho intersection('-1, 1', '0, 4') . PHP_EOL;\necho\
    \ intersection('-3, -1', '-5, 5') . PHP_EOL;", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length <= 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]);\n\
    echo \"\\n\";\necho intersection([-1, 1], [0, 4]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]);\necho \"\\n\";\necho intersection([-3, -1], [-5, -4]);\necho\
    \ \"\\n\";\necho intersection([-3, -1], [-5, -6]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, -2]);\necho \"\\n\";\necho intersection([-3, -1], [-5, -1]);\necho\
    \ \"\\n\";\necho intersection([-3, -1], [-5, 0]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 1]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 2]);\necho \"\
    \\n\";\necho intersection([-3, -1], [-5, 3]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 4]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 5]);\necho \"\
    \\n\";\necho intersection([-3, -1], [-4, 5]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [-3, 5]);\necho \"\\n\";\necho intersection([-3, -1], [-2, 5]);\necho \"\
    \\n\";\necho intersection([-3, -1], [-1, 5]);\necho \"\\n\";\necho intersection([-3,\
    \ -1], [0, 5]);\necho \"\\n\";\necho intersection([-3, -1],", "    $interval1\
    \ = array_map('intval', explode(', ', $interval1));\n    $interval2 = array_map('intval',\
    \ explode(', ', $interval2));\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    if ($intersection[0] > $intersection[1])\
    \ return 'NO';\n    $length = $intersection[1] - $intersection[0] + 1;\n    if\
    \ ($length == 1) return 'NO';\n    if ($length == 2) return 'YES';\n    for ($i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) return 'NO';\n  \
    \  }\n    return 'YES';\n}\n", "    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    if ($intersection[0] > $intersection[1])\
    \ return \"NO\";\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) return \"NO\";\n    if ($length == 2) return \"YES\";\n  \
    \  for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) return \"\
    NO\";\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\
    \\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ <= 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1 = array_map('intval', explode(',\
    \ ', $interval1));\n    $interval2 = array_map('intval', explode(', ', $interval2));\n\
    \    $intersection = [];\n    if ($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) {\n        $intersection[] = $interval1[0];\n    }\n    if\
    \ ($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n     \
    \   $intersection[] = $interval1[1];\n    }\n    if ($interval2[0] >= $interval1[0]\
    \ && $interval2[0] <= $interval1[1]) {\n        $intersection[] = $interval2[0];\n\
    \    }\n    if ($interval2[1] >= $interval1[0] && $interval2[1] <= $interval1[1])\
    \ {\n        $intersection[] = $interval2[1];\n    }\n    if (empty($intersection))\
    \ {\n        return 'NO';\n    }\n    $intersection = array_unique($intersection);\n\
    \    sort($intersection);\n    $length = $intersection[count($intersection) -\
    \ 1] - $intersection[0];\n    if ($length < 2) {\n        return 'NO';\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('(1,\
    \ 2)', '(2, 3)') . '<br>';\necho intersection('(-1, 1)', '(0, 4)') . '<br>';\n\
    echo intersection('(-3, -1)', '(-5, 5)') . '<br>';\necho intersection('(-3, -1)',\
    \ '(-5, -4)') . '<br>';\necho intersection('(-3, -1)', '(-5, -2)') . '<br>';\n\
    echo", "    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',',\
    \ $interval2);\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return 'NO';\n    }\n   \
    \ $length = $end - $start + 1;\n    if ($length == 1) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('(1,\
    \ 2)', '(2, 3)') . PHP_EOL;\necho intersection('(-1, 1)', '(0, 4)') . PHP_EOL;\n\
    echo intersection('(-3, -1)', '(-5, 5)') . PHP_EOL;", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = [$interval1[0],\
    \ $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n\
    \    sort($interval2);\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\n\
    echo intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"\\n\";", "    $intersection = [];\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "  $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n  if ($intersection[0] > $intersection[1])\
    \ return \"NO\";\n  return isPrime($intersection[1] - $intersection[0] + 1) ?\
    \ \"YES\" : \"NO\";\n}", "    $start = max($interval1[0], $interval2[0]);\n  \
    \  $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n     \
    \   return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length <\
    \ 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2\
    \ = [$interval2[0], $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n\
    \    $interval = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval[1] - $interval[0] + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if (isPrime($length)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 = explode(',', $interval1);\n\
    \    $interval2 = explode(',', $interval2);\n    $interval1[0] = (int)$interval1[0];\n\
    \    $interval1[1] = (int)$interval1[1];\n    $interval2[0] = (int)$interval2[0];\n\
    \    $interval2[1] = (int)$interval2[1];\n    $intersection = [];\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ 'NO';\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if\
    \ ($length < 2) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\n\necho intersection('1,2', '2,3') . PHP_EOL;\n\
    echo intersection('-1,1', '0,4') . PHP_EOL;\necho intersection('-3,-1', '-5,5')\
    \ . PHP_EOL;", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $intersection = [];\n    if ($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) {\n        $intersection[] = $interval1[0];\n    }\n    if\
    \ ($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n     \
    \   $intersection[] = $interval1[1];\n    }\n    if ($interval2[0] >= $interval1[0]\
    \ && $interval2[0] <= $interval1[1]) {\n        $intersection[] = $interval2[0];\n\
    \    }\n    if ($interval2[1] >= $interval1[0] && $interval2[1] <= $interval1[1])\
    \ {\n        $intersection[] = $interval2[1];\n    }\n    if (count($intersection)\
    \ == 0) {\n        return 'NO';\n    }\n    $intersection = max($intersection)\
    \ - min($intersection);\n    if ($intersection == 1) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $intersection; $i++) {\n        if ($intersection\
    \ % $i == 0) {\n            return 'NO';\n        }\n    }\n    return 'YES';\n\
    }\necho intersection('1,2', '2,3') . \"\\n\";\necho intersection('-1,1', '0,4')\
    \ . \"\\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";\necho intersection('-1,1',\
    \ '0,4') . \"\\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";\necho intersection('-1,1',\
    \ '0,4') . \"\\n\";\necho intersection('-3,-1', '-5,5') . \"\\n\";\necho intersection('-1,1',\
    \ '0,4') . \"\\n\";\necho intersection('-3,-1',", "    $intersection = [];\n \
    \   $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  if ($start >\
    \ $end) return \"NO\";\n  if ($start == $end) return \"YES\";\n  $prime = true;\n\
    \  for ($i = 2; $i < $end; $i++) {\n    if ($end % $i == 0) {\n      $prime =\
    \ false;\n      break;\n    }\n  }\n  return $prime ? \"YES\" : \"NO\";\n}\n",
  "    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return 'NO';\n    }\n\
    \    if ($length == 2) {\n        return 'YES';\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n\
    \        }\n    }\n    return 'YES';\n}\necho intersection('1, 2', '2, 3') . PHP_EOL;\n\
    echo intersection('-1, 1', '0, 4') . PHP_EOL;\necho intersection('-3, -1', '-5,\
    \ 5') . PHP_EOL;", "    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $interval1 = explode(',', $interval1);\n\
    \    $interval2 = explode(',', $interval2);\n    $interval1[0] = (int)$interval1[0];\n\
    \    $interval1[1] = (int)$interval1[1];\n    $interval2[0] = (int)$interval2[0];\n\
    \    $interval2[1] = (int)$interval2[1];\n    $intersection = [];\n    if ($interval1[0]\
    \ <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n        $intersection[]\
    \ = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1] && $interval1[1]\
    \ >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n    }\n    if\
    \ ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n     \
    \   $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <= $interval1[1]\
    \ && $interval2[1] >= $interval1[1]) {\n        $intersection[] = $interval1[1];\n\
    \    }\n    if (count($intersection) == 0) {\n        return 'NO';\n    }\n  \
    \  sort($intersection);\n    $intersection = $intersection[1] - $intersection[0];\n\
    \    if ($intersection == 1) {\n        return 'NO';\n    }\n    for ($i = 2;\
    \ $i < $intersection; $i++) {\n        if ($intersection % $i == 0) {\n      \
    \      return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('1,\
    \ 2', '2, 3') . '<br>';\necho intersection('-1, 1', '0, 4') . '<br>';\necho intersection('-3,\
    \ -1', '-5, 5') . '<br>';\necho intersection('-", "  $intersect = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n  if (count($intersect)\
    \ == 0) {\n    return \"NO\";\n  }\n  $length = count($intersect);\n  if ($length\
    \ == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n   \
    \ if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $interval1\
    \ = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n\
    \    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) {\n \
    \       return \"NO\";\n    }\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $intersection = [];\n    $intersection[0] =\
    \ max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    $prime = true;\n   \
    \ for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n     \
    \       $prime = false;\n            break;\n        }\n    }\n    return $prime\
    \ ? \"YES\" : \"NO\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length <= 0) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\n\
    echo intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"\\n\";", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2\
    \ = [$interval2[0], $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n\
    \    if ($interval1[1] < $interval2[0] || $interval2[1] < $interval1[0]) {\n \
    \       return \"NO\";\n    }\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_map('intval',\
    \ explode(', ', $interval1));\n    $interval2 = array_map('intval', explode(',\
    \ ', $interval2));\n    $intersection = [];\n    if ($interval1[0] <= $interval2[0]\
    \ && $interval2[0] <= $interval1[1]) {\n        $intersection[] = $interval2[0];\n\
    \    }\n    if ($interval2[0] <= $interval1[0] && $interval1[0] <= $interval2[1])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval1[0] <=\
    \ $interval2[1] && $interval2[1] <= $interval1[1]) {\n        $intersection[]\
    \ = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[1] && $interval1[1]\
    \ <= $interval2[1]) {\n        $intersection[] = $interval1[1];\n    }\n    if\
    \ (empty($intersection)) {\n        return 'NO';\n    }\n    $intersection = array_unique($intersection);\n\
    \    sort($intersection);\n    $length = $intersection[count($intersection) -\
    \ 1] - $intersection[0];\n    if ($length == 1) {\n        return 'NO';\n    }\n\
    \    $prime = true;\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            $prime = false;\n            break;\n        }\n \
    \   }\n    return $prime ? 'YES' : 'NO';\n}\necho intersection('1, 2', '2, 3')\
    \ . '<br>';\necho intersection('-1, 1', '0, 4') . '<br>';\necho intersection('-3,\
    \ -1', '-5, 5') . '<br>';\necho intersection('-3, -1', '-5, -1') . '<br>';\necho\
    \ intersection('-3, -1', '-5, -2')", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\"\
    ;\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n   \
    \ $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n  \
    \  if ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "  $intersection = [];\n  $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \  $intersection[1] = min($interval1[1], $interval2[1]);\n  if ($intersection[0]\
    \ > $intersection[1]) {\n    return \"NO\";\n  }\n  $length = $intersection[1]\
    \ - $intersection[0] + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3])\
    \ . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $interval1 = array_map('intval', explode(',\
    \ ', $interval1));\n    $interval2 = array_map('intval', explode(', ', $interval2));\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return 'NO';\n    }\n   \
    \ $length = $end - $start + 1;\n    if ($length == 1) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\n\necho\
    \ intersection('(1, 2)', '(2, 3)') . \"\\n\";\necho intersection('(-1, 1)', '(0,\
    \ 4)') . \"\\n\";\necho intersection('(-3, -1)', '(-5, 5)') . \"\\n\";", "  $interval1\
    \ = explode(',', $interval1);\n  $interval2 = explode(',', $interval2);\n  $interval1[0]\
    \ = (int)$interval1[0];\n  $interval1[1] = (int)$interval1[1];\n  $interval2[0]\
    \ = (int)$interval2[0];\n  $interval2[1] = (int)$interval2[1];\n  $intersection\
    \ = [];\n  if ($interval1[0] > $interval2[0]) {\n    $temp = $interval1;\n   \
    \ $interval1 = $interval2;\n    $interval2 = $temp;\n  }\n  if ($interval1[1]\
    \ < $interval2[0]) {\n    return 'NO';\n  }\n  $intersection[0] = $interval2[0];\n\
    \  $intersection[1] = $interval1[1] < $interval2[1] ? $interval1[1] : $interval2[1];\n\
    \  $length = $intersection[1] - $intersection[0] + 1;\n  if ($length <= 1) {\n\
    \    return 'NO';\n  }\n  for ($i = 2; $i <= sqrt($length); $i++) {\n    if ($length\
    \ % $i == 0) {\n      return 'NO';\n    }\n  }\n  return 'YES';\n}\n\necho intersection('1,2',\
    \ '2,3') . \"\\n\";\necho intersection('-1,1', '0,4') . \"\\n\";\necho intersection('-3,-1',\
    \ '-5,5') . \"\\n\";", "  $intersection = [];\n  for ($i = $interval1[0]; $i <=\
    \ $interval1[1]; $i++) {\n    for ($j = $interval2[0]; $j <= $interval2[1]; $j++)\
    \ {\n      if ($i == $j) {\n        $intersection[] = $i;\n      }\n    }\n  }\n\
    \  if (count($intersection) == 0) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n\
    \  $isPrime = true;\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i\
    \ == 0) {\n      $isPrime = false;\n      break;\n    }\n  }\n  if ($isPrime)\
    \ {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  if ($start >\
    \ $end) {\n    return \"NO\";\n  }\n  $len = $end - $start + 1;\n  if ($len <\
    \ 2) {\n    return \"NO\";\n  }\n  if ($len == 2) {\n    return \"YES\";\n  }\n\
    \  if ($len % 2 == 0) {\n    return \"NO\";\n  }\n  for ($i = 3; $i <= sqrt($len);\
    \ $i += 2) {\n    if ($len % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2\
    \ = [$interval2[0], $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\n\
    echo intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"\\n\";", "    $interval1 = array_map('intval', explode(', ', $interval1));\n\
    \    $interval2 = array_map('intval', explode(', ', $interval2));\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return 'NO';\n    }\n\
    \    return isPrime($intersection[1] - $intersection[0] + 1) ? 'YES' : 'NO';\n\
    }", "  $intersection = [];\n  if ($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) {\n    $intersection[] = $interval1[0];\n  }\n  if ($interval1[1]\
    \ >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n    $intersection[] =\
    \ $interval1[1];\n  }\n  if ($interval2[0] >= $interval1[0] && $interval2[0] <=\
    \ $interval1[1]) {\n    $intersection[] = $interval2[0];\n  }\n  if ($interval2[1]\
    \ >= $interval1[0] && $interval2[1] <= $interval1[1]) {\n    $intersection[] =\
    \ $interval2[1];\n  }\n  if (count($intersection) > 1) {\n    $length = abs($intersection[0]\
    \ - $intersection[1]);\n    if ($length == 1) {\n      return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n      if ($length % $i == 0) {\n    \
    \    return \"NO\";\n      }\n    }\n    return \"YES\";\n  }\n  return \"NO\"\
    ;\n}\n", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n", "    $interval1 = array_map('intval', explode(', ',\
    \ $interval1));\n    $interval2 = array_map('intval', explode(', ', $interval2));\n\
    \    $intersection = [];\n    $intersection[] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[] = min($interval1[1], $interval2[1]);\n    $length = $intersection[1]\
    \ - $intersection[0];\n    if ($length <= 0) {\n        return 'NO';\n    }\n\
    \    if ($length == 1) {\n        return 'NO';\n    }\n    if ($length == 2) {\n\
    \        return 'YES';\n    }\n    for ($i = 2; $i < $length; $i++) {\n      \
    \  if ($length % $i == 0) {\n            return 'NO';\n        }\n    }\n    return\
    \ 'YES';\n}\n", "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2\
    \ = [$interval2[0], $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n\
    \    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "  $interval1 = array_map('intval', explode(',\
    \ ', $interval1));\n  $interval2 = array_map('intval', explode(', ', $interval2));\n\
    \  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  if ($intersection[0] > $intersection[1]) return 'NO';\n  return isPrime($intersection[1]\
    \ - $intersection[0] + 1) ? 'YES' : 'NO';\n}\n", "    $intersection = [];\n  \
    \  $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    if (isPrime($intersection[1] - $intersection[0]\
    \ + 1)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1\
    \ = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n\
    \    if ($interval1[0] > $interval1[1]) {\n        $interval1 = [$interval1[1],\
    \ $interval1[0]];\n    }\n    if ($interval2[0] > $interval2[1]) {\n        $interval2\
    \ = [$interval2[1], $interval2[0]];\n    }\n    if ($interval1[0] > $interval2[1]\
    \ || $interval2[0] > $interval1[1]) {\n        return \"NO\";\n    }\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    if (in_array($length,\
    \ $primes)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"\\n\";", "    $interval1 = array_map('intval',\
    \ explode(', ', $interval1));\n    $interval2 = array_map('intval', explode(',\
    \ ', $interval2));\n    $intersection = [];\n    for ($i = $interval1[0]; $i <=\
    \ $interval1[1]; $i++) {\n        for ($j = $interval2[0]; $j <= $interval2[1];\
    \ $j++) {\n            if ($i == $j) {\n                $intersection[] = $i;\n\
    \            }\n        }\n    }\n    if (empty($intersection)) {\n        return\
    \ 'NO';\n    }\n    $length = count($intersection);\n    if ($length == 1) {\n\
    \        return 'NO';\n    }\n    for ($i = 2; $i < $length; $i++) {\n       \
    \ if ($length % $i == 0) {\n            return 'NO';\n        }\n    }\n    return\
    \ 'YES';\n}\n", "    $interval1 = explode(',', $interval1);\n    $interval2 =\
    \ explode(',', $interval2);\n    $intersection = [];\n    if ($interval1[0] <=\
    \ $interval2[0] && $interval1[1] >= $interval2[0]) {\n        $intersection[]\
    \ = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1] && $interval1[1]\
    \ >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n    }\n    if\
    \ ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0]) {\n     \
    \   $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <= $interval1[1]\
    \ && $interval2[1] >= $interval1[1]) {\n        $intersection[] = $interval1[1];\n\
    \    }\n    if (count($intersection) == 0) {\n        return 'NO';\n    }\n  \
    \  $intersection = array_unique($intersection);\n    sort($intersection);\n  \
    \  $intersection = array_values($intersection);\n    $length = $intersection[count($intersection)\
    \ - 1] - $intersection[0];\n    if ($length == 0) {\n        return 'NO';\n  \
    \  }\n    $prime = true;\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            $prime = false;\n            break;\n        }\n \
    \   }\n    return $prime ? 'YES' : 'NO';\n}\n\necho intersection('1,2', '2,3')\
    \ . PHP_EOL;\necho intersection('-1,1', '0,4') . PHP_EOL;\necho intersection('-3,-1',\
    \ '-5,5') . PHP_EOL;", "    $start = max($interval1[0], $interval2[0]);\n    $end\
    \ = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n        return\
    \ \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\n\
    echo intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n    $end\
    \ = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n        return\
    \ \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\n", "    $intersect = [];\n    $intersect[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersect[1] = min($interval1[1], $interval2[1]);\n  \
    \  if ($intersect[0] > $intersect[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $intersect[1] - $intersect[0] + 1;\n    if (isPrime($length)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", " \
    \   $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersection[0] > $intersection[1]) return \"NO\";\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) return \"NO\";\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) return \"NO\";\n  \
    \  }\n    return \"YES\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return \"\
    YES\";\n    }\n    if ($length % 2 == 0) {\n        return \"NO\";\n    }\n  \
    \  for ($i = 3; $i <= sqrt($length); $i += 2) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = [$interval1[0], $interval1[1]];\n    $interval2 = [$interval2[0],\
    \ $interval2[1]];\n    sort($interval1);\n    sort($interval2);\n    $intersection\
    \ = [];\n    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0])\
    \ {\n        $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <=\
    \ $interval2[1] && $interval1[1] >= $interval2[1]) {\n        $intersection[]\
    \ = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1]\
    \ >= $interval1[0]) {\n        $intersection[] = $interval1[0];\n    }\n    if\
    \ ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1]) {\n     \
    \   $intersection[] = $interval1[1];\n    }\n    if (count($intersection) == 0)\
    \ {\n        return \"NO\";\n    }\n    sort($intersection);\n    $length = $intersection[1]\
    \ - $intersection[0];\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1,\
    \ 2], [2, 3]) . \"<br>\";\necho intersection([-1, 1], [0, 4]) . \"<br>\";\necho\
    \ intersection([-3, -1], [-5, 5]) . \"<br>\";\necho intersection([-3, -1], [-5,\
    \ -4]) . \"<br>\";\necho intersection([-3, -1], [-5, -6]) . \"<br>\";\necho intersection([-3,\
    \ -1], [-5, -7]) . \"<br>\";", "    $interval1 = [$interval1[0], $interval1[1]];\n\
    \    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n   \
    \ sort($interval2);\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length < 2) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n\
    \        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n    \
    \    if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho\
    \ intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5])\
    \ . \"\\n\";", "    $intersection = [];\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\n", "  $start = max($interval1[0], $interval2[0]);\n\
    \  $end = min($interval1[1], $interval2[1]);\n  if ($start > $end) return \"NO\"\
    ;\n  $length = $end - $start + 1;\n  if ($length < 2) return \"NO\";\n  for ($i\
    \ = 2; $i < $length; $i++) {\n    if ($length % $i == 0) return \"NO\";\n  }\n\
    \  return \"YES\";\n}\n", "  $interval1 = range($interval1[0], $interval1[1]);\n\
    \  $interval2 = range($interval2[0], $interval2[1]);\n  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (count($intersection) == 0) {\n    return \"NO\";\n  }\n\
    \  $length = count($intersection);\n  if ($length == 1) {\n    return \"NO\";\n\
    \  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n   \
    \   return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = [];\n   \
    \ if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0]) {\n  \
    \      $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ && $interval1[1] >= $interval2[1]) {\n        $intersection[] = $interval2[1];\n\
    \    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval2[0] <=\
    \ $interval1[1] && $interval2[1] >= $interval1[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if (count($intersection) == 0) {\n        return\
    \ \"NO\";\n    }\n    $intersection = array_unique($intersection);\n    if (count($intersection)\
    \ == 1) {\n        return \"YES\";\n    }\n    $intersection = array_values($intersection);\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length == 1) {\n\
    \        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n    \
    \    if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    echo intersection([1, 2], [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4])\
    \ . \"\\n\";\necho intersection([-3, -1], [-5, 5]) . \"\\n\";", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  if ($start >\
    \ $end) return \"NO\";\n  return isPrime($end - $start + 1) ? \"YES\" : \"NO\"\
    ;\n}\n", "    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = array_map('intval', explode(', ', $interval1));\n    $interval2\
    \ = array_map('intval', explode(', ', $interval2));\n    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    return isPrime($length) ? 'YES' : 'NO';\n}", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length <= 0) {\n   \
    \     return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $interval1[0] = (int)$interval1[0];\n    $interval1[1] = (int)$interval1[1];\n\
    \    $interval2[0] = (int)$interval2[0];\n    $interval2[1] = (int)$interval2[1];\n\
    \    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return 'NO';\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return 'NO';\n    }\n\
    \    if ($length == 2) {\n        return 'YES';\n    }\n    for ($i = 2; $i <=\
    \ sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return\
    \ 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('1,2', '2,3')\
    \ . '<br>';\necho intersection('-1,1', '0,4') . '<br>';\necho intersection('-3,-1',\
    \ '-5,5') . '<br>';\necho intersection('-5,-1', '-5,5') . '<br>';\necho intersection('-5,5',\
    \ '-5,-1') . '<br>';\necho intersection('-5,5', '-5,5') . '<br>';\necho intersection('-5,5',\
    \ '-5,6') . '<br>';\necho intersection('-5,5', '-6,6') . '<br>';\necho intersection('-5,5',\
    \ '-6,7') . '<br>';\necho intersection('-5,5', '-7,7') . '<br>';\necho intersection",
  "    $interval1 = explode(',', $interval1);\n    $interval2 = explode(',', $interval2);\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return 'NO';\n    }\n   \
    \ $length = $end - $start + 1;\n    if ($length < 2) {\n        return 'NO';\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return 'NO';\n        }\n    }\n    return 'YES';\n}\necho intersection('1,2',\
    \ '2,3') . '<br>';\necho intersection('-1,1', '0,4') . '<br>';\necho intersection('-3,-1',\
    \ '-5,5') . '<br>';", "    $interval1 = array_map('intval', $interval1);\n   \
    \ $interval2 = array_map('intval', $interval2);\n    $intersection = [];\n   \
    \ if ($interval1[0] > $interval2[0]) {\n        $intersection = [$interval1[0],\
    \ $interval2[1]];\n    } else {\n        $intersection = [$interval2[0], $interval1[1]];\n\
    \    }\n    $length = $intersection[1] - $intersection[0];\n    if ($length <=\
    \ 0) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\";\n\
    echo intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1], [-5,\
    \ 5]) . \"\\n\";", "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  $length = $end - $start;\n  if ($length < 0) {\n    return\
    \ \"NO\";\n  }\n  if ($length == 0) {\n    return \"YES\";\n  }\n  for ($i = 2;\
    \ $i <= $length / 2; $i++) {\n    if ($length % $i == 0) {\n      return \"NO\"\
    ;\n    }\n  }\n  return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\\
    n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n   \
    \ $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if (isPrime($length))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 =\
    \ array_unique($interval1);\n    $interval2 = array_unique($interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = $intersection[count($intersection)\
    \ - 1] - $intersection[0];\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection([1, 2],\
    \ [2, 3]) . \"\\n\";\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3,\
    \ -1], [-5, 5]) . \"\\n\";", "    $interval1 = range($interval1[0], $interval1[1]);\n\
    \    $interval2 = range($interval2[0], $interval2[1]);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  $interval1 = [$interval1[0], $interval1[1]];\n  $interval2 = [$interval2[0],\
    \ $interval2[1]];\n  sort($interval1);\n  sort($interval2);\n  $intersection =\
    \ [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n  if\
    \ ($intersection[0] > $intersection[1]) {\n    return \"NO\";\n  }\n  $length\
    \ = $intersection[1] - $intersection[0] + 1;\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    $intersection\
    \ = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection = [];\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    return $intersection[0] <= $intersection[1]\
    \ ? isPrime($intersection[1] - $intersection[0] + 1) ? \"YES\" : \"NO\" : \"NO\"\
    ;\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ 'NO';\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    if\
    \ ($length == 1) {\n        return 'NO';\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return 'NO';\n      \
    \  }\n    }\n    return 'YES';\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\necho intersection([1, 2], [2, 3]) . \"\\n\"\
    ;\necho intersection([-1, 1], [0, 4]) . \"\\n\";\necho intersection([-3, -1],\
    \ [-5, 5]) . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n   \
    \ $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    $length = $end - $start + 1;\n    return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}\n", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    $intersection = [];\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    if (isPrime($intersection[1] - $intersection[0] + 1)) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 = [$interval1[0],\
    \ $interval1[1]];\n    $interval2 = [$interval2[0], $interval2[1]];\n    sort($interval1);\n\
    \    sort($interval2);\n    $intersection = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $intersection = [];\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    return isPrime($length) ? \"YES\" : \"NO\"\
    ;\n}\n", "    $intersection = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n    if (count($intersection) === 0) {\n\
    \        return \"NO\";\n    }\n    return isPrime(count($intersection)) ? \"\
    YES\" : \"NO\";\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
