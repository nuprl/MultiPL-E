name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the list l.\n// >>> median([3, 1,\
  \ 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    sort($l);\n    $len = count($l);\n    $mid = floor($len / 2);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n   \
    \ } else {\n        return $l[$mid];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len\
    \ = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n      \
    \  return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n  \
    \  if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n\
    \    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $l = array_values($l);\n    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    $l =\
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len =\
    \ count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    $sorted = sort($l);\n    $length = count($l);\n    $middle = floor($length\
    \ / 2);\n    if ($length % 2) {\n        return $l[$middle];\n    } else {\n \
    \       return ($l[$middle - 1] + $l[$middle]) / 2;\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2\
    \ - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n  \
    \  }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n", "    $sorted = $l;\n    sort($sorted);\n  \
    \  $n = count($sorted);\n    if ($n % 2 == 0) {\n        return ($sorted[$n /\
    \ 2] + $sorted[$n / 2 - 1]) / 2;\n    } else {\n        return $sorted[$n / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    $n = count($l);\n \
    \   if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $mid = intval($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$mid] + $l[$mid - 1]) / 2;\n\
    \    } else {\n        return $l[$mid];\n    }\n}\n", "    $l = sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n     \
    \   return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len =\
    \ count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n    if ($len\
    \ % 2 == 0) {\n        return ($sorted[$len / 2] + $sorted[$len / 2 - 1]) / 2;\n\
    \    } else {\n        return $sorted[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    $mid = floor($len / 2);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$mid - 1] + $l[$mid]) / 2;\n    } else {\n        return $l[$mid];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $l = sort($l);\n \
    \   $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "    $l = sort($l);\n    $length = count($l);\n    if ($length %\
    \ 2 == 0) {\n        return ($l[$length / 2] + $l[$length / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[$length / 2];\n    }\n}\n", "    $l = sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[$len / 2];\n    }\n\
    }\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n      \
    \  return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$len / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n  \
    \  $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] +\
    \ $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n \
    \   }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n \
    \   if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  \
    \  } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len\
    \ / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) /\
    \ 2];\n    }\n}\n", "\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\t\
    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\
    \t}\n}\n", "    sort($l);\n    $size = count($l);\n    if ($size % 2 == 0) {\n\
    \        return ($l[$size / 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n     \
    \   return $l[$size / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $mid = $n\
    \ / 2;\n    if ($n % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n\
    \    } else {\n        return $l[$mid];\n    }\n}\n", "    $l = sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $l = sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        $median\
    \ = ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        $median = $l[($len\
    \ - 1) / 2];\n    }\n    return $median;\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    $sorted = $l;\n    sort($sorted);\n    $n = count($sorted);\n\
    \    if ($n % 2 == 0) {\n        return ($sorted[$n / 2] + $sorted[$n / 2 - 1])\
    \ / 2;\n    } else {\n        return $sorted[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $l = sort($l);\n    $len = count($l);\n    if\
    \ ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$len / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len\
    \ = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[$len\
    \ / 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    $sorted = sort($l);\n    $len = count($l);\n    if ($len %\
    \ 2 == 0) {\n        $median = ($l[$len/2] + $l[$len/2 - 1]) / 2;\n    } else\
    \ {\n        $median = $l[($len - 1) / 2];\n    }\n    return $median;\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n /\
    \ 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $l = sort($l);\n    $len = count($l);\n    $mid = floor($len / 2);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$mid] + $l[$mid - 1]) / 2;\n    } else {\n \
    \       return $l[$mid];\n    }\n}\n", "    $l = sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $size = count($l);\n    if ($size % 2 == 0) {\n        return ($l[$size /\
    \ 2] + $l[$size / 2 - 1]) / 2;\n    } else {\n        return $l[$size / 2];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    $sorted = $l;\n    sort($sorted);\n    $len = count($sorted);\n\
    \    if ($len % 2 == 0) {\n        return ($sorted[$len / 2] + $sorted[$len /\
    \ 2 - 1]) / 2;\n    } else {\n        return $sorted[($len - 1) / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1)\
    \ / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2\
    \ == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $l = sort($l);\n \
    \   $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $len = count($l);\n    if ($len == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[$len / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $l = sort($l);\n \
    \   $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$len / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n   \
    \ if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    }\
    \ else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len =\
    \ count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    $l = sort($l);\n    $length = count($l);\n    if ($length % 2 == 0) {\n   \
    \     $median = ($l[$length / 2] + $l[$length / 2 - 1]) / 2;\n    } else {\n \
    \       $median = $l[($length - 1) / 2];\n    }\n    return $median;\n}\n", " \
    \   $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1)\
    \ / 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "\tsort($l);\n\t$n = count($l);\n\
    \tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else\
    \ {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    $l = sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $l = sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[$len\
    \ / 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $l = sort($l);\n \
    \   $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        $mid = $len / 2;\n        return ($l[$mid]\
    \ + $l[$mid - 1]) / 2;\n    } else {\n        $mid = ($len - 1) / 2;\n       \
    \ return $l[$mid];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len\
    \ = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "\t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2\
    \ - 1] + $l[$n / 2]) / 2;\n\t} else {\n\t\treturn $l[($n - 1) / 2];\n\t}\n}\n",
  "    $l = sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len\
    \ = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len\
    \ / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) /\
    \ 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len\
    \ / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[$len / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len\
    \ / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) /\
    \ 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len\
    \ = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return\
    \ ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n /\
    \ 2]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len\
    \ / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) /\
    \ 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 ==\
    \ 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n    $len\
    \ = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n",
  "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1)\
    \ / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2\
    \ == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n\
    \    $len = count($l);\n    if ($len % 2 == 0) {\n        return ($l[$len / 2]\
    \ + $l[$len / 2 - 1]) / 2;\n    } else {\n        return $l[($len - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "\t$l = sort($l);\n\
    \t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[($len - 1) / 2];\n    }\n}\n", "    sort($l);\n    $count = count($l);\n\
    \    if ($count % 2 == 0) {\n        $mid = $count / 2;\n        return ($l[$mid\
    \ - 1] + $l[$mid]) / 2;\n    } else {\n        $mid = floor($count / 2);\n   \
    \     return $l[$mid];\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
