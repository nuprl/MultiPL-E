name: HumanEval_157_right_angle_triangle
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return True\
  \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunction right_angle_triangle($a, $b, $c) {\n"
tests: "function candidate(...$args) {\n    return right_angle_triangle(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  // Your code here\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1\
    \ = $sides[1];\n  $cathetus2 = $sides[0];\n  return $hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    $hypotenuse = $sides[2];\n    $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n\
    \    return ($hypotenuse ** 2) == ($cathetus1 ** 2) + ($cathetus2 ** 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $arr = [$a, $b, $c];\n\
    \  sort($arr);\n  return $arr[0] * $arr[0] + $arr[1] * $arr[1] == $arr[2] * $arr[2];\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4,\
    \ 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) ==\
    \ pow($sides[2], 2);\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse\
    \ = $sides[2];\n  $cathetus1 = $sides[1];\n  $cathetus2 = $sides[0];\n  return\
    \ $hypotenuse ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "    // Your code\
    \ here\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] *\
    \ $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] * $sides[0] + $sides[1]\
    \ * $sides[1] == $sides[2] * $sides[2];\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "  if ($a > $b && $a > $c) {\n    return $a * $a == $b *\
    \ $b + $c * $c;\n  } else if ($b > $a && $b > $c) {\n    return $b * $b == $a\
    \ * $a + $c * $c;\n  } else {\n    return $c * $c == $a * $a + $b * $b;\n  }\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] * $sides[0] + $sides[1]\
    \ * $sides[1] == $sides[2] * $sides[2];\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  $a = $sides[0];\n  $b = $sides[1];\n  $c = $sides[2];\n  return\
    \ $a * $a + $b * $b == $c * $c;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\necho\
    \ right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3)\
    \ . PHP_EOL;", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $hypotenuse = max($a, $b, $c);\n  $cathetus1\
    \ = min($a, $b, $c);\n  $cathetus2 = ($a + $b + $c) - $hypotenuse - $cathetus1;\n\
    \  return $hypotenuse ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3)\
    \ . \"\\n\";", "  $hypotenuse = max($a, $b, $c);\n  $cathetus1 = min($a, $b, $c);\n\
    \  $cathetus2 = $a + $b + $c - $hypotenuse - $cathetus1;\n  return $hypotenuse\
    \ ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "  $hypotenuse = max($a, $b,\
    \ $c);\n  $side1 = $a;\n  $side2 = $b;\n  if ($hypotenuse == $a) {\n    $side1\
    \ = $b;\n    $side2 = $c;\n  } else if ($hypotenuse == $b) {\n    $side1 = $a;\n\
    \    $side2 = $c;\n  }\n  return pow($hypotenuse, 2) == pow($side1, 2) + pow($side2,\
    \ 2);\n}\n", "  $a2 = $a * $a;\n  $b2 = $b * $b;\n  $c2 = $c * $c;\n  if ($a2\
    \ + $b2 == $c2) {\n    return true;\n  } elseif ($a2 + $c2 == $b2) {\n    return\
    \ true;\n  } elseif ($b2 + $c2 == $a2) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\necho right_angle_triangle(5, 12, 13) . \"\\n\";\necho right_angle_triangle(7,\
    \ 24, 25) . \"\\n\";\necho right_angle_triangle(9, 40, 41) . \"\\n\";\necho right_angle_triangle(11,\
    \ 60, 61) . \"\\n\";\necho right_angle_triangle(13, 84, 85) . \"\\n\";\necho right_angle_triangle(15,\
    \ 112, 113) . \"\\n\";\necho right_angle_triangle(17, 144, 145) . \"\\n\";\necho\
    \ right_angle_triangle(19, 180, 181) . \"\\n\";\necho right_angle_triangle(21,\
    \ 220, 221) . \"\\n\";\necho right_angle_triangle(23, 264, 265) . \"\\n\";\necho\
    \ right_angle_triangle(25, 312, 313) . \"\\n\";\necho right_angle_triangle(27,\
    \ 364, 365) . \"\\n\";\necho right_angle_triangle(29, 420, 421) . \"\\n\";\necho\
    \ right_angle_triangle(31, 480, 481) . \"\\n\";\necho right_angle_triangle(33,\
    \ 544, 545) . \"\\n\";\necho right_angle_triangle(35, 612, 613) . \"\\n\";\necho\
    \ right_angle_triangle(37, 684, 685) . \"\\n\";\necho right_angle_triangle(39,\
    \ 760, 761) . \"\\n\";\necho right_angle", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $hypotenuse = max($a, $b,\
    \ $c);\n  $side1 = min($a, $b, $c);\n  $side2 = $a + $b + $c - $hypotenuse - $side1;\n\
    \  return pow($hypotenuse, 2) == pow($side1, 2) + pow($side2, 2);\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $leg1 = $sides[0];\n\
    \  $leg2 = $sides[1];\n  return $hypotenuse ** 2 == $leg1 ** 2 + $leg2 ** 2;\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  // Your code here\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1 =\
    \ $sides[1];\n  $cathetus2 = $sides[0];\n  return pow($hypotenuse, 2) == pow($cathetus1,\
    \ 2) + pow($cathetus2, 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n\
    \  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $hypotenuse = max($a, $b, $c);\n  $cathetus1 = min($a, $b, $c);\n  $cathetus2\
    \ = $a + $b + $c - $hypotenuse - $cathetus1;\n  return $hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] * $sides[0]\
    \ + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n}\n", "    $sides = [$a,\
    \ $b, $c];\n    rsort($sides);\n    return pow($sides[0], 2) == pow($sides[1],\
    \ 2) + pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}", "  $sides = [$a, $b, $c];\n  sort($sides);\n \
    \ return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $a2 = $a * $a;\n  $b2 = $b * $b;\n  $c2 = $c * $c;\n  if ($a2\
    \ + $b2 == $c2 || $a2 + $c2 == $b2 || $b2 + $c2 == $a2) {\n    return True;\n\
    \  } else {\n    return False;\n  }\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  $hypotenuse = $sides[2];\n  $cathetus1 = $sides[1];\n  $cathetus2 = $sides[0];\n\
    \  return $hypotenuse ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1 =\
    \ $sides[1];\n  $cathetus2 = $sides[0];\n  return $hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2;\n}\n", "    // your code here\n}\n", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) ==\
    \ pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho\
    \ right_angle_triangle(1, 2, 3) . \"\\n\";", "    $sides = [$a, $b, $c];\n   \
    \ sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse =\
    \ $sides[2];\n    $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n    $hypotenuse_squared\
    \ = pow($hypotenuse, 2);\n    $cathetus1_squared = pow($cathetus1, 2);\n    $cathetus2_squared\
    \ = pow($cathetus2, 2);\n    return $hypotenuse_squared == $cathetus1_squared\
    \ + $cathetus2_squared;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return\
    \ $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n", "  $hypotenuse = max($a, $b, $c);\n  $others\
    \ = array_diff([$a, $b, $c], [$hypotenuse]);\n  return pow($hypotenuse, 2) ==\
    \ pow($others[0], 2) + pow($others[1], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n\
    \  $cathetus1 = $sides[1];\n  $cathetus2 = $sides[0];\n  return $hypotenuse **\
    \ 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $hypotenuse = max($a, $b, $c);\n  $side1 = $a == $hypotenuse ?\
    \ $b : $a;\n  $side2 = $b == $hypotenuse ? $c : $b;\n  return $hypotenuse ** 2\
    \ == $side1 ** 2 + $side2 ** 2;\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\\
    n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1 = $sides[1];\n  $cathetus2\
    \ = $sides[0];\n  return $hypotenuse ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n\
    }\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1,\
    \ 2, 3) . PHP_EOL;", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  $hypotenuse = $sides[2];\n  $adjacent = $sides[1];\n  $opposite\
    \ = $sides[0];\n  if ($hypotenuse ** 2 == $adjacent ** 2 + $opposite ** 2) {\n\
    \    return True;\n  } else {\n    return False;\n  }\n}\n", "    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 =\
    \ $sides[1];\n    $cathetus2 = $sides[0];\n    $sum = pow($cathetus1, 2) + pow($cathetus2,\
    \ 2);\n    $hypotenuse_squared = pow($hypotenuse, 2);\n    if ($sum == $hypotenuse_squared)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] * $sides[0] + $sides[1]\
    \ * $sides[1] == $sides[2] * $sides[2];\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3)\
    \ . \"\\n\";", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0]**2 + $sides[1]**2 == $sides[2]**2;\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "  if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n\
    \  }\n  $sides = [$a, $b, $c];\n  sort($sides);\n  if ($sides[0] * $sides[0] +\
    \ $sides[1] * $sides[1] == $sides[2] * $sides[2]) {\n    return true;\n  }\n \
    \ return false;\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\necho right_angle_triangle(0, 0, 0) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(3, 4, -5) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 5.5) . \"\\n\";\necho right_angle_triangle(3, 4, 5.4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 5.6) . \"\\n\";\necho right_angle_triangle(3, 4, 5.1) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 5.9) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n\
    \  $cathetus1 = $sides[1];\n  $cathetus2 = $sides[0];\n  return $hypotenuse **\
    \ 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n\
    \  $leg1 = $sides[0];\n  $leg2 = $sides[1];\n  return ($hypotenuse ** 2) == ($leg1\
    \ ** 2) + ($leg2 ** 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\n\
    echo right_angle_triangle(1, 2, 3) . \"\\n\";\necho right_angle_triangle(5, 3,\
    \ 4) . \"\\n\";\necho right_angle_triangle(5, 12, 13) . \"\\n\";\necho right_angle_triangle(5,\
    \ 12, 14) . \"\\n\";", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $hypotenuse\
    \ = max($a, $b, $c);\n  $cathetus1 = min($a, $b, $c);\n  $cathetus2 = ($a + $b\
    \ + $c) - $hypotenuse - $cathetus1;\n  return $hypotenuse ** 2 == $cathetus1 **\
    \ 2 + $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return\
    \ $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  $sides = array($a,\
    \ $b, $c);\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) ==\
    \ pow($sides[2], 2);\n}\n", "  // Your code here\n}\n", "  $hypotenuse = max($a,\
    \ $b, $c);\n  $adjacent = ($a == $hypotenuse) ? $b : $a;\n  $opposite = ($c ==\
    \ $hypotenuse) ? $b : $c;\n  return $hypotenuse * $hypotenuse == $adjacent * $adjacent\
    \ + $opposite * $opposite;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3)\
    \ . PHP_EOL;\necho right_angle_triangle(5, 3, 4) . PHP_EOL;\necho right_angle_triangle(5,\
    \ 4, 3) . PHP_EOL;\necho right_angle_triangle(4, 3, 5) . PHP_EOL;\necho right_angle_triangle(4,\
    \ 5, 3) . PHP_EOL;\necho right_angle_triangle(3, 5, 4) . PHP_EOL;\necho right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL;\necho right_angle_triangle(3, 4, 6) . PHP_EOL;\necho right_angle_triangle(3,\
    \ 6, 4) . PHP_EOL;\necho right_angle_triangle(6, 3, 4) . PHP_EOL;\necho right_angle_triangle(6,\
    \ 4, 3) . PHP_EOL;\necho right_angle_triangle(4, 6, 3) . PHP_EOL;\necho right_angle_triangle(4,\
    \ 3, 6) . PHP_EOL;\necho right_angle_triangle(5, 12, 13) . PHP_EOL;\necho right_angle_triangle(5,\
    \ 13, 12) . PHP_EOL;\necho right_angle_triangle(12, 5, 13) . PHP_EOL;\necho right_angle_triangle(12,\
    \ 13, 5) . PHP_EOL;\necho right_angle_triangle(13, 5, 12) . PHP_EOL;\necho right_angle_triangle(13,\
    \ 12, 5) . PHP_EOL;\necho right_angle_triangle(7, 24, 25) . PHP_EOL;\necho right_angle_triangle(7,\
    \ 25,", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2)\
    \ + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(1, 2, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 12, 13) . \"\\n\";\necho right_angle_triangle(5, 15, 20) . \"\\n\";\necho right_angle_triangle(5,\
    \ 15, 25) . \"\\n\";\necho right_angle_triangle(5, 15, 30) . \"\\n\";\necho right_angle_triangle(5,\
    \ 15, 35) . \"\\n\";\necho right_angle_triangle(5, 15, 40) . \"\\n\";\necho right_angle_triangle(5,\
    \ 15, 45) . \"\\n\";\necho right_angle_triangle(5, 15, 50) . \"\\n\";\necho right_angle_triangle(5,\
    \ 15, 55) . \"\\n\";\necho right_angle_triangle(5, 15, 60) . \"\\n\";\necho right_angle_triangle(5,\
    \ 15, 65) . \"\\n\";\necho right_angle_triangle(5, 15, 70) . \"\\n\";\necho right_angle_triangle(5,\
    \ 15, 75) . \"\\n\";\necho right_angle_triangle(5, 15, 80) . \"\\n\";\necho right_angle_triangle(5,\
    \ 15, 85) . \"\\n\";\necho right_angle_triangle(5, 15, 90) . \"\\", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] * $sides[0] + $sides[1]\
    \ * $sides[1] == $sides[2] * $sides[2];\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1\
    \ = $sides[1];\n  $cathetus2 = $sides[0];\n  return pow($hypotenuse, 2) == pow($cathetus1,\
    \ 2) + pow($cathetus2, 2);\n}\n", "    $a2 = $a * $a;\n    $b2 = $b * $b;\n  \
    \  $c2 = $c * $c;\n    if ($a2 + $b2 == $c2) {\n        return true;\n    } elseif\
    \ ($a2 + $c2 == $b2) {\n        return true;\n    } elseif ($b2 + $c2 == $a2)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\n", "    $sides = array($a, $b, $c);\n    sort($sides);\n \
    \   return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $hypotenuse = max($a, $b, $c);\n  $adjacent = ($a == $hypotenuse) ? $b : $a;\n\
    \  $opposite = ($c == $hypotenuse) ? $b : $c;\n  return $hypotenuse ** 2 == $adjacent\
    \ ** 2 + $opposite ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n \
    \ return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3)\
    \ . \"\\n\";", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  if ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2]\
    \ * $sides[2]) {\n    return true;\n  }\n  return false;\n}\n", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) ==\
    \ pow($sides[2], 2);\n}\n", "  // Your code here\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  // Your code here\n}\n", "  // Your code here\n}\n", "  $sides\
    \ = array($a, $b, $c);\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3)\
    \ . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  if ($a > $b && $a > $c)\
    \ {\n    return pow($a, 2) == pow($b, 2) + pow($c, 2);\n  } else if ($b > $a &&\
    \ $b > $c) {\n    return pow($b, 2) == pow($a, 2) + pow($c, 2);\n  } else {\n\
    \    return pow($c, 2) == pow($a, 2) + pow($b, 2);\n  }\n}\n", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) ==\
    \ pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1] **\
    \ 2 == $sides[2] ** 2;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
