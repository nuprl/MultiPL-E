name: HumanEval_132_is_nested
language: php
prompt: "<?php\n// Create a function that takes a string as input which contains only\
  \ square brackets.\n// The function should return True if and only if there is a\
  \ valid subsequence of brackets \n// where at least one bracket in the subsequence\
  \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
  \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n//\
  \ is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
  \ is_nested($string) {\n"
tests: "function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\")\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif\
    \ ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t\
    }\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0\
    \ ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $arr = str_split($string);\n    $count = 0;\n    foreach($arr as $char) {\n\
    \        if($char == '[') {\n            $count++;\n        } else {\n       \
    \     $count--;\n        }\n        if($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$string = str_split($string);\n\t$open\
    \ = 0;\n\t$close = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\
    \t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close)\
    \ {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$arr = str_split($string);\n\t$count\
    \ = 0;\n\t$count2 = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == \"[\"\
    ) {\n\t\t\t$count++;\n\t\t}\n\t\tif ($value == \"]\") {\n\t\t\t$count2++;\n\t\t\
    }\n\t}\n\tif ($count == $count2) {\n\t\treturn false;\n\t} else {\n\t\treturn\
    \ true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "    $arr = str_split($string);\n    $count = 0;\n    for ($i=0; $i < count($arr);\
    \ $i++) { \n        if ($arr[$i] == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\n\
    echo is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\"\
    ;\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$open = 0;\n\t$close =\
    \ 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$string = str_split($string);\n\t$count = 0;\n\tfor ($i=0; $i\
    \ < count($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\t\
    if ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n\
    }\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$stack\
    \ = [];\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$arr = str_split($string);\n\t\
    $count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\
    \t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\
    \t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$string = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\tforeach ($string as $char) {\n\t\tif ($char ==\
    \ '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ > $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$string = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\
    \t\t} elseif ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$arr = str_split($string);\n\t\
    $count = 0;\n\t$flag = false;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value\
    \ == '[') {\n\t\t\t$count++;\n\t\t} elseif ($value == ']') {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\t$flag = true;\n\t\t}\n\t}\n\tif ($count ==\
    \ 0 && $flag == true) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\n\
    echo is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');",
  "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $value) {\n\t\t\
    if ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\
    \tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true\
    \ : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            $open++;\n        } else {\n \
    \           $close++;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t$open = 0;\n\t$close = 0;\n\
    \tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\
    \t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close)\
    \ {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\t\
    if ($open == $close) {\n\t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$arr = str_split($string);\n\t\
    $open = 0;\n\t$close = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == '[')\
    \ {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$arr = str_split($string);\n\t\
    $count = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";", "\t$string = str_split($string);\n\t\
    $stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack)\
    \ > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$arr = str_split($string);\n\t$count = 0;\n\t$flag = false;\n\tforeach ($arr\
    \ as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t$flag = true;\n\t\t\
    }\n\t}\n\tif ($count == 0 && $flag == false) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "\t$str = str_split($string);\n\t$count = 0;\n\tforeach ($str as $value) {\n\t\t\
    if ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\
    \tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t$arr = str_split($string);\n\
    \t$count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\
    \t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "    $brackets = str_split($string);\n\
    \    $open = 0;\n    $close = 0;\n    foreach($brackets as $bracket) {\n     \
    \   if($bracket == '[') {\n            $open++;\n        } else {\n          \
    \  $close++;\n        }\n    }\n    if($open > $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $open = 0;\n    $close = 0;\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return false;\n    } else {\n    \
    \    return true;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif\
    \ ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\
    \t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t}\
    \ else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\n\
    echo is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";", "\t$arr = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t\
    $count++;\n\t\t} elseif ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n    \
    \    if ($string[$i] == '[') {\n            $open++;\n        } else {\n     \
    \       $close++;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";", "    $open = 0;\n    $close = 0;\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return false;\n    } else {\n      \
    \  return true;\n    }\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    return $count > 0 ? false : true;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "    $string = str_split($string);\n    $count = 0;\n    foreach($string\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$arr = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t\
    $count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') ?\
    \ 'true' : 'false';\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"<br>\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"<br>\";\necho is_nested('[]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"<br>\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\t\
    if ($open == $close) {\n\t\treturn False;\n\t}\n\telse {\n\t\treturn True;\n\t\
    }\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn\
    \ true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$string\
    \ = str_split($string);\n\t$count = 0;\n\tforeach ($string as $value) {\n\t\t\
    if ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif ($value == ']') {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested('[[]]') ? 'true' :\
    \ 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";", "\t$array = str_split($string);\n\t$count = 0;\n\tforeach ($array\
    \ as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t}\n\t\t\
    if ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == \"[\") {\n\t\
    \t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} elseif ($string[$i] == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "    $string = str_split($string);\n    $count = 0;\n    foreach($string as $char)\
    \ {\n        if($char == '[') {\n            $count++;\n        } else {\n   \
    \         $count--;\n        }\n        if($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$string = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\
    \t\t} elseif ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $key => $value) {\n\t\tif ($value == '[')\
    \ {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') . \"\\n\"\
    ;\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\\
    n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]') . \"<br>\"\
    ;\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"<br>\";\necho\
    \ is_nested('[[]][[') . \"<br>\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} elseif ($string[$i] == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$arr = str_split($string);\n\t\
    $open = 0;\n\t$close = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value\
    \ == '[') {\n\t\t\t$open++;\n\t\t} elseif ($value == ']') {\n\t\t\t$close++;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn\
    \ true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "    $string = str_split($string);\n    $stack = [];\n    foreach ($string as $char)\
    \ {\n        if ($char == '[') {\n            array_push($stack, $char);\n   \
    \     } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$arr = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t} elseif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\t\
    if ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n\
    }\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\"\
    ;\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho\
    \ is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif\
    \ ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            $open++;\n        } else {\n \
    \           $close++;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $arr = str_split($string);\n\
    \    $count = 0;\n    foreach($arr as $char) {\n        if($char == '[') {\n \
    \           $count++;\n        } else {\n            $count--;\n        }\n  \
    \      if($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $stack = [];\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\necho is_nested('[[]]') .\
    \ \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "\t$arr = str_split($string);\n\
    \t$count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif($value == '[') {\n\
    \t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif($count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "    $string = str_split($string);\n\
    \    $stack = [];\n    foreach ($string as $char) {\n        if ($char == '[')\
    \ {\n            array_push($stack, $char);\n        } else {\n            if\
    \ (count($stack) > 0) {\n                array_pop($stack);\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho\
    \ is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\
    \tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\
    \t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count >\
    \ 0 ? true : false;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$brackets = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else\
    \ {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t\
    }\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0;\n\
    }\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\n\
    echo is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$open\
    \ = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\necho is_nested('[[]]');\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"\\n\";\necho is_nested('[][]');\necho \"\\n\";\necho is_nested('[]');\n\
    echo \"\\n\";\necho is_nested('[[][]]');\necho \"\\n\";\necho is_nested('[[]][[');\n\
    echo \"\\n\";", "\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i\
    \ < $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $count = 0;\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ > 0 ? true : false;\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"<br>\";\n\
    echo is_nested('[][]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho \"<br>\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$brackets = str_split($string);\n\t$stack = [];\n\tforeach ($brackets as $bracket)\
    \ {\n\t\tif ($bracket == '[') {\n\t\t\tarray_push($stack, $bracket);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$string\
    \ = str_split($string);\n\t$count = 0;\n\tforeach ($string as $key => $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$stack = [];\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) ==\
    \ 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    return $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";", "\t$arr = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\
    \t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn False;\n\t}\n\treturn True;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\t$open_arr\
    \ = [];\n\t$close_arr = [];\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t\t$open_arr[] = $i;\n\t\t}\n\t\t\
    if ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t\t$close_arr[] = $i;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn false;\n\t}\n\tif ($open > $close) {\n\
    \t\t$diff = $open - $close;\n\t\t$open_arr = array_slice($open_arr, -$diff);\n\
    \t\t$close_arr = array_slice($close_arr, 0, $diff);\n\t\t$result = array_intersect($open_arr,\
    \ $close_arr);\n\t\tif (count($result) > 0) {\n\t\t\treturn true;\n\t\t} else\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open < $close) {\n\t\t$diff = $close\
    \ - $open;\n\t\t$open_arr = array_slice($open_arr, 0, $diff);\n\t\t$close_arr\
    \ = array_slice($close_arr, -$diff);\n\t\t$result = array_intersect($open_arr,\
    \ $close_arr);\n\t\tif (count($result) > 0) {\n\t\t\treturn true;\n\t\t} else\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string\
    \ as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif ($value\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn ($count > 0) ? false : true;\n}\necho is_nested('[[]]') .\
    \ PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$brackets = str_split($string);\n\t$open\
    \ = 0;\n\t$close = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket ==\
    \ '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho\
    \ is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\n\
    echo is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');",
  "    $string = str_split($string);\n    $stack = [];\n    foreach ($string as $char)\
    \ {\n        if ($char == '[') {\n            array_push($stack, $char);\n   \
    \     } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t}\n\t\tif ($value == ']')\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho\
    \ is_nested('[[]]');\necho '<br>';\necho is_nested('[]]]]]]][[[[[]');\necho '<br>';\n\
    echo is_nested('[][]');\necho '<br>';\necho is_nested('[]');\necho '<br>';\necho\
    \ is_nested('[[][]]');\necho '<br>';\necho is_nested('[[]][[');\necho '<br>';\n\
    echo is_nested('[[[]]]');\necho '<br>';\necho is_nested
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) > 0) {\n                array_pop($stack);\n  \
    \          } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string\
    \ as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) > 0) {\n                array_pop($stack);\n  \
    \          } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";", "\t$arr = str_split($string);\n\t$count = 0;\n\
    \tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";", "    $string = str_split($string);\n\
    \    $count = 0;\n    foreach($string as $char) {\n        if($char == '[') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "    $string = str_split($string);\n    $stack = [];\n    foreach ($string as $char)\
    \ {\n        if ($char == '[') {\n            array_push($stack, $char);\n   \
    \     } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$arr = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $string = str_split($string);\n\
    \    $stack = [];\n    foreach ($string as $char) {\n        if ($char == '[')\
    \ {\n            array_push($stack, $char);\n        } elseif ($char == ']') {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"\\\
    n\";\necho is_nested('[][]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho \"\\n\";", "\t\
    $arr = str_split($string);\n\t$count = 0;\n\t$result = false;\n\tforeach ($arr\
    \ as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t$result = true;\n\t\t\
    }\n\t}\n\treturn $result;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\
    \t}\n\telse {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\t$nested\
    \ = 0;\n\t$length = strlen($string);\n\tfor ($i=0; $i < $length; $i++) { \n\t\t\
    if ($string[$i] === '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t\tif ($open < $close) {\n\t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "    $arr = str_split($string);\n\
    \    $count = 0;\n    for ($i=0; $i < count($arr); $i++) { \n        if ($arr[$i]\
    \ == '[') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\
    \t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $string = str_split($string);\n\
    \    $stack = [];\n    foreach ($string as $char) {\n        if ($char == '[')\
    \ {\n            array_push($stack, $char);\n        } else {\n            if\
    \ (count($stack) > 0) {\n                array_pop($stack);\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho\
    \ is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i <\
    \ $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$brackets = str_split($string);\n\
    \t$stack = [];\n\t$is_nested = false;\n\tforeach ($brackets as $bracket) {\n\t\
    \tif ($bracket == '[') {\n\t\t\tarray_push($stack, $bracket);\n\t\t} else {\n\t\
    \t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t\t$is_nested =\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn $is_nested;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$string = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\tforeach ($string as $value) {\n\t\tif ($value ==\
    \ '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($value == ']') {\n\t\t\t$close++;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn\
    \ true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$arr = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($arr as $key\
    \ => $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $value) {\n\t\t\
    if ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\
    \tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true\
    \ : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$open\
    \ = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho\
    \ is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\n\
    echo is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]')\
    \ . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\
    echo is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\"\
    ;\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho\
    \ is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";", "  \
    \  $arr = str_split($string);\n    $count = 0;\n    foreach($arr as $char) {\n\
    \        if($char == '[') {\n            $count++;\n        } else {\n       \
    \     $count--;\n        }\n        if($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "\t$arr = str_split($string);\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == '[') {\n\t\t\t\
    $count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "    $arr = str_split($string);\n    $count\
    \ = 0;\n    foreach($arr as $value) {\n        if($value == '[') {\n         \
    \   $count++;\n        } else {\n            $count--;\n        }\n        if($count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $count > 0 ?\
    \ true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn count($stack) == 0;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as\
    \ $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\
    \t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$arr = str_split($string);\n\t\
    $count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\
    \t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\
    \t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return $count > 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string\
    \ as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif ($value\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";", "    $open = 0;\n    $close = 0;\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open > $close) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} elseif ($string[$i] == ']') {\n\
    \t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t}\
    \ else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$stack = [];\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\necho is_nested('[[]]') .\
    \ \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $open = 0;\n    $close = 0;\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n        } else if ($string[$i] == ']') {\n        \
    \    $close++;\n        }\n    }\n    if ($open == $close) {\n        return false;\n\
    \    } else {\n        return true;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "    $arr = str_split($string);\n    $count = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "    $string = str_split($string);\n   \
    \ $count = 0;\n    foreach($string as $char) {\n        if($char == '[') {\n \
    \           $count++;\n        } else {\n            $count--;\n        }\n  \
    \      if($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $brackets = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t$open++;\n\t\t} elseif ($bracket\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open > $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\necho\
    \ '<br>';\necho is_nested('[]]]]]]][[[[[]');\necho '<br>';\necho is_nested('[][]');\n\
    echo '<br>';\necho is_nested('[]');\necho '<br>';\necho is_nested('[[][]]');\n\
    echo '<br>';\necho is_nested('[[]][[');", "    $string = str_split($string);\n\
    \    $count = 0;\n    foreach($string as $char) {\n        if($char == '[') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\t$stack = [];\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    \tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"<br>\";\n\
    echo is_nested('[][]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho \"<br>\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$brackets\
    \ = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", " \
    \   $arr = str_split($string);\n    $open = 0;\n    $close = 0;\n    foreach($arr\
    \ as $char) {\n        if($char == \"[\") {\n            $open++;\n        }\n\
    \        if($char == \"]\") {\n            $close++;\n        }\n    }\n    if($open\
    \ == $close) {\n        return false;\n    }\n    return true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    $count++;\n\t\t} elseif ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "    $arr\
    \ = str_split($string);\n    $count = 0;\n    foreach($arr as $char) {\n     \
    \   if($char == '[') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if($count < 0) {\n            return false;\n        }\n \
    \   }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\
    \tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\
    \t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count >\
    \ 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$string = str_split($string);\n\t$left = 0;\n\t$right = 0;\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\t$left++;\n\t\t} elseif ($char ==\
    \ ']') {\n\t\t\t$right++;\n\t\t}\n\t}\n\tif ($left == $right) {\n\t\treturn false;\n\
    \t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . PHP_EOL;\necho\
    \ is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    $count++;\n\t\t} elseif ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\
    \tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\
    \t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count >\
    \ 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\
    \t} else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\
    \tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} elseif ($string[$i] == ']')\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($string\
    \ as $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "    $arr\
    \ = str_split($string);\n    $count = 0;\n    for ($i=0; $i < count($arr); $i++)\
    \ { \n        if ($arr[$i] == '[') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";", "    $brackets = str_split($string);\n    $open = 0;\n    $close\
    \ = 0;\n    foreach($brackets as $bracket) {\n        if($bracket == '[') {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \  }\n    if($open == $close) {\n        return false;\n    } else {\n       \
    \ return true;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif\
    \ ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\
    \t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t}\
    \ else {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho \"<br>\";\n\
    echo is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\t\
    if ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n\
    }\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $value) {\n\
    \t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif ($value == ']') {\n\t\t\
    \t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return $count > 0 ? false : true;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "\t$string = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\t$nested = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == '[')\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($value == ']') {\n\t\t\t$close++;\n\t\t}\n\t\
    \tif ($open > $close) {\n\t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$string = str_split($string);\n\
    \t$brackets = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\
    \t\tarray_push($brackets, $char);\n\t\t} elseif ($char == ']') {\n\t\t\tif (count($brackets)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($brackets);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($brackets) == 0;\n}\necho is_nested('[[]]')\
    \ ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'True'\
    \ : 'False';\necho \"\\n\";\necho is_nested('[][]') ? 'True' : 'False';\necho\
    \ \"\\n\";\necho is_nested('[]') ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[[]][[') ? 'True' : 'False';\n\
    echo \"\\n\";", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $count = 0;\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   $count++;\n        } else if ($string[$i] == ']') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    return $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close = 0;\n\tfor\
    \ ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open++;\n\t\t} elseif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\t\
    if ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n\
    }\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\"\
    ;\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho\
    \ is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif\
    \ ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? true : false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "    $arr = str_split($string);\n\
    \    $open = 0;\n    $close = 0;\n    foreach($arr as $value) {\n        if($value\
    \ == '[') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n    }\n    if($open > $close) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$arr = str_split($string);\n\t$count = 0;\n\t$count2 = 0;\n\tforeach ($arr as\
    \ $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t}\n\t\tif\
    \ ($value == ']') {\n\t\t\t$count2++;\n\t\t}\n\t}\n\tif ($count == $count2) {\n\
    \t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$count = 0;\n\t$arr = str_split($string);\n\
    \tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $value) {\n\t\tif ($value == '[') {\n\t\t\
    \t$count++;\n\t\t}\n\t\tif ($value == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if ($char\
    \ == '[') {\n            array_push($stack, $char);\n        } else {\n      \
    \      if (count($stack) == 0) {\n                return false;\n            }\n\
    \            array_pop($stack);\n        }\n    }\n    return count($stack) >\
    \ 0;\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\
    \tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\
    \t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count >\
    \ 0 ? true : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $string = str_split($string);\n    $count = 0;\n    foreach($string as $char)\
    \ {\n        if($char == '[') {\n            $count++;\n        } else {\n   \
    \         $count--;\n        }\n        if($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            $open++;\n        } else {\n \
    \           $close++;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "    $arr = str_split($string);\n    $count\
    \ = 0;\n    foreach($arr as $char) {\n        if($char == '[') {\n           \
    \ $count++;\n        } else {\n            $count--;\n        }\n        if($count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $count > 0 ?\
    \ true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif\
    \ ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$left = 0;\n\t$right = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$left++;\n\t\t} else {\n\t\t\t$right++;\n\t\t\
    }\n\t}\n\tif ($left == $right) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $nested = false;\n    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ $nested = true;\n        }\n    }\n    return $nested;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$arr = str_split($string);\n\t\
    $count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\
    \t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[[]]') . \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
