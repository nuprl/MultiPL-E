from typing import List

def minSizeSubarray(nums: List[int], target: int) -> int:
    """
    You are given a 0-indexed array nums and an integer target.
    
    A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.
    
    Return the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.
    
    Example 1:
    
    Input: nums = [1,2,3], target = 5
    Output: 2
    Explanation: In this example infinite_nums = [1,2,3,1,2,3,1,2,...].
    The subarray in the range [1,2], has the sum equal to target = 5 and length = 2.
    It can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.
    
    Example 2:
    
    Input: nums = [1,1,1,2,3], target = 4
    Output: 2
    Explanation: In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].
    The subarray in the range [4,5], has the sum equal to target = 4 and length = 2.
    It can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.
    
    Example 3:
    
    Input: nums = [2,4,6,8], target = 3
    Output: -1
    Explanation: In this example infinite_nums = [2,4,6,8,2,4,6,8,...].
    It can be proven that there is no subarray with sum equal to target = 3.
    
    
    Constraints:
    
     * 1 <= nums.length <= 105
     * 1 <= nums[i] <= 105
     * 1 <= target <= 109
    """
    ### Canonical solution below ###
    pass

### Unit tests below ###
def check(candidate):
    assert candidate([1, 2, 3], 5) == 2
    assert candidate([1, 1, 1, 2, 3], 4) == 2
    assert candidate([2, 4, 6, 8], 3) == -1
    assert candidate([2, 1, 5, 7, 7, 1, 6, 3], 39) == 9
    assert candidate([17, 4, 3, 14, 17, 6, 15], 85) == -1
    assert candidate([18, 3, 11, 19, 7, 16, 6, 7, 3, 6, 18, 9, 9, 1, 14, 17, 15, 14, 12, 10], 7) == 1
    assert candidate([2, 3, 5, 2, 3, 4, 4, 1, 3, 5, 2, 2, 5, 1, 1, 2, 5], 19) == 6
    assert candidate([4, 1, 5, 7, 1, 6, 1, 7, 2, 2, 5, 5, 5, 6, 3], 20) == 5
    assert candidate([7, 3, 5], 36) == -1
    assert candidate([1, 11, 6, 4, 13], 22) == 4
    assert candidate([1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1], 83) == 53
    assert candidate([4, 3, 5, 4, 5, 4, 4, 4, 5, 7, 4, 5, 6, 3, 1, 4, 6, 3, 7], 15) == 3
    assert candidate([1, 2, 3, 2, 1, 5, 3, 4, 5], 53) == 19
    assert candidate([2, 5, 6, 4], 95) == 22
    assert candidate([6, 6, 4, 5, 2, 8, 1, 8, 7, 6, 6, 7, 4, 1, 9, 6, 8, 8], 55) == 9
    assert candidate([1, 2, 8, 19, 17, 2, 3, 11, 8, 12, 16, 18, 7], 36) == 2
    assert candidate([12, 14, 4, 14, 13, 16, 5], 36) == -1
    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 37) == 37
    assert candidate([5, 7, 2, 6, 4, 1, 6, 7, 1, 4, 7, 6, 7, 7, 6, 6, 4, 6, 8], 90) == 17
    assert candidate([3, 5, 15, 17, 6, 17, 10, 15, 10, 4, 6], 25) == 2
    assert candidate([14, 5], 23) == -1
    assert candidate([1, 1, 5, 9], 68) == -1
    assert candidate([11, 1, 17, 14, 9, 16, 5, 3, 7, 16, 14, 18, 17, 10], 82) == 6
    assert candidate([9, 6, 8, 4, 3, 4, 6, 4, 7, 2, 6, 9, 2, 4, 5, 4], 71) == 14
    assert candidate([2, 4, 4, 3, 2, 3, 2, 5, 3, 1, 5, 1, 4, 2, 6], 23) == 7
    assert candidate([3, 6], 66) == 15
    assert candidate([1, 4, 8, 5, 9, 8, 8, 2, 3, 1, 6, 2, 7, 5, 5, 3, 3, 5, 6], 57) == 10
    assert candidate([1, 6, 5, 5, 1, 1, 2, 5, 3, 1, 5, 3, 2, 4, 6, 6], 56) == 16
    assert candidate([5, 3, 5, 4, 3, 1, 3, 3, 1, 3, 3, 5, 5, 4, 5, 5, 5, 5], 8) == 2
    assert candidate([2, 2, 1, 3, 2, 2, 2, 3, 3, 2, 1, 3, 3, 2, 3, 3], 93) == 40
    assert candidate([5, 1, 4, 1, 5, 6], 71) == 19
    assert candidate([3, 5, 6, 6, 1, 8, 4, 9, 6, 2, 3, 9, 6, 8, 7, 3, 6, 1, 8, 6], 60) == 11
    assert candidate([12, 15, 9, 3, 3, 12, 13, 14, 7, 11, 7, 15, 12, 5, 11], 18) == 2
    assert candidate([3, 11, 10, 12, 9, 13, 9], 19) == -1
    assert candidate([3, 4, 4], 35) == -1
    assert candidate([4, 5, 2, 5, 5, 5, 1], 87) == 23
    assert candidate([2, 13, 15, 3, 6, 7, 16, 7, 9, 10, 4, 3, 12, 9, 13, 2, 9, 13, 15], 4) == 1
    assert candidate([1, 2, 16, 10, 15, 15, 13, 11, 10, 6, 12, 15, 9], 30) == 2
    assert candidate([3, 5], 85) == 21
    assert candidate([1, 4, 3, 1, 4, 4, 2, 3], 6) == 2
    assert candidate([2, 10, 12, 10, 4, 4, 12, 5, 12, 12, 5], 33) == 4
    assert candidate([5, 9, 7, 10, 4, 7, 9, 11, 6, 3, 1, 8, 6, 1, 11, 1, 1], 72) == 11
    assert candidate([19, 18, 6], 56) == -1
    assert candidate([3, 5, 7, 6, 5, 3, 7, 7, 1, 5, 3, 1, 5, 6, 3, 1, 6, 1, 3], 20) == 4
    assert candidate([5, 5, 4, 1, 2, 2, 2, 3, 2, 4, 2, 5], 56) == 16
    assert candidate([1, 1, 1, 1, 1, 1, 1, 1], 22) == 22
    assert candidate([1, 2], 72) == 48
    assert candidate([4, 3, 6, 6, 2, 6, 1, 6, 7, 5, 7, 6, 1, 5, 7], 82) == -1
    assert candidate([4, 1, 5, 2, 3, 1, 2, 4, 1, 5, 3, 3, 5, 2, 6, 6, 5, 2, 1], 63) == 20
    assert candidate([8, 2, 5, 4, 1, 6, 6, 6, 6, 4, 4, 5, 5, 9, 6, 6, 9, 2], 4) == 1
    assert candidate([18, 12, 13, 9, 17, 11], 82) == -1
    assert candidate([13, 3, 1, 5, 13, 7, 12, 5], 35) == 5
    assert candidate([4, 10, 12, 6, 2, 2, 4, 12, 6, 1, 1, 2, 2, 10, 6, 11, 5, 4, 9], 49) == 7
    assert candidate([8], 68) == -1
    assert candidate([7, 2, 6, 7, 6, 4, 4, 1, 6, 4, 1, 7, 7, 2, 2, 4, 4, 4], 29) == 6
    assert candidate([4, 7, 6, 12, 10, 13, 7, 6, 6, 1, 15, 2, 4, 8, 12], 43) == 6
    assert candidate([4, 10], 10) == 1
    assert candidate([4, 3, 2, 4, 5, 3, 7, 12, 2, 2, 10], 43) == 8
    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 58) == 58
    assert candidate([1, 1, 1, 1, 1], 20) == 20
    assert candidate([4, 3], 23) == -1
    assert candidate([3, 2, 1, 3, 2, 1, 3, 1, 1, 1, 2, 1, 2, 1, 2, 3, 3, 1], 78) == 41
    assert candidate([3, 2, 4, 2, 4, 2, 5, 4, 5, 3, 4, 4, 2, 4, 4, 1], 19) == 5
    assert candidate([17], 1) == -1
    assert candidate([10, 12, 1, 11, 9, 5, 4, 5, 1, 10, 8, 12, 5, 4], 82) == 10
    assert candidate([6], 44) == -1
    assert candidate([4, 6, 2, 6, 3, 5, 2, 5, 5, 4, 3, 1, 5, 4, 5, 5, 4, 5, 5, 6], 12) == 3
    assert candidate([14, 4, 13, 12, 18, 8, 4, 15, 4, 14, 17, 4, 2], 8) == 1
    assert candidate([4, 4, 6, 5, 3, 4, 1, 4, 2, 6, 3], 32) == 9
    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 28) == 28
    assert candidate([5, 10, 1, 3, 14, 7, 13, 6, 5, 7, 10, 3, 10, 5, 8, 5, 7, 5, 6, 7], 25) == 4
    assert candidate([12, 3, 4, 10, 5, 8, 12, 7, 12, 7, 5, 8, 4, 8, 11, 11], 48) == -1
    assert candidate([3, 11, 5, 5, 3, 10, 12, 12, 12, 3, 10], 88) == -1
    assert candidate([8, 2, 10, 5], 28) == -1
    assert candidate([3, 5, 1, 4, 5, 2, 5, 3, 1, 2, 1, 1, 1, 3, 3, 3, 5], 68) == 23
    assert candidate([1, 4, 1, 4, 4], 21) == -1
    assert candidate([15, 8, 8, 19, 8, 12, 15, 3, 15, 8, 10, 9], 77) == 7
    assert candidate([4, 4], 80) == 20
    assert candidate([4, 9, 3, 7, 5, 4, 5, 1, 3, 5], 69) == 14
    assert candidate([2, 8, 2, 8, 1, 5, 8, 9, 3, 4, 6, 6, 6, 1, 7, 9], 93) == 17
    assert candidate([7, 11, 14, 12, 3, 16, 11, 9], 10) == -1
    assert candidate([2, 1, 2, 1, 3, 2, 1, 1, 2], 17) == 10
    assert candidate([5, 20, 18, 2, 8], 45) == 4
    assert candidate([2, 1, 2, 1, 2, 1, 1, 1, 2, 2], 58) == 38
    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 17) == 17
    assert candidate([18, 6, 8, 17, 3, 10, 14, 12, 4, 13, 12, 10, 5, 18, 11], 95) == 9
    assert candidate([19, 12, 14], 57) == 4
    assert candidate([3, 13, 14], 11) == -1
    assert candidate([17, 6, 8, 7, 4, 6, 6, 3, 8, 1, 8, 10, 18, 13, 2], 32) == 3
    assert candidate([3, 12, 4, 9, 5, 2, 2, 9, 9, 6, 9, 11, 9], 41) == -1
    assert candidate([3, 14, 2, 9, 5, 14, 15, 4, 3, 4, 17, 11], 3) == 1
    assert candidate([2, 5, 3, 6, 3, 6, 1, 1, 5, 1], 37) == -1
    assert candidate([13, 6, 4, 7, 3, 6, 4, 10, 13, 10, 5, 4, 2, 1, 7, 11, 3, 3, 12], 51) == 7
    assert candidate([1, 10, 9, 16, 3, 10, 2, 5, 1, 10], 83) == 11
    assert candidate([2, 10, 13, 3, 4, 19, 14, 20, 11, 15, 4, 3, 17, 8, 2, 3, 1, 13, 8], 1) == 1
    assert candidate([4, 5, 5, 3, 5, 4, 2, 11, 5, 9, 4, 6], 41) == 7
    assert candidate([2, 8, 9, 6, 11, 17, 3, 6, 9, 7, 2, 8, 9, 11, 19], 39) == 3
    assert candidate([8, 13, 9, 5, 8, 6, 17, 16, 14, 7, 10, 15, 16], 8) == 1
    assert candidate([10, 20, 16, 1, 11, 18, 13, 6, 13, 6, 9, 14, 16, 12, 13, 7, 19], 59) == 5
    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 6) == 6


def test_check():
    check(minSizeSubarray)


### Metadata below ###
# question_id = 3141
# question_title = Minimum Size Subarray in Infinite Array
# question_title_slug = minimum-size-subarray-in-infinite-array
# question_difficulty = Medium
# question_category = Algorithms
# question_likes = 309
# question_dislikes = 19