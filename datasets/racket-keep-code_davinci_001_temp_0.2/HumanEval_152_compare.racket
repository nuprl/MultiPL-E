#lang racket

;; I think we all remember that feeling when the result of some long-awaited
;; event is finally known. The feelings and thoughts you have at that moment are
;; definitely worth noting down and comparing.
;; Your task is to determine if a person correctly guessed the results of a number of matches.
;; You are given two arrays of scores and guesses of equal length, where each index shows a match. 
;; Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
;; the value is 0, and if not, the value is the absolute difference between the guess and the score.
;; example:
;; compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
;; compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
(define (compare game, guess)
  (map (lambda (x) (if (> x 0) x (- 0 x)))
       (map (lambda (x) (abs (- x game))) guess)))

# Problem 3
# 
# Write a function that takes a string and returns a list of all the characters in the string that are not vowels.
# 
# example:
# 
# not_vowels("the quick brown fox jumps over the lazy dog") -> ["h", "q", "c", "k", "b", "r", "n", "f", "x", "j", "m", "z", "d"]

(require rackunit)

(define (test-humaneval) 

  (let (( candidate compare))
    (check-equal? (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3))
    (check-equal? (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0))
    (check-equal? (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6))
    (check-equal? (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1))
))

(test-humaneval)