#lang racket

;; Create a function that takes integers, floats, or strings representing
;; real numbers, and returns the larger variable in its given variable type.
;; Return None if the values are equal.
;; Note: If a real number is represented as a string, the floating point might be . or ,
;; compare_one(1, 2.5) ➞ 2.5
;; compare_one(1, "2,3") ➞ "2,3"
;; compare_one("5,1", "6") ➞ "6"
;; compare_one("1", 1) ➞ None
(define (compare_one a, b)
  (cond [(number? a)
         (cond [(> a b) a]
               [else b])]
        [(number? b)
         (cond [(> a b) a]
               [else b])]
        [(string? a)
         (cond [(> (string-length a) (string-length b)) a]
               [else b])]
        [(string? b)
         (cond [(> (string-length a) (string-length b)) a]
               [else b])]
        [else None]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate compare_one))
    (check-equal? (candidate 1 2) 2)
    (check-equal? (candidate 1 2.5) 2.5)
    (check-equal? (candidate 2 3) 3)
    (check-equal? (candidate 5 6) 6)
    (check-equal? (candidate 1 "2,3") "2,3")
    (check-equal? (candidate "5,1" "6") "6")
    (check-equal? (candidate "1" "2") "2")
    (check-equal? (candidate "1" 1) #f)
))

(test-humaneval)