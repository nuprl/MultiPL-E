#lang racket

;; Return sorted unique common elements for two lists.
;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
;; [1, 5, 653]
;; >>> common([5, 3, 2, 8], [3, 2])
;; [2, 3]
(define (common l1 l2)
  (filter (lambda (x) (member? x l2)) l1))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate common))
    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))
    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))
    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))
    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))
))

(test-humaneval)