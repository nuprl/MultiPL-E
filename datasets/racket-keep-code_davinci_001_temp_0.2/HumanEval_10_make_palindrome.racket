#lang racket

;; Find the shortest palindrome that begins with a supplied string.
;; Algorithm idea is simple:
;; - Find the longest postfix of supplied string that is a palindrome.
;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
;; >>> make_palindrome('')
;; ''
;; >>> make_palindrome('cat')
;; 'catac'
;; >>> make_palindrome('cata')
;; 'catac'
(define (make_palindrome string)
  (define (is_palindrome? string)
    (if (string=? string (reverse string))
        #t
        #f))
  (define (longest_palindrome_postfix string)
    (define (longest_palindrome_postfix_aux string acc)
      (if (is_palindrome? string)
          string
          (longest_palindrome_postfix_aux (substring string 1) (cons (substring string 0 1) acc))))
    (longest_palindrome_postfix_aux string '()))
  (concat (reverse (longest_palindrome_postfix string)) (reverse string)))

# Test

(require rackunit)

(define (test-humaneval) 

  (let (( candidate make_palindrome))
    (check-equal? (candidate "") "")
    (check-equal? (candidate "x") "x")
    (check-equal? (candidate "xyz") "xyzyx")
    (check-equal? (candidate "xyx") "xyx")
    (check-equal? (candidate "jerry") "jerryrrej")
))

(test-humaneval)