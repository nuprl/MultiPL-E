#lang racket

;; You are given a 2 dimensional data, as a nested lists,
;; which is similar to matrix, however, unlike matrices,
;; each row may contain a different number of columns.
;; Given lst, and integer x, find integers x in the list,
;; and return list of tuples, [(x1, y1), (x2, y2) ...] such that
;; each tuple is a coordinate - (row, columns), starting with 0.
;; Sort coordinates initially by rows in ascending order.
;; Also, sort coordinates of the row by columns in descending order.
;; Examples:
;; get_row([
;; [1,2,3,4,5,6],
;; [1,2,3,4,1,6],
;; [1,2,3,4,5,1]
;; ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
;; get_row([], 1) == []
;; get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
(define (get_row lst x)
  (define (get_row_helper lst row col)
    (cond [(null? lst) '()]
          [(= x (car (car lst))) (list (list row col))]
          [else (append (get_row_helper (cdr lst) (1+ row) col)
                       (get_row_helper (cdr lst) row (1+ col)))]))
  (sort (get_row_helper lst 0 0)
        (lambda (x y) (< (car x) (car y)))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate get_row))
    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)))
    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)))
    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)))
    (check-equal? (candidate (list ) 1) (list ))
    (check-equal? (candidate (list (list 1)) 2) (list ))
    (check-equal? (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list 2 2)))
))

(test-humaneval)