#lang racket

;; Given an array arr of integers and a positive integer k, return a sorted list 
;; of length k with the maximum k numbers in arr.
;; Example 1:
;; Input: arr = [-3, -4, 5], k = 3
;; Output: [-4, -3, 5]
;; Example 2:
;; Input: arr = [4, -4, 4], k = 2
;; Output: [4, 4]
;; Example 3:
;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
;; Output: [2]
;; Note:
;; 1. The length of the array will be in the range of [1, 1000].
;; 2. The elements in the array will be in the range of [-1000, 1000].
;; 3. 0 <= k <= len(arr)
(define (maximum arr k)
  (define (helper arr k)
    (if (or (null? arr) (= k 0))
        '()
        (let ((max (max-element arr)))
          (cons max (helper (remove-max-element arr) (- k 1))))))
  (helper arr k))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate maximum))
    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))
    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))
    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))
    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))
    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))
    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))
    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))
    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))
    (check-equal? (candidate (list 4 -4) 2) (list -4 4))
    (check-equal? (candidate (list -10 10) 2) (list -10 10))
    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))
))

(test-humaneval)