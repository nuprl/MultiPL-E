#lang racket

;; You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
;; cycpattern_check("abcd","abd") => False
;; cycpattern_check("hello","ell") => True
;; cycpattern_check("whassup","psus") => False
;; cycpattern_check("abab","baa") => True
;; cycpattern_check("efef","eeff") => False
;; cycpattern_check("himenss","simen") => True
(define (cycpattern_check a b)
  (define (rotate s)
    (let ([len (string-length s)])
      (string-append (substring s (- len 1) len) (substring s 0 (- len 1)))))
  (define (check s b)
    (let ([len (string-length b)])
      (if (equal? len 0)
          #t
          (if (equal? (string-ref s 0) (string-ref b 0))
              (check (rotate s) (substring b 1 len))
              #f))))
  (check a (rotate b)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate cycpattern_check))
    (check-equal? (candidate "xyzw" "xyw") #f)
    (check-equal? (candidate "yello" "ell") #t)
    (check-equal? (candidate "whattup" "ptut") #f)
    (check-equal? (candidate "efef" "fee") #t)
    (check-equal? (candidate "abab" "aabb") #f)
    (check-equal? (candidate "winemtt" "tinem") #t)
))

(test-humaneval)