#lang racket

;; Given a positive integer, obtain its roman numeral equivalent as a string,
;; and return it in lowercase.
;; Restrictions: 1 <= num <= 1000
;; Examples:
;; >>> int_to_mini_roman(19) == 'xix'
;; >>> int_to_mini_roman(152) == 'clii'
;; >>> int_to_mini_roman(426) == 'cdxxvi'
(define (int_to_mini_roman number)
  (define (int_to_roman_digit digit place)
    (cond ((= digit 0) "")
          ((= digit 1) (string-append (substring "ivx" place 0 1) ""))
          ((= digit 2) (string-append (substring "ivx" place 0 2) ""))
          ((= digit 3) (string-append (substring "ivx" place 0 3) ""))
          ((= digit 4) (string-append "iv" (substring "ivx" place 1 2)))
          ((= digit 5) (string-append "v" (substring "ivx" place 1 2)))
          ((= digit 6) (string-append "vi" (substring "ivx" place 1 2)))
          ((= digit 7) (string-append "vii" (substring "ivx" place 1 2)))
          ((= digit 8) (string-append "viii" (substring "ivx" place 1 2)))
          ((= digit 9) (string-append "ix" (substring "ivx" place 1 2)))))
  (define (int_to_roman_tens digit)
    (cond ((= digit 0) "")
          ((= digit 1) "x")
          ((= digit 2) "xx")
          ((= digit 3) "xxx")
          ((= digit 4) "xl")
          ((= digit 5) "l")
          ((= digit 6) "lx")
          ((= digit 7) "lxx")
          ((= digit 8) "lxxx")
          ((= digit 9) "xc")))
  (define (int_to_roman_hundreds digit)
    (cond ((= digit 0) "")
          ((= digit 1) "c")
          ((= digit 2) "cc")
          ((= digit 3) "ccc")
          ((= digit 4) "cd")
          ((= digit 5) "d")
          ((= digit 6) "dc")
          ((= digit 7) "dcc")
          ((= digit 8) "dccc")
          ((= digit 9) "cm")))
  (define (int_

(require rackunit)

(define (test-humaneval) 

  (let (( candidate int_to_mini_roman))
    (check-equal? (candidate 19) "xix")
    (check-equal? (candidate 152) "clii")
    (check-equal? (candidate 251) "ccli")
    (check-equal? (candidate 426) "cdxxvi")
    (check-equal? (candidate 500) "d")
    (check-equal? (candidate 1) "i")
    (check-equal? (candidate 4) "iv")
    (check-equal? (candidate 43) "xliii")
    (check-equal? (candidate 90) "xc")
    (check-equal? (candidate 94) "xciv")
    (check-equal? (candidate 532) "dxxxii")
    (check-equal? (candidate 900) "cm")
    (check-equal? (candidate 994) "cmxciv")
    (check-equal? (candidate 1000) "m")
))

(test-humaneval)