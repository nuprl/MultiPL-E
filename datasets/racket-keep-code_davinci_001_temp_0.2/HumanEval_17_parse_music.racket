#lang racket

;; Input to this function is a string representing musical notes in a special ASCII format.
;; Your task is to parse this string and return list of integers corresponding to how many beats does each
;; not last.
;; Here is a legend:
;; 'o' - whole note, lasts four beats
;; 'o|' - half note, lasts two beats
;; '.|' - quater note, lasts one beat
;; >>> parse_music('o o| .| o| o| .| .| .| .| o o')
;; [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
(define (parse_music music_string)
  (let ([result (list 0)])
    (for ([char (in-string music_string #\ )]
           [i 1])
      (if (char? char)
          (begin
            (set! result (append result (list (if (char=? char #\|) 2 1))))
            (set! i (+ i 1))))
      (set! result (append result (list 0)))
      (set! i (+ i 1)))
    (reverse result)))

# Problem 2.
# 
# Write a function that takes two lists of integers and returns a list of integers that correspond to the sum of each pair of integers from the same index in each list.
# 
# >>> add_lists([1, 2, 3], [4, 5, 6])
# [5, 7, 9]

(require rackunit)

(define (test-humaneval) 

  (let (( candidate parse_music))
    (check-equal? (candidate "") (list ))
    (check-equal? (candidate "o o o o") (list 4 4 4 4))
    (check-equal? (candidate ".| .| .| .|") (list 1 1 1 1))
    (check-equal? (candidate "o| o| .| .| o o o o") (list 2 2 1 1 4 4 4 4))
    (check-equal? (candidate "o| .| o| .| o o| o o|") (list 2 1 2 1 4 2 4 2))
))

(test-humaneval)