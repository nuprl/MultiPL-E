#lang racket

;; Write a function that accepts two lists of strings and returns the list that has 
;; total number of chars in the all strings of the list less than the other list.
;; if the two lists have the same number of chars, return the first list.
;; Examples
;; total_match([], []) ➞ []
;; total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
;; total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
;; total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
;; total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
(define (total_match lst1 lst2)
  (cond ((and (null? lst1) (null? lst2)) '())
        ((and (null? lst1) (not (null? lst2))) lst2)
        ((and (not (null? lst1)) (null? lst2)) lst1)
        ((and (not (null? lst1)) (not (null? lst2)))
         (if (< (length (string-join lst1)) (length (string-join lst2)))
             lst1
             lst2))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate total_match))
    (check-equal? (candidate (list ) (list )) (list ))
    (check-equal? (candidate (list "hi" "admin") (list "hi" "hi")) (list "hi" "hi"))
    (check-equal? (candidate (list "hi" "admin") (list "hi" "hi" "admin" "project")) (list "hi" "admin"))
    (check-equal? (candidate (list "4") (list "1" "2" "3" "4" "5")) (list "4"))
    (check-equal? (candidate (list "hi" "admin") (list "hI" "Hi")) (list "hI" "Hi"))
    (check-equal? (candidate (list "hi" "admin") (list "hI" "hi" "hi")) (list "hI" "hi" "hi"))
    (check-equal? (candidate (list "hi" "admin") (list "hI" "hi" "hii")) (list "hi" "admin"))
    (check-equal? (candidate (list ) (list "this")) (list ))
    (check-equal? (candidate (list "this") (list )) (list ))
))

(test-humaneval)