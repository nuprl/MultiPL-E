#lang racket

;; Write a function that returns true if the given number is the multiplication of 3 prime numbers
;; and false otherwise.
;; Knowing that (a) is less then 100. 
;; Example:
;; is_multiply_prime(30) == True
;; 30 = 2 * 3 * 5
(define (is_multiply_prime a)
  (define (is_prime? n)
    (define (is_divisible? n k)
      (= (modulo n k) 0))
    (define (divisors n)
      (cond ((= n 1) (list 1))
            ((is_divisible? n 2) (cons 2 (divisors (/ n 2))))
            (else (append (divisors (- n 1)) (list n)))))
    (not (null? (divisors n))))
  (define (multiply_prime? n)
    (define (multiply_prime_? n k)
      (if (= (modulo n k) 0)
          (if (is_prime? k)
              (multiply_prime_? (/ n k) k)
              #f)
          #t))
    (multiply_prime_? n 2))
  (multiply_prime? a))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate is_multiply_prime))
    (check-equal? (candidate 5) #f)
    (check-equal? (candidate 30) #t)
    (check-equal? (candidate 8) #t)
    (check-equal? (candidate 10) #f)
    (check-equal? (candidate 125) #t)
    (check-equal? (candidate 105) #t)
    (check-equal? (candidate 126) #f)
    (check-equal? (candidate 729) #f)
    (check-equal? (candidate 891) #f)
    (check-equal? (candidate 1001) #t)
))

(test-humaneval)