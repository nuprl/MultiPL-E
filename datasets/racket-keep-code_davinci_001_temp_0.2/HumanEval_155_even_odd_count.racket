#lang racket

;; Given an integer. return a tuple that has the number of even and odd digits respectively.
;; Example:
;; even_odd_count(-12) ==> (1, 1)
;; even_odd_count(123) ==> (1, 2)
(define (even_odd_count num)
  (cond [(zero? num) (cons 0 0)]
        [(even? num) (cons 1 (even_odd_count (- num 1)))]
        [(odd? num) (cons 0 (even_odd_count (- num 1)))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate even_odd_count))
    (check-equal? (candidate 7) (list 0 1))
    (check-equal? (candidate -78) (list 1 1))
    (check-equal? (candidate 3452) (list 2 2))
    (check-equal? (candidate 346211) (list 3 3))
    (check-equal? (candidate -345821) (list 3 3))
    (check-equal? (candidate -2) (list 1 0))
    (check-equal? (candidate -45347) (list 2 3))
    (check-equal? (candidate 0) (list 1 0))
))

(test-humaneval)