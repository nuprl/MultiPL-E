#lang racket

;; Given a list of numbers, return the sum of squares of the numbers
;; in the list that are odd. Ignore numbers that are negative or not integers.
;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
;; double_the_difference([-1, -2, 0]) == 0
;; double_the_difference([9, -2]) == 81
;; double_the_difference([0]) == 0  
;; If the input list is empty, return 0.
(define (double_the_difference lst)
  (cond [(null? lst) 0]
        [else (+ (square (car lst)) (double_the_difference (cdr lst)))])
  )


(require rackunit)

(define (test-humaneval) 

  (let (( candidate double_the_difference))
    (check-equal? (candidate (list )) 0)
    (check-equal? (candidate (list 5.0 4.0)) 25)
    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)
    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)
    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)
    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)
    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)
))

(test-humaneval)