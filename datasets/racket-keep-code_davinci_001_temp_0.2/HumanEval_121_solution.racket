#lang racket

;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
;; Examples
;; solution([5, 8, 7, 1]) ==> 12
;; solution([3, 3, 3, 3, 3]) ==> 9
;; solution([30, 13, 24, 321]) ==>0
(define (solution lst)
  (define (odd? n)
    (= (modulo n 2) 1))
  (define (even? n)
    (= (modulo n 2) 0))
  (define (sum-odd-even-pos lst)
    (if (null? lst)
        0
        (if (and (even? (car lst)) (odd? (cadr lst)))
            (+ (car lst) (sum-odd-even-pos (cdr lst)))
            (sum-odd-even-pos (cdr lst)))))
  (sum-odd-even-pos lst))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate solution))
    (check-equal? (candidate (list 5 8 7 1)) 12)
    (check-equal? (candidate (list 3 3 3 3 3)) 9)
    (check-equal? (candidate (list 30 13 24 321)) 0)
    (check-equal? (candidate (list 5 9)) 5)
    (check-equal? (candidate (list 2 4 8)) 0)
    (check-equal? (candidate (list 30 13 23 32)) 23)
    (check-equal? (candidate (list 3 13 2 9)) 3)
))

(test-humaneval)