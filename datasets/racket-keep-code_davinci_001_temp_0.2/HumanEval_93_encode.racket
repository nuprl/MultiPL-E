#lang racket

;; Write a function that takes a message, and encodes in such a 
;; way that it swaps case of all letters, replaces all vowels in 
;; the message with the letter that appears 2 places ahead of that 
;; vowel in the english alphabet. 
;; Assume only letters. 
;; Examples:
;; >>> encode('test')
;; 'TGST'
;; >>> encode('This is a message')
;; 'tHKS KS C MGSSCGG'
(define (encode message)
  (define (swap-case c)
    (cond ((= c ?a) ?A)
          ((= c ?A) ?a)
          ((= c ?e) ?E)
          ((= c ?E) ?e)
          ((= c ?i) ?I)
          ((= c ?I) ?i)
          ((= c ?o) ?O)
          ((= c ?O) ?o)
          ((= c ?u) ?U)
          ((= c ?U) ?u)
          (else c)))
  (define (replace-vowel c)
    (cond ((= c ?a) ?A)
          ((= c ?A) ?A)
          ((= c ?e) ?E)
          ((= c ?E) ?E)
          ((= c ?i) ?I)
          ((= c ?I) ?I)
          ((= c ?o) ?O)
          ((= c ?O) ?O)
          ((= c ?u) ?U)
          ((= c ?U) ?U)
          (else c)))
  (define (encode-char c)
    (cond ((= c ?a) ?A)
          ((= c ?A) ?a)
          ((= c ?e) ?E)
          ((= c ?E) ?e)
          ((= c ?i) ?I)
          ((= c ?I) ?i)
          ((= c ?o) ?O)
          ((= c ?O) ?o)
          ((= c ?u) ?U)
          ((= c ?U) ?u)
          (else c)))
  (define (encode-string str)
    (if (null? str)
        '()
        (cons (encode-char (car str))
              (encode-string (cdr str)))))
  (define (encode-message str)
    (if (null? str)
        '()
        (cons (replace-vowel (swap-case (car str)))
              (encode-message (cdr str)))))
  (define (en

(require rackunit)

(define (test-humaneval) 

  (let (( candidate encode))
    (check-equal? (candidate "TEST") "tgst")
    (check-equal? (candidate "Mudasir") "mWDCSKR")
    (check-equal? (candidate "YES") "ygs")
    (check-equal? (candidate "This is a message") "tHKS KS C MGSSCGG")
    (check-equal? (candidate "I DoNt KnOw WhAt tO WrItE") "k dQnT kNqW wHcT Tq wRkTg")
))

(test-humaneval)