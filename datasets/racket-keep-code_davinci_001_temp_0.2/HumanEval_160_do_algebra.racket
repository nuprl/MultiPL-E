#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; array = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (define (build_expression op1 op2)
    (cond ((= op1 '+) (+ op2 0))
          ((= op1 '-) (- op2 0))
          ((= op1 '*) (* op2 0))
          ((= op1 '//) (/ op2 0))
          ((= op1 '**) (expt op2 0))
          (else (error "Unknown operator: ~a" op1))))
  (define (build_expression_list op_list op_list_rest)
    (if (null? op_list_rest)
        (build_expression (car op_list) (car op_list_rest))
        (build_expression_list (cdr op_list) (cdr op_list_rest))))
  (build_expression_list operator (cdr operand)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)