#lang racket

;; Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
;; >>> fizz_buzz(50)
;; 0
;; >>> fizz_buzz(78)
;; 2
;; >>> fizz_buzz(79)
;; 3
(define (fizz_buzz n)
  (cond [(or (= n 0) (= n 1)) 0]
        [(or (= n 2) (= n 3)) 1]
        [(or (= n 4) (= n 5)) 2]
        [(or (= n 6) (= n 7)) 3]
        [(or (= n 8) (= n 9)) 4]
        [(or (= n 10) (= n 11)) 5]
        [(or (= n 12) (= n 13)) 6]
        [(or (= n 14) (= n 15)) 7]
        [(or (= n 16) (= n 17)) 8]
        [(or (= n 18) (= n 19)) 9]
        [(or (= n 20) (= n 21)) 10]
        [(or (= n 22) (= n 23)) 11]
        [(or (= n 24) (= n 25)) 12]
        [(or (= n 26) (= n 27)) 13]
        [(or (= n 28) (= n 29)) 14]
        [(or (= n 30) (= n 31)) 15]
        [(or (= n 32) (= n 33)) 16]
        [(or (= n 34) (= n 35)) 17]
        [(or (= n 36) (= n 37)) 18]
        [(or (= n 38) (= n 39)) 19]
        [(or (= n 40) (= n 41)) 20]
        [(or (= n 42) (= n 43)) 21]
        [(or (= n 44) (= n 45)) 22]
        [(or (= n 46) (= n 47)) 23]
        [(or (= n 48) (= n 49)) 24]
        [(or (= n 50) (= n 51)) 25]
        [(or (= n 52) (= n 53)) 26]
        [(or (= n 54) (= n 55)) 27]
        [(or (= n 56) (= n 57)) 28]
        [(or (= n 58) (= n 59)) 29]
        [(or (= n 60) (= n 61)) 30]
        [(or (= n 62) (= n 63)) 31]
        [(or (= n 64) (= n 65)) 32]
        [(or (= n 66) (= n 67)) 33]
        [(or (= n 68) (= n 69)) 34]
        [(or (= n 70)

(require rackunit)

(define (test-humaneval) 

  (let (( candidate fizz_buzz))
    (check-equal? (candidate 50) 0)
    (check-equal? (candidate 78) 2)
    (check-equal? (candidate 79) 3)
    (check-equal? (candidate 100) 3)
    (check-equal? (candidate 200) 6)
    (check-equal? (candidate 4000) 192)
    (check-equal? (candidate 10000) 639)
    (check-equal? (candidate 100000) 8026)
))

(test-humaneval)