#lang racket

;; Given a string representing a space separated lowercase letters, return a dictionary
;; of the letter with the most repetition and containing the corresponding count.
;; If several letters have the same occurrence, return all of them.
;; Example:
;; histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
;; histogram('a b b a') == {'a': 2, 'b': 2}
;; histogram('a b c a b') == {'a': 2, 'b': 2}
;; histogram('b b b b a') == {'b': 4}
;; histogram('') == {}
(define (histogram test)
  (let ((result (make-dict)))
    (for ([i (string-split test #\ )])
      (let ((count (get-dict-ref result i #f)))
        (if count
            (set-dict-ref! result i (+ 1 count))
            (set-dict-ref! result i 1))))
    result))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate histogram))
    (check-equal? (candidate "a b b a") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c a b") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c d g") #hash(("a" .  1) ("b" .  1) ("c" .  1) ("d" .  1) ("g" .  1)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "b b b b a") #hash(("b" .  4)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "") #hash())
    (check-equal? (candidate "a") #hash(("a" .  1)))
))

(test-humaneval)