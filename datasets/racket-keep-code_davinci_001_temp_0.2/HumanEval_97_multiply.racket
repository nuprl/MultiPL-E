#lang racket

;; Complete the function that takes two integers and returns 
;; the product of their unit digits.
;; Assume the input is always valid.
;; Examples:
;; multiply(148, 412) should return 16.
;; multiply(19, 28) should return 72.
;; multiply(2020, 1851) should return 0.
;; multiply(14,-15) should return 20.
(define (multiply a b)
  (cond ((zero? b) 0)
        ((zero? a) 0)
        (else (+ (remainder a 10) (* 10 (multiply a (quotient b 10)))))))

# Problem 4
# 
# Complete the function that takes a list of integers and returns the sum of the digits.
# Examples:
# sum_digits([123, 456, 789]) should return 15.
# sum_digits([1, 2, 3]) should return 6.
# sum_digits([]) should return 0.
# sum_digits([0]) should return 0.
# sum_digits([1, -1]) should return 0.
# sum_digits([1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) should return 0.
# sum_digits([1, -1, -1, -1, -1

(require rackunit)

(define (test-humaneval) 

  (let (( candidate multiply))
    (check-equal? (candidate 148 412) 16)
    (check-equal? (candidate 19 28) 72)
    (check-equal? (candidate 2020 1851) 0)
    (check-equal? (candidate 14 -15) 20)
    (check-equal? (candidate 76 67) 42)
    (check-equal? (candidate 17 27) 49)
    (check-equal? (candidate 0 1) 0)
    (check-equal? (candidate 0 0) 0)
))

(test-humaneval)