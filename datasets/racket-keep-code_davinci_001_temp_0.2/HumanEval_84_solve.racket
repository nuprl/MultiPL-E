#lang racket

;; Given a positive integer N, return the total sum of its digits in binary.
;; Example
;; For N = 1000, the sum of digits will be 1 the output should be "1".
;; For N = 150, the sum of digits will be 6 the output should be "110".
;; For N = 147, the sum of digits will be 12 the output should be "1100".
;; Variables:
;; @N integer
;; Constraints: 0 ≤ N ≤ 10000.
;; Output:
;; a string of binary number
(define (solve N)
  (define (sum-digits n)
    (if (< n 10)
        n
        (+ (modulo n 10) (sum-digits (/ n 10)))))
  (string->number (number->string (sum-digits N))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate solve))
    (check-equal? (candidate 1000) "1")
    (check-equal? (candidate 150) "110")
    (check-equal? (candidate 147) "1100")
    (check-equal? (candidate 333) "1001")
    (check-equal? (candidate 963) "10010")
))

(test-humaneval)