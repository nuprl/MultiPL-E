#lang racket

;; brackets is a string of "(" and ")".
;; return True if every opening bracket has a corresponding closing bracket.
;; >>> correct_bracketing("(")
;; False
;; >>> correct_bracketing("()")
;; True
;; >>> correct_bracketing("(()())")
;; True
;; >>> correct_bracketing(")(()")
;; False
(define (correct_bracketing brackets)
  (define (bracket-pairs-helper pairs)
    (cond [(empty? pairs) #t]
          [(= (car pairs) (cadr pairs)) (bracket-pairs-helper (cddr pairs))]
          [else #f]))
  (bracket-pairs-helper (list (list (car brackets)) (list (cadr brackets)))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate correct_bracketing))
    (check-equal? (candidate "()") #t)
    (check-equal? (candidate "(()())") #t)
    (check-equal? (candidate "()()(()())()") #t)
    (check-equal? (candidate "()()((()()())())(()()(()))") #t)
    (check-equal? (candidate "((()())))") #f)
    (check-equal? (candidate ")(()") #f)
    (check-equal? (candidate "(") #f)
    (check-equal? (candidate "((((") #f)
    (check-equal? (candidate ")") #f)
    (check-equal? (candidate "(()") #f)
    (check-equal? (candidate "()()(()())())(()") #f)
    (check-equal? (candidate "()()(()())()))()") #f)
))

(test-humaneval)