#lang racket

;; You have to write a function which validates a given date string and
;; returns True if the date is valid otherwise False.
;; The date is valid if all of the following rules are satisfied:
;; 1. The date string is not empty.
;; 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
;; 3. The months should not be less than 1 or higher than 12.
;; 4. The date should be in the format: mm-dd-yyyy
;; for example: 
;; valid_date('03-11-2000') => True
;; valid_date('15-01-2012') => False
;; valid_date('04-0-2040') => False
;; valid_date('06-04-2020') => True
;; valid_date('06/04/2020') => False
(define (valid_date date)
  (define (valid_date_helper date)
    (cond ((string=? date "") #f)
          ((or (< (string-length date) 8) (> (string-length date) 10)) #f)
          ((string=? (substring date 0 2) "01")
           (if (or (< (string-length date) 8) (> (string-length date) 10)) #f
             (if (or (< (string-to-number (substring date 3 5)) 1) (> (string-to-number (substring date 3 5)) 31)) #f
               (valid_date_helper (substring date 6 10)))))
          ((string=? (substring date 0 2) "04")
           (if (or (< (string-length date) 8) (> (string-length date) 10)) #f
             (if (or (< (string-to-number (substring date 3 5)) 1) (> (string-to-number (substring date 3 5)) 30)) #f
               (valid_date_helper (substring date 6 10)))))
          ((string=? (substring date 0 2) "05")
           (if (or (< (string-length date) 8) (> (string-length date) 10)) #f
             (if (or (< (string-to-number (substring date 3 5)) 1) (> (string-to-number (substring date 3 5)) 31)) #f
               (valid_date_helper (substring date 6 10)))))
          ((string=? (substring date 0 2) "06")
           (if (or (< (string-length date) 8) (> (string-length date) 10)) #f
             (if (or (< (string-to-number (substring date 3 5)) 1) (> (string-to-number (substring date 3 5)) 30)) #f
               (valid_date_helper (substring date 6 10)))))
          ((string=? (substring date 0 2) "07")
           (if (or (< (string-length date) 8) (> (string-length date) 10)) #f
             (if (or (< (string-

(require rackunit)

(define (test-humaneval) 

  (let (( candidate valid_date))
    (check-equal? (candidate "03-11-2000") #t)
    (check-equal? (candidate "15-01-2012") #f)
    (check-equal? (candidate "04-0-2040") #f)
    (check-equal? (candidate "06-04-2020") #t)
    (check-equal? (candidate "01-01-2007") #t)
    (check-equal? (candidate "03-32-2011") #f)
    (check-equal? (candidate "") #f)
    (check-equal? (candidate "04-31-3000") #f)
    (check-equal? (candidate "06-06-2005") #t)
    (check-equal? (candidate "21-31-2000") #f)
    (check-equal? (candidate "04-12-2003") #t)
    (check-equal? (candidate "04122003") #f)
    (check-equal? (candidate "20030412") #f)
    (check-equal? (candidate "2003-04") #f)
    (check-equal? (candidate "2003-04-12") #f)
    (check-equal? (candidate "04-2003") #f)
))

(test-humaneval)