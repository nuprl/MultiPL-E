#lang racket

;; Input is a space-delimited string of numberals from 'zero' to 'nine'.
;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
;; Return the string with numbers sorted from smallest to largest
;; >>> sort_numbers('three one five')
;; 'one three five'
(define (sort_numbers numbers)
  (define (compare a b)
    (cond [(= a b) #t]
          [(< a b) #f]
          [(> a b) #t]))
  (define (sort l)
    (if (null? l)
        '()
        (let ((x (car l))
              (xs (cdr l)))
          (if (compare x (car xs))
              (cons x (sort xs))
              (cons (car xs) (sort (cons x xs)))))))
  (sort (map string->number (string-split numbers #\ )))
  )


(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_numbers))
    (check-equal? (candidate "") "")
    (check-equal? (candidate "three") "three")
    (check-equal? (candidate "three five nine") "three five nine")
    (check-equal? (candidate "five zero four seven nine eight") "zero four five seven eight nine")
    (check-equal? (candidate "six five four three two one zero") "zero one two three four five six")
))

(test-humaneval)