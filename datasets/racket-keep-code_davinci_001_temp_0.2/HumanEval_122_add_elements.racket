#lang racket

;; Given a non-empty array of integers arr and an integer k, return
;; the sum of the elements with at most two digits from the first k elements of arr.
;; Example:
;; Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
;; Output: 24 # sum of 21 + 3
;; Constraints:
;; 1. 1 <= len(arr) <= 100
;; 2. 1 <= k <= len(arr)
(define (add_elements arr k)
  (define (add_elements_helper arr k sum)
    (if (> k 0)
        (add_elements_helper (butlast arr) (- k 1) (+ sum (car arr)))
        sum))
  (add_elements_helper arr k 0))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate add_elements))
    (check-equal? (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4)
    (check-equal? (candidate (list 111 121 3 4000 5 6) 2) 0)
    (check-equal? (candidate (list 11 21 3 90 5 6 7 8 9) 4) 125)
    (check-equal? (candidate (list 111 21 3 4000 5 6 7 8 9) 4) 24)
    (check-equal? (candidate (list 1) 1) 1)
))

(test-humaneval)