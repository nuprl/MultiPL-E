#lang racket

;; This function takes a list l and returns a list l' such that
;; l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
;; to the values of the corresponding indicies of l, but sorted.
;; >>> sort_third([1, 2, 3])
;; [1, 2, 3]
;; >>> sort_third([5, 6, 3, 4, 8, 9, 2])
;; [2, 6, 3, 4, 8, 9, 5]
(define (sort_third l)
  (define (sort_third_helper l)
    (cond ((null? l) '())
          ((= (modulo (car l) 3) 0) (cons (car l) (sort_third_helper (cdr l))))
          (else (cons (car l) (sort_third_helper (cdr l))))))
  (sort_third_helper l))

# Problem 2
# 
# The following is a function that takes a list of strings and returns a list of the same strings, but with the vowels removed.
# 
# >>> remove_vowels(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])
# ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']
# 
# Write a function that takes a list of strings and returns a list of the same strings, but with the vowels removed.
# 
# >>> remove_vowels(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])
# ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']

(require rackunit)

(define (test-humaneval) 

  (let (( candidate sort_third))
    (check-equal? (candidate (list 5 6 3 4 8 9 2)) (list 2 6 3 4 8 9 5))
    (check-equal? (candidate (list 5 8 3 4 6 9 2)) (list 2 8 3 4 6 9 5))
    (check-equal? (candidate (list 5 6 9 4 8 3 2)) (list 2 6 9 4 8 3 5))
    (check-equal? (candidate (list 5 6 3 4 8 9 2 1)) (list 2 6 3 4 8 9 5 1))
))

(test-humaneval)