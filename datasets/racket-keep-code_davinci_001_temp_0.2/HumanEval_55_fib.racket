#lang racket

;; Return n-th Fibonacci number.
;; >>> fib(10)
;; 55
;; >>> fib(1)
;; 1
;; >>> fib(8)
;; 21
(define (fib n)
  (cond [(= n 0) 0]
        [(= n 1) 1]
        [else (+ (fib (- n 1))
                 (fib (- n 2)))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate fib))
    (check-equal? (candidate 10) 55)
    (check-equal? (candidate 1) 1)
    (check-equal? (candidate 8) 21)
    (check-equal? (candidate 11) 89)
    (check-equal? (candidate 12) 144)
))

(test-humaneval)