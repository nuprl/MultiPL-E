#lang racket

;; Create a function that takes 3 numbers.
;; Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
;; Returns false in any other cases.
;; Examples
;; any_int(5, 2, 7) ➞ True
;; any_int(3, 2, 2) ➞ False
;; any_int(3, -2, 1) ➞ True
;; any_int(3.6, -2.2, 2) ➞ False
(define (any_int x, y, z)
  (if (and (integer? x) (integer? y) (integer? z))
      (if (or (and (= x (+ y z)) (< x (* y z)))
              (and (= y (+ x z)) (< y (* x z)))
              (and (= z (+ x y)) (< z (* x y))))
          #t
          #f)
      #f))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate any_int))
    (check-equal? (candidate 2 3 1) #t)
    (check-equal? (candidate 2.5 2 3) #f)
    (check-equal? (candidate 1.5 5 3.5) #f)
    (check-equal? (candidate 2 6 2) #f)
    (check-equal? (candidate 4 2 2) #t)
    (check-equal? (candidate 2.2 2.2 2.2) #f)
    (check-equal? (candidate -4 6 2) #t)
    (check-equal? (candidate 2 1 1) #t)
    (check-equal? (candidate 3 4 7) #t)
    (check-equal? (candidate 3.0 4 7) #f)
))

(test-humaneval)