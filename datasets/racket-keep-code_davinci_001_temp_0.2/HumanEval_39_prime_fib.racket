#lang racket

;; prime_fib returns n-th number that is a Fibonacci number and it's also prime.
;; >>> prime_fib(1)
;; 2
;; >>> prime_fib(2)
;; 3
;; >>> prime_fib(3)
;; 5
;; >>> prime_fib(4)
;; 13
;; >>> prime_fib(5)
;; 89
(define (prime_fib n)
  (define (fib n)
    (if (< n 2)
        n
        (+ (fib (- n 1)) (fib (- n 2)))
        )
    )
  (define (prime? n)
    (define (prime-helper n)
      (if (= n 1)
          #t
          (if (even? n)
              (prime-helper (- n 1))
              (and (prime-helper (- n 1)) (prime-helper (- n 2)))
              )
          )
      )
    (prime-helper n)
    )
  (if (prime? (fib n))
      (fib n)
      (prime_fib (+ n 1))
      )
  )


(require rackunit)

(define (test-humaneval) 

  (let (( candidate prime_fib))
    (check-equal? (candidate 1) 2)
    (check-equal? (candidate 2) 3)
    (check-equal? (candidate 3) 5)
    (check-equal? (candidate 4) 13)
    (check-equal? (candidate 5) 89)
    (check-equal? (candidate 6) 233)
    (check-equal? (candidate 7) 1597)
    (check-equal? (candidate 8) 28657)
    (check-equal? (candidate 9) 514229)
    (check-equal? (candidate 10) 433494437)
))

(test-humaneval)