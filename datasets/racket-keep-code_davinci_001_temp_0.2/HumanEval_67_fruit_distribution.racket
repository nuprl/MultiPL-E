#lang racket

;; In this task, you will be given a string that represents a number of apples and oranges 
;; that are distributed in a basket of fruit this basket contains 
;; apples, oranges, and mango fruits. Given the string that represents the total number of 
;; the oranges and apples and an integer that represent the total number of the fruits 
;; in the basket return the number of the mango fruits in the basket.
;; for examble:
;; fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
;; fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
;; fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
;; fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
(define (fruit_distribution s n)
  (if (string-match "\\([0-9]+\\) apples and \\([0-9]+\\) oranges" s)
      (let ((apples (match-string 1 s))
            (oranges (match-string 2 s)))
        (if (and (number? apples) (number? oranges) (> n (+ (string-to-number apples) (string-to-number oranges))))
            (- n (string-to-number apples) (string-to-number oranges))
            "No mangoes"))
      "No apples"))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate fruit_distribution))
    (check-equal? (candidate "5 apples and 6 oranges" 19) 8)
    (check-equal? (candidate "5 apples and 6 oranges" 21) 10)
    (check-equal? (candidate "0 apples and 1 oranges" 3) 2)
    (check-equal? (candidate "1 apples and 0 oranges" 3) 2)
    (check-equal? (candidate "2 apples and 3 oranges" 100) 95)
    (check-equal? (candidate "2 apples and 3 oranges" 5) 0)
    (check-equal? (candidate "1 apples and 100 oranges" 120) 19)
))

(test-humaneval)