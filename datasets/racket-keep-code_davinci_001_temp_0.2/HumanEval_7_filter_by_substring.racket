#lang racket

;; Filter an input list of strings only for ones that contain given substring
;; >>> filter_by_substring([], 'a')
;; []
;; >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
;; ['abc', 'bacd', 'array']
(define (filter_by_substring strings substring)
  (cond [(null? strings) '()]
        [else (if (string-contains? (car strings) substring)
                  (cons (car strings) (filter_by_substring (cdr strings) substring))
                  (filter_by_substring (cdr strings) substring))]))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate filter_by_substring))
    (check-equal? (candidate (list ) "john") (list ))
    (check-equal? (candidate (list "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx") "xxx") (list "xxx" "xxxAAA" "xxx"))
    (check-equal? (candidate (list "xxx" "asd" "aaaxxy" "john doe" "xxxAAA" "xxx") "xx") (list "xxx" "aaaxxy" "xxxAAA" "xxx"))
    (check-equal? (candidate (list "grunt" "trumpet" "prune" "gruesome") "run") (list "grunt" "prune"))
))

(test-humaneval)