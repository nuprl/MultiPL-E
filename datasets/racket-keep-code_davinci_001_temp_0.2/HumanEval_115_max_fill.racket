#lang racket

;; You are given a rectangular grid of wells. Each row represents a single well,
;; and each 1 in a row represents a single unit of water.
;; Each well has a corresponding bucket that can be used to extract water from it, 
;; and all buckets have the same capacity.
;; Your task is to use the buckets to empty the wells.
;; Output the number of times you need to lower the buckets.
;; Example 1:
;; Input: 
;; grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
;; bucket_capacity : 1
;; Output: 6
;; Example 2:
;; Input: 
;; grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
;; bucket_capacity : 2
;; Output: 5
;; Example 3:
;; Input: 
;; grid : [[0,0,0], [0,0,0]]
;; bucket_capacity : 5
;; Output: 0
;; Constraints:
;; * all wells have the same length
;; * 1 <= grid.length <= 10^2
;; * 1 <= grid[:,1].length <= 10^2
;; * grid[i][j] -> 0 | 1
;; * 1 <= capacity <= 10
(define (max_fill grid capacity)
  (define (fill_well well)
    (define (fill_well_rec well_index)
      (if (and (>= well_index 0) (eq? (grid well_index) 0))
          (fill_well_rec (- well_index 1))
          (if (< well_index 0)
              0
              (+ (fill_well_rec (- well_index 1)) 1))))
    (fill_well_rec (length well)))
  (define (fill_grid)
    (define (fill_grid_rec row)
      (if (eq? row 0)
          0
          (+ (fill_grid_rec (- row 1)) (fill_well (grid row)))))
    (fill_grid_rec (length grid)))
  (define (fill_grid_rec row)
    (if (eq? row 0)
        0
        (+ (fill_grid_rec (- row 1)) (fill_well (grid row)))))
  (define (fill_grid)
    (define (fill_grid_rec row)
      (if (eq? row 0)
          0
          (+ (fill_grid_rec (- row 1)) (fill_well (grid row)))))
    (fill_grid_rec (length grid)))
  (define (fill_grid_rec row)
    (if (eq? row 0)
        0
        (+ (fill_grid_rec (- row 1)) (fill_well (grid row)))))
  (define (fill_grid)
    (define (fill_grid_rec row)
      (if (eq? row 0)
          0
          (+ (fill_grid_rec (- row 1)) (fill_well (grid row)))))
    (fill_grid_rec (length grid)))
  (define (fill_grid_rec row)
    (if (eq? row 0)
        0
        (+ (fill_grid_rec (- row 1)) (fill_well (grid row)))))
  (define (fill_grid)
    (define (fill_grid_rec row)
      (if (eq? row 0)
          0
          (+ (fill_grid_rec (- row 1)) (fill_well

(require rackunit)

(define (test-humaneval) 

  (let (( candidate max_fill))
    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6)
    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5)
    (check-equal? (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0)
    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4)
    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2)
))

(test-humaneval)