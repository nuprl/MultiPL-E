#lang racket

;; Given the lengths of the three sides of a triangle. Return True if the three
;; sides form a right-angled triangle, False otherwise.
;; A right-angled triangle is a triangle in which one angle is right angle or 
;; 90 degree.
;; Example:
;; right_angle_triangle(3, 4, 5) == True
;; right_angle_triangle(1, 2, 3) == False
(define (right_angle_triangle a b c)
  (define (square x) (* x x))
  (define (hypotenuse a b)
    (sqrt (+ (square a) (square b))))
  (= (hypotenuse a b) c))

# Problem 3
# 
# The following function is supposed to return the sum of the squares of the
# elements of a list.
# 
# ```
# (define (sum-squares xs)
# (accumulate + 0 (map square xs)))
# ```
# 
# But it doesn't work properly.
# 
# ```
# > (sum-squares '(1 2 3))
# 16
# > (sum-squares '(1 2 3 4))
# 100
# > (sum-squares '(1 2 3 4 5))
# 105
# ```
# 
# What is wrong with it?
# 
# How can we fix it?
# 
# Write a new function that fixes it.
# 
# ```
# (define (sum-squares xs)
# (accumulate + 0 (map square xs)))
# ```
# 
# Hint: Use the `map` function.
# 
# Solution
# 
# The problem is that the function `square` is not a pure function.
# 
# It is not a pure function because it modifies the state of the environment.
# 
# The environment is a global environment.
# 
# The state of the environment is the value of the variable `x`.
# 
# The function `square` modifies the state of the environment by assigning
# the value of `x` to its square.
# 
# The function `square` is not a pure function because it modifies the state
# of the environment.
# 
# The function `square` is not a pure function because it modifies the state
# of the environment.
# 
# The function `square` is not a pure function because it modifies the state
# of the environment.
# 
# The function `square` is not a pure function because it modifies the state
# of the environment.
# 

(require rackunit)

(define (test-humaneval) 

  (let (( candidate right_angle_triangle))
    (check-equal? (candidate 3 4 5) #t)
    (check-equal? (candidate 1 2 3) #f)
    (check-equal? (candidate 10 6 8) #t)
    (check-equal? (candidate 2 2 2) #f)
    (check-equal? (candidate 7 24 25) #t)
    (check-equal? (candidate 10 5 7) #f)
    (check-equal? (candidate 5 12 13) #t)
    (check-equal? (candidate 15 8 17) #t)
    (check-equal? (candidate 48 55 73) #t)
    (check-equal? (candidate 1 1 1) #f)
    (check-equal? (candidate 2 2 10) #f)
))

(test-humaneval)