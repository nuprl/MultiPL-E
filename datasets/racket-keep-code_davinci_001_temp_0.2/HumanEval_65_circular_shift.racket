#lang racket

;; Circular shift the digits of the integer x, shift the digits right by shift
;; and return the result as a string.
;; If shift > number of digits, return digits reversed.
;; >>> circular_shift(12, 1)
;; "21"
;; >>> circular_shift(12, 2)
;; "12"
(define (circular_shift x shift)
  (define (reverse s)
    (if (null? s)
        '()
        (append (reverse (cdr s)) (list (car s)))))
  (define (shift-digit d s)
    (if (= s 0)
        d
        (shift-digit (modulo (+ d 10) 10) (- s 1))))
  (define (shift-digits s ds)
    (if (null? ds)
        '()
        (cons (shift-digit (car ds) s) (shift-digits s (cdr ds)))))
  (if (> shift (length (number->string x)))
      (reverse (number->string x))
      (string->number (number->string x) (reverse (shift-digits shift (string->list (number->string x)))))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate circular_shift))
    (check-equal? (candidate 100 2) "001")
    (check-equal? (candidate 12 2) "12")
    (check-equal? (candidate 97 8) "79")
    (check-equal? (candidate 12 1) "21")
    (check-equal? (candidate 11 101) "11")
))

(test-humaneval)