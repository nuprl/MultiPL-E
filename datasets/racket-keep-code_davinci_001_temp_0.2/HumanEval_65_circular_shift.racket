#lang racket

;; Circular shift the digits of the integer x, shift the digits right by shift
;; and return the result as a string.
;; If shift > number of digits, return digits reversed.
;; >>> circular_shift(12, 1)
;; "21"
;; >>> circular_shift(12, 2)
;; "12"
(define (circular_shift x, shift)
  (let ((digits (string->list (number->string x)))
        (result '()))
    (if (> shift (length digits))
        (append (reverse digits) result)
        (let loop ((i 0))
          (if (= i shift)
              (append digits result)
              (begin
                (set! result (cons (car digits) result))
                (set! digits (cdr digits))
                (set! i (+ i 1))
                (loop i)))))))


(require rackunit)

(define (test-humaneval) 

  (let (( candidate circular_shift))
    (check-equal? (candidate 100 2) "001")
    (check-equal? (candidate 12 2) "12")
    (check-equal? (candidate 97 8) "79")
    (check-equal? (candidate 12 1) "21")
    (check-equal? (candidate 11 101) "11")
))

(test-humaneval)