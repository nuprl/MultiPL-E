#lang racket

;; Change numerical base of input number x to base.
;; return string representation after the conversion.
;; base numbers are less than 10.
;; >>> change_base(8, 3)
;; '22'
;; >>> change_base(8, 2)
;; '1000'
;; >>> change_base(7, 2)
;; '111'
(define (change_base x, base)
  (cond [(= x 0) "0"]
        [(= base 10) (number->string x)]
        [else (change_base (/ x base) base)
              (string-append (change_base (% x base) base)
                             (string (modulo x base)))])
  )


(require rackunit)

(define (test-humaneval) 

  (let (( candidate change_base))
    (check-equal? (candidate 8 3) "22")
    (check-equal? (candidate 9 3) "100")
    (check-equal? (candidate 234 2) "11101010")
    (check-equal? (candidate 16 2) "10000")
    (check-equal? (candidate 8 2) "1000")
    (check-equal? (candidate 7 2) "111")
    (check-equal? (candidate 2 3) "2")
    (check-equal? (candidate 3 4) "3")
    (check-equal? (candidate 4 5) "4")
    (check-equal? (candidate 5 6) "5")
    (check-equal? (candidate 6 7) "6")
    (check-equal? (candidate 7 8) "7")
))

(test-humaneval)