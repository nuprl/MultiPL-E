name: HumanEval_127_intersection
language: php
prompt: "<?php\n// You are given two intervals,\n// where each interval is a pair\
  \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
  \ are closed which means that the interval (start, end)\n// includes both start\
  \ and end.\n// For each given interval, it is assumed that its start is less or\
  \ equal its end.\n// Your task is to determine whether the length of intersection\
  \ of these two \n// intervals is a prime number.\n// Example, the intersection of\
  \ the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a\
  \ prime number.\n// If the length of the intersection is a prime number, return\
  \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
  \ return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==>\
  \ \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1),\
  \ (-5, 5)) ==> \"YES\"\nfunction intersection($interval1, $interval2) {\n"
tests: "function candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
  \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
  \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $interval1 = array_map('intval', $interval1);\n    $interval2 =\
    \ array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_map('intval', $intersection);\n    $intersection\
    \ = array_filter($intersection);\n    if (count($intersection) > 1) {\n      \
    \  sort($intersection);\n        $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    }\n    if (count($intersection) > 0) {\n        if (count($intersection)\
    \ == 1) {\n            return $intersection[0];\n        }\n        $prime = true;\n\
    \        foreach ($intersection as $num) {\n            if ($num % 2 != 0) {\n\
    \                $prime = false;\n                break;\n            }\n    \
    \    }\n        return $prime ? 'YES' : 'NO';\n    }\n    return 'NO';\n}\n",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2\
    \ = array_slice($interval2, 0, -1);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $intersection = array_slice($intersection, 0, -1);\n    $intersection\
    \ = array_map(function ($item) {\n        return $item < 0 ? $item + 1 : $item;\n\
    \    }, $intersection);\n    $intersection = array_filter($intersection);\n  \
    \  $intersection = array_map(function ($item) {\n        return $item < 0 ? $item\
    \ + 1 : $item;\n    }, $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_slice($intersection, 0, -1);\n    $intersection = array_map(function\
    \ ($item) {\n        return $item < 0 ? $item + 1 : $item;\n    }, $intersection);\n\
    \    $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_slice($intersection,\
    \ 0, -1);\n    $intersection = array_map(function ($item) {\n        return $item\
    \ < 0 ? $item + 1 : $item;\n    }, $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_slice($intersection, 0, -1);\n    $intersection = array_map(function\
    \ ($item) {\n        return $item < 0 ? $item + 1 : $item;\n    }, $intersection);\n\
    \    $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_slice($intersection,\
    \ 0, -1);\n    $intersection = array_map(function ($item) {\n        return $item\
    \ < 0 ? $item + 1 : $item;\n    }, $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_slice($intersection, 0, -1);\n    $intersection = array_map(function\
    \ ($item) {\n        return $item < 0 ? $item + 1 : $item;\n    }, $intersection);\n\
    \    $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_slice($intersection,\
    \ 0, -1);\n    $intersection = array_map(function ($item) {\n        return $item\
    \ < 0 ? $item + 1 : $item;\n    }, $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == ", "    $interval1Start = $interval1[0];\n  \
    \  $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End\
    \ = $interval2[1];\n    $interval1Length = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n    $intersectionLength\
    \ = $interval1Length + $interval2Length;\n    if ($intersectionLength == 0) return\
    \ \"NO\";\n    if ($intersectionLength == 1) return \"YES\";\n    if ($interval1Start\
    \ <= $interval2Start && $interval1End >= $interval2End) return \"YES\";\n    if\
    \ ($interval1Start >= $interval2Start && $interval1End <= $interval2End) return\
    \ \"YES\";\n    if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ return \"NO\";\n    if ($interval1Start >= $interval2Start && $interval1End\
    \ <= $interval2End) return \"NO\";\n    if ($interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) return \"NO\";\n    if ($interval1Start >=\
    \ $interval2Start && $interval1End <= $interval2End) return \"NO\";\n}\n", " \
    \   $interval1 = array_values($interval1);\n    $interval2 = array_values($interval2);\n\
    \    $interval1 = array_filter($interval1, function($v) use ($interval2) {\n \
    \       return $v >= $interval2[0];\n    });\n    $interval2 = array_filter($interval2,\
    \ function($v) use ($interval1) {\n        return $v >= $interval1[0];\n    });\n\
    \    if (count($interval1) === 0 || count($interval2) === 0) {\n        return\
    \ \"NO\";\n    }\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) === 0) {\n        return \"NO\";\n    }\n    $length\
    \ = count($intersection);\n    if ($length === 0) {\n        return \"NO\";\n\
    \    }\n    if ($length == 1) {\n        return \"YES\";\n    }\n    $prime =\
    \ true;\n    for ($i = 0; $i < $length; $i++) {\n        if ($intersection[$i]\
    \ % 2 !== 0) {\n            $prime = false;\n            break;\n        }\n \
    \   }\n    return $prime ? \"YES\" : \"NO\";\n}\n", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $intersection = $interval1[1] > $interval2[1]\
    \ ? $interval1 : $interval2;\n    $intersection = $intersection[0] > $intersection[1]\
    \ ? $intersection : $intersection[1];\n    if ($intersection > $interval1[1] &&\
    \ $intersection > $interval2[1]) {\n        return \"NO\";\n    }\n    if ($intersection\
    \ < $interval1[1] && $intersection < $interval2[1]) {\n        return \"NO\";\n\
    \    }\n    if ($intersection == $interval1[1] && $intersection == $interval2[1])\
    \ {\n        return \"YES\";\n    }\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_values($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return $intersection[0];\n    }\n    return $intersection;\n}\n", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    if ($interval1Start\
    \ > $interval2End) {\n        $interval1End = $interval1Start;\n        $interval2Start\
    \ = $interval2End;\n    }\n    if ($interval1End < $interval2Start) {\n      \
    \  $interval1Start = $interval1End;\n        $interval2End = $interval2Start;\n\
    \    }\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \    if ($interval1Start <= $interval2Start) {\n        $intersectionStart = $interval1Start;\n\
    \        $intersectionEnd = $interval2Start;\n    }\n    if ($interval1End >=\
    \ $interval2End) {\n        $intersectionStart = $interval1End;\n        $intersectionEnd\
    \ = $interval2End;\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ > 1) {\n        return \"YES\";\n    }\n    $isPrime = true;\n    for ($i =\
    \ 2; $i <= $intersectionLength; $i++) {\n        if ($i % 2 == 0) {\n        \
    \    if ($intersectionStart % $i == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n    }\n    return $isPrime\
    \ ? \"YES\" : \"NO\";\n}", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map(function ($item) {\n        return $item == count($interval1) ?\
    \ $item : $item - count($interval1);\n    }, $intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return \"YES\";\n    }\n    $prime = true;\n    foreach ($intersection as\
    \ $item) {\n        if ($item % 2 == 0) {\n            $prime = false;\n     \
    \   }\n    }\n    return $prime ? \"YES\" : \"NO\";\n}", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    $intersectionLength = abs($intersectionEnd - $intersectionStart);\n\
    \    if ($intersectionLength == 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ > 1) {\n        return \"YES\";\n    }\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    if ($interval1Start\
    \ > $interval2End) {\n        $interval1 = array_reverse($interval1);\n      \
    \  $interval1Start = $interval1[0];\n        $interval1End = $interval1[1];\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2 = array_reverse($interval2);\n\
    \        $interval2Start = $interval2[0];\n        $interval2End = $interval2[1];\n\
    \    }\n    $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart;\n    if ($intersectionLength % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    $primeLength = 2;\n    $primeLengthChecker = 1;\n    while\
    \ ($primeLengthChecker < $intersectionLength) {\n        if ($intersectionStart\
    \ % $primeLength == 0) {\n            return \"NO\";\n        }\n        $primeLength++;\n\
    \        $primeLengthChecker++;\n    }\n    return \"YES\";\n}\n", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_values($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return 'NO';\n    }\n    if (count($intersection) > 1) {\n        return 'YES';\n\
    \    }\n    return 'NO';\n}\n", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval2[0]]);\n    $interval2 = array_merge($interval2, [$interval1[1]]);\n\
    \    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return 'NO';\n    }\n    $intersection\
    \ = array_slice($intersection, 0, -1);\n    $intersection = array_map(function\
    \ ($x) {\n        return $x;\n    }, $intersection);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return 'YES';\n    }\n    return\
    \ count($intersection) == 2 ? 'YES' : 'NO';\n}\n", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval2Start;\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval2End;\n    }\n\n    if\
    \ ($interval1Start >= $interval1End || $interval2Start >= $interval2End) {\n \
    \       return \"NO\";\n    }\n\n    $intersectionStart = $interval1Start;\n \
    \   $intersectionEnd = $interval1End;\n\n    while ($intersectionStart <= $intersectionEnd)\
    \ {\n        if ($interval1Start <= $intersectionStart && $intersectionStart <=\
    \ $interval1End) {\n            $intersectionStart++;\n        }\n        if ($intersectionEnd\
    \ <= $interval2Start && $intersectionEnd <= $interval2End) {\n            $intersectionEnd++;\n\
    \        }\n    }\n\n    if ($intersectionStart <= $intersectionEnd) {\n     \
    \   return \"YES\";\n    }\n\n    return \"NO\";\n}\n", "    $interval1Start =\
    \ $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n\
    \    $interval2End = $interval2[1];\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \    if ($intersectionStart > $intersectionEnd) {\n        return \"NO\";\n  \
    \  }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n    if\
    \ ($intersectionLength > 1) {\n        return \"NO\";\n    }\n    $isPrime = true;\n\
    \    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            if ($intersectionStart % $i == 0) {\n                $isPrime\
    \ = false;\n                break;\n            }\n        }\n    }\n    if ($isPrime)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1[0] = $interval1[0] < $interval2[0] ? $interval1[0] : $interval2[0];\n\
    \    $interval1[1] = $interval1[1] > $interval2[1] ? $interval1[1] : $interval2[1];\n\
    \    $interval2[0] = $interval2[0] < $interval1[0] ? $interval2[0] : $interval1[0];\n\
    \    $interval2[1] = $interval2[1] > $interval1[1] ? $interval2[1] : $interval1[1];\n\
    \    $intersection = range($interval1[0], $interval1[1], 1);\n    foreach ($interval2\
    \ as $key => $value) {\n        if ($value >= $interval1[0] && $value <= $interval1[1])\
    \ {\n            $intersection[] = $value;\n        }\n    }\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return \"NO\";\n    }\n    if (count($intersection) == 2) {\n        return\
    \ \"YES\";\n    }\n    $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    if (count($intersection) == 1) {\n        return \"NO\";\n    }\n\
    \    $intersection = array_slice($intersection, count($intersection) - 1);\n \
    \   if (count($intersection) == 1) {\n        return \"YES\";\n    }\n    $intersection\
    \ = array_slice($intersection, count($intersection) - 1);\n    if (count($intersection)\
    \ == 1) {\n        return \"YES\";\n    }\n    $intersection = array_slice($intersection,\
    \ count($intersection) - 1);\n    if (count($intersection) == 1) {\n        return\
    \ \"YES\";\n    }\n    $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    if (count($intersection) == 1) {\n        return \"YES\";\n    }\n\
    \    $intersection = array_slice($intersection, count($intersection) - 1);\n \
    \   if (count($intersection) == 1) {\n        return \"YES\";\n    }\n    $intersection\
    \ = array_slice($intersection, count($intersection) - 1);\n    if (count($intersection)\
    \ == 1) {\n        return \"YES\";\n    }\n    $intersection = array_slice($intersection,\
    \ count($intersection) - 1);\n    if (count($intersection) == 1) {\n        return\
    \ \"YES\";\n    }\n    $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    if (count($intersection) == 1) {\n        return \"YES\";\n    }\n\
    \    $intersection = array_slice($intersection, count($intersection) - 1);\n \
    \   if (count($intersection) == 1) {\n        return \"YES\";\n    }\n    $intersection\
    \ = array_slice($intersection, count($intersection) - 1);\n    if (count($intersection)\
    \ == 1) {\n        return \"YES\";\n    }\n    $intersection = array_slice($intersection",
  "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart > $intersectionEnd) {\n        return\
    \ \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength % 2 != 0) {\n        return \"NO\";\n    }\n    $isPrime\
    \ = true;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($intersectionStart % $i == 0) {\n             \
    \   $isPrime = false;\n                break;\n            }\n        }\n    }\n\
    \    if ($isPrime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2\
    \ = array_slice($interval2, 0, -1);\n    $interval1 = array_merge($interval1,\
    \ $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $interval1 = array_flip($interval1);\n    $interval2 = array_flip($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_flip($intersection);\n    $intersection = array_keys($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_unique($",
  "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 0) return \"NO\";\n    if ($intersectionLength\
    \ == 1) return \"YES\";\n    if ($intersectionLength == 2 && $interval1Start <=\
    \ $interval2Start && $interval1End >= $interval2End) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start <= $interval2Start && $interval1End <= $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start >= $interval2Start\
    \ && $interval1End >= $interval2End) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start >= $interval2Start && $interval1End <= $interval2End)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start <= $interval2Start && $interval1End <= $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start >= $interval2Start\
    \ && $interval1End >= $interval2End) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start >= $interval2Start && $interval1End <= $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start >= $interval2Start && $interval1End <= $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start >= $interval2Start && $interval1End <= $interval2End)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start >= $interval2Start && $interval1End <= $interval", " \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map('intval', $intersection);\n    $intersection = array_filter($intersection",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[0], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[0], $interval2[1]]);\n \
    \   $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return 'NO';\n    }\n    $intersection\
    \ = array_slice($intersection, 0, -1);\n    $intersection = array_map(function($v){return\
    \ $v + 1;}, $intersection);\n    $intersection = array_map(function($v){return\
    \ $v - 1;}, $intersection);\n    $intersection = array_map(function($v){return\
    \ $v * $v;}, $intersection);\n    $intersection = array_sum($intersection);\n\
    \    if ($intersection == 1) {\n        return 'YES';\n    }\n    return 'NO';\n\
    }\n", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart >= $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionStart <= $interval1End\
    \ && $intersectionEnd <= $interval2Start) {\n        return \"YES\";\n    }\n\
    \    if ($intersectionStart <= $interval1Start && $intersectionEnd >= $interval2End)\
    \ {\n        return \"YES\";\n    }\n    if ($intersectionStart >= $interval1Start\
    \ && $intersectionEnd <= $interval2End) {\n        return \"YES\";\n    }\n  \
    \  if ($intersectionStart <= $interval1Start && $intersectionEnd >= $interval2Start)\
    \ {\n        return \"YES\";\n    }\n    if ($intersectionStart >= $interval1End\
    \ && $intersectionEnd <= $interval2End) {\n        return \"YES\";\n    }\n  \
    \  if ($intersectionStart <= $interval1End && $intersectionEnd >= $interval2Start)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 =\
    \ $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End > $interval2End) {\n\
    \        $interval1 = $interval1[1];\n        $interval2 = $interval2[0];\n  \
    \      $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[1];\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        $interval1 = $interval1[1];\n        $interval2 = $interval2[1];\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[0];\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        $interval1 = $interval1[1];\n        $interval2 = $interval2[1];\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[0];\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        $interval1 = $interval1[1];\n        $interval2 = $interval2[1];\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[0];\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        $interval1 = $interval1[1];\n        $interval2 = $interval2[1];\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[0];\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_unique($intersection);\n    if (count($intersection)\
    \ > 1) {\n        return 'NO';\n    } else {\n        return 'YES';\n    }\n}\n",
  "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1 = $interval1[1];\n        $interval2\
    \ = $interval2[0];\n    }\n    if ($interval1End < $interval2End) {\n        $interval1\
    \ = $interval1[0];\n        $interval2 = $interval2[1];\n    }\n    $intersectionStart\
    \ = $interval1;\n    $intersectionEnd = $interval2;\n    $intersectionLength =\
    \ 0;\n    while ($intersectionStart <= $intersectionEnd) {\n        $intersectionLength++;\n\
    \        $intersectionStart++;\n    }\n    if ($intersectionLength > 1) {\n  \
    \      $intersectionLength = 2;\n    }\n    if ($intersectionLength == 2) {\n\
    \        if ($interval1End % $interval2End != 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    if ($intersectionLength > 2) {\n        return \"NO\"\
    ;\n    }\n    if ($intersectionLength == 1) {\n        if ($interval1End % $interval2End\
    \ == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n\
    }", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart;\n    if ($intersectionLength == 0) return \"NO\";\n  \
    \  if ($intersectionLength == 1) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End < $interval2End) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start > $interval2Start && $interval1End >= $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start > $interval2Start\
    \ && $interval1End < $interval2End) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start <= $interval2Start && $interval1End > $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start > $interval2Start\
    \ && $interval1End > $interval2End) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start <= $interval2Start && $interval1End <= $interval2End)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $interval1Start > $interval2Start\
    \ && $interval1End <= $interval2End) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start > $interval2Start && $interval1End > $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start > $interval2Start && $interval1End >= $interval2End)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End < $interval2End) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $interval1Start > $interval2Start && $interval1End < $interval2End)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End > $interval", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n\n    $interval1Length = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n\n    if ($interval1Length\
    \ > $interval2Length) {\n        $interval1Start = $interval1Start + $interval1Length;\n\
    \        $interval1End = $interval1End + $interval1Length;\n    }\n\n    if ($interval2Length\
    \ > $interval1Length) {\n        $interval2Start = $interval2Start + $interval2Length;\n\
    \        $interval2End = $interval2End + $interval2Length;\n    }\n\n    if ($interval1Start\
    \ >= $interval2Start && $interval1End <= $interval2End) {\n        return \"NO\"\
    ;\n    }\n\n    if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n        return \"NO\";\n    }\n\n    if ($interval1Start >= $interval2Start\
    \ && $interval1End <= $interval2End) {\n        return \"NO\";\n    }\n\n    if\
    \ ($interval1Start <= $interval2Start && $interval1End >= $interval2End) {\n \
    \       return \"NO\";\n    }\n\n    if ($interval1Start >= $interval2Start &&\
    \ $interval1End <= $interval2End) {\n        return \"NO\";\n    }\n\n    if ($interval1Start\
    \ <= $interval2Start && $interval1End >= $interval2End) {\n        return \"NO\"\
    ;\n    }\n\n    if ($interval1Start >= $interval2Start && $interval1End <= $interval2End)\
    \ {\n        return \"NO\";\n    }\n\n    if ($interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) {\n        return \"NO\";\n    }\n\n    if\
    \ ($interval1Start >= $interval2Start && $interval1End <= $interval2End) {\n \
    \       return \"NO\";\n    }\n\n    if ($interval1Start <= $interval2Start &&\
    \ $interval1End >= $interval2End) {\n        return \"NO\";\n    }\n\n    if ($interval1Start\
    \ >= $interval2Start && $interval1End <= $interval2End) {\n        return \"NO\"\
    ;\n    }\n\n    if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n        return \"NO\";\n    }\n\n    if ($interval1Start >= $interval2Start\
    \ && $interval1End <= $interval2End) {\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_slice($interval1, 0, 1);\n    $interval2 = array_slice($interval2, 0,\
    \ 1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1 =\
    \ array_unique($interval1);\n    $interval2 = array_unique($interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 1) {\n        return $intersection[0];\n    }\n    return count($intersection)\
    \ == 0;\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n\
    \    if ($interval1Start > $interval2Start) {\n        $interval1Start = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \n    if ($interval1Start <= $interval2End) {\n        $intersectionEnd = $interval2End;\n\
    \    }\n\n    if ($interval1End >= $interval2Start) {\n        $intersectionStart\
    \ = $interval2Start;\n    }\n\n    if ($intersectionStart <= $intersectionEnd)\
    \ {\n        $intersectionLength = $intersectionEnd - $intersectionStart;\n  \
    \      if ($intersectionLength % 2 != 0) {\n            $intersectionLength =\
    \ $intersectionLength + 1;\n        }\n        if ($intersectionLength == 2 ||\
    \ $intersectionLength == 3) {\n            return \"YES\";\n        }\n    }\n\
    \    return \"NO\";\n}\n", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[1], $interval1[1]]);\n    $interval2 = array_merge($interval2, [$interval2[1],\
    \ $interval2[1]]);\n    $interval1 = array_flip($interval1);\n    $interval2 =\
    \ array_flip($interval2);\n    $intersect = array_intersect($interval1, $interval2);\n\
    \    if (count($intersect) === 2) {\n        if ($intersect[0] >= $intersect[1])\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }\n}\n", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End > $interval2End) {\n\
    \        $interval1 = $interval1[1];\n        $interval2 = $interval2[0];\n  \
    \  }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[1];\n    }\n    $intersection = $interval1 &\
    \ $interval2;\n    if ($intersection == 0) {\n        return \"NO\";\n    }\n\
    \    if ($intersection == 1) {\n        return \"YES\";\n    }\n    $lengthOfIntersection\
    \ = strlen($intersection);\n    if ($lengthOfIntersection == 2) {\n        return\
    \ \"YES\";\n    }\n    if ($lengthOfIntersection % 2 == 0) {\n        return \"\
    NO\";\n    }\n    $lengthOfIntersection = $lengthOfIntersection / 2;\n    $isPrime\
    \ = true;\n    for ($i = 2; $i <= $lengthOfIntersection; $i++) {\n        if ($intersection\
    \ % $i == 0) {\n            $isPrime = false;\n            break;\n        }\n\
    \    }\n    if ($isPrime) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1Length = count($interval1);\n    $interval2Length\
    \ = count($interval2);\n    $intersectionLength = array_sum(array_map(function($interval)\
    \ {\n        return $interval[1] - $interval[0];\n    }, $interval1, $interval2));\n\
    \    if ($intersectionLength == 0) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ == $interval1Length) {\n        return \"YES\";\n    }\n    $prime = true;\n\
    \    for ($i = 0; $i < $intersectionLength; $i++) {\n        if ($interval1[$i]\
    \ > $interval2[$i]) {\n            $prime = false;\n            break;\n     \
    \   }\n    }\n    if ($prime) {\n        return \"YES\";\n    }\n    return \"\
    NO\";\n}", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    $intersectionStart\
    \ = $interval1End < $interval2End ? $interval1End : $interval2End;\n    $intersectionEnd\
    \ = $interval1End < $interval2End ? $interval2End : $interval1End;\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart;\n    if ($intersectionLength == 2)\
    \ {\n        if ($interval1End > $interval2End) {\n            $interval1End =\
    \ $interval2End;\n        }\n        if ($interval1Start < $interval2Start) {\n\
    \            $interval1Start = $interval2Start;\n        }\n        if ($interval1Start\
    \ > $interval2Start) {\n            $interval1Start = $interval2Start;\n     \
    \   }\n        if ($interval1End < $interval2End) {\n            $interval1End\
    \ = $interval2End;\n        }\n        if ($interval1Start > $interval2Start)\
    \ {\n            $interval1Start = $interval2Start;\n        }\n        if ($interval1End\
    \ > $interval2End) {\n            $interval1End = $interval2End;\n        }\n\
    \        if ($interval1Start < $interval2Start) {\n            $interval1Start\
    \ = $interval2Start;\n        }\n        if ($interval1End < $interval2End) {\n\
    \            $interval1End = $interval2End;\n        }\n        if ($interval1Start\
    \ > $interval2Start) {\n            $interval1Start = $interval2Start;\n     \
    \   }\n        if ($interval1End > $interval2End) {\n            $interval1End\
    \ = $interval2End;\n        }\n        if ($interval1Start < $interval2Start)\
    \ {\n            $interval1Start = $interval2Start;\n        }\n        if ($interval1End\
    \ < $interval2End) {\n            $interval1End = $interval2End;\n        }\n\
    \        if ($interval1Start > $interval2Start) {\n            $interval1Start\
    \ = $interval2Start;\n        }\n        if ($interval1End > $interval2End) {\n\
    \            $interval1End = $interval2End;\n        }\n        if ($interval1Start\
    \ < $interval2Start) {\n            $interval1Start = $interval2Start;\n     \
    \   }\n        if ($interval1End < $interval2End) {\n            $interval1End\
    \ = $interval2End;\n        }\n        if ($interval1Start > $interval2Start)\
    \ {\n            $interval1Start = $interval2Start;\n        }\n        if ($interval1End ",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = count($intersection);\n    if ($length == 1) {\n        return \"YES\";\n\
    \    }\n    if ($length == 2) {\n        if ($intersection[0] >= $intersection[1])\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   $prime = true;\n    for ($i = 3; $i <= $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            $prime = false;\n            break;\n        }\n \
    \   }\n    if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"YES\";\n  \
    \  }\n    if ($length == 2) {\n        if ($intersection[0] >= $intersection[1])\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   $prime = true;\n    for ($i = 0; $i < $length; $i++) {\n        if ($intersection[$i]\
    \ % 2 == 0) {\n            $prime = false;\n            break;\n        }\n  \
    \  }\n    if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
  "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart >= $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength % 2 != 0) {\n        return \"NO\";\n    }\n    $isPrime\
    \ = true;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($intersectionStart + $i > $intersectionEnd) {\n\
    \                $isPrime = false;\n                break;\n            }\n  \
    \          if ($intersectionStart + $i == $intersectionEnd) {\n              \
    \  $isPrime = false;\n                break;\n            }\n            if ($intersectionStart\
    \ + $i != $intersectionEnd && $intersectionStart + $i % 2 != 0) {\n          \
    \      $isPrime = false;\n                break;\n            }\n        }\n \
    \   }\n    if ($isPrime) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\n", "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    if($interval1Length==$interval2Length)\
    \ {\n        if($interval1Start<$interval2Start) {\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1Start<$interval2End) {\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1End>$interval2End) {\n            $interval1End=$interval1End-$interval1Length;\n\
    \            $interval1Start=$interval1Start-$interval1Length;\n        }\n  \
    \      if($interval1End>$interval2End) {\n            $interval1End=$interval1End-$interval1Length;\n\
    \            $interval1Start=$interval1Start-$interval1Length;\n        }\n  \
    \      if($interval1Start==$interval1End) {\n            if($interval1Start<$interval2Start)\
    \ {\n                $interval1Start=$interval1Start+$interval1Length;\n     \
    \           $interval1End=$interval1End+$interval1Length;\n            }\n   \
    \         if($interval1Start<$interval2End) {\n                $interval1Start=$interval1Start+$interval1Length;\n\
    \                $interval1End=$interval1End+$interval1Length;\n            }\n\
    \            if($interval1End>$interval2End) {\n                $interval1End=$interval1End-$interval1Length;\n\
    \                $interval1Start=$interval1Start-$interval1Length;\n         \
    \   }\n            if($interval1End>$interval2End) {\n                $interval1End=$interval1End-$interval1Length;\n\
    \                $interval1Start=$interval1Start-$interval1Length;\n         \
    \   }\n            if($interval1Start==$interval1End) {\n                if($interval1Start<$interval2Start)\
    \ {\n                    $interval1Start=$interval1Start+$interval1Length;\n \
    \                   $interval1End=$interval1End+$interval1Length;\n          \
    \      }\n                if($interval1Start<$interval2End) {\n", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_unique($intersection);\n    if (count($intersection)\
    \ == 1) {\n        return $intersection[0];\n    }\n    return count($intersection)\
    \ == 0 ? \"NO\" : \"YES\";\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    $interval1Length = $interval1End - $interval1Start;\n  \
    \  $interval2Length = $interval2End - $interval2Start;\n    $intersectionLength\
    \ = $interval1Length + $interval2Length;\n    if ($intersectionLength == 0) {\n\
    \        return \"NO\";\n    }\n    if ($intersectionLength == 1) {\n        return\
    \ \"YES\";\n    }\n    if ($interval1Start <= $interval2Start && $interval1End\
    \ >= $interval2End) {\n        return \"YES\";\n    }\n    if ($interval1Start\
    \ >= $interval2Start && $interval1End <= $interval2End) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1Start >= $interval2Start\
    \ && $interval1End <= $interval2End) {\n        return \"NO\";\n    }\n    if\
    \ ($interval1Start <= $interval2Start && $interval1End >= $interval2End) {\n \
    \       return \"NO\";\n    }\n    if ($interval1Start >= $interval2Start && $interval1End\
    \ <= $interval2End) {\n        return \"NO\";\n    }\n    if ($interval1Start\
    \ <= $interval2Start && $interval1End >= $interval2End) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1Start >= $interval2Start && $interval1End <= $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) {\n        return \"NO\";\n    }\n    if\
    \ ($interval1Start >= $interval2Start && $interval1End <= $interval2End) {\n \
    \       return \"NO\";\n    }\n    if ($interval1Start <= $interval2Start && $interval1End\
    \ >= $interval2End) {\n        return \"NO\";\n    }\n    if ($interval1Start\
    \ >= $interval2Start && $interval1End <= $interval2End) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1Start >= $interval2Start\
    \ && $interval1End <= $interval2End) {\n        return \"NO\";\n    }\n    if\
    \ ($interval1Start <= $interval2Start && $interval1End ", "    $interval1 = array_map(function($v){return\
    \ $v[0];}, $interval1);\n    $interval2 = array_map(function($v){return $v[0];},\
    \ $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersect = array_intersect($interval1, $interval2);\n    if (count($intersect)\
    \ == 0) {\n        return \"NO\";\n    }\n    $prime = array_filter(range(1, count($intersect)),\
    \ function($v){return $v % 2 === 0;});\n    if (count($prime) == 0) {\n      \
    \  return \"NO\";\n    }\n    return count($intersect) == count($prime) ? \"YES\"\
    \ : \"NO\";\n}", "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    $intersectionLength=$interval1Length-$interval2Length;\n\
    \    if($intersectionLength==0){\n        return \"NO\";\n    }\n    if($intersectionLength==1){\n\
    \        return \"YES\";\n    }\n    if($intersectionLength==2){\n        if($interval1Start<$interval2Start){\n\
    \            return \"YES\";\n        }else{\n            return \"NO\";\n   \
    \     }\n    }\n    if($intersectionLength==3){\n        if($interval1Start<$interval2Start){\n\
    \            if($interval1End<$interval2End){\n                if($interval1Start<$interval2Start){\n\
    \                    return \"YES\";\n                }else{\n               \
    \     return \"NO\";\n                }\n            }else{\n                return\
    \ \"NO\";\n            }\n        }else{\n            return \"NO\";\n       \
    \ }\n    }\n    if($intersectionLength==4){\n        if($interval1Start<$interval2Start){\n\
    \            if($interval1End<$interval2End){\n                if($interval1Start<$interval2Start){\n\
    \                    if($interval1End<$interval2End){\n                      \
    \  if($interval1Start<$interval2Start){\n                            if($interval1End<$interval2End){\n\
    \                                if($interval1Start<$interval2Start){\n      \
    \                              if($interval1End<$interval2End){\n            \
    \                            if($interval1Start<$interval2Start){\n          \
    \                                  if($interval1End<$interval2End){\n        \
    \                                        return \"YES\";\n                   \
    \                         }else{\n                                           \
    \     return \"NO\";\n                                            }\n        \
    \                                }else{\n                                    \
    \        return \"NO\";\n                                        }\n         \
    \                           }else{\n                                        return\
    \ \"NO\";\n                                    }\n                           \
    \     }else{\n                                    return \"NO\";\n           \
    \                     }\n                            }else{\n                \
    \                return \"NO\";\n                            }\n             \
    \           }else{\n                            return \"NO\";\n             \
    \           }\n                    }else{\n                        return \"NO\"\
    ;\n                    }\n                }else{\n                    return \"\
    NO\";\n                }\n            }else{\n                return \"NO\";\n\
    \            }\n        }else{\n            return \"NO\";\n        }\n    }\n\
    \    if($intersectionLength==5){\n        if($interval1Start<$interval2Start){\n\
    \            if($interval1End<$interval2En", "    $interval1Start=$interval1[0];\n\
    \    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n\
    \    if($interval1Start>$interval1End){\n        $interval1Start=$interval1End;\n\
    \    }\n    if($interval2Start>$interval2End){\n        $interval2Start=$interval2End;\n\
    \    }\n    if($interval1Start<$interval2Start){\n        $interval1Start=$interval2Start;\n\
    \    }\n    if($interval1End<$interval2End){\n        $interval1End=$interval2End;\n\
    \    }\n    if($interval1Start>$interval2End){\n        $interval1End=$interval2Start;\n\
    \    }\n    if($interval1Start==$interval1End){\n        if($interval2Start==$interval2End){\n\
    \            return \"YES\";\n        }\n        else{\n            return \"\
    NO\";\n        }\n    }\n    else{\n        $interval1Length=$interval1End-$interval1Start+1;\n\
    \        $interval2Length=$interval2End-$interval2Start+1;\n        if($interval1Length>$interval2Length){\n\
    \            $interval1Length=$interval2Length;\n        }\n        if($interval1Length==0){\n\
    \            return \"NO\";\n        }\n        else{\n            $interval1Length=$interval1Length-1;\n\
    \            $interval2Length=$interval2Length-1;\n            $interval1Start=$interval1Start+1;\n\
    \            $interval2Start=$interval2Start+1;\n            $interval1End=$interval1End-1;\n\
    \            $interval2End=$interval2End-1;\n            if($interval1Length==$interval2Length){\n\
    \                if($interval1Start==$interval2Start){\n                    if($interval1End==$interval2End){\n\
    \                        if($interval1Start<$interval2Start){\n              \
    \              $interval1Start=$interval2Start;\n                        }\n \
    \                       if($interval1End<$interval2End){\n                   \
    \         $interval1End=$interval2End;\n                        }\n          \
    \              if($interval1Start==$interval1End){\n                         \
    \   if($interval2Start==$interval2End){\n                                return\
    \ \"YES\";\n                            }\n                            else{\n\
    \                                return \"NO\";\n                            }\n\
    \                        }\n                        else{\n                  \
    \          $interval1Start=$interval1Start+1;\n                            $interval1End=$interval1End-1;\n\
    \                            $interval2Start=$interval2Start", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n \
    \   }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \n    while ($intersectionStart <= $intersectionEnd) {\n        if ($interval1Start\
    \ <= $intersectionStart && $intersectionStart <= $interval1End) {\n          \
    \  $intersectionStart++;\n        }\n        if ($intersectionEnd <= $interval2Start\
    \ && $intersectionEnd <= $interval2End) {\n            $intersectionEnd++;\n \
    \       }\n    }\n\n    if ($intersectionStart > $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n\n    if ($intersectionStart <= $interval1Start && $intersectionStart\
    \ <= $interval1End) {\n        return \"YES\";\n    }\n\n    if ($intersectionEnd\
    \ <= $interval2Start && $intersectionEnd <= $interval2End) {\n        return \"\
    YES\";\n    }\n\n    return \"NO\";\n}\n", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    if ($interval1Start > $interval1End) {\n\
    \        $interval1Start = $interval1End;\n    }\n    if ($interval2Start > $interval2End)\
    \ {\n        $interval2Start = $interval2End;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1End = $interval1Start;\n    }\n    if\
    \ ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval2Start;\n    }\n    if ($interval1Start > $interval2Start) {\n  \
    \      $interval1End = $interval2End;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1End = $interval2Start;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1End = $interval2End;\n    }\n    if\
    \ ($interval1Start > $interval2Start) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1End =\
    \ $interval2End;\n    }\n    if ($interval1Start > $interval2Start) {\n      \
    \  $interval1End = $interval2Start;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1End = $interval2End;\n    }\n    if ($interval1Start >\
    \ $interval2Start) {\n        $interval1End = $interval2Start;\n    }\n    if\
    \ ($interval1Start > $interval2Start) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1End =\
    \ $interval2Start;\n    }\n    if ($interval1Start > $interval2Start) {\n    \
    \    $interval1End = $interval2End;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1End = $interval2Start;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1End = $interval2End;\n    }\n    if\
    \ ($interval1Start > $interval2Start) {\n        $interval1End = $interval2Start",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionStart === $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart;\n    if ($intersectionLength === 1) {\n        return\
    \ \"NO\";\n    }\n    $primeNumbers = array();\n    for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $primeNumbers[] = $i;\n  \
    \      }\n    }\n    if (count($primeNumbers) === 1) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\
    This doesn't work for `intersection((-3, -1), (-5, 5))` which returns `\"NO\"\
    ` instead of `\"YES\"`.\n<|/ c |>\n<| c |>\nI tested it on `intersection((-3,\
    \ -1), (-5, 5))` which returns `\"NO\"` instead of `\"YES\"`\n<|/ c |>\n<| c |>\n\
    I tested it on `intersection((-3, -1), (-5, 5))` which returns `\"NO\"` instead\
    \ of `\"YES\"`\n<|/ c |>\n<| c |>\nI tested it on `intersection((-3, -1), (-5,\
    \ 5))` which returns `\"NO\"` instead of `\"YES\"`\n<|/ c |>\n<| c |>\nI tested\
    \ it on `intersection((-3, -1), (-5, 5))` which returns `\"NO\"` instead of `\"\
    YES\"`\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    $interval1Start=$interval1[0];\n\
    \    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n\
    \    $interval1Length=$interval1End-$interval1Start+1;\n    $interval2Length=$interval2End-$interval2Start+1;\n\
    \    $intersectionLength=$interval1Length-$interval2Length;\n    if($intersectionLength==0)\
    \ {\n        return \"NO\";\n    }\n    if($intersectionLength==1) {\n       \
    \ return \"YES\";\n    }\n    if($intersectionLength==2) {\n        if($interval1Start<$interval2Start)\
    \ {\n            return \"YES\";\n        }\n        else {\n            return\
    \ \"NO\";\n        }\n    }\n    if($intersectionLength==3) {\n        if($interval1Start<$interval2Start)\
    \ {\n            if($interval1End<$interval2End) {\n                if($interval1Start<$interval2Start)\
    \ {\n                    return \"YES\";\n                }\n                else\
    \ {\n                    return \"NO\";\n                }\n            }\n  \
    \          else {\n                return \"NO\";\n            }\n        }\n\
    \        else {\n            if($interval1End<$interval2End) {\n             \
    \   if($interval1Start<$interval2Start) {\n                    return \"NO\";\n\
    \                }\n                else {\n                    return \"YES\"\
    ;\n                }\n            }\n            else {\n                return\
    \ \"NO\";\n            }\n        }\n    }\n    if($intersectionLength==4) {\n\
    \        if($interval1Start<$interval2Start) {\n            if($interval1End<$interval2End)\
    \ {\n                if($interval1Start<$interval2Start) {\n                 \
    \   if($interval1End<$interval2End) {\n                        if($interval1Start<$interval2Start)\
    \ {\n                            if($interval1End<$interval2End) {\n         \
    \                       return \"YES\";\n                            }\n     \
    \                       else {\n                                return \"NO\"\
    ;\n                            }\n                        }\n                \
    \        else {\n                            return \"NO\";\n                \
    \        }\n                    }\n                    else {\n              \
    \          return \"NO\";\n                    }\n                }\n        \
    \        else {\n                    return \"NO\";\n                }\n     \
    \       }\n            else {\n                return \"NO\";\n            }\n\
    \        }\n        else {\n            if($interval1End<$interval2End) {\n  \
    \              if($interval1Start<$interval2Start) {\n                    if($interval1End<$interval2End)\
    \ {\n                        if($interval1Start<$interval2Start) {\n         \
    \                   if($interval1End<$interval2End) {\n                      \
    \          if($interval1Start<$interval2Start) {\n                           \
    \         if($interval1End<$interval2End", "    $interval1Start=$interval1[0];\n\
    \    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n\
    \    $interval1Length=$interval1End-$interval1Start;\n    $interval2Length=$interval2End-$interval2Start;\n\
    \    if($interval1Length==$interval2Length){\n        if($interval1Start<=$interval2Start){\n\
    \            $interval1Start=$interval1Start+$interval1Length;\n            $interval1End=$interval1End+$interval1Length;\n\
    \        }\n        if($interval1Start<=$interval2End){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1End>=$interval2End){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1Start>=$interval2Start){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1Start>=$interval2End){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1Start<=$interval2Start){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1Start<=$interval2End){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1End>=$interval2End){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1End>=$interval2Start){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }\n      \
    \  if($interval1End<=$interval2End){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n\n    if ($interval1Start > $interval2Start) {\n        $interval1\
    \ = array_reverse($interval1);\n        $interval2 = array_reverse($interval2);\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        $interval1 = array_reverse($interval1);\n\
    \        $interval2 = array_reverse($interval2);\n    }\n\n    if ($interval1End\
    \ < $interval2Start) {\n        $interval1 = array_reverse($interval1);\n    \
    \    $interval2 = array_reverse($interval2);\n    }\n\n    if ($interval1End <\
    \ $interval2End) {\n        $interval1 = array_reverse($interval1);\n        $interval2\
    \ = array_reverse($interval2);\n    }\n\n    $intersectionLength = 0;\n    $intersectionLength\
    \ += $interval1End - $interval1Start;\n    $intersectionLength += $interval2End\
    \ - $interval2Start;\n\n    if ($intersectionLength > 0) {\n        if ($interval1Start\
    \ <= $interval2Start && $interval1End >= $interval2End) {\n            return\
    \ \"YES\";\n        }\n        if ($interval1Start <= $interval2End && $interval1End\
    \ >= $interval2Start) {\n            return \"YES\";\n        }\n        if ($interval1Start\
    \ <= $interval2Start && $interval1End <= $interval2End) {\n            return\
    \ \"YES\";\n        }\n        if ($interval1Start >= $interval2Start && $interval1End\
    \ <= $interval2End) {\n            return \"YES\";\n        }\n        if ($interval1Start\
    \ >= $interval2Start && $interval1End >= $interval2End) {\n            return\
    \ \"YES\";\n        }\n    }\n\n    return \"NO\";\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    if ($interval1Start\
    \ > $interval2End) {\n        $interval1End = $interval1Start;\n    }\n    if\
    \ ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval1Start;\n    }\n    if ($interval2Start > $interval1End) {\n    \
    \    $interval2Start = $interval2Start;\n    }\n    $intersectionLength = $interval1End\
    \ - $interval1Start;\n    if ($intersectionLength == 0) {\n        return \"NO\"\
    ;\n    }\n    $interval1Length = $interval2End - $interval2Start;\n    if ($interval1Length\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersectionLength = $intersectionLength\
    \ / $interval1Length;\n    if ($intersectionLength == 1) {\n        return \"\
    YES\";\n    }\n    if ($intersectionLength > 1) {\n        return \"NO\";\n  \
    \  }\n}", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Length\
    \ = $interval1End - $interval1[0];\n    $interval2Length = $interval2End - $interval2[0];\n\
    \    if ($interval1Length > $interval2Length) {\n        $interval1 = array_slice($interval1,\
    \ 0, 1);\n        $interval1End = $interval1[0];\n    }\n    if ($interval2Length\
    \ > $interval1Length) {\n        $interval2 = array_slice($interval2, 0, 1);\n\
    \        $interval2End = $interval2[0];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        $interval1 = array_slice($interval1, 0, 1);\n        $interval1End\
    \ = $interval1[0];\n    }\n    if ($interval2End > $interval1End) {\n        $interval2\
    \ = array_slice($interval2, 0, 1);\n        $interval2End = $interval2[0];\n \
    \   }\n    $intersectionLength = $interval1End - $interval2End;\n    if ($intersectionLength\
    \ > 0) {\n        $prime = true;\n        for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n            if ($interval1End % $i == 0 || $interval2End % $i == 0)\
    \ {\n                $prime = false;\n                break;\n            }\n\
    \        }\n        if ($prime) {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\"\
    ;\n    }\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) > 0) {\n        $intersection = array_slice($intersection,\
    \ 0, -1);\n        if (count($intersection) == 1) {\n            return 'YES';\n\
    \        } else {\n            return 'NO';\n        }\n    } else {\n       \
    \ return 'NO';\n    }\n}", "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start+1;\n\
    \    $interval2Length=$interval2End-$interval2Start+1;\n    $intersectionLength=$interval1Length-$interval2Length;\n\
    \    if($intersectionLength==0){\n        return \"NO\";\n    }\n    if($intersectionLength==1){\n\
    \        return \"YES\";\n    }\n    if($intersectionLength==2){\n        if($interval1Start<$interval2Start){\n\
    \            return \"YES\";\n        }else{\n            return \"NO\";\n   \
    \     }\n    }\n    if($intersectionLength==3){\n        if($interval1Start<$interval2Start){\n\
    \            if($interval1Start<$interval2End){\n                if($interval2Start<$interval2End){\n\
    \                    return \"YES\";\n                }else{\n               \
    \     return \"NO\";\n                }\n            }else{\n                return\
    \ \"NO\";\n            }\n        }else{\n            if($interval1Start<$interval2End){\n\
    \                if($interval2Start<$interval2End){\n                    return\
    \ \"YES\";\n                }else{\n                    return \"NO\";\n     \
    \           }\n            }else{\n                return \"NO\";\n          \
    \  }\n        }\n    }\n    if($intersectionLength==4){\n        if($interval1Start<$interval2Start){\n\
    \            if($interval1Start<$interval2End){\n                if($interval2Start<$interval2End){\n\
    \                    if($interval1End<$interval2End){\n                      \
    \  return \"YES\";\n                    }else{\n                        return\
    \ \"NO\";\n                    }\n                }else{\n                   \
    \ return \"NO\";\n                }\n            }else{\n                return\
    \ \"NO\";\n            }\n        }else{\n            if($interval1Start<$interval2End){\n\
    \                if($interval2Start<$interval2End){\n                    if($interval1End<$interval2End){\n\
    \                        return \"YES\";\n                    }else{\n       \
    \                 return \"NO\";\n                    }\n                }else{\n\
    \                    return \"NO\";\n                }\n            }else{\n \
    \               return \"NO\";\n            }\n        }\n    }\n    if($intersectionLength==5){\n\
    \        if($interval1Start<$interval2Start){\n            if($interval1Start<$interval2End){\n\
    \                if($interval2Start<$interval2End){\n                    if($interval1End<$interval2End){\n\
    \                        if($", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[0], $interval1[1]]);\n    $interval2 = array_merge($interval2, [$interval2[0],\
    \ $interval2[1]]);\n    $interval1 = array_slice($interval1, 0, 1);\n    $interval2\
    \ = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1, 0,\
    \ -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersect = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersect) > 0) {\n        $intersect = array_slice($intersect,\
    \ 0, 1);\n        if (count($intersect) == 1) {\n            return $intersect[0];\n\
    \        }\n    }\n    return \"NO\";\n}\n", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    $intersectionStart = $interval1Start;\n\
    \    $intersectionEnd = $interval1End;\n    \n    if ($interval1Start > $interval1End)\
    \ {\n        $interval1Start = $interval1End;\n        $interval1End = $interval2Start;\n\
    \        $interval2Start = $interval2End;\n        $interval2End = $interval1Start;\n\
    \    }\n    \n    if ($interval2Start > $interval2End) {\n        $interval2Start\
    \ = $interval2End;\n        $interval2End = $interval1Start;\n        $interval1Start\
    \ = $interval1End;\n        $interval1End = $interval2Start;\n    }\n    \n  \
    \  if ($interval1Start > $interval2Start) {\n        $intersectionStart = $interval1Start;\n\
    \        $intersectionEnd = $interval2Start;\n    }\n    \n    if ($interval1End\
    \ < $interval2End) {\n        $intersectionStart = $interval1End;\n        $intersectionEnd\
    \ = $interval2End;\n    }\n    \n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    \n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart;\n    \n    if ($intersectionLength > 1) {\n        for\
    \ ($i = $intersectionStart; $i <= $intersectionEnd; $i++) {\n            if ($i\
    \ % $intersectionLength == 0) {\n                return \"NO\";\n            }\n\
    \        }\n        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", " \
    \   $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n   \
    \ $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n   \
    \ if ($interval1Start > $interval2End) {\n        $interval1Start = $interval1End;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2Start =\
    \ $interval2End;\n    }\n\n    if ($interval1Start > $interval2Start) {\n    \
    \    return $interval1Start > $interval2End ? \"NO\" : \"YES\";\n    }\n\n   \
    \ if ($interval2Start > $interval1Start) {\n        return $interval2Start > $interval1End\
    \ ? \"NO\" : \"YES\";\n    }\n\n    if ($interval1Start === $interval1End && $interval2Start\
    \ === $interval2End) {\n        return \"YES\";\n    }\n\n    if ($interval1Start\
    \ === $interval1End || $interval2Start === $interval2End) {\n        return \"\
    NO\";\n    }\n\n    return $interval1Start < $interval2Start ? \"YES\" : \"NO\"\
    ;\n}\n", "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    $intersectionLength=$interval1End-$interval2Start;\n\
    \    if($interval1Length==$interval2Length){\n        if($intersectionLength==0){\n\
    \            return \"NO\";\n        }else{\n            return \"YES\";\n   \
    \     }\n    }else{\n        if($intersectionLength==0){\n            return \"\
    NO\";\n        }else{\n            return \"NO\";\n        }\n    }\n}", "   \
    \ $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n\n    $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n\n    if ($intersectionStart >= $intersectionEnd) {\n     \
    \   return \"NO\";\n    }\n\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \n    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n\n    $isPrime\
    \ = true;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($intersectionStart % $i == 0) {\n             \
    \   $isPrime = false;\n                break;\n            }\n        } else {\n\
    \            if ($intersectionEnd % $i == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n    }\n\n    if ($isPrime)\
    \ {\n        return \"YES\";\n    }\n\n    return \"NO\";\n}", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    $intersectionStart = $interval1End <\
    \ $interval2End ? $interval1End : $interval2End;\n    $intersectionEnd = $interval1End\
    \ < $interval2End ? $interval2End : $interval1End;\n    $intersectionLength =\
    \ $intersectionEnd - $intersectionStart;\n    if ($intersectionLength === 1) {\n\
    \        return \"NO\";\n    }\n    if ($intersectionLength === 2) {\n       \
    \ return \"YES\";\n    }\n    if ($intersectionLength % 2 === 0) {\n        return\
    \ \"NO\";\n    }\n    $primeNumbers = array();\n    for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $primeNumbers[] = $i;\n  \
    \      }\n    }\n    if (count($primeNumbers) === 0) {\n        return \"NO\"\
    ;\n    }\n    $primeNumbers = array_reverse($primeNumbers);\n    $primeNumbers\
    \ = array_slice($primeNumbers, 0, count($primeNumbers) - 1);\n    $intersectionLength2\
    \ = $intersectionEnd - $intersectionStart;\n    $intersectionLength2 = $intersectionLength2\
    \ % $intersectionLength;\n    if ($intersectionLength2 === 0) {\n        return\
    \ \"NO\";\n    }\n    $primeNumbers2 = array();\n    for ($i = 2; $i <= $intersectionLength2;\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $primeNumbers2[] = $i;\n \
    \       }\n    }\n    if (count($primeNumbers2) === 0) {\n        return \"NO\"\
    ;\n    }\n    $primeNumbers2 = array_reverse($primeNumbers2);\n    $primeNumbers2\
    \ = array_slice($primeNumbers2, 0, count($primeNumbers2) - 1);\n    $intersectionLength3\
    \ = $intersectionLength2 - $intersectionLength;\n    $intersectionLength3 = $intersectionLength3\
    \ % $intersectionLength2;\n    if ($intersectionLength3 === 0) {\n        return\
    \ \"NO\";\n    }\n    $primeNumbers3 = array();\n    for ($i = 2; $i <= $intersectionLength3;\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $primeNumbers3[] = $i;\n \
    \       }\n    }\n    if (count($primeNumbers3) === 0) {\n        return \"NO\"\
    ;\n    }\n    $primeNumbers3 = array_reverse($primeNumbers3);\n    $primeNumbers3\
    \ = array_slice($primeNumbers3, 0, count($primeNumbers3) - 1);\n    $intersectionLength4\
    \ = $intersectionLength3 - $intersectionLength2;\n    $intersectionLength4 = $intersectionLength4\
    \ % $intersectionLength3;\n    if ($intersectionLength4 === 0) {\n        return\
    \ \"NO\";\n    }\n    $primeNumbers4 = array();", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_map(function ($interval) {\n        return $interval[0];\n    }, $interval1);\n\
    \    $interval2 = array_map(function ($interval) {\n        return $interval[0];\n\
    \    }, $interval2);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_map(function ($interval) {\n        return $interval[0];\n    }, $intersection);\n\
    \    $intersection = array_unique($intersection);\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    $prime = true;\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($intersection[$i] % $length\
    \ == 0) {\n            $prime = false;\n            break;\n        }\n    }\n\
    \    if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[0], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[0], $interval2[1]]);\n \
    \   $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return 'NO';\n    }\n    $intersection\
    \ = array_slice($intersection, 0, -1);\n    if (count($intersection) == 1) {\n\
    \        return 'YES';\n    }\n    $prime = true;\n    foreach ($intersection\
    \ as $num) {\n        if ($num % 2 != 0) {\n            $prime = false;\n    \
    \    }\n    }\n    if ($prime) {\n        return 'YES';\n    }\n    return 'NO';\n\
    }", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart;\n    if ($intersectionLength == 0) return \"NO\";\n  \
    \  if ($intersectionLength == 1) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart >= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart >= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart >= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart >= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart >= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart >= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart >= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd) return \"NO\";", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End < $interval2End) {\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1End == $interval2End) {\n\
    \        return \"YES\";\n    }\n    $interval1Start = $interval1[0];\n    $interval2Start\
    \ = $interval2[0];\n    if ($interval1Start < $interval2Start) {\n        $interval1Start\
    \ = $interval1[0];\n        $interval2Start = $interval2[0];\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval1[0];\n        $interval2Start\
    \ = $interval2[0];\n    }\n    if ($interval1Start > $interval2Start) {\n    \
    \    return \"NO\";\n    }\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1End < $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        return\
    \ \"NO\";\n    }\n    $interval1Start = $interval1[0];\n    $interval2Start =\
    \ $interval2[0];\n    if ($interval1Start < $interval2Start) {\n        $interval1Start\
    \ = $interval1[0];\n        $interval2Start = $interval2[0];\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval1[0];\n        $interval2Start\
    \ = $interval2[0];\n    }\n    if ($interval1Start > $interval2Start) {\n    \
    \    return \"NO\";\n    }\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1End < $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[1], $interval1[1]]);\n    $interval2 = array_merge($interval2, [$interval2[1],\
    \ $interval2[1]]);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 2) {\n        if ($intersection[0] >= $intersection[1])\
    \ {\n            return \"NO\";\n        } else {\n            return \"YES\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }\n}", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    if ($interval1 == $interval2)\
    \ {\n        return \"NO\";\n    }\n    $interval1 = $interval1[1];\n    $interval2\
    \ = $interval2[1];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[1];\n    $interval2\
    \ = $interval2[1];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[1];\n    $interval2\
    \ = $interval2[1];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[1];\n    $interval2\
    \ = $interval2[1];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO\";\n    }\n    $interval1 = $interval1[1];\n    $interval2\
    \ = $interval2[1];\n    if ($interval1 > $interval2) {\n        $interval1 = $interval2;\n\
    \        $interval2 = $interval1;\n    }\n    if ($interval1 == $interval2) {\n\
    \        return \"NO", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n    $intersectionLength\
    \ = abs($intersectionEnd - $intersectionStart);\n    if ($intersectionLength ==\
    \ 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength > 1) {\n  \
    \      return \"YES\";\n    }\n}\n", "    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    $interval1Start = $interval1[0];\n    $interval2Start = $interval2[0];\n\
    \    $interval1End2 = $interval1End;\n    $interval2End2 = $interval2End;\n  \
    \  $interval1Start2 = $interval1Start;\n    $interval2Start2 = $interval2Start;\n\
    \    $interval1End3 = $interval1End2;\n    $interval2End3 = $interval2End2;\n\
    \    $interval1Start3 = $interval1Start2;\n    $interval2Start3 = $interval2Start2;\n\
    \    $interval1End4 = $interval1End3;\n    $interval2End4 = $interval2End3;\n\
    \    $interval1Start4 = $interval1Start3;\n    $interval2Start4 = $interval2Start3;\n\
    \    $interval1End5 = $interval1End4;\n    $interval2End5 = $interval2End4;\n\
    \    $interval1Start5 = $interval1Start4;\n    $interval2Start5 = $interval2Start4;\n\
    \    $interval1End6 = $interval1End5;\n    $interval2End6 = $interval2End5;\n\
    \    $interval1Start6 = $interval1Start5;\n    $interval2Start6 = $interval2Start5;\n\
    \    $interval1End7 = $interval1End6;\n    $interval2End7 = $interval2End6;\n\
    \    $interval1Start7 = $interval1Start6;\n    $interval2Start7 = $interval2Start6;\n\
    \    $interval1End8 = $interval1End7;\n    $interval2End8 = $interval2End7;\n\
    \    $interval1Start8 = $interval1Start7;\n    $interval2Start8 = $interval2Start7;\n\
    \    $interval1End9 = $interval1End8;\n    $interval2End9 = $interval2End8;\n\
    \    $interval1Start9 = $interval1Start8;\n    $interval2Start9 = $interval2Start8;\n\
    \    $interval1End10 = $interval1End9;\n    $interval2End10 = $interval2End9;\n\
    \    $interval1Start10 = $interval1Start9;\n    $interval2Start10 = $interval2Start9;\n\
    \    $interval1End11 = $interval1End10;\n    $interval2End11 = $interval2End10;\n\
    \    $interval1Start11 = $interval1Start10;\n    $interval2Start11 = $interval2Start10;\n\
    \    $interval1End12 = $interval1End11;\n    $interval2End12 = $interval2End",
  "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n\
    \    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    $intersectionLength=$interval1Length-$interval2Length;\n\
    \    if ($intersectionLength==0) {\n        return \"NO\";\n    }\n    if ($intersectionLength==1)\
    \ {\n        return \"YES\";\n    }\n    if ($intersectionLength==2) {\n     \
    \   if ($interval1Start<$interval2Start) {\n            return \"YES\";\n    \
    \    }\n        if ($interval1End>$interval2End) {\n            return \"YES\"\
    ;\n        }\n    }\n    if ($intersectionLength==3) {\n        if ($interval1Start<$interval2Start)\
    \ {\n            if ($interval1End<$interval2End) {\n                return \"\
    YES\";\n            }\n        }\n        if ($interval1End>$interval2End) {\n\
    \            if ($interval1Start<$interval2Start) {\n                return \"\
    YES\";\n            }\n        }\n    }\n    if ($intersectionLength==4) {\n \
    \       if ($interval1Start<$interval2Start) {\n            if ($interval1End<$interval2End)\
    \ {\n                if ($interval1Start<$interval2Start) {\n                \
    \    return \"YES\";\n                }\n            }\n        }\n        if\
    \ ($interval1End>$interval2End) {\n            if ($interval1Start<$interval2Start)\
    \ {\n                if ($interval1End<$interval2End) {\n                    return\
    \ \"YES\";\n                }\n            }\n        }\n    }\n    if ($intersectionLength==5)\
    \ {\n        if ($interval1Start<$interval2Start) {\n            if ($interval1End<$interval2End)\
    \ {\n                if ($interval1Start<$interval2Start) {\n                \
    \    if ($interval1End<$interval2End) {\n                        return \"YES\"\
    ;\n                    }\n                }\n            }\n        }\n      \
    \  if ($interval1End>$interval2End) {\n            if ($interval1Start<$interval2Start)\
    \ {\n                if ($interval1End<$interval2End) {\n                    if\
    \ ($interval1Start<$interval2Start) {\n                        return \"YES\"\
    ;\n                    }\n                }\n            }\n        }\n    }\n\
    \    if ($intersectionLength==6) {\n        if ($interval1Start<$interval2Start)\
    \ {\n            if ($interval1End<$interval2End) {\n                if ($interval1Start<$interval2Start)\
    \ {\n                    if ($interval1End<", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, [$interval2[0]]);\n    $interval2 = array_merge($interval2,\
    \ [$interval1[1]]);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2\
    \ = array_slice($interval2, 0, -1);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 1) {\n        return $intersection[0];\n\
    \    }\n    return count($intersection) == 0;\n}\n", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    $interval1Length = $interval1End - $interval1[0];\n  \
    \  $interval2Length = $interval2End - $interval2[0];\n    if ($interval1Length\
    \ > $interval2Length) {\n        $interval1 = array_slice($interval1, 0, 1);\n\
    \        $interval2 = array_slice($interval2, 0, 1);\n    }\n    $intersectionLength\
    \ = $interval1Length - $interval2Length;\n    if ($intersectionLength == 0) {\n\
    \        return \"NO\";\n    }\n    if ($intersectionLength == 1) {\n        return\
    \ \"YES\";\n    }\n    $prime = true;\n    for ($i = 0; $i < $intersectionLength;\
    \ $i++) {\n        if ($interval1[$i] > $interval2[$i]) {\n            $prime\
    \ = false;\n            break;\n        }\n    }\n    if ($prime) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return 'NO';\n    }\n    $intersection = array_slice($intersection,\
    \ 0, -1);\n    $intersection = array_unique($intersection);\n    if (count($intersection)\
    \ == 1) {\n        return 'YES';\n    }\n    $primes = array();\n    foreach ($intersection\
    \ as $num) {\n        if ($num > 1) {\n            $primes[] = $num;\n       \
    \ }\n    }\n    if (count($primes) == 1) {\n        return 'YES';\n    }\n   \
    \ return 'NO';\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $interval1Start = $interval1[0];\n \
    \   $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n   \
    \ $interval2End = $interval2[1];\n    if ($interval1Start > $interval2Start) {\n\
    \        $interval1Start = $interval2Start;\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1End = $interval2End;\n    }\n    if ($interval1Start >\
    \ $interval2End) {\n        $interval1End = $interval2Start;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval2Start;\n    }\n    if ($interval1End < $interval2End) {\n      \
    \  $interval1End = $interval2End;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1End = $interval2Start;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval2Start;\n    }\n    if ($interval1End < $interval2End) {\n      \
    \  $interval1End = $interval2End;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1End = $interval2Start;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval2Start", "    $interval1 = array_map('intval', $interval1);\n   \
    \ $interval2 = array_map('intval', $interval2);\n    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval2Start;\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval2End;\n    }\n    if ($interval1Start\
    \ > $interval2End) {\n        return \"NO\";\n    }\n    if ($interval1End < $interval2Start)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1Start === $interval1End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1Start === $interval2Start)\
    \ {\n        return \"YES\";\n    }\n    $intersectionLength = $interval1End -\
    \ $interval1Start;\n    if ($intersectionLength === 1) {\n        return \"YES\"\
    ;\n    }\n    if ($intersectionLength === 2) {\n        return \"NO\";\n    }\n\
    \    $primeNumbers = array();\n    for ($i = 2; $i <= $intersectionLength; $i++)\
    \ {\n        if ($i % 2 === 0) {\n            $primeNumbers[] = $i;\n        }\n\
    \    }\n    if (in_array($intersectionLength, $primeNumbers)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersect =\
    \ array_intersect($interval1, $interval2);\n    if (count($intersect) > 0) {\n\
    \        if (count($intersect) == 1) {\n            return \"YES\";\n        }\
    \ else {\n            return \"NO\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n    $intersectionLength\
    \ = abs($intersectionEnd - $intersectionStart);\n    if ($intersectionLength ==\
    \ 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength == 2) {\n \
    \       return \"YES\";\n    }\n    if ($intersectionLength % 2 == 0) {\n    \
    \    return \"NO\";\n    }\n    $primeNumbers = array();\n    for ($i = 2; $i\
    \ <= $intersectionLength; $i++) {\n        if ($i % 2 == 0) {\n            $primeNumbers[]\
    \ = $i;\n        }\n    }\n    if (in_array($intersectionLength, $primeNumbers))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersect = array_intersect($interval1, $interval2);\n    $length\
    \ = count($intersect);\n    if ($length == 1) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 2) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 3) {\n        return $intersect[0];\n    }\n    if ($length == 4)\
    \ {\n        return $intersect[0];\n    }\n    if ($length == 5) {\n        return\
    \ $intersect[0];\n    }\n    if ($length == 6) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 7) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 8) {\n        return $intersect[0];\n    }\n    if ($length == 9)\
    \ {\n        return $intersect[0];\n    }\n    if ($length == 10) {\n        return\
    \ $intersect[0];\n    }\n    if ($length == 11) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 12) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 13) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 14) {\n        return $intersect[0];\n    }\n    if ($length == 15) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 16) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 17) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 18) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 19) {\n        return $intersect[0];\n    }\n    if ($length == 20) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 21) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 22) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 23) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 24) {\n        return $intersect[0];\n    }\n    if ($length == 25) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 26) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 27) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 28) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 29) {\n        return $intersect[0];\n    }\n    if ($length == 30) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 31) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 32) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 33) {\n        return $intersect[0];\n    }", "    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 1) {\n        return $intersection[0];\n\
    \    }\n    return null;\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval2Start;\n    }\n    if ($interval1End < $interval2End) {\n      \
    \  $interval1End = $interval2End;\n    }\n\n    $intersectionStart = $interval1Start;\n\
    \    $intersectionEnd = $interval1End;\n\n    while ($intersectionStart <= $interval1End)\
    \ {\n        if ($intersectionEnd >= $interval2Start) {\n            if ($interval2End\
    \ <= $intersectionStart) {\n                $intersectionEnd = $interval2End;\n\
    \            }\n            else {\n                $intersectionEnd = $intersectionStart;\n\
    \            }\n        }\n        else {\n            $intersectionEnd = $intersectionStart;\n\
    \        }\n        $intersectionStart++;\n    }\n\n    if ($intersectionStart\
    \ <= $intersectionEnd) {\n        if ($intersectionEnd >= $interval2End) {\n \
    \           if ($interval2End <= $intersectionStart) {\n                $intersectionEnd\
    \ = $interval2End;\n            }\n            else {\n                $intersectionEnd\
    \ = $intersectionStart;\n            }\n        }\n        else {\n          \
    \  $intersectionEnd = $intersectionStart;\n        }\n    }\n\n    if ($intersectionStart\
    \ <= $intersectionEnd) {\n        if ($intersectionEnd >= $interval2End) {\n \
    \           if ($interval2End <= $intersectionStart) {\n                $intersectionEnd\
    \ = $interval2End;\n            }\n            else {\n                $intersectionEnd\
    \ = $intersectionStart;\n            }\n        }\n        else {\n          \
    \  $intersectionEnd = $intersectionStart;\n        }\n    }\n\n    if ($intersectionStart\
    \ <= $intersectionEnd) {\n        if ($intersectionEnd >= $interval2End) {\n \
    \           if ($interval2End <= $intersectionStart) {\n                $intersectionEnd\
    \ = $interval2End;\n            }\n            else {\n                $intersectionEnd\
    \ = $intersectionStart;\n            }\n        }\n        else {\n          \
    \  $intersectionEnd = $intersectionStart;\n        }\n    }\n\n    if ($intersectionStart\
    \ <= $intersectionEnd) {\n        if ($intersectionEnd >= $interval2End) {\n \
    \           if ($interval2End <= $intersectionStart) {\n                $intersectionEnd\
    \ = $interval2End;\n            }\n            else {\n                $intersectionEnd\
    \ = $intersectionStart;\n            }\n        }\n        else {\n          \
    \  $intersectionEnd = $intersectionStart;\n        }\n    }\n\n    if ($intersectionStart\
    \ <= $intersectionEnd) {\n        if ($intersectionEnd >= $interval2End) {\n \
    \           if ($interval2End <= $intersectionStart) {\n                $intersectionEnd\
    \ = $interval2End;\n            }\n            else {\n                $intersectionEnd\
    \ = $", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  if ($interval1Start > $interval2Start) {\n        $interval1Start = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n  \
    \  }\n    if ($interval1Start === $interval1End) {\n        return \"NO\";\n \
    \   }\n    if ($interval2Start === $interval2End) {\n        return \"NO\";\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1End =\
    \ $interval2Start;\n    }\n    if ($interval1End < $interval2End) {\n        $interval1Start\
    \ = $interval2End;\n    }\n    if ($interval1Start === $interval1End) {\n    \
    \    return \"NO\";\n    }\n    if ($interval2Start === $interval2End) {\n   \
    \     return \"NO\";\n    }\n    $intersectionLength = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n    if ($intersectionLength\
    \ === $interval2Length) {\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[1], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[1], $interval2[1]]);\n \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, ", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart >= $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength % 2 != 0) {\n        return \"NO\";\n    }\n    $isPrime\
    \ = true;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($intersectionStart + $i > $intersectionEnd) {\n\
    \                $isPrime = false;\n                break;\n            }\n  \
    \          if ($intersectionStart + $i == $intersectionEnd) {\n              \
    \  $isPrime = false;\n                break;\n            }\n            if ($intersectionStart\
    \ + $i != $intersectionEnd && $intersectionStart + $i != $intersectionStart +\
    \ $i) {\n                $isPrime = false;\n                break;\n         \
    \   }\n        }\n    }\n    return $isPrime ? \"YES\" : \"NO\";\n}", "    $interval1\
    \ = array_map(function($v){return $v[0];}, $interval1);\n    $interval2 = array_map(function($v){return\
    \ $v[0];}, $interval2);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    $intersection = array_map(function($v){return $v[1];}, $intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_keys($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_keys($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_keys($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_keys($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_keys($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_keys($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_keys($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map(function($v){return $v[0];}, $intersection);\n\
    \    $intersection = array_count_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_map(function($v){return $v == $v ? $v\
    \ : null;}, $intersection);\n    $intersection = array_filter($intersection);\n\
    \    if (count($intersection) > 1) {\n        return $intersection;\n    }\n \
    \   return $intersection[0];\n}\n", "    $interval1Start = $interval1[0];\n  \
    \  $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End\
    \ = $interval2[1];\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n    if ($intersectionStart\
    \ >= $intersectionEnd) {\n        return \"NO\";\n    }\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart;\n    if ($intersectionLength == 1)\
    \ {\n        return \"YES\";\n    }\n    $isPrime = true;\n    for ($i = 2; $i\
    \ <= $intersectionLength; $i++) {\n        if ($i % 2 == 0) {\n            if\
    \ ($intersectionStart % $i == 0) {\n                $isPrime = false;\n      \
    \          break;\n            }\n        }\n    }\n    if ($isPrime) {\n    \
    \    return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1End > $interval2End) {\n        $interval1\
    \ = $interval1[1];\n        $interval2 = $interval2[0];\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1 = $interval1[0];\n        $interval2\
    \ = $interval2[1];\n    }\n    $intersection = $interval1;\n    $intersectionEnd\
    \ = $interval2;\n    while ($intersectionEnd <= $interval1End) {\n        $intersectionEnd\
    \ = $intersectionEnd + 1;\n    }\n    while ($intersectionEnd <= $interval2End)\
    \ {\n        $intersectionEnd = $intersectionEnd + 1;\n    }\n    if ($intersectionEnd\
    \ > $interval1End && $intersectionEnd > $interval2End) {\n        return \"NO\"\
    ;\n    }\n    if ($intersectionEnd > $interval1End || $intersectionEnd > $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionEnd % 2 != 0) {\n   \
    \     return \"NO\";\n    }\n    if ($intersectionEnd == 1) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionEnd == 2) {\n        return \"YES\";\n\
    \    }\n    if ($intersectionEnd == 3) {\n        return \"YES\";\n    }\n   \
    \ if ($intersectionEnd == 5) {\n        return \"YES\";\n    }\n    if ($intersectionEnd\
    \ == 7) {\n        return \"YES\";\n    }\n    if ($intersectionEnd == 11) {\n\
    \        return \"YES\";\n    }\n    if ($intersectionEnd == 13) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionEnd == 17) {\n        return \"YES\";\n\
    \    }\n    if ($intersectionEnd == 19) {\n        return \"YES\";\n    }\n  \
    \  if ($intersectionEnd == 23) {\n        return \"YES\";\n    }\n    if ($intersectionEnd\
    \ == 29) {\n        return \"YES\";\n    }\n    if ($intersectionEnd == 31) {\n\
    \        return \"YES\";\n    }\n    if ($intersectionEnd == 37) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionEnd == 43) {\n        return \"YES\";\n\
    \    }\n    if ($intersectionEnd == 49) {\n        return \"YES\";\n    }\n  \
    \  if ($intersectionEnd == 53) {\n        return \"YES\";\n    }\n    if ($intersectionEnd\
    \ == 59) {\n        return \"YES\";\n    }\n    if ($intersectionEnd == 61) {\n\
    \        return \"YES\";\n    }\n    if ($intersectionEnd == 67) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionEnd == 73) {\n        return \"YES\";\n\
    \    }\n    if ($intersectionEnd == 79) {\n        return \"YES\";\n    }\n  \
    \  if ($", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    $intersectionLength = abs($intersectionEnd\
    \ - $intersectionStart);\n    if ($intersectionLength == 1) {\n        return\
    \ \"NO\";\n    }\n    if ($intersectionLength == 2 && $interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    if\
    \ ($interval1End > $interval2End) {\n        $interval1 = $interval1[1];\n   \
    \     $interval2 = $interval2[0];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[1];\n\
    \    }\n    $intersectionLength = ($interval1End - $interval1) / 2;\n    $intersectionLength2\
    \ = ($interval2End - $interval2) / 2;\n    if ($intersectionLength > $intersectionLength2)\
    \ {\n        $intersectionLength = $intersectionLength2;\n    }\n    if ($intersectionLength\
    \ == $interval1End && $intersectionLength2 == $interval2End) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionLength != $interval1End && $intersectionLength2\
    \ != $interval2End) {\n        return \"NO\";\n    }\n}\n", "    $interval1 =\
    \ $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n  \
    \  $interval2Start = $interval2[0];\n    $intersectionStart = $interval1Start;\n\
    \    $intersectionEnd = $interval1End;\n    $intersectionLength = 0;\n    \n \
    \   if ($interval1End > $interval2Start) {\n        $intersectionLength = $interval1End\
    \ - $intersectionStart;\n    }\n    if ($interval2End > $interval1Start) {\n \
    \       $intersectionLength = $intersectionEnd - $interval2Start;\n    }\n   \
    \ \n    if ($intersectionLength > 0) {\n        if ($intersectionLength % 2 ==\
    \ 0) {\n            if ($interval1Start <= $intersectionStart && $intersectionStart\
    \ <= $interval1End) {\n                if ($interval2Start <= $intersectionEnd\
    \ && $intersectionEnd <= $interval2End) {\n                    if ($intersectionStart\
    \ <= $interval1Start && $interval1Start <= $intersectionEnd) {\n             \
    \           if ($intersectionEnd <= $interval2Start && $interval2Start <= $intersectionEnd)\
    \ {\n                            if ($interval1Start <= $interval2Start && $interval2Start\
    \ <= $interval1End) {\n                                return \"YES\";\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return \"NO\";\n}\n",
  "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n\
    \    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    if($interval1Length>$interval2Length){\n\
    \        $interval1Start=$interval1End;\n        $interval1End=$interval1Start+$interval1Length;\n\
    \    }\n    if($interval2Length>$interval1Length){\n        $interval2Start=$interval2End;\n\
    \        $interval2End=$interval2Start+$interval2Length;\n    }\n    if($interval1Start>$interval2Start){\n\
    \        $interval1Start=$interval1End;\n        $interval1End=$interval1Start+$interval1Length;\n\
    \    }\n    if($interval2Start>$interval1Start){\n        $interval2Start=$interval2End;\n\
    \        $interval2End=$interval2Start+$interval2Length;\n    }\n    if($interval1Start>$interval2Start){\n\
    \        $interval1Start=$interval1End;\n        $interval1End=$interval1Start+$interval1Length;\n\
    \    }\n    if($interval2Start>$interval1Start){\n        $interval2Start=$interval2End;\n\
    \        $interval2End=$interval2Start+$interval2Length;\n    }\n    if($interval1Start==$interval1End){\n\
    \        if($interval1Start==$interval2Start){\n            if($interval1End==$interval2End){\n\
    \                return \"YES\";\n            }else{\n                return \"\
    NO\";\n            }\n        }else{\n            return \"NO\";\n        }\n\
    \    }else{\n        if($interval1Start==$interval2Start){\n            if($interval1End==$interval2End){\n\
    \                return \"NO\";\n            }else{\n                return \"\
    YES\";\n            }\n        }else{\n            return \"NO\";\n        }\n\
    \    }\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ array(max($interval1)));\n    $interval2 = array_merge($interval2, array(max($interval2)));\n\
    \    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_map(function ($v) { return abs($v); }, $intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return $intersection[0];\n    }\n    return count($intersection) == 0;\n}\n",
  "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n\
    \    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start+1;\n\
    \    $interval2Length=$interval2End-$interval2Start+1;\n    $intersectionLength=$interval1Length-$interval2Length;\n\
    \    if ($intersectionLength==0) {\n        return \"NO\";\n    }\n    if ($intersectionLength==1)\
    \ {\n        return \"YES\";\n    }\n    if ($intersectionLength==2) {\n     \
    \   if ($interval1Start<$interval2Start) {\n            return \"YES\";\n    \
    \    }\n        if ($interval1End>$interval2End) {\n            return \"YES\"\
    ;\n        }\n    }\n    if ($intersectionLength==3) {\n        if ($interval1Start<$interval2Start)\
    \ {\n            return \"YES\";\n        }\n        if ($interval1End>$interval2End)\
    \ {\n            return \"YES\";\n        }\n        if ($interval1Start<$interval2End)\
    \ {\n            return \"YES\";\n        }\n    }\n    if ($intersectionLength==4)\
    \ {\n        if ($interval1Start<$interval2Start) {\n            return \"YES\"\
    ;\n        }\n        if ($interval1End>$interval2End) {\n            return \"\
    YES\";\n        }\n        if ($interval1Start<$interval2End) {\n            return\
    \ \"YES\";\n        }\n        if ($interval1Start<$interval2Start) {\n      \
    \      return \"YES\";\n        }\n    }\n    if ($intersectionLength==5) {\n\
    \        if ($interval1Start<$interval2Start) {\n            return \"YES\";\n\
    \        }\n        if ($interval1End>$interval2End) {\n            return \"\
    YES\";\n        }\n        if ($interval1Start<$interval2End) {\n            return\
    \ \"YES\";\n        }\n        if ($interval1Start<$interval2Start) {\n      \
    \      return \"YES\";\n        }\n        if ($interval1Start<$interval2End)\
    \ {\n            return \"YES\";\n        }\n    }\n    if ($intersectionLength==6)\
    \ {\n        if ($interval1Start<$interval2Start) {\n            return \"YES\"\
    ;\n        }\n        if ($interval1End>$interval2End) {\n            return \"\
    YES\";\n        }\n        if ($interval1Start<$interval2End) {\n            return\
    \ \"YES\";\n        }\n        if ($interval1Start<$interval2Start) {\n      \
    \      return \"YES\";\n        }\n        if ($interval1Start<$interval2End)\
    \ {\n            return \"YES\";\n        }\n        if ($interval1Start<$interval2Start)\
    \ {\n            return \"YES\";\n        }\n", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    $interval1Length = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n    if ($interval1Length\
    \ == $interval2Length) {\n        if ($interval1Start <= $interval2Start && $interval1End\
    \ >= $interval2End) {\n            return \"YES\";\n        }\n    }\n    return\
    \ \"NO\";\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n\
    \    $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n\n    if ($intersectionStart >= $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n\n    $intersectionLength = abs($intersectionEnd\
    \ - $intersectionStart);\n\n    if ($intersectionLength == 1) {\n        return\
    \ \"YES\";\n    }\n\n    $isPrime = true;\n    for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            if ($intersectionStart % $i\
    \ == 0 && $intersectionEnd % $i == 0) {\n                $isPrime = false;\n \
    \               break;\n            }\n        }\n    }\n\n    return $isPrime\
    \ ? \"YES\" : \"NO\";\n}", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[0], $interval1[1]]);\n    $interval2 = array_merge($interval2, [$interval2[0],\
    \ $interval2[1]]);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2\
    \ = array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $intersection = array_slice($intersection,\
    \ 0, -1);\n    $intersection = array_map(function($x) {\n        return $x[0];\n\
    \    }, $intersection);\n    $intersection = array_unique($intersection);\n  \
    \  if (count($intersection) == 1) {\n        return \"YES\";\n    }\n    $primes\
    \ = array_filter($intersection, function($x) {\n        return is_prime($x);\n\
    \    });\n    if (count($primes) == 1) {\n        return \"YES\";\n    }\n   \
    \ return \"NO\";\n}\n", "    $interval1 = array_map('intval', $interval1);\n \
    \   $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[0], $interval1[1]]);\n    $interval2 = array_merge($interval2, [$interval2[0],\
    \ $interval2[1]]);\n    $interval1 = array_slice($interval1, 0, 1);\n    $interval2\
    \ = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1, 0,\
    \ 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval", "    $interval1 = array_values($interval1);\n    $interval2\
    \ = array_values($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $intersection = array_values($intersection);\n    $intersection =\
    \ array_filter($intersection);\n    if (count($intersection) == 1) {\n       \
    \ return \"YES\";\n    }\n    $length = count($intersection);\n    if ($length\
    \ == 2) {\n        return \"YES\";\n    }\n    if ($length == 3) {\n        if\
    \ ($intersection[0] >= $intersection[1]) {\n            return \"YES\";\n    \
    \    }\n        return \"NO\";\n    }\n    if ($length == 4) {\n        if ($intersection[0]\
    \ >= $intersection[1] && $intersection[1] >= $intersection[2]) {\n           \
    \ return \"YES\";\n        }\n        return \"NO\";\n    }\n    if ($length ==\
    \ 5) {\n        if ($intersection[0] >= $intersection[1] && $intersection[1] >=\
    \ $intersection[2] && $intersection[2] >= $intersection[3]) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if ($length == 6) {\n\
    \        if ($intersection[0] >= $intersection[1] && $intersection[1] >= $intersection[2]\
    \ && $intersection[2] >= $intersection[3] && $intersection[3] >= $intersection[4])\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if ($length == 7) {\n        if ($intersection[0] >= $intersection[1] && $intersection[1]\
    \ >= $intersection[2] && $intersection[2] >= $intersection[3] && $intersection[3]\
    \ >= $intersection[4] && $intersection[4] >= $intersection[5]) {\n           \
    \ return \"YES\";\n        }\n        return \"NO\";\n    }\n    if ($length ==\
    \ 8) {\n        if ($intersection[0] >= $intersection[1] && $intersection[1] >=\
    \ $intersection[2] && $intersection[2] >= $intersection[3] && $intersection[3]\
    \ >= $intersection[4] && $intersection[4] >= $intersection[5] && $intersection[5]\
    \ >= $intersection[6]) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if ($length == 9) {\n        if ($intersection[0] >= $intersection[1]\
    \ && $intersection[1] >= $intersection[2] && $intersection[2] >= $intersection[3]\
    \ && $intersection[3] >= $intersection[4] && $intersection[4] >= $intersection[5]\
    \ && $intersection[5] >= $intersection[6] && $intersection[6] >= $intersection[7])\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if ($length == 10) {\n        if ($intersection[0] >= $intersection[1] &&\
    \ $intersection[1] >= $intersection[2] && $intersection[2] >= $intersection[3]\
    \ && $intersection[3] >= $intersection[4] && $intersection[4] >= $intersection[5",
  "    $interval1 = array_map(function($v){return $v[0];}, $interval1);\n    $interval2\
    \ = array_map(function($v){return $v[0];}, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_flip($interval1);\n\
    \    $interval2 = array_flip($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_flip($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_flip($intersection);\n\
    \    foreach ($intersection as $key => $value) {\n        if ($value == 1) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  \
    \  $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart > $intersectionEnd) {\n        return\
    \ \"NO\";\n    }\n    if ($intersectionStart === $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n    if ($intersectionStart < $intersectionEnd) {\n  \
    \      $intersectionLength = $intersectionEnd - $intersectionStart;\n        if\
    \ ($intersectionLength === 1) {\n            return \"YES\";\n        }\n    \
    \    $primeNumbers = array();\n        for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n            if ($i % 2 === 0) {\n                $primeNumbers[] =\
    \ $i;\n            }\n        }\n        if (in_array($intersectionLength, $primeNumbers))\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}", " \
    \   $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n   \
    \ $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n   \
    \ if ($interval1Start > $interval1End) {\n        $interval1Start = $interval1End;\n\
    \    }\n    if ($interval2Start > $interval2End) {\n        $interval2Start =\
    \ $interval2End;\n    }\n\n    if ($interval1Start >= $interval2Start) {\n   \
    \     $interval1End = $interval1Start;\n    } else {\n        $interval2End =\
    \ $interval2Start;\n    }\n\n    $intersectionLength = $interval1End - $interval1Start;\n\
    \    if ($intersectionLength == 0) {\n        return \"NO\";\n    }\n\n    $interval1Interval\
    \ = $interval1End - $interval1Start;\n    $interval2Interval = $interval2End -\
    \ $interval2Start;\n\n    if ($interval1Interval == $interval2Interval) {\n  \
    \      if ($interval1Start <= $interval2Start) {\n            $interval1Start\
    \ = $interval1Start + 1;\n            $interval1End = $interval1End + 1;\n   \
    \     } else {\n            $interval2Start = $interval2Start + 1;\n         \
    \   $interval2End = $interval2End + 1;\n        }\n    }\n\n    $intersectionInterval\
    \ = $interval1End - $interval1Start;\n    $primeNumber = 0;\n    for ($i = $interval1Start;\
    \ $i <= $interval1End; $i++) {\n        for ($j = $interval2Start; $j <= $interval2End;\
    \ $j++) {\n            if ($i == $j) {\n                $primeNumber++;\n    \
    \        }\n        }\n    }\n\n    if ($primeNumber == $intersectionInterval)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return 'NO';\n    }\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('strval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return $intersection[0];\n    }\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return $intersection[0];\n    }\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('strval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return $intersection[0];\n    }\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return $intersection[0];\n    }\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('strval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return $intersection[0];\n    }\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return $intersection[0];\n    }\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('strval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return $intersection[0];\n    }\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    if (count($intersection) == 1) {\n     \
    \   return $intersection[0];\n    }\n    $intersection = array_values($intersection",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersect = array_intersect($interval1, $interval2);\n    if (count($intersect)\
    \ > 0) {\n        if (count($intersect) == 1) {\n            return $intersect[0];\n\
    \        } else {\n            return $intersect;\n        }\n    } else {\n \
    \       return 'NO';\n    }\n}\n", "    $interval1Start = $interval1[0];\n   \
    \ $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End\
    \ = $interval2[1];\n    $interval1Length = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n    if ($interval1Length\
    \ > $interval2Length) {\n        $interval1 = array_slice($interval1, 0, 1);\n\
    \        $interval2 = array_slice($interval2, 0, 1);\n    }\n    $interval1Start\
    \ = $interval1Start < $interval2Start ? $interval1Start : $interval2Start;\n \
    \   $interval1End = $interval1End > $interval2End ? $interval1End : $interval2End;\n\
    \    $interval1Length = $interval1End - $interval1Start;\n    if ($interval1Length\
    \ == 1) {\n        if ($interval1Start <= $interval2Start && $interval1End >=\
    \ $interval2End) {\n            return \"YES\";\n        } else {\n          \
    \  return \"NO\";\n        }\n    }\n    $interval1Length = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n    if ($interval1Length\
    \ == 1) {\n        if ($interval1Start <= $interval2Start && $interval1End >=\
    \ $interval2End) {\n            return \"YES\";\n        } else {\n          \
    \  return \"NO\";\n        }\n    }\n    if ($interval1Length == $interval2Length)\
    \ {\n        if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    $interval1Length = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n    if ($interval1Length\
    \ == 1) {\n        if ($interval1Start <= $interval2Start && $interval1End >=\
    \ $interval2End) {\n            return \"YES\";\n        } else {\n          \
    \  return \"NO\";\n        }\n    }\n    if ($interval1Length == $interval2Length)\
    \ {\n        if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    if ($interval1Length > $interval2Length) {\n        $interval1\
    \ = array_slice($interval1, 0, 1);\n        $interval2 = array_slice($interval2,\
    \ 0, 1);\n    }\n    $interval1Start = $interval1Start < $interval2Start ? $interval1Start\
    \ : $interval2Start;\n    $interval1", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_map(function ($i) {\n        return\
    \ $i[0];\n    }, $intersection);\n    $intersection = array_map(function ($i)\
    \ {\n        return $i[1];\n    }, $intersection);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 2) {\n        if ($intersection[0] >= $intersection[1])\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }\n}\n", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return $intersection[0];\n    }\n\
    \    return count($intersection) == 0;\n}", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval2Start;\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval2End;\n    }\n    if ($interval1Start\
    \ > $interval2End) {\n        return \"NO\";\n    }\n    if ($interval1End < $interval2Start)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1Start === $interval1End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1Start === $interval2Start)\
    \ {\n        return \"YES\";\n    }\n    if ($interval1Start === $interval2End)\
    \ {\n        return \"YES\";\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1End < $interval2End) {\n\
    \        return \"NO\";\n    }\n    if ($interval1Start === $interval2Start) {\n\
    \        return \"YES\";\n    }\n    if ($interval1Start === $interval2End) {\n\
    \        return \"YES\";\n    }\n    if ($interval1Start > $interval2Start) {\n\
    \        return \"NO\";\n    }\n    if ($interval1End < $interval2End) {\n   \
    \     return \"NO\";\n    }\n    if ($interval1Start === $interval2Start) {\n\
    \        return \"YES\";\n    }\n    if ($interval1Start === $interval2End) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1End > $interval2End) {\n        $interval1\
    \ = $interval1[1];\n        $interval2 = $interval2[0];\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1 = $interval1[0];\n        $interval2\
    \ = $interval2[1];\n    }\n    if ($interval1 > $interval2) {\n        $interval1\
    \ = $interval1[1];\n        $interval2 = $interval2[1];\n    }\n    if ($interval1\
    \ < $interval2) {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[0];\n\
    \    }\n    $intersectionLength = $interval2 - $interval1;\n    if ($intersectionLength\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength > 1) {\n\
    \        $prime = true;\n        for ($i = 2; $i <= $intersectionLength; $i++)\
    \ {\n            if ($intersectionLength % $i == 0) {\n                $prime\
    \ = false;\n                break;\n            }\n        }\n        if ($prime)\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}", " \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval2[0]]);\n \
    \   $interval2 = array_merge($interval2, [$interval1[1]]);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n \
    \   if ($length == 1) {\n        return \"YES\";\n    }\n    $prime = true;\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($intersection[$i] % 2 ==\
    \ 0) {\n            $prime = false;\n            break;\n        }\n    }\n  \
    \  if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "  \
    \  $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start =\
    \ $interval1[0];\n    $interval2Start = $interval2[0];\n    if ($interval1End\
    \ > $interval2Start) {\n        $interval1End = $interval1End;\n    }\n    if\
    \ ($interval2End > $interval1Start) {\n        $interval2End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1Start =\
    \ $interval1Start;\n    }\n    if ($interval2Start > $interval1End) {\n      \
    \  $interval2Start = $interval2Start;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1End = $interval1Start;\n    }\n    if ($interval2Start\
    \ > $interval1End) {\n        $interval2End = $interval2Start;\n    }\n    if\
    \ ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_map('strval', $intersection);\n    $intersection\
    \ = array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) > 1) {\n        $intersection = array_map('strval',\
    \ $intersection);\n        $intersection = array_filter($intersection);\n    \
    \    $intersection = array_unique($intersection);\n        $intersection = array_map('intval',\
    \ $intersection);\n        $intersection = array_filter($intersection);\n    \
    \    $intersection = array_map('strval', $intersection);\n        $intersection\
    \ = array_filter($intersection);\n        if (count($intersection) > 1) {\n  \
    \          $intersection = array_map('strval', $intersection);\n            $intersection\
    \ = array_filter($intersection);\n            $intersection = array_unique($intersection);\n\
    \            $intersection = array_map('intval', $intersection);\n           \
    \ $intersection = array_filter($intersection);\n            $intersection = array_map('strval',\
    \ $intersection);\n            $intersection = array_filter($intersection);\n\
    \            if (count($intersection) > 1) {\n                $intersection =\
    \ array_map('strval', $intersection);\n                $intersection = array_filter($intersection);\n\
    \                $intersection = array_unique($intersection);\n              \
    \  $intersection = array_map('intval', $intersection);\n                $intersection\
    \ = array_filter($intersection);\n                $intersection = array_map('strval',\
    \ $intersection);\n                $intersection = array_filter($intersection);\n\
    \                if (count($intersection) > 1) {\n                    $intersection\
    \ = array_map('strval', $intersection);\n                    $intersection = array_filter($intersection);\n\
    \                    $intersection = array_unique($intersection);\n          \
    \          $intersection = array_map('intval', $intersection);\n             \
    \       $intersection = array_filter($intersection);\n                    $intersection\
    \ = array_map('strval', $intersection);\n                    $intersection = array_filter($intersection);\n\
    \                    if (count($intersection) > 1) {\n                       \
    \ $intersection = array_map('strval', $intersection);\n                      \
    \  $intersection = array_filter($intersection);\n                        $intersection\
    \ = array_unique($intersection);\n                        $intersection = array_map('intval',\
    \ $intersection);\n                        $intersection = array_filter($intersection);\n\
    \                        $intersection = array_map('strval', $intersection);\n\
    \                        $intersection = array_filter($intersection);\n      \
    \                  if (count($intersection) > 1) {\n                         \
    \   $intersection = array_map('strval', $intersection);\n                    \
    \        $intersection = array_filter($intersection);\n                      \
    \      $intersection = array_", "    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    if ($interval1End > $interval2End) {\n        $interval1 = $interval1[1];\n\
    \        $interval2 = $interval2[0];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[1];\n\
    \    }\n    $intersection = $interval2 - $interval1;\n    if ($intersection ==\
    \ 0) {\n        return \"NO\";\n    }\n    $isPrime = true;\n    for ($i = 2;\
    \ $i <= $intersection; $i++) {\n        if ($i % $intersection == 0) {\n     \
    \       $isPrime = false;\n            break;\n        }\n    }\n    if ($isPrime)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n\
    \    }\n\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n\
    \    }\n\n    if ($interval1Start === $interval1End) {\n        return \"NO\"\
    ;\n    }\n\n    if ($interval2Start === $interval2End) {\n        return \"NO\"\
    ;\n    }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd =\
    \ $interval1End;\n\n    while ($intersectionStart <= $interval1End) {\n      \
    \  if ($intersectionEnd <= $interval2Start) {\n            return \"NO\";\n  \
    \      }\n        if ($intersectionStart <= $interval2End) {\n            if ($intersectionEnd\
    \ === $interval2End) {\n                return \"YES\";\n            }\n     \
    \       $intersectionEnd = $interval2End;\n        }\n        $intersectionStart++;\n\
    \    }\n\n    return \"NO\";\n}\n", "    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionStart === $intersectionEnd)\
    \ {\n        return \"YES\";\n    }\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart;\n    if ($intersectionLength === 1) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionLength > 1) {\n        return \"NO\";\n\
    \    }\n    $prime = true;\n    for ($i = 2; $i <= $intersectionLength; $i++)\
    \ {\n        if ($i % 2 === 0) {\n            $prime = false;\n        }\n   \
    \ }\n    return $prime ? \"YES\" : \"NO\";\n}", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1End > $interval2End) {\n        $interval1\
    \ = $interval1[1];\n        $interval2 = $interval2[0];\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1 = $interval1[0];\n        $interval2\
    \ = $interval2[1];\n    }\n    if ($interval1 == $interval2) {\n        return\
    \ \"NO\";\n    }\n    $intersection = $interval1End - $interval2End;\n    if ($intersection\
    \ > 0) {\n        if ($intersection % 2 == 0) {\n            return \"NO\";\n\
    \        }\n        $prime = true;\n        for ($i = 2; $i <= $intersection;\
    \ $i++) {\n            if ($intersection % $i == 0) {\n                $prime\
    \ = false;\n                break;\n            }\n        }\n        if ($prime)\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}", " \
    \   $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval1End;\n    }\n    if ($interval2End\
    \ < $interval1End) {\n        $interval2End = $interval2End;\n    }\n    $intersectionLength\
    \ = $interval1End - $interval1; // the length of the intersection\n    if ($intersectionLength\
    \ == 0) {\n        return \"NO\";\n    }\n    $primeNumbers = array();\n    $primeNumbers[2]\
    \ = true;\n    $primeNumbers[3] = true;\n    $primeNumbers[5] = true;\n    $primeNumbers[7]\
    \ = true;\n    $primeNumbers[11] = true;\n    $primeNumbers[13] = true;\n    $primeNumbers[17]\
    \ = true;\n    $primeNumbers[19] = true;\n    $primeNumbers[23] = true;\n    $primeNumbers[29]\
    \ = true;\n    $primeNumbers[37] = true;\n    $primeNumbers[41] = true;\n    $primeNumbers[43]\
    \ = true;\n    $primeNumbers[47] = true;\n    $primeNumbers[53] = true;\n    $primeNumbers[59]\
    \ = true;\n    $primeNumbers[673] = true;\n    $primeNumbers[729] = true;\n  \
    \  $primeNumbers[769] = true;\n    $primeNumbers[823] = true;\n    $primeNumbers[859]\
    \ = true;\n    $primeNumbers[883] = true;\n    $primeNumbers[907] = true;\n  \
    \  $primeNumbers[919] = true;\n    $primeNumbers[929] = true;\n    $primeNumbers[937]\
    \ = true;\n    $primeNumbers[953] = true;\n    $primeNumbers[967] = true;\n  \
    \  $primeNumbers[971] = true;\n    $primeNumbers[983] = true;\n    $primeNumbers[991]\
    \ = true;\n    $primeNumbers[1003] = true;\n    $primeNumbers[1017] = true;\n\
    \    $primeNumbers[1023] = true;\n    $primeNumbers[1039] = true;\n    $primeNumbers[1049]\
    \ = true;\n    $primeNumbers[1059] = true;\n    $primeNumbers[1071] = true;\n\
    \    $primeNumbers[1083] = true;\n    $primeNumbers[1097] = true;\n    $primeNumbers[1103]\
    \ = true;\n    $primeNumbers[1117] = true;\n    $primeNumbers[1123] = true;\n\
    \    $primeNumbers[1139] = true;\n    $primeNumbers[1153] = true;\n    $primeNumbers[1161]\
    \ = true;\n    $primeNumbers[1171] = true;\n    $primeNumber", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $intersection = array($interval1,\
    \ $interval2);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_merge($intersection, $interval2);\n    $intersection = array_merge($intersection,\
    \ $interval1);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval2Start;\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval2End;\n    }\n\n    $intersectionStart\
    \ = $interval1Start;\n    $intersectionEnd = $interval1End;\n\n    while ($intersectionStart\
    \ <= $intersectionEnd) {\n        $intersectionStart += $interval2Start;\n   \
    \     $intersectionEnd += $interval2End;\n    }\n\n    if ($intersectionStart\
    \ <= $intersectionEnd) {\n        $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \        if ($intersectionLength > 1) {\n            $isPrime = true;\n      \
    \      for ($i = 1; $i <= $intersectionLength; $i++) {\n                if ($i\
    \ % 2 != 0) {\n                    $isPrime = false;\n                    break;\n\
    \                }\n            }\n            if ($isPrime) {\n             \
    \   return \"YES\";\n            }\n        }\n    }\n    return \"NO\";\n}\n",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2\
    \ = array_slice($interval2, 0, -1);\n    $interval1 = array_merge($interval1,\
    \ $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($", "    $interval1 = array_values($interval1);\n    $interval2\
    \ = array_values($interval2);\n    $interval1 = array_filter($interval1, function($v){return\
    \ $v!==null;});\n    $interval2 = array_filter($interval2, function($v){return\
    \ $v!==null;});\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection, function($v){return $v!==null;});\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection,\
    \ function($v){return $v!==null;});\n    $", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \    if ($intersectionStart >= $intersectionEnd) {\n        return \"NO\";\n \
    \   }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n    if\
    \ ($intersectionLength % 2 != 0) {\n        return \"NO\";\n    }\n    $isPrime\
    \ = true;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($intersectionStart % $i == 0) {\n             \
    \   $isPrime = false;\n                break;\n            }\n        }\n    }\n\
    \    return $isPrime ? \"YES\" : \"NO\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $intersection = array_map('intval', $intersection);\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"YES\";\n  \
    \  }\n    $prime = true;\n    for ($i = 0; $i < $length; $i++) {\n        if ($intersection[$i]\
    \ % 2 == 0) {\n            $prime = false;\n        }\n    }\n    if ($prime)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, [$interval1[0], $interval1[1]]);\n \
    \   $interval2 = array_merge($interval2, [$interval2[0], $interval2[1]]);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 =\
    \ array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1, 0,\
    \ -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2, 0,\
    \ -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 =\
    \ array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1, 0,\
    \ -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2, 0,\
    \ -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 =\
    \ array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1, 0,\
    \ -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2, 0,\
    \ -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 =\
    \ array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1, 0,\
    \ -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2, 0,\
    \ -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 =\
    \ array_slice($interval2, 0, -1);\n    $interval1 = array_slice($interval1, 0,\
    \ -1);\n    $interval", "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    if($interval1Length>$interval2Length){\n\
    \        $interval1Start=$interval1End;\n        $interval1Length=$interval1End-$interval1Start;\n\
    \    }\n    if($interval2Length>$interval1Length){\n        $interval2Start=$interval2End;\n\
    \        $interval2Length=$interval2End-$interval2Start;\n    }\n    if($interval1Length==$interval2Length){\n\
    \        if($interval1Start<$interval2Start){\n            $interval1Start=$interval1End;\n\
    \        }\n        if($interval1Start>$interval2Start){\n            $interval2Start=$interval2End;\n\
    \        }\n    }\n    if($interval1Start<$interval2Start){\n        $interval1Start=$interval1End;\n\
    \    }\n    if($interval1Start>$interval2Start){\n        $interval2Start=$interval2End;\n\
    \    }\n    if($interval1Start==$interval2Start){\n        if($interval1End<$interval2End){\n\
    \            $interval1End=$interval1End;\n        }\n        if($interval1End>$interval2End){\n\
    \            $interval2End=$interval2End;\n        }\n    }\n    if($interval1End<$interval2End){\n\
    \        $interval1End=$interval1End;\n    }\n    if($interval1End>$interval2End){\n\
    \        $interval2End=$interval2End;\n    }\n    if($interval1End==$interval2End){\n\
    \        if($interval1Start<$interval2Start){\n            $interval1Start=$interval1Start;\n\
    \        }\n        if($interval1Start>$interval2Start){\n            $interval2Start=$interval2Start;\n\
    \        }\n    }\n    if($interval1Start==$interval2Start){\n        if($interval1End<$interval2End){\n\
    \            $interval1End=$interval1End;\n        }\n        if($interval1End>$interval2End){\n\
    \            $interval2End=$interval2End;\n        }\n    }\n    if($interval1Start==$interval2Start){\n\
    \        if($interval1End", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    $intersection = array_map(function\
    \ ($item) {\n        return $item > 0 ? $item : -$item;\n    }, $intersection);\n\
    \    $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ > 0) {\n        $intersection = array_sum($intersection);\n        if ($intersection\
    \ > 0) {\n            return $intersection > 1 ? true : false;\n        }\n  \
    \  }\n    return false;\n}", "    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    $interval1Start = $interval1[0];\n    $interval2Start = $interval2[0];\n\
    \    $interval1Length = $interval1End - $interval1Start;\n    $interval2Length\
    \ = $interval2End - $interval2Start;\n    if ($interval1Length == $interval2Length)\
    \ {\n        if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n",
  "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart >= $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength > 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ == 1) {\n        return \"YES\";\n    }\n    $primeNumber = true;\n    for ($i\
    \ = 2; $i <= $intersectionLength; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      if ($intersectionStart % $i == 0) {\n                $primeNumber = false;\n\
    \            }\n        }\n    }\n    if ($primeNumber) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n    if ($intersectionStart\
    \ >= $intersectionEnd) {\n        return \"NO\";\n    }\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart;\n    if ($intersectionLength == 1)\
    \ {\n        return \"YES\";\n    }\n    $prime = true;\n    for ($i = 2; $i <=\
    \ $intersectionLength; $i++) {\n        if ($i % 2 == 0) {\n            if ($intersectionStart\
    \ % $i == 0) {\n                $prime = false;\n            }\n        }\n  \
    \  }\n    if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
  "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    if ($interval1Start > $interval2End) {\n        $interval1End\
    \ = $interval1Start;\n        $interval1Start = $interval2End;\n        $interval2End\
    \ = $interval2Start;\n    }\n    if ($interval2Start > $interval1End) {\n    \
    \    $interval2End = $interval2Start;\n        $interval2Start = $interval1End;\n\
    \        $interval1End = $interval1Start;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1End = $interval1Start;\n        $interval1Start = $interval2Start;\n\
    \        $interval2End = $interval2End;\n    }\n    if ($interval2Start > $interval1Start)\
    \ {\n        $interval2End = $interval2Start;\n        $interval2Start = $interval1Start;\n\
    \        $interval1End = $interval1End;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1End = $interval1Start;\n        $interval1Start = $interval2End;\n\
    \        $interval2End = $interval2Start;\n    }\n    if ($interval2Start > $interval1End)\
    \ {\n        $interval2End = $interval2Start;\n        $interval2Start = $interval1End;\n\
    \        $interval1End = $interval1Start;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1End = $interval1Start;\n        $interval1Start = $interval2Start;\n\
    \        $interval2End = $interval2End;\n    }\n    if ($interval2Start > $interval1End)\
    \ {\n        $interval2End = $interval2Start;\n        $interval2Start = $interval1End;\n\
    \        $interval1End = $interval1Start;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1End = $interval1Start;\n        $interval1Start = $interval2End;\n\
    \        $interval2End = $interval2Start;\n    }\n    if ($interval2Start > $interval1End)\
    \ {\n        $interval2End = $interval2Start;\n        $interval2Start = $interval1End;\n\
    \        $interval1End = $interval1Start;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1End = $interval1Start;\n        $interval1Start = $interval2Start;\n\
    \        $interval2End = ", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval2Start;\n    }\n    if ($interval1End < $interval2End) {\n      \
    \  $interval1End = $interval2End;\n    }\n\n    if ($interval1Start > $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1End < $interval2Start) {\n\
    \        return \"NO\";\n    }\n\n    if ($interval1Start === $interval1End) {\n\
    \        return \"NO\";\n    }\n    if ($interval2Start === $interval2End) {\n\
    \        return \"NO\";\n    }\n\n    $intersectionStart = $interval1Start;\n\
    \    $intersectionEnd = $interval1End;\n\n    while ($intersectionStart <= $intersectionEnd)\
    \ {\n        if ($interval2Start <= $intersectionStart && $intersectionStart <=\
    \ $interval2End) {\n            $intersectionStart = $intersectionStart + 1;\n\
    \        }\n        if ($interval1Start <= $intersectionEnd && $intersectionEnd\
    \ <= $interval1End) {\n            $intersectionEnd = $intersectionEnd + 1;\n\
    \        }\n    }\n\n    if ($intersectionStart === $intersectionEnd) {\n    \
    \    return \"NO\";\n    }\n\n    if ($intersectionStart > $intersectionEnd) {\n\
    \        return \"NO\";\n    }\n\n    if ($intersectionStart === $interval1Start)\
    \ {\n        return \"YES\";\n    }\n\n    if ($intersectionStart === $interval2Start)\
    \ {\n        return \"YES\";\n    }\n\n    return \"YES\";\n}\n", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 0) return \"NO\";\n    if ($intersectionLength\
    \ == 1) return \"YES\";\n    if ($intersectionLength == 2 && $intersectionStart\
    \ <= $intersectionEnd) return \"YES\";\n    if ($intersectionLength == 2 && $intersectionStart\
    \ > $intersectionEnd) return \"NO\";\n    if ($intersectionLength == 2 && $intersectionStart\
    \ > $intersectionEnd && $intersectionStart <= $intersectionEnd) return \"YES\"\
    ;\n    if ($intersectionLength == 2 && $intersectionStart <= $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd && $intersectionStart <= $intersectionEnd)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $intersectionStart > $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd) return \"NO\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart > $intersectionEnd && $intersectionStart > $intersectionEnd)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $intersectionStart <= $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd && $intersectionStart <= $intersectionEnd)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $intersectionStart <= $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd && $intersectionStart > $intersectionEnd)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $intersectionStart > $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd && $intersectionStart <= $intersectionEnd)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $intersectionStart > $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd && $intersectionStart > $intersectionEnd)\
    \ return \"YES\";\n    if ($intersectionLength == 2 && $intersectionStart <= $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd && $intersectionStart > $intersectionEnd\
    \ && $intersectionStart <= $intersectionEnd) return \"YES\";\n    if ($intersectionLength\
    \ == 2 && $intersectionStart <= $intersectionEnd && $intersectionStart > $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd && $intersectionStart <= $intersectionEnd)\
    \ return \"NO\";\n    if ($intersectionLength == 2 && $intersectionStart > $intersectionEnd\
    \ && $intersectionStart > $intersectionEnd && $intersectionStart > $", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    $intersectionLength = 0;\n    $interval1Start\
    \ = $interval1End;\n    $interval2Start = $interval2End;\n    $interval1End++;\n\
    \    $interval2End++;\n    while ($interval1Start <= $interval1End && $interval2Start\
    \ <= $interval2End) {\n        if ($interval1Start <= $interval2Start && $interval1End\
    \ >= $interval2End) {\n            $intersectionLength++;\n            $interval1Start++;\n\
    \            $interval1End++;\n            $interval2Start++;\n            $interval2End++;\n\
    \        } else if ($interval1Start <= $interval2Start && $interval1End > $interval2End)\
    \ {\n            $intersectionLength++;\n            $interval1Start++;\n    \
    \        $interval1End++;\n        } else if ($interval1Start > $interval2Start\
    \ && $interval1End >= $interval2End) {\n            $intersectionLength++;\n \
    \           $interval2Start++;\n            $interval2End++;\n        } else if\
    \ ($interval1Start > $interval2Start && $interval1End > $interval2End) {\n   \
    \         $intersectionLength++;\n            $interval1Start++;\n           \
    \ $interval1End++;\n            $interval2Start++;\n            $interval2End++;\n\
    \        }\n    }\n    if ($interval1Start <= $interval1End && $interval2Start\
    \ <= $interval2End) {\n        $intersectionLength++;\n    }\n    if ($intersectionLength\
    \ > 1) {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }\n\
    }", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1[0] = $interval1[0] <= $interval2[0] ? $interval1[0]\
    \ : $interval2[0];\n    $interval1[1] = $interval1[1] <= $interval2[1] ? $interval1[1]\
    \ : $interval2[1];\n    $interval1[0] = $interval1[0] > $interval2[0] ? $interval1[0]\
    \ : $interval2[0];\n    $interval1[1] = $interval1[1] > $interval2[1] ? $interval1[1]\
    \ : $interval2[1];\n    $interval1[0] = $interval1[0] < $interval2[0] ? $interval1[0]\
    \ : $interval2[0];\n    $interval1[1] = $interval1[1] < $interval2[1] ? $interval1[1]\
    \ : $interval2[1];\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 1) {\n        return $intersection[0];\n    }\n\
    \    if (count($intersection) == 2) {\n        return $intersection[0];\n    }\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    if (count($intersection)\
    \ == 1) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1Start=$interval1[0];\n\
    \    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n\
    \    $intersectionStart=$interval1Start;\n    $intersectionEnd=$interval1End;\n\
    \    $intersectionLength=1;\n    while($intersectionStart<$interval1End && $intersectionEnd<$interval2Start)\
    \ {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd]) {\n\
    \            $intersectionStart++;\n        } else {\n            $intersectionEnd++;\n\
    \        }\n        $intersectionLength++;\n    }\n    if($intersectionStart<$interval1End\
    \ && $intersectionEnd<$interval2Start) {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd])\
    \ {\n            $intersectionStart++;\n        } else {\n            $intersectionEnd++;\n\
    \        }\n        $intersectionLength++;\n    }\n    if($intersectionStart<$interval1End\
    \ && $intersectionEnd<$interval2Start) {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd])\
    \ {\n            $intersectionStart++;\n        } else {\n            $intersectionEnd++;\n\
    \        }\n        $intersectionLength++;\n    }\n    if($intersectionStart<$interval1End\
    \ && $intersectionEnd<$interval2Start) {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd])\
    \ {\n            $intersectionStart++;\n        } else {\n            $intersectionEnd++;\n\
    \        }\n        $intersectionLength++;\n    }\n    if($intersectionStart<$interval1End\
    \ && $intersectionEnd<$interval2Start) {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd])\
    \ {\n            $intersectionStart++;\n        } else {\n            $intersectionEnd++;\n\
    \        }\n        $intersectionLength++;\n    }\n    if($intersectionStart<$interval1End\
    \ && $intersectionEnd<$interval2Start) {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd])\
    \ {\n            $intersectionStart++;\n        } else {\n            $intersectionEnd++;\n\
    \        }\n        $intersectionLength++;\n    }\n    if($intersectionStart<$interval1End\
    \ && $intersectionEnd<$interval2Start) {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd])\
    \ {\n            $intersectionStart++;\n        } else {\n            $intersectionEnd++;\n\
    \        }\n        $intersectionLength++;\n    }\n    if($intersectionStart<$interval1End\
    \ && $intersectionEnd<$interval2Start) {\n        if($interval1[$intersectionStart]<$interval2[$intersectionEnd])\
    \ {\n            $intersectionStart++;\n        } else {\n            $", "  \
    \  $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"YES\";\n  \
    \  }\n    $prime = true;\n    for ($i = 0; $i < $length; $i++) {\n        if ($intersection[$i]\
    \ % 2 == 0) {\n            $prime = false;\n            break;\n        }\n  \
    \  }\n    if ($prime) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
  "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    $intersectionLength\
    \ = 0;\n    $interval1Start = $interval1End;\n    $interval2Start = $interval2End;\n\
    \    while ($interval1Start <= $interval2Start) {\n        $interval1End++;\n\
    \        $interval1Start++;\n    }\n    while ($interval2Start <= $interval1End)\
    \ {\n        $interval2End++;\n        $interval2Start++;\n    }\n    if ($interval1Start\
    \ <= $interval2End) {\n        $intersectionLength++;\n    }\n    if ($interval1End\
    \ <= $interval2Start) {\n        $intersectionLength++;\n    }\n    if ($intersectionLength\
    \ == 2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n   \
    \ }\n}", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n \
    \   $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    if\
    \ ($interval1End > $interval2End) {\n        $interval1 = $interval1[1];\n   \
    \     $interval2 = $interval2[1];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[0];\n\
    \    }\n    $interval1Start = $interval1[0];\n    $interval2Start = $interval2[0];\n\
    \    if ($interval1Start > $interval2Start) {\n        $interval1 = $interval1[1];\n\
    \        $interval2 = $interval2[1];\n    }\n    if ($interval1Start < $interval2Start)\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[0];\n\
    \    }\n    $interval1Length = $interval1End - $interval1Start;\n    $interval2Length\
    \ = $interval2End - $interval2Start;\n    if ($interval1Length > $interval2Length)\
    \ {\n        $interval1 = $interval1[1];\n        $interval2 = $interval2[1];\n\
    \    }\n    if ($interval1Length < $interval2Length) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[0];\n    }\n    $intersectionLength = $interval1Length\
    \ + $interval2Length;\n    if ($intersectionLength > 1) {\n        $intersectionLength\
    \ = $intersectionLength - 1;\n    }\n    if ($intersectionLength == 1) {\n   \
    \     return \"YES\";\n    }\n    if ($intersectionLength == 0) {\n        return\
    \ \"NO\";\n    }\n    if ($intersectionLength == 2) {\n        return \"YES\"\
    ;\n    }\n    if ($intersectionLength > 2) {\n        return \"NO\";\n    }\n}",
  "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Length =\
    \ $interval1End - $interval1[0];\n    $interval2Length = $interval2End - $interval2[0];\n\
    \    if ($interval1Length > $interval2Length) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[0];\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n        $interval1Length = $interval1End\
    \ - $interval1[0];\n        $interval2Length = $interval2End - $interval2[0];\n\
    \    }\n    if ($interval1Length == $interval2Length) {\n        if ($interval1End\
    \ > $interval2End) {\n            $interval1 = $interval1[0];\n            $interval2\
    \ = $interval2[0];\n            $interval1End = $interval1[1];\n            $interval2End\
    \ = $interval2[1];\n            $interval1Length = $interval1End - $interval1[0];\n\
    \            $interval2Length = $interval2End - $interval2[0];\n        }\n  \
    \      if ($interval1End < $interval2End) {\n            $interval1 = $interval1[0];\n\
    \            $interval2 = $interval2[0];\n            $interval1End = $interval1[1];\n\
    \            $interval2End = $interval2[1];\n            $interval1Length = $interval1End\
    \ - $interval1[0];\n            $interval2Length = $interval2End - $interval2[0];\n\
    \        }\n        if ($interval1Length > 1) {\n            $interval1 = $interval1[0];\n\
    \            $interval2 = $interval2[0];\n            $interval1End = $interval1[1];\n\
    \            $interval2End = $interval2[1];\n            $interval1Length = $interval1End\
    \ - $interval1[0];\n            $interval2Length = $interval2End - $interval2[0];\n\
    \        }\n        if ($interval1Length == 1) {\n            if ($interval1[0]\
    \ == $interval2[0]) {\n                return \"YES\";\n            } else {\n\
    \                return \"NO\";\n            }\n        }\n    }\n    if ($interval1Length\
    \ > $interval2Length) {\n        $interval1 = $interval1[0];\n        $interval2\
    \ = $interval2[0];\n        $interval1End = $interval1[1];\n        $interval2End\
    \ = $interval2[1];\n        $interval1Length = $interval1End - $interval1[0];\n\
    \        $interval2Length = $interval2End - $interval2[0];\n    }\n    if ($interval1Length\
    \ == $interval2Length) {\n        if ($interval1End > $interval2End) {\n     \
    \       $", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n\
    \    if ($interval1Start > $interval2Start) {\n        $interval1Start = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n \
    \   }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \n    while ($intersectionStart <= $interval2End) {\n        if ($intersectionEnd\
    \ % $interval1Start === 0) {\n            $intersectionEnd = $intersectionEnd\
    \ / $interval1Start;\n        } else {\n            $intersectionEnd = $intersectionEnd\
    \ / $interval1End + $interval1Start;\n        }\n        $intersectionStart++;\n\
    \    }\n\n    if ($intersectionStart === $interval2End) {\n        return \"NO\"\
    ;\n    }\n\n    if ($intersectionEnd % $interval1Start === 0) {\n        return\
    \ \"NO\";\n    }\n\n    return \"YES\";\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1Length\
    \ = count($interval1);\n    $interval2Length = count($interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    $intersectionLength = count($intersection);\n\
    \    if ($intersectionLength > 0) {\n        if ($interval1Length > $interval2Length)\
    \ {\n            $interval1Length = $interval2Length;\n        }\n        if ($interval1Length\
    \ == $interval2Length) {\n            if ($intersectionLength == 1) {\n      \
    \          return \"YES\";\n            }\n            if ($intersectionLength\
    \ > 1) {\n                return \"NO\";\n            }\n        }\n    }\n  \
    \  return \"NO\";\n}\n", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[0], $interval1[1]]);\n    $interval2 = array_merge($interval2, [$interval2[0],\
    \ $interval2[1]]);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2\
    \ = array_slice($interval2, 0, -1);\n    $intersect = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersect) === 0) {\n        return 'NO';\n   \
    \ }\n    $prime = array_reduce($intersect, function ($carry, $item) {\n      \
    \  return $carry && $item > 1;\n    });\n    return $prime ? 'YES' : 'NO';\n}",
  "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n    $interval1Length =\
    \ $interval1End - $interval1Start;\n    $interval2Length = $interval2End - $interval2Start;\n\
    \    $intersectionLength = $interval1Length + $interval2Length;\n    if ($intersectionLength\
    \ === 0) return \"NO\";\n    if ($intersectionLength === 1) return \"YES\";\n\
    \    if ($intersectionLength === 2) return \"YES\";\n    if ($intersectionLength\
    \ === 3) return \"YES\";\n    if ($intersectionLength === 5) return \"YES\";\n\
    \    if ($intersectionLength === 7) return \"YES\";\n    if ($intersectionLength\
    \ === 11) return \"YES\";\n    if ($intersectionLength === 13) return \"YES\"\
    ;\n    if ($intersectionLength === 17) return \"YES\";\n    if ($intersectionLength\
    \ === 19) return \"YES\";\n    if ($intersectionLength === 23) return \"YES\"\
    ;\n    if ($intersectionLength === 29) return \"YES\";\n    if ($intersectionLength\
    \ === 31) return \"YES\";\n    if ($intersectionLength === 37) return \"YES\"\
    ;\n    if ($intersectionLength === 43) return \"YES\";\n    if ($intersectionLength\
    \ === 49) return \"YES\";\n    if ($intersectionLength === 53) return \"YES\"\
    ;\n    if ($intersectionLength === 59) return \"YES\";\n    if ($intersectionLength\
    \ === 67) return \"YES\";\n    if ($intersectionLength === 73) return \"YES\"\
    ;\n    if ($intersectionLength === 79) return \"YES\";\n    if ($intersectionLength\
    \ === 83) return \"YES\";\n    if ($intersectionLength === 89) return \"YES\"\
    ;\n    if ($intersectionLength === 97) return \"YES\";\n    if ($intersectionLength\
    \ === 101) return \"YES\";\n    if ($intersectionLength === 107) return \"YES\"\
    ;\n    if ($intersectionLength === 113) return \"YES\";\n    if ($intersectionLength\
    \ === 119) return \"YES\";\n    if ($intersectionLength === 127) return \"YES\"\
    ;\n    if ($intersectionLength === 131) return \"YES\";\n    if ($intersectionLength\
    \ === 137) return \"YES\";\n    if ($intersectionLength === 143) return \"YES\"\
    ;\n    if ($intersectionLength === 149) return \"YES\";\n    if ($intersectionLength\
    \ === 153) return \"YES\";\n    if ($intersectionLength === 157) return \"YES\"\
    ;\n    if ($intersectionLength === 161) return \"YES\";\n    if ($intersectionLength\
    \ === 167) return \"YES\";\n    if ($intersectionLength === 173) return \"YES\"\
    ;\n    if ($intersectionLength === 179) return ", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \n    if ($intersectionStart >= $intersectionEnd) {\n        return \"NO\";\n\
    \    }\n\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\n\
    \    if ($intersectionLength % 2 != 0) {\n        return \"NO\";\n    }\n\n  \
    \  $isPrime = true;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $isPrime = false;\n        }\n        if\
    \ ($i % $i == 0) {\n            $isPrime = false;\n        }\n    }\n\n    if\
    \ ($isPrime) {\n        return \"YES\";\n    }\n\n    return \"NO\";\n}\n", " \
    \   $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n   \
    \ $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n    if\
    \ ($interval1Start > $interval2Start) {\n        $interval1Start = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n  \
    \  }\n    if ($interval1Start === $interval1End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1Start === $interval2Start) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start === $interval2End) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start > $interval2Start) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1End < $interval2End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1Start === $interval2Start) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start === $interval2End) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start > $interval2Start) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1End < $interval2End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1Start === $interval2Start) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start === $interval2End) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start > $interval2Start) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1End < $interval2End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1Start === $interval2Start) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start === $interval2End) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start > $interval2Start) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1End < $interval2End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1Start === $interval2Start) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start === $interval2End) {\n        return \"YES\"\
    ;\n    }\n    if ($interval1Start > $interval2Start) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1End < $interval2End) {\n        return \"NO\";\n \
    \   }\n    if ($interval1Start === $interval2Start) {\n        return \"YES",
  "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    $intersectionLength\
    \ = 0;\n    \n    if ($interval1End > $interval2End) {\n        $interval1 = $interval1[1];\n\
    \        $interval2 = $interval2[0];\n    }\n    \n    if ($interval1End < $interval2End)\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[1];\n\
    \    }\n    \n    if ($interval1 > $interval2) {\n        $interval1 = $interval1[1];\n\
    \        $interval2 = $interval2[0];\n    }\n    \n    if ($interval1 < $interval2)\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[1];\n\
    \    }\n    \n    if ($interval1 == $interval2) {\n        $intersectionLength\
    \ = 1;\n    }\n    \n    if ($interval1 == $interval1End) {\n        $intersectionLength\
    \ = 1;\n    }\n    \n    if ($interval2 == $interval2End) {\n        $intersectionLength\
    \ = 1;\n    }\n    \n    if ($intersectionLength == 1) {\n        return \"NO\"\
    ;\n    }\n    \n    if ($intersectionLength == 0) {\n        return \"NO\";\n\
    \    }\n    \n    if ($intersectionLength > 1) {\n        return \"YES\";\n  \
    \  }\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n\
    \    if ($interval1Start > $interval2Start) {\n        $interval1Start = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n \
    \   }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \n    while ($intersectionStart <= $intersectionEnd) {\n        if ($interval1Start\
    \ <= $intersectionStart && $intersectionStart <= $interval1End) {\n          \
    \  $intersectionStart = $intersectionStart + 1;\n        }\n        if ($interval2Start\
    \ <= $intersectionStart && $intersectionStart <= $interval2End) {\n          \
    \  $intersectionStart = $intersectionStart + 1;\n        }\n        if ($interval1Start\
    \ <= $intersectionEnd && $intersectionEnd <= $interval1End) {\n            $intersectionEnd\
    \ = $intersectionEnd + 1;\n        }\n        if ($interval2Start <= $intersectionEnd\
    \ && $intersectionEnd <= $interval2End) {\n            $intersectionEnd = $intersectionEnd\
    \ + 1;\n        }\n    }\n\n    if ($intersectionStart > $intersectionEnd) {\n\
    \        return \"NO\";\n    }\n\n    if ($intersectionStart % 2 != 0) {\n   \
    \     return \"NO\";\n    }\n\n    if ($intersectionEnd % 2 != 0) {\n        return\
    \ \"NO\";\n    }\n\n    if ($intersectionStart == $intersectionEnd) {\n      \
    \  return \"YES\";\n    }\n\n    return \"NO\";\n}\n", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    if ($interval1[1] < $interval2[0]) {\n \
    \       $interval1 = $interval1[1];\n    }\n    if ($interval2[1] < $interval1[0])\
    \ {\n        $interval2 = $interval2[1];\n    }\n    if ($interval1[1] > $interval2[1])\
    \ {\n        $interval1 = $interval1[0];\n    }\n    if ($interval2[1] > $interval1[1])\
    \ {\n        $interval2 = $interval2[0];\n    }\n    if ($interval1[0] > $interval2[0])\
    \ {\n        $interval1 = $interval1[1];\n    }\n    if ($interval2[0] > $interval1[0])\
    \ {\n        $interval2 = $interval2[1];\n    }\n    if ($interval1[0] < $interval2[0])\
    \ {\n        $interval1 = $interval1[0];\n    }\n    if ($interval2[0] < $interval1[0])\
    \ {\n        $interval2 = $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1])\
    \ {\n        $interval1 = $interval1[1];\n    }\n    if ($interval2[1] < $interval1[1])\
    \ {\n        $interval2 = $interval2[1];\n    }\n    if ($interval1[1] > $interval2[1])\
    \ {\n        $interval1 = $interval1[0];\n    }\n    if ($interval2[1] > $interval1[1])\
    \ {\n        $interval2 = $interval2[0];\n    }\n    if ($interval1[0] > $interval2[0])\
    \ {\n        $interval1 = $interval1[1];\n    }\n    if ($interval2[0] > $interval1[0])\
    \ {\n        $interval2 = $interval2[1];\n    }\n    if ($interval1[0] < $interval2[0])\
    \ {\n        $interval1 = $interval1[0];\n    }\n    if ($interval2[0] < $interval1[0])\
    \ {\n        $interval2 = $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1])\
    \ {\n        $interval1 = $interval1[1];\n    }\n    if ($interval2[1] < $interval1[1])\
    \ {\n        $interval2 = $interval2[1];\n    }\n    if ($interval1[1] > $interval2[1])\
    \ {\n        $interval1 = $interval1[0];\n    }\n    if ($interval2[1] > $interval1[1])\
    \ {\n        $interval2 = $interval2[0];\n    }\n    if ($interval1[0] > $interval2[0])\
    \ {\n        $interval1 = $interval1[1];\n    }\n    if ($interval2[0] > $interval1[0])\
    \ {\n        $interval2 = $interval2[1];\n    }\n    if ($interval1[0] < $interval2[0])\
    \ {\n", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n  \
    \  $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start\
    \ = $interval1[0];\n    $interval2Start = $interval2[0];\n    $interval1End =\
    \ $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n\
    \    $interval2Start = $interval2[0];\n    $interval1End = $interval1[1];\n  \
    \  $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n    $interval2Start\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    $interval1Start = $interval1[0];\n    $interval2Start = $interval2[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start\
    \ = $interval1[0];\n    $interval2Start = $interval2[0];\n    $interval1End =\
    \ $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n\
    \    $interval2Start = $interval2[0];\n    $interval1End = $interval1[1];\n  \
    \  $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n    $interval2Start\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    $interval1Start = $interval1[0];\n    $interval2Start = $interval2[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start\
    \ = $interval1[0];\n    $interval2Start = $interval2[0];\n    $interval1End =\
    \ $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n\
    \    $interval2Start = $interval2[0];\n    $interval1End = $interval1[1];\n  \
    \  $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n    $interval2Start\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    $interval1Start = $interval1[0];\n    $interval2Start = $interval2[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start\
    \ = $interval1[0];\n    $interval2Start = $interval2[0];\n    $interval1End =\
    \ $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n\
    \    $", "    $interval1 = array_map('intval', $interval1);\n    $interval2 =\
    \ array_map('intval', $interval2);\n    $interval1 = array_slice($interval1, 0,\
    \ -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection =\
    \ array_intersect($interval1, $interval2);\n    if (count($intersection) > 0)\
    \ {\n        if (count($intersection) == 1) {\n            return $intersection[0];\n\
    \        }\n        return count($intersection) == 2;\n    }\n    return false;\n\
    }\n", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart >= $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $intersectionLength = abs($intersectionEnd\
    \ - $intersectionStart);\n    if ($intersectionLength == 1) {\n        return\
    \ \"YES\";\n    }\n    $isPrime = true;\n    for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            if ($intersectionStart % $i\
    \ == 0 && $intersectionEnd % $i == 0) {\n                $isPrime = false;\n \
    \               break;\n            }\n        }\n    }\n    if ($isPrime) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $intersection = array();\n    $intersection[]\
    \ = $interval1;\n    $intersection[] = $interval2;\n    $intersection = array_merge($intersection,\
    \ array_reverse($intersection));\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v[0];\n    }, $intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v[1];\n    }, $intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection);\n    $intersection = array_map(function($v){\n\
    \        return $v[0];\n    }, $intersection);\n    $intersection = array_map(function($v){\n\
    \        return $v[1];\n    }, $intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v[0];\n    }, $intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v[1];\n    }, $intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection);\n    $intersection = array_map(function($v){\n\
    \        return $v[0];\n    }, $intersection);\n    $intersection = array_map(function($v){\n\
    \        return $v[1];\n    }, $intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v[0];\n    }, $intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v[1];\n    }, $intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_filter($intersection);\n    $intersection = array_map(function($v){\n\
    \        return $v[0];\n    }, $intersection);\n    $intersection = array_map(function($v){\n\
    \        return $v[1];\n    }, $intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $intersection = array_filter($intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v[0];\n    }, $intersection);\n\
    \    $intersection = array_map(function($v){\n        return $v", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart > $intersectionEnd) {\n        return\
    \ \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n    $primeNumbers\
    \ = array();\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $primeNumbers[] = $i;\n        }\n    }\n    if\
    \ (count($primeNumbers) == $intersectionLength) {\n        return \"YES\";\n \
    \   }\n    return \"NO\";\n}", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n    $intersectionLength\
    \ = abs($intersectionEnd - $intersectionStart);\n    if ($intersectionLength ==\
    \ 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength == 2 && $intersectionStart\
    \ != $intersectionEnd) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ == 2 && $intersectionStart == $intersectionEnd) {\n        return \"YES\";\n\
    \    }\n    $isPrime = true;\n    for ($i = 2; $i <= $intersectionLength; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            if ($intersectionStart % $i == 0\
    \ && $intersectionEnd % $i == 0) {\n                $isPrime = false;\n      \
    \          break;\n            }\n        } else {\n            if ($intersectionStart\
    \ % $i == 0 && $intersectionEnd % $i == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n    }\n    if ($isPrime) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", " \
    \   $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    $intersectionStart\
    \ = max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    $intersectionLength = abs($intersectionEnd - $intersectionStart);\n\
    \    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n    if ($intersectionLength\
    \ > 1) {\n        return \"NO\";\n    }\n    $primes = array();\n    for ($i =\
    \ 2; $i <= $intersectionLength; $i++) {\n        if ($i % 2 == 0) {\n        \
    \    $primes[] = $i;\n        }\n    }\n    if (in_array($intersectionLength,\
    \ $primes)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "   \
    \ $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n \
    \   }\n\n    if ($interval1Start >= $interval2Start && $interval1End <= $interval2End)\
    \ {\n        return \"YES\";\n    }\n    if ($interval1Start <= $interval2Start\
    \ && $interval1End >= $interval2End) {\n        return \"YES\";\n    }\n    if\
    \ ($interval1Start >= $interval2Start && $interval1End < $interval2End) {\n  \
    \      return \"NO\";\n    }\n    if ($interval1Start <= $interval2Start && $interval1End\
    \ > $interval2End) {\n        return \"NO\";\n    }\n}\n", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    $interval1Start = $interval1[0];\n    $interval2Start\
    \ = $interval2[0];\n    if ($interval1End > $interval2Start) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval2End > $interval1Start) {\n      \
    \  $interval2End = $interval2End;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1Start = $interval1Start;\n    }\n    if ($interval2Start\
    \ > $interval1End) {\n        $interval2Start = $interval2Start;\n    }\n    if\
    \ ($interval1Start > $interval2Start) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1Start =\
    \ $interval1Start;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1Start > $interval2Start) {\n    \
    \    $interval1Start = $interval1Start;\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        $interval1End = $interval1End;\n    }\n    if ($interval1Start >\
    \ $interval2Start) {\n        $interval1Start = $interval1Start;\n    }\n    if\
    \ ($interval1End > $interval2End) {\n        $interval1End = $interval1End;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval1Start;\n    }\n    if ($interval1End > $interval2End) {\n      \
    \  $interval1End = $interval1End;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval1Start;\n    }\n    if ($interval1End\
    \ > $interval2End) {\n        $interval1End = $interval1End;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval1Start;\n    }\n  \
    \  if ($interval1End > $interval2End) {\n        $interval1End = $interval1End;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval1Start;\n    }\n    if ($interval1End > $interval2End) {\n      \
    \  $interval1End = $interval1End;\n    }\n    if ($interval1", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End < $interval2End) {\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        return \"NO\";\n    }\n    $interval1Start = $interval1[0];\n   \
    \ $interval2Start = $interval2[0];\n    if ($interval1Start < $interval2Start)\
    \ {\n        $interval1Start = $interval1[0];\n        $interval2Start = $interval2[0];\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval1[0];\n        $interval2Start = $interval2[0];\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        return \"NO\";\n    }\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End < $interval2End) {\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        return \"NO\";\n    }\n    $interval1Start = $interval1[0];\n   \
    \ $interval2Start = $interval2[0];\n    if ($interval1Start < $interval2Start)\
    \ {\n        $interval1Start = $interval1[0];\n        $interval2Start = $interval2[0];\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval1[0];\n        $interval2Start = $interval2[0];\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        return \"NO\";\n    }\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End < $interval2End) {\n\
    \        $interval1End = $interval1[1];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End > $interval2End)\
    \ {\n        return \"NO", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersect =\
    \ array_intersect($interval1, $interval2);\n    if (count($intersect) > 0) {\n\
    \        $intersect = array_slice($intersect, 0, -1);\n        if (count($intersect)\
    \ == 1) {\n            return $intersect[0];\n        } else {\n            return\
    \ $intersect;\n        }\n    } else {\n        return \"NO\";\n    }\n}\n", " \
    \   $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n   \
    \ $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n   \
    \ if ($interval1Start > $interval2Start) {\n        $interval1Start = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n \
    \   }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \n    while ($intersectionStart <= $intersectionEnd) {\n        if ($interval1Start\
    \ <= $intersectionStart && $intersectionStart <= $interval1End) {\n          \
    \  $intersectionStart++;\n        }\n        if ($interval2Start <= $intersectionStart\
    \ && $intersectionStart <= $interval2End) {\n            $intersectionStart++;\n\
    \        }\n        if ($interval1Start <= $intersectionEnd && $intersectionEnd\
    \ <= $interval1End) {\n            $intersectionEnd--;\n        }\n        if\
    \ ($interval2Start <= $intersectionEnd && $intersectionEnd <= $interval2End) {\n\
    \            $intersectionEnd--;\n        }\n    }\n\n    if ($intersectionStart\
    \ > $intersectionEnd) {\n        return \"NO\";\n    }\n\n    if ($intersectionStart\
    \ <= $interval1Start && $intersectionStart <= $interval2Start) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionStart <= $interval2Start && $intersectionStart\
    \ <= $interval1Start) {\n        return \"YES\";\n    }\n    if ($intersectionStart\
    \ <= $interval1Start && $intersectionStart <= $interval2End) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionStart <= $interval2Start && $intersectionStart\
    \ <= $interval1End) {\n        return \"YES\";\n    }\n    if ($intersectionStart\
    \ <= $interval1End && $intersectionStart <= $interval2End) {\n        return \"\
    YES\";\n    }\n    if ($intersectionStart <= $interval2End && $intersectionStart\
    \ <= $interval1End) {\n        return \"YES\";\n    }\n    if ($intersectionStart\
    \ <= $interval1End && $intersectionStart <= $interval2End) {\n        return \"\
    YES\";\n    }\n    if ($intersectionStart <= $interval2End && $intersectionStart\
    \ <= $interval1End) {\n        return \"YES\";\n    }\n    if ($intersectionStart\
    \ <= $interval1End && $intersectionStart <= $interval2End) {\n        return \"\
    YES\";\n    }\n    if ($intersectionStart ", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    $intersection = array_map(function\
    \ ($item) {\n        return $item == $item ? $item : $item - 1;\n    }, $intersection);\n\
    \    $intersection = array_filter($intersection, function ($item) {\n        return\
    \ $item > 0;\n    });\n    if (count($intersection) == 0) {\n        return \"\
    NO\";\n    }\n    $length = count($intersection);\n    if ($length == 1) {\n \
    \       return \"YES\";\n    }\n    if ($length == 2) {\n        if ($intersection[0]\
    \ % 2 == 0 && $intersection[1] % 2 == 0) {\n            return \"YES\";\n    \
    \    }\n        return \"NO\";\n    }\n    $primes = array();\n    for ($i = 3;\
    \ $i <= $length; $i += 2) {\n        if ($length == $i) {\n            return\
    \ \"YES\";\n        }\n        if ($length == $i - 1) {\n            return \"\
    NO\";\n        }\n        if ($length == $i * 2) {\n            if ($intersection[$i]\
    \ % 2 == 0 && $intersection[$i - 1] % 2 == 0) {\n                return \"YES\"\
    ;\n            }\n        }\n        if ($length == $i * 2 + 1) {\n          \
    \  if ($intersection[$i] % 2 == 0 && $intersection[$i - 1] % 2 == 0) {\n     \
    \           return \"NO\";\n            }\n        }\n        if ($length == $i\
    \ * 2 + 2) {\n            if ($intersection[$i] % 2 == 0 && $intersection[$i -\
    \ 1] % 2 == 0) {\n                return \"NO\";\n            }\n        }\n \
    \       if ($length == $i * 2 + 3) {\n            if ($intersection[$i] % 2 ==\
    \ 0 && $intersection[$i - 1] % 2 == 0) {\n                return \"NO\";\n   \
    \         }\n        }\n        if ($length == $i * 2 + 4) {\n            if ($intersection[$i]\
    \ % 2 == 0 && $intersection[$i - 1] % 2 == 0) {\n                return \"NO\"\
    ;\n            }\n        }\n        if ($length == $i * 2 + 5) {\n          \
    \  if ($intersection[$i] % 2 == 0 && $intersection[$i - 1] % 2 == 0) {\n     \
    \           return \"NO\";\n            }\n        }\n        if ($length == $i\
    \ * 2 + 6) {\n            if ($intersection[$i] % 2 == 0 && $intersection[$i -\
    \ 1] % 2 == 0) {\n                return \"NO\";\n            }\n        }\n \
    \       if ($length == $i * 2 + 7) {\n            if ($intersection[$i] % 2 ==\
    \ 0 && $intersection[$i - 1] % 2 == 0) {\n                return \"NO\";\n   \
    \         }\n        }\n        if ($length == $i * 2 + 8) {\n            if ($intersection[$i]\
    \ % 2 == 0 && $intersection[$i - 1] % 2 == 0) {\n                return \"NO\"\
    ;\n            }\n", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n\
    \    if ($interval1[1] < $interval2[0]) {\n        $interval1 = $interval1[1];\n\
    \    }\n    if ($interval2[1] < $interval1[0]) {\n        $interval2 = $interval2[1];\n\
    \    }\n    if ($interval1[1] > $interval2[1]) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[0];\n    }\n    if ($interval1[0] > $interval2[1])\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[1];\n\
    \    }\n    if ($interval1[0] < $interval2[0]) {\n        $interval1 = $interval1[1];\n\
    \        $interval2 = $interval2[1];\n    }\n    if ($interval1[0] > $interval2[0])\
    \ {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[0];\n\
    \    }\n    if ($interval1[0] == $interval2[0]) {\n        if ($interval1[1] >\
    \ $interval2[1]) {\n            $interval1 = $interval1[1];\n            $interval2\
    \ = $interval2[1];\n        }\n        if ($interval1[1] < $interval2[1]) {\n\
    \            $interval1 = $interval1[1];\n            $interval2 = $interval2[1];\n\
    \        }\n        if ($interval1[1] > $interval2[1]) {\n            $interval1\
    \ = $interval1[1];\n            $interval2 = $interval2[1];\n        }\n     \
    \   if ($interval1[1] < $interval2[1]) {\n            $interval1 = $interval1[1];\n\
    \            $interval2 = $interval2[1];\n        }\n        if ($interval1[1]\
    \ > $interval2[1]) {\n            $interval1 = $interval1[1];\n            $interval2\
    \ = $interval2[1];\n        }\n        if ($interval1[1] < $interval2[1]) {\n\
    \            $interval1 = $interval1[1];\n            $interval2 = $interval2[1];\n\
    \        }\n        if ($interval1[1] > $interval2[1]) {\n            $interval1\
    \ = $interval1[1];\n            $interval2 = $interval2[1];\n        }\n     \
    \   if ($interval1[1] < $interval2[1]) {\n            $interval1 = $interval1[1];\n\
    \            $interval2 = $interval2[1];\n        }\n        if ($interval1[1]\
    \ > $interval2[1]) {\n            $interval1 = $interval1[1];\n            $interval2\
    \ = $interval2[1];\n        }\n        if ($interval1[1] < $interval2[1]) {\n\
    \            $interval1 = $interval1[1];\n            $interval2 = $interval2[1];\n\
    \        }\n        if ($interval1[1] > $interval2[1]) {\n            $interval1\
    \ = $interval1[1];\n            $", "    $interval1Start = $interval1[0];\n  \
    \  $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End\
    \ = $interval2[1];\n\n    if ($interval1Start > $interval2End) {\n        $interval1Start\
    \ = $interval1End;\n    }\n    if ($interval2Start > $interval1End) {\n      \
    \  $interval2Start = $interval2End;\n    }\n\n    $intersectionStart = $interval1Start;\n\
    \    $intersectionEnd = $interval2Start;\n\n    while ($intersectionStart <= $intersectionEnd)\
    \ {\n        if ($interval1End <= $intersectionStart + 1) {\n            $intersectionEnd\
    \ = $intersectionStart + 1;\n        }\n        if ($interval2End <= $intersectionStart\
    \ + 1) {\n            $intersectionEnd = $intersectionStart + 1;\n        }\n\
    \        $intersectionStart++;\n    }\n\n    if ($intersectionStart <= $intersectionEnd)\
    \ {\n        if ($interval1End <= $intersectionEnd + 1) {\n            $intersectionEnd\
    \ = $intersectionEnd + 1;\n        }\n        if ($interval2End <= $intersectionEnd\
    \ + 1) {\n            $intersectionEnd = $intersectionEnd + 1;\n        }\n  \
    \  }\n\n    if ($intersectionStart <= $intersectionEnd) {\n        if ($interval1End\
    \ <= $intersectionEnd + 1) {\n            $intersectionEnd = $intersectionEnd\
    \ + 1;\n        }\n        if ($interval2End <= $intersectionEnd + 1) {\n    \
    \        $intersectionEnd = $intersectionEnd + 1;\n        }\n    }\n\n    if\
    \ ($intersectionStart <= $intersectionEnd) {\n        if ($interval1End <= $intersectionEnd\
    \ + 1) {\n            $intersectionEnd = $intersectionEnd + 1;\n        }\n  \
    \      if ($interval2End <= $intersectionEnd + 1) {\n            $intersectionEnd\
    \ = $intersectionEnd + 1;\n        }\n    }\n\n    if ($intersectionStart <= $intersectionEnd)\
    \ {\n        if ($interval1End <= $intersectionEnd + 1) {\n            $intersectionEnd\
    \ = $intersectionEnd + 1;\n        }\n        if ($interval2End <= $intersectionEnd\
    \ + 1) {\n            $intersectionEnd = $intersectionEnd + 1;\n        }\n  \
    \  }\n\n    if ($intersectionStart <= $intersectionEnd) {\n        if ($interval1End\
    \ <= $intersectionEnd + 1) {\n            $intersectionEnd = $intersectionEnd\
    \ + 1;\n        }\n        if ($interval2End <= $intersectionEnd + 1) {\n    \
    \        $intersectionEnd = $intersectionEnd + 1;\n        }\n    }\n\n    if\
    \ ($intersectionStart <= $intersectionEnd) {\n        if ($interval1End <= $intersectionEnd\
    \ + 1) {\n            $intersectionEnd = $intersectionEnd + 1;\n        }\n  \
    \      if ($interval2End <= $intersectionEnd + 1) {\n            $intersectionEnd\
    \ = $intersectionEnd + 1;\n        }\n    }", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    $intersectionStart = $interval1Start <\
    \ $interval2Start ? $interval1Start : $interval2Start;\n    $intersectionEnd =\
    \ $interval1End < $interval2End ? $interval1End : $interval2End;\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart;\n    if ($intersectionLength > 0) {\n\
    \        if ($intersectionLength % 2 == 0) {\n            if ($intersectionStart\
    \ % 2 == 0 && $intersectionEnd % 2 == 0) {\n                if ($intersectionStart\
    \ % 2 == 0) {\n                    if ($intersectionEnd % 2 == 0) {\n        \
    \                return true;\n                    } else {\n                \
    \        return false;\n                    }\n                } else {\n    \
    \                if ($intersectionEnd % 2 == 0) {\n                        return\
    \ true;\n                    } else {\n                        return false;\n\
    \                    }\n                }\n            } else {\n            \
    \    if ($intersectionStart % 2 == 0) {\n                    if ($intersectionEnd\
    \ % 2 == 0) {\n                        return true;\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if ($intersectionEnd % 2 == 0) {\n      \
    \                  return true;\n                    } else {\n              \
    \          return false;\n                    }\n                }\n         \
    \   }\n        } else {\n            if ($intersectionStart % 2 == 0 && $intersectionEnd\
    \ % 2 == 0) {\n                if ($intersectionStart % 2 == 0) {\n          \
    \          if ($intersectionEnd % 2 == 0) {\n                        return true;\n\
    \                    } else {\n                        return false;\n       \
    \             }\n                } else {\n                    if ($intersectionEnd\
    \ % 2 == 0) {\n                        return true;\n                    } else\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            } else {\n                if ($intersectionStart % 2 ==\
    \ 0) {\n                    if ($intersectionEnd % 2 == 0) {\n               \
    \         return true;\n                    } else {\n                       \
    \ return false;\n                    }\n                } else {\n           \
    \         if ($intersectionEnd % 2 == 0) {\n                        return true;\n\
    \                    } else {\n                        return false;\n       \
    \             }\n                }\n            }\n        }\n    } else {\n \
    \       if ($intersectionStart % 2 == 0 && $intersectionEnd % 2 == 0) {\n    \
    \        if ($intersectionStart % 2 == 0) {\n                if ($intersectionEnd\
    \ % 2 == 0) {\n                    return true;\n                } else {\n  \
    \                  return false;\n                }\n            } else {\n  \
    \              if ($intersectionEnd % 2 == 0) {\n                    return true;\n\
    \                } else {\n                    return false;\n               \
    \ }\n            }\n        } else {\n            if ($intersectionStart % 2 ==\
    \ 0) {\n                if ($intersectionEnd % 2 == 0) {\n                   \
    \ return true;\n                } else {\n                    return false;\n\
    \                }\n            } else {\n                if ($intersectionEnd\
    \ % 2 == 0) {\n                    return true;\n                } else {\n  \
    \                  return false;\n                }\n            }\n        }\n\
    \    }\n}", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start;\n\
    \    }\n    if ($interval2Start > $interval1End) {\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval1End;\n    }\n    if ($interval2Start > $interval1Start) {\n    \
    \    $interval2Start = $interval2End;\n    }\n    $intersectionStart = $interval1Start;\n\
    \    $intersectionEnd = $interval1End;\n    if ($interval1End > $interval2End)\
    \ {\n        $intersectionEnd = $interval2End;\n    }\n    if ($interval2End >\
    \ $interval1End) {\n        $intersectionEnd = $interval1End;\n    }\n    if ($interval1End\
    \ > $interval2Start) {\n        $intersectionStart = $interval2Start;\n    }\n\
    \    if ($interval2End > $interval1Start) {\n        $intersectionStart = $interval1Start;\n\
    \    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n   \
    \ if ($intersectionLength > 1) {\n        if ($intersectionLength % 2 === 0) {\n\
    \            $isPrime = true;\n        } else {\n            $isPrime = false;\n\
    \        }\n    } else {\n        $isPrime = true;\n    }\n    return $isPrime;\n\
    }", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2End = $interval2[1];\n    $interval1Start =\
    \ $interval1[0];\n    $interval2Start = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    $interval1Start = $interval1[0];\n  \
    \  $interval2Start = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval1End;\n    }\n    if ($interval1End < $interval2End) {\n        $interval1End\
    \ = $interval1Start;\n    }\n    if ($interval1Start > $interval2End) {\n    \
    \    $interval1End = $interval2End;\n    }\n    if ($interval1End < $interval2Start)\
    \ {\n        $interval1End = $interval2Start;\n    }\n    if ($interval1Start\
    \ > $interval2End) {\n        $interval1End = $interval2End;\n    }\n    if ($interval1End\
    \ < $interval2Start) {\n        $interval1End = $interval2Start;\n    }\n    if\
    \ ($interval1Start > $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        $interval1End = $interval2Start;\n\
    \    }\n    if ($interval1Start > $interval2End) {\n        $interval1End = $interval2End;\n",
  "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start > $interval2End) {\n        return \"NO\";\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        return \"NO\";\n \
    \   }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \n    while ($intersectionStart <= $interval1End) {\n        $intersectionEnd\
    \ = $intersectionStart + 1;\n        if ($intersectionEnd > $interval2End) {\n\
    \            $intersectionEnd = $interval2End;\n        }\n        if ($intersectionEnd\
    \ >= $interval2Start) {\n            $intersectionStart = $intersectionEnd + 1;\n\
    \            if ($intersectionStart > $interval2Start) {\n                $intersectionStart\
    \ = $interval2Start;\n            }\n            if ($intersectionStart <= $interval2End)\
    \ {\n                return \"YES\";\n            }\n        }\n    }\n    return\
    \ \"NO\";\n}\n", "    $interval1 = array_map(function ($value) {\n        return\
    \ $value[0];\n    }, $interval1);\n    $interval2 = array_map(function ($value)\
    \ {\n        return $value[0];\n    }, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) > 0) {\n        return $intersection;\n\
    \    }\n    return \"NO\";\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n\n    $intersectionStart = max($interval1Start, $interval2Start);\n\
    \    $intersectionEnd = min($interval1End, $interval2End);\n\n    if ($intersectionStart\
    \ >= $intersectionEnd) {\n        return \"NO\";\n    }\n\n    $intersectionLength\
    \ = abs($intersectionEnd - $intersectionStart);\n\n    if ($intersectionLength\
    \ == 1) {\n        return \"YES\";\n    }\n\n    $isPrime = true;\n    for ($i\
    \ = 2; $i <= $intersectionLength; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      if ($intersectionStart % $i == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        } else {\n            if ($intersectionEnd\
    \ % $i == 0) {\n                $isPrime = false;\n                break;\n  \
    \          }\n        }\n    }\n\n    return $isPrime ? \"YES\" : \"NO\";\n}\n",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, [$interval1[0], $interval1[1]]);\n\
    \    $interval2 = array_merge($interval2, [$interval2[0], $interval2[1]]);\n \
    \   $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) > 0) {\n        if (count($intersection) == 1) {\n   \
    \         return $intersection[0];\n        } else {\n            return $intersection;\n\
    \        }\n    } else {\n        return \"NO\";\n    }\n}\n", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart > $intersectionEnd) {\n        return\
    \ \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n    if ($intersectionLength\
    \ > 1) {\n        return \"NO\";\n    }\n    $primeNumbers = array();\n    $primeNumbers[2]\
    \ = true;\n    $primeNumbers[3] = true;\n    $primeNumbers[5] = true;\n    $primeNumbers[7]\
    \ = true;\n    $primeNumbers[11] = true;\n    $primeNumbers[13] = true;\n    $primeNumbers[17]\
    \ = true;\n    $primeNumbers[19] = true;\n    $primeNumbers[23] = true;\n    $primeNumbers[29]\
    \ = true;\n    $primeNumbers[31] = true;\n    $primeNumbers[37] = true;\n    $primeNumbers[41]\
    \ = true;\n    $primeNumbers[43] = true;\n    $primeNumbers[47] = true;\n    $primeNumbers[53]\
    \ = true;\n    $primeNumbers[59] = true;\n    $primeNumbers[61] = true;\n    $primeNumbers[67]\
    \ = true;\n    $primeNumbers[71] = true;\n    $primeNumbers[73] = true;\n    $primeNumbers[79]\
    \ = true;\n    $primeNumbers[83] = true;\n    $primeNumbers[89] = true;\n    $primeNumbers[97]\
    \ = true;\n    $primeNumbers[101] = true;\n    $primeNumbers[103] = true;\n  \
    \  $primeNumbers[107] = true;\n    $primeNumbers[109] = true;\n    $primeNumbers[113]\
    \ = true;\n    $primeNumbers[127] = true;\n    $primeNumbers[131] = true;\n  \
    \  $primeNumbers[137] = true;\n    $primeNumbers[139] = true;\n    $primeNumbers[143]\
    \ = true;\n    $primeNumbers[147] = true;\n    $primeNumbers[151] = true;\n  \
    \  $primeNumbers[157] = true;\n    $primeNumbers[161] = true;\n    $primeNumbers[163]\
    \ = true;\n    $primeNumbers[167] = true;\n    $primeNumbers[173] = true;\n  \
    \  $primeNumbers[179] = true;\n    $primeNumbers[183] = true;\n    $primeNumbers[187]\
    \ = true;\n    $primeNumbers[191] = true;\n    $primeNumbers[193] = true;\n  \
    \  $primeNumbers[197] = true;\n    $primeNumbers[", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1End < $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval2End < $interval1End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval2End > $interval1End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval1End\
    \ = $interval1End;\n    }\n    if ($interval1End > $interval2End) {\n        $interval2End\
    \ = $interval2End;\n", "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    if($interval1Length==$interval2Length){\n\
    \        if($interval1Start<=$interval2Start){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \            $interval1End=$interval1End+$interval1Length;\n        }else{\n \
    \           $interval1Start=$interval1Start+$interval1Length;\n            $interval1End=$interval1End+$interval1Length;\n\
    \        }\n    }\n    if($interval1Start>=$interval2Start){\n        $interval1Start=$interval1Start+$interval1Length;\n\
    \        $interval1End=$interval1End+$interval1Length;\n    }else{\n        $interval1Start=$interval1Start+$interval1Length;\n\
    \        $interval1End=$interval1End+$interval1Length;\n    }\n    if($interval1End<=$interval2End){\n\
    \        $interval1Start=$interval1Start+$interval1Length;\n        $interval1End=$interval1End+$interval1Length;\n\
    \    }else{\n        $interval1Start=$interval1Start+$interval1Length;\n     \
    \   $interval1End=$interval1End+$interval1Length;\n    }\n    if($interval1Start>=$interval2End){\n\
    \        $interval1Start=$interval1Start+$interval1Length;\n        $interval1End=$interval1End+$interval1Length;\n\
    \    }else{\n        $interval1Start=$interval1Start+$interval1Length;\n     \
    \   $interval1End=$interval1End+$interval1Length;\n    }\n    if($interval1End<=$interval2End){\n\
    \        $interval1Start=$interval1Start+$interval1Length;\n        $interval1End=$interval1End+$interval1Length;\n\
    \    }else{\n        $interval1Start=$interval1Start+$interval1Length;\n     \
    \   $interval1End=$interval1End+$interval1Length;\n    }\n    if($interval1Start>=$interval2End){\n\
    \        $interval1Start=$interval1Start+$interval1Length;\n        $interval1End=$interval1End+$interval1Length;\n\
    \    }", "    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $interval1Length=$interval1End-$interval1Start;\n\
    \    $interval2Length=$interval2End-$interval2Start;\n    if($interval1Length==$interval2Length)\
    \ {\n        if($interval1Start<$interval2Start) {\n            $interval1Start=$interval2Start;\n\
    \            $interval1End=$interval2End;\n        }\n        if($interval1Start>$interval2End)\
    \ {\n            $interval1Start=$interval2Start;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1End<$interval2Start) {\n            $interval1Start=$interval2Start;\n\
    \            $interval1End=$interval2End;\n        }\n        if($interval1End>$interval2End)\
    \ {\n            $interval1Start=$interval2Start;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1Start<$interval1End && $interval2Start<$interval2End)\
    \ {\n            $interval1Start=$interval1End;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1Start<$interval1End && $interval2Start>$interval2End)\
    \ {\n            $interval1Start=$interval1End;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1Start>$interval1End && $interval2Start<$interval2End)\
    \ {\n            $interval1Start=$interval1End;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1Start>$interval1End && $interval2Start>$interval2End)\
    \ {\n            $interval1Start=$interval1End;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1Start<$interval1End && $interval2Start<$interval2End)\
    \ {\n            $interval1Start=$interval1End;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1Start<$interval1End && $interval2Start>$interval2End)\
    \ {\n            $interval1Start=$interval1End;\n            $interval1End=$interval2End;\n\
    \        }\n        if($interval1Start>$interval1End && $interval2Start>$interval2End)\
    \ {\n            $interval1Start=$interval1End;\n            $interval", "   \
    \ $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return 'NO';\n    }\n    $intersection\
    \ = array_slice($intersection, 0, -1);\n    if (count($intersection) == 1) {\n\
    \        return 'YES';\n    }\n    $intersection = array_map(function($item) {\n\
    \        return $item == 1 ? $item : $item * $item;\n    }, $intersection);\n\
    \    $intersection = array_sum($intersection);\n    if ($intersection == 1) {\n\
    \        return 'YES';\n    }\n    return 'NO';\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('strval',\
    \ $intersection);\n    $intersection = array_map('intval', $intersection);\n \
    \   $intersection = array_filter($intersection);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \    if ($intersectionStart >= $intersectionEnd) {\n        return \"NO\";\n \
    \   }\n    $intersectionLength = abs($intersectionEnd - $intersectionStart);\n\
    \    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n    if ($intersectionLength\
    \ > 1) {\n        $prime = true;\n        for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n            if ($i % 2 == 0) {\n                if ($intersectionStart\
    \ % $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n        }\n        if ($prime) {\n        \
    \    return \"YES\";\n        }\n    }\n    return \"NO\";\n}", "    $interval1\
    \ = array_map(function($v){return $v[0];}, $interval1);\n    $interval2 = array_map(function($v){return\
    \ $v[0];}, $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2\
    \ = array_unique($interval2);\n    $intersect = array_intersect($interval1, $interval2);\n\
    \    if (count($intersect) > 1) {\n        $intersect = array_values($intersect);\n\
    \        $intersect = array_map(function($v){return $v[0];}, $intersect);\n  \
    \      $intersect = array_unique($intersect);\n        $intersect = array_values($intersect);\n\
    \        if (count($intersect) > 1) {\n            return false;\n        }\n\
    \    }\n    return $intersect;\n}\n", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval2Start;\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval2End;\n    }\n\n    if\
    \ ($interval1Start >= $interval1End || $interval2Start >= $interval2End) {\n \
    \       return \"NO\";\n    }\n\n    $intersectionStart = $interval1Start;\n \
    \   $intersectionEnd = $interval1End;\n\n    while ($intersectionStart <= $intersectionEnd)\
    \ {\n        if ($interval1Start <= $intersectionEnd && $intersectionEnd <= $interval2End)\
    \ {\n            $intersectionEnd = $interval2End;\n        }\n        if ($interval1Start\
    \ <= $intersectionStart && $intersectionStart <= $interval2Start) {\n        \
    \    $intersectionStart = $interval2Start;\n        }\n        if ($intersectionStart\
    \ <= $interval1End && $intersectionEnd <= $interval2End) {\n            $intersectionEnd\
    \ = $interval1End;\n        }\n        if ($intersectionStart <= $interval1Start\
    \ && $intersectionEnd <= $interval2Start) {\n            $intersectionStart =\
    \ $interval1Start;\n        }\n    }\n\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n\n    if ($intersectionStart <= $interval1Start\
    \ && $intersectionStart <= $interval2Start) {\n        return \"YES\";\n    }\n\
    \n    if ($intersectionEnd <= $interval1End && $intersectionEnd <= $interval2End)\
    \ {\n        return \"YES\";\n    }\n\n    return \"NO\";\n}\n", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ == 2 && $interval1Start != $interval2Start && $interval1End != $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionLength == 2 && $interval1Start\
    \ == $interval2Start && $interval1End == $interval2End) {\n        return \"YES\"\
    ;\n    }\n    if ($intersectionLength == 2 && $interval1Start == $interval2Start\
    \ && $interval1End != $interval2End) {\n        return \"NO\";\n    }\n    if\
    \ ($intersectionLength == 2 && $interval1Start != $interval2Start && $interval1End\
    \ == $interval2End) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ == 2 && $interval1Start != $interval2Start && $interval1End == $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionLength == 2 && $interval1Start\
    \ == $interval2Start && $interval1End != $interval2End) {\n        return \"NO\"\
    ;\n    }\n    if ($intersectionLength == 2 && $interval1Start != $interval2Start\
    \ && $interval1End == $interval2End) {\n        return \"NO\";\n    }\n    if\
    \ ($intersectionLength == 2 && $interval1Start == $interval2Start && $interval1End\
    \ != $interval2End) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ == 2 && $interval1Start != $interval2Start && $interval1End == $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($intersectionLength == 2 && $interval1Start\
    \ == $interval2Start && $interval1End != $interval2End) {\n        return \"NO\"\
    ;\n    }\n    if ($intersectionLength == 2 && $interval1Start != $interval2Start\
    \ && $interval1End == $interval2End) {\n        return \"NO\";\n    }\n    if\
    \ ($intersectionLength == 2 && $interval1Start == $interval2Start && $interval1End\
    \ != $interval2End) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ == 2 && $interval1Start != $interval2Start && $interval1End == $interval2End)\
    \ {", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\n\
    \    if ($interval1Start > $interval2Start) {\n        $interval1 = array_reverse($interval1);\n\
    \    }\n\n    if ($interval1End > $interval2End) {\n        $interval2 = array_reverse($interval2);\n\
    \    }\n\n    $intersectionStart = $interval1Start;\n    $intersectionEnd = $interval1End;\n\
    \n    if ($interval1Start <= $interval2Start) {\n        $intersectionStart =\
    \ $interval2Start;\n        $intersectionEnd = $interval2End;\n    }\n\n    if\
    \ ($interval1End <= $interval2End) {\n        $intersectionEnd = $interval1End;\n\
    \    }\n\n    if ($intersectionStart >= $intersectionEnd) {\n        return \"\
    NO\";\n    }\n\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \n    if ($intersectionLength > 1) {\n        for ($i = 2; $i <= $intersectionLength;\
    \ $i++) {\n            if ($intersectionStart % $i == 0 && $intersectionEnd %\
    \ $i == 0) {\n                return \"YES\";\n            }\n        }\n    }\n\
    \n    return \"NO\";\n}\n", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[1], $interval1[1]]);\n    $interval2 = array_merge($interval2, [$interval2[1],\
    \ $interval2[1]]);\n    $interval1 = array_slice($interval1, 0, -1);\n    $interval2\
    \ = array_slice($interval2, 0, -1);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 2) {\n        if ($intersection[0]\
    \ >= $intersection[1]) {\n            return \"YES\";\n        } else {\n    \
    \        return \"NO\";\n        }\n    } else {\n        return \"NO\";\n   \
    \ }\n}\n", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersect =\
    \ array_intersect($interval1, $interval2);\n    if (count($intersect) > 0) {\n\
    \        $intersect = array_slice($intersect, 0, -1);\n        if (count($intersect)\
    \ == 1) {\n            return $intersect[0];\n        }\n    }\n    return \"\
    NO\";\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart;\n    if ($intersectionLength > 0) {\n        if ($intersectionLength\
    \ % 2 === 0) {\n            if ($intersectionStart <= $intersectionEnd) {\n  \
    \              if ($intersectionStart <= $interval1Start && $intersectionEnd <=\
    \ $interval1End) {\n                    return \"YES\";\n                }\n \
    \               if ($intersectionStart <= $interval2Start && $intersectionEnd\
    \ <= $interval2End) {\n                    return \"YES\";\n                }\n\
    \            }\n        }\n    }\n    return \"NO\";\n}\n", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart > $intersectionEnd) {\n        return\
    \ \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n    $isPrime\
    \ = true;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($intersectionStart % $i == 0) {\n             \
    \   $isPrime = false;\n                break;\n            }\n        } else {\n\
    \            if ($intersectionEnd % $i == 0) {\n                $isPrime = false;\n\
    \                break;\n            }\n        }\n    }\n    if ($isPrime) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", " \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $interval1 = array_merge($interval1, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_map('intval',\
    \ $intersection);\n    $intersection = array_filter($intersection);\n    $intersection\
    \ = array_values($intersection);\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_map('intval', $intersection);\n    $intersection =\
    \ array_filter($intersection);\n    $intersection = array_values($intersection);\n\
    \    $intersection = array_unique($", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \    if ($intersectionStart >= $intersectionEnd) {\n        return \"NO\";\n \
    \   }\n    $intersectionLength = abs($intersectionEnd - $intersectionStart);\n\
    \    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n    $primeNumber\
    \ = 1;\n    for ($i = 2; $i <= $intersectionLength; $i++) {\n        if ($i %\
    \ 2 == 0) {\n            $primeNumber++;\n        }\n        if ($primeNumber\
    \ == $intersectionLength) {\n            return \"YES\";\n        }\n    }\n \
    \   return \"NO\";\n}", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n\
    \    $intersection = array();\n    $intersection[] = $interval1;\n    $intersection[]\
    \ = $interval2;\n    $intersection = array_merge($intersection, array_reverse($intersection));\n\
    \    $intersection = array_unique($intersection);\n    $intersection = array_slice($intersection,\
    \ count($intersection) - 1);\n    $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    $intersection = array_slice($intersection, count($intersection) -\
    \ 1);\n    $intersection = array_slice($intersection, count($intersection) - 1);\n\
    \    $intersection = array_slice($intersection, count($intersection) - 1);\n \
    \   $intersection = array_slice($intersection, count($intersection) - 1);\n  \
    \  $intersection = array_slice($intersection, count($intersection) - 1);\n   \
    \ $intersection = array_slice($intersection, count($intersection) - 1);\n    $intersection\
    \ = array_slice($intersection, count($intersection) - 1);\n    $intersection =\
    \ array_slice($intersection, count($intersection) - 1);\n    $intersection = array_slice($intersection,\
    \ count($intersection) - 1);\n    $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    $intersection = array_slice($intersection, count($intersection) -\
    \ 1);\n    $intersection = array_slice($intersection, count($intersection) - 1);\n\
    \    $intersection = array_slice($intersection, count($intersection) - 1);\n \
    \   $intersection = array_slice($intersection, count($intersection) - 1);\n  \
    \  $intersection = array_slice($intersection, count($intersection) - 1);\n   \
    \ $intersection = array_slice($intersection, count($intersection) - 1);\n    $intersection\
    \ = array_slice($intersection, count($intersection) - 1);\n    $intersection =\
    \ array_slice($intersection, count($intersection) - 1);\n    $intersection = array_slice($intersection,\
    \ count($intersection) - 1);\n    $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    $intersection = array_slice($intersection, count($intersection) -\
    \ 1);\n    $intersection = array_slice($intersection, count($intersection) - 1);\n\
    \    $intersection = array_slice($intersection, count($intersection) - 1);\n \
    \   $intersection = array_slice($intersection, count($intersection) - 1);\n  \
    \  $intersection = array_slice($intersection, count($intersection) - 1);\n   \
    \ $intersection = array_slice($intersection, count($intersection) - 1);\n    $intersection\
    \ = array_slice($intersection, count($intersection) - 1);\n    $intersection =\
    \ array_slice($intersection, count($intersection) - 1);\n    $intersection = array_slice($intersection,\
    \ count($intersection) - 1);\n    $intersection = array_slice($intersection, count($intersection)\
    \ - 1);\n    $intersection = array_slice(", "    $interval1 = array_values($interval1);\n\
    \    $interval2 = array_values($interval2);\n    $interval1 = array_filter($interval1,\
    \ function($v){\n        return $v >= 0;\n    });\n    $interval2 = array_filter($interval2,\
    \ function($v){\n        return $v >= 0;\n    });\n    $interval1 = array_filter($interval1,\
    \ function($v){\n        return $v <= count($interval2);\n    });\n    $interval2\
    \ = array_filter($interval2, function($v){\n        return $v <= count($interval1);\n\
    \    });\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $prime = array_filter($intersection,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($prime)\
    \ == 0) {\n        return \"NO\";\n    }\n    return \"YES\";\n}", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End > $interval2End) {\n\
    \        $interval1 = $interval1[1];\n        $interval2 = $interval2[0];\n  \
    \  }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[1];\n    }\n    $intersectionLength = $interval2End\
    \ - $interval1End;\n    if ($intersectionLength > 1) {\n        $interval1Start\
    \ = $interval1[0];\n        $interval2Start = $interval2[0];\n        $interval1End\
    \ = $interval1[1];\n        $interval2End = $interval2[1];\n        $intersectionLength\
    \ = $interval2End - $interval1End;\n        $interval1End = $interval1Start +\
    \ $intersectionLength;\n        $interval2End = $interval2Start + $intersectionLength;\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[0];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1End = $interval1[0];\n        $interval2End = $interval2[1];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1End = $interval1[0];\n        $interval2End = $interval2[0];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1End = $interval1[0];\n        $interval2End = $interval2[0];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1End = $interval1[0];\n        $interval2End = $interval2[0];\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1[1];\n\
    \        $interval2End = $interval2[1];\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1End = $interval1[0];\n        $interval2End = $interval2[0];",
  "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n    $interval1Length =\
    \ $interval1End - $interval1Start;\n    $interval2Length = $interval2End - $interval2Start;\n\
    \    if ($interval1Start > $interval2End) {\n        $interval1End = $interval1Start\
    \ + $interval1Length;\n    }\n    if ($interval2Start > $interval1End) {\n   \
    \     $interval2End = $interval2Start + $interval2Length;\n    }\n    if ($interval1Start\
    \ > $interval2Start || $interval1End < $interval2End) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1Length == $interval2Length) {\n        return \"YES\"\
    ;\n    }\n    $interval1Length = $interval1End - $interval1Start;\n    $interval2Length\
    \ = $interval2End - $interval2Start;\n    if ($interval1Length > $interval2Length)\
    \ {\n        $interval1Length = $interval1Length - $interval2Length;\n    }\n\
    \    if ($interval1Length % 2 == 0) {\n        return \"NO\";\n    }\n    $prime\
    \ = true;\n    for ($i = 3; $i <= $interval1Length; $i += 2) {\n        if ($interval1Start\
    \ % $i == 0 && $interval2Start % $i == 0) {\n            $prime = false;\n   \
    \         break;\n        }\n    }\n    if ($prime) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersection = array_intersect($interval1, $interval2);\n    if\
    \ (count($intersection) > 0) {\n        $intersection = array_slice($intersection,\
    \ 0, -1);\n        $intersection = array_map(function ($i) {\n            return\
    \ $i + 1;\n        }, $intersection);\n        $intersection = array_unique($intersection);\n\
    \        if (count($intersection) > 0) {\n            if (count($intersection)\
    \ == 1) {\n                return \"YES\";\n            } else {\n           \
    \     return \"NO\";\n            }\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }\n}", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart >= $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \    if ($intersectionLength == 1) {\n        return \"YES\";\n    }\n    if ($intersectionLength\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    $prime = true;\n    for ($i\
    \ = 2; $i <= $intersectionLength; $i++) {\n        if ($intersectionStart % $i\
    \ == 0) {\n            $prime = false;\n            break;\n        }\n    }\n\
    \    return $prime ? \"YES\" : \"NO\";\n}", "    $interval1 = $interval1[0];\n\
    \    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End\
    \ = $interval2[1];\n    if ($interval1End > $interval2End) {\n        $interval1\
    \ = $interval1[1];\n        $interval2 = $interval2[0];\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1 = $interval1[0];\n        $interval2\
    \ = $interval2[1];\n    }\n    if ($interval1 > $interval2) {\n        $interval1\
    \ = $interval1[1];\n        $interval2 = $interval2[1];\n    }\n    if ($interval1\
    \ < $interval2) {\n        $interval1 = $interval1[0];\n        $interval2 = $interval2[0];\n\
    \    }\n    if ($interval1 == $interval2) {\n        return \"NO\";\n    }\n \
    \   $interval1Length = $interval1End - $interval1;\n    $interval2Length = $interval2End\
    \ - $interval2;\n    if ($interval1Length == $interval2Length) {\n        return\
    \ \"YES\";\n    }\n    if ($interval1Length > $interval2Length) {\n        $interval1Length\
    \ = $interval1Length - $interval2Length;\n    }\n    if ($interval1Length < $interval2Length)\
    \ {\n        $interval2Length = $interval2Length - $interval1Length;\n    }\n\
    \    if ($interval1Length == $interval2Length) {\n        return \"YES\";\n  \
    \  }\n    if ($interval1Length > $interval2Length) {\n        $interval1Length\
    \ = $interval1Length - $interval2Length;\n    }\n    if ($interval1Length < $interval2Length)\
    \ {\n        $interval2Length = $interval2Length - $interval1Length;\n    }\n\
    \    if ($interval1Length == $interval2Length) {\n        return \"YES\";\n  \
    \  }\n    if ($interval1Length > $interval2Length) {\n        $interval1Length\
    \ = $interval1Length - $interval2Length;\n    }\n    if ($interval1Length < $interval2Length)\
    \ {\n        $interval2Length = $interval2Length - $interval1Length;\n    }\n\
    \    if ($interval1Length == $interval2Length) {\n        return \"YES\";\n  \
    \  }\n    if ($interval1Length > $interval2Length) {\n        $interval1Length\
    \ = $interval1Length - $interval2Length;\n    }\n    if ($interval1Length < $interval2Length)\
    \ {\n        $interval2Length = $interval2Length - $interval1Length;\n    }\n\
    \    if ($interval1Length == $interval2Length) {\n        return \"YES\";\n  \
    \  }\n    if ($interval1", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    if ($interval1Start > $interval2Start) {\n        $interval1\
    \ = array_reverse($interval1);\n    }\n    if ($interval1End < $interval2End)\
    \ {\n        $interval1 = $interval1;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval2 = array_reverse($interval2);\n    }\n    if ($interval1End\
    \ < $interval2Start) {\n        $interval2 = $interval2;\n    }\n    $intersection\
    \ = array_intersect_key($interval1, $interval2);\n    $intersectionLength = count($intersection);\n\
    \    if ($intersectionLength > 0) {\n        $prime = true;\n        for ($i =\
    \ 0; $i < $intersectionLength; $i++) {\n            if ($intersection[$i] % 2\
    \ != 0) {\n                $prime = false;\n                break;\n         \
    \   }\n        }\n        if ($prime) {\n            return \"YES\";\n       \
    \ } else {\n            return \"NO\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }\n}\n", "    $interval1 = array_map('intval', $interval1);\n \
    \   $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ array($interval1[0], $interval1[1] + 1));\n    $interval2 = array_merge($interval2,\
    \ array($interval2[0], $interval2[1] + 1));\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, [$interval1[0], $interval1[1]]);\n    $interval2 =\
    \ array_merge($interval2, [$interval2[0], $interval2[1]]);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $intersection = array_slice($intersection,\
    \ 1);\n    $intersection = array_map(function ($item) {\n        return $item\
    \ == 1 ? $item : $item - 1;\n    }, $intersection);\n    $intersection = array_filter($intersection,\
    \ function ($item) {\n        return $item > 1;\n    });\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_slice($intersection,\
    \ 1);\n    if (count($intersection) == 1) {\n        return \"YES\";\n    }\n\
    \    $intersection = array_map(function ($item) {\n        return $item == 1 ?\
    \ $item : $item - 1;\n    }, $intersection);\n    $intersection = array_filter($intersection,\
    \ function ($item) {\n        return $item > 1;\n    });\n    if (count($intersection)\
    \ == 1) {\n        return \"YES\";\n    }\n    $intersection = array_slice($intersection,\
    \ 1);\n    if (count($intersection) == 2) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ [$interval1[1], $interval1[1] + 1]);\n    $interval2 = array_merge($interval2,\
    \ [$interval2[1], $interval2[1] + 1]);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersect =\
    \ array_intersect($interval1, $interval2);\n    $length = count($intersect);\n\
    \    if ($length == 1) {\n        return $intersect[0];\n    }\n    if ($length\
    \ == 2) {\n        return $intersect[0];\n    }\n    if ($length == 3) {\n   \
    \     return $intersect[0];\n    }\n    if ($length == 4) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 5) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 6) {\n        return $intersect[0];\n    }\n    if ($length == 7)\
    \ {\n        return $intersect[0];\n    }\n    if ($length == 8) {\n        return\
    \ $intersect[0];\n    }\n    if ($length == 9) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 10) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 11) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 12) {\n        return $intersect[0];\n    }\n    if ($length == 13) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 14) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 15) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 16) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 17) {\n        return $intersect[0];\n    }\n    if ($length == 18) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 19) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 20) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 21) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 22) {\n        return $intersect[0];\n    }\n    if ($length == 23) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 24) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 25) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 26) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 27) {\n        return $intersect[0];\n    }\n    if ($length == 28) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 29) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 30) {\n        return $intersect[0];\n    }\n    if\
    \ (", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $interval1Length = $interval1End - $interval1Start;\n    $interval2Length =\
    \ $interval2End - $interval2Start;\n    $intersectionLength = $interval1Length\
    \ + $interval2Length;\n    if ($intersectionLength > 0) {\n        $intersectionStart\
    \ = $interval1Start + $interval2Start;\n        $intersectionEnd = $interval1Start\
    \ + $interval1Length + $interval2End;\n        if ($intersectionStart <= $intersectionEnd)\
    \ {\n            $intersectionLength = $intersectionEnd - $intersectionStart;\n\
    \            if ($intersectionLength > 0) {\n                $isPrime = true;\n\
    \                for ($i = 1; $i <= $intersectionLength; $i++) {\n           \
    \         if ($i % 2 == 0) {\n                        if ($intersectionStart %\
    \ $i == 0) {\n                            $isPrime = false;\n                \
    \            break;\n                        }\n                    } else {\n\
    \                        if ($intersectionEnd % $i == 0) {\n                 \
    \           $isPrime = false;\n                            break;\n          \
    \              }\n                    }\n                }\n                if\
    \ ($isPrime) {\n                    return \"YES\";\n                } else {\n\
    \                    return \"NO\";\n                }\n            }\n      \
    \  }\n    }\n    return \"NO\";\n}", "    $interval1 = $interval1[0];\n    $interval2\
    \ = $interval2[0];\n    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n\
    \    if ($interval1End < $interval2End) {\n        $interval1End = $interval1[1];\n\
    \    }\n    if ($interval2End < $interval1End) {\n        $interval2End = $interval2[1];\n\
    \    }\n    $intersectionLength = $interval1End - $interval2End;\n    if ($intersectionLength\
    \ > 1) {\n        $intersectionLength = $intersectionLength - 1;\n    }\n    if\
    \ ($intersectionLength == 1) {\n        if ($interval1End > $interval2End) {\n\
    \            return \"NO\";\n        }\n        return \"YES\";\n    }\n    if\
    \ ($intersectionLength % 2 == 0) {\n        return \"NO\";\n    }\n    $primeNumber\
    \ = 2;\n    $isPrime = true;\n    while ($isPrime == true) {\n        if ($intersectionLength\
    \ % $primeNumber == 0) {\n            $isPrime = false;\n        }\n        $primeNumber++;\n\
    \    }\n    if ($isPrime == true) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}", "    $interval1 = $interval1[0];\n    $interval2 = $interval2[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2End = $interval2[1];\n    $intersectionLength\
    \ = 0;\n    $interval1Start = ($interval1End < $interval2Start) ? $interval1End\
    \ : $interval2Start;\n    $interval2Start = ($interval1End < $interval2Start)\
    \ ? $interval2End : $interval1Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start;\n    $interval1Start = ($interval1End < $interval2Start)\
    \ ? $interval1End : $interval2Start", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval2Start;\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval2End;\n    }\n\n    if\
    \ ($interval1Start > $interval2End) {\n        return \"NO\";\n    }\n    if ($interval1End\
    \ < $interval2Start) {\n        return \"NO\";\n    }\n\n    $intersectionStart\
    \ = $interval1Start;\n    $intersectionEnd = $interval1End;\n\n    while ($intersectionStart\
    \ <= $intersectionEnd) {\n        if ($interval1Start <= $intersectionStart &&\
    \ $intersectionStart <= $interval1End) {\n            $intersectionStart++;\n\
    \        }\n        if ($interval2Start <= $intersectionStart && $intersectionStart\
    \ <= $interval2End) {\n            $intersectionStart++;\n        }\n        if\
    \ ($interval1Start <= $intersectionEnd && $intersectionEnd <= $interval1End) {\n\
    \            $intersectionEnd++;\n        }\n        if ($interval2Start <= $intersectionEnd\
    \ && $intersectionEnd <= $interval2End) {\n            $intersectionEnd++;\n \
    \       }\n    }\n\n    if ($intersectionStart > $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n\n    if ($intersectionStart % 2 != 0) {\n        return\
    \ \"NO\";\n    }\n\n    if ($intersectionEnd % 2 != 0) {\n        return \"NO\"\
    ;\n    }\n\n    if ($intersectionStart % 3 == 0 && $intersectionEnd % 3 == 0)\
    \ {\n        return \"YES\";\n    }\n\n    return \"NO\";\n}\n", "    $interval1\
    \ = $interval1[0];\n    $interval2 = $interval2[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2End = $interval2[1];\n    if ($interval1End > $interval2End) {\n\
    \        $interval1 = $interval1[1];\n        $interval2 = $interval2[0];\n  \
    \  }\n    if ($interval1End < $interval2End) {\n        $interval1 = $interval1[0];\n\
    \        $interval2 = $interval2[1];\n    }\n    $intersection = $interval1;\n\
    \    $intersectionEnd = $interval2;\n    while ($intersectionEnd <= $interval1End)\
    \ {\n        if ($intersectionEnd % 2 == 0) {\n            $intersectionEnd =\
    \ $intersectionEnd + 1;\n        } else {\n            $intersectionEnd = $intersectionEnd\
    \ + 2;\n        }\n    }\n    while ($intersectionEnd <= $interval2End) {\n  \
    \      if ($intersectionEnd % 2 == 0) {\n            $intersectionEnd = $intersectionEnd\
    \ + 1;\n        } else {\n            $intersectionEnd = $intersectionEnd + 2;\n\
    \        }\n    }\n    if ($intersectionEnd <= $interval1End) {\n        $intersectionEnd\
    \ = $interval1End;\n    }\n    if ($intersectionEnd <= $interval2End) {\n    \
    \    $intersectionEnd = $interval2End;\n    }\n    if ($intersectionEnd % 2 ==\
    \ 0) {\n        $intersectionEnd = $intersectionEnd + 1;\n    } else {\n     \
    \   $intersectionEnd = $intersectionEnd + 2;\n    }\n    if ($intersectionEnd\
    \ > $interval1End) {\n        $intersectionEnd = $interval1End;\n    }\n    if\
    \ ($intersectionEnd > $interval2End) {\n        $intersectionEnd = $interval2End;\n\
    \    }\n    if ($intersectionEnd % 2 == 0) {\n        $intersectionEnd = $intersectionEnd\
    \ + 1;\n    } else {\n        $intersectionEnd = $intersectionEnd + 2;\n    }\n\
    \    if ($intersectionEnd > $interval1End) {\n        $intersectionEnd = $interval1End;\n\
    \    }\n    if ($intersectionEnd > $interval2End) {\n        $intersectionEnd\
    \ = $interval2End;\n    }\n    if ($intersectionEnd % 2 == 0) {\n        $intersectionEnd\
    \ = $intersectionEnd + 1;\n    } else {\n        $intersectionEnd = $intersectionEnd\
    \ + 2;\n    }\n    if ($intersectionEnd > $interval1End) {\n        $intersectionEnd\
    \ = $interval1End;\n    }\n    if ($intersectionEnd > $interval2End) {\n     \
    \   $intersectionEnd = $interval2End;\n    }\n    if ($intersectionEnd % 2 ==\
    \ 0) {\n        $intersectionEnd = $intersectionEnd + 1;\n    } else {\n     \
    \   $intersectionEnd = $intersectionEnd + 2;\n    }\n    if ($intersectionEnd\
    \ > $interval1End) {\n        $intersectionEnd = $interval1End;\n    }\n    if\
    \ ("]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
