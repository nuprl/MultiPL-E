name: HumanEval_44_change_base
language: php
prompt: "<?php\n// Change numerical base of input number x to base.\n// return string\
  \ representation after the conversion.\n// base numbers are less than 10.\n// >>>\
  \ change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7,\
  \ 2)\n// '111'\nfunction change_base($x, $base) {\n"
tests: "function candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $x = intval($x);\n    $base = intval($base);\n    if ($base > 10)\
    \ {\n        throw new \\InvalidArgumentException(\"Base must be less than 10.\"\
    );\n    }\n    if ($base < 2) {\n        throw new \\InvalidArgumentException(\"\
    Base must be greater than 2.\");\n    }\n    if ($x < 0) {\n        throw new\
    \ \\InvalidArgumentException(\"Value must be greater than 0.\");\n    }\n    if\
    \ ($base == 10) {\n        return $x;\n    }\n    $base = $base * 2;\n    $x =\
    \ $x / $base;\n    $remainder = $x % $base;\n    return $remainder + $base;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis works great for base 10, but fails\
    \ for base 16. Do you know of a way to make it work for base 16?\n<|/ c |>\n<|\
    \ c |>\nI added a solution for base 16\n<|/ c |>\n<| c |>\nThis works great for\
    \ base 10, but fails for base 16. Do you know of a way to make it work for base\
    \ 16?\n<|/ c |>\n<| c |>\nThis works great for base 10, but fails for base 16.\
    \ Do you know of a way to make it work for base 16?\n<|/ c |>\n<| c |>\nThis works\
    \ great for base 10, but fails for base 16. Do you know of a way to make it work\
    \ for base 16?\n<|/ c |>\n<| a tags=php,base-conversion |>\n<code>\n<?php", " \
    \ $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException(\n\
    \      'Base must be between 2 and 36'\n    );\n  }\n  $x = intval($x);\n  $r\
    \ = $x;\n  $digits = '';\n  while ($base > 1) {\n    $r = $r * $base;\n    $digits\
    \ = $r % $base;\n    $base = $base * 10;\n  }\n  return $digits . $r;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, however it fails for base 36\
    \ and I believe it can be fixed by changing the while loop condition to `while\
    \ ($base > 36)`\n<|/ c |>\n<| c |>\nThanks, I fixed it\n<|/ c |>\n<| c |>\nThanks\
    \ for your solution, however I believe it can be simplified a little bit more.\
    \ I've posted my own answer with my solution.\n<|/ c |>\n<| a tags=php,math,algorithm\
    \ |>\nI believe I found a solution that is much simpler than the other solutions\
    \ posted so far.\n<code>", "  $base = (int) $base;\n  if ($base < 2 || $base >\
    \ 36) {\n    throw new \\InvalidArgumentException(\n      'Base must be between\
    \ 2 and 36'\n    );\n  }\n  $x = intval($x);\n  $base = (int) $base;\n  $result\
    \ = '';\n  while ($x >= $base) {\n    $result .= $x % $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $result . $x;\n}\n", "  $x = intval($x);\n  $base =\
    \ intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n\
    \  $baseLen = strlen($base);\n  $newBase = array();\n  for ($i = 0; $i < $baseLen;\
    \ $i++) {\n    $newBase[] = $base[$i];\n  }\n  $digits = $digits - $baseLen;\n\
    \  if ($digits < 0) {\n    return $x;\n  }\n  for ($i = 0; $i < $digits; $i++)\
    \ {\n    $newBase[] = '0';\n  }\n  $result = $x;\n  for ($i = 0; $i < $baseLen;\
    \ $i++) {\n    $result = $result * $newBase[$i];\n  }\n  return $result;\n}\n",
  "    $base = 10 ** $base;\n    if ($x < $base) {\n        return $x;\n    }\n  \
    \  $r = $x % $base;\n    return change_base($r, $base);\n}\n", "    $digits =\
    \ str_split($x);\n    $digits_count = count($digits);\n    $digits_sum = 0;\n\
    \    foreach ($digits as $digit) {\n        $digits_sum += $digit * pow($base,\
    \ $digits_count);\n    }\n    return $digits_sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for base 10,\
    \ but for base 2 it returns wrong results. For example, for base 2 it returns\
    \ `11` instead of `111`.\n<|/ c |>\n<| c |>\nI fixed the bug, now it works perfectly\
    \ for base 2 :)\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for base 10, but for base 2 it returns wrong results. For example, for base\
    \ 2 it returns `11` instead of `111`.\n<|/ c |>\n<| c |>\nI fixed the bug, now\
    \ it works perfectly for base 2 :)\n<|/ c |>\n<| a tags=php,math,algorithm |>\n\
    I wrote a PHP function that converts a number from base 10 to base 2:\n<code>",
  "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException('Base\
    \ must be between 2 and 36');\n  }\n  $x = intval($x);\n  $r = $x;\n  while ($base\
    \ > 1) {\n    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n}\n", "  $x =\
    \ intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n\
    \  }\n  $r = $x;\n  $digits = '';\n  while ($base > 0) {\n    $r = $r * $base;\n\
    \    $digits = $digits + strval($r / $base);\n    $base = $base / 10;\n  }\n \
    \ return $digits . $r;\n}\n", "  $base = 10 ** $base;\n  $x = $x * $base;\n  $r\
    \ = $x / $base;\n  $r = floor($r);\n  $r = $r * $base;\n  return $r;\n}\n", " \
    \ $base = (int) $base;\n  $x = intval($x);\n  if ($base < 2 || $base > 36) {\n\
    \    throw new \\InvalidArgumentException(\n        'Base must be between 2 and\
    \ 36'\n    );\n  }\n  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x,\
    \ 10, $base);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code does not work\
    \ for negative numbers. Try `change_base(-10, 2)`.\n<|/ c |>\n<| c |>\nThanks,\
    \ I fixed the negative number issue. Now it works for negative numbers as well.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n<?php", "  $base = (int) $base;\n  if ($base\
    \ < 1 || $base > 10) {\n    return null;\n  }\n  $x = intval($x);\n  if ($x <\
    \ 0) {\n    $x += $base;\n  }\n  return strval($x);\n}\n", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  if ($base\
    \ < 2) {\n    return $x;\n  }\n  $base10 = 10 ** $base;\n  return $x * $base10;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,math |>\nI wrote a function to convert\
    \ decimal to binary and vice versa:\n<code>", "  $base = (int) $base;\n  if ($base\
    \ < 1 || $base > 10) {\n    throw new \\InvalidArgumentException(\n      sprintf('Base\
    \ must be between 1 and 10 (inclusive), got %d.', $base)\n    );\n  }\n  $x =\
    \ intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x,\
    \ 10, $base);\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits_count = strlen($digits);\n  $digits = array_pad($digits,\
    \ $base, '0');\n  $digits = array_map(function($v) use ($base) {\n    return str_pad($v,\
    \ $base, '0', STR_PAD_LEFT);\n  }, $digits);\n  return implode('', $digits);\n\
    }\n", "  $r = \"\";\n  $digits = strlen($x);\n  while ($digits > 0) {\n    $r\
    \ = $base * $r + $x % $base;\n    $x = floor($x / $base);\n    $digits--;\n  }\n\
    \  return $r;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n\
    \    return null;\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n\
    \  }\n  return base_convert($x, 10, $base);\n}\n", "  $x = intval($x);\n  $base\
    \ = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $sign = ($x <\
    \ 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n\
    \  $res = '';\n  while ($digits > 0) {\n    $res = $base[$digits % $baseLen] .\
    \ $res;\n    $digits = floor($digits / $baseLen);\n  }\n  return $sign . $res;\n\
    }\n</code>\n<|/ a tags=php,math,algorithm |>\n<| c |>\nThanks for your answer.\
    \ I've tried it and it works. But I still don't understand why my code doesn't\
    \ work. Could you explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "  $base = 10 ** $base;\n  $x = $x / $base;\n  $x = floor($x);\n  $base\
    \ = $base / 10;\n  $base = $base * $x;\n  return $base;\n}", "  $base = $base\
    \ < 10 ? $base : 10;\n  $x = $x < 0 ? $x * -1: $x;\n  $x = $x * $base;\n  $x =\
    \ $x < 0 ? $x + $base: $x;\n  return $x;\n}", "  $digits = strlen($x);\n  $baseLen\
    \ = strlen($base);\n  $newBase = array();\n  for ($i = 0; $i < $baseLen; $i++)\
    \ {\n    $newBase[] = $base[$i];\n  }\n  for ($i = 0; $i < $digits; $i++) {\n\
    \    $newBase[$i] = $newBase[$i] * pow(10, $baseLen - $i - 1);\n  }\n  return\
    \ implode('', $newBase);\n}\n", "  $base = $base < 10 ? $base : 10;\n  $x = $x\
    \ < 0 ? -$x : $x;\n  $r = $x;\n  $digits = 1;\n  while ($digits < $base) {\n \
    \   $r *= $base;\n    $digits++;\n  }\n  return $r;\n}\n", "  $base = (int) $base;\n\
    \  if ($base < 1 || $base > 10) {\n    return null;\n  }\n  $x = intval($x);\n\
    \  if ($x < 0) {\n    return null;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x\
    \ = abs($x);\n  $digits = '';\n  while ($x >= $base) {\n    $digits = $baseToDigits[$base]\
    \ + $digits;\n    $x -= $base;\n  }\n  return $sign + str_pad($digits, $base,\
    \ '0', STR_PAD_LEFT);\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits = array_pad($digits, $base, '0');\n  return implode('',\
    \ $digits);\n}\n", "  $base = (int) $base;\n  if ($base < 0 || $base > 10) {\n\
    \    die('Invalid base');\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x +=\
    \ $base;\n  }\n  $x = $x % $base;\n  return $x;\n}\n", "  $digits = str_split($x);\n\
    \  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $result\
    \ = '';\n  for ($i = 0; $i < $digits_count; $i++) {\n    $result .= $digits[$i]\
    \ * $base;\n  }\n  return $result;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $basedigits\
    \ = strlen($base);\n  $quotient = $x / $base;\n  $remainder = $x % $base;\n  $quotient\
    \ = str_pad($quotient, $basedigits, '0', STR_PAD_LEFT);\n  $remainder = str_pad($remainder,\
    \ $basedigits, '0', STR_PAD_LEFT);\n  return $quotient . $remainder;\n}", "  $r\
    \ = \"\";\n  while ($x > 0)\n  {\n    $r = base_convert($x % $base, $base, $base);\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "  $x = intval($x);\n \
    \ $base = intval($base);\n  if ($base < 2 || $base > 36) {\n    return null;\n\
    \  }\n  if ($x < 0 || $x >= pow(10, $base)) {\n    return null;\n  }\n  return\
    \ $x * pow(10, $base - intval($base));\n}\n", "  $digits = str_split($x);\n  $digits_count\
    \ = count($digits);\n  $base = $base < 2 ? 2 : (int) $base;\n  if ($digits ===\
    \ FALSE || $digits_count < $base) {\n    return FALSE;\n  }\n  $digits_count =\
    \ count($digits);\n  $digits_sum = 0;\n  for ($i = 0; $i < $digits_count; $i++)\
    \ {\n    $digits_sum += ($digits[$i] * $base);\n  }\n  return $digits_sum;\n}",
  "  $r = \"\";\n  while ($x > 0) {\n    $r = base_convert($x, $base, $base);\n  \
    \  $x = floor($x / $base);\n  }\n  return $r;\n}\n", "  $base = (int) $base;\n\
    \  if ($base < 1 || $base > 10) {\n    return '';\n  }\n  $x = intval($x);\n \
    \ if ($x < 0) {\n    $x += $base;\n  }\n  return str_pad($x, $base, '0', STR_PAD_LEFT);\n\
    }\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n    return null;\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    return null;\n  }\n  $sign = ($x\
    \ < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n\
    \  $res = '';\n  for ($i = 0; $i < $baseLen; $i++) {\n    $digit = (int) $x[$i];\n\
    \    if ($digit > 9) {\n      $digit = $digit - 9;\n    }\n    $res .= $base.$digit;\n\
    \  }\n  return $sign . $res;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $basedigits\
    \ = strlen($base);\n  $quotient = $digits / $basedigits;\n  $remainder = $digits\
    \ % $basedigits;\n  $quotient = intval($quotient);\n  $remainder = intval($remainder);\n\
    \  $basepow = strlen($base) - 1;\n  $basepow = intval($basepow);\n  $basepow =\
    \ str_pad('', $basepow, '0');\n  $basepow = str_pad($basepow, $basedigits, '0');\n\
    \  $basepow = str_pad($basepow, $quotient, '0');\n  $basepow = str_pad($basepow,\
    \ $remainder, '0');\n  $basepow = str_pad($basepow, $basedigits, '0');\n  $basepow\
    \ = str_pad($basepow, $quotient, '0');\n  $basepow = str_pad($basepow, $remainder,\
    \ '0');\n  $basepow = str_pad($basepow, $basedigits, '0');\n  $basepow = str_pad($basepow,\
    \ $quotient, '0');\n  $basepow = str_pad($basepow, $remainder, '0');\n  $basepow\
    \ = str_pad($basepow, $basedigits, '0');\n  $basepow = str_pad($basepow, $quotient,\
    \ '0');\n  $basepow = str_pad($basepow, $remainder, '0');\n  $basepow = str_pad($basepow,\
    \ $basedigits, '0');\n  $basepow = str_pad($basepow, $quotient, '0');\n  $basepow\
    \ = str_pad($basepow, $remainder, '0');\n  $basepow = str_pad($basepow, $basedigits,\
    \ '0');\n  $basepow = str_pad($basepow, $quotient, '0');\n  $basepow = str_pad($basepow,\
    \ $remainder, '0');\n  $basepow = str_pad($basepow, $basedigits, '0');\n  $basepow\
    \ = str_pad($basepow, $quotient, '0');\n  $basepow = str_pad($basepow, $remainder,\
    \ '0');\n  $basepow = str_pad($basepow, $basedigits, '0');\n  $basepow = str_pad($basepow,\
    \ $quotient, '0');\n  $basepow = str_pad($basepow, $remainder, '0');\n  $basepow",
  "  $digits = str_split($x);\n  $digits_count = count($digits);\n  $base = $base\
    \ < 10 ? $base : 10;\n  $base = $base > $digits_count ? $digits_count : $base;\n\
    \  $digits_count = pow($base, $digits_count);\n  $digits = array_pad($digits,\
    \ $digits_count, '0');\n  $digits = array_map(function($digit) use ($base) {\n\
    \    return $digit * $base;\n  }, $digits);\n  return implode('', $digits);\n\
    }\n", "  $digits = strlen($x) - 1;\n  $res = '';\n  while ($digits > 0) {\n  \
    \  $res = $base * $res + $x[$digits];\n    $digits--;\n  }\n  return $res;\n}\n",
  "  $x = $x * $base;\n  $x = $x - ($x % $base);\n  return $x;\n}\n", "    $x = $x\
    \ - ($x % $base);\n    return $x * $base;\n}", "  $digits = str_split($x);\n \
    \ $digits_count = count($digits);\n  $digits_base = $digits_count - 1;\n  $digits_base_power\
    \ = pow($base, $digits_base);\n  $digits_base_power_minus_1 = $digits_base_power\
    \ - 1;\n  $digits_base_power_minus_1_minus_1 = $digits_base_power_minus_1 - 1;\n\
    \  $digits_base_power_minus_1_minus_2 = $digits_base_power_minus_1 - 2;\n  $digits_base_power_minus_2_minus_1\
    \ = $digits_base_power_minus_2 - 1;\n  $digits_base_power_minus_2_minus_2 = $digits_base_power_minus_2\
    \ - 2;\n  $digits_base_power_minus_2_minus_3 = $digits_base_power_minus_2 - 3;\n\
    \  $digits_base_power_minus_3_minus_1 = $digits_base_power_minus_3 - 1;\n  $digits_base_power_minus_3_minus_2\
    \ = $digits_base_power_minus_3 - 2;\n  $digits_base_power_minus_3_minus_3 = $digits_base_power_minus_3\
    \ - 3;\n  $digits_base_power_minus_3_minus_4 = $digits_base_power_minus_3 - 4;\n\
    \  $digits_base_power_minus_4_minus_1 = $digits_base_power_minus_4 - 1;\n  $digits_base_power_minus_4_minus_2\
    \ = $digits_base_power_minus_4 - 2;\n  $digits_base_power_minus_4_minus_3 = $digits_base_power_minus_4\
    \ - 3;\n  $digits_base_power_minus_4_minus_4 = $digits_base_power_minus_4 - 4;\n\
    \  $digits_base_power_minus_4_minus_5 = $digits_base_power_minus_4 - 5;\n  $digits_base_power_minus_5_minus_1\
    \ = $digits_base_power_minus_5 - 1;\n  $digits_base_power_minus_5_minus_2 = $digits_base_power_minus_5\
    \ - 2;\n  $digits_base_power_minus_5_minus_3 = $digits_base_power_minus_5 - 3;\n\
    \  $digits_base_power_minus_5_minus_4 = $digits_base_power_minus_5 - 4;\n  $digits_base_power_minus_5_minus_5\
    \ = $digits_base_power_minus_5 - 5;\n  $digits_base_power_minus_5_minus_6 = $digits_base_power_minus_5\
    \ - 6;\n  $digits_base_power_minus_6_minus_1 = $digits_base_power_minus_6 - 1;\n\
    \  $digits_base_power_", "  $base = (int) $base;\n  if ($base < 1 || $base > 10)\
    \ {\n    throw new Exception('Invalid base');\n  }\n  $x = intval($x);\n  if ($x\
    \ < 0) {\n    $x += $base;\n  }\n  $r = $x;\n  $digits = '';\n  while ($r > 0)\
    \ {\n    $digits = base_convert($r, 10, $base) + $digits;\n    $r = $r % $base;\n\
    \  }\n  return $digits;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base\
    \ > 10) {\n    return null;\n  }\n  $x = intval($x);\n  $r = $x;\n  $digits =\
    \ 1;\n  while ($digits < $base) {\n    $r *= $base;\n    $digits++;\n  }\n  $r\
    \ = str_pad($r, $digits, '0', STR_PAD_LEFT);\n  return $r;\n}", "  $base = (int)\
    \ $base;\n  if ($base < 2 || $base > 36) {\n    throw new InvalidArgumentException(\n\
    \      sprintf('Invalid base %d. Must be between 2 and 36.', $base)\n    );\n\
    \  }\n  $digits = (int) log10($base);\n  $x = $x - ($digits - 1) * $base;\n  $digits\
    \ = str_pad('', $digits, '0', STR_PAD_LEFT);\n  return $digits . $x;\n}\n", " \
    \ $r = $x;\n  $digits = $base;\n  while ($digits > 0) {\n    $r = $r * $base +\
    \ $digits;\n    $digits--;\n  }\n  return $r;\n}\n", "    $digits = str_split($x);\n\
    \    $baseLen = strlen($base);\n    $result = '';\n    foreach ($digits as $key\
    \ => $digit) {\n        $result = $digit * $baseLen + $result;\n    }\n    return\
    \ $result;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base >\
    \ 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n\
    \  $res = '';\n  for ($i = 0; $i < $baseLen; $i++) {\n    $res .= $x % $base;\n\
    \    $x = floor($x / $base);\n  }\n  return $res == 0 ? '0' . $res : $res;\n}\n",
  "  $base = (int) $base;\n  if ($base < 0 || $base > 10) {\n    throw new InvalidArgumentException('Base\
    \ must be between 0 and 10.');\n  }\n  $x = intval($x);\n  if ($x < 0) {\n   \
    \ $x += $base;\n  }\n  $r = $x;\n  $digits = '';\n  while ($x >= $base) {\n  \
    \  $r = $x % $base;\n    $digits = base_convert($r, 10, $base) + $digits;\n  \
    \  $x = floor($x / $base);\n  }\n  return base_convert($x, 10, $base) + $digits;\n\
    }\n", "  $r = \"\";\n  while ($x > 0) {\n    $r = base_convert($x, $base, $base);\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "  $base = 10 ** $base;\n\
    \  $digits = str_split($x);\n  $result = '';\n  foreach ($digits as $digit) {\n\
    \    $result .= $digit * $base;\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$num = \"123456789\";\n$base = 10;\n$digits\
    \ = str_split($num);\n$result = '';\nforeach ($digits as $digit) {\n    $result\
    \ .= $digit * $base;\n}\necho $result;", "  $base = (int) $base;\n  $x = intval($x);\n\
    \  if ($x < 0 || $base < 1 || $base > 10) {\n    return null;\n  }\n  $digits\
    \ = '';\n  do {\n    $digits = base_convert($x, $base, $base);\n    $x = floor($x\
    \ / $base);\n  } while ($digits === '');\n  return $digits;\n}\n", "  $base =\
    \ (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException('Base\
    \ must be between 2 and 36');\n  }\n  $x = intval($x);\n  $r = $x;\n  while ($base\
    \ > 1) {\n    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$number = '123456789';\n$base\
    \ = 10;\n$result = \"\";\n$length = strlen($number);\nfor ($i = 0; $i < $length;\
    \ $i++) {\n    $result .= $number[$i] * pow($base, $length - $i - 1);\n}\necho\
    \ $result;\n</code>\n<|/ a tags=php,algorithm |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $number = '123456789';\n$base = 10;\n$result = \"\";\n$length = strlen($number);\n\
    for ($i = 0; $i < $length; $i++) {\n    $result .= $number[$i] * pow($base, $length\
    \ - $i - 1);\n}\necho $result;\n</code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n<?php\n$number = '123456789';\n$base = 10;\n$result = \"\";\n$length\
    \ = strlen($number);\nfor ($i = 0; $i < $length; $i++) {\n    $result .= $number[$i]\
    \ * pow($base, $length - $i - 1);\n}\necho $result;\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,algorithm |>\n<code>\n<?php\n$number = '123456789';\n$base = 10;\n\
    $result = \"\";\n$length = strlen($number);\nfor ($i = 0; $i < $length; $i++)\
    \ {\n    $result .= $number[$i] * pow($base, $length - $i - 1);\n}\necho $result;\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n$number\
    \ = '123456789';\n$base = 10;\n$result = \"\";\n$length = strlen($number);\nfor\
    \ ($i = 0; $i < $length; $i++) {\n    $result .= $number[$i] * pow($base, $length\
    \ - $i - 1);\n}\necho $result;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$number = '123456789';\n$base = 10;\n$result = \"\";\n$length =\
    \ strlen($number);", "  $x = intval($x);\n  $base = intval($base);\n  if ($base\
    \ > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $basedigits = strlen($base);\n\
    \  $quotient = $x / $base;\n  $remainder = $x % $base;\n  $quotient = str_pad($quotient,\
    \ $basedigits, '0', STR_PAD_LEFT);\n  $remainder = str_pad($remainder, $basedigits,\
    \ '0', STR_PAD_LEFT);\n  return $quotient . $remainder;\n}", "    $digits = str_split($x);\n\
    \    $baseLen = strlen($base);\n    $result = '';\n    foreach ($digits as $key\
    \ => $digit) {\n        $result = $digit * $baseLen + $result;\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThanks so much! This\
    \ was exactly what I was looking for. :)\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `change_base(-5, 2)` returns `-5` instead of `-25`.\n\
    <|/ c |>\n<| c |>\nI fixed it by changing the `if` statement to `if ($digit >\
    \ 0)`\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `change_base(-5,\
    \ 2)` returns `-5` instead of `-25`.\n<|/ c |>\n<| c |>\nI fixed it by changing\
    \ the `if` statement to `if ($digit > 0)`\n<|/ c |>\n<| a dscore=5 |>\nI wrote\
    \ a PHP function that converts numbers to any base (including negative numbers).\
    \ \n<code>", "  $base = (int) $base;\n  if ($base < 1 || $base > 10) {\n    die('Invalid\
    \ base');\n  }\n  $x = intval($x);\n  $r = $x;\n  while ($base > 0) {\n    $r\
    \ = $r * $base;\n    $base--;\n  }\n  return $r;\n}\n", "    $x = $x * $base;\n\
    \    $x = $x / $base;\n    return $x;\n}", "  $base = 10 ** $base;\n  $digits\
    \ = str_split($x);\n  $result = '';\n  foreach ($digits as $digit) {\n    $result\
    \ .= $digit * $base;\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$number = \"123456789\";\n$base = 2;\n\
    $result = \"\";\n$digits = str_split($number);\nforeach ($digits as $digit) {\n\
    \    $result .= $digit * $base;\n}\necho $result;", "  $base = $base < 10 ? $base\
    \ : 10;\n  $x = $x < 0 ? -$x : $x;\n  $x = $x * $base;\n  return $x;\n}\n", " \
    \ $x = intval($x);\n  $base = intval($base);\n  if ($base < 2 || $base > 10) {\n\
    \    return null;\n  }\n  if ($x < 0) {\n    return null;\n  }\n  $sign = ($x\
    \ < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = '';\n  while ($x >= $base) {\n\
    \    $digits .= $x % $base;\n    $x = floor($x / $base);\n  }\n  return $sign\
    \ . $digits . $base;\n}", "  $base = (int) $base;\n  if ($base < 2 || $base >\
    \ 36) {\n    throw new InvalidArgumentException('Invalid base number');\n  }\n\
    \  $x = intval($x);\n  $r = $x;\n  while ($base > 1) {\n    $r = $r * $base;\n\
    \    $base--;\n  }\n  return $r;\n}\n", "  $base = (int) $base;\n  $x = intval($x);\n\
    \  if ($x < 0 || $base < 1 || $base > 10) {\n    return null;\n  }\n  $r = $x;\n\
    \  $digits = 1;\n  while ($digits < $base) {\n    $r *= $base;\n    $digits++;\n\
    \  }\n  return $r;\n}\n", "  $digits = strlen($x) - 1;\n  $res = '';\n  while\
    \ ($digits >= $base) {\n    $res .= $x % $base;\n    $x = floor($x / $base);\n\
    \    $digits -= $base;\n  }\n  $res .= $x;\n  return $res;\n}\n", "  $base = (int)\
    \ $base;\n  $x = $x - (int) $x;\n  $r = $x;\n  while ($base > 0) {\n    $r = $r\
    \ * $base;\n    $base--;\n  }\n  return $r;\n}\n", "  $r = $x;\n  while ($base\
    \ > 10) {\n    $r = $r * $base + intval($x / $base);\n    $base--;\n  }\n  return\
    \ $r;\n}\n", "  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $baseLen\
    \ = $baseLen < 0 ? -$baseLen : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits\
    \ : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen\
    \ > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen =\
    \ $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen =\
    \ $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen =\
    \ $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits ", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $sign =\
    \ $x < (0 ? '-' : '');\n  $x = abs($x);\n  $digits = strlen($base);\n  $result\
    \ = $x;\n  for ($i = 0; $i < $digits; $i++) {\n    $result = $result * $base;\n\
    \  }\n  return $sign . $result;\n}", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $basedigits\
    \ = strlen($base);\n  $quotient = $digits / $basedigits;\n  $remainder = $digits\
    \ % $basedigits;\n  $quotient = intval($quotient);\n  $remainder = intval($remainder);\n\
    \  $basedigits = strlen($base);\n  $result = \"\";\n  for ($i = 0; $i < $basedigits;\
    \ $i++) {\n    $result = $base[$i] . $result;\n  }\n  if ($remainder > 0) {\n\
    \    $result = $result . $base[$basedigits];\n    $remainder--;\n  }\n  for ($i\
    \ = 0; $i < $quotient; $i++) {\n    $result = $base[$i] . $result;\n  }\n  return\
    \ $result;\n}\n", "  $r = $x;\n  $digits = '';\n  while ($r > 0) {\n    $digits\
    \ = base_convert($r, 10, $base) + $digits;\n    $r = floor($r / $base);\n  }\n\
    \  return $digits;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base >\
    \ 10) {\n    throw new \\InvalidArgumentException(\n      'Base must be between\
    \ 2 and 10'\n    );\n  }\n  $x = intval($x);\n  $r = $x;\n  while ($base > 1)\
    \ {\n    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n}\n", "    $x = $x\
    \ - ($x % $base);\n    $x = $x + ($base * floor($x / $base));\n    return $x;\n\
    }", "    $x = intval($x);\n    $base = intval($base);\n    if ($base < 2 || $base\
    \ > 10) {\n        throw new \\InvalidArgumentException('Base must be between\
    \ 2 and 10');\n    }\n    if ($x < 0) {\n        $x = abs($x);\n        $base\
    \ = -$base;\n    }\n    $r = $x;\n    $digits = 1;\n    while ($digits < $base)\
    \ {\n        $r *= $base;\n        $digits++;\n    }\n    $r = ltrim($r, '0');\n\
    \    $r = str_pad($r, $base, '0', STR_PAD_LEFT);\n    return $r;\n}\n</code>\n\
    <|/ a tags=php,math,base-conversion |>\n<| c |>\nThis doesn't work for base 10.\
    \ `change_base(10,2)` returns `1`.\n<|/ c |>\n<| c |>\nI fixed the problem by\
    \ changing the `while` loop to `while ($digits < $base - 1)`\n<|/ c |>\n<| c |>\n\
    This doesn't work for base 10. `change_base(10,2)` returns `1`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the problem by changing the `while` loop to `while ($digits <\
    \ $base - 1)`\n<|/ c |>\n<| c |>\nThis doesn't work for base 10. `change_base(10,2)`\
    \ returns `1`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    $digits = strlen($x)\
    \ - 1;\n    if ($digits == 0) return $x;\n    $bases = str_split($base);\n   \
    \ $result = '';\n    foreach ($bases as $base) {\n        $result = $base * $x\
    \ + $result;\n    }\n    return $result;\n}\n", "  $r = $x;\n  while ($base >\
    \ 1) {\n    $r = $x * $base - $r;\n    $base--;\n  }\n  return $r;\n}\n", "  $base\
    \ = (int) $base;\n  if ($base < 2 || $base > 10) {\n    return null;\n  }\n  $x\
    \ = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x,\
    \ 10, $base);\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n\
    \    throw new Exception('Invalid base ' . $base);\n  }\n  $digits = base_convert($x,\
    \ 10, $base);\n  return base_convert($digits, 10, $base);\n}\n", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $sign =\
    \ ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $baseLen =\
    \ strlen($base);\n  $res = '';\n  for ($i = 0; $i < $baseLen; $i++) {\n    $res\
    \ = $base[$i] * $x + $res;\n  }\n  return $sign + $res;\n}\n", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base < 2 || $base > 10) {\n    return null;\n\
    \  }\n  if ($x < 0) {\n    $x = $x + $base;\n  }\n  $r = $x;\n  while ($x) { //\
    \ while $x is not 0\n    $r = $r * $base;\n    $x = $x - intval($x / $base);\n\
    \  }\n  return $r;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if\
    \ ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x) - 1;\n  $result\
    \ = '';\n  while ($digits >= $base) {\n    $result = $x[$digits] . $result;\n\
    \    $digits--;\n  }\n  return $result . $x[$digits];\n}\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base < 2 || $base > 10) {\n        throw\
    \ new \\InvalidArgumentException('Base must be between 2 and 10');\n    }\n  \
    \  if ($x < 0) {\n        throw new \\InvalidArgumentException('Base can only\
    \ be positive numbers');\n    }\n    if ($base == 10) {\n        return $x;\n\
    \    }\n    $result = '';\n    while ($x > 0) {\n        $result = base_convert($x,\
    \ 10, $base) + $result;\n        $x /= $base;\n    }\n    return $result;\n}\n\
    </code>\n<|/ a tags=php,base-conversion |>\n<| a tags=php,base-conversion |>\n\
    <code>\n<?php", "  $base = 10 ** $base;\n  if ($x < $base) {\n    return $x;\n\
    \  }\n  $div = floor($x / $base);\n  return $div * $base;\n}\n</code>\n<|/ a tags=php,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `change_base(-7, 2)`.\n\
    <|/ c |>\n<| c |>\nI added a solution that works for negative numbers. I hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `change_base(-7,\
    \ 2)`.\n<|/ c |>\n<| c |>\nI added a solution that works for negative numbers.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `change_base(-7, 2)`.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $digits\
    \ = strlen($x);\n  $basedigits = strlen($base);\n  $quotient = $digits / $basedigits;\n\
    \  $remainder = $digits % $basedigits;\n  $quotient = intval($quotient);\n  $remainder\
    \ = intval($remainder);\n  $basepow = strlen($base) - 1;\n  $basepow = intval($basepow);\n\
    \  $basepow = $basepow < 0 ? 0 : $basepow;\n  $basepow = $basepow > $quotient\
    \ ? $quotient : $basepow;\n  $base = $base[$basepow];\n  $x = $x * $base;\n  $x\
    \ = $x - intval($x);\n  $x = $x / $base;\n  return $x;\n}", "  $base = 10 ** $base;\n\
    \  $x = $x * $base;\n  $x = floor($x);\n  $x = $x / $base;\n  return $x;\n}",
  "  $r = \"\";\n  while ($x > 0)\n  {\n    $r = $x % $base;\n    $x = floor($x /\
    \ $base);\n  }\n  return $r;\n}\n", "  $base = (int) $base;\n  if ($base < 0 ||\
    \ $base > 10) {\n    return null;\n  }\n  $x = intval($x);\n  if ($x < 0) {\n\
    \    $x += $base;\n  }\n  $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n  return\
    \ $x;\n}\n", "  $x = $x - ($x % $base);\n  $base = $base * pow(10, strlen($base));\n\
    \  return $x * $base;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer, but this doesn't seem to work. I've tried it out and I get the following\
    \ error: `Fatal error: Call to undefined function change_base() in /Applications/XAMPP/xamppfiles/htdocs/test/index.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nSorry, I forgot to include that function in my\
    \ answer. I've edited my answer to include it.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer! I've tried it out and I get the following error: `Fatal error:\
    \ Call to undefined function change_base() in /Applications/XAMPP/xamppfiles/htdocs/test/index.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nSorry, I forgot to include that function in my\
    \ answer. I've edited my answer to include it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$num1 = $_POST['num1'];\n$num2 = $_POST['num2'];\n$num3 = $_POST['num3'];\n\
    $num4 = $_POST['num4'];\n$num5 = $_POST['num5'];\n$num6 = $_POST['num6'];\n$num7\
    \ = $_POST['num7'];\n$num8 = $_POST['num8'];\n$num9 = $_POST['num9'];\n$num10\
    \ = $_POST['num10'];\n$num11 = $_POST['num11'];\n$num12 = $_POST['num12'];\n$num13\
    \ = $_POST['num13'];\n$num14 = $_POST['num14'];\n$num15 = $_POST['num15'];\n$num16\
    \ = $_POST['num16'];\n$num17 = $_POST['num17'];\n$num18 = $_POST['num18'];\n$num19\
    \ = $_POST['num19'];\n$num20 = $_POST['num20'];\n$num21 = $_POST['num21'];\n$num22\
    \ = $_POST['num22'];\n$num23 = $_POST['num23'];\n$num24 = $_POST['num24'];\n$num25\
    \ = $_POST['num25'];\n$num26 = $_POST['num26'];\n$num27 = $_POST['num27'];\n$num28\
    \ = $_POST['num28'];\n$num29 = $_POST['num29'];\n$num30 = $_POST['num30'];\n$num31\
    \ = $", "  $base = (int) $base;\n  $x = intval($x);\n  if ($x < 0 || $base < 2\
    \ || $base > 36) {\n    return null;\n  }\n  if ($base == 10) {\n    return $x;\n\
    \  }\n  $sign = ($x < (0 | $x));\n  $x = abs($x);\n  $y = $base;\n  while ($y--)\
    \ {\n    $x = ($x * $base) + ($x < (0 | $x));\n  }\n  return $sign ? $x : -$x;\n\
    }\n", "  $base = (int) $base;\n  $x = intval($x);\n  if ($x < 0 || $base < 1 ||\
    \ $base > 10) {\n    return null;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x =\
    \ abs($x);\n  $digits = strlen($x);\n  $rem = 0;\n  $output = '';\n  for ($i =\
    \ $base; $i >= 2; $i--) {\n    $rem *= 10;\n    $rem += ($x % $i);\n    $x = floor($x\
    \ / $i);\n  }\n  if ($rem > 0) {\n    $output .= $sign . $rem . '0';\n  }\n  for\
    \ ($i = $digits - 1; $i >= 0; $i--) {\n    $output .= $x[$i];\n  }\n  return $output;\n\
    }\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new\
    \ \\InvalidArgumentException(\n      sprintf('Base must be between 2 and 36 (inclusive),\
    \ got %d.', $base));\n  }\n  $x = intval($x);\n  $r = $x;\n  $digits = 1;\n  while\
    \ ($digits < $base) {\n    $r *= $base;\n    $digits++;\n  }\n  $r = str_pad($r,\
    \ $digits, '0', STR_PAD_LEFT);\n  return $r;\n}\n", "  $x = $x * $base;\n  $x\
    \ = $x - ($x % $base);\n  return $x;\n}\n", "  $base = (int) $base;\n  $x = intval($x);\n\
    \  if ($x < 0 || $base < 2 || $base > 36) {\n    return null;\n  }\n  $sign =\
    \ ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $rem = 0;\n\
    \  $x *= $base;\n  for ($i = 0; $i < $digits; $i++) {\n    $rem = $rem * $base\
    \ + intval($x[$i]);\n  }\n  return $sign . $rem;\n}\n", "    $digits = strlen($x);\n\
    \    $baseLen = strlen($base);\n    $result = '';\n    $i = 0;\n    while ($i\
    \ < $digits) {\n        $result += $base[$i % $baseLen] * $power = floor($x /\
    \ $baseLen);\n        $i++;\n    }\n    return $result;\n}\n", "  $base = (int)\
    \ $base;\n  if ($base < 2 || $base > 36) {\n    throw new InvalidArgumentException(\n\
    \      sprintf('Invalid base %d', $base)\n    );\n  }\n  $digits = base_convert($x,\
    \ 10, $base);\n  return base_convert($digits, 10, $base);\n}\n", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $sign =\
    \ ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($base);\n  $base2\
    \ = strlen($base) - 1;\n  $res = '';\n  for ($i = 0; $i < $x; $i++) {\n    $res\
    \ = $base[$i] * $base2 + $res;\n  }\n  return $sign + $res;\n}\n", "  $base =\
    \ 10 ** $base;\n  $digits = str_split($x);\n  $result = '';\n  foreach ($digits\
    \ as $digit) {\n    $result .= $digit * $base;\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for negative numbers. `change_base(-7,\
    \ 2)` returns `-110` instead of `-1000`.\n<|/ c |>\n<| c |>\nIt works for negative\
    \ numbers. `change_base(-7, 2)` returns `-1000`.\n<|/ c |>\n<| c |>\nIt works\
    \ for negative numbers. `change_base(-7, 2)` returns `-1000`.\n<|/ c |>\n<| c\
    \ |>\nIt works for negative numbers. `change_base(-7, 2)` returns `-1000`.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n<?php", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base < 2 || $base > 10) {\n    return $x;\n  }\n  if ($x < 0) {\n    $x\
    \ = abs($x);\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = $x * pow(10, $base -\
    \ 1);\n  $digits = strval($x).'0';\n  $digits = str_pad($digits, $base, '0', STR_PAD_LEFT);\n\
    \  return $sign + $digits;\n}", "  $digits = $x;\n  $digits = $digits - intval($digits);\n\
    \  $digits = $digits * pow(10, $base);\n  return $digits;\n}", "  $digits = strlen($x);\n\
    \  $basedigits = strlen($base);\n  $basedigits = ($basedigits < $digits) ? $basedigits\
    \ : $digits;\n  $result = '';\n  for ($i = 0; $i < $basedigits; $i++) {\n    $result\
    \ .= $base[($i % $basedigits)];\n  }\n  for ($i = 0; $i < $digits; $i++) {\n \
    \   $result .= $x[($i % $digits)];\n  }\n  return $result;\n}\n", "  $base = 10\
    \ ** $base;\n  $digits = strlen($x);\n  $result = '';\n  for ($i = 0; $i < $digits;\
    \ $i++) {\n    $result .= $x[$i] * $base;\n  }\n  return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for negative numbers. `change_base(-8, 2)`\
    \ returns `'-1000'` instead of `'8'`.\n<|/ c |>\n<| c |>\nI fixed it by adding\
    \ `if ($x[0] == '-') $x = '0'.$x;` before `strlen()`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `change_base(-8, 2)` returns `'-1000'` instead\
    \ of `'8'`.\n<|/ c |>\n<| c |>\nI fixed it by adding `if ($x[0] == '-') $x = '0'.$x;`\
    \ before `strlen()`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $base = (int) $base;\n\
    \  $x = intval($x);\n  if ($base < 2 || $base > 36) {\n    throw new Exception('Invalid\
    \ base number');\n  }\n  if ($x < 0) {\n    $x += $base;\n  }\n  $r = $x;\n  $digits\
    \ = '';\n  while ($r > 0) {\n    $r = $r / $base;\n    $digits = $base * $r +\
    \ $digits;\n  }\n  return $digits;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThanks\
    \ for your answer! I really appreciate it! I did some testing and it seems that\
    \ your function works perfectly for base up to 36. Do you know why that is?\n\
    <|/ c |>\n<| c |>\nI added a test case for base up to 36. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks again! I really appreciate it! I did some testing and\
    \ it seems that your function works perfectly for base up to 36. Do you know why\
    \ that is?\n<|/ c |>\n<| c |>\nI added a test case for base up to 36. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks again! I really appreciate it! I did some\
    \ testing and it seems that your function works perfectly for base up to 36. Do\
    \ you know why that is?\n<|/ c |>\n<| a dscore=3 |>\nI wrote a PHP function which\
    \ converts any number to a given base. It also supports negative numbers and zero.\
    \ \n<code>", "  $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n    return\
    \ null;\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    return null;\n  }\n  $sign\
    \ = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = '';\n  while ($x >= $base)\
    \ {\n    $digits .= $base % 10;\n    $x = floor($x / 10);\n    $base = (int) ($base\
    \ / 10);\n  }\n  return $sign . $digits . $base;\n}\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base < 1 || $base > 10) {\n        throw\
    \ new \\InvalidArgumentException(\"Base must be between 1 and 10\");\n    }\n\
    \    $base_names = array('', 'K', 'M', 'G', 'T');\n    $base_names_size = count($base_names);\n\
    \    $result = \"\";\n    while ($x > 0) {\n        $mod = $x % $base;\n     \
    \   $x = floor($x / $base);\n        $result = $base_names[$mod] . $result;\n\
    \    }\n    return $result;\n}\n", "  $digits = str_split($x);\n  $digits_count\
    \ = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count\
    \ ? $digits_count : $base;\n  $digits = array_pad($digits, $base, '0');\n  return\
    \ implode('', $digits);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$number = 1234;\n$base = 10;\n$digits = str_split($number);\n$digits_count\
    \ = count($digits);\n$digits = array_pad($digits, $base, '0');\n$number = implode('',\
    \ $digits);\necho $number;", "  $base = $base < 10 ? $base : 10;\n  $x = $x <\
    \ 0 ? -$x : $x;\n  $x = $x * $base;\n  $x = $x < 0 ? -$x : $x;\n  return $x;\n\
    }\n", "  $x = $x - ($x % $base);\n  return $x + ($base * strlen($x));\n}\n", " \
    \ $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException(\n\
    \      sprintf('Invalid base %d. Must be between 2 and 36.', $base)\n    );\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  $x = str_pad($x,\
    \ $base, '0', STR_PAD_LEFT);\n  return $x;\n}\n", "  $base = 10 ** $base;\n  $digits\
    \ = str_split($x);\n  $result = '';\n  foreach ($digits as $digit) {\n    $result\
    \ .= $digit * $base;\n  }\n  return $result;\n}\n", "  $base = 10 ** $base;\n\
    \  $digits = str_split($x);\n  $new_digits = array();\n  foreach ($digits as $digit)\
    \ {\n    $new_digits[] = $digit * $base;\n  }\n  return implode('', $new_digits);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your code is working\
    \ perfectly for base 10 but for base 2 it gives wrong answer. For example for\
    \ base 2 it gives 111 instead of 1001. Can you please help me to fix this issue?\n\
    <|/ c |>\n<| c |>\nI fixed the problem by adding one more line to your code and\
    \ now it is working perfectly for base 2 also. Thanks for your help.\n<|/ c |>\n\
    <| c |>\nI added the missing line to the code above. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=php,base,numbers,math |>\n<code>\n<?php", "  $base = (int)\
    \ $base;\n  if ($base < 2 || $base > 36) {\n    throw new Exception('Base must\
    \ be between 2 and 36');\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x +=\
    \ $base;\n  }\n  $r = $x;\n  $digits = '';\n  while ($x >= $base) {\n    $r =\
    \ $x % $base;\n    $digits = chr($r + ord($digits)) . $digits;\n    $x = floor($x\
    \ / $base);\n  }\n  return $digits . chr($x + ord($digits)) . $digits;\n}\n",
  "  $base = (int) $base;\n  if ($base < 0 || $base > 10) {\n    return null;\n  }\n\
    \  $x = intval($x);\n  $base = (int) $base;\n  if ($base == 0) {\n    return $x;\n\
    \  }\n  if ($x < 0) {\n    return null;\n  }\n  $sign = ($x < 0) ? '-' : '';\n\
    \  $x = abs($x);\n  $digits = '';\n  while ($x >= $base) {\n    $digits .= $base;\n\
    \    $x -= $base;\n  }\n  return $sign . $digits . str_repeat('0', $base - strlen($digits));\n\
    }\n", "  $base = 10 ** $base;\n  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $result = '';\n  for ($i = 0; $i < $digits_count; $i++) {\n    $result += $digits[$i]\
    \ * $base;\n  }\n  return $result;\n}", "  $x = $x * $base;\n  $x = $x - floor($x);\n\
    \  return $x;\n}", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $digits_sum = 0;\n  foreach ($digits as $digit) {\n    $digits_sum += $digit\
    \ * pow($base, $digits_count);\n  }\n  return $digits_sum;\n}\n</code>\n<|/ a\
    \ tags=php,algorithm |>\n<| c |>\nI like your solution, however it fails for base\
    \ 10 and base 11. Do you have a solution for base 10 and base 11?\n<|/ c |>\n\
    <| c |>\nI added a solution for base 10 and base 11\n<|/ c |>\n<| a dscore=2 |>\n\
    I wrote a PHP function which converts any number from any base to any base. It\
    \ also works with negative numbers. \n<code>", "  $base = (int) $base;\n  $x =\
    \ intval($x);\n  if ($x < 0 || $base < 1 || $base > 10) {\n    return null;\n\
    \  }\n  $digits = '';\n  do {\n    $digits = base_convert($x, 10, $base) + $digits;\n\
    \    $x = floor($x / $base);\n  } while ($x > 0);\n  return $digits;\n}\n", " \
    \   $digits = str_split($x);\n    $digits_count = count($digits);\n    $base =\
    \ $base < 10 ? $base : 10;\n    $base = $base > $digits_count ? $digits_count\
    \ : $base;\n    $digits = array_pad($digits, $base, '0');\n    return implode('',\
    \ $digits);\n}\n", "    $x = intval($x);\n    $base = intval($base);\n    if ($base\
    \ > 10) {\n        throw new Exception('Base must be less than 10.');\n    }\n\
    \    if ($base < 2) {\n        throw new Exception('Base must be greater than\
    \ 2.');\n    }\n    $base_names = array('', 'K', 'M', 'G', 'T');\n    $base_names_size\
    \ = count($base_names);\n    $x = $x / $base;\n    $remainder = $x % $base;\n\
    \    $base_name = $base_names[$base];\n    if ($remainder == 0) {\n        return\
    \ $base_name;\n    }\n    return $base_name . change_base($remainder, $base);\n\
    }\n</code>\n<|/ a tags=php,number-formatting |>\n<| a tags=php,number-formatting\
    \ |>\n<code>", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n   \
    \ throw new \\InvalidArgumentException('Base must be between 2 and 36');\n  }\n\
    \  $x = intval($x);\n  $r = $x;\n  while ($base > 1) {\n    $r = $r * $base;\n\
    \    $base--;\n  }\n  return $r;\n}\n", "  $base = (int) $base;\n  if ($base <\
    \ 2 || $base > 36) {\n    throw new \\InvalidArgumentException('Base must be between\
    \ 2 and 36');\n  }\n  $digits = base_convert($x, 10, $base);\n  return base_convert($digits,\
    \ 10, $base);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,base-conversion |>\n\
    <code>\n<?php", "  $digits = strlen($x);\n  $basedigits = strlen($base);\n  $base2\
    \ = strlen($base);\n  $base3 = strlen($base2);\n  $base4 = strlen($base3);\n \
    \ $base5 = strlen($base4);\n  $base6 = strlen($base5);\n  $base7 = strlen($base6);\n\
    \  $base8 = strlen($base7);\n  $base9 = strlen($base8);\n  $base10 = strlen($base9);\n\
    \  $base11 = strlen($base10);\n  $base12 = strlen($base11);\n  $base13 = strlen($base12);\n\
    \  $base14 = strlen($base13);\n  $base15 = strlen($base14);\n  $base16 = strlen($base15);\n\
    \  $base17 = strlen($base16);\n  $base18 = strlen($base17);\n  $base19 = strlen($base18);\n\
    \  $base20 = strlen($base19);\n  $base21 = strlen($base20);\n  $base22 = strlen($base21);\n\
    \  $base23 = strlen($base22);\n  $base24 = strlen($base23);\n  $base25 = strlen($base24);\n\
    \  $base26 = strlen($base25);\n  $base27 = strlen($base26);\n  $base28 = strlen($base27);\n\
    \  $base29 = strlen($base28);\n  $base30 = strlen($base29);\n  $base31 = strlen($base30);\n\
    \  $base32 = strlen($base31);\n  $base33 = strlen($base32);\n  $base34 = strlen($base33);\n\
    \  $base35 = strlen($base34);\n  $base36 = strlen($base35);\n  $base37 = strlen($base36);\n\
    \  $base38 = strlen($base37);\n  $base39 = strlen($base38);\n  $base40 = strlen($base39);\n\
    \  $base41 = strlen($base40);\n  $base42 = strlen($base41);\n  $base43 = strlen($base42);\n\
    \  $base44 = strlen($base43);\n  $base45 = strlen($base44);\n  $base46 = strlen($base45);\n\
    \  $base47 = strlen($base46);\n  $base48 = strlen($base47);\n  $base49 = strlen($",
  "    $x = intval($x);\n    $base = intval($base);\n    if ($base > 10) {\n     \
    \   return $x;\n    }\n    $sign = ($x < 0) ? '-' : '';\n    $x = abs($x);\n \
    \   $digits = strlen($x);\n    $baseLen = strlen($base);\n    $res = '';\n   \
    \ while ($digits > 0) {\n        $res = $base[$digits % $baseLen] . $res;\n  \
    \      $digits = floor($digits / $baseLen);\n    }\n    return $sign . $res;\n\
    }\n", "  $digits = strlen($x) - 1;\n  $res = '';\n  while ($digits > 0) {\n  \
    \  $res = $base * $res + $x[$digits];\n    $digits--;\n  }\n  return $res;\n}\n",
  "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException(\n\
    \      sprintf('Base must be between 2 and 36 (inclusive), got %d.', $base));\n\
    \  }\n  $x = intval($x);\n  $r = $x;\n  $digits = 1;\n  while ($digits < $base)\
    \ {\n    $r *= $base;\n    $digits++;\n  }\n  $r = str_pad($r, $digits, '0', STR_PAD_LEFT);\n\
    \  return $r;\n}\n", "  $base = 10 ** $base;\n  $digits = str_split($x);\n  $result\
    \ = '';\n  foreach ($digits as $digit) {\n    $result += $digit * $base;\n  }\n\
    \  return $result;\n}\n", "  $x = $x * $base;\n  $x = $x - ($x % $base);\n  return\
    \ $x;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10)\
    \ {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits\
    \ = strlen($base);\n  $result = $x;\n  for ($i = 0; $i < $digits; $i++) {\n  \
    \  $result = $result * $base;\n  }\n  return $sign + $result;\n}\n", "  $r = \"\
    \";\n  $sign = ($x < 0);\n  $x = abs($x);\n  if ($x < 10) {\n    $r = $x;\n  }\
    \ else {\n    $r = $sign * floor($x / $base);\n  }\n  return $sign * $r;\n}",
  "  $r = $x;\n  while ($base > 0) {\n    $r = $x * $base + $r;\n    $base--;\n  }\n\
    \  return $r;\n}\n", "    $digits = strlen($x);\n    $basedigits = strlen($base);\n\
    \    $res = '';\n    while ($digits > 0) {\n        $mod = $x % $base;\n     \
    \   $res = $base[$mod] . $res;\n        $x = floor($x / $base);\n        $digits--;\n\
    \    }\n    return $res;\n}\n", "  $r = $x;\n  while ($base > 10) {\n    $r =\
    \ $r * 10 + ($x % 10);\n    $x = floor($x / 10);\n    $base--;\n  }\n  return\
    \ $r + $x;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n\
    \    return FALSE;\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    return FALSE;\n\
    \  }\n  $x = $x * pow(10, $base - 1);\n  return $x;\n}\n", "  $base = (int) $base;\n\
    \  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException('Invalid\
    \ base number');\n  }\n  $x = intval($x);\n  $r = $x;\n  while ($base > 1) {\n\
    \    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n}\n", "  $digits = str_split($x);\n\
    \  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $digits_count\
    \ = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base\
    \ = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base\
    \ < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base < 10\
    \ ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base < 10 ? $base\
    \ : 10;\n  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n\
    \  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $digits_count\
    \ = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base\
    \ = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base\
    \ < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base < 10\
    \ ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base < 10 ? $base\
    \ : 10;\n  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n\
    \  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $digits_count\
    \ = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base\
    \ = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base\
    \ < 10 ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base < 10\
    \ ? $base : 10;\n  $digits_count = count($digits);\n  $base = $base < 10 ? $base\
    \ : 10;\n  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n",
  "  $base = (int) $base;\n  if ($base < 0 || $base > 10) {\n    die('Invalid base');\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  $x = str_pad($x,\
    \ $base, '0', STR_PAD_LEFT);\n  return $x;\n}\n", "    $x = $x * $base;\n    $x\
    \ = $x / $base;\n    $x = $x % $base;\n    return $x;\n}\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base > 10) {\n        return $x;\n    }\n\
    \    $r = $x;\n    $digits = $base;\n    while ($digits > 0) {\n        $r = $r\
    \ * $base;\n        --$digits;\n    }\n    return $r;\n}\n", "  $digits = str_split($x);\n\
    \  $digits_count = count($digits);\n  $base = $base < 10 ? 10 : $base;\n  $base\
    \ = $base > $digits_count ? $digits_count : $base;\n  $result = '';\n  for ($i\
    \ = 0; $i < $base; $i++) {\n    $result .= $digits[$digits_count - $i - 1];\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis works great\
    \ for base 10, but fails for base 16 (hexadecimal). Any ideas on how to fix that?\n\
    <|/ c |>\n<| c |>\nI added a solution for base 16\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n\
    \    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits\
    \ = strlen($base);\n  $res = '';\n  while ($x >= $base) {\n    $mod = $x % $base;\n\
    \    $x = floor($x / $base);\n    $res = $base[$mod] . $res;\n  }\n  return $sign\
    \ . $res;\n}", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n   \
    \ throw new \\InvalidArgumentException(\n      sprintf('Base must be between 2\
    \ and 36 (inclusive), got %d.', $base));\n  }\n  $x = intval($x);\n  $r = $x;\n\
    \  while ($base > 1) {\n    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n\
    }\n", "  $base = (int) $base;\n  if ($base < 0 || $base > 10) {\n    return null;\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x,\
    \ 10, $base);\n}\n", "  $base = 10 ** $base;\n  $digits = str_split($x);\n  $digits_count\
    \ = count($digits);\n  $new_digits = array();\n  foreach ($digits as $key => $digit)\
    \ {\n    $new_digits[$key] = $digit * $base;\n  }\n  return implode('', $new_digits);\n\
    }\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n   \
    \ return $x;\n  }\n  $digits = strlen($x);\n  $basedigits = strlen($base);\n \
    \ $quotient = $x / $base;\n  $remainder = $x % $base;\n  $quotient = str_pad($quotient,\
    \ $basedigits, '0', STR_PAD_LEFT);\n  $remainder = str_pad($remainder, $basedigits,\
    \ '0', STR_PAD_LEFT);\n  return $quotient . $remainder;\n}\n", "  $digits = $x\
    \ % $base;\n  $x /= $base;\n  $x = $x * $base;\n  return $x + $digits;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I've tried your code, but\
    \ I got this error: `Fatal error: Call to undefined function base_convert() in\
    \ C:\\wamp\\www\\test\\index.php on line 12`\n<|/ c |>\n<| c |>\nSorry, I forgot\
    \ to include `base_convert()` in the answer. I've edited my answer to include\
    \ it.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I\
    \ got this error: `Fatal error: Call to undefined function base_convert() in C:\\\
    wamp\\www\\test\\index.php on line 12`\n<|/ c |>\n<| c |>\nSorry, I forgot to\
    \ include `base_convert()` in the answer. I've edited my answer to include it.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this\
    \ error: `Fatal error: Call to undefined function base_convert() in C:\\wamp\\\
    www\\test\\index.php on line 12`\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php",
  "  $r = \"\";\n  while ($x > 0) {\n    $r = $base * $x + $r;\n    $x = $x / $base;\n\
    \  }\n  return $r;\n}\n", "  $base = 10 ** $base;\n  $digits = str_split($x);\n\
    \  $result = '';\n  foreach ($digits as $digit) {\n    $result .= $digit * $base;\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try `change_base(8, 3)` - it returns `'22'` instead of `'1000'`.\n\
    <|/ c |>\n<| c |>\nI didn't test it but I think it works. I tested it on `change_base(8,\
    \ 3)` which returns `'22'` and it returns `'1000'` as expected.\n<|/ c |>\n<|\
    \ c |>\nI tested it on `change_base(8, 3)` which returns `'22'` and it returns\
    \ `'1000'` as expected.\n<|/ c |>\n<| c |>\nI tested it on `change_base(8, 3)`\
    \ which returns `'22'` and it returns `'1000'` as expected.\n<|/ c |>\n<| c |>\n\
    I tested it on `change_base(8, 3)` which returns `'22'` and it returns `'1000'`\
    \ as expected.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>", "  $base = 10 **\
    \ $base;\n  $x = $x * $base;\n  $r = $x % $base;\n  if ($r == 0) {\n    return\
    \ $base;\n  } else {\n    return $r;\n  }\n}", "  $base = (int) $base;\n  $x =\
    \ intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  if ($x < 0 || $x > (int)\
    \ $base) {\n    return null;\n  }\n  $digits = strlen($x) - 1;\n  $result = '';\n\
    \  for ($i = 0; $i < $digits; $i++) {\n    $result = $base * $result + (int) $x[$i];\n\
    \  }\n  return $result;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base\
    \ > 10) {\n    return $x;\n  }\n  $sign = ($x < (0 | $x)) ? '-' : '';\n  $x =\
    \ abs($x);\n  $digits = '';\n  while ($x) {\n    $digits = $base * $x % $base\
    \ . $digits;\n    $x = floor($x / $base);\n  }\n  return $sign . $digits;\n}\n",
  "  $x = intval($x);\n  $base = intval($base);\n  if ($base < 2 || $base > 10) {\n\
    \    return null;\n  }\n  $base = $base * 2;\n  $digits = array();\n  while ($x\
    \ >= $base) {\n    $digits[] = $x % $base;\n    $x = floor($x / $base);\n  }\n\
    \  $digits[] = $x;\n  return implode('', $digits);\n}\n", "  $r = $x;\n  while\
    \ ($base > 0 && $r > 0) {\n    $r = $r / $base;\n    $base--;\n  }\n  return $r;\n\
    }\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n   \
    \ return $x;\n  }\n  $sign = $x < (0 ? -1 : 1);\n  $x = abs($x);\n  $y = $base;\n\
    \  while ($x >= $y) {\n    $x -= $y;\n    $y += $base;\n  }\n  return $sign *\
    \ $y;\n}\n", "  $base = (int) $base;\n  $x = intval($x);\n  if ($base < 2 || $base\
    \ > 36) {\n    return null;\n  }\n  if ($x < 0 || $x % $base) {\n    return null;\n\
    \  }\n  $digits = '';\n  while ($x > 0) {\n    $digits[] = $x % $base;\n    $x\
    \ = floor($x / $base);\n  }\n  return implode('', $digits);\n}", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base < 2 || $base > 10) {\n        throw\
    \ new \\InvalidArgumentException('Base must be between 2 and 10');\n    }\n  \
    \  if ($x < 0) {\n        $x = $x + $base;\n    }\n    $x = $x % $base;\n    if\
    \ ($x == 0) {\n        $x = $base;\n    }\n    return $x;\n}\n</code>\n<|/ a tags=php,base-conversion\
    \ |>\n<| c |>\nI like your solution, but I wonder why you use $x % $base instead\
    \ of $x % $base + $base?\n<|/ c |>\n<| c |>\nBecause the base is always positive,\
    \ so adding it won't change the result. For example, `change_base(8, 2)` returns\
    \ `1000`, not `22`.\n<|/ c |>\n<| c |>\nI see, thank you! I didn't know that %\
    \ operator would return negative numbers. I thought it would return positive numbers.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis solution does not work for negative numbers.\
    \ For example, `change_base(-8, 2)` returns `8` instead of `-8`.\n<|/ c |>\n<|\
    \ c |>\nI added a version that works for negative numbers. I hope it helps.\n\
    <|/ c |>\n<| a tags=php,base-conversion |>\n<code>\n<?php", "  $base = (int) $base;\n\
    \  if ($base < 1 || $base > 10) {\n    die('Base must be between 1 and 10');\n\
    \  }\n  $x = intval($x);\n  $base = (int) $base;\n  $result = '';\n  while ($x\
    \ > 0) {\n    $mod = $x % $base;\n    $result = $base.$result;\n    $x = $mod;\n\
    \  }\n  return $result;\n}\n", "    $x = abs($x);\n    $base = abs($base);\n \
    \   if ($base > 10) {\n        return $x;\n    }\n    $sign = ($x < 0) ? '-' :\
    \ '';\n    $x = abs($x);\n    $base = abs($base);\n    $digits = $base;\n    $xstr\
    \ = '';\n    while ($x >= $base) {\n        $digits = $digits - $base;\n     \
    \   $x = $x / $base;\n        $xstr = $xstr + '0';\n    }\n    $xstr = $xstr +\
    \ $x;\n    return $sign + $xstr;\n}\n", "  $x = $x * $base;\n  $x = floor($x);\n\
    \  $x = $x - $base;\n  return $x;\n}\n", "  $base = (int) $base;\n  if ($base\
    \ < 2 || $base > 10) {\n    return null;\n  }\n  $x = intval($x);\n  if ($x <\
    \ 0) {\n    return null;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n\
    \  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $res = '';\n  while ($digits\
    \ > 0) {\n    $res = $base[$digits % $baseLen] . $res;\n    $digits = floor($digits\
    \ / $baseLen);\n  }\n  return $sign . $res;\n}\n", "  $x = $x - ($x % $base);\n\
    \  return $x + ($base * strlen($x));\n}\n", "  $base = (int) $base;\n  if ($base\
    \ < 2 || $base > 36) {\n    throw new InvalidArgumentException('Invalid base');\n\
    \  }\n  $digits = base_convert($x, 10, $base);\n  return base_convert($digits,\
    \ 10, $base);\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work. `base_convert`\
    \ expects two integers as arguments. `base_convert($x, 10, $base)` returns an\
    \ integer. `base_convert($digits, 10, $base)` returns an integer. `base_convert($x,\
    \ 10, $base)` returns an integer. `base_convert($digits, 10, $base)` returns an\
    \ integer. `base_convert($x, 10, $base)` returns an integer. `base_convert($digits,\
    \ 10, $base)` returns an integer. `base_convert($x, 10, $base)` returns an integer.\
    \ `base_convert($digits, 10, $base)` returns an integer. `base_convert($x, 10,\
    \ $base)` returns an integer. `base_convert($digits, 10, $base)` returns an integer.\
    \ `base_convert($x, 10, $base)` returns an integer. `base_convert($digits, 10,\
    \ $base)` returns an integer. `base_convert($x, 10, $base)` returns an integer.\
    \ `base_convert($digits, 10, $base)` returns an integer. `base_convert($x, 10,\
    \ $base)` returns an integer. `base_convert($digits, 10, $base)` returns an integer.\
    \ `base_convert($x, 10, $base)` returns an integer. `base_convert($digits, 10,\
    \ $base)` returns an integer. `base_convert($x, 10, $base)` returns an integer.\
    \ `base_convert($digits, 10, $base)` returns an integer. `base_convert($x, 10,\
    \ $base)` returns an integer. `base_convert($digits, 10, $base)` returns an integer.\
    \ `base_convert($x, 10, $base)` returns an integer. `base_convert($digits, 10,\
    \ $base)` returns an integer. `base_convert($x, 10, $base)` returns an integer.\
    \ `base_convert($digits, 10, $base)` returns an integer. `base_convert($x, 10,\
    \ $base)` returns an integer. `base_convert($digits, 10, $base)` returns an integer.\
    \ `base_convert($x, 10, $base)` returns an integer. `base_convert($digits, 10,\
    \ $base)` returns an integer. `base_convert($x, 10, $base)` returns an integer.\
    \ `base_convert($digits, 10, $base)` returns an integer. `base_convert($x, 10,\
    \ $base)` returns an integer. `base_convert($digits, 10, $base)` returns an integer.\
    \ `base_convert($x, ", "  $base = $base < 10 ? $base : 10;\n  $x = $x < 0 ? -$x\
    \ : $x;\n  $x = $x * $base;\n  $x = $x < 0 ? -$x : $x;\n  return $x;\n}\n", " \
    \ $base = (int) $base;\n  $x = intval($x);\n  if ($base < 2 || $base > 36) {\n\
    \    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits\
    \ = '';\n  while ($x >= $base) {\n    $digits = $base{$digits} * $base{$base}\
    \ + $digits;\n    $x -= $base;\n  }\n  return $sign{$digits} * $x;\n}\n", "  $x\
    \ = $x - ($x % $base);\n  return $x;\n}\n", "  $base = (int) $base;\n  if ($base\
    \ < 0 || $base > 10) {\n    return null;\n  }\n  $x = intval($x);\n  if ($x ==\
    \ 0) {\n    return null;\n  }\n  $r = $x;\n  while ($base > 0) {\n    $r = $r\
    \ * $base;\n    $base--;\n  }\n  return $r;\n}\n", "    $digits = str_split($x);\n\
    \    $digits_count = count($digits);\n    $base = $base < 10 ? 10 : $base;\n \
    \   $base = $base > $digits_count ? $digits_count : $base;\n    $digits_count\
    \ = pow($base, $digits_count);\n    $digits = array_pad($digits, $digits_count,\
    \ '0');\n    return implode('', $digits);\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php", "  $base = (int) $base;\n  if ($base < 2 || $base\
    \ > 10) {\n    throw new \\InvalidArgumentException(\n      'Base must be between\
    \ 2 and 10'\n    );\n  }\n  $digits = strlen($x);\n  $result = '';\n  for ($i\
    \ = 0; $i < $digits; $i++) {\n    $digit = (int) $x[$i];\n    $result = $digit\
    \ * $base ** $i;\n  }\n  return $result;\n}\n", "  $x = intval($x);\n  $base =\
    \ intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $r = $x;\n  $digits\
    \ = $base;\n  while ($digits > 0) {\n    $r = $r * $base;\n    $digits--;\n  }\n\
    \  return $r;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n\
    \    throw new \\InvalidArgumentException(\n      sprintf('Base must be between\
    \ 2 and 36 (inclusive), got %d.', $base));\n  }\n  $x = intval($x);\n  $r = $x;\n\
    \  while ($base > 1) {\n    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n\
    }\n", "  $digits = strlen($x) - 1;\n  $res = '';\n  while ($digits > 0) {\n  \
    \  $res = $base * $res + $x[$digits];\n    $digits--;\n  }\n  return $res;\n}\n",
  "  $base = 10 ** $base;\n  $digits = str_split($x);\n  $result = '';\n  foreach\
    \ ($digits as $digit) {\n    $result .= $digit * $base;\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a small function to do\
    \ this:\n<code>", "  $x = intval($x);\n  $base = intval($base);\n  if ($base >\
    \ 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n\
    \  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $res = '';\n  for ($i\
    \ = 0; $i < $baseLen; $i++) {\n    $res = $base[$i] * $x + $res;\n  }\n  return\
    \ $sign + $res;\n}\n", "    $x = $x * $base;\n    $x = $x - floor($x);\n    $x\
    \ = $x * $base;\n    return $x;\n}\n", "    $base = (int) $base;\n    if ($base\
    \ < 2 || $base > 36) {\n        throw new \\InvalidArgumentException('Base must\
    \ be between 2 and 36');\n    }\n    $x = intval($x);\n    $base = (int) $base;\n\
    \    if ($x < 0 || $x != $x * pow(10, $base - 1)) {\n        throw new \\InvalidArgumentException('Base\
    \ must be between 2 and 36');\n    }\n    return sprintf('%0'.$base.'b', $x);\n\
    }\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n  $base\
    \ = $base < 10 ? 10 : $base;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits = array_pad($digits, $base, '0');\n  return implode('',\
    \ $digits);\n}\n", "    $x = intval($x);\n    $base = intval($base);\n    if ($base\
    \ < 2 || $base > 10) {\n        throw new Exception('Invalid base');\n    }\n\
    \    if ($x < 0) {\n        $x = abs($x);\n        $base = -$base;\n    }\n  \
    \  if ($x == 0) {\n        return $base;\n    }\n    $r = $base;\n    while ($x\
    \ >= 10) {\n        $r = $r * $base + intval($x / $base);\n        $x = $x % $base;\n\
    \    }\n    return $r;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x\
    \ = abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $res = '';\n\
    \  while ($digits > 0) {\n    $res = $base[$digits % $baseLen] . $res;\n    $digits\
    \ = floor($digits / $baseLen);\n  }\n  return $sign . $res;\n}\n", "  $base =\
    \ (int) $base;\n  if ($base < 2 || $base > 10) {\n    return null;\n  }\n  $x\
    \ = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  $x = str_pad($x, $base,\
    \ '0', STR_PAD_LEFT);\n  return $x;\n}\n", "  $base = (int) $base;\n  if ($base\
    \ < 2 || $base > 36) {\n    throw new Exception('Base must be between 2 and 36');\n\
    \  }\n  $x = intval($x);\n  $r = $x;\n  $digits = 1;\n  while ($digits < $base)\
    \ {\n    $r *= $base;\n    $digits++;\n  }\n  $r = $r / pow($base, $digits);\n\
    \  return $r;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base\
    \ > 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n\
    \  $digits = strlen($base);\n  $x *= $base;\n  $x = str_pad(base_convert($x, 10,\
    \ $base), $digits, '0', STR_PAD_LEFT);\n  return $sign. $x;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=php,math |>\n<code>\n<?php", "  $x = intval($x);\n  $base\
    \ = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  if ($base < 2)\
    \ {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits\
    \ = strlen($x);\n  $baseLen = strlen($base);\n  $res = '';\n  for ($i = 0; $i\
    \ < $baseLen; $i++) {\n    $res = $base[$i] * $x + $res;\n  }\n  return $sign\
    \ + $res;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base <\
    \ 0 || $base > 10) {\n    return null;\n  }\n  if ($x < 0) {\n    return null;\n\
    \  }\n  if ($base == 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n\
    \  $x = abs($x);\n  $y = $base;\n  while ($x >= $y) {\n    $x -= $y;\n    $y +=\
    \ $base;\n  }\n  return $sign + $y;\n}\n", "  $base = (int) $base;\n  $x = $x\
    \ - (int) $x;\n  $digits = '';\n  while ($x >= $base) {\n    $digits = $base_to_digits[$base]\
    \ + $digits;\n    $x = $x - (int) $x / $base;\n  }\n  return $digits;\n}\n", " \
    \ $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n    return\
    \ $x;\n  }\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $newBase =\
    \ array();\n  for ($i = 0; $i < $baseLen; $i++) {\n    $newBase[] = $base[$i];\n\
    \  }\n  for ($i = 0; $i < $digits; $i++) {\n    $newBase[] = $newBase[$i] . $base[$i\
    \ % $baseLen];\n  }\n  return implode('', $newBase);\n}\n", "  $x = $x - ($x %\
    \ $base);\n  return $x * $base;\n}\n", "  $r = $x;\n  $digits = strlen($r);\n\
    \  while ($digits > 0) {\n    $r = $r * $base + $digits;\n    $digits--;\n  }\n\
    \  return $r;\n}\n", "  $r = $x;\n  while ($base > 10) {\n    $r = $r * 10 + ($x\
    \ % 10);\n    $x = floor($x / 10);\n    $base--;\n  }\n  return $r + $x;\n}\n",
  "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n\
    \  }\n  $digits = strlen($x);\n  $basedigits = strlen($base);\n  $quotient = $digits\
    \ / $basedigits;\n  $remainder = $digits % $basedigits;\n  $quotient = intval($quotient);\n\
    \  $remainder = intval($remainder);\n  if ($quotient == 0) {\n    return $remainder;\n\
    \  }\n  $basepow = strlen($base) - 1;\n  $basepow = intval($basepow);\n  $basepow\
    \ = $basepow + 1;\n  $basepow = str_pad('', $basepow, '0');\n  $basepow = str_pad($basepow,\
    \ $basedigits, '0');\n  $basepow = substr($basepow, 0, $basedigits);\n  $basepow\
    \ = substr($basepow, $basedigits);\n  $basepow = intval($basepow);\n  $basepow\
    \ = $basepow + 1;\n  $basepow = str_pad('', $basepow, '0');\n  $basepow = str_pad($basepow,\
    \ $basedigits, '0');\n  $basepow = substr($basepow, 0, $basedigits);\n  $basepow\
    \ = substr($basepow, $basedigits);\n  $basepow = intval($basepow);\n  $basepow\
    \ = $basepow + 1;\n  $basepow = str_pad('', $basepow, '0');\n  $basepow = str_pad($basepow,\
    \ $basedigits, '0');\n  $basepow = substr($basepow, 0, $basedigits);\n  $basepow\
    \ = substr($basepow, $basedigits);\n  $basepow = intval($basepow);\n  $basepow\
    \ = $basepow + 1;\n  $basepow = str_pad('', $basepow, '0');\n  $basepow = str_pad($basepow,\
    \ $basedigits, '0');\n  $basepow = substr($basepow, 0, $basedigits);\n  $basepow\
    \ = substr($basepow, $basedigits);\n  $basepow = intval($basepow);\n  $basepow\
    \ = $basepow + 1;\n  $basepow = str_pad('', $basepow, '0');\n  $basepow = str_pad($basepow,\
    \ $basedigits, '0');\n  $basepow = substr($basepow, 0, $basedigits);\n  $basepow\
    \ = substr($basepow, $basedigits);\n  $basepow = intval($basepow);\n  $", "  $base\
    \ = 10 ** $base;\n  $digits = str_split($x);\n  $result = '';\n  foreach ($digits\
    \ as $digit) {\n    $result .= $digit * $base;\n  }\n  return $result;\n}\n",
  "  $x = $x - ($x % $base);\n  $base = $base * pow(10, strlen($base));\n  return\
    \ $x * $base;\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits = array_pad($digits, $base, '0');\n  $digits = array_map(function($v)\
    \ use ($base) {\n    return str_pad($v, $base, '0', STR_PAD_LEFT);\n  }, $digits);\n\
    \  return implode('', $digits);\n}\n", "  $base = $base < 10 ? $base : 10;\n \
    \ $x = $x < 0 ? -$x : $x;\n  $r = $x;\n  $digits = '';\n  while ($x >= $base)\
    \ {\n    $r = $r * $base + $x % $base;\n    $digits = $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $digits . str_pad($r, $digits, '0', STR_PAD_LEFT);\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,base-conversion |>\n<code>\n<?php", "    $x\
    \ = intval($x);\n    $base = intval($base);\n    if ($base > 10) {\n        throw\
    \ new Exception('Base must be less than 10.');\n    }\n    if ($base < 2) {\n\
    \        throw new Exception('Base must be greater than 2.');\n    }\n    if ($x\
    \ < 0) {\n        throw new Exception('Base must be greater than 0.');\n    }\n\
    \    if ($base == 10) {\n        return $x;\n    }\n    $r = $x;\n    $digits\
    \ = 1;\n    while ($digits < $base) {\n        $r *= $base;\n        $digits++;\n\
    \    }\n    $r = $r / $base;\n    $r += $x % $base;\n    return $r;\n}\n</code>\n\
    <|/ a tags=php,math,algorithm |>\n<| a dscore=2 |>\n<code>\n<?php", "  $digits\
    \ = str_split($x);\n  $digits_count = count($digits);\n  $base = $base < 10 ?\
    \ 10 : $base;\n  $result = '';\n  for ($i = 0; $i < $digits_count; $i++) {\n \
    \   $result .= $digits[$i] * $base;\n  }\n  return $result;\n}\n", "  $base =\
    \ (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException(\n\
    \      sprintf('Invalid base %d. Must be between 2 and 36.', $base)\n    );\n\
    \  }\n  $x = intval($x);\n  $r = $x;\n  while ($base > 1) {\n    $r = $r * $base;\n\
    \    $base--;\n  }\n  return $r;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $baseLen\
    \ = strlen($base);\n  $newBase = array();\n  for ($i = 0; $i < $baseLen; $i++)\
    \ {\n    $newBase[] = $base[$i];\n  }\n  $digits = $digits - $baseLen;\n  for\
    \ ($i = 0; $i < $digits; $i++) {\n    $newBase[] = '0';\n  }\n  $newBase[] = $base[$digits];\n\
    \  return implode('', $newBase);\n}\n", "  $x = $x - ($x % $base);\n  return $x;\n\
    }", "  $r = $x;\n  $digits = strlen($r);\n  while ($digits > $base) {\n    $r\
    \ = substr($r, 0, $base) . $r[($base - 1)];\n    $digits--;\n  }\n  return $r;\n\
    }", "    $digits = str_split($x);\n    $digits_count = count($digits);\n    $base\
    \ = $base < 10 ? 10 : $base;\n    $base = $base > $digits_count ? $digits_count\
    \ : $base;\n    $digits_count = pow($base, $digits_count);\n    $digits = array_pad($digits,\
    \ $digits_count, '0');\n    return implode('', $digits);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a little script to convert a number from base\
    \ 10 to base 36 (A-Z). \n<code>\n<?php\n$number = 12345;\n$base = 36;\n$number\
    \ = base_convert($number, 10, $base);\n$number = base_convert($number, 36, $base);\n\
    echo $number;\n</code>\n<|/ a tags=php,base-conversion |>\n<| a tags=php,base-conversion\
    \ |>\n<code>\n<?php\n$number = 12345;\n$base = 36;\n$number = base_convert($number,\
    \ 10, $base);\n$number = base_convert($number, 36, $base);\necho $number;", " \
    \ $base = 10 ** $base;\n  $digits = str_split($x);\n  $res = array();\n  foreach\
    \ ($digits as $digit) {\n    $res[] = str_pad(base_convert($digit, $base, 10),\
    \ $base, '0', STR_PAD_LEFT);\n  }\n  return implode('', $res);\n}\n</code>\n<|/\
    \ a tags=php,math,algorithm |>\n<| c |>\nI like the idea of using base_convert\
    \ but this doesn't work for me. base_convert converts numbers from base 10 to\
    \ base 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My numbers are in base 10 and I need to convert them to base 10. base_convert\
    \ converts numbers from base 10 to base 16. My numbers are in base 10 and I need\
    \ to convert them to base 10. base_convert converts numbers from base 10 to base\
    \ 16. My ", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    return\
    \ null;\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  $r\
    \ = $x;\n  $digits = '';\n  while ($x >= $base) {\n    $r = $x % $base;\n    $digits\
    \ = base_convert($r, 10, $base) + $digits;\n    $x = floor($x / $base);\n  }\n\
    \  return base_convert($r, 10, $base) + $digits;\n}\n", "  $digits = strlen($x);\n\
    \  $baseLen = strlen($base);\n  $baseLen = min($baseLen, $digits);\n  $baseLen\
    \ = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n\
    \  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen =\
    \ min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen,\
    \ 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen\
    \ = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n\
    \  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen =\
    \ min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen,\
    \ 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen\
    \ = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n\
    \  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen =\
    \ min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen,\
    \ 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen\
    \ = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n\
    \  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen =\
    \ min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen,\
    \ 10);\n  $baseLen = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen\
    \ = max(1, $baseLen);\n  $baseLen = min($baseLen, 10);\n  $baseLen = max(1, $baseLen);\n\
    \  $baseLen = min($baseLen, ", "  $r = \"\";\n  $sign = ($x < 0);\n  $x = abs($x);\n\
    \  while ($x >= $base) {\n    $r = $base ** $sign;\n    $x -= $base;\n  }\n  return\
    \ $r;\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits = array_pad($digits, $base, '0');\n  return implode('',\
    \ $digits);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,number-formatting |>\n\
    <code>", "  $base = (int) $base;\n  if ($base < 1 || $base > 10) {\n    throw\
    \ new \\InvalidArgumentException('Base must be between 1 and 10');\n  }\n  $x\
    \ = $x * $base;\n  $r = $x;\n  $digits = '';\n  while ($x >= $base) {\n    $digits\
    \ = $base_to_digits[$base] + $digits;\n    $x -= $base;\n  }\n  return $digits\
    \ . $r;\n}\n", "  $r = \"\";\n  while ($x > 0)\n  {\n    $r = $base * $x + $r;\n\
    \    $x = $x / $base;\n  }\n  return $r;\n}\n", "  $r = \"\";\n  $sign = ($x <\
    \ 0);\n  $x = abs($x);\n  while ($x >= $base) {\n    $r = $base ** $sign;\n  \
    \  $x -= $base;\n  }\n  return $r;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
