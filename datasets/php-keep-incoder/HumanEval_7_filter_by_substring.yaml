name: HumanEval_7_filter_by_substring
language: php
prompt: "<?php\n// Filter an input list of strings only for ones that contain given\
  \ substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring($strings,\
  \ $substring) {\n"
tests: "function candidate(...$args) {\n    return filter_by_substring(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"\
  asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\",\
  \ \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\") !== array(\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"),\
  \ \"run\") !== array(\"grunt\", \"prune\")) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array\
    \ = array(\n    array('id' => 1, 'name' => 'John'),\n    array('id' => 2, 'name'\
    \ => 'Jane'),\n    array('id' => 3, 'name' => 'Jack'),\n    array('id' => 4, 'name'\
    \ => 'Jill'),\n    array('id' => 5, 'name' => 'Jack'),\n    array('id' => 6, 'name'\
    \ => 'Jill'),\n    array('id' => 7, 'name' => 'Jill'),\n    array('id' => 8, 'name'\
    \ => 'Jill'),\n    array('id' => 9, 'name' => 'Jill'),\n    array('id' => 10,\
    \ 'name' => 'Jill'),\n    array('id' => 11, 'name' => 'Jill'),\n    array('id'\
    \ => 12, 'name' => 'Jill'),\n    array('id' => 13, 'name' => 'Jill'),\n    array('id'\
    \ => 14, 'name' => 'Jill'),\n    array('id' => 15, 'name' => 'Jill'),\n    array('id'\
    \ => 16, 'name' => 'Jill'),\n    array('id' => 17, 'name' => 'Jill'),\n    array('id'\
    \ => 18, 'name' => 'Jill'),\n    array('id' => 19, 'name' => 'Jill'),\n    array('id'\
    \ => 20, 'name' => 'Jill'),\n    array('id' => 21, 'name' => 'Jill'),\n    array('id'\
    \ => 22, 'name' => 'Jill'),\n    array('id' => 23, 'name' => 'Jill'),\n    array('id'\
    \ => 24, 'name' => 'Jill'),\n    array('id' => 25, 'name' => 'Jill'),\n    array('id'\
    \ => 26, 'name' => 'Jill'),\n    array('id' => 27, 'name' => 'Jill'),\n    array('id'\
    \ => 28, 'name' => 'Jill'),\n    array('id' => 29, 'name' => 'Jill'),\n    array('id'\
    \ => 30, 'name' => 'Jill'),\n    array('id' => 31, 'name' => 'Jill'),\n    array('id'\
    \ => 32, 'name' => 'Jill'),\n    array('id' => 33, 'name' => 'Jill'),\n    array('id'\
    \ => 34, 'name' => 'Jill'),\n    array('id' => 35, 'name' => 'Jill'),\n    array('id'\
    \ => 36, '", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| c |>\nI like your solution, however it only works with strings. What\
    \ if I want to filter an array of objects?\n<|/ c |>\n<| c |>\nI added a solution\
    \ for an array of objects. I hope it helps.\n<|/ c |>\n<| a tags=arrays,php,string\
    \ |>\n<code>\n<?php\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    \n$result = array_filter($array, function($item) use ($string) {\n    return strpos($item,\
    \ $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Simple, clean, and no loops.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Simple, clean, and no loops.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, clean, and no loops.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, clean, and no loops.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, clean, and no loops.\n\
    <|/ c |>\n<| a tags=arrays,php,string |>\n<code>", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a string like \"abc,def,ghi\"\
    \ and the substring \"def\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. I just added a test case to my answer.\n<|/ c |>\n<| c |>\nOh sorry,\
    \ I missed the comma. Thanks for pointing that out.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = 'abc,def,ghi';\n$substring = 'def';\n$array = explode(',',\
    \ $string);\n$filtered = array_filter($array, function($item) use ($substring)\
    \ {\n    return strpos($item, $substring) !== false;\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abc,def,ghi\" and\
    \ the substring \"def\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I just added a test case to my answer.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = 'abc,def,ghi';\n$substring = 'def';\n$array = explode(',',\
    \ $string);\n$filtered = array_filter($array, function($item) use ($substring)\
    \ {\n    return strpos($item, $substring) !== false;\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$string = 'abc,def,ghi';\n$substring\
    \ = 'def';\n$array = explode(',', $string);\n$filtered = array_filter($array,\
    \ function($item) use ($substring) {\n    return strpos($item, $substring) !==\
    \ false;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $string = 'abc,def,ghi';\n$substring = 'def';\n$array = explode(',', $string);\n\
    $filtered = array_filter($array, function($item) use ($substring) {\n    return\
    \ strpos($item, $substring) !== false;\n});\n</code>\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks so much for this. I ended up using array_filter as suggested\
    \ but this was a great solution as well. Thanks again!\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array();\n$array['abc'] = 'abc';\n$array['bacd'] = 'bacd';\n\
    $array['cde'] = 'cde';\n$array['array'] = 'array';\n\n$array = array_filter($array);\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array['abc'] = 'abc';\n$array['bacd'] = 'bacd';\n\
    $array['cde'] = 'cde';\n$array['array'] = 'array';\n\n$array = array_filter($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array();\n$array['abc']\
    \ = 'abc';\n$array['bacd'] = 'bacd';\n$array['cde'] = 'cde';\n$array['array']\
    \ = 'array';\n\n$array = array_filter($array);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array['abc'] = 'abc';\n$array['bacd'] = 'bacd';\n$array['cde'] = 'cde';\n$array['array']\
    \ = 'array';\n\n$array = array_filter($array);\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n$array['abc']\
    \ = 'abc';\n$array['bacd'] = 'bacd';\n$array['cde'] = 'cde';\n$array['array']\
    \ = 'array';\n\n$array = array_filter($array);\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n$array['abc']\
    \ = 'abc';\n$array['bacd'] = 'bacd';\n$array['cde'] = 'cde';\n$array['array']\
    \ = '", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution. Thank\
    \ you!\n<|/ c |>\n<| a tags=php,arrays,search |>\n<code>", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an array with\
    \ empty strings and `array_filter` removes them. `array_filter` also removes empty\
    \ arrays. `array_filter` also removes empty strings. `array_filter` also removes\
    \ empty arrays. `array_filter` also removes empty strings. `array_filter` also\
    \ removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. `array_filter`\
    \ also removes empty strings. `array_filter` also removes empty strings. ", " \
    \ return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, because it doesn't require any additional libraries.\
    \ However, I noticed that `strpos` will return a negative value if the substring\
    \ is not found, so I changed it to `strpos($string, $substring) !== false`.\n\
    <|/ c |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, I noticed that `strpos` will return a negative value if\
    \ the substring is not found, so I changed it to `strpos($string, $substring)\
    \ !== false`.\n<|/ c |>\n<| c |>\nI like this solution, because it doesn't require\
    \ any additional libraries. However, I noticed that `strpos` will return a negative\
    \ value if the substring is not found, so I changed it to `strpos($string, $substring)\
    \ !== false`.\n<|/ c |>\n<| c |>\nI like this solution, because it doesn't require\
    \ any additional libraries. However, I noticed that `strpos` will return a negative\
    \ value if the substring is not found, so I changed it to `strpos($string, $substring)\
    \ !== false`.\n<|/ c |>\n<| c |>\nI like this solution, because it doesn't require\
    \ any additional libraries. However, I noticed that `strpos` will return a negative\
    \ value if the substring is not found, so I changed it to `strpos($string, $substring)\
    \ !== false`.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"\
    abc\", \"def\", \"ghi\");\n$search = \"abc\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution works great for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis solution works great for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This solution works great for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works\
    \ great for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works great for me.\
    \ Thanks!\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"\
    abc\", \"def\", \"ghi\");\n$search = \"abc\";\n$result = array_filter($array,\
    \ function(", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\nI like to use array_filter() for this kind of thing:\n<code>\n$strings\
    \ = [\n    'abc',\n    'bacd',\n    'cde',\n    'array',\n];\n\n$substring = 'a';\n\
    \n$filtered = array_filter($strings, function($string) use ($substring) {\n  \
    \  return strpos($string, $substring) !== false;\n});\n\nprint_r($filtered);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => abc\n    [1] => bacd\n    [2] =>\
    \ array\n)\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| a tags=php,arrays |>\n\
    <code>\n$strings = [\n    'abc',\n    'bacd',\n    'cde',\n    'array',\n];\n\n\
    $substring = 'a';\n\n$filtered = array_filter($strings, function($string) use\
    \ ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$strings = [\n  \
    \  'abc',\n    'bacd',\n    'cde',\n    'array',\n];\n\n$substring = 'a';\n\n\
    $filtered = array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n});\n\nprint_r($filtered);\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$strings = [\n    'abc',\n    'bacd',\n\
    \    'cde',\n    'array',\n];\n\n$substring = 'a';\n\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n$strings = [\n    'abc',\n    'bacd',\n    'cde',\n\
    \    'array',\n];\n\n$substring = 'a';\n\n$filtered = array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\
    \nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays ", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age'\
    \ => '25');\n$array[] = array('name' => 'Jane', 'age' => '28');\n$array[] = array('name'\
    \ => 'Jack', 'age' => '26');\n$array[] = array('name' => 'Jill', 'age' => '29');\n\
    $array[] = array('name' => 'Jack', 'age' => '26');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '29');\n$array[] = array('name' => 'Jack', 'age' => '26');\n\
    $array[] = array('name' => 'Jill', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '26');\n$array[] = array('name' => 'Jill', 'age' => '29');\n\
    $array[] = array('name' => 'Jack', 'age' => '26');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '29');\n$array[] = array('name' => 'Jack', 'age' => '26');\n\
    $array[] = array('name' => 'Jill', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '26');\n$array[] = array('name' => 'Jill', 'age' => '29');\n\
    $array[] = array('name' => 'Jack', 'age' => '26');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '29');\n$array[] = array('name' => 'Jack', 'age' => '26');\n\
    $array[] = array('name' => 'Jill', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '26');\n$array[] = array('name' => 'Jill', 'age' => '29');\n\
    $array[] = array('name' => 'Jack', 'age' => '26');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '29');\n$array[] = array('name' => 'Jack', 'age' => '26');\n\
    $array[] = array('name' => 'Jill', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '26');\n$array[] = array('name' => 'Jill', 'age' => '29", " \
    \ $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$string = \"a\";\n$result = array_filter($array, function($var) use ($string)\
    \ {\n    return strpos($var, $string) !== false;\n});\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the\
    \ wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$string\
    \ = \"a\";\n$result = array_filter($array, function($var) use ($string) {\n  \
    \  return strpos($var, $string) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the\
    \ wheel.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$string = \"a\";\n$result\
    \ = array_filter($array, function($var) use ($string) {\n    return strpos($var,\
    \ $string) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "  $filtered_strings = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered_strings[]\
    \ = $string;\n    }\n  }\n  return $filtered_strings;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. Just\
    \ one question: why do you use $strings as $string? I thought $strings is already\
    \ an array?\n<|/ c |>\n<| c |>\nYes, $strings is a PHP array. But the function\
    \ expects $strings to be a PHP array as well. That's why I used $strings as $string.\
    \ Otherwise the function would not know what $strings is and would not know what\
    \ to do with it.\n<|/ c |>\n<| c |>\nThanks for your explanation. I understand\
    \ it now.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,string |>\n<| c |>\nThis\
    \ doesn't work if you have a string that has multiple instances of the substring\
    \ in it\n<|/ c |>\n<| c |>\nIt does work, if you use array_filter with an anonymous\
    \ function\n<|/ c |>\n<| c |>\nYes, but that doesn't mean it's correct. `array_filter`\
    \ will filter out all values that don't match the criteria, not just the first\
    \ one\n<|/ c |>\n<| c |>\nYes, that's why I added the comment \"Filter an input\
    \ list of strings only for ones that contain given substring\"\n<|/ c |>\n<| c\
    \ |>\nI see what you mean. I'll update my answer\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$array\
    \ = array_filter($array, function($string) use ($string) {\n    return strpos($string,\
    \ $string) !== false;\n});\n</code>\n<|/ a tags=arrays,php,string |>\n<| a tags=arrays,php,string\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    \n$array = array_filter($array, function($string) use ($string) {\n    return\
    \ strpos($string, $string) !== false;\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php,string\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    \n$array = array_filter($array, function($string) use ($string) {\n    return\
    \ strpos($string, $string) !== false;\n});\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$array\
    \ = array_filter($array, function($string) use ($string) {\n    return strpos($string,\
    \ $string) !== false;\n});\n</code>\n<|/ a dscore=2 tags=arrays,php,string |>\n\
    <| a dscore=1 |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n\n$array = array_filter($array, function($string) use ($string) {\n\
    \    return strpos($string, ", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I am not familiar\
    \ with PHP. Can you please explain the code a little bit?\n<|/ c |>\n<| c |>\n\
    I added some comments to the code above. Hope it helps.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n\
    \n$result = array_filter($array, function($value) use ($string) {\n    return\
    \ strpos($value, $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$string = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($string) {\n    return strpos($value, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$string = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($string) {\n    return strpos($value, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$string = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($string) {\n    return strpos($value, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $array = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n\n$result = array_filter($array,\
    \ function($value) use ($string) {\n    return strpos($value, $string) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $array = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n\n$result = array_filter($array,\
    \ function($value) use ($string", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThanks for\
    \ your answer. I've tried it but unfortunately it didn't work. I've added my code\
    \ to the original post.\n<|/ c |>\n<| c |>\nI edited my answer to include a working\
    \ example. Let me know if that works for you.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I've tried it but unfortunately it didn't work. I've added my code to\
    \ the original post.\n<|/ c |>\n<| c |>\nI edited my answer to include a working\
    \ example. Let me know if that works for you.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I've tried it but unfortunately it didn't work. I've added my code to\
    \ the original post.\n<|/ c |>\n<| a |>\n<code>\n$array = array();\n$array[] =\
    \ array('name' => 'John', 'age' => 25);\n$array[] = array('name' => 'Jane', 'age'\
    \ => 26);\n$array[] = array('name' => 'Jack', 'age' => 27);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 28);\n$array[] = array('name' => 'Jack', 'age' => 29);\n\
    $array[] = array('name' => 'Jill', 'age' => 30);\n\n$result = array();\nforeach($array\
    \ as $key => $value){\n    if(isset($result[$value['name']])){\n        $result[$value['name']]['age'][]\
    \ = $value['age'];\n    }else{\n        $result[$value['name']] = array('name'\
    \ => $value['name'], 'age' => array($value['age']));\n    }\n}\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 tags=php,arrays,multidimensional-array |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n\
    $array[] = array('name' => 'Jane', 'age' => 26);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 27);\n$array[] = array('name' => 'Jill', 'age' => 28);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 29);\n$array[] = array('name' => 'Jill", " \
    \ return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Simple and effective.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Simple and effective.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Simple and effective.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Simple and effective.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Simple and effective.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| a dscore=0 |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  $result = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$search = \"a\";\n$result = array();\nforeach($array as $key => $value){\n\
    \    if(strpos($value, $search) !== false){\n        $result[] = $value;\n   \
    \ }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$search = \"a\";\n$result = array();\nforeach($array as $key => $value){\n\
    \    if(strpos($value, $search) !== false){\n        $result[] = $value;\n   \
    \ }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result = array();\nforeach($array\
    \ as $key => $value){\n    if(strpos($value, $search) !== false){\n        $result[]\
    \ = $value;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\"\
    ,\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"\
    ,\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result\
    \ = array();\nforeach($array as $key => $value){\n    if(strpos($value, ", " \
    \ $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = 'The quick brown fox jumps over the lazy dog';\n$search\
    \ = 'fox';\n$array = explode(\" \", $string);\n$array = array_filter($array, function($var)\
    \ use ($search) {\n    return strpos($var, $search) !== false;\n});\nprint_r($array);\n\
    </code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $string = 'The quick brown fox jumps over the lazy dog';\n$search = 'fox';\n$array\
    \ = explode(\" \", $string);\n$array = array_filter($array, function($var) use\
    \ ($search) {\n    return strpos($var, $search) !== false;\n});\nprint_r($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$string = 'The quick brown\
    \ fox jumps over the lazy dog';\n$search = 'fox';\n$array = explode(\" \", $string);\n\
    $array = array_filter($array, function($var) use ($search) {\n    return strpos($var,\
    \ $search) !== false;\n});\nprint_r($array);\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a dscore=0 |>\n<code>\n$string = 'The quick brown fox jumps over the\
    \ lazy dog';\n$search = 'fox';\n$array = explode(\" \", $string);\n$array = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\nprint_r($array);\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'The quick brown fox jumps\
    \ over the lazy dog';\n$search = 'fox';\n$array = explode(\" \", $string);\n$array\
    \ = array_filter($array, function($var) use ($search) {\n    return strpos($var,\
    \ $search) !== false;\n});\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n$search = 'a';\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=php,arrays,string |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| c |>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more elegant and readable than other solutions.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant and readable than other solutions.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant and readable\
    \ than other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and readable than other solutions.\n\
    <|/ c |>\n<| a tags=php,arrays,string |>\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis should be the\
    \ accepted answer. Much more elegant and readable than other solutions.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Much more elegant and readable\
    \ than other solutions.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array\
    \ = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n$result = array_filter($array,\
    \ function($item) use ($string) {\n    return strpos($item, $string) !== false;\n\
    });\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| a |>\n<code>\n\
    $array = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n$result = array_filter($array,\
    \ function($item) use ($string) {\n    return strpos($item, $string) !== false;\n\
    });\n</code>\n<|/ a dscore=2 tags=php,arrays,string |>\n<| a dscore=2 |>\n<code>\n\
    $array = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n$result = array_filter($array,\
    \ function($item) use ($string) {\n    return strpos($item, $string) !== false;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$string = 'a';\n$result = array_filter($array, function($item)\
    \ use ($string) {\n    return strpos($item, $string) !== false;\n});\n</code>\n\
    <|/ a tags=php,arrays,string dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$string = 'a';\n$result = array_filter($array, function($item)\
    \ use ($string) {\n    return strpos($item, $string) !== false;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n$array\
    \ = array('abc', 'bacd', 'cde', 'array');\n$string = 'a';\n$", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,multidimensional-array\
    \ |>\n<| a tags=arrays,php,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n\n$result = array();\nforeach\
    \ ($array as $key => $value) {\n    $result[$value['name']] = $value['age'];\n\
    }\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n$array[]\
    \ = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\n$result\
    \ = array();\nforeach ($array as $key => $value) {\n    $result[$value['name']]\
    \ = $value['age'];\n}\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php,multidimensional-array\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'John', 'age' => '20');\n$array[] = array('name' => 'Jane', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n\n$result = array();\nforeach ($array as $key => $value)\
    \ {\n    $result[$value['name']] = $value['age'];\n}\n\nprint_r($result);\n</code>\n\
    <|/ a tags=arrays,php,multidimensional-array |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name'\
    \ => 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n\n$result = array();\nforeach\
    \ (", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== FALSE) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,string |>\n<| a |>\n<code>\n\
    $string = 'Hello World';\n$array = explode(' ', $string);\n$array = array_filter($array,\
    \ 'strlen');\nprint_r($array);\n</code>\n<|/ a dscore=3 tags=arrays,php,string\
    \ |>\n<| a dscore=3 |>\n<code>\n$string = 'Hello World';\n$array = explode(' ',\
    \ $string);\n$array = array_filter($array, 'strlen');\nprint_r($array);\n</code>\n\
    <|/ a tags=arrays,php,string |>\n<| a tags=arrays,php,string |>\n<code>\n$string\
    \ = 'Hello World';\n$array = explode(' ', $string);\n$array = array_filter($array,\
    \ 'strlen');\nprint_r($array);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n\
    <code>\n$string = 'Hello World';\n$array = explode(' ', $string);\n$array = array_filter($array,\
    \ 'strlen');\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,string |>\n<| a\
    \ tags=arrays,php,string |>\n<code>\n$string = 'Hello World';\n$array = explode('\
    \ ', $string);\n$array = array_filter($array, 'strlen');\nprint_r($array);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=arrays,php,string |>\n<code>\n$string = 'Hello World';\n\
    $array = explode(' ', $string);\n$array = array_filter($array, 'strlen');\nprint_r($array);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php,string |>\n<code>\n$string =\
    \ 'Hello World';\n$array = explode(' ', $string);\n$array = array_filter($array,\
    \ 'strlen');\nprint_r($array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\n$string = 'Hello World';\n$array = explode(' ', $string);\n$array = array_filter($array,\
    \ 'strlen');\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,string |>\n<| a\
    \ tags=arrays,php,string |>\n<code>\n$string = 'Hello World';\n$array = explo",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n\
    $search = 'abc';\n$array = explode(',', $string);\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n$search = 'abc';\n\
    $array = explode(',', $string);\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n\
    $search = 'abc';\n$array = explode(',', $string);\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n$search = 'abc';\n\
    $array = explode(',', $string);\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n\
    $search = 'abc';\n$array = explode(',', $string);\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n\
    <code>\n$string = 'abc,def,", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n$search = 'a';\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n$search = 'a';\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like this solution, but I wanted to add that `array_filter`\
    \ will also remove empty elements. So if you have `['', 'a', '']`, it will return\
    \ `['a']`.\n<|/ c |>\n<| c |>\nYes, that's true. `array_filter` will remove empty\
    \ elements. If you have `['', 'a', '']`, it will return `['a']`.\n<|/ c |>\n<|\
    \ c |>\nThis solution works great for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution\
    \ works great for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works great for\
    \ me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\nI like to use array_filter for this:\n\
    <code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$filtered = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') !== false;\n});\n</code>\n\
    <|/ a tags=arrays,php,string |>\n<| c |>\nThis solution is more elegant and cleaner\
    \ than the accepted answer.\n<|/ c |>\n<| c |>\nThis solution is more elegant\
    \ and cleaner than the accepted answer.\n<|/ c |>\n<| c |>\nThis solution is more\
    \ elegant and cleaner than the accepted answer.\n<|/ c |>\n<| c |>\nThis solution\
    \ is more elegant and cleaner than the accepted answer.\n<|/ c |>\n<| c |>\nThis\
    \ solution is more elegant and cleaner than the accepted answer.\n<|/ c |>\n<|\
    \ a tags=arrays,php,string |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n\
    $filtered = array_filter($array, function($value) {\n    return strpos($value,\
    \ 'a') !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution is\
    \ more elegant and cleaner than the accepted answer.\n<|/ c |>\n<| c |>\nThis\
    \ solution is more elegant and cleaner than the accepted answer.\n<|/ c |>\n<|\
    \ c |>\nThis solution is more elegant and cleaner than the accepted answer.\n\
    <|/ c |>\n<| c |>\nThis solution", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if `$strings`\
    \ contains multiple instances of `$substring`\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting my answer. `filter_by_substring` will remove all\
    \ instances of `$substring` from `$strings`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting my answer. `filter_by_substring` will remove all\
    \ instances of `$substring` from `$strings`.\n<|/ c |>\n<| c |>\nI tested it before\
    \ posting my answer. `filter_by_substring` will remove all instances of `$substring`\
    \ from `$strings`.\n<|/ c |>\n<| c |>\nI tested it before posting my answer. `filter_by_substring`\
    \ will remove all instances of `$substring` from `$strings`.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<|\
    \ a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($var){\n\
    \    return strpos($var,\"a\") !== false;\n});\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($var){\n\
    \    return strpos($var,\"a\") !== false;\n});\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($var){\n\
    \    return strpos($var,\"a\") !== false;\n});\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($var){\n\
    \    return strpos($var,\"a\") !== false;\n});\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a dscore=3 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\");\n$array = array_filter($array,function($var){\n    return strpos($var,\"\
    a\") !== false;\n});\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n\
    <| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($var){\n\
    \    return strpos($var,\"a\") !== false;\n});\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"", "  $filtered = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ so much for this. I used the code and it worked perfectly. Thanks again!\n<|/\
    \ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jane', 'age' => 22, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jill', 'age' => 22, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[]\
    \ = array('name' => 'Jill', 'age' => 22, 'city' => 'New York');\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill',\
    \ 'age' => 22, 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill', 'age' => 22,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jill', 'age' => 22, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jill', 'age' => 22, 'city' => 'New York');\n$array[]\
    \ = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name'\
    \ => 'Jill', 'age' => 22, 'city' => 'New York');\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill', 'age'\
    \ => 22", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"\
    a\";\n$result = array_filter($array, function($var) use ($search) {\n    return\
    \ strpos($var, $search) !== false;\n});\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $search = \"a\";\n$result = array_filter($array, function($var) use ($search)\
    \ {\n    return strpos($var, $search) !== false;\n});\nprint_r($result);", " \
    \ return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis works great, thank you! I used the array_filter method as\
    \ I didn't want to have to write my own loop to iterate through the array.\n<|/\
    \ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n$search = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis works great, thank you! I used the array_filter\
    \ method as I didn't want to have to write my own loop to iterate through the\
    \ array.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n\n$", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution,\
    \ very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\nI like this solution as\
    \ well, very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, very elegant and simple. Thanks!\n<|/ c |>\n<| a tags=arrays,php,string\
    \ |>\n<code>\n$string = 'Hello World';\n$array = array('Hello', 'World', 'Foo',\
    \ 'Bar');\n$array = array_filter($array, function($var) use ($string) {\n    return\
    \ strpos($var, $string) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. Simple, elegant, and works with PHP 5.3+\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, elegant, and works\
    \ with PHP 5.3+\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Simple,\
    \ elegant, and works with PHP 5.3+\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Simple, elegant, and works with PHP 5.3+\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Simple, elegant, and works with PHP 5.3+\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$string = 'Hello World';\n$array = array('Hello', 'World',\
    \ 'Foo', 'Bar');\n$array = array_filter($array, function($var) use ($string) {\n\
    \    return strpos($var, $string) !== false;\n});\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple, elegant, and works\
    \ with PHP 5.3+\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Simple,\
    \ elegant, and works with PHP 5.3+\n<|/ c |>\n<| ", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, however\
    \ it only works with strings. If you have an array of objects, it won't work.\
    \ I've added a solution that works with an array of objects.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work as expected. `filter_by_substring` returns an empty array\
    \ when given an empty array as input. `filter_by_substring` returns an empty array\
    \ when given an empty string as input. `filter_by_substring` returns an empty\
    \ array when given an empty array as input. `filter_by_substring` returns an empty\
    \ array when given an empty string as input. `filter_by_substring` returns an\
    \ empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when given an empty string as input. `filter_by_substring` returns\
    \ an empty array when given an empty array as input. `filter_by_substring` returns\
    \ an empty array when ", "  return array_filter($strings, function($string) use\
    \ ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n}\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nI like this solution. Very clean and\
    \ easy to understand.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis works great, thank you! I added\
    \ a little bit of error checking to make sure that the search string is not empty\
    \ or null.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string with multiple\
    \ instances of the search string. For example, if you have `array(\"abc\", \"\
    bacd\", \"cde\", \"array\", \"abcabc\");` it will return `array(\"abc\", \"bacd\"\
    , \"cde\", \"array\")` instead of `array(\"abc\", \"bacd\", \"cde\", \"array\"\
    , \"abcabc\")`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  $result = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like\
    \ this solution, but I believe it can be simplified a little bit by removing the\
    \ `if` statement and just returning `$string` if the substring is not found. `return\
    \ strpos($string, $substring) !== false ? $string : '';`\n<|/ c |>\n<| c |>\n\
    Yes, that would work as well. I've updated my answer to include your suggestion.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThis doesn't work if `$substring`\
    \ is `'0'` or `'1'`\n<|/ c |>\n<| c |>\nI agree, that's why I added the comment\
    \ in the code `// Filter an input list of strings only for ones that contain given\
    \ substring`\n<|/ c |>\n<| c |>\nI see what you mean. Yes, I agree with you that\
    \ it's better to have some error handling in case `$substring` isn't a string.\
    \ But the OP didn't ask for error handling.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ that's why I added the comment in the code `// Filter an input list of strings\
    \ only for ones that contain given substring`\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. Yes, I agree with you that it's better to have some error handling in\
    \ case `$substring` isn't a string. But the OP didn't ask for error handling.\n\
    <|/ c |>\n<| a tags=php,arrays,string |>\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=1 |>\n\
    <code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '28');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n\
    $search = 'abc';\n$array = explode(',', $string);\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n$search = 'abc';\n$array = explode(',',\
    \ $string);\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) !== false;\n});\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n\
    $search = 'abc';\n$array = explode(',', $string);\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n$search = 'abc';\n$array = explode(',',\
    \ $string);\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) !== false;\n});\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';\n\
    $search = 'abc';\n$array = explode(',', $string);\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a tags=arrays,php,string |>\n<| a tags=arrays,php,string |>\n\
    <code>\n$string = 'abc,def,ghi,jkl,mno,pqr,stu,vwx';", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,string |>\n<| a tags=arrays,php,string\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    \n$result = array_filter($array, function($value) use ($string) {\n    return\
    \ strpos($value, $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a\
    \ dscore=4 |>\n<| a tags=arrays,php,string |>\n<code>\n$string = 'abc';\n$array\
    \ = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array, function($value)\
    \ use ($string) {\n    return strpos($value, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=arrays,php,string |>\n<code>\n$string =\
    \ 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array,\
    \ function($value) use ($string) {\n    return strpos($value, $string) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n\
    $string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result =\
    \ array_filter($array, function($value) use ($string) {\n    return strpos($value,\
    \ $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a tags=arrays,php,string |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n\n$result = array_filter($array, function($value)\
    \ use ($string) {\n    return strpos($value, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=arrays,php,string |>\n<code>\n$string =\
    \ 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array,\
    \ function($value) use ($string) {\n    return strpos($value, $string) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n\
    $string = 'abc';\n$array = array('abc", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$search = \"\
    a\";\n\n$result = array_filter($array, function($var) use ($search) {\n    return\
    \ strpos($var, $search) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's easy\
    \ to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ easy to understand.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    a\", \"b\", \"c\", \"d\", \"e\");\n$search = \"a\";\n\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly and it's easy to understand.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Works perfectly and it's easy to\
    \ understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$search = \"\
    a\";\n\n$result = array_filter($array, function($var) use ($search) {\n    return\
    \ strpos($var, $search) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"\
    e\");", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = 'The quick brown fox jumps over the\
    \ lazy dog';\n$search = 'fox';\n$pos = strpos($string, $search);\n$string2 = substr($string,\
    \ $pos);\n$string3 = substr($string2, strlen($search));\necho $string3;\n</code>\n\
    <|/ a tags=php,string |>\n<| a dscore=1 |>\n<code>\n$string = 'The quick brown\
    \ fox jumps over the lazy dog';\n$search = 'fox';\n$pos = strpos($string, $search);\n\
    $string2 = substr($string, $pos);\n$string3 = substr($string2, strlen($search));\n\
    echo $string3;\n</code>\n<|/ a tags=php,string |>\n<| a dscore=1 |>\n<code>\n\
    $string = 'The quick brown fox jumps over the lazy dog';\n$search = 'fox';\n$pos\
    \ = strpos($string, $search);\n$string2 = substr($string, $pos);\n$string3 = substr($string2,\
    \ strlen($search));\necho $string3;\n</code>\n<|/ a tags=php,string |>\n<| a dscore=1\
    \ |>\n<code>\n$string = 'The quick brown fox jumps over the lazy dog';\n$search\
    \ = 'fox';\n$pos = strpos($string, $search);\n$string2 = substr($string, $pos);\n\
    $string3 = substr($string2, strlen($search));\necho $string3;\n</code>\n<|/ a\
    \ tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string = 'The quick brown\
    \ fox jumps over the lazy dog';\n$search = 'fox';\n$pos = strpos($string, $search);\n\
    $string2 = substr($string, $pos);\n$string3 = substr($string2, strlen($search));\n\
    echo $string3;\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$string = 'The quick\
    \ brown fox jumps over the lazy dog';\n$search = 'fox';\n$pos = strpos($string,\
    \ $search);\n$string2 = substr($string, $pos);\n$string3 = substr($string2, strlen($search));\n\
    echo $string3;\n</code>\n<|/", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n\
    $search = 'World';\n$pos = strpos($string, $search);\nif ($pos === false) {\n\
    \    echo \"The string '$search' was not found in the string '$string'\";\n} else\
    \ {\n    echo \"The string '$search' was found in the string '$string'\";\n  \
    \  echo \" and exists at position $pos\";\n}", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=0 |>\n<code>\n$string\
    \ = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array,\
    \ function($string) use ($string) {\n    return strpos($string, $string) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=0\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    \n$result = array_filter($array, function($string) use ($string) {\n    return\
    \ strpos($string, $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/\
    \ a tags=arrays,php,string |>\n<| a dscore=0 |>\n<code>\n$string = 'abc';\n$array\
    \ = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array, function($string)\
    \ use ($string) {\n    return strpos($string, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,php,string |>\n<| c |>\nPlease add some explanation\
    \ to your answer. Code-only answers are discouraged on Stack Overflow.\n<|/ c\
    \ |>\n<| a tags=arrays,php,string |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n\n$result = array_filter($array, function($string)\
    \ use ($string) {\n    return strpos($string, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php,string |>\n<code>\n$string =\
    \ 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array,\
    \ function($string) use ($string) {\n    return strpos($string, $string) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result =\
    \ array_filter($array, function($string) use ($string) {\n    return strpos($string,\
    \ $string) !== false;\n});\n\nprint_r($result);\n</code>\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't\
    \ make it clear enough. I want to filter out all strings that do not contain any\
    \ given substring. For example, I want to filter out all strings that do not contain\
    \ 'a' anywhere in them. Your solution would filter out all strings that do not\
    \ contain 'a' anywhere in them. Thanks again!\n<|/ c |>\n<| c |>\nI updated my\
    \ answer. Does this work for you?\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I'm sorry I didn't make it clear enough. I want to filter out all strings that\
    \ do not contain any given substring. For example, I want to filter out all strings\
    \ that do not contain 'a' anywhere in them. Your solution would filter out all\
    \ strings that do not contain 'a' anywhere in them. Thanks again!\n<|/ c |>\n\
    <| c |>\nI updated my answer. Does this work for you?\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I'm sorry I didn't make it clear enough. I want to filter out\
    \ all strings that do not contain any given substring. For example, I want to\
    \ filter out all strings that do not contain 'a' anywhere in them. Your solution\
    \ would filter out all strings that do not contain 'a' anywhere in them. Thanks\
    \ again!\n<|/ c |>\n<| a |>\nYou can use the following code:\n<code>\n$strings\
    \ = array('abc', 'bacd', 'cde', 'array');\n$substring = 'a';\n\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=0 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't make it clear\
    \ enough. I want to filter out all strings that do not contain any given substring.\
    \ For example, I want to filter out all strings that do not contain 'a' anywhere\
    \ in them. Your solution would filter out all strings that do not contain 'a'\
    \ anywhere in them. Thanks again!\n<|/ c |>\n<| a tags=php,arrays,string |>\n\
    You can use the following code:\n<code>\n$strings = array('abc', 'bacd', 'cde',\
    \ 'array');\n$substring = 'a';\n\n$filtered = array_filter($", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age'\
    \ => '20');\n$array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name'\
    \ => 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jack', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill", "  $result = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $result[] = $string;\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"Hello World\";\n$array = explode(\"\
    \ \", $string);\n$array = array_filter($array);\n$array = array_map(\"trim\",\
    \ $array);\n$array = array_map(\"strtolower\", $array);\n$array = array_filter($array);\n\
    $array = array_map(\"ucfirst\", $array);\n$array = array_map(\"ucwords\", $array);\n\
    $array = array_map(\"str_replace\", $array);\n$array = array_map(\"ucfirst\",\
    \ $array);\n$array = array_map(\"ucwords\", $array);\n$array = array_map(\"str_replace\"\
    , $array);\n$array = array_map(\"ucfirst\", $array);\n$array = array_map(\"ucwords\"\
    , $array);\n$array = array_map(\"str_replace\", $array);\n$array = array_map(\"\
    ucfirst\", $array);\n$array = array_map(\"ucwords\", $array);\n$array = array_map(\"\
    str_replace\", $array);\n$array = array_map(\"ucfirst\", $array);\n$array = array_map(\"\
    ucwords\", $array);\n$array = array_map(\"str_replace\", $array);\n$array = array_map(\"\
    ucfirst\", $array);\n$array = array_map(\"ucwords\", $array);\n$array = array_map(\"\
    str_replace\", $array);\n$array = array_map(\"ucfirst\", $array);\n$array = array_map(\"\
    ucwords\", $array);\n$array = array_map(\"str_replace\", $array);\n$array = array_map(\"\
    ucfirst\", $array);\n$array = array_map(\"ucwords\", $array);\n$array = array_map(\"\
    str_replace\", $array);\n$array = array_map(\"ucfirst\", $array);\n$array = array_map(\"\
    ucwords\", $array);\n$array = array_map(\"str_replace\", $array);\n$array = array_map(\"\
    ucfirst\", $array);\n$array = array_map(\"ucwords\", $array);\n$array = array_map(\"\
    str_replace\", $array);\n$array = array_map(\"ucfirst\", $array);\n$array = array_map(\"\
    ucwords\", $array);\n$array = array_map(\"str_replace", "  $filtered = [];\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($var) use ($search) {\n  \
    \  return strpos($var, $search) !== false;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$search = \"a\";\n$result = array_filter($array, function($var) use ($search)\
    \ {\n    return strpos($var, $search) !== false;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$search = \"a\";\n$result = array_filter($array, function($var) use\
    \ ($search) {\n    return strpos($var, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result =\
    \ array_filter($array, function($var) use ($search) {\n    return strpos($var,\
    \ $search) !== false;\n});\n</code>", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $result\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThis doesn't work when there are multiple occurrences of the substring\
    \ in the string. e.g. `filter_by_substring('abcabc', 'a')` returns `['abcabc']`\
    \ instead of `['abc']`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it, and it does work. Try it yourself.\n<|/ c |>\n<| c |>\nOh sorry, I missed\
    \ the use of `$substring` inside the anonymous function. I thought it was a global\
    \ variable.\n<|/ c |>\n<| c |>\nYes, it is. It is a closure that has access to\
    \ `$substring` variable. Closures are a powerful feature of PHP. Read more about\
    \ them here: http://php.net/manual/en/functions.anonymous.php\n<|/ c |>\n<| c\
    \ |>\nI see. Thanks for the explanation.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $string = 'abcabc';\n$substring = 'a';\n\n$result = preg_grep('/'.$substring.'/i',\
    \ $string);\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work when\
    \ there are multiple occurrences of the substring in the string. e.g. `filter_by_substring('abcabc',\
    \ 'a')` returns `['abcabc']` instead of `['abc']`.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$string = 'abcabc';\n$substring = 'a';\n\n$result = preg_grep('/'.$substring.'/i',\
    \ $string);\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work when\
    \ there are multiple occurrences of the substring in the string. e.g. `filter_by_substring('abcabc',\
    \ 'a')` returns `['abcabc']` instead of `['abc']`.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$string = 'abcabc';\n$substring = 'a';\n\n$result = preg_grep('/'.$substring.'/i',\
    \ $string);\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'abcabc';\n$substring = 'a';\n\n$result = preg_grep('/'.", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\nI wrote a small function which does this for you:\n<code>", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThis doesn't\
    \ work if you have a string that has more than one occurrence of the substring.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it out and see.\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it out and see.\n<|/ c |>\n<| c |>\n: It does work. Try it out\
    \ and see.\n<|/ c |>\n<| c |>\n: It does work. Try it out and see.\n<|/ c |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$string = 'This is a string with some\
    \ words in it';\n$substring = 'words';\n\n$words = explode(\" \", $string);\n\
    $filtered = array_filter($words, function($word) use ($substring) {\n    return\
    \ strpos($word, $substring) !== false;\n});\n\nprint_r($filtered);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string that has more\
    \ than one occurrence of the substring.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it out and see.\n<|/ c |>\n<| c |>\nIt does work. Try it out and see.\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it out and see.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it out and see.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$string\
    \ = 'This is a string with some words in it';\n$substring = 'words';\n\n$words\
    \ = explode(\" \", $string);\n$filtered = array_filter($words, function($word)\
    \ use ($substring) {\n    return strpos($word, $substring) !== false;\n});\n\n\
    print_r($filtered);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if\
    \ you have a string that has more than one occurrence of the substring.\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it out and see.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = 'This is a ", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional libraries. However, I wonder if there is a way to make\
    \ it work for arrays of objects?\n<|/ c |>\n<| c |>\nThis solution works great\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| a tags=arrays,php,filtering,search |>\nI like\
    \ using array_filter() for this purpose:\n<code>\n$array = array(\"a\", \"b\"\
    , \"c\", \"d\", \"e\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>", "  $result\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n}\n",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if the substring appears more than once in the string.\n<|/\
    \ c |>\n<| c |>\n: Yes, it does. `array_filter` removes elements from the array\
    \ that don't satisfy the callback function. The callback function returns `true`\
    \ if the element should be kept and `false` if it should be removed.\n<|/ c |>\n\
    <| c |>\n: I added a version that keeps duplicates.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that keeps duplicates.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ keeps duplicates.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string = 'abc def ghi\
    \ jkl mno pqr stu vwx yz';\n$search = 'abc';\n$result = preg_grep('/'.preg_quote($search).'/i',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a tags=php,string,arrays,substring\
    \ |>\n<| c |>\nThis doesn't work if the substring appears more than once in the\
    \ string.\n<|/ c |>\n<| c |>\n: Yes, it does. `preg_grep` removes elements from\
    \ the array that don't satisfy the callback function. The callback function returns\
    \ `true` if the element should be kept and `false` if it should be removed.\n\
    <|/ c |>\n<| a |>\n<code>\n$string = 'abc def ghi jkl mno pqr stu vwx yz';\n$search\
    \ = 'abc';\n$result = preg_grep('/'.preg_quote($search).'/i', $string);\nprint_r($result);\n\
    </code>\n<|/ a tags=php,string,arrays,substring dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if the substring appears more than once in the string.\n<|/ c |>\n<| a\
    \ tags=php,string,arrays,substring |>\n<code>\n$string = 'abc def ghi jkl mno\
    \ pqr stu vwx yz';\n$search = 'abc';\n$result = preg_grep('/'.preg_quote($search).'/i',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if the sub", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/\
    \ c |>\n<| c |>\nI added a more generic solution that should work with any array\
    \ and any substring.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n$search = 'a';\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', '", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This does not answer the question. OP wants to filter out all elements that do\
    \ not contain `$substring`.\n<|/ c |>\n<| c |>\nI added an example to my answer\n\
    <|/ c |>\n<| c |>\nThis does not answer the question. OP wants to filter out all\
    \ elements that do not contain `$substring`.\n<|/ c |>\n<| c |>\nI added an example\
    \ to my answer\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$substring = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($substring) {\n    return strpos($value, $substring) !==\
    \ false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis does not answer the question.\
    \ OP wants to filter out all elements that do not contain `$substring`.\n<|/ c\
    \ |>\n<| c |>\nThis does not answer the question. OP wants to filter out all elements\
    \ that do not contain `$substring`.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$substring = \"a\";\n\
    $result = array_filter($array, function($value) use ($substring) {\n    return\
    \ strpos($value, $substring) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| a\
    \ tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$substring = \"a\";\n$result = array_filter($array, function($value) use ($substring)\
    \ {\n    return strpos($value, $substring) !== false;\n});\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$substring = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($substring) {\n    return strpos($value, $substring) !== false;\n});\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=3 |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$substring = \"a\";\n$result = array_filter($array, ",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI see what you did there, but I still don't understand how it works.\
    \ Can you explain it a little more?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = 'Hello\
    \ World';\n$search = 'World';\n$pos = strpos($string, $search);\nif ($pos !==\
    \ false) {\n    echo 'The string \"' . $search . '\" was found in the string \"\
    ' . $string . '\" and exists at position ' . $pos . '.';\n} else {\n    echo 'The\
    \ string \"' . $search . '\" was not found in the string \"' . $string . '\".';\n\
    }", "  return array_filter($strings, function($string) use ($substring) {\n  \
    \  return strpos($string, $substring) !== false;\n  });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n\
    <code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n$result\
    \ = array_filter($array, function($item) use ($string) {\n    return strpos($item,\
    \ $string) !== false;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n\
    <code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n$result\
    \ = array_filter($array, function($item) use ($string) {\n    return strpos($item,\
    \ $string) !== false;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    $result = array_filter($array, function($item) use ($string) {\n    return strpos($item,\
    \ $string) !== false;\n});\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n\
    <code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n$result\
    \ = array_filter($array, function($item) use ($string) {\n    return strpos($item,\
    \ $string) !== false;\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$result = array_filter($array, function($item) use ($string)\
    \ {\n    return strpos($item, $string) !== false;\n});\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$result = array_filter($array, function($item) use\
    \ ($string) {\n    return strpos($item, $string) !== false;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$result = array_filter($array, function($item) use ",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\n$array\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n\n$search = \"a\";\n\n$result = array_filter($array, function($var)\
    \ use ($search) {\n    return strpos($var, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"\
    o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\n$search\
    \ = \"a\";\n\n$result = array_filter($array, function($var) use ($search) {\n\
    \    return strpos($var, $search) !== false;\n});\n\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"\
    ,\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($var) use ($search) {\n  \
    \  return strpos($var, $search) !== false;\n});\nprint_r($result);", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $result = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis should be the accepted answer as it uses built-in PHP functions.\
    \ I used this in my project and it worked like a charm.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>", "  $result = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $result[] = $string;\n    }\n  }\n  return $result;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nI like the\
    \ `array_filter` approach. Very clean and simple.\n<|/ c |>\n<| c |>\nI like this\
    \ approach too, but I prefer `array_filter` over `array_map` because `array_map`\
    \ will create a new array and `array_filter` will modify the existing array.\n\
    <|/ c |>\n<| c |>\nI agree with you on that. `array_map` should be used only when\
    \ you want to create a new array and `array_filter` should be used only when you\
    \ want to modify the existing array.\n<|/ c |>\n<| c |>\nI agree with you on that.\
    \ `array_map` should be used only when you want to create a new array and `array_filter`\
    \ should be used only when you want to modify the existing array.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n$array = array();\n$array[] = array('name' => 'John',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jane', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$string\
    \ = 'abc def ghi jkl mno pqr stuv wxyz';\n$substring = 'abc';\n$array = explode('\
    \ ', $string);\n$array = array_filter($array, function($var) use ($substring)\
    \ {\n    return strpos($var, $substring) !== false;\n});\nprint_r($array);", " \
    \ return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'John', 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jane',\
    \ 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill', 'age' => 25,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jill', 'age' => 25, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jill', 'age' => 25, 'city' => 'New York');\n$array[]\
    \ = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jill', 'age' => 25, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jill', 'age' => 25, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[]\
    \ = array('name' => 'Jill', 'age' => 25, 'city' => 'New York');\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25, 'city' => '", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== FALSE;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array |>\n\
    <code>\n$array = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n\
    \            'e' => 'f'\n        ],\n        'g' => [\n            'h' => 'i',\n\
    \            'j' => 'k'\n        ]\n    ],\n    'm' => [\n        'n' => 'o',\n\
    \        'p' => 'q'\n    ]\n];\n\n$search = 'f';\n\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return array_reduce($item, function($carry,\
    \ $item) use ($search) {\n        return $carry && strpos($carry, $search) !==\
    \ FALSE;\n    }, TRUE);\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n       \
    \     'c' => 'd',\n            'e' => 'f'\n        ],\n        'g' => [\n    \
    \        'h' => 'i',\n            'j' => 'k'\n        ]\n    ],\n    'm' => [\n\
    \        'n' => 'o',\n        'p' => 'q'\n    ]\n];\n\n$search = 'f';\n\n$result\
    \ = array_filter($array, function($item) use ($search) {\n    return array_reduce($item,\
    \ function($carry, $item) use ($search) {\n        return $carry && strpos($carry,\
    \ $search) !== FALSE;\n    }, TRUE);\n});\n\nprint_r($result);\n</code>\n<|/ a\
    \ tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n\
    \            'e' => 'f'\n        ],\n        'g' => [\n            'h' => 'i',\n\
    \            'j' => 'k'\n        ]\n    ],\n    'm' => [\n        'n' => 'o',\n\
    \        'p' => 'q'\n    ]\n];\n\n$search = 'f';\n\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return array_reduce($item, function($carry,\
    \ $item) use ($search) {\n        return $carry && strpos($carry, $search) !==\
    \ FALSE;\n    }, TRUE);\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=0 |>",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\n$search = \"a\";\n\n$result\
    \ = array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\n$search = \"a\";\n\
    \n$result = array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"\
    t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\n$search = \"a\";\n\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");\n\n$search = \"a\";\n\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0 |>\n<code>", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a |>\n<code>\n\
    $array = [\n    'a' => [\n        'b' => [\n            'c' => [\n           \
    \     'd' => [\n                    'e' => [\n                        'f' => [\n\
    \                            'g' => [\n                                'h' =>\
    \ [\n                                    'i' => [\n                          \
    \              'j' => [\n                                            'k' => [\n\
    \                                                'l' => [\n                  \
    \                                  'm' => [\n                                \
    \                        'n' => [\n                                          \
    \                  'o' => [\n                                                \
    \                'p' => [\n                                                  \
    \                  'q' => [\n                                                \
    \                        'r' => [\n                                          \
    \                                  's' => [\n                                \
    \                                                't' => [\n                  \
    \                                                                  'u' => [\n\
    \                                                                            \
    \            'v' => [\n                                                      \
    \                                      'w' => [\n                            \
    \                                                                    'x' => [\n\
    \                                                                            \
    \                        'y' => [\n                                          \
    \                                                              'z' => [\n    \
    \                                                                            \
    \                            'a' => [\n                                      \
    \                                                                          'b'\
    \ => [\n                                                                     \
    \                                               'c' => [\n                   \
    \                                                                            \
    \                         'd' => [\n                                         \
    \                                                                            \
    \       'e' => [\n                                                           \
    \                                                                            \
    \         'f' => [\n                                                         \
    \                                                                           'g'\
    \ => [\n                                                                     \
    \                                                                   'h' => [\n\
    \                                                                            \
    \                                                                'i' => [\n  \
    \                                                                            \
    \                                                                  'j' => [\n\
    \                                                                            \
    \                                                                        'k' =>\
    \ [\n                                                                        \
    \                                                                            \
    \    'l' => [\n                                                              \
    \                                                                            \
    \                  'm' => [\n                                                \
    \                                                                            \
    \                                    'n' => [\n                              \
    \                                                                            \
    \                                                          'o' => [\n        \
    \                                                                            \
    \                                                                            \
    \        'p' => [\n                                                          \
    \                                                                            \
    \                                      'q' => [\n                            \
    \                                                                            \
    \                                                                        'r' =>\
    \ [\n                                                                        \
    \                                                                            \
    \                                's' => [\n                                  \
    \                                                                            \
    \                                                                          't'\
    \ => [\n                                                                     \
    \                                                                            \
    \                                           'u' => [\n                       \
    \                                                                            \
    \                                                                            \
    \                                 'v' => [\n                                 \
    \                                                                            \
    \                                                                            \
    \           'w' => [\n                                                       \
    \                                                                            \
    \                                                                     'x' => [\n\
    \                                                                            \
    \                                                                            \
    \                                                    'y' => [\n              \
    \                                                                            \
    \                                                                            \
    \                                          'z' => [\n                        \
    \                                                                            \
    \                                                                            \
    \                    'a' => [\n                                              \
    \                                                                            \
    \                                                                            \
    \  'b' => [\n                                                                \
    \                                                                            \
    \                                                                'c' => [\n  \
    \                                                                            \
    \                                                                            \
    \                                                      'd' => [\n            \
    \                                                                            \
    \                                                                            \
    \                                                'e' => [\n                  \
    \                                                                            \
    \                                                                            \
    \                                              'f' => [\n                    \
    \                                                                            \
    \                                                                            \
    \                                                'g' => [\n                  \
    \                                                                            \
    \                                                                            \
    \                                                      'h' => [\n            \
    \                                                                            \
    \                                                                            \
    \                                                                'i' => [\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  'j' => [\n                                                                \
    \                                                                            \
    \                                                                            \
    \                    'k' => [\n                                              \
    \                                                                            \
    \                                                                            \
    \                                          'l' => [\n                        \
    \                                                                            \
    \                                                                            \
    \                                                                    'm' => [\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    '", "  $filtered = [];\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for your answer. Unfortunately this doesn't work because I need the whole\
    \ string to be returned. Also the function should only return strings that contain\
    \ the substring and not the whole string.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a function that does what you want. Let me know if it works for you.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. Unfortunately this doesn't work\
    \ because I need the whole string to be returned. Also the function should only\
    \ return strings that contain the substring and not the whole string.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a function that does what you want. Let\
    \ me know if it works for you.\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ Unfortunately this doesn't work because I need the whole string to be returned.\
    \ Also the function should only return strings that contain the substring and\
    \ not the whole string.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ 'This is a test string';\n$substring = 'is';\n$result = preg_grep('/'.$substring.'/i',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a tags=php,string,substring |>\n\
    <| c |>\nThank you for your answer. Unfortunately this doesn't work because I\
    \ need the whole string to be returned. Also the function should only return strings\
    \ that contain the substring and not the whole string.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = 'This is a test string';\n$substring = 'is';\n\
    $result = preg_grep('/'.$substring.'/i', $string);\nprint_r($result);\n</code>\n\
    <|/ a tags=php,string,substring |>\n<| c |>\nThank you for your answer. Unfortunately\
    \ this doesn't work because I need the whole string to be returned. Also the function\
    \ should only return strings that contain the substring and not the whole string.\n\
    <|/ c |>\n<| a tags=php,string,substring |>\n<code>\n<?php\n$string = 'This is\
    \ a test string';\n$substring = 'is';\n$result = preg_grep('/'.$substring.'/i',\
    \ $string);\nprint_r($result);", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| c |>\nThis does not answer the question. OP wants to filter out strings that\
    \ do not contain given substring.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a function that does exactly that. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n$strings = array('abc', 'bacd', 'cde', 'array');\n$substring\
    \ = 'a';\n$filtered = array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc', 'bacd', 'cde', 'array');\n\
    $substring = 'a';\n$filtered = array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array('abc', 'bacd',\
    \ 'cde', 'array');\n$substring = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$strings =\
    \ array('abc', 'bacd', 'cde', 'array');\n$substring = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$strings = array('abc', 'bacd', 'cde', 'array');\n$substring = 'a';\n\
    $filtered = array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n});\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=php,arrays,string |>\n<code>\n$strings = array('abc', 'bacd', 'cde',\
    \ 'array');\n$substring = 'a';\n$filtered = array_filter($", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$arr = array();\n\
    $arr[] = array('name' => 'John', 'age' => '20');\n$arr[] = array('name' => 'Jane',\
    \ 'age' => '30');\n$arr[] = array('name' => 'Jack', 'age' => '40');\n$arr[] =\
    \ array('name' => 'Jill', 'age' => '50');\n$arr[] = array('name' => 'Jack', 'age'\
    \ => '50');\n$arr[] = array('name' => 'Jill', 'age' => '50');\n$arr[] = array('name'\
    \ => 'Jack', 'age' => '50');\n$arr[] = array('name' => 'Jill', 'age' => '50');\n\
    $arr[] = array('name' => 'Jack', 'age' => '50');\n$arr[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$arr[] = array('name' => 'Jack', 'age' => '50');\n$arr[] =\
    \ array('name' => 'Jill', 'age' => '50');\n$arr[] = array('name' => 'Jack', 'age'\
    \ => '50');\n$arr[] = array('name' => 'Jill', 'age' => '50');\n$arr[] = array('name'\
    \ => 'Jack', 'age' => '50');\n$arr[] = array('name' => 'Jill', 'age' => '50');\n\
    $arr[] = array('name' => 'Jack', 'age' => '50');\n$arr[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$arr[] = array('name' => 'Jack', 'age' => '50');\n$arr[] =\
    \ array('name' => 'Jill', 'age' => '50');\n$arr[] = array('name' => 'Jack', 'age'\
    \ => '50');\n$arr[] = array('name' => 'Jill', 'age' => '50');\n$arr[] = array('name'\
    \ => 'Jack', 'age' => '50');\n$arr[] = array('name' => 'Jill', 'age' => '50');\n\
    $arr[] = array('name' => 'Jack', 'age' => '50');\n$arr[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$arr[] = array('name' => 'Jack', 'age' => '50');\n$arr[] =\
    \ array('name' => 'Jill', 'age' => '50');\n", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = 'abc';\n$string2 = 'ab';\n$string3\
    \ = 'abc';\n$string4 = 'ab';\n$string5 = 'abc';\n$string6 = 'ab';\n$string7 =\
    \ 'abc';\n$string8 = 'ab';\n$string9 = 'abc';\n$string10 = 'ab';\n$string11 =\
    \ 'abc';\n$string12 = 'ab';\n$string13 = 'abc';\n$string14 = 'ab';\n$string15\
    \ = 'abc';\n$string16 = 'ab';\n$string17 = 'abc';\n$string18 = 'ab';\n$string19\
    \ = 'abc';\n$string20 = 'ab';\n$string21 = 'abc';\n$string22 = 'ab';\n$string23\
    \ = 'abc';\n$string24 = 'ab';\n$string25 = 'abc';\n$string26 = 'ab';\n$string27\
    \ = 'abc';\n$string28 = 'ab';\n$string29 = 'abc';\n$string30 = 'ab';\n$string31\
    \ = 'abc';\n$string32 = 'ab';\n$string33 = 'abc';\n$string34 = 'ab';\n$string35\
    \ = 'abc';\n$string36 = 'ab';\n$string37 = 'abc';\n$string38 = 'ab';\n$string39\
    \ = 'abc';\n$string40 = 'ab';\n$string41 = 'abc';\n$string42 = 'ab';\n$string43\
    \ = 'abc';\n$string44 = 'ab';\n$string45 = 'abc';\n$string46 = 'ab';\n$string47\
    \ = 'abc';\n$string48 = 'ab';\n$string49 = 'abc';\n$string50 = 'ab';\n$string51\
    \ = 'abc';\n$string52 = 'ab';\n$string53 = 'abc';\n$string54 = 'ab';\n$string55\
    \ = 'abc';\n$string56 = 'ab';\n$string57 = 'abc';\n$string58 = 'ab';\n$string59\
    \ = 'abc';\n$string60 = 'ab';\n$string61 = 'abc';\n$string62 = 'ab';\n$string63\
    \ = 'abc';\n$string64 = 'ab';\n$string65", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThanks for\
    \ your answer! I edited my question to make it more clear.\n<|/ c |>\n<| c |>\n\
    : I edited my answer to include a solution for your updated question.\n<|/ c |>\n\
    <| c |>\nThanks again! I edited my question to make it more clear.\n<|/ c |>\n\
    <| c |>\n: I edited my answer to include a solution for your updated question.\n\
    <|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '28');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n\n$array = array_filter($array,\
    \ function($item){\n    return $item['name'] == 'Jill';\n});\n\nprint_r($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I edited my question\
    \ to make it more clear.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '28');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    \n$array = array_filter($array, function($item){\n    return $item['name'] ==\
    \ 'Jill';\n});\n\nprint_r($array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '28');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    \n$array = array_filter($array, function($item){\n    return $", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nI like\
    \ your solution, but I prefer to use `strpos` instead of `strstr` because `strstr`\
    \ will search the whole string and `strpos` will stop at the first occurrence\
    \ of the substring.\n<|/ c |>\n<| c |>\nYes, I agree with you. `strpos` would\
    \ be more efficient.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = 'The\
    \ quick brown fox jumps over the lazy dog';\n$search = 'fox';\n$array = explode('\
    \ ', $string);\n$array = array_filter($array, function($value) use ($search) {\n\
    \    return strpos($value, $search) !== false;\n});\nprint_r($array);\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n$string\
    \ = 'The quick brown fox jumps over the lazy dog';\n$search = 'fox';\n$array =\
    \ explode(' ', $string);\n$array = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) !== false;\n});\nprint_r($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$string = 'The quick\
    \ brown fox jumps over the lazy dog';\n$search = 'fox';\n$array = explode(' ',\
    \ $string);\n$array = array_filter($array, function($value) use ($search) {\n\
    \    return strpos($value, $search) !== false;\n});\nprint_r($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$string = 'The quick\
    \ brown fox jumps over the lazy dog';\n$search = 'fox';\n$array = explode(' ',\
    \ $string);\n$array = array_filter($array, function($value) use ($search) {\n\
    \    return strpos($value, $search) !== false;\n});\nprint_r($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$string = 'The quick\
    \ brown fox jumps over the lazy dog';\n$search = 'fox';\n$array = ", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if `$strings` contains `0` as a substring.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. `array_filter` will remove all `0` values from\
    \ `$strings`.\n<|/ c |>\n<| c |>\nI meant that `array_filter` will remove all\
    \ `0` values from `$strings`, not `0` values from `$substring`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, that's what I meant. `array_filter` will remove all `0` values\
    \ from `$strings`.\n<|/ c |>\n<| c |>\n: I added a version that doesn't use `array_filter`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$strings = array('abc', 'bacd', 'cde', 'array');\n\
    \n$substring = 'a';\n\n$result = array_filter($strings, function($string) use\
    \ ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\nvar_dump($result);\n\
    </code>\n<|/ a tags=php,arrays,substring |>\n<| c |>\nThis doesn't work if `$strings`\
    \ contains `0` as a substring.\n<|/ c |>\n<| c |>\n: Yes, it does. `array_filter`\
    \ will remove all `0` values from `$strings`.\n<|/ c |>\n<| c |>\n: I added a\
    \ version that doesn't use `array_filter`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $strings = array('abc', 'bacd', 'cde', 'array');\n$substring = 'a';\n\n$result\
    \ = array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n});\n\nvar_dump($result);\n</code>\n<|/ a tags=php,arrays,substring\
    \ |>\n<| c |>\nThis doesn't work if `$strings` contains `0` as a substring.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. `array_filter` will remove all `0` values from\
    \ `$strings`.\n<|/ c |>\n<| c |>\n: I added a version that doesn't use `array_filter`.\n\
    <|/ c |>\n<| a tags=php,arrays,", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello\
    \ World!';\n$search = 'World';\n$pos = strpos($string, $search);\nif ($pos ===\
    \ false) {\n    echo \"The string '$search' was not found in the string '$string'\"\
    ;\n} else {\n    echo \"The string '$search' was found in the string '$string'\"\
    ;\n    echo \" and exists at position $pos\";\n}", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    'a' => '1',\n    'b' => '2',\n\
    \    'c' => '3',\n    'd' => '4',\n    'e' => '5',\n    'f' => '6',\n    'g' =>\
    \ '7',\n    'h' => '8',\n    'i' => '9',\n    'j' => '10',\n    'k' => '11',\n\
    \    'l' => '12',\n    'm' => '13',\n    'n' => '14',\n    'o' => '15',\n    'p'\
    \ => '16',\n    'q' => '17',\n    'r' => '18',\n    's' => '19',\n    't' => '20',\n\
    \    'u' => '21',\n    'v' => '22',\n    'w' => '23',\n    'x' => '24',\n    'y'\
    \ => '25',\n    'z' => '26',\n);\n\n$search = 'a';\n\n$result = array();\nforeach($array\
    \ as $key => $value) {\n    if(strpos($key, $search) !== false) {\n        $result[]\
    \ = $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\n    'a' => '1',\n    'b'\
    \ => '2',\n    'c' => '3',\n    'd' => '4',\n    'e' => '5',\n    'f' => '6',\n\
    \    'g' => '7',\n    'h' => '8',\n    'i' => '9',\n    'j' => '10',\n    'k'\
    \ => '11',\n    'l' => '12',\n    'm' => '13',\n    'n' => '14',\n    'o' => '15',\n\
    \    'p' => '16',\n    'q' => '17',\n    'r' => '18',\n    's' => '19',\n    't'\
    \ => '20',\n    'u' => '21',\n    'v' => '22',\n    'w' => '23',\n    'x' => '24',\n\
    \    'y' => '25',\n    'z' => '26',\n);\n\n$search = 'a';\n\n$result = array();\n\
    foreach($array as $key => $value) {\n    if(strpos($key, $search) !== false) {\n\
    \        $result[] = $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    'a' => '1',", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however\
    \ I cannot get it to work. I've tried the code you provided and also the code\
    \ I posted in the question. Both give me the same result. I've also tried the\
    \ code in the question and also the code you provided and both give me the same\
    \ result. I've also tried the code in the question and also the code you provided\
    \ and both give me the same result. I've also tried the code in the question and\
    \ also the code you provided and both give me the same result. I've also tried\
    \ the code in the question and also the code you provided and both give me the\
    \ same result. I've also tried the code in the question and also the code you\
    \ provided and both give me the same result. I've also tried the code in the question\
    \ and also the code you provided and both give me the same result. I've also tried\
    \ the code in the question and also the code you provided and both give me the\
    \ same result. I've also tried the code in the question and also the code you\
    \ provided and both give me the same result. I've also tried the code in the question\
    \ and also the code you provided and both give me the same result.\n<|/ c |>\n\
    <| c |>\nI added a link to a screenshot of the results. I hope that helps.\n<|/\
    \ c |>\n<| c |>\nI added a link to a screenshot of the results. I hope that helps.\n\
    <|/ c |>\n<| c |>\nI added a link to a screenshot of the results. I hope that\
    \ helps.\n<|/ c |>\n<| c |>\nI added a link to a screenshot of the results. I\
    \ hope that helps.\n<|/ c |>\n<| a tags=arrays,php,multidimensional-array |>\n\
    <code>\n$array = [\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n];\n\n$search\
    \ = 'a';\n\n$result = array_filter($array, function($value) use ($search) {\n\
    \    return strpos($value, $search) !== false;\n});\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI added a link to a screenshot of the results. I hope\
    \ that helps.\n<|/ c |>\n<| c |>\nI added a link to a screenshot of the results.\
    \ I hope that helps.\n<|/ c |>\n<| c |>\nI added a link to a ", "  $filtered =\
    \ array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ Your code is working but i want to use only `strpos` function and i want to\
    \ know why my code is not working.\n<|/ c |>\n<| c |>\nI added a comment to the\
    \ code explaining why your code is not working.\n<|/ c |>\n<| a dscore=1 |>\n\
    The reason your code is not working is because you are using strpos() wrong.\n\
    strpos() returns the position of where the substring starts in the string. \n\
    In your case you were trying to find the position of the substring in the array\
    \ which is not correct.\nThe correct way to use strpos() is as follows:\n<code>\n\
    $string = 'abc';\n$array = ['abc', 'bacd', 'cde', 'array'];\n\n$pos = strpos($string,\
    \ $array);\n\nif ($pos !== false) {\n    echo 'true';\n} else {\n    echo 'false';\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer. Your code\
    \ is working but i want to use only `strpos` function and i want to know why my\
    \ code is not working.\n<|/ c |>\n<| c |>\nBecause you are using it wrong. `strpos()`\
    \ returns the position of where the substring starts in the string. In your case\
    \ you were trying to find the position of the substring in the array which is\
    \ not correct. The correct way to use `strpos()` is as follows: `strpos($string,\
    \ $array)`\n<|/ c |>\n<| c |>\nThanks for your answer. Your code is working but\
    \ i want to use only `strpos` function and i want to know why my code is not working.\n\
    <|/ c |>\n<| c |>\nBecause you are using it wrong. `strpos()` returns the position\
    \ of where the substring starts in the string. In your case you were trying to\
    \ find the position of the substring in the array which is not correct. The correct\
    \ way to use `strpos()` is as follows: `strpos($string, $array)`\n<|/ c |>\n<|\
    \ a dscore=1 |>\nYour code is not working because you are using strpos() wrong.\n\
    strpos() returns the position of where the substring starts in the string. In\
    \ your case you were trying to find the position of the substring in the array\
    \ which is not correct. The correct way to use strpos() is as follows: strpos($string,\
    \ $array)\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array2 = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"\
    ,\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array3\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$array4 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array5 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array6 = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array7 = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $array8 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a string\
    \ like `'abc def'` and you search for just `'abc'`\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that does work that doesn't require the string to be split into words.\
    \ I hope you don't mind that I added a second solution that doesn't require the\
    \ string to be split into words.\n<|/ c |>\n<| c |>\nI added a third solution\
    \ that doesn't require the string to be split into words. I hope you don't mind\
    \ that I added a fourth solution that doesn't require the string to be split into\
    \ words.\n<|/ c |>\n<| c |>\nI added a fifth solution that doesn't require the\
    \ string to be split into words. I hope you don't mind that I added a sixth solution\
    \ that doesn't require the string to be split into words.\n<|/ c |>\n<| c |>\n\
    I added a seventh solution that doesn't require the string to be split into words.\
    \ I hope you don't mind that I added a eight solution that doesn't require the\
    \ string to be split into words.\n<|/ c |>\n<| a tags=php,string,arrays |>\n<code>\n\
    $string = 'abc def ghi jkl mno pqr';\n$search = 'abc';\n$array = explode(' ',\
    \ $string);\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) !== false;\n});\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have a string like `'abc def'` and you search\
    \ for just `'abc'`\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ like `'abc def'` and you search for just `'abc'`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like `'abc def'` and you search for just `'abc'`\n\
    <|/ c |>\n<| a tags=php,string,arrays |>\n<code>\n$string = 'abc def ghi jkl mno\
    \ pqr';\n$search = 'abc';\n$array = explode(' ', $string);\n$result = array_filter($array,\
    \ function($item) use ($search) {", "  $filtered = [];\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I feel like\
    \ it could be improved by using an anonymous function instead of an anonymous\
    \ class.\n<|/ c |>\n<| c |>\nI agree, anonymous functions are better than anonymous\
    \ classes. I edited my answer to include an example using anonymous functions.\n\
    <|/ c |>\n<| a dscore=1 |>\nI like using array_filter() for this kind of thing:\n\
    <code>\n$strings = ['abc', 'bacd', 'cde', 'array'];\n$substring = 'a';\n$filtered\
    \ = array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n});\n</code>\n<|/ a tags=arrays,php,filtering,string\
    \ |>\n<| a tags=arrays,php,filtering,string |>\n<code>\n$strings = ['abc', 'bacd',\
    \ 'cde', 'array'];\n$substring = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php,filtering,string |>\n<code>\n\
    $strings = ['abc', 'bacd', 'cde', 'array'];\n$substring = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php,filtering,string\
    \ |>\n<code>\n$strings = ['abc', 'bacd', 'cde', 'array'];\n$substring = 'a';\n\
    $filtered = array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n});\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=arrays,php,filtering,string |>\n<code>\n$strings = ['abc', 'bacd', 'cde',\
    \ 'array'];\n$substring = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php,filtering,string |>\n<code>\n\
    $strings = ['abc', 'bacd', 'cde', 'array'];\n$substring = 'a';", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThanks, this was very helpful.\
    \ I've added a more generic version below that also allows for multiple substrings.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThanks for\
    \ your answer. Your code works fine but i need something more dynamic. Because\
    \ i have a lot of different arrays and i don't know which one i have to filter.\
    \ That's why i need something more dynamic. Thanks anyway\n<|/ c |>\n<| c |>\n\
    I added a dynamic solution to my answer\n<|/ c |>\n<| a |>\nYou can use the array_filter\
    \ function and pass a callback function which checks if the string contains the\
    \ substring.\n<code>\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result\
    \ = array_filter($array, function($string) {\n    return strpos($string, 'a')\
    \ !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ dscore=0 |>\n<| c |>\nThanks for your answer. Your code works fine but i need\
    \ something more dynamic. Because i have a lot of different arrays and i don't\
    \ know which one i have to filter. That's why i need something more dynamic. Thanks\
    \ anyway\n<|/ c |>\n<| c |>\nI added a dynamic solution to my answer\n<|/ c |>\n\
    <| a tags=php,arrays,multidimensional-array |>\nYou can use the array_filter function\
    \ and pass a callback function which checks if the string contains the substring.\n\
    <code>\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array,\
    \ function($string) {\n    return strpos($string, 'a') !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works fine\
    \ but i need something more dynamic. Because i have a lot of different arrays\
    \ and i don't know which one i have to filter. That's why i need something more\
    \ dynamic. Thanks anyway\n<|/ c |>\n<| a dscore=0 |>\nYou can try this :\n<code>\n\
    <?php\n$array = array('abc', 'bacd', 'cde', 'array');\n$search = 'a';\n$result\
    \ = array_filter($array, function($string) use ($search) {\n    return strpos($string,\
    \ $search) !== false;\n});\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your ", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = [\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n];\n\
    \n$search = 'a';\n\n$result = array_filter($array, function($v) use ($search)\
    \ {\n    return strpos($v, $search) !== false;\n});\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'abc',\n    'bacd',\n\
    \    'cde',\n    'array'\n];\n\n$search = 'a';\n\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== false;\n});\n\
    \nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n\
    <| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = [\n    'abc',\n\
    \    'bacd',\n    'cde',\n    'array'\n];\n\n$search = 'a';\n\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== false;\n});\n\
    \nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = [\n    'abc',\n    'bacd',\n    'cde',\n    'array'\n];\n\n$search = 'a';\n\
    \n$result = array_filter($array, function($v) use ($search) {\n    return strpos($v,\
    \ $search) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'abc',\n    'bacd',\n    'cde',\n\
    \    'array'\n];\n\n$search = 'a';\n\n$result = array_filter($array, function($v)\
    \ use ($search) {\n    return strpos($v, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = [\n    'abc", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for me. Thanks again\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result\
    \ = array_filter($array, function($value) use ($search) {\n    return strpos($value,\
    \ $search) !== false;\n});\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n\
    $array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result\
    \ = array_filter($array, function($value) use ($search) {\n    return strpos($value,\
    \ $search) !== false;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($value) use ($search) {\n\
    \    return strpos($value, $search) !== false;\n});\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$array = array(\"abc\", \"bacd", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,filtering,search |>\n<|\
    \ a dscore=0 |>\n<code>", "  return array_filter($strings, function($string) use\
    \ ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n}\n\
    </code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nI like this solution, although\
    \ I prefer `array_filter` over `array_reduce` because it's more readable and easier\
    \ to understand.\n<|/ c |>\n<| c |>\nI agree, `array_filter` is more readable,\
    \ but `array_reduce` has its advantages too - you can chain it together with other\
    \ array functions like `array_map`, `array_walk`, `array_reduce` etc.\n<|/ c |>\n\
    <| c |>\nI agree with you, `array_reduce` is more readable, but `array_reduce`\
    \ has its advantages too - you can chain it together with other array functions\
    \ like `array_map`, `array_walk`, `array_reduce` etc.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, `array_reduce` is more readable, but `array_reduce` has its advantages\
    \ too - you can chain it together with other array functions like `array_map`,\
    \ `array_walk`, `array_reduce` etc.\n<|/ c |>\n<| c |>\nI agree with you, `array_reduce`\
    \ is more readable, but `array_reduce` has its advantages too - you can chain\
    \ it together with other array functions like `array_map`, `array_walk`, `array_reduce`\
    \ etc.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$string = 'abc';\n$array\
    \ = ['abc', 'bacd', 'cde', 'array'];\n\n$result = array_filter($array, function($item)\
    \ use ($string) {\n    return strpos($item, $string) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `array_filter`\
    \ has many advantages over `array_reduce`.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. `array_filter` has many advantages over `array_reduce`.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `array_filter` has many\
    \ advantages over `array_reduce`.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `array_filter` has many advantages over `array_reduce`.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. `array_filter` has many advantages ",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, but I wonder if it would be faster to just loop\
    \ through the array and check each item against the substring instead of using\
    \ array_filter?\n<|/ c |>\n<| c |>\n: Yes, it would be faster to just loop through\
    \ the array and check each item against the substring. `array_filter` has to loop\
    \ through the entire array before it can return anything.\n<|/ c |>\n<| c |>\n\
    I tested this and it's actually slower than the other solutions. I did a test\
    \ with 100,000 strings and it took about 2 seconds to run this solution. My solution\
    \ took about 1.5 seconds. I did a test with 100,000 strings and it took about\
    \ 1.5 seconds to run this solution. My solution took about 1.5 seconds. I did\
    \ a test with 100,000 strings and it took about 1.5 seconds to run this solution.\
    \ My solution took about 1.5 seconds. I did a test with 100,000 strings and it\
    \ took about 1.5 seconds to run this solution. My solution took about 1.5 seconds.\
    \ I did a test with 100,000 strings and it took about 1.5 seconds to run this\
    \ solution. My solution took about 1.5 seconds. I did a test with 100,000 strings\
    \ and it took about 1.5 seconds to run this solution. My solution took about 1.5\
    \ seconds. I did a test with 100,000 strings and it took about 1.5 seconds to\
    \ run this solution. My solution took about 1.5 seconds. I did a test with 100,000\
    \ strings and it took about 1.5 seconds to run this solution. My solution took\
    \ about 1.5 seconds. I did a test with 100,000 strings and it took about 1.5 seconds\
    \ to run this solution. My solution took about 1.5 seconds. I did a test with\
    \ 100,000 strings and it took about 1.5 seconds to run this solution. My solution\
    \ took about 1.5 seconds. I did a test with 100,000 strings and it took about\
    \ 1.5 seconds to run this solution. My solution took about 1.5 seconds. I did\
    \ a test with 100,000 strings and it took about 1.5 seconds to run this solution.\
    \ My solution took about 1.5 seconds. I did a test with 100,000 strings and it\
    \ took about 1.", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a tags=php,arrays,multidimensional-array |>\n<| c |>\nI like this solution,\
    \ but I realized that my question was a little ambiguous. I edited my question\
    \ to clarify what I'm looking for. Thanks for the answer though!\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a function that should do what you want.\n\
    <|/ c |>\n<| c |>\nI edited my question to clarify what I'm looking for. Thanks\
    \ for the answer though!\n<|/ c |>\n<| c |>\nI edited my answer to include a function\
    \ that should do what you want.\n<|/ c |>\n<| c |>\nI edited my question to clarify\
    \ what I'm looking for. Thanks for the answer though!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '", " \
    \ return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a dscore=2 |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n\n$result = array_filter($array, function($string) use ($string)\
    \ {\n    return strpos($string, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,php,string |>\n<| a tags=arrays,php,string |>\n<code>\n\
    $string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result =\
    \ array_filter($array, function($string) use ($string) {\n    return strpos($string,\
    \ $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    \n$result = array_filter($array, function($string) use ($string) {\n    return\
    \ strpos($string, $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/\
    \ a dscore=2 tags=arrays,php,string |>\n<| a tags=arrays,php,string |>\n<code>\n\
    $string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result =\
    \ array_filter($array, function($string) use ($string) {\n    return strpos($string,\
    \ $string) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n\n$result = array_filter($array, function($string) use ($string)\
    \ {\n    return strpos($string, $string) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=1 |>\n<code>\n$string =\
    \ 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\n$result = array_filter($array,\
    \ function($string) use ($string) {\n    return strpos($string, $string) !== false;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=1\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ work if `$substring` contains regex special characters, such as `[`, `]`, `{`,\
    \ `}`, etc.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  $filtered = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. Simple and effective.\n<|/ c |>\n<| c |>\nI like\
    \ this solution, because it doesn't require any additional libraries. However,\
    \ I find it a bit confusing that `array_filter` accepts a callback function and\
    \ `array_filter` returns a new array. Why not just return the filtered array directly?\n\
    <|/ c |>\n<| c |>\nI agree with you, that would be more elegant. However I find\
    \ it more intuitive to think of `array_filter` as operating on existing arrays\
    \ and returning a new array rather than operating on existing arrays and returning\
    \ a boolean.\n<|/ c |>\n<| c |>\nI agree with you, that would be more elegant.\
    \ However I find it more intuitive to think of `array_filter` as operating on\
    \ existing arrays and returning a new array rather than operating on existing\
    \ arrays and returning a boolean.\n<|/ c |>\n<| c |>\nI agree with you, that would\
    \ be more elegant. However I find it more intuitive to think of `array_filter`\
    \ as operating on existing arrays and returning a new array rather than operating\
    \ on existing arrays and returning a boolean.\n<|/ c |>\n<| a tags=php,arrays,filter\
    \ |>\n<code>", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== FALSE;\n  });\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without using an anonymous function? I guess this would be more efficient\
    \ than using an anonymous function and `use`?\n<|/ c |>\n<| c |>\nI guess you\
    \ could use a named function and `use` it, but I wouldn't recommend it because\
    \ it's less readable and more prone to errors. If you really want to avoid anonymous\
    \ functions, you could also use [anonymous functions](http://php.net/manual/en/functions.anonymous.php),\
    \ but that would require you to define a new function for each use case. I'd stick\
    \ with the anonymous function and `use`.\n<|/ c |>\n<| c |>\nI added an example\
    \ using anonymous functions. I wouldn't recommend it because it's less readable\
    \ and more prone to errors. If you really want to avoid anonymous functions, you\
    \ could also use [anonymous functions](http://php.net/manual/en/functions.anonymous.php),\
    \ but that would require you to define a new function for each use case. I'd stick\
    \ with the anonymous function and `use`.\n<|/ c |>\n<| c |>\nI added an example\
    \ using anonymous functions. I wouldn't recommend it because it's less readable\
    \ and more prone to errors. If you really want to avoid anonymous functions, you\
    \ could also use [anonymous functions](http://php.net/manual/en/functions.anonymous.php),\
    \ but that would require you to define a new function for each use case. I'd stick\
    \ with the anonymous function and `use`.\n<|/ c |>\n<| c |>\nI added an example\
    \ using anonymous functions. I wouldn't recommend it because it's less readable\
    \ and more prone to errors. If you really want to avoid anonymous functions, you\
    \ could also use [anonymous functions](http://php.net/manual/en/functions.anonymous.php),\
    \ but that would require you to define a new function for each use case. I'd stick\
    \ with the anonymous function and `use`.\n<|/ c |>\n<| a dscore=1 |>\nYou could\
    \ use array_filter with a closure:\n<code>\n$strings = ['abc', 'bacd', 'cde',\
    \ 'array'];\n\n$filtered = array_filter($strings, function($string) {\n    return\
    \ strpos($string, 'a') !== FALSE;\n});\n\nvar_dump($filtered);\n</code>\nOutput:\n\
    <code>\narray(3) {\n  [0]=>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '28');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\nI wrote this simple function which does exactly what you want.\n\
    <code>", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThis doesn't work if you have a string that has more than one occurrence\
    \ of the substring.\n<|/ c |>\n<| c |>\nIt does work. Try it out. `filter_by_substring`\
    \ returns an array of strings that contain the substring you provided. `array_filter`\
    \ removes any elements that return `false` from the callback function.\n<|/ c\
    \ |>\n<| c |>\nI missed the fact that `array_filter` removes any elements that\
    \ return `false` from the callback function. Thanks for pointing that out.\n<|/\
    \ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n\n$newArray = array();\nforeach($array\
    \ as $key => $value){\n    if(strpos($value['name'], 'Jack') !== false){\n   \
    \     $newArray[] = $value;\n    }\n}\n\nprint_r($newArray);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n\n$newArray = array();\nforeach($array\
    \ as $key => $value){\n    if(strpos($value['name'], 'Jack') !== false){\n   \
    \     $newArray[] = $value;\n    }\n}\n\nprint_r($newArray);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$string = 'The quick\
    \ brown fox jumps over the lazy dog';\n$pattern = '#\\b(the|quick|brown|fox|jumps|over|the|lazy|dog)\\\
    b#';\npreg_match_all($pattern, $string, $matches);\nprint_r($matches);\n</code>\n\
    <|/ a tags=php,regex dscore=0 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string\
    \ = 'The quick brown fox jumps over the lazy dog';\n$pattern = '#\\b(the|quick|brown|fox|jumps|over|the|lazy|dog)\\\
    b#';\npreg_match_all($pattern, $string, $matches);\nprint_r($matches);", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array('abc', 'bacd', 'cde', 'array');\n$search = 'a';\n$result\
    \ = array_filter($array, function($v) use ($search) {\n    return strpos($v, $search)\
    \ !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me.\n<|/ c |>\n<| a tags=php,arrays dscore=5 |>\n\
    <code>\n$array = array('abc', 'bacd', 'cde', 'array');\n$search = 'a';\n$result\
    \ = array_filter($array, function($v) use ($search) {\n    return strpos($v, $search)\
    \ !== false;\n});\n</code>\n<|/ a |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array =\
    \ array('abc', 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== false;\n});\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($v)\
    \ use ($search) {\n    return strpos($v, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($v)\
    \ use ($search) {\n    return strpos($v, $search) !== false;\n});\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=4 |>\n<code>\n$array = array('abc', 'bacd", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your answer, but I'm having trouble\
    \ getting it to work. Can you please take a look at my updated question?\n<|/\
    \ c |>\n<| c |>\nI updated my answer with a working example. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks, that works great! I added a little bit of code to my\
    \ question to show how I used your answer to solve my problem. Thanks again!\n\
    <|/ c |>\n<| a tags=arrays,php,multidimensional-array |>\nI ended up using 's\
    \ answer, but with a little bit of extra code to get it to work. Thanks again\
    \ for the help!\n<code>", "  return array_filter($strings, function($string) use\
    \ ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'The quick\
    \ brown fox jumps over the lazy dog';\n$search = 'fox';\n$pos = strpos($string,\
    \ $search);\nif ($pos === false) {\n    echo \"The string '$search' was not found\
    \ in the string '$string'\";\n} else {\n    echo \"The string '$search' was found\
    \ at position $pos\";\n}", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = 'Hello\
    \ World';\n$search = 'World';\n$pos = strpos($string, $search);\n$string2 = substr($string,\
    \ $pos);\necho $string2;", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=0 |>\n\
    <code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n\n$newArray = array();\nforeach($array as $key => $value){\n\
    \    if($value['name'] == 'Jack'){\n        $newArray[] = $value;\n    }\n}\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n\n$newArray = array();\nforeach($array as $key => $value){\n\
    \    if($value['name'] == 'Jack'){\n        $newArray[] = $value;\n    }\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array();\n$array[]\
    \ = array('name' => 'John', 'age' => '20');\n$array[] = array('name' => 'Jane',\
    \ 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\n$newArray\
    \ = array();\nforeach($array as $key => $value){\n    if($value['name'] == 'Jack'){\n\
    \        $newArray[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    \n$newArray = array();\nforeach($array as $key => $value){\n    if($value['name']\
    \ == 'Jack'){\n        $newArray[] = $value;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if you have a string like `'abc'` and you want to filter it for `'abc'` but\
    \ also for `'abcabc'`\n<|/ c |>\n<| c |>\nYes, it does. `array_filter` will filter\
    \ out any string that doesn't contain the substring you're looking for. `strpos`\
    \ will return the position of that substring in the string. `strpos` will return\
    \ `0` if the substring is not found, so `array_filter` will remove any string\
    \ that doesn't contain the substring.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ My bad. My comment was meant to say that `strpos` will return `0` if the substring\
    \ is not found. `array_filter` will remove any string that doesn't contain the\
    \ substring.\n<|/ c |>\n<| c |>\nI see, thanks for clarifying. I updated my answer\
    \ to reflect this.\n<|/ c |>\n<| a |>\n<code>", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/\
    \ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThis doesn't work when\
    \ there are multiple occurrences of the substring in the string. e.g. `filter_by_substring([\n\
    \    'abc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n\
    \    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n\
    \    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n\
    \    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n\
    \    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n\
    \    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n\
    \    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n\
    \    'abcabc',\n    'bacd',\n    'cde',\n    'array',\n    'abcabc',\n    'bacd',\n\
    \    'cde',", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a tags=arrays,php,string |>\n<| c |>\nThis doesn't answer the question at all.\
    \ OP wants to filter out all strings that don't contain given substring.\n<|/\
    \ c |>\n<| c |>\nI answered the question as I understood it. I don't know why\
    \ you think it doesn't. OP wants to filter out all strings that don't contain\
    \ given substring. That's what this does.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I guess it's because you didn't answer the question. OP wants to filter\
    \ out all strings that don't contain given substring. Your answer doesn't do that.\
    \ OP wants to filter out all strings that _do_ contain given substring. Your answer\
    \ doesn't do that. OP wants to filter out all strings that _do_ contain given\
    \ substring. Your answer doesn't do that. OP wants to filter out all strings that\
    \ _do_ contain given substring. Your answer doesn't do that. OP wants to filter\
    \ out all strings that _do_ contain given substring. Your answer doesn't do that.\
    \ OP wants to filter out all strings that _do_ contain given substring. Your answer\
    \ doesn't do that. OP wants to filter out all strings that _do_ contain given\
    \ substring. Your answer doesn't do that. OP wants to filter out all strings that\
    \ _do_ contain given substring. Your answer doesn't do that. OP wants to filter\
    \ out all strings that _do_ contain given substring. Your answer doesn't do that.\
    \ OP wants to filter out all strings that _do_ contain given substring. Your answer\
    \ doesn't do that. OP wants to filter out all strings that _do_ contain given\
    \ substring. Your answer doesn't do that. OP wants to filter out all strings that\
    \ _do_ contain given substring. Your answer doesn't do that. OP wants to filter\
    \ out all strings that _do_ contain given substring. Your answer doesn't do that.\
    \ OP wants to filter out all strings that _do_ contain given substring. Your answer\
    \ doesn't do that. OP wants to filter out all strings that _do_ contain given\
    \ substring. Your answer doesn't do that. OP wants to filter out all strings that\
    \ _do_ contain given substring. Your answer doesn't do that. OP wants to filter\
    \ out all strings that _do_ contain given substring. Your ", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n", "  $result = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $result[] = $string;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nI like your answer, but I'm afraid that it's too complicated\
    \ for my needs. I added a simpler solution to my question. Thanks anyway!\n<|/\
    \ c |>\n<| a dscore=1 |>\nI came up with a solution that is very simple, yet effective.\n\
    <code>\n<?php", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks, this was exactly what I was looking for. I'm new to PHP\
    \ and didn't know about array_filter. Thanks again!\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jane', 'age' => 25, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jill', 'age' => 25, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[]\
    \ = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[]\
    \ = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25, 'city' => 'New York');", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$string = 'This is my\
    \ string';\n$search = 'my';\n$pos = strpos($string, $search);\n$result = substr($string,\
    \ $pos);\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to remove all occurrences of `my` not just the first one.\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'This is my string';\n$search\
    \ = 'my';\n$pos = strpos($string, $search);\n$result = substr($string, $pos);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to remove all occurrences of `my` not just the first one.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'This is my string';\n$search = 'my';\n$pos = strpos($string,\
    \ $search);\n$result = substr($string, $pos);\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to remove all occurrences of\
    \ `my` not just the first one.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string\
    \ = 'This is my string';\n$search = 'my';\n$pos = strpos($string, $search);\n\
    $result = substr($string, $pos);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to remove all occurrences of `my` not just the\
    \ first one.\n<|/ c |>\n<| a |>\n<code>\n$string = 'This is my string';\n$search\
    \ = 'my';\n$pos = strpos($string, $search);\n$result = substr($string, $pos);\n\
    </code>\n<|/ a dscore=0 tags=php,string |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'This is my string';\n$search = 'my';\n$pos = strpos($string, $search);\n\
    $result = substr($string, $pos);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to remove all occurrences of `my` ", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array1 = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array2 = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"\
    ,\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array3\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$array4 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array5 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array6 = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array7 = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $array8 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z", "  $filtered = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n  \
    \  }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No\
    \ need to reinvent the wheel. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$array = array('abc', 'bacd', 'cde', 'array');\n$search = 'a';\n$result\
    \ = array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) !== false;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel. Thanks!\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\n<code>\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. No need to reinvent the wheel. Thanks!\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'bacd', 'cde',\
    \ 'array');\n$search = 'a';\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'bacd',\
    \ 'cde', 'array');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=4 ", "  $filtered = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n  \
    \  }\n  }\n  return $filtered;\n}", "  $filtered = [];\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work when there are multiple occurrences of the substring.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this one the best. Easy to understand\
    \ and easy to use. Thanks!\n<|/ c |>\n<| c |>\nI like this one the best. Easy\
    \ to understand and easy to use. Thanks!\n<|/ c |>\n<| c |>\nI like this one the\
    \ best. Easy to understand and easy to use. Thanks!\n<|/ c |>\n<| c |>\nI like\
    \ this one the best. Easy to understand and easy to use. Thanks!\n<|/ c |>\n<|\
    \ c |>\nI like this one the best. Easy to understand and easy to use. Thanks!\n\
    <|/ c |>\n<| a |>\n<code>", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$string = 'The quick\
    \ brown fox jumps over the lazy dog';\n$search = 'fox';\n$array = explode(\" \"\
    , $string);\n$array = array_filter($array, function($var) use ($search) {\n  \
    \  return strpos($var, $search) !== false;\n});\n</code>\n<|/ a tags=php,arrays,search\
    \ |>\n<| a dscore=0 |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a |>\n<code>\n\
    $array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n$array[]\
    \ = array('name' => 'Jane', 'age' => 30);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = 'Hello World';\n$search = 'World';\n$pos = strpos($string, $search);\n\
    if ($pos === false) {\n    echo \"The string '$search' was not found in the string\
    \ '$string'\";\n} else {\n    echo \"The string '$search' was found at position\
    \ $pos\";\n}", "  $result = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== FALSE) {\n      $result[] = $string;\n    }\n\
    \  }\n  return $result;\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n\
    <code>", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a tags=php,arrays,multidimensional-array |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array();\n$array['abc'] = 'a';\n$array['bacd'] = 'b';\n$array['cde'] = 'c';\n\
    $array['array'] = 'd';\n\n$array = array_filter($array, 'strpos');\n\nprint_r($array);\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=1 |>\n<code>\n\
    $array = array();\n$array['abc'] = 'a';\n$array['bacd'] = 'b';\n$array['cde']\
    \ = 'c';\n$array['array'] = 'd';\n\n$array = array_filter($array, 'strpos');\n\
    \nprint_r($array);\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n\
    <| a dscore=0 |>\n<code>\n$array = array();\n$array['abc'] = 'a';\n$array['bacd']\
    \ = 'b';\n$array['cde'] = 'c';\n$array['array'] = 'd';\n\n$array = array_filter($array,\
    \ 'strpos');\n\nprint_r($array);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array['abc'] = 'a';\n$array['bacd'] = 'b';\n$array['cde'] = 'c';\n$array['array']\
    \ = 'd';\n\n$array = array_filter($array, 'strpos');\n\nprint_r($array);\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array();\n$array['abc']\
    \ = 'a';\n$array['bacd'] = 'b';\n$array['cde'] = 'c';\n$array['array'] = 'd';\n\
    \n$array = array_filter($array, 'strpos');\n\nprint_r($array);\n</code>\n<|/ a\
    \ tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array['abc'] = 'a';\n$array['bacd'] = 'b';\n\
    $array['cde'] = 'c';\n$array['array'] = 'd';\n\n$array = array_", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have\
    \ a string with multiple occurrences of the substring.\n<|/ c |>\n<| c |>\n: It\
    \ does work if you have a string with multiple occurrences of the substring. `array_filter`\
    \ removes all the elements that don't match the given condition. `strpos` returns\
    \ `false` if the substring is not found, so `array_filter` removes all the elements\
    \ that don't match the given condition. `strpos` returns `false` if the substring\
    \ is not found, so `array_filter` removes all the elements that don't match the\
    \ given condition. `strpos` returns `false` if the substring is not found, so\
    \ `array_filter` removes all the elements that don't match the given condition.\
    \ `strpos` returns `false` if the substring is not found, so `array_filter` removes\
    \ all the elements that don't match the given condition. `strpos` returns `false`\
    \ if the substring is not found, so `array_filter` removes all the elements that\
    \ don't match the given condition. `strpos` returns `false` if the substring is\
    \ not found, so `array_filter` removes all the elements that don't match the given\
    \ condition. `strpos` returns `false` if the substring is not found, so `array_filter`\
    \ removes all the elements that don't match the given condition.\n<|/ c |>\n<|\
    \ c |>\n: It does work if you have a string with multiple occurrences of the substring.\
    \ `array_filter` removes all the elements that don't match the given condition.\
    \ `strpos` returns `false` if the substring is not found, so `array_filter` removes\
    \ all the elements that don't match the given condition. `strpos` returns `false`\
    \ if the substring is not found, so `array_filter` removes all the elements that\
    \ don't match the given condition. `strpos` returns `false` if the substring is\
    \ not found, so `array_filter` removes all the elements that don't match the given\
    \ condition. `strpos` returns `false` if the substring is not found, so `array_filter`\
    \ removes all the elements that don't match the given condition. `strpos` returns\
    \ `false` if the substring is not found, so `array_filter` removes all the elements\
    \ that don't match the given condition. `strpos` returns `false` if the substring\
    \ is not found, so `array_filter` removes all the elements that don't match the\
    \ given condition. `strpos` returns `false` if the substring is not found, so\
    \ `array_filter` removes all the elements that don't match the given condition.\
    \ `strpos` returns ", "  $filtered = [];\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    Thanks for your answer. Your code works perfectly but i was looking for a more\
    \ elegant solution. Thanks anyway\n<|/ c |>\n<| c |>\nI added a more elegant solution\
    \ to my answer. :)\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$strings = array('abc',\
    \ 'bacd', 'cde', 'array');\n$substring = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly but i was looking for a more elegant solution. Thanks\
    \ anyway\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$strings = array('abc', 'bacd',\
    \ 'cde', 'array');\n$substring = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc',\
    \ 'bacd', 'cde', 'array');\n$substring = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly but i was looking for a more elegant solution.\
    \ Thanks anyway\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$strings = array('abc',\
    \ 'bacd', 'cde', 'array');\n$substring = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings\
    \ = array('abc', 'bacd', 'cde', 'array');\n$substring = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return str", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    \n$result = array();\nforeach ($array as $key => $value) {\n    if ($value['name']\
    \ == 'Jack') {\n        $result[] = $value;\n    }\n}\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name'\
    \ => 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n\n$result = array();\nforeach\
    \ ($array as $key => $value) {\n    if ($value['name'] == 'Jack') {\n        $result[]\
    \ = $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    \n$result = array();\nforeach ($array as $key => $value) {\n    if ($value['name']\
    \ == 'Jack') {\n        $result[] = $value;\n    }\n}\n\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name", "  $result = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $result[] = $string;\n    }\n  }\n  return $result;\n}\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. Thanks\
    \ again\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$array1 = array('abc', 'bacd',\
    \ 'cde', 'array');\n$array2 = array('abc', 'bacd', 'cde', 'array');\n$array3 =\
    \ array('abc', 'bacd', 'cde', 'array');\n$array4 = array('abc', 'bacd', 'cde',\
    \ 'array');\n$array5 = array('abc', 'bacd', 'cde', 'array');\n$array6 = array('abc',\
    \ 'bacd', 'cde', 'array');\n$array7 = array('abc', 'bacd', 'cde', 'array');\n\
    $array8 = array('abc', 'bacd', 'cde', 'array');\n$array9 = array('abc', 'bacd',\
    \ 'cde', 'array');\n$array10 = array('abc', 'bacd', 'cde', 'array');\n$array11\
    \ = array('abc', 'bacd', 'cde', 'array');\n$array12 = array('abc', 'bacd', 'cde',\
    \ 'array');\n$array13 = array('abc', 'bacd', 'cde', 'array');\n$array14 = array('abc',\
    \ 'bacd', 'cde', 'array');\n$array15 = array('abc', 'bacd', 'cde', 'array');\n\
    $array16 = array('abc', 'bacd', 'cde', 'array');\n$array17 = array('abc', 'bacd',\
    \ 'cde', 'array');\n$array18 = array('abc', 'bacd', 'cde', 'array');\n$array19\
    \ = array('abc', 'bacd', 'cde', 'array');\n$array20 = array('abc', 'bacd', 'cde',\
    \ 'array');\n$array21 = array('abc', 'bacd', 'cde', 'array');\n$array22 = array('abc',\
    \ 'bacd', 'cde', 'array');\n$array23 = array('abc', 'bacd', 'cde', 'array');\n\
    $array24 = array('abc', 'bacd', 'cde', 'array');\n$array25 = array('abc', 'bacd',\
    \ 'cde', 'array');\n$array26 = array('abc', 'bacd', 'cde', 'array');\n$array27\
    \ = array('abc', 'bacd', 'cde', 'array');\n$array28 = array('abc', 'ba", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\"\
    , \"array\");\n\n$search = \"a\";\n\n$result = array_filter($array, function($v)\
    \ use ($search) {\n    return strpos($v, $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== false;\n});\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\n$array = array(\"abc\",\
    \ \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== false;\n});\n\
    </code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result\
    \ = array_filter($array, function($v) use ($search) {\n    return strpos($v, $search)\
    \ !== false;\n});\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n$array\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result =\
    \ array_filter($array, function($v) use ($search) {\n    return strpos($v, $search)\
    \ !== false;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| a |>\n<code>\n\
    $array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result\
    \ = array_filter($array, function($v) use ($search) {\n    return strpos($v, $search)\
    \ !== false;\n});\n</code>\n<|/ a dscore=2 tags=php,arrays,string |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($v"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
