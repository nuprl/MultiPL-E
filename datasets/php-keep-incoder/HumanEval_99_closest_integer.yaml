name: HumanEval_99_closest_integer
language: php
prompt: "<?php\n// Create a function that takes a value (string) representing a number\n\
  // and returns the closest integer to it. If the number is equidistant\n// from\
  \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
  10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
  \ from zero means that if the given number is equidistant\n// from two integers,\
  \ the one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer($value) {\n"
tests: "function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n  $closest_integer\
    \ = ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  // Convert the value to a float\n  $value = floatval($value);\n  // If\
    \ the value is zero, return zero\n  if ($value == 0) {\n    return 0;\n  }\n \
    \ // If the value is negative, return negative one\n  if ($value < 0) {\n    return\
    \ -1;\n  }\n  // If the value is positive, return positive one\n  if ($value >\
    \ 0) {\n    return 1;\n  }\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value % 1 == 0) {\n    return round($value);\n\
    \  }\n  // Otherwise, return the closest integer\n  return $value;\n}", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n  return $closest_integer;\n}", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n  return $closest_integer;\n}\n", " \
    \ // If the given value is an integer, return it.\n  if (is_int($value)) {\n \
    \   return $value;\n  }\n\n  // If the given value is a float, convert it to a\
    \ string and strip the\n  // decimal part.\n  $value = strval($value);\n  $value\
    \ = preg_replace('/\\./', '', $value);\n\n  // If the given value is a string,\
    \ split the string into an array of\n  // integers and round the integers away\
    \ from zero.\n  if (is_string($value)) {\n    $value = preg_split('/(?<!^)(?!$)/',\
    \ $value);\n    foreach ($value as $key => $value) {\n      $value[$key] = round($value,\
    \ 2);\n    }\n    return implode('', $value);\n  }\n\n  // If the given value\
    \ is not an integer, return null.\n  return null;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nI used the answer from and modified it a little bit to make it\
    \ more flexible and to allow for negative numbers. \n<code>", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n", "    $value\
    \ = abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n    $closest_integer =\
    \ ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n    return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value ? $value : $closest_integer);\n  while ($closest_integer\
    \ - $value >= 1) {\n    $closest_integer = ($closest_integer - $value) + $value;\n\
    \  }\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer == $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ * 10;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer == 0 ? 1 : $closest_integer;\n\
    \  while ($closest_integer == $value) {\n    $closest_integer = $closest_integer\
    \ == 0 ? 1 : $closest_integer;\n  }\n  return $closest_integer;\n}\n", "  $value\
    \ = abs($value);\n  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs\
    \ = abs($closestDistance);\n  foreach ($values as $v) {\n    $distance = $v -\
    \ $value;\n    if ($closestDistance === null || $distance < $closestDistanceAbs)\
    \ {\n      $closest = $v;\n      $closestDistance = $distance;\n    }\n  }\n \
    \ return $closest;\n}", "  // If the given number is a string, turn it into a\
    \ float.\n  $value = floatval($value);\n\n  // If the given number is negative,\
    \ make it positive.\n  if ($value < 0) {\n    $value *= -1;\n  }\n\n  // If the\
    \ given number is equidistant from two integers, round it away\n  // from zero.\n\
    \  if ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the\
    \ given number is equidistant from two integers, round it away\n  // from zero.\n\
    \  $difference = abs($value - round($value));\n  if ($difference == 1) {\n   \
    \ return round($value);\n  }\n\n  // If the given number is equidistant from two\
    \ integers, round it away\n  // from zero.\n  $difference = abs($value - round($value));\n\
    \  if ($difference == 2) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  $difference\
    \ = abs($value - round($value));\n  if ($difference == 3) {\n    return round($value);\n\
    \  }\n\n  // If the given number is equidistant from two integers, round it away\n\
    \  // from zero.\n  $difference = abs($value - round($value));\n  if ($difference\
    \ == 4) {\n    return round($value);\n  }\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $difference = abs($value\
    \ - round($value));\n  if ($difference == 5) {\n    return round($value);\n  }\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $difference = abs($value - round($value));\n  if ($difference\
    \ == 6) {\n    return round($value);\n  }\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $difference = abs($value\
    \ - round($value));\n  if ($difference == 7) {\n    return round($value);\n  }\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $difference = abs($value - round($value));\n  if ($difference\
    \ == 8) {\n    return round($value);\n  }\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $difference = abs($value\
    \ - round($value));\n  if ($difference == 9) {\n    return round($value);\n  }\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $difference = ", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = floatval($value);\n  $diff = $value\
    \ - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n  }\n  return\
    \ ceil($value);\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($closest_integer == 0) ? 0 : $closest_integer;\n  while\
    \ ($closest_integer < 1) {\n    $closest_integer = $closest_integer * 10;\n  }\n\
    \  while ($closest_integer > 9) {\n    $closest_integer = $closest_integer / 10;\n\
    \  }\n  return $closest_integer;\n}\n", "  // If the given number is not an integer,\
    \ return null.\n  if (!is_numeric($value)) {\n    return null;\n  }\n\n  // If\
    \ the given number is negative, return null.\n  if ($value < 0) {\n    return\
    \ null;\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  $difference = abs($value - $value);\n  if ($difference\
    \ < 2) {\n    return $value;\n  }\n\n  // If the given number is equidistant from\
    \ two integers, round it away\n  // from zero.\n  return ceil($value);\n}", " \
    \ $value = abs($value);\n  $closest_integer = $value;\n  foreach (range(1, $value)\
    \ as $i) {\n    if ($i % 2 == 0) {\n      $closest_integer = $i;\n    }\n  }\n\
    \  return $closest_integer;\n}\n", "  // Convert the value to a float\n  $value\
    \ = floatval($value);\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  if ($value % 1 == 0) {\n    return round($value);\n  }\n\
    \  // If the value is equidistant from two integers, round it toward the nearest\
    \ integer\n  return round($value, 0, PHP_ROUND_HALF_UP);\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n  return $closest_integer;\n}\n", " \
    \ $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < PHP_INT_MAX) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \    return $closest_integer;\n}\n", "  // Convert the value to a float and round\
    \ it down\n  $value = floatval($value);\n  $value = round($value, 0);\n  // If\
    \ the value is equidistant from two integers, round it away from zero\n  if ($value\
    \ == $value + 1) {\n    $value = $value - 1;\n  }\n  return $value;\n}\n", " \
    \ $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value ", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  while ($closest_integer > 0 && $closest_integer < $value) {\n    $closest_integer\
    \ = floor($closest_integer);\n  }\n  return $closest_integer;\n}", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0 &&\
    \ $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}", "  return round($value/abs($value));\n}\n",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value ? $value : $closest_integer);\n  while ($closest_integer != 0) {\n\
    \    $closest_integer = ($closest_integer < $value ? $closest_integer + 1 : $closest_integer\
    \ - 1);\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  while ($closest_integer - $value >= 1) {\n    $closest_integer--;\n    $value\
    \ = $closest_integer;\n    $closest_integer = ($value <= $closest_integer) ? $value\
    \ : $closest_integer;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0 &&\
    \ $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < PHP_INT_MAX) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}", "  // Convert the value to a float and round\
    \ it to a whole number\n  $value = floatval($value);\n  $value = round($value);\n\
    \n  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == $value + 1) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from three integers, round it away from zero\n  if ($value == $value\
    \ + 2) {\n    return $value;\n  }\n\n  // If the value is equidistant from four\
    \ integers, round it away from zero\n  if ($value == $value + 3) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from five integers, round it\
    \ away from zero\n  if ($value == $value + 4) {\n    return $value;\n  }\n\n \
    \ // If the value is equidistant from six integers, round it away from zero\n\
    \  if ($value == $value + 5) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from seven integers, round it away from zero\n  if ($value == $value\
    \ + 6) {\n    return $value;\n  }\n\n  // If the value is equidistant from eight\
    \ integers, round it away from zero\n  if ($value == $value + 7) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from nine integers, round it\
    \ away from zero\n  if ($value == $value + 8) {\n    return $value;\n  }\n\n \
    \ // If the value is equidistant from ten integers, round it away from zero\n\
    \  if ($value == $value + 9) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from eleven integers, round it away from zero\n  if ($value == $value\
    \ + 10) {\n    return $value;\n  }\n\n  // If the value is equidistant from twelve\
    \ integers, round it away from zero\n  if ($value == $value + 11) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from thirteen integers, round\
    \ it away from zero\n  if ($value == $value + 12) {\n    return $value;\n  }\n\
    \n  // If the value is equidistant from fourteen integers, round it away from\
    \ zero\n  if ($value == $value + 13) {\n    return $value;\n  }\n\n  // If the\
    \ value is equidistant from fifteen integers, round it away from zero\n  if ($value\
    \ == $value + 14) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from sixteen integers, round it away from zero\n  if ($value == $value + 15)\
    \ {", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer < $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer > $value) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ == $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  // Convert the value to a float\
    \ and round it down\n  $value = floatval($value);\n  $value = round($value, 0);\n\
    \n  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value + 1) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ - 1) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == $value + 2) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from two integers, round it\
    \ away from zero.\n  if ($value == $value - 2) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value + 3) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ - 3) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == $value + 4) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from two integers, round it\
    \ away from zero.\n  if ($value == $value - 4) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value + 5) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ - 5) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == $value + 6) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from two integers, round it\
    \ away from zero.\n  if ($value == $value - 6) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value + 7) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ - 7) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == $value + 8) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from two integers, round it\
    \ away from zero.\n  if ($value == ", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n    $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n    return $closest_integer;\n\
    }\n", "  return round($value) == $value ? $value : round($value - $value % 1,\
    \ 0);\n}\n</code>\n<|/ a tags=php,rounding |>\n<| a dscore=0 |>\n<code>\n<?php",
  "    $value = floatval($value);\n    $closest = round($value, 0);\n    if ($closest\
    \ == $value) {\n        return $value;\n    }\n    $difference = abs($value -\
    \ $closest);\n    if ($difference < $value * 0.1) {\n        return $closest;\n\
    \    }\n    return $value;\n}\n", "  // If the given number is equidistant from\
    \ two integers, round it away\n  // from zero.\n  if ($value == floor($value))\
    \ {\n    return floor($value);\n  }\n  // If the given number is equidistant from\
    \ two integers, round it away\n  // from zero.\n  if ($value == ceil($value))\
    \ {\n    return ceil($value);\n  }\n  // If the given number is equidistant from\
    \ two integers, round it away\n  // from zero.\n  if ($value == round($value))\
    \ {\n    return round($value);\n  }\n  // If the given number is equidistant from\
    \ two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 2)) {\n    return round($value, 2);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 3)) {\n    return round($value, 3);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 4)) {\n    return round($value, 4);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 5)) {\n    return round($value, 5);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 6)) {\n    return round($value, 6);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 7)) {\n    return round($value, 7);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 8)) {\n    return round($value, 8);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 9)) {\n    return round($value, 9);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 10)) {\n    return round($value, 10);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == round($value,\
    \ 11)) {\n    return round($value, 11);\n  }\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value == ", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0\
    \ && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value - floor($value)) < 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  foreach ($GLOBALS['db']->field_types\
    \ as $field_type => $field_type_info) {\n    if ($field_type_info['integer_type']\
    \ == 'auto') {\n      if ($field_type_info['length'] == 'tiny') {\n        $closest_integer\
    \ = $value;\n      }\n      elseif ($field_type_info['length'] == 'small') {\n\
    \        $closest_integer = $value;\n      }\n      elseif ($field_type_info['length']\
    \ == 'medium') {\n        $closest_integer = $value;\n      }\n      elseif ($field_type_info['length']\
    \ == 'big') {\n        $closest_integer = $value;\n      }\n    }\n  }\n  return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($closest_integer == 0) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer < $value) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}", "  // If the given value is a string, convert\
    \ it to a float.\n  $value = floatval($value);\n  // If the given value is negative,\
    \ make it positive.\n  if ($value < 0) {\n    $value = abs($value);\n  }\n  //\
    \ If the given value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == round($value)) {\n    return round($value);\n  }\n  // If the\
    \ given value is equidistant from two integers, round it toward the nearest integer.\n\
    \  if ($value == floor($value)) {\n    return floor($value);\n  }\n  // If the\
    \ given value is equidistant from two integers, round it toward the nearest integer.\n\
    \  if ($value == ceil($value)) {\n    return ceil($value);\n  }\n  // If the given\
    \ value is equidistant from two integers, round it toward the nearest integer.\n\
    \  if ($value == round($value, 2)) {\n    return round($value, 2);\n  }\n  //\
    \ If the given value is equidistant from two integers, round it toward the nearest\
    \ integer.\n  if ($value == floor($value, 2)) {\n    return floor($value, 2);\n\
    \  }\n  // If the given value is equidistant from two integers, round it toward\
    \ the nearest integer.\n  if ($value == ceil($value, 2)) {\n    return ceil($value,\
    \ 2);\n  }\n  // If the given value is equidistant from two integers, round it\
    \ toward the nearest integer.\n  if ($value == round($value, 3)) {\n    return\
    \ round($value, 3);\n  }\n  // If the given value is equidistant from two integers,\
    \ round it toward the nearest integer.\n  if ($value == floor($value, 3)) {\n\
    \    return floor($value, 3);\n  }\n  // If the given value is equidistant from\
    \ two integers, round it toward the nearest integer.\n  if ($value == ceil($value,\
    \ 3)) {\n    return ceil($value, 3);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == round($value,\
    \ 4)) {\n    return round($value, 4);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == floor($value,\
    \ 4)) {\n    return floor($value, 4);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == ceil($value,\
    \ 4)) {\n    return ceil($value, 4);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == round($value,\
    \ 5)) {\n    return round($value, 5);", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \    return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $value ", "    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value - 1) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value + 1) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest = null;\n    $closestDistance =\
    \ null;\n    $closestDistanceAbs = abs($closestDistance);\n    foreach ($values\
    \ as $v) {\n        $distance = $v - $value;\n        if ($closestDistance ===\
    \ null || $distance < $closestDistance) {\n            $closest = $v;\n      \
    \      $closestDistance = $distance;\n        }\n    }\n    return $closest;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_", "  $value = abs($value);\n  $closest_integer = $value;\n  while\
    \ ($closest_integer > 0 && $closest_integer < $value) {\n    $closest_integer\
    \ = floor($closest_integer);\n  }\n  return $closest_integer;\n}\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0\
    \ && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > 0 ? $closest_integer : 0;\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $closest_integer : $closest_integer + 1;\n\
    \    return $closest_integer;\n}", "  // Convert the value to a float and round\
    \ it down\n  $value = floatval($value);\n  $value = round($value, 0);\n\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  if\
    \ ($value == $value + 1) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from three integers, round it away from zero\n  if ($value == $value + 2) {\n\
    \    return $value;\n  }\n\n  // If the value is equidistant from four integers,\
    \ round it away from zero\n  if ($value == $value + 3) {\n    return $value;\n\
    \  }\n\n  // If the value is equidistant from five integers, round it away from\
    \ zero\n  if ($value == $value + 4) {\n    return $value;\n  }\n\n  // If the\
    \ value is equidistant from six integers, round it away from zero\n  if ($value\
    \ == $value + 5) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from seven integers, round it away from zero\n  if ($value == $value + 6) {\n\
    \    return $value;\n  }\n\n  // If the value is equidistant from eight integers,\
    \ round it away from zero\n  if ($value == $value + 7) {\n    return $value;\n\
    \  }\n\n  // If the value is equidistant from nine integers, round it away from\
    \ zero\n  if ($value == $value + 8) {\n    return $value;\n  }\n\n  // If the\
    \ value is equidistant from ten integers, round it away from zero\n  if ($value\
    \ == $value + 9) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from eleven integers, round it away from zero\n  if ($value == $value + 10)\
    \ {\n    return $value;\n  }\n\n  // If the value is equidistant from twelve integers,\
    \ round it away from zero\n  if ($value == $value + 11) {\n    return $value;\n\
    \  }\n\n  // If the value is equidistant from thirteen integers, round it away\
    \ from zero\n  if ($value == $value + 12) {\n    return $value;\n  }\n\n  // If\
    \ the value is equidistant from fourteen integers, round it away from zero\n \
    \ if ($value == $value + 13) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from fifteen integers, round it away from zero\n  if ($value ==\
    \ $value + 14) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from sixteen integers, round it away from zero\n  if ($value == $value + 15)\
    \ {\n", "    $value = floatval($value);\n    $closest = null;\n    $diff = null;\n\
    \    $diffAbs = null;\n    $diffAbsMax = null;\n    $diffAbsMaxAbs = null;\n \
    \   $diffAbsMaxAbsMin = null;\n    $diffAbsMaxAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMax\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMax\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMax\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbs = null;\n  \
    \  $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMax = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbs = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMax =\
    \ null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAb",
  "  return round($value);\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  while ($closest_integer > 0 && $closest_integer < $value) {\n    $closest_integer\
    \ = floor($closest_integer);\n  }\n  return $closest_integer;\n}\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ > 0 ? $closest_integer : 0;\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}", "  $value = floatval($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($value - floor($value)) < 0.0 ? floor($value) : ceil($value);\n\
    \  return $closest_integer;\n}\n", "  // Convert the value to a float\n  $value\
    \ = floatval($value);\n  // If the value is negative, return 0\n  if ($value <\
    \ 0) {\n    return 0;\n  }\n  // If the value is zero, return it\n  if ($value\
    \ == 0) {\n    return $value;\n  }\n  // If the value is positive, return the\
    \ floor of the value\n  if ($value > 0) {\n    return floor($value);\n  }\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  $difference\
    \ = abs($value - $value);\n  if ($difference < 0.5) {\n    return $value;\n  }\n\
    \  return $value - ($difference - 0.5);\n}", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = ($value - $closest_integer) < $value ? $value\
    \ : $closest_integer;\n    return $closest_integer;\n}\n", "  // Convert the value\
    \ to a float\n  $value = floatval($value);\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == round($value)) {\n\
    \    return round($value);\n  }\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value == floor($value)) {\n    return floor($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it away from\
    \ zero\n  if ($value == ceil($value)) {\n    return ceil($value);\n  }\n\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  if\
    \ ($value == round($value, 2)) {\n    return round($value, 2);\n  }\n\n  // If\
    \ the value is equidistant from two integers, round it away from zero\n  if ($value\
    \ == floor($value, 2)) {\n    return floor($value, 2);\n  }\n\n  // If the value\
    \ is equidistant from two integers, round it away from zero\n  if ($value == ceil($value,\
    \ 2)) {\n    return ceil($value, 2);\n  }\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == round($value, 3))\
    \ {\n    return round($value, 3);\n  }\n\n  // If the value is equidistant from\
    \ two integers, round it away from zero\n  if ($value == floor($value, 3)) {\n\
    \    return floor($value, 3);\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero\n  if ($value == ceil($value, 3)) {\n    return\
    \ ceil($value, 3);\n  }\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value == round($value, 4)) {\n    return round($value,\
    \ 4);\n  }\n\n  // If the value is equidistant from two integers, round it away\
    \ from zero\n  if ($value == floor($value, 4)) {\n    return floor($value, 4);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it away from\
    \ zero\n  if ($value == ceil($value, 4)) {\n    return ceil($value, 4);\n  }\n\
    \n  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value, 5)) {\n    return round($value, 5);\n  }\n\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  if\
    \ ($value == floor($value, 5)) {\n    return floor($value, 5);\n  }\n\n  // If\
    \ the value is equidistant from two integers, round it away from zero\n  if ($value\
    \ == ceil($value, 5)) {\n    return ceil", "  // Convert the value to a float\n\
    \  $value = floatval($value);\n\n  // If the value is negative, return negative\
    \ infinity\n  if ($value < 0) {\n    return PHP_INT_MAX;\n  }\n\n  // If the value\
    \ is zero, return zero\n  if ($value == 0) {\n    return 0;\n  }\n\n  // If the\
    \ value is positive, return the next integer after it\n  if ($value > 0) {\n \
    \   return ceil($value);\n  }\n\n  // If the value is negative, return the previous\
    \ integer before it\n  return floor($value);\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer == 0 ? 1\
    \ : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer == 0 ? 1 : $closest_integer;\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = $value % $closest_integer;\n    if ($closest_integer == 0) {\n        $closest_integer\
    \ = 1;\n    }\n    return $closest_integer;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"10\", \"15.3\", \"14.5\", \"\
    -12.5\", \"0\", \"10\", \"-10\", \"10\", \"-10\", \"-10\", \"-10\", \"-10\", \"\
    -10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n  while ($closest_integer\
    \ % 2 == 0) {\n    $closest_integer = ($closest_integer + 1);\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n", "  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is zero,\
    \ return zero\n  if ($value == 0) {\n    return 0;\n  }\n  // If the value is\
    \ negative, return negative of the closest integer\n  if ($value < 0) {\n    return\
    \ -closest_integer(abs($value));\n  }\n  // If the value is positive, return positive\
    \ of the closest integer\n  if ($value > 0) {\n    return closest_integer($value);\n\
    \  }\n  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value)) {\n    return round($value);\n  }\n  // Otherwise,\
    \ return the closest integer\n  return $value;\n}\n</code>\n<|/ a tags=php,rounding\
    \ |>\n<| a dscore=3 |>\n<code>", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value ", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? $closest_integer : $closest_integer + 1;\n  return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ while ($closest_integer < $value) {\n    $closest_integer++;\n  }\n  return\
    \ $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  while ($closest_integer > 0 && $closest_integer < $value) {\n    $closest_integer\
    \ = floor($closest_integer);\n  }\n  return $closest_integer;\n}\n", "  return\
    \ round($value / $value, 0);\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value - floor($value)) < 0.0 ? floor($value)\
    \ : ceil($value);\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest = null;\n  $closestDiff = null;\n  foreach ($values\
    \ as $v) {\n    $diff = $v - $value;\n    if ($closestDiff === null || $diff <\
    \ $closestDiff) {\n      $closest = $v;\n      $closestDiff = $diff;\n    }\n\
    \  }\n  return $closest;\n}\n", "  $value = abs($value);\n  $closest_integer =\
    \ $value;\n  $closest_integer = ($closest_integer == $value ? $value : $closest_integer);\n\
    \  while ($closest_integer - $value >= 1) {\n    $closest_integer = ($closest_integer\
    \ - $value) + $value;\n  }\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($value % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n\
    \  while ($closest_integer % 2 == 0) {\n    $closest_integer = ($closest_integer\
    \ + 1);\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n\
    \  $closest_integer = ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest = $value;\n\
    \  $closestDiff = abs($value - $closest);\n  foreach (range(1, $closestDiff) as\
    \ $i) {\n    $closestDiff = abs($value - $closest);\n    $closest = $value - ($closestDiff\
    \ / $i);\n  }\n  return $closest;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n  $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n  return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer * 10;\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_", "  return round($value);\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "  return round($value/abs($value));\n}\n", "  $value = abs($value);\n \
    \ $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n", "  // If the given value is an integer, return it.\n\
    \  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the given value is\
    \ a float, convert it to a string and strip the\n  // decimal point from the string.\n\
    \  $value = strval($value);\n  $value = preg_replace('/\\./', '', $value);\n\n\
    \  // If the given value is a string, split the string into an array of\n  //\
    \ strings representing each of the numbers in the given string.\n  $values = explode('.',\
    \ $value);\n\n  // If the given value has more than one number, return the number\
    \ that\n  // is closest to zero.\n  if (count($values) > 1) {\n    $differences\
    \ = array();\n    foreach ($values as $value) {\n      $differences[] = abs($value\
    \ - 0);\n    }\n    $differences = array_sum($differences);\n    $differences\
    \ = $differences / count($values);\n    $differences = round($differences);\n\
    \    return $values[0];\n  }\n\n  // If the given value has only one number, return\
    \ the number that\n  // is closest to zero.\n  return abs($value - 0);\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| a dscore=0 |>\n<code>\n<?php", "  // If the given number\
    \ is equidistant from two integers, round it away\n  // from zero.\n  if (abs($value\
    \ - round($value)) < abs($value - round($value + 1))) {\n    return round($value);\n\
    \  }\n  return round($value + 1);\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value - floor($value)) < 0.0 ? floor($value)\
    \ : ceil($value);\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest = null;\n  $closestDistance = null;\n  $closestDistanceSqr\
    \ = null;\n  foreach ($GLOBALS['db']->fetchAll(\"SELECT `id`, `distance` FROM\
    \ `{$GLOBALS['db']->prefix}numbers` WHERE `number` = '{$value}'\") as $row) {\n\
    \    if ($closestDistance === null || $closestDistance > $row['distance']) {\n\
    \      $closestDistance = $row['distance'];\n      $closest = $row['id'];\n  \
    \  }\n    $closestDistanceSqr = $closestDistance * $closestDistance;\n  }\n  return\
    \ $closest;\n}", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_", "    $value = abs($value);\n\
    \    $closest = null;\n    $closestDiff = null;\n    foreach ($values as $v) {\n\
    \        $diff = $v - $value;\n        if ($closestDiff === null || $diff < $closestDiff)\
    \ {\n            $closestDiff = $diff;\n            $closest = $v;\n        }\n\
    \    }\n    return $closest;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "  return round($value);\n}", "  return round($value/abs($value));\n}\n",
  "  return round($value);\n}", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($closest_integer == 0) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value - 1) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  // Convert the value to a float\n  $value = floatval($value);\n  // If\
    \ the value is negative, add 1 to it\n  if ($value < 0) {\n    $value++;\n  }\n\
    \  // If the value is greater than zero, divide it by two\n  if ($value > 1) {\n\
    \    $value = $value / 2;\n  }\n  // If the value is less than zero, subtract\
    \ 1 from it\n  if ($value < 0) {\n    $value--;\n  }\n  return $value;\n}\n",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n  return $closest_integer;\n}\n", " \
    \   $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value - 1) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value + 1) ? $value : $closest_integer;\n    return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ while ($closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ * 10;\n  }\n  return $closest_integer;\n}\n", "  // If the given value is a\
    \ string, convert it to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n\
    \  }\n\n  // If the given value is an integer, return it.\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is a string, parse it as a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float(", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n  $closest_integer\
    \ = $closest_integer > $value ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n", "  // Convert the value to a float\n  $value = floatval($value);\n  // If\
    \ the value is equidistant from two integers, round it away from zero\n  if ($value\
    \ % 1 == 0) {\n    $value = round($value, 0);\n  }\n  return $value;\n}\n", " \
    \ // Convert the value to a float.\n  $value = floatval($value);\n  // If the\
    \ value is equidistant from two integers, round it away from zero.\n  if ($value\
    \ == round($value)) {\n    return round($value);\n  }\n  // If the value is equidistant\
    \ from two integers, round it toward the integer.\n  if ($value == round($value,\
    \ 0)) {\n    return round($value, 0);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 1)) {\n    return round($value, 1);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 2)) {\n    return round($value, 2);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 3)) {\n    return round($value, 3);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 4)) {\n    return round($value, 4);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 5)) {\n    return round($value, 5);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 6)) {\n    return round($value, 6);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 7)) {\n    return round($value, 7);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 8)) {\n    return round($value, 8);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 9)) {\n    return round($value, 9);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 10)) {\n    return round($value, 10);\n  }\n  // If the value is equidistant\
    \ from two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 11)) {\n    return round($value, 11);\n  }\n  // If the value is equidistant\
    \ from two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 12)) {\n    return round($value, 12);\n  }\n  // If the value is equidistant\
    \ from two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 13)) {\n    return round($value, 13);\n  }\n  // If the value is ", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n\
    \    $closest_integer++;\n    if ($closest_integer == $value) {\n      return\
    \ $closest_integer;\n    }\n  }\n  return $closest_integer;\n}\n", "  return round($value);\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n  $closest_integer\
    \ = ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n  return $closest_integer;\n\
    }", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n    $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n    return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  // If the number is equidistant from\
    \ two integers, round it away from zero.\n  if (abs($value - round($value)) <\
    \ abs($value - round($value + 1))) {\n    return round($value);\n  }\n  return\
    \ round($value + 1);\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($value - floor($value)) < 0.000001 ? $value : floor($value);\n\
    \  return $closest_integer;\n}\n", "  $value = floatval($value);\n  $closest =\
    \ null;\n  $closestDiff = null;\n  foreach (array_reverse(range(0, $value)) as\
    \ $i) {\n    $diff = $value - $i;\n    if ($closestDiff === null || $diff < $closestDiff)\
    \ {\n      $closestDiff = $diff;\n      $closest = $i;\n    }\n  }\n  return $closest;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value ? $value : $closest_integer);\n  while ($closest_integer\
    \ - $value >= 1) {\n    $closest_integer = ($closest_integer - $value) + $value;\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > $value ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  foreach (range(1, $value) as $i) {\n    $closest_integer = $i;\n\
    \    if (abs($value - $i) < abs($value - $closest_integer)) {\n      $closest_integer\
    \ = $i;\n    }\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > $value ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > $value ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer == $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > 0 ? $closest_integer : 0;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}", "  // If the number is equidistant from\
    \ two integers, round it away from zero.\n  if ($value % 2 == 0) {\n    $value\
    \ = round($value / 2);\n  }\n\n  // If the number is equidistant from three integers,\
    \ round it away from zero.\n  if ($value % 3 == 0) {\n    $value = round($value\
    \ / 3);\n  }\n\n  return $value;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer < $value ? $value : $closest_integer);\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < $value && $closest_integer > 0) {\n    $closest_integer\
    \ = ($closest_integer + $value) / 2;\n  }\n  return $closest_integer;\n}", " \
    \ $value = floatval($value);\n  $diff = $value - floor($value);\n  if ($diff <\
    \ 0) {\n    return floor($value);\n  }\n  return ceil($value);\n}\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value <=\
    \ $closest_integer) ? $value : $closest_integer;\n  while ($closest_integer ==\
    \ $value) {\n    $closest_integer = ($closest_integer + 1) < $value ? $closest_integer\
    \ + 1 : 0;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer > $value)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}", "    $value =\
    \ floatval($value);\n    $closest = round($value, 0);\n    if ($closest == $value)\
    \ {\n        return $value;\n    }\n    $difference = $value - $closest;\n   \
    \ if ($difference < 0) {\n        return $closest;\n    }\n    return $closest\
    \ + 1;\n}", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ == $value && $closest_integer > 0) {\n    $closest_integer -= 1;\n  }\n  return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  while ($closest_integer > 0 && $closest_integer < PHP_INT_MAX) {\n    $closest_integer\
    \ = floor($closest_integer);\n  }\n  return $closest_integer;\n}\n", "    $value\
    \ = abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n    $closest_integer =\
    \ ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n    return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  // Convert the value to a float and\
    \ round it to the nearest integer.\n  $value = floatval($value);\n  $value = round($value);\n\
    \n  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value + 1) {\n    $value = $value - 1;\n  }\n\n  return $value;\n\
    }\n", "  return round($value);\n}", "  $value = abs($value);\n  $closest = null;\n\
    \  $closestDiff = null;\n  foreach ($integers as $integer) {\n    $diff = $value\
    \ - $integer;\n    if ($diff < $closestDiff) {\n      $closestDiff = $diff;\n\
    \      $closest = $integer;\n    }\n  }\n  return $closest;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value <=\
    \ $closest_integer) ? $value : $closest_integer;\n  $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest = null;\n  $closestDiff = null;\n \
    \ foreach ($integers as $integer) {\n    $diff = $value - $integer;\n    if ($diff\
    \ < $closestDiff) {\n      $closestDiff = $diff;\n      $closest = $integer;\n\
    \    }\n  }\n  return $closest;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution,\
    \ but I wonder how it compares to other solutions posted here?\n<|/ c |>\n<| c\
    \ |>\nI like it too, but I wonder how it compares to other solutions posted here?\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted here?\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it compares\
    \ to other solutions posted here?\n<|/ c |>\n<| c |>\nI like it too, but I wonder\
    \ how it compares to other solutions posted here?\n<|/ c |>\n<| a tags=php,math,algorithm\
    \ |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n\
    \    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n\
    \    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n \
    \   15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n  \
    \  20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 => 24,\n   \
    \ 25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n    30\
    \ => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n    35 =>\
    \ 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n\
    \    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n \
    \   46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n    50 => 50,\n  \
    \  51 => 5", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < PHP_INT_MAX) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value ? $value : $closest_integer);\n\
    \  while ($closest_integer == $value && $closest_integer > 0) {\n    $closest_integer\
    \ -= 1;\n  }\n  return $closest_integer;\n}\n", "  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n", "  // If the given value is a string, parse\
    \ it to a float.\n  $value = floatval($value);\n  // If the given value is a float,\
    \ return it.\n  if ($value == $value) {\n    return $value;\n  }\n  // If the\
    \ given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $value) {\n \
    \   return $value;\n  }\n  // If the given value is a string, parse it to a float.\n\
    \  $value = floatval($value);\n  // If the given value is a float, return it.\n\
    \  if ($value == $value) {\n    return $value;\n  }\n  // If the given value is\
    \ a string, parse it to a float.\n  $value = floatval($value);\n  // If the given\
    \ value is a float, return it.\n  if ($value == $value) {\n    return $value;\n\
    \  }\n  // If the given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $value) {\n \
    \   return $value;\n  }\n  // If the given value is a string, parse it to a float.\n\
    \  $value = floatval($value);\n  // If the given value is a float, return it.\n\
    \  if ($value == $value) {\n    return $value;\n  }\n  // If the given value is\
    \ a string, parse it to a float.\n  $value = floatval($value);\n  // If the given\
    \ value is a float, return it.\n  if ($value == $value) {\n    return $value;\n\
    \  }\n  // If the given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $value) {\n \
    \   return $value;\n  }\n  // If the given value is a string, parse it to a float.\n\
    \  $value = floatval($value);\n  // If the given value is a float, return it.\n\
    \  if ($value == $value) {\n    return $value;\n  }\n  // If the given value is\
    \ a string, parse it to a float.\n  $value = floatval($value);\n  // If the given\
    \ value is a float, return it.\n  if ($value == $value) {\n    return $value;\n\
    \  }\n  // If the given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $value) {\n \
    \   return $value;\n  }\n  // If the given value is a string, parse it to a float.\n\
    \  $value = floatval($value);\n  // If the given value is a float, return it.\n\
    \  if ($value == $value) {\n    return $value;\n  }\n  // If the given value is\
    \ a string, parse it to a float.\n  $value = floatval($value);\n  // If the given\
    \ value is a float, return it.\n  if ($value == $", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs\
    \ = abs($closestDistance);\n  foreach ($values as $v) {\n    $distance = $v -\
    \ $value;\n    if ($closestDistance === null || $distance < $closestDistanceAbs)\
    \ {\n      $closest = $v;\n      $closestDistance = $distance;\n    }\n  }\n \
    \ return $closest;\n}", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ while ($closest_integer == $value) {\n    $closest_integer = ($closest_integer\
    \ + 1);\n  }\n  return $closest_integer;\n}", "  // Convert the value to a float\n\
    \  $value = floatval($value);\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value % 1 == 0) {\n    return round($value);\n\
    \  }\n  // If the value is equidistant from two integers, round it away from zero\n\
    \  else {\n    return round($value, 0);\n  }\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ > $value ? $value : $closest_integer;\n  return $closest_integer;\n}\n", " \
    \   $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $closest_integer : round($closest_integer -\
    \ $closest_integer);\n    return $closest_integer;\n}", "  // If the number is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == floor($value))\
    \ {\n    return $value;\n  }\n\n  // If the number is equidistant from three integers,\
    \ round it away from zero.\n  if ($value == floor($value / 3)) {\n    return $value\
    \ * 3;\n  }\n\n  // If the number is equidistant from four integers, round it\
    \ away from zero.\n  if ($value == floor($value / 4)) {\n    return $value * 4;\n\
    \  }\n\n  // If the number is equidistant from five integers, round it away from\
    \ zero.\n  if ($value == floor($value / 5)) {\n    return $value * 5;\n  }\n\n\
    \  // If the number is equidistant from six integers, round it away from zero.\n\
    \  if ($value == floor($value / 6)) {\n    return $value * 6;\n  }\n\n  // If\
    \ the number is equidistant from seven integers, round it away from zero.\n  if\
    \ ($value == floor($value / 7)) {\n    return $value * 7;\n  }\n\n  // If the\
    \ number is equidistant from eight integers, round it away from zero.\n  if ($value\
    \ == floor($value / 8)) {\n    return $value * 8;\n  }\n\n  // If the number is\
    \ equidistant from nine integers, round it away from zero.\n  if ($value == floor($value\
    \ / 9)) {\n    return $value * 9;\n  }\n\n  // If the number is equidistant from\
    \ ten integers, round it away from zero.\n  if ($value == floor($value / 10))\
    \ {\n    return $value * 10;\n  }\n\n  // If the number is equidistant from eleven\
    \ integers, round it away from zero.\n  if ($value == floor($value / 11)) {\n\
    \    return $value * 11;\n  }\n\n  // If the number is equidistant from twelve\
    \ integers, round it away from zero.\n  if ($value == floor($value / 12)) {\n\
    \    return $value * 12;\n  }\n\n  // If the number is equidistant from thirteen\
    \ integers, round it away from zero.\n  if ($value == floor($value / 13)) {\n\
    \    return $value * 13;\n  }\n\n  // If the number is equidistant from fourteen\
    \ integers, round it away from zero.\n  if ($value == floor($value / 14)) {\n\
    \    return $value * 14;\n  }\n\n  // If the number is equidistant from fifteen\
    \ integers, round it away from zero.\n  if ($value == floor($value / 15)) {\n\
    \    return $value * 15;\n  }\n\n  // If the number is equidistant from sixteen\
    \ integers, round it away from zero.\n  if ($value == floor($", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n", "  // Convert the value to a float and round it down\n\
    \  $value = floatval($value);\n  $value = round($value, 0);\n\n  // If the value\
    \ is equidistant from two integers, round it away from zero\n  if ($value == intval($value))\
    \ {\n    $value = intval($value);\n  }\n\n  return $value;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0 &&\
    \ $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer == $value) {\n    $closest_integer = $value\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value - floor($value)) < 0.0 ? floor($value)\
    \ : ceil($value);\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($value - $closest_integer) < 0.5 ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}", "  return round($value / $value, 0) * $value;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  foreach (range(1,\
    \ $value) as $i) {\n    if (abs($value - $i) < $closest_integer) {\n      $closest_integer\
    \ = $i;\n    }\n  }\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value <=\
    \ $closest_integer) ? $value : $closest_integer;\n  $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }", "  // Convert $value to a float.\n  $value = floatval($value);\n\n  // If\
    \ the value is negative, return $value - $closest_integer($value).\n  if ($value\
    \ < 0) {\n    return $value - closest_integer($value);\n  }\n\n  // If the value\
    \ is zero, return zero.\n  if ($value == 0) {\n    return 0;\n  }\n\n  // If the\
    \ value is positive, return $closest_integer($value).\n  return closest_integer($value);\n\
    }\n", "  return round($value);\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  foreach ($GLOBALS['db']->field_types as $field_type => $field_type_meta)\
    \ {\n    if ($field_type_meta->is_numeric) {\n      $field_type_meta->is_numeric\
    \ = 1;\n      $field_type_meta->is_integer = 1;\n      $field_type_meta->is_float\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ? $value\
    \ : $closest_integer;\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ? $value\
    \ : $closest_integer;\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n", "  return round($value);\n}", "    $value = abs($value);\n\
    \    $closest_integer = $value;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n    $closest_integer = ($closest_", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach ($GLOBALS['db']->fetchAll(\"SELECT `id`\
    \ FROM `{$GLOBALS['db']->prefix}numbers` WHERE `number` = '{$value}'\") as $row)\
    \ {\n    $distance = $value - $row['number'];\n    if ($distance < $closest_integer)\
    \ {\n      $closest_integer = $distance;\n    }\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer == 0 ? 1 : $closest_integer;\n  while ($closest_integer <\
    \ $value) {\n    $closest_integer = $closest_integer * 10;\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value "]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
