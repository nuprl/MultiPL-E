name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  return floor($number * 100) / 100;\n}", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n\
    \        $number = floor($number);\n        $number = $number - $decimals;\n \
    \   }\n    return $number;\n}\n", "    $parts = explode('.', $number);\n    return\
    \ $parts[1];\n}\n", "    $parts = explode('.', $number);\n    return $parts[0]\
    \ . '.' . substr($parts[1], 0, strlen($parts[1]) - 1);\n}", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number;\n}\n", " \
    \ $decimals = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    $integer\
    \ = floor($number);\n    $integer = $integer - ($integer % 1);\n    return $integer\
    \ . $decimals;\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    return round($number, $decimals);\n}\n", "  $decimals = strlen($number) -\
    \ strrpos($number, '.');\n  return round($number, $decimals);\n}\n", "    $parts\
    \ = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1], 0,\
    \ -1);\n}\n", "    $parts = explode('.', $number);\n    return $parts[1];\n}\n",
  "    $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ -1);\n}\n</code>\n<|/ a tags=php,numbers,rounding |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `truncate_number(-0.5)`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n\
    <|/ c |>\n<| a tags=php,numbers,rounding |>\n<code>", "  $decimals = strlen($number)\
    \ - strrpos($number, '.');\n  return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n  \
    \  $decimals = strlen($decimals);\n    $decimals = $decimals > 0 ? $decimals :\
    \ 0;\n    $integer = floor($number);\n    return $integer + ($decimals > 0 ? $decimals\
    \ : 0);\n}\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return\
    \ round($number, $decimals);\n}\n", "  return intval($number * 100) / 100;\n}\n",
  "    $decimals = strlen($number) - strrpos($number, '.');\n    return $decimals\
    \ > 0 ? substr($number, 0, $decimals) : $number;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number;\n}\n", " \
    \   $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    $decimals = $decimals\
    \ == 0 ? 1 : $decimals;\n    return $decimals;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals > 0) {\n        return substr($number,\
    \ 0, $decimals);\n    }\n    return $number;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n\
    \    return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n  }\n \
    \ return $number;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    $decimals = $decimals > 0 ? $decimals\
    \ : 0;\n    $integer = floor($number);\n    return $integer + $decimals;\n}\n",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $decimals % 2\
    \ ? $number - ceil($number) : $number;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  return round($number, $decimals);\n}\n", "  $decimals =\
    \ preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - ($number % 1);\n  }\n  return $number;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "  $decimals = 1;\n  $integer = floor($number);\n  if ($integer\
    \ === 0) {\n    return 0;\n  }\n  while ($integer % 10 === 0) {\n    $decimals++;\n\
    \    $integer /= 10;\n  }\n  return $decimals;\n}\n", "  $number = floor($number);\n\
    \  $decimals = abs($number - $number);\n  return $number - $decimals;\n}\n", " \
    \   $decimal_part = floor($number);\n    $remainder = $number - $decimal_part;\n\
    \    return $decimal_part + $remainder;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ > 0 ? $decimals : 0;\n    return $number - intval($number * pow(10, -$decimals));\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n", "  $parts = explode('.', $number);\n  return $parts[1];\n}\n",
  "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return $number;\n}\n", "    $decimals = 1;\n\
    \    $integer = floor($number);\n    if ($integer != $number) {\n        $decimals\
    \ = strlen($number) - strlen($integer);\n    }\n    return $integer + $decimals\
    \ / 2;\n}\n", "  return intval($number * 100) / 100;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n  \
    \  $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals\
    \ = $decimals - 1;\n    }\n    return $number;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return substr($number, 0, $decimals);\n}\n", " \
    \ $decimals = strlen($number) - strrpos($number, '.');\n  return substr($number,\
    \ 0, $decimals);\n}\n", "    $parts = explode('.', $number);\n    return $parts[0]\
    \ . '.' . substr($parts[1], -1);\n}\n", "    $parts = explode('.', $number);\n\
    \    $decimals = $parts[1];\n    if ($decimals == '0') {\n        return $parts[0];\n\
    \    }\n    return $parts[0] . '.' . substr($decimals, 0, -1);\n}\n", "    $decimal_part\
    \ = floor($number);\n    $decimal_part = $decimal_part - ($decimal_part % 1);\n\
    \    return $decimal_part;\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer === 0) {\n        return 0;\n    }\n    if ($integer > 0 &&\
    \ $number < 1) {\n        $decimals = 0;\n    }\n    return $integer + $decimals;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    return $number - $decimals;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return substr($number, 0, $decimals);\n}\n", " \
    \ return intval($number);\n}\n", "    $decimals = preg_replace('/0+$/', '', $number);\n\
    \    $decimals = strlen($decimals);\n    $decimals = $decimals > 0 ? $decimals\
    \ : 1;\n    return $number - intval($number * pow(10, -$decimals));\n}\n", " \
    \   $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals >\
    \ 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n", "    $parts = explode('.', $number);\n    return $parts[0] .\
    \ '.' . substr($parts[1], 0, -1);\n}\n", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n\
    \        $number = floor($number);\n        $number = $number - ($number % 1);\n\
    \        $number = $number / pow(10, $decimals);\n    }\n    return $number;\n\
    }\n", "    if ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n", "   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "  return floor($number * 100) / 100;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ - strlen($decimals % 2);\n    return $decimals % 2 ? $number - ceil($number\
    \ / 2) * pow(2, $decimals) : $number / pow(2, $decimals);\n}\n", "  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    $decimals = $decimals - 1;\n  }\n  return $number - ($number\
    \ % 1);\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n   \
    \ return $number > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n", "    $decimals\
    \ = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    return $number > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n", "    $parts\
    \ = explode('.', $number);\n    $decimals = $parts[1];\n    $decimals = strlen($decimals)\
    \ < 2 ? '0' . $decimals : $decimals;\n    return $parts[0] . '.' . $decimals;\n\
    }\n", "    $parts = explode('.', $number);\n    return $parts[1];\n}\n", "  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n",
  "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  return $decimals > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n", "  return\
    \ floor($number * 100) / 100;\n}", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n  \
    \      $decimals = $decimals - 1;\n    }\n    return $number;\n}\n", "    $parts\
    \ = explode('.', $number);\n    return $parts[1];\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n\
    \        $number = floor($number);\n        $number = $number - $decimals;\n \
    \       $number = round($number);\n    }\n    return $number;\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return floor($number);\n}\n", "    $decimals\
    \ = 1;\n    $integer = floor($number);\n    if ($integer != $number) {\n     \
    \   $decimals = strlen($number) - strlen($integer);\n    }\n    return $integer\
    \ . '.' . str_pad($decimals, 3, '0', STR_PAD_LEFT);\n}\n", "    if ($number <\
    \ 1) {\n        return 0;\n    }\n    return floor($number);\n}\n", "    $parts\
    \ = explode('.', $number);\n    return $parts[1];\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals > 0) {\n        return substr($number,\
    \ 0, $decimals);\n    }\n    return $number;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return round($number, $decimals);\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n", "   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n", "  $decimals = preg_replace('/0+$/', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "    $parts = explode('.', $number);\n    return\
    \ $parts[1];\n}\n", "    $parts = explode('.', $number);\n    return $parts[0]\
    \ . '.' . substr($parts[1], 0, -1);\n}\n", "    if ($number < 1) {\n        return\
    \ 0;\n    }\n    $decimals = strlen($number) - strrpos($number, '.');\n    return\
    \ round($number, $decimals);\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return round($number, $decimals);\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return round($number, $decimals);\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        return $number - intval($number);\n    }\n    return $number;\n}\n",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = max($decimals, 0);\n    return $number - $decimals;\n}\n", " \
    \ $decimals = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n\
    }\n", "    $parts = explode('.', $number);\n    return $parts[1];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$number = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789';\n\
    $number = preg_replace('/[^0-9\\.]/', '', $number);\n$number = preg_replace('/\\\
    .", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n        $number = $number / pow(10, $decimals);\n\
    \    }\n    return $number;\n}\n", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n  \
    \      return $number - ($number % 1);\n    } else {\n        return 0;\n    }\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  $decimals = $decimals > 0 ? $decimals : 0;\n  return $decimals;\n}\n", "  \
    \  $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        $decimals\
    \ = floor($number - $integer);\n    }\n    return $integer + $decimals;\n}\n",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n", "    $parts = explode('.', $number);\n    return $parts[1];\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work correctly for negative\
    \ numbers. Try `truncate_number(-5)`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: It works for negative numbers. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: It works for negative numbers. Try it yourself.\n<|/ c |>\n\
    <| c |>\n: It works for negative numbers. Try it yourself.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "    $decimals = strlen($number) - strrpos($number, '.');\n   \
    \ if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n    }\n\
    \    return $number;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        return\
    \ $number - $decimals;\n    }\n    return 0;\n}\n", "    if ($number < 1) {\n\
    \        return 0;\n    }\n\n    $factor = 1;\n    $decimals = 0;\n\n    if ($number\
    \ > 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n    if ($number > 1000) {\n        $factor =\
    \ 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number * $factor);\n\
    \n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals = 1;\n\
    \    }\n\n    $number = floor($number * $factor);\n\n    if ($number > 1000) {\n\
    \        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number\
    \ * $factor);\n\n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals\
    \ = 1;\n    }\n\n    $number = floor($number * $factor);\n\n    if ($number >\
    \ 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n    if ($number > 1000) {\n        $factor =\
    \ 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number * $factor);\n\
    \n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals = 1;\n\
    \    }\n\n    $number = floor($number * $factor);\n\n    if ($number > 1000) {\n\
    \        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number\
    \ * $factor);\n\n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals\
    \ = 1;\n    }\n\n    $number = floor($number * $factor);\n\n    if ($number >\
    \ 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n    if ($number > 1000) {\n        $factor =\
    \ 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number * $factor);\n\
    \n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals = 1;\n\
    \    }\n\n    $number = floor($number * $factor);\n\n    if ($number > 1000) {\n\
    \        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number\
    \ * $factor);\n\n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals\
    \ = 1;\n    }\n\n    $number = floor($number * $factor);\n\n    if ($number >\
    \ 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n    if ($number > 1000) {\n        $factor =\
    \ 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number * $factor);\n\
    \n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    $parts = explode('.', $number);\n    return $parts[1];\n}\n", "   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number - intval($number);\n}\n", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n  \
    \      return $number - $decimals;\n    }\n    return $number;\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return\
    \ round($number, $decimals);\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "    $decimal_part = floor($number);\n    $decimal_part\
    \ = $decimal_part - ($decimal_part % 1);\n    return $decimal_part;\n}\n", " \
    \   $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n        $number = $number / pow(10, $decimals);\n\
    \    }\n    return $number;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "  return floor($number * 100) / 100;\n}\n",
  "    $decimals = preg_replace('/0+$/', '', $number);\n    return $number - $decimals;\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $number % 1;\n    } else {\n\
    \        return $number;\n    }\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ > 0 ? $decimals : 0;\n    $integer = floor($number);\n    return $integer +\
    \ ($decimals / pow(10, $decimals));\n}\n", "  $decimals = preg_replace('/\\./',\
    \ '', $number);\n  return $number - $decimals;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number - ($number\
    \ % 1);\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n   \
    \ if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n    }\n\
    \    return $number;\n}\n", "    if ($number < 1) {\n        return 0;\n    }\n\
    \    $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n", "  $decimals = preg_replace('/0+$/', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  $decimals = $decimals - strlen(ltrim($decimals));\n\
    \  return $decimals;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return round($number, $decimals);\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return substr($number, 0, $decimals);\n}\n", " \
    \ $decimals = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n", "  return floor($number * 100) / 100;\n}", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n", "   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $number - $decimals;\n\
    }\n", "  $decimals = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return round($number,\
    \ $decimals);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n  \
    \  $decimals = strlen($decimals);\n    $decimals = $decimals > 0 ? $decimals :\
    \ 0;\n    return $number - intval($number * pow(10, -$decimals));\n}\n", "   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n", "  return floor($number * 100) / 100;\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return round($number, $decimals);\n    }\n\
    \    return $number;\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  $decimals = $decimals > 0 ? $decimals : 0;\n  return $number - intval($number);\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  if ($decimals > 0) {\n    return $number - $number % 1;\n  } else {\n    return\
    \ 0;\n  }\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals = $decimals\
    \ - 1;\n    }\n    return $number - intval($number);\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals > 0) {\n        return substr($number,\
    \ 0, $decimals);\n    }\n    return $number;\n}\n", "  $decimals = 1;\n  $integer\
    \ = floor($number);\n  if ($integer === 0) {\n    return 0.0;\n  }\n  while ($integer\
    \ % 10 === 0) {\n    $decimals++;\n    $integer /= 10;\n  }\n  return $number\
    \ - $integer * pow(10, $decimals);\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[0] . '.' . substr($parts[1], 0, 1);\n}\n", "    $decimals =\
    \ strlen($number) - strrpos($number, '.');\n    return $number > 0 ? substr($number,\
    \ 0, $decimals) : 0.0;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "  return floor($number * 100) / 100;\n}\n", "  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? $number - $integer\
    \ : 0;\n}\n", "    $parts = explode('.', $number);\n    return $parts[0] . '.'\
    \ . substr($parts[1], 0, -1);\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return round($number, $decimals);\n}\n", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    return $number - $decimals;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "  return floor($number * 100) / 100;\n}\n", "  return floor($number\
    \ * 10) / 10;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ intval($number) - intval($decimals);\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ > 0 ? $decimals : 0;\n    return $number - intval($number * pow(10, -$decimals));\n\
    }\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return round($number,\
    \ $decimals);\n}\n", "  $number = floor($number);\n  $decimals = abs($number -\
    \ $number);\n  return $number - $decimals;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return substr($number, 0, $decimals);\n}\n", " \
    \   $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals >\
    \ 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a tags=php,rounding,math |>\n<| a tags=php,rounding,math |>\n\
    <code>", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  if ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return\
    \ $number;\n}\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return\
    \ floor($number * pow(10, $decimals)) / pow(10, $decimals);\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return round($number, $decimals);\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n", "    $parts = explode('.', $number);\n    return $parts[0]\
    \ . '.' . substr($parts[1], 0, 1);\n}\n", "    $parts = explode('.', $number);\n\
    \    $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0)\
    \ {\n        return $integer . '.' . substr($decimals, 0, 1);\n    }\n    return\
    \ $integer;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals = $decimals\
    \ - 1;\n    }\n    return $number;\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n", "  return intval($number * 100) / 100;\n}\n</code>\n<|/ a tags=php,number-formatting\
    \ |>\n<| a |>\n<code>", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    $decimals = $decimals > 0 ? $decimals\
    \ : 0;\n    return $number - $decimals;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        return $number - intval($number);\n    }\n    return $number;\n}\n",
  "  $decimals = strlen($number) - strrpos($number, '.');\n  return $decimals > 0\
    \ ? substr($number, 0, $decimals) : $number;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n", " \
    \   $parts = explode('.', $number);\n    return $parts[1];\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return round($number, $decimals);\n\
    }\n", "    $decimal_part = floor($number);\n    $whole_part = $number - $decimal_part;\n\
    \    if ($whole_part < 0) {\n        $whole_part += 1;\n        $decimal_part\
    \ -= 1;\n    }\n    return $decimal_part;\n}\n", "    $decimals = 1;\n    $integer\
    \ = floor($number);\n    if ($integer === 0) {\n        return 0;\n    }\n   \
    \ if ($integer > $number) {\n        $decimals = $integer - $number;\n    }\n\
    \    return $decimals;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        return\
    \ $number - intval($number);\n    }\n    return $number;\n}\n", "  $decimals =\
    \ 1;\n  $integer = floor($number);\n  if ($integer === 0) {\n    return 0;\n \
    \ }\n  if ($integer > 0 && $number < 1) {\n    return $decimals;\n  }\n  if ($integer\
    \ > 0 && $number >= 1) {\n    return $integer + $decimals;\n  }\n}\n", "    if\
    \ ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number) -\
    \ strrpos($number, '.');\n    return round($number, $decimals);\n}\n", "    $parts\
    \ = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1], -1);\n\
    }\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return $number\
    \ < 1 ? 1 : $decimals;\n}\n", "  return floor($number * 100) / 100;\n}\n", " \
    \   $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals >\
    \ 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "  $parts = explode('.', $number);\n  return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals = $decimals\
    \ - 1;\n    }\n    return $number;\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n", "  $decimals =\
    \ 1;\n  $integer = floor($number);\n  if ($integer > $number) {\n    $decimals\
    \ = $integer - $number;\n    $integer = 0;\n  }\n  return $integer . '.' . str_pad($decimals,\
    \ 3, '0', STR_PAD_LEFT);\n}\n", "    if ($number < 1) {\n        return 0;\n \
    \   }\n    $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n", "    $decimal_part = floor($number);\n    $decimal_part =\
    \ abs($decimal_part);\n    $int_part = floor($number - $decimal_part);\n    return\
    \ $decimal_part + $int_part;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return $number\
    \ - intval($number);\n  }\n  return $number;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  return $number - $decimals;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  return $number - $decimals;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "  return floor($number * 10) / 10;\n}\n", "  $decimals =\
    \ preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  $decimals\
    \ = $decimals > 0 ? $decimals : 0;\n  return $number - intval($number * pow(10,\
    \ -$decimals));\n}\n", "    $decimals = preg_replace('/0+$/', '', $number);\n\
    \    return $number - $decimals;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
