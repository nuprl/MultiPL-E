name: HumanEval_102_choose_num
language: php
prompt: "<?php\n// This function takes two positive numbers x and y and returns the\n\
  // biggest even integer number that is in the range [x, y] inclusive. If \n// there's\
  \ no such number, then the function should return -1.\n// For example:\n// choose_num(12,\
  \ 15) = 14\n// choose_num(13, 12) = -1\nfunction choose_num($x, $y) {\n"
tests: "function candidate(...$args) {\n    return choose_num(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(12, 15) !== 14) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(13, 12) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(33, 12354) !== 12354) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5234, 5233) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 29) !== 28) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(27, 10) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(7, 7) !== -1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(546, 546) !== 546) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $evens = array();\n\
    \    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n \
    \           $evens[] = $i;\n        }\n    }\n    \n    if (count($evens) == 0)\
    \ {\n        return -1;\n    }\n    \n    return max($evens);\n}\n", "    $evens\
    \ = $odds = $min = $max = $x;\n    \n    // Find out which number is bigger and\
    \ start counting at that number\n    if ($x > $y) {\n        $min = $x;\n    \
    \    $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    \n    // Find the smallest even number in the range\n    while ($min % 2\
    \ == 0) {\n        $evens++;\n        $min++;\n    }\n    \n    // Find the largest\
    \ odd number in the range\n    while ($max % 2 == 1) {\n        $odds++;\n   \
    \     $max--;\n    }\n    \n    // If there are no even or odd numbers in the\
    \ range, return -1\n    if ($evens == 0 && $odds == 0) {\n        return -1;\n\
    \    }\n    \n    // If there are an even number of even numbers in the range,\
    \ return the \n    // smallest even number in the range\n    if ($evens == 0)\
    \ {\n        return $min;\n    }\n    \n    // If there are an odd number of odd\
    \ numbers in the range, return the \n    // largest odd number in the range\n\
    \    if ($odds == 0) {\n        return $max;\n    }\n    \n    // If there are\
    \ an even number of odd numbers in the range, return the \n    // smallest odd\
    \ number in the range\n    if ($evens == $odds) {\n        return $min;\n    }\n\
    \    \n    // If there are an odd number of even numbers in the range, return\
    \ the \n    // largest even number in the range\n    return $max;\n}\n", "   \
    \ if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n     \
    \   $min = $y;\n        $max = $x;\n    }\n    \n    while ($min <= $max) {\n\
    \        $mid = $min + ($max - $min) / 2;\n        if ($mid % 2 == 0) {\n    \
    \        $min = $mid + 1;\n        } else {\n            $max = $mid;\n      \
    \  }\n    }\n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n\n    $even = 0;\n    $odd = 0;\n\n    do {\n        $even++;\n        $x\
    \ = $x - 2;\n        $y = $y - 2;\n    } while ($x >= $y);\n\n    do {\n     \
    \   $odd++;\n        $x = $x + 2;\n        $y = $y + 2;\n    } while ($x <= $y);\n\
    \n    if ($even > $odd) {\n        return $min;\n    } else {\n        return\
    \ $max;\n    }\n}\n", "    $even = 0;\n    $odd = 0;\n    \n    if ($x >= $y)\
    \ {\n        $even = $x;\n        $odd = $y;\n    } else {\n        $even = $y;\n\
    \        $odd = $x;\n    }\n    \n    if ($even > $odd) {\n        $even = $even;\n\
    \    } else {\n        $odd = $odd;\n    }\n    \n    if ($even % 2 == 0) {\n\
    \        return $even;\n    } else {\n        return $odd;\n    }\n}\n", "   \
    \ if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n     \
    \   $min = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n \
    \       $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min\
    \ = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n\
    \    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\n    while\
    \ ($min <= $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 ==\
    \ 0) {\n            $min = $mid + 1;\n        } else {\n            $max = $mid;\n\
    \        }\n    }\n\n    return $min;\n}", "    if ($x < $y) {\n        $min =\
    \ $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n\
    \    }\n    \n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n \
    \       if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid;\n        }\n    }\n    \n    return $min;\n}\n", " \
    \   $evens = array();\n    $odds = array();\n    for($i = $x; $i <= $y; $i++)\
    \ {\n        if($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n\
    \            $odds[] = $i;\n        }\n    }\n    sort($evens);\n    sort($odds);\n\
    \    for($i = 0; $i < count($evens); $i++) {\n        if($evens[$i] > $odds[$i])\
    \ {\n            return $evens[$i];\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if $x is greater than $y\n<|/ c\
    \ |>\n<| c |>\n: It works if $x is greater than $y, and if $x is less than $y,\
    \ it returns $y\n<|/ c |>\n<| c |>\n: It works if $x is greater than $y, and if\
    \ $x is less than $y, it returns $y\n<|/ c |>\n<| c |>\n: It works if $x is greater\
    \ than $y, and if $x is less than $y, it returns $y\n<|/ c |>\n<| c |>\n: It works\
    \ if $x is greater than $y, and if $x is less than $y, it returns $y\n<|/ c |>\n\
    <| a |>\n<code>", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n\
    \    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $even\
    \ = 0;\n    \n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n     \
    \       $even++;\n        }\n        $min++;\n    }\n    \n    if ($even > 0)\
    \ {\n        return $max;\n    } else {\n        return -1;\n    }\n}\n", "  \
    \  if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n    \
    \    $min = $y;\n        $max = $x;\n    }\n    $evens = array();\n    $odds =\
    \ array();\n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $evens[] = $i;\n        } else {\n            $odds[] = $i;\n\
    \        }\n    }\n    if (count($evens) > 0) {\n        return max($evens);\n\
    \    }\n    if (count($odds) > 0) {\n        return min($odds);\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if $x is greater than\
    \ $y, and $x is less than $y.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require\
    \ a loop.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require a loop.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require a loop.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n<?php", "    if ($x < $y) {\n        $min = $x;\n  \
    \      $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    \n    do {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0)\
    \ {\n            $min = $mid + 1;\n        } else {\n            $max = $mid -\
    \ 1;\n        }\n    } while ($min <= $max);\n    \n    return $min;\n}\n", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    $result = -1;\n    while ($min\
    \ <= $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n\
    \            $result = $mid;\n            break;\n        }\n        if ($mid\
    \ > $max) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid - 1;\n        }\n    }\n    return $result;\n}", "    $evens = array();\n\
    \    $odds = array();\n    \n    // Find all even numbers between x and y\n  \
    \  for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $evens[]\
    \ = $i;\n        }\n    }\n    \n    // Find all odd numbers between x and y\n\
    \    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 1) {\n           \
    \ $odds[] = $i;\n        }\n    }\n    \n    // If there are no even numbers between\
    \ x and y, then return -1\n    if (empty($evens)) {\n        return -1;\n    }\n\
    \    \n    // If there are no odd numbers between x and y, then return -1\n  \
    \  if (empty($odds)) {\n        return -1;\n    }\n    \n    // Return the biggest\
    \ even number that is in the range [x, y]\n    return max($evens);\n}\n", "  \
    \  if ($x <= $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    while ($min <= $max) {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n  \
    \  }\n    return $min;\n}\n", "    $evens = array();\n    $odds = array();\n \
    \   for($i = $x; $i <= $y; $i++) {\n        if($i % 2 == 0) {\n            $evens[]\
    \ = $i;\n        } else {\n            $odds[] = $i;\n        }\n    }\n    sort($evens);\n\
    \    sort($odds);\n    foreach($evens as $even) {\n        if($even > $odds[0])\
    \ {\n            return $even;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try choose_num(12, 15).\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. I tested it before posting it. What do you mean\
    \ by \"doesn't work\"? It returns 14 for `choose_num(12, 15)`.\n<|/ c |>\n<| c\
    \ |>\nIt returns 14 for choose_num(12, 15) but 14 is not the biggest even number\
    \ in the range [12, 15]. 14 is in the range [12, 14] so choose_num(12, 15) should\
    \ return 14. Your code returns 14.\n<|/ c |>\n<| c |>\n: Yes, I see what you mean.\
    \ I've updated my answer to fix the bug.\n<|/ c |>\n<| c |>\n: I updated my answer\
    \ again to fix the bug that I mentioned in my comment above. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    if ($x < $y) {\n \
    \       $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n   \
    \     $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid = ($min\
    \ + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n \
    \       } else {\n            $max = $mid;\n        }\n    }\n    \n    return\
    \ $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while ($min\
    \ < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n\
    \            $min = $mid + 1;\n        } else {\n            $max = $mid;\n  \
    \      }\n    }\n    return $min;\n}\n", "    $evens = array();\n    $odds = array();\n\
    \    \n    // Find all even numbers between x and y\n    for ($i = $x; $i <= $y;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n        }\n\
    \    }\n    \n    // Find all odd numbers between x and y\n    for ($i = $x; $i\
    \ <= $y; $i++) {\n        if ($i % 2 != 0) {\n            $odds[] = $i;\n    \
    \    }\n    }\n    \n    // If there are no even or odd numbers between x and\
    \ y, then return -1\n    if (count($evens) == 0 && count($odds) == 0) {\n    \
    \    return -1;\n    }\n    \n    // If there are even numbers and no odd numbers,\
    \ then return the highest even\n    if (count($evens) > 0 && count($odds) == 0)\
    \ {\n        return max($evens);\n    }\n    \n    // If there are odd numbers\
    \ and no even numbers, then return the highest odd\n    if (count($evens) == 0\
    \ && count($odds) > 0) {\n        return max($odds);\n    }\n    \n    // If there\
    \ are both even and odd numbers, then return the highest even number\n    if (count($evens)\
    \ > 0 && count($odds) > 0) {\n        return max($evens);\n    }\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThank you so much! I appreciate it!\n<|/ c |>\n<|\
    \ c |>\nNo problem! Glad I could help.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php",
  "    if ($x < $y) {\n        $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n\
    \    }\n    \n    if ($x == $y) {\n        return $x;\n    }\n    \n    $tmp =\
    \ $x;\n    $x = $y;\n    $y = $tmp;\n    \n    while ($x > $y) {\n        $x =\
    \ $x - $y;\n        $y = $y + $y;\n    }\n    \n    return $y;\n}\n", "    $evens\
    \ = array();\n    $odds = array();\n    \n    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $evens[] = $i;\n        } else {\n            $odds[] = $i;\n\
    \        }\n    }\n    \n    if (count($evens) > 0) {\n        return $evens[0];\n\
    \    } else {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThanks so much for this! I really appreciate it. I will try this out and\
    \ let you know how it goes.\n<|/ c |>\n<| c |>\nI implemented this and I got it\
    \ to work. Thanks so much for this. I really appreciate it.\n<|/ c |>\n<| c |>\n\
    I implemented this and I got it to work. Thanks so much for this. I really appreciate\
    \ it.\n<|/ c |>\n<| a tags=php,math |>\n<code>", "    if ($x <= $y) {\n      \
    \  $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max\
    \ = $x;\n    }\n    \n    $even = 0;\n    $odd = 0;\n    \n    for ($i = $min;\
    \ $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n    \
    \    } else {\n            $odd++;\n        }\n    }\n    \n    if ($even > $odd)\
    \ {\n        return $even;\n    } else {\n        return $odd;\n    }\n}", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    do {\n        $mid = ($min +\
    \ $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n   \
    \     } else {\n            $max = $mid;\n        }\n    } while ($min < $max);\n\
    \    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    $even\
    \ = 0;\n    $odd = 0;\n    do {\n        $even++;\n        $x = $x - $y;\n   \
    \     $y = $y - $x;\n    } while ($x > 0);\n    do {\n        $odd++;\n      \
    \  $x = $x - $y;\n        $y = $y - $x;\n    } while ($y > 0);\n    if ($even\
    \ > $odd) {\n        return $min;\n    } else {\n        return $max;\n    }\n\
    }\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n   \
    \ $odd = 1;\n    \n    while ($min < $max) {\n        if ($min % 2 == 0) {\n \
    \           $even++;\n        }\n        if ($max % 2 == 0) {\n            $odd++;\n\
    \        }\n        $min++;\n        $max++;\n    }\n    \n    if ($even > $odd)\
    \ {\n        return $even;\n    } else {\n        return $odd;\n    }\n}\n", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n  \
    \  }\n    \n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    \n    $even = 0;\n    \n    while ($min <= $max) {\n        if ($min\
    \ % 2 == 0) {\n            $even++;\n        }\n        $min++;\n    }\n    \n\
    \    if ($even > 0) {\n        return $min;\n    } else {\n        return -1;\n\
    \    }\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n  \
    \  } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $even =\
    \ 0;\n    \n    while ($min <= $max) {\n        $mid = ($min + $max) / 2;\n  \
    \      if ($mid % 2 == 0) {\n            $even++;\n        }\n        if ($mid\
    \ > $max) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    }\n    \n    return $even > 0 ? $min : -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if ($x < $y) {\n        $min\
    \ = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max =\
    \ $x;\n    }\n    \n    while ($min <= $max) {\n        $mid = ($min + $max) /\
    \ 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else\
    \ {\n            $max = $mid;\n        }\n    }\n    return $min;\n}\n", "   \
    \ if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n     \
    \   $min = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n    $odd = 0;\n\
    \    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    \n    if ($even > $odd) {\n        return $even;\n    } else {\n        return\
    \ $odd;\n    }\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max =\
    \ $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\n    $evens\
    \ = 0;\n    $odds = 0;\n\n    for ($i = $min; $i <= $max; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $evens++;\n        } else {\n            $odds++;\n\
    \        }\n    }\n\n    if ($evens > $odds) {\n        return $min;\n    } else\
    \ {\n        return $max;\n    }\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n\n    $evens = 0;\n    $odds = 0;\n\n    for($i = $min; $i <= $max; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $evens++;\n        } else {\n   \
    \         $odds++;\n        }\n    }\n\n    if ($evens > $odds) {\n        return\
    \ $min;\n    } else {\n        return $max;\n    }\n}\n", "    if ($x < $y) {\n\
    \        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n   \
    \ if ($x == $y) {\n        return $x;\n    }\n    \n    $evens = 0;\n    $odds\
    \ = 0;\n    \n    for ($i = $y; $i >= $x; $i--) {\n        if ($i % 2 == 0) {\n\
    \            $evens++;\n        } else {\n            $odds++;\n        }\n  \
    \  }\n    \n    if ($evens > $odds) {\n        return $y;\n    } else {\n    \
    \    return $x;\n    }\n}\n", "    if ($x < $y) {\n        $min = $x;\n      \
    \  $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n \
    \   \n    do {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0)\
    \ {\n            $min = $mid + 1;\n        } else {\n            $max = $mid;\n\
    \        }\n    } while ($min <= $max);\n    \n    return $min;\n}\n", "    if\
    \ ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    $evens = array();\n    $odds = array();\n\
    \    $result = -1;\n    while ($min <= $max) {\n        $mid = ($min + $max) /\
    \ 2;\n        if ($mid % 2 == 0) {\n            $evens[] = $mid;\n        } else\
    \ {\n            $odds[] = $mid;\n        }\n        if ($mid > $result) {\n \
    \           $result = $mid;\n        }\n        if ($mid < $min) {\n         \
    \   $min = $mid + 1;\n        }\n        if ($mid > $max) {\n            $max\
    \ = $mid - 1;\n        }\n    }\n    if (count($evens) > 0) {\n        $result\
    \ = max($evens);\n    }\n    if (count($odds) > 0) {\n        $result = min($odds);\n\
    \    }\n    return $result;\n}", "    if ($x < $y) {\n        $min = $x;\n   \
    \     $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    $even = 0;\n    $odd = 1;\n    while ($min <= $max) {\n        if ($min %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n        $min++;\n    }\n    if ($even > $odd) {\n        return $even;\n\
    \    } else {\n        return $odd;\n    }\n}", "    if ($x < $y) {\n        $temp\
    \ = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    $x = abs($x);\n   \
    \ $y = abs($y);\n    if ($x == 0) {\n        return $y;\n    }\n    if ($y ==\
    \ 0) {\n        return $x;\n    }\n    if ($x <= $y) {\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n    $x = floor($x / 2);\n    $y\
    \ = floor($y / 2);\n    $x = $x * 2;\n    $y = $y * 2;\n    $x = $x + $y;\n  \
    \  $y = $y - $x;\n    if ($x == $y) {\n        return $x;\n    }\n    return -1;\n\
    }\n", "    if ($x <= $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max)\
    \ {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n       \
    \     $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n\
    \    }\n    \n    return $min;\n}\n", "    $evens = array();\n    $odds = array();\n\
    \    \n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n     \
    \       $evens[] = $i;\n        } else {\n            $odds[] = $i;\n        }\n\
    \    }\n    \n    if (count($evens) == 0) {\n        return -1;\n    }\n    \n\
    \    $even = array_pop($evens);\n    \n    for ($i = $x; $i <= $y; $i++) {\n \
    \       if ($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n   \
    \         $odds[] = $i;\n        }\n    }\n    \n    $odd = array_pop($odds);\n\
    \    \n    if ($even > $odd) {\n        return $even;\n    } else {\n        return\
    \ $odd;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate your effort,\
    \ but this doesn't solve the problem. Your code returns `-1` for `choose_num(12,\
    \ 15)`, but OP wants `14`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated\
    \ my answer to account for that.\n<|/ c |>\n<| c |>\nI appreciate your effort,\
    \ but this doesn't solve the problem. Your code returns `-1` for `choose_num(12,\
    \ 15)`, but OP wants `14`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated\
    \ my answer to account for that.\n<|/ c |>\n<| c |>\nI appreciate your effort,\
    \ but this doesn't solve the problem. Your code returns `-1` for `choose_num(12,\
    \ 15)`, but OP wants `14`.\n<|/ c |>\n<| a tags=php,algorithm |>\nThe problem\
    \ is that the function choose_num() doesn't return anything if there is no even\
    \ number in the range. Try this instead:\n<code>", "    if ($x < $y) {\n     \
    \   $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n       \
    \ $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max) / 2;\n     \
    \   if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n   \
    \         $max = $mid;\n        }\n    } while ($min <= $max);\n    \n    return\
    \ $min;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited\
    \ my answer to include a test case for choose_num(12, 15).\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I edited my answer to include a test case for choose_num(12,\
    \ 15).\n<|/ c |>\n<| c |>\nI tested it and it works. I edited my answer to include\
    \ a test case for choose_num(12, 15).\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I edited my answer to include a test case for choose_num(12, 15).\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php", "    if ($x < $y) {\n        $min = $x;\n  \
    \      $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    \n    $even = 0;\n    $odd = 1;\n    \n    while ($min < $max) {\n      \
    \  $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $even\
    \ = $mid + 1;\n        } else {\n            $odd = $mid - 1;\n        }\n   \
    \     \n        if ($even < $odd && $even < $y) {\n            $min = $mid + 1;\n\
    \        } elseif ($odd < $even && $odd < $y) {\n            $max = $mid - 1;\n\
    \        } else {\n            return $mid;\n        }\n    }\n    \n    return\
    \ -1;\n}\n", "    $evens = array();\n    $odds = array();\n    for($i = $x; $i\
    \ <= $y; $i++) {\n        if($i % 2 == 0) {\n            $evens[] = $i;\n    \
    \    } else {\n            $odds[] = $i;\n        }\n    }\n    $evens = array_merge($evens,\
    \ $odds);\n    sort($evens);\n    sort($odds);\n    foreach($evens as $even) {\n\
    \        if($even % 2 == 0) {\n            return $even;\n        }\n    }\n \
    \   return -1;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nI like this\
    \ solution. I'm going to try it out and see how it goes.\n<|/ c |>\n<| c |>\n\
    I like it, but I feel like it could be optimized a bit. For example, if you have\
    \ two numbers that are both even and are in the range [x, y], then choose_num(12,\
    \ 15) = 14. Since 14 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since -1 is even, choose_num(13,\
    \ 12) = -1. Since -1 is even, choose_num(13, 12) = -1. Since ", "    if ($x <\
    \ $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min =\
    \ $y;\n        $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max)\
    \ / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        }\
    \ else {\n            $max = $mid;\n        }\n    } while ($min < $max);\n  \
    \  \n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n       \
    \ $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n  \
    \  \n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if\
    \ ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n        \
    \    $max = $mid;\n        }\n    }\n    return $min;\n}\n", "    $evens = array();\n\
    \    $odds = array();\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $evens[] = $i;\n        } else {\n            $odds[] =\
    \ $i;\n        }\n    }\n    $evens = array_unique($evens);\n    $odds = array_unique($odds);\n\
    \    if (count($evens) > count($odds)) {\n        return $evens[count($evens)\
    \ - 1];\n    } else {\n        return $odds[count($odds) - 1];\n    }\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nThis doesn't work if $x is greater than $y.\n\
    <|/ c |>\n<| c |>\nIt does work if $x is greater than $y, but $x is less than\
    \ $y. The function returns -1 if $x is greater than $y.\n<|/ c |>\n<| c |>\nYes,\
    \ but $x is less than $y, so $x is less than $y, and $x is less than $y, and $x\
    \ is less than $y, and $x is less than $y, and $x is less than $y, and $x is less\
    \ than $y, and $x is less than $y, and $x is less than $y, and $x is less than\
    \ $y, and $x is less than $y, and $x is less than $y, and $x is less than $y,\
    \ and $x is less than $y, and $x is less than $y, and $x is less than $y, and\
    \ $x is less than $y, and $x is less than $y, and $x is less than $y, and $x is\
    \ less than $y, and $x is less than $y, and $x is less than $y, and $x is less\
    \ than $y, and $x is less than $y, and $x is less than $y, and $x is less than\
    \ $y, and $x is less than $y, and $x is less than $y, and $x is less than $y,\
    \ and $x is less than $y, and $x is less than $y, and $x is less than $y, and\
    \ $x is less than $y, and $x is less than $y, and $x is less than $y, and $x is\
    \ less than $y, and $x is less than $y, and $x is less than $y, and $x is less\
    \ than $y, and $x is less than $y, and $x is less than $y, and $x is less than\
    \ $y, and $x is less than $y, and $x is less than $y, and $x is less than $y,\
    \ and $x is less than $y, and $x is less than $", "    if ($x < $y) {\n      \
    \  $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n    }\n    if ($x == $y)\
    \ {\n        return $x;\n    }\n    if ($x > $y) {\n        return -1;\n    }\n\
    \    $tmp = $x;\n    $x = $y;\n    $y = $tmp;\n    while ($x % 2 == 0) {\n   \
    \     $x = $x / 2;\n    }\n    while ($y % 2 == 0) {\n        $y = $y / 2;\n \
    \   }\n    while ($x < $y) {\n        if ($x % 2 == 0) {\n            $x = $x\
    \ + 1;\n        } else {\n            $y = $y - 1;\n        }\n    }\n    return\
    \ $x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested\
    \ it with your example and it works. I even tested it with your example and it\
    \ works. I even tested it with your example and it works. I even tested it with\
    \ your example and it works. I even tested it with your example and it works.\
    \ I even tested it with your example and it works. I even tested it with your\
    \ example and it works. I even tested it with your example and it works. I even\
    \ tested it with your example and it works. I even tested it with your example\
    \ and it works. I even tested it with your example and it works. I even tested\
    \ it with your example and it works. I even tested it with your example and it\
    \ works. I even tested it with your example and it works. I even tested it with\
    \ your example and it works. I even tested it with your example and it works.\
    \ I even tested it with your example and it works. I even tested it with your\
    \ example and it works. I even tested it with your example and it works. I even\
    \ tested it with your example and it works. I even tested it with your example\
    \ and it works. I even tested it with your example and it works. I even tested\
    \ it with your example and it works. I even tested it with your example and it\
    \ works. I even tested it with your example and it works. I even tested it with\
    \ your example and it works. I even tested it with your example and it works.\
    \ I even tested it with your example and it works. I even tested it with your\
    \ example and it works. I even tested it with your example and it works. I even\
    \ tested it with your example and it works. I even tested it with your example\
    \ and it works. I even tested it with your example and it works. I even tested\
    \ it with your example and it works. I even tested it with your example and it\
    \ works. I even tested it with your example and it works. I even tested it with\
    \ your example and it works. I even ", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    \n    $even = 0;\n    $odd = 0;\n    \n    for ($i = $min; $i <= $max;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    \n    if ($even > $odd) {\n      \
    \  return $min;\n    } else {\n        return $max;\n    }\n}\n", "    if ($x\
    \ > $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n\
    \    \n    $x_even = $x_odd = $y_even = $y_odd = 0;\n    \n    if ($x % 2 == 0)\
    \ {\n        $x_even = $x;\n    } else {\n        $x_odd = $x;\n    }\n    \n\
    \    if ($y % 2 == 0) {\n        $y_even = $y;\n    } else {\n        $y_odd =\
    \ $y;\n    }\n    \n    if ($x_even > $y_even) {\n        return $x_even;\n  \
    \  } else {\n        return $y_even;\n    }\n}\n", "    $evens = array();\n  \
    \  $odds = array();\n    \n    for($i = $x; $i <= $y; $i++) {\n        if($i %\
    \ 2 == 0) {\n            $evens[] = $i;\n        } else {\n            $odds[]\
    \ = $i;\n        }\n    }\n    \n    sort($evens);\n    sort($odds);\n    \n \
    \   $even = array_pop($evens);\n    $odd = array_pop($odds);\n    \n    if($even\
    \ > $odd) {\n        return $even;\n    } else {\n        return $odd;\n    }\n\
    }\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n   \
    \ $odd = 0;\n    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n    }\n    \n    if ($even > $odd) {\n        return $even;\n    } else\
    \ {\n        return $odd;\n    }\n}\n", "    $evens = array();\n    $odds = array();\n\
    \    $x = $x - 1;\n    $y = $y - 1;\n    \n    for($i = 0; $i < $y; $i++) {\n\
    \        $evens[] = $i;\n    }\n    \n    for($i = 0; $i < $x; $i++) {\n     \
    \   $odds[] = $i;\n    }\n    \n    $evens = array_reverse($evens);\n    $odds\
    \ = array_reverse($odds);\n    \n    $evens = array_merge($evens, $odds);\n  \
    \  \n    foreach($evens as $even) {\n        if($even % 2 == 0) {\n          \
    \  return $even;\n        }\n    }\n    \n    return -1;\n}\n", "    if ($x <\
    \ $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min =\
    \ $y;\n        $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max)\
    \ / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        }\
    \ else {\n            $max = $mid;\n        }\n    } while ($min < $max);\n  \
    \  \n    return $min;\n}\n", "    if ($x > $y) {\n        $tmp = $x;\n       \
    \ $x = $y;\n        $y = $tmp;\n    }\n    if ($x == $y) {\n        return $x;\n\
    \    }\n    if ($x % 2 == 0) {\n        return $y;\n    }\n    return choose_num($x\
    \ - 1, $y);\n}", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n\
    \    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while\
    \ ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 ==\
    \ 0) {\n            $min = $mid + 1;\n        } else {\n            $max = $mid;\n\
    \        }\n    }\n    return $min;\n}\n", "    if ($x < $y) {\n        $min =\
    \ $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n\
    \    }\n\n    $even = 0;\n    $odd = 1;\n\n    while ($min < $max) {\n       \
    \ $mid = ($min + $max) / 2;\n\n        if ($mid % 2 == 0) {\n            $even\
    \ = $mid + 1;\n        } else {\n            $odd = $mid - 1;\n        }\n\n \
    \       if ($even > $odd) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid - 1;\n        }\n    }\n\n    return $even > $odd ? $even\
    \ : -1;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThe question was about\
    \ how to find the biggest even number in a range. Your code doesn't do that.\n\
    <|/ c |>\n<| c |>\nThe question was about how to find the biggest even number\
    \ in a range. Your code doesn't do that.\n<|/ c |>\n<| c |>\nThe question was\
    \ about how to find the biggest even number in a range. Your code doesn't do that.\n\
    <|/ c |>\n<| c |>\nThe question was about how to find the biggest even number\
    \ in a range. Your code doesn't do that.\n<|/ c |>\n<| c |>\nThe question was\
    \ about how to find the biggest even number in a range. Your code doesn't do that.\n\
    <|/ c |>\n<| a dscore=5 tags=php,algorithm |>\n<code>", "    $evens = array();\n\
    \    $odds = array();\n    \n    // Find all even numbers between x and y\n  \
    \  for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $evens[]\
    \ = $i;\n        }\n    }\n    \n    // Find all odd numbers between x and y\n\
    \    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 != 0) {\n           \
    \ $odds[] = $i;\n        }\n    }\n    \n    // Return the biggest even number\
    \ that is in the range [x, y]\n    if (count($evens) > count($odds)) {\n     \
    \   return max($evens);\n    } else {\n        return max($odds);\n    }\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if you pass it negative numbers.\
    \ For example, `choose_num(-10, 10)` returns `-10`.\n<|/ c |>\n<| c |>\nYes, I\
    \ noticed that and fixed it. I also added a comment to the code explaining why\
    \ it works.\n<|/ c |>\n<| c |>\nThe code works fine for positive numbers. But\
    \ for negative numbers it returns `-1` instead of `-10`\n<|/ c |>\n<| c |>\nI\
    \ tested it on PHP 5.6 and it works fine. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied the code correctly. I am using PHP 7.2.\n<|/\
    \ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    if ($x < $y) {\n    \
    \    $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n      \
    \  $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid = $min + ($max\
    \ - $min) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n \
    \       } else {\n            $max = $mid;\n        }\n    }\n    \n    return\
    \ $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n\n    while ($min\
    \ < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n\
    \            $min = $mid + 1;\n        } else {\n            $max = $mid;\n  \
    \      }\n    }\n\n    return $min;\n}\n", "    if ($x < $y) {\n        $min =\
    \ $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n\
    \    }\n    $even = 0;\n    $odd = 1;\n    while ($min <= $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $even = $mid\
    \ + 1;\n        } else {\n            $odd = $mid - 1;\n        }\n        if\
    \ ($even > $odd) {\n            $min = $mid + 1;\n        } else {\n         \
    \   $max = $mid - 1;\n        }\n    }\n    return $even;\n}\n", "    if ($x <\
    \ $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min =\
    \ $y;\n        $max = $x;\n    }\n\n    do {\n        $mid = ($min + $max) / 2;\n\
    \        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid;\n        }\n    } while ($min <= $max);\n\n    return\
    \ $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while ($min\
    \ < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n\
    \            $min = $mid + 1;\n        } else {\n            $max = $mid;\n  \
    \      }\n    }\n    return $min;\n}\n", "    if ($x <= $y) {\n        $min =\
    \ $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n\
    \    }\n    \n    $even = 0;\n    \n    while ($min <= $max) {\n        if ($min\
    \ % 2 == 0) {\n            $even++;\n        }\n        $min++;\n    }\n    \n\
    \    if ($even > 0) {\n        return $min;\n    } else {\n        return -1;\n\
    \    }\n}\n", "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n   \
    \     $y = $temp;\n    }\n    \n    $x_even = $x_odd = $y_even = $y_odd = 0;\n\
    \    \n    if ($x % 2 == 0) {\n        $x_even = $x;\n    } else {\n        $x_odd\
    \ = $x;\n    }\n    \n    if ($y % 2 == 0) {\n        $y_even = $y;\n    } else\
    \ {\n        $y_odd = $y;\n    }\n    \n    if ($x_even < $y_even) {\n       \
    \ $temp = $x_even;\n        $x_even = $y_even;\n        $y_even = $temp;\n   \
    \ }\n    \n    if ($x_odd < $y_odd) {\n        $temp = $x_odd;\n        $x_odd\
    \ = $y_odd;\n        $y_odd = $temp;\n    }\n    \n    if ($x_even > $y_even)\
    \ {\n        $temp = $x_even;\n        $x_even = $y_even;\n        $y_even = $temp;\n\
    \    }\n    \n    if ($x_odd > $y_odd) {\n        $temp = $x_odd;\n        $x_odd\
    \ = $y_odd;\n        $y_odd = $temp;\n    }\n    \n    if ($x_even < $y_even)\
    \ {\n        return -1;\n    }\n    \n    if ($x_odd < $y_odd) {\n        return\
    \ -1;\n    }\n    \n    if ($x_even > $y_even) {\n        return -1;\n    }\n\
    \    \n    if ($x_odd > $y_odd) {\n        return -1;\n    }\n    \n    return\
    \ $x_even + $x_odd;\n}", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    do {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $min = $mid + 1;\n        } else {\n            $max = $mid - 1;\n        }\n\
    \    } while ($min <= $max);\n    return $min;\n}\n", "    if ($x < $y) {\n  \
    \      $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n    \
    \    $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max) / 2;\n  \
    \      if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid - 1;\n        }\n    } while ($min <= $max);\n    \n\
    \    return $min;\n}", "    $even = 0;\n    $odd = 0;\n    \n    if ($x <= $y)\
    \ {\n        $even = $x;\n        $odd = $y;\n    } else {\n        $even = $y;\n\
    \        $odd = $x;\n    }\n    \n    while ($even > 0 && $odd > 0) {\n      \
    \  if ($even % 2 == 0) {\n            $even = $even / 2;\n        } else {\n \
    \           $even = $even - 1;\n        }\n        \n        if ($odd % 2 == 0)\
    \ {\n            $odd = $odd / 2;\n        } else {\n            $odd = $odd -\
    \ 1;\n        }\n    }\n    \n    if ($even > 0 && $odd > 0) {\n        return\
    \ $even;\n    } else {\n        return -1;\n    }\n}\n", "    if ($x < $y) {\n\
    \        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n  \
    \      $max = $x;\n    }\n    do {\n        $mid = ($min + $max) / 2;\n      \
    \  if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n    \
    \        $max = $mid;\n        }\n    } while ($min <= $max);\n    return $min;\n\
    }\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n   \
    \ $odd = 1;\n    \n    while ($min <= $max) {\n        $mid = ($min + $max) /\
    \ 2;\n        if ($mid % 2 == 0) {\n            $even = $mid + 1;\n        } else\
    \ {\n            $odd = $mid - 1;\n        }\n        \n        if ($even > $odd)\
    \ {\n            $min = $mid + 1;\n        } else {\n            $max = $mid -\
    \ 1;\n        }\n    }\n    \n    if ($even > $odd) {\n        return -1;\n  \
    \  } else {\n        return $even;\n    }\n}", "    if ($x < $y) {\n        $temp\
    \ = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n    $even = 0;\n\
    \    $odd = 0;\n    \n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n    }\n    \n    if ($even > $odd) {\n        return $even;\n    } else\
    \ {\n        return $odd;\n    }\n}\n", "    if ($x < $y) {\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n    $even = 0;\n    $odd = 0;\n\
    \    \n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n     \
    \       $even++;\n        } else {\n            $odd++;\n        }\n    }\n  \
    \  \n    if ($even > $odd) {\n        return $x;\n    } else {\n        return\
    \ $y;\n    }\n}", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n\
    \    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $evens\
    \ = array();\n    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i %\
    \ 2 == 0) {\n            $evens[] = $i;\n        }\n    }\n    \n    if (count($evens)\
    \ == 0) {\n        return -1;\n    }\n    \n    return max($evens);\n}", "   \
    \ $evens = array();\n    $odds = array();\n    \n    for ($i = $x; $i <= $y; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n\
    \            $odds[] = $i;\n        }\n    }\n    \n    if (count($evens) > 0)\
    \ {\n        return max($evens);\n    } else {\n        return -1;\n    }\n}\n",
  "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n    \
    \    $min = $y;\n        $max = $x;\n    }\n\n    $even = 0;\n    $odd = 1;\n\n\
    \    while ($min <= $max) {\n        if ($min % 2 == 0) {\n            $even++;\n\
    \        }\n        if ($max % 2 == 0) {\n            $odd++;\n        }\n   \
    \     $min++;\n        $max++;\n    }\n\n    if ($even > $odd) {\n        return\
    \ $even;\n    } else {\n        return $odd;\n    }\n}\n", "    if ($x < $y) {\n\
    \        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n  \
    \      $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid = ($min\
    \ + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n \
    \       } else {\n            $max = $mid;\n        }\n    }\n    return $min;\n\
    }\n", "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y =\
    \ $temp;\n    }\n    $x = $x - 1;\n    $y = $y - 1;\n    while ($x >= $y) {\n\
    \        $x = $x - 2;\n        $y = $y - 2;\n    }\n    return $x;\n}", "    if\
    \ ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    return\
    \ $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while ($min\
    \ < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n\
    \            $min = $mid + 1;\n        } else {\n            $max = $mid;\n  \
    \      }\n    }\n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    $evens = array();\n    for ($i = $min; $i <= $max; $i++) {\n       \
    \ if ($i % 2 == 0) {\n            $evens[] = $i;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return -1;\n    }\n    return max($evens);\n}\n</code>\n<|/\
    \ a tags=php,math |>\n<| c |>\nThis doesn't work. `choose_num(12, 15)` returns\
    \ `14` instead of `15`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ fixed it now.\n<|/ c |>\n<| c |>\nThis doesn't work. `choose_num(12, 15)` returns\
    \ `14` instead of `15`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ fixed it now.\n<|/ c |>\n<| a tags=php,math |>\n<code>", "    $evens = $odds\
    \ = 0;\n    \n    for($i = $x; $i <= $y; $i++) {\n        $evens += $i & 1;\n\
    \        $odds += $i >> 1;\n    }\n    \n    return $evens > $odds ? $evens :\
    \ $odds;\n}\n", "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n \
    \       $y = $temp;\n    }\n    \n    if ($x == $y) {\n        return $x;\n  \
    \  }\n    \n    if ($x % 2 == 0) {\n        return $x;\n    }\n    \n    $temp\
    \ = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n\
    \    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n\
    \    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x\
    \ = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n\
    \    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n\
    \    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y =\
    \ $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp\
    \ = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n\
    \    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n\
    \    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x\
    \ = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n\
    \    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n\
    \    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y =\
    \ $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp\
    \ = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n\
    \    $y = $temp;\n    \n    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n\
    \    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x\
    \ = $y;\n    $y = $temp;\n    \n    $temp = $x;\n    $x = ", "    if ($x < $y)\
    \ {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n\
    \        $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max) / 2;\n\
    \        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid - 1;\n        }\n    } while ($min <= $max);\n    \n\
    \    return $min;\n}", "    if ($x < $y) {\n        $min = $x;\n        $max =\
    \ $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n   \
    \ do {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n    \
    \        $min = $mid + 1;\n        } else {\n            $max = $mid;\n      \
    \  }\n    } while ($min <= $max);\n    \n    return $min;\n}\n", "    if ($x <\
    \ $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min =\
    \ $y;\n        $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max)\
    \ / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        }\
    \ else {\n            $max = $mid;\n        }\n    } while ($min < $max);\n  \
    \  \n    return $min;\n}", "    $evens = array();\n    $odds = array();\n    $x\
    \ = $x - 1;\n    $y = $y - 1;\n    for($i = 0; $i <= $y; $i++) {\n        $evens[]\
    \ = $i;\n    }\n    for($i = 0; $i <= $x; $i++) {\n        $odds[] = $i;\n   \
    \ }\n    $evens = array_reverse($evens);\n    $odds = array_reverse($odds);\n\
    \    foreach($evens as $even) {\n        if(in_array($even, $odds)) {\n      \
    \      return $even;\n        }\n    }\n    return -1;\n}", "    if ($x < $y)\
    \ {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n\
    \        $max = $x;\n    }\n    do {\n        $mid = ($min + $max) / 2;\n    \
    \    if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n  \
    \          $max = $mid;\n        }\n    } while ($min < $max);\n    return $min;\n\
    }\n", "    $evens = array();\n    $odds = array();\n    for ($i = $x; $i <= $y;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n        } else\
    \ {\n            $odds[] = $i;\n        }\n    }\n    $evens = array_unique($evens);\n\
    \    $odds = array_unique($odds);\n    if (count($evens) > 0) {\n        return\
    \ max($evens);\n    } else {\n        return -1;\n    }\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try choose_num(12, 15). You'll get 14, but choose_num(13,\
    \ 12) should return -1. Your code returns 14.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with negative numbers as well.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works with negative numbers as well.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works with negative numbers as well.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>", "    if ($x > $y) {\n        $tmp = $x;\n        $x = $y;\n   \
    \     $y = $tmp;\n    }\n    $x = abs($x);\n    $y = abs($y);\n    if ($x == $y)\
    \ {\n        return $x;\n    }\n    if ($x > $y) {\n        $tmp = $x;\n     \
    \   $x = $y;\n        $y = $tmp;\n    }\n    $x = floor($x / 2);\n    $y = floor($y\
    \ / 2);\n    if ($x == $y) {\n        return $x;\n    }\n    if ($x > $y) {\n\
    \        $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n    }\n    $x = $x\
    \ - $y;\n    if ($x == 0) {\n        return $x;\n    }\n    $y = $y - $x;\n  \
    \  if ($y == 0) {\n        return $y;\n    }\n    $x = $x + $y;\n    return $x;\n\
    }", "    $evens = array();\n    $odds = array();\n    for($i = $x; $i <= $y; $i++)\
    \ {\n        if($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n\
    \            $odds[] = $i;\n        }\n    }\n    sort($evens);\n    sort($odds);\n\
    \    $even = array_pop($evens);\n    $odd = array_pop($odds);\n    if($even >\
    \ $odd) {\n        return $even;\n    } else {\n        return $odd;\n    }\n\
    }\n", "    if ($x <= $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max)\
    \ {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n       \
    \     $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n\
    \    }\n    \n    return $min;\n}", "    $evens = array();\n    $odds = array();\n\
    \    for($i = $x; $i <= $y; $i++) {\n        if($i % 2 == 0) {\n            $evens[]\
    \ = $i;\n        } else {\n            $odds[] = $i;\n        }\n    }\n    sort($evens);\n\
    \    sort($odds);\n    foreach($evens as $even) {\n        if($even != 0) {\n\
    \            return $even;\n        }\n    }\n    return -1;\n}\n", "    if ($x\
    \ <= $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    return\
    \ $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n    $even = 0;\n\
    \    $odd = 1;\n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n\
    \        if ($mid % 2 == 0) {\n            $even = $mid + 1;\n        } else {\n\
    \            $odd = $mid - 1;\n        }\n        if ($even > $odd) {\n      \
    \      $min = $mid + 1;\n        } else {\n            $max = $mid - 1;\n    \
    \    }\n    }\n    return $even > $odd ? $even : -1;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `choose_num(12, 15)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    do {\n        $mid = ($min\
    \ + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n \
    \       } else {\n            $max = $mid;\n        }\n    } while ($min < $max);\n\
    \    \n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n     \
    \   $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    \n    while ($min < $max) {\n        $mid = $min + ($max - $min) / 2;\n \
    \       if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid;\n        }\n    }\n    return $min;\n}\n", "    if ($x\
    \ < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    \n \
    \   return $min;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm |>\n\
    <code>", "    $evens = array();\n    $odds = array();\n    \n    // Find all even\
    \ numbers between x and y\n    for ($i = $x; $i <= $y; $i += 2) {\n        $evens[]\
    \ = $i;\n    }\n    \n    // Find all odd numbers between x and y\n    for ($i\
    \ = $x; $i >= $y; $i -= 2) {\n        $odds[] = $i;\n    }\n    \n    // Find\
    \ the biggest even number in the range\n    $max_even = array_reduce($evens, function($a,\
    \ $b) {\n        return $a > $b ? $a : $b;\n    });\n    \n    // Find the biggest\
    \ odd number in the range\n    $max_odd = array_reduce($odds, function($a, $b)\
    \ {\n        return $a > $b ? $a : $b;\n    });\n    \n    // If there's no even\
    \ or odd number in the range, return -1\n    if ($max_even === false || $max_odd\
    \ === false) {\n        return -1;\n    }\n    \n    // If there's only one number\
    \ in the range, return it\n    if (count($evens) === 1 && count($odds) === 1)\
    \ {\n        return $max_even;\n    }\n    \n    // If there's more than one number\
    \ in the range, return the biggest one\n    if (count($evens) > 1 || count($odds)\
    \ > 1) {\n        return $max_even > $max_odd ? $max_even : $max_odd;\n    }\n\
    \    \n    // If there's only one number in the range, return it\n    if (count($evens)\
    \ === 1) {\n        return $max_even;\n    }\n    \n    // If there's more than\
    \ one number in the range, return the biggest one\n    return $max_even > $max_odd\
    \ ? $max_even : $max_odd;\n}\n", "    if ($x < $y) {\n        $temp = $x;\n  \
    \      $x = $y;\n        $y = $temp;\n    }\n    $x = $x - 1;\n    $y = $y - 1;\n\
    \    while ($x >= $y) {\n        $x = $x - 2;\n        $y = $y - 2;\n    }\n \
    \   return $x + 1;\n}", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n \
    \   while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid\
    \ % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    }\n    \n    return $min;\n}\n", "    $evens = array();\n\
    \    $odds = array();\n    $x = $x - 1;\n    $y = $y - 1;\n    for($i = $x; $i\
    \ <= $y; $i++) {\n        if($i % 2 == 0) {\n            $evens[] = $i;\n    \
    \    } else {\n            $odds[] = $i;\n        }\n    }\n    if(count($evens)\
    \ > count($odds)) {\n        return $evens[count($evens) - 1];\n    } else {\n\
    \        return $odds[count($odds) - 1];\n    }\n}", "    $result = -1;\n    if\
    \ ($x > $y) {\n        $result = $x;\n        $x = $y;\n        $y = $result;\n\
    \    }\n    \n    while ($x <= $y) {\n        if ($x % 2 == 0) {\n           \
    \ $x = $x + 1;\n        } else {\n            $x = $x - 1;\n        }\n      \
    \  if ($x == $y) {\n            return $x;\n        }\n    }\n    return $result;\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    \n    for($i = $x; $i <= $y; $i++) {\n\
    \        if($i % 2 == 0) {\n            $even++;\n        } else {\n         \
    \   $odd++;\n        }\n    }\n    \n    if($even > $odd) {\n        return $even;\n\
    \    } else {\n        return $odd;\n    }\n}\n", "    if ($x < $y) {\n      \
    \  $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max\
    \ = $x;\n    }\n    $even = 0;\n    $odd = 0;\n    \n    for ($i = $min; $i <=\
    \ $max; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    \n    if ($even > $odd) {\n  \
    \      return $even;\n    } else {\n        return $odd;\n    }\n}\n", "    if\
    \ ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    return\
    \ $min;\n}\n", "    $even = 0;\n    $odd = 0;\n    \n    if ($x < $y) {\n    \
    \    $even = $x;\n        $odd = $y;\n    } else {\n        $even = $y;\n    \
    \    $odd = $x;\n    }\n    \n    while ($even > 0 && $odd > 0) {\n        if\
    \ ($even % 2 == 0) {\n            $even = $even / 2;\n        } else {\n     \
    \       $even = $even / 2;\n        }\n        \n        if ($odd % 2 == 0) {\n\
    \            $odd = $odd / 2;\n        } else {\n            $odd = $odd / 2;\n\
    \        }\n    }\n    \n    return $even;\n}\n", "    if ($x < $y) {\n      \
    \  $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max\
    \ = $x;\n    }\n    do {\n        $mid = ($min + $max) / 2;\n        if ($mid\
    \ % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid - 1;\n        }\n    } while ($min <= $max);\n    return $min;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nThis doesn't work. Try `choose_num(12, 15)`.\n\
    <|/ c |>\n<| c |>\nIt works. Try it! It returns 14. Try it again with choose_num(12,\
    \ 15).\n<|/ c |>\n<| c |>\nIt doesn't work. Try `choose_num(12, 15)`.\n<|/ c |>\n\
    <| c |>\nIt works. Try it! It returns 14. Try it again with choose_num(12, 15).\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try `choose_num(12, 15)`.\n<|/ c |>\n<| a\
    \ tags=php,math |>\n<code>\n<?php", "    if ($x < $y) {\n        $temp = $x;\n\
    \        $x = $y;\n        $y = $temp;\n    }\n    while ($x <= $y) {\n      \
    \  if ($x % 2 == 0) {\n            $x = $x + 1;\n        } else {\n          \
    \  $x = $x - 1;\n        }\n    }\n    return $x;\n}\n", "    if ($x <= $y) {\n\
    \        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n  \
    \      $max = $x;\n    }\n    $evens = array();\n    for ($i = $min; $i <= $max;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n        }\n\
    \    }\n    if (count($evens) == 0) {\n        return -1;\n    }\n    $max = max($evens);\n\
    \    return $max;\n}\n", "    $evens = array();\n    $odds = array();\n    \n\
    \    // Get all even numbers between x and y\n    for ($i = $x; $i <= $y; $i +=\
    \ 2) {\n        $evens[] = $i;\n    }\n    \n    // Get all odd numbers between\
    \ x and y\n    for ($i = $x; $i >= $y; $i -= 2) {\n        $odds[] = $i;\n   \
    \ }\n    \n    // Return the biggest even number that is in the range [x, y]\n\
    \    if (count($evens) > count($odds)) {\n        return max($evens);\n    } else\
    \ {\n        return max($odds);\n    }\n}\n</code>\n<|/ a tags=php |>\n<| a tags=php\
    \ |>\n<code>\n<?php", "    if ($x < $y) {\n        $min = $x;\n        $max =\
    \ $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n   \
    \ $even = 0;\n    $odd = 0;\n    \n    for ($i = $min; $i <= $max; $i++) {\n \
    \       if ($i % 2 == 0) {\n            $even++;\n        } else {\n         \
    \   $odd++;\n        }\n    }\n    \n    if ($even > $odd) {\n        return $even;\n\
    \    } else {\n        return $odd;\n    }\n}\n", "    if ($x < $y) {\n      \
    \  $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max\
    \ = $x;\n    }\n    \n    $evens = 0;\n    \n    while ($min <= $max) {\n    \
    \    if ($min % 2 == 0) {\n            $evens++;\n        }\n        $min++;\n\
    \    }\n    \n    if ($evens == 0) {\n        return -1;\n    }\n    \n    return\
    \ $min;\n}\n", "    $evens = array();\n    $odds = array();\n    \n    for ($i\
    \ = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] =\
    \ $i;\n        } else {\n            $odds[] = $i;\n        }\n    }\n    \n \
    \   if (count($evens) > count($odds)) {\n        return $evens[count($evens) -\
    \ 1];\n    } else {\n        return $odds[count($odds) - 1];\n    }\n}\n", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n  \
    \  }\n    return $min;\n}\n", "    $even = 0;\n    $odd = 0;\n    \n    if ($x\
    \ <= $y) {\n        $even = $x;\n        $odd = $y;\n    } else {\n        $even\
    \ = $y;\n        $odd = $x;\n    }\n    \n    while ($even > 0 && $odd > 0) {\n\
    \        if ($even % 2 == 0) {\n            $even = $even / 2;\n        } else\
    \ {\n            $even = $even - 1;\n        }\n        \n        if ($odd % 2\
    \ == 0) {\n            $odd = $odd / 2;\n        } else {\n            $odd =\
    \ $odd - 1;\n        }\n    }\n    \n    if ($even > 0 && $odd > 0) {\n      \
    \  return $even;\n    } else {\n        return -1;\n    }\n}\n", "    $evens =\
    \ array();\n    $odds = array();\n    \n    for ($i = $x; $i <= $y; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n  \
    \          $odds[] = $i;\n        }\n    }\n    \n    if (count($evens) > 0) {\n\
    \        return max($evens);\n    } else {\n        return -1;\n    }\n}\n", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n  \
    \  }\n    return $min;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThanks\
    \ for the answer. Your code works perfectly for small numbers, but for bigger\
    \ numbers it doesn't work. For example, choose_num(1048576, 1048577) is returning\
    \ 1048576 instead of 1048577. Do you know why is that?\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.6.19 and it works perfectly for me. Maybe you have a problem with\
    \ your PHP version? What version are you using?\n<|/ c |>\n<| c |>\nI'm using\
    \ PHP 7.2.12. Maybe that's the problem. I'll try to update my PHP and see if it\
    \ works.\n<|/ c |>\n<| c |>\nI updated my PHP to 7.2.12 and it still doesn't work.\
    \ Do you know why is that?\n<|/ c |>\n<| c |>\nI tested it on PHP 7.2.12 and it\
    \ works perfectly for me. Maybe you have a problem with your PHP version? What\
    \ version are you using?\n<|/ c |>\n<| a dscore=1 |>\nI wrote a recursive function\
    \ which should work for any range:\n<code>", "    if ($x < $y) {\n        $min\
    \ = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max =\
    \ $x;\n    }\n    do {\n        $mid = ($min + $max) / 2;\n        if ($mid %\
    \ 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    } while ($min < $max);\n    return $min;\n}\n", "  \
    \  if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n    \
    \    $min = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n  \
    \  }\n    \n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    do {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0)\
    \ {\n            $min = $mid + 1;\n        } else {\n            $max = $mid;\n\
    \        }\n    } while ($min < $max);\n    return $min;\n}\n", "    if ($x <\
    \ $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min =\
    \ $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    return\
    \ $min;\n}\n", "    $evens = array();\n    $odds = array();\n    \n    if ($x\
    \ < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    for ($i = $min; $i <= $max; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n\
    \            $odds[] = $i;\n        }\n    }\n    \n    $evens = array_unique($evens);\n\
    \    $odds = array_unique($odds);\n    \n    if (count($evens) == 0) {\n     \
    \   return -1;\n    }\n    \n    return max($evens);\n}\n", "    if ($x <= $y)\
    \ {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n\
    \        $max = $x;\n    }\n    $evens = array();\n    $odds = array();\n    for\
    \ ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $evens[]\
    \ = $i;\n        } else {\n            $odds[] = $i;\n        }\n    }\n    $evens\
    \ = array_merge($evens, $odds);\n    $evens = array_unique($evens);\n    $evens\
    \ = array_filter($evens);\n    if (count($evens) == 0) {\n        return -1;\n\
    \    }\n    return max($evens);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c\
    \ |>\nThis doesn't work. Try choose_num(12, 15). Your function returns 14.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I even tested it on PHP 5.6 and it\
    \ works. I even tested it on PHP 5.5 and it works. I even tested it on PHP 5.4\
    \ and it works. I even tested it on PHP 5.3 and it works. I even tested it on\
    \ PHP 5.2 and it works. I even tested it on PHP 5.1 and it works. I even tested\
    \ it on PHP 5.0 and it works. I even tested it on PHP 4.4 and it works. I even\
    \ tested it on PHP 4.3 and it works. I even tested it on PHP 4.2 and it works.\
    \ I even tested it on PHP 4.1 and it works. I even tested it on PHP 4.0 and it\
    \ works. I even tested it on PHP 3.4 and it works. I even tested it on PHP 3.3\
    \ and it works. I even tested it on PHP 3.2 and it works. I even tested it on\
    \ PHP 3.1 and it works. I even tested it on PHP 3.0 and it works.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.6 and it works. I even tested it on PHP 5.5 and\
    \ it works. I even tested it on PHP 5.4 and it works. I even tested it on PHP\
    \ 5.3 and it works. I even tested it on PHP 5.2 and it works. I even tested it\
    \ on PHP 5.1 and it works. I even tested it on PHP 5.0 and it works. I even tested\
    \ it on PHP 4.4 and it works. I even tested it on PHP 4.3 and it works. I even\
    \ tested it on PHP 4.2 and it works. I even tested it on PHP 4.1 and it works.\
    \ I even tested it ", "    if ($x < $y) {\n        $min = $x;\n        $max =\
    \ $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n   \
    \ while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid %\
    \ 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    }\n    return $min;\n}\n", "    if ($x < $y) {\n   \
    \     $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n     \
    \   $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max) / 2;\n   \
    \     if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n \
    \           $max = $mid;\n        }\n    } while ($min <= $max);\n    \n    return\
    \ $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n    $even = 0;\n\
    \    $odd = 1;\n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n   \
    \         $even++;\n        } else {\n            $odd++;\n        }\n       \
    \ $min++;\n    }\n    if ($even > $odd) {\n        return $even;\n    } else {\n\
    \        return $odd;\n    }\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI like\
    \ your solution, but I believe that `choose_num(12, 15)` should return `14` and\
    \ not `-1`.\n<|/ c |>\n<| c |>\n: Yes, you're right. I've fixed the code now.\
    \ Thanks.\n<|/ c |>\n<| c |>\nI like your solution, but I believe that choose_num(12,\
    \ 15) should return 14 and not -1. \u2013  user2909474 3 mins ago\n<|/ c |>\n\
    <| c |>\n: Yes, you're right. I've fixed the code now. Thanks.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n \
    \   $even = 0;\n    \n    while ($min < $max) {\n        if ($min % 2 == 0) {\n\
    \            $even++;\n        }\n        $min++;\n    }\n    \n    return $even\
    \ > 0 ? $even : -1;\n}\n", "    if ($x < $y) {\n        $tmp = $x;\n        $x\
    \ = $y;\n        $y = $tmp;\n    }\n    if ($x == $y) {\n        return $x;\n\
    \    }\n    if ($x % 2 == 0) {\n        return $y;\n    }\n    $tmp = $x;\n  \
    \  $x = $y;\n    $y = $tmp;\n    while ($x % 2 == 0) {\n        $x = $x / 2;\n\
    \        $y = $y * 2;\n    }\n    return $y;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `choose_num(13, 12)`.\n<|/ c |>\n<| c\
    \ |>\nIt works fine for me. Try it with `choose_num(13, 12)`.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for `choose_num(13, 12)` because `choose_num(12, 15)` returns\
    \ `14` instead of `-1`.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my\
    \ answer to fix the problem.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with\
    \ `choose_num(13, 12)`.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>", "    if\
    \ ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n  \
    \  }\n    if ($x == $y) {\n        return $x;\n    }\n    if ($x % 2 == 0) {\n\
    \        return $x;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n\
    \    $temp = $x;\n    $x = $y;\n    $y = $temp;\n    while ($x % 2 == 0) {\n \
    \       $x = $x / 2;\n    }\n    while ($y % 2 == 0) {\n        $y = $y / 2;\n\
    \    }\n    return $x + $y;\n}\n", "    if ($x < $y) {\n        $min = $x;\n \
    \       $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n   \
    \ }\n    \n    do {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 ==\
    \ 0) {\n            $min = $mid + 1;\n        } else {\n            $max = $mid;\n\
    \        }\n    } while ($min < $max);\n    \n    return $min;\n}\n", "    $evens\
    \ = array();\n    $odds = array();\n    \n    // Find all even numbers between\
    \ x and y\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n \
    \           $evens[] = $i;\n        }\n    }\n    \n    // Find all odd numbers\
    \ between x and y\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 ==\
    \ 1) {\n            $odds[] = $i;\n        }\n    }\n    \n    // If there are\
    \ no even or odd numbers between x and y, then return -1\n    if (empty($evens)\
    \ && empty($odds)) {\n        return -1;\n    }\n    \n    // If there are even\
    \ and odd numbers between x and y, then return the \n    // biggest even number\
    \ that is in the range [x, y] inclusive\n    if (empty($evens)) {\n        return\
    \ max($odds);\n    }\n    \n    // If there are odd numbers between x and y, then\
    \ return the biggest odd \n    // number that is in the range [x, y] inclusive\n\
    \    return max($evens);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your effort but this doesn't work. Try it yourself with your example numbers.\
    \ You will see that your function returns `-1` instead of `14`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine for me. Try it yourself with your example\
    \ numbers. You will see that your function returns `-1` instead of `14`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine for me. Try it yourself with your\
    \ example numbers. You will see that your function returns `-1` instead of `14`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Try it yourself with\
    \ your example numbers. You will see that your function returns `-1` instead of\
    \ `14`.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Try it yourself\
    \ with your example numbers. You will see that your function returns `-1` instead\
    \ of `14`.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    $evens\
    \ = array();\n    $odds = array();\n    $x = $x - 1;\n    $y = $y - 1;\n    for($i\
    \ = $x; $i <= $y; $i++) {\n        if($i % 2 == 0) {\n            $evens[] = $i;\n\
    \        } else {\n            $odds[] = $i;\n        }\n    }\n    sort($evens);\n\
    \    sort($odds);\n    $evens = array_slice($evens, 0, count($evens) / 2);\n \
    \   $odds = array_slice($odds, 0, count($odds) / 2);\n    foreach($evens as $even)\
    \ {\n        if($even % 2 == 0) {\n            return $even;\n        }\n    }\n\
    \    foreach($odds as $odd) {\n        if($odd % 2 == 1) {\n            return\
    \ $odd;\n        }\n    }\n    return -1;\n}\n", "    if ($x < $y) {\n       \
    \ $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max\
    \ = $x;\n    }\n\n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n\
    \        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid;\n        }\n    }\n\n    return $min;\n}\n", "    $evens\
    \ = array();\n    $odds = array();\n    \n    // Get even numbers between x and\
    \ y\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n       \
    \     $evens[] = $i;\n        }\n    }\n    \n    // Get odd numbers between x\
    \ and y\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 != 0) {\n   \
    \         $odds[] = $i;\n        }\n    }\n    \n    // Return the biggest even\
    \ number if there's one\n    if (count($evens) > 0) {\n        return max($evens);\n\
    \    }\n    \n    // Return the biggest odd number if there's one\n    if (count($odds)\
    \ > 0) {\n        return max($odds);\n    }\n    \n    // No even or odd numbers\
    \ were found\n    return -1;\n}\n", "    $evens = $odds = 0;\n    if ($x < $y)\
    \ {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n\
    \        $max = $x;\n    }\n    for ($i = $min; $i <= $max; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $evens++;\n        } else {\n            $odds++;\n\
    \        }\n    }\n    if ($evens > $odds) {\n        return $min;\n    } else\
    \ {\n        return $max;\n    }\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    \n    while ($min < $max) {\n        $mid = $min + ($max - $min) / 2;\n\
    \        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n\
    \            $max = $mid;\n        }\n    }\n    \n    return $min;\n}", "   \
    \ if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n    if ($x == $y) {\n        return $x;\n    }\n    if ($x > $y) {\n \
    \       return -1;\n    }\n    $x_even = $x_odd = $y;\n    while ($x_even % 2\
    \ == 0) {\n        $x_even /= 2;\n    }\n    while ($x_odd % 2 == 0) {\n     \
    \   $x_odd /= 2;\n    }\n    if ($x_even > $x_odd) {\n        return $x_even;\n\
    \    } else {\n        return $x_odd;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't seem to work. `choose_num(12, 15)` returns `14` instead of `-1`.\n\
    <|/ c |>\n<| c |>\n: It does work. `choose_num(12, 15)` returns `14` because `choose_num(12,\
    \ 15)` is `14`.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c\
    \ |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if ($x\
    \ < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    while ($min <= $max) {\n       \
    \ $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min =\
    \ $mid + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n  \
    \  return $min;\n}", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n\
    \    } else {\n        $min = $y;\n        $max = $x;\n    }\n    do {\n     \
    \   $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min\
    \ = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n    } while\
    \ ($min < $max);\n    return $min;\n}\n", "    if ($x < $y) {\n        $min =\
    \ $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n\
    \    }\n\n    $evens = array();\n    $odds = array();\n    for ($i = $min; $i\
    \ <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n \
    \       } else {\n            $odds[] = $i;\n        }\n    }\n\n    $evens =\
    \ array_merge($evens, $odds);\n    sort($evens);\n    $even = array_pop($evens);\n\
    \n    if ($even > $y) {\n        return -1;\n    }\n\n    return $even;\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nThis doesn't work. Try choose_num(12, 15).\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: It works\
    \ perfectly for me. Try it yourself.\n<|/ c |>\n<| c |>\n: It works perfectly\
    \ for me. Try it yourself.\n<|/ c |>\n<| c |>\n: It works perfectly for me. Try\
    \ it yourself.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    if\
    \ ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n  \
    \  }\n    while ($x < $y) {\n        $x = $x + $y;\n        $y = $y - $x;\n  \
    \  }\n    return $x;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n \
    \   while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid\
    \ % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    }\n    return $min;\n}\n", "    if ($x < $y) {\n   \
    \     $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n     \
    \   $max = $x;\n    }\n    \n    $even = 0;\n    \n    while ($min < $max) {\n\
    \        $even++;\n        $min++;\n    }\n    \n    return $even;\n}\n", "  \
    \  if ($x > $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n    if ($x == $y) {\n        return $x;\n    }\n    if ($x > $y || $x\
    \ == $y || $x == $y - 1) {\n        return -1;\n    }\n    $mid = ($x + $y) /\
    \ 2;\n    if ($mid % 2 == 0) {\n        return choose_num($x, $mid);\n    } else\
    \ {\n        return choose_num($mid, $y);\n    }\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't seem to work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n\
    It works fine for me. `choose_num(12, 15)` returns `14`\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work for `choose_num(12, 15)` because `choose_num(12, 15)` returns `14`\
    \ not `-1`.\n<|/ c |>\n<| c |>\nIt works fine for me. `choose_num(12, 15)` returns\
    \ `14`\n<|/ c |>\n<| c |>\nIt doesn't work for `choose_num(12, 15)` because `choose_num(12,\
    \ 15)` returns `14` not `-1`.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n\
    <?php", "    $even = 0;\n    $odd = 0;\n    \n    if ($x <= $y) {\n        $even\
    \ = $x;\n        $odd = $y;\n    } else {\n        $even = $y;\n        $odd =\
    \ $x;\n    }\n    \n    do {\n        $even++;\n    } while ($even <= $odd);\n\
    \    \n    return $even;\n}\n", "    if ($x < $y) {\n        $min = $x;\n    \
    \    $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    \n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if\
    \ ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n        \
    \    $max = $mid;\n        }\n    }\n    return $min;\n}\n", "    if ($x < $y)\
    \ {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n\
    \        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid = ($min\
    \ + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n \
    \       } else {\n            $max = $mid;\n        }\n    }\n    \n    return\
    \ $min;\n}", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n   \
    \ } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while ($min\
    \ < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n\
    \            $min = $mid + 1;\n        } else {\n            $max = $mid;\n  \
    \      }\n    }\n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n\n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n       \
    \ if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n     \
    \       $max = $mid;\n        }\n    }\n\n    return $min;\n}\n", "    if ($x\
    \ < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n\
    \    \n    if ($x == $y) {\n        return $x;\n    }\n    \n    if ($x > $y)\
    \ {\n        return -1;\n    }\n    \n    $even = 0;\n    $odd = 0;\n    \n  \
    \  for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    \n    if ($even\
    \ > $odd) {\n        return $x;\n    } else {\n        return $y;\n    }\n}\n",
  "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n    $x = $x - 1;\n    $y = $y - 1;\n    while ($x >= $y) {\n        $x\
    \ = $x - 2;\n        $y = $y - 2;\n    }\n    return $x + 1;\n}\n", "    if ($x\
    \ < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid\
    \ + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n    \n \
    \   return $min;\n}", "    $evens = array();\n    $odds = array();\n    for ($i\
    \ = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] =\
    \ $i;\n        } else {\n            $odds[] = $i;\n        }\n    }\n    if (count($evens)\
    \ > count($odds)) {\n        return $evens[count($evens) - 1];\n    } else {\n\
    \        return $odds[count($odds) - 1];\n    }\n}\n", "    if ($x < $y) {\n \
    \       $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n   \
    \     $max = $x;\n    }\n\n    $even = 0;\n    $odd = 0;\n\n    for ($i = $min;\
    \ $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n    \
    \    } else {\n            $odd++;\n        }\n    }\n\n    if ($even > $odd)\
    \ {\n        return $even;\n    } else {\n        return $odd;\n    }\n}\n", " \
    \   if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n    \n    if ($x == $y) {\n        return $x;\n    }\n    \n    if ($x\
    \ % 2 == 0) {\n        return $y;\n    }\n    \n    return choose_num($x, $y -\
    \ 1);\n}\n", "    $evens = array();\n    $odds = array();\n    \n    for ($i =\
    \ $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n\
    \        } else {\n            $odds[] = $i;\n        }\n    }\n    \n    if (count($evens)\
    \ > count($odds)) {\n        return $evens[count($evens) - 1];\n    } else {\n\
    \        return $odds[count($odds) - 1];\n    }\n}", "    if ($x <= $y) {\n  \
    \      $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n    \
    \    $max = $x;\n    }\n    \n    $even = 0;\n    \n    while ($min <= $max) {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $even++;\n        }\n        if ($mid > $max) {\n            $min = $mid + 1;\n\
    \        } else {\n            $max = $mid;\n        }\n    }\n    \n    if ($even\
    \ > 0) {\n        return $min;\n    } else {\n        return -1;\n    }\n}", " \
    \   if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n    \n    while\
    \ ($min <= $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 ==\
    \ 0) {\n            $even++;\n        }\n        if ($mid > $max) {\n        \
    \    $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n\
    \    }\n    \n    if ($even > 0) {\n        return $min;\n    } else {\n     \
    \   return -1;\n    }\n}", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n \
    \   while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid\
    \ % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    }\n    return $min;\n}\n", "    $x = abs($x);\n    $y\
    \ = abs($y);\n    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n    \
    \    $y = $temp;\n    }\n    $x = max($x, $y);\n    $y = min($x, $y);\n    if\
    \ ($x == $y) {\n        return $x;\n    }\n    $x_even = $x % 2 == 0;\n    $y_even\
    \ = $y % 2 == 0;\n    if ($x_even && $y_even) {\n        return $x;\n    }\n \
    \   if ($x_even && !$y_even) {\n        return $y;\n    }\n    if (!$x_even &&\
    \ $y_even) {\n        return $x;\n    }\n    return -1;\n}\n", "    $x = abs($x);\n\
    \    $y = abs($y);\n    if ($x > $y) {\n        $tmp = $x;\n        $x = $y;\n\
    \        $y = $tmp;\n    }\n    if ($x == 0) {\n        return $y;\n    }\n  \
    \  if ($y == 0) {\n        return $x;\n    }\n    if ($x == $y) {\n        return\
    \ $x;\n    }\n    if ($x < $y) {\n        return -1;\n    }\n    $tmp = $x;\n\
    \    $x = $y;\n    $y = $tmp;\n    while ($x > $y) {\n        $x = $x - $y;\n\
    \        $y = $y - $x;\n    }\n    return $y;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php |>\n<code>", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n \
    \   while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid\
    \ % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    }\n    return $min;\n}\n", "    if ($x < $y) {\n   \
    \     $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n     \
    \   $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid = ($min +\
    \ $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n   \
    \     } else {\n            $max = $mid;\n        }\n    }\n    return $min;\n\
    }\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n   \
    \ \n    while ($min < $max) {\n        $even++;\n        $min = $min + $max;\n\
    \    }\n    \n    return $even;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    \n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n   \
    \     if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n \
    \           $max = $mid;\n        }\n    }\n    return $min;\n}\n", "    if ($x\
    \ < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n    \n    while ($min\
    \ < $max) {\n        $even++;\n        $min++;\n        $max--;\n    }\n    \n\
    \    if ($even % 2 == 0) {\n        return $min;\n    } else {\n        return\
    \ -1;\n    }\n}", "    $evens = array();\n    $odds = array();\n    $x = $x -\
    \ 1;\n    $y = $y - 1;\n    for($i = $x; $i <= $y; $i++) {\n        if($i % 2\
    \ == 0) {\n            $evens[] = $i;\n        } else {\n            $odds[] =\
    \ $i;\n        }\n    }\n    if(count($evens) > count($odds)) {\n        return\
    \ $evens[count($evens) - 1];\n    } else {\n        return $odds[count($odds)\
    \ - 1];\n    }\n}", "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n\
    \        $y = $temp;\n    }\n    if ($x == $y) {\n        return $x;\n    }\n\
    \    if ($x > $y) {\n        return -1;\n    }\n    $x_even = $x_odd = $y;\n \
    \   $x_even = $x_odd / 2;\n    $x_odd = $x_even / 2;\n    while ($x_even > $x_odd)\
    \ {\n        $x_even = $x_even / 2;\n        $x_odd = $x_odd / 2;\n    }\n   \
    \ return $x_even;\n}", "    if ($x < $y) {\n        $min = $x;\n        $max =\
    \ $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n   \
    \ $even = 0;\n    \n    while ($min < $max) {\n        $mid = ($min + $max) /\
    \ 2;\n        if ($mid % 2 == 0) {\n            $even++;\n        }\n        if\
    \ ($mid > $max) {\n            $max = $mid;\n        } else {\n            $min\
    \ = $mid + 1;\n        }\n    }\n    \n    if ($even > 0) {\n        return $max;\n\
    \    } else {\n        return -1;\n    }\n}\n", "    $evens = array();\n    $odds\
    \ = array();\n    \n    // Find all even numbers between x and y\n    for ($i\
    \ = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] =\
    \ $i;\n        }\n    }\n    \n    // Find all odd numbers between x and y\n \
    \   for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 != 0) {\n            $odds[]\
    \ = $i;\n        }\n    }\n    \n    // If there are no even or odd numbers between\
    \ x and y, then return -1\n    if (count($evens) == 0 && count($odds) == 0) {\n\
    \        return -1;\n    }\n    \n    // If there are even numbers and no odd\
    \ numbers, then return the highest even\n    if (count($evens) > 0 && count($odds)\
    \ == 0) {\n        return max($evens);\n    }\n    \n    // If there are odd numbers\
    \ and no even numbers, then return the highest odd\n    if (count($evens) == 0\
    \ && count($odds) > 0) {\n        return max($odds);\n    }\n    \n    // If there\
    \ are both even and odd numbers, then return the highest of both\n    if (count($evens)\
    \ > 0 && count($odds) > 0) {\n        return max($evens, $odds);\n    }\n}\n",
  "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n    \
    \    $min = $y;\n        $max = $x;\n    }\n    \n    $even = 0;\n    $odd = 0;\n\
    \    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    \n    if ($even > $odd) {\n        return $min;\n    } else {\n        return\
    \ $max;\n    }\n}", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n\
    \    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $even\
    \ = 0;\n    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $even++;\n        }\n    }\n    \n    if ($even == 0) {\n   \
    \     return -1;\n    }\n    \n    return $min;\n}\n", "    if ($x < $y) {\n \
    \       $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n    $x\
    \ = $x - 1;\n    $y = $y - 1;\n    \n    while ($x >= $y) {\n        $x = $x -\
    \ 2;\n        $y = $y - 2;\n    }\n    \n    return $x + 1;\n}\n", "    if ($x\
    \ < $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min\
    \ = $y;\n        $max = $x;\n    }\n    \n    while ($min <= $max) {\n       \
    \ $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min =\
    \ $mid + 1;\n        } else {\n            $max = $mid;\n        }\n    }\n  \
    \  return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max =\
    \ $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n   \
    \ while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if ($mid %\
    \ 2 == 0) {\n            $min = $mid + 1;\n        } else {\n            $max\
    \ = $mid;\n        }\n    }\n    return $min;\n}\n", "    if ($x <= $y) {\n  \
    \      $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n    \
    \    $max = $x;\n    }\n    \n    $evens = array();\n    \n    for ($i = $min;\
    \ $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n\
    \        }\n    }\n    \n    if (count($evens) == 0) {\n        return -1;\n \
    \   }\n    \n    return max($evens);\n}", "    if ($x < $y) {\n        $min =\
    \ $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n\
    \    }\n    $even = 0;\n    $odd = 0;\n    while ($min < $max) {\n        $mid\
    \ = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n        if ($mid > $max) {\n\
    \            $min = $mid - 1;\n        } else {\n            $max = $mid;\n  \
    \      }\n    }\n    if ($even > $odd) {\n        return $min;\n    } else {\n\
    \        return -1;\n    }\n}\n", "    if ($x < $y) {\n        $min = $x;\n  \
    \      $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \n    $even = 0;\n    $odd = 0;\n    while ($min < $max) {\n        $mid = ($min\
    \ + $max) / 2;\n        if ($mid % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        if ($mid > $max) {\n       \
    \     $max = $mid;\n        } else {\n            $min = $mid + 1;\n        }\n\
    \    }\n\n    if ($even > $odd) {\n        return $max;\n    } else {\n      \
    \  return $min;\n    }\n}\n", "    if ($x <= $y) {\n        $min = $x;\n     \
    \   $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    \n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n        if\
    \ ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n        \
    \    $max = $mid;\n        }\n    }\n    \n    return $min;\n}", "    if ($x <\
    \ $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min =\
    \ $y;\n        $max = $x;\n    }\n    \n    do {\n        $mid = ($min + $max)\
    \ / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        }\
    \ else {\n            $max = $mid;\n        }\n    } while ($min <= $max);\n \
    \   \n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n      \
    \  $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n \
    \   \n    $evens = array();\n    $odds = array();\n    \n    for ($i = $min; $i\
    \ <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n \
    \       } else {\n            $odds[] = $i;\n        }\n    }\n    \n    if (count($evens)\
    \ == 0) {\n        return -1;\n    }\n    \n    $max = max($evens);\n    $min\
    \ = min($odds);\n    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $evens[] = $i;\n        } else {\n            $odds[]\
    \ = $i;\n        }\n    }\n    \n    $max = max($evens);\n    $min = min($odds);\n\
    \    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n \
    \           $evens[] = $i;\n        } else {\n            $odds[] = $i;\n    \
    \    }\n    }\n    \n    $max = max($evens);\n    $min = min($odds);\n    \n \
    \   for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n        \
    \    $evens[] = $i;\n        } else {\n            $odds[] = $i;\n        }\n\
    \    }\n    \n    $max = max($evens);\n    $min = min($odds);\n    \n    for ($i\
    \ = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $evens[]\
    \ = $i;\n        } else {\n            $odds[] = $i;\n        }\n    }\n    \n\
    \    $max = max($evens);\n    $min = min($odds);\n    \n    for ($i = $min; $i\
    \ <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n \
    \       } else {\n            $odds[] = $i;\n        }\n    }\n    \n    $max\
    \ = max($evens);\n    $min = min($odds);\n    \n    for ($i = $min; $i <= $max;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n        } else\
    \ {\n            $odds[] = $i;\n        }\n    }\n    \n    $max = max($evens);\n\
    \    $min = min($odds);\n    \n    for ($i = $min; $i <= $max; $i++) {\n     \
    \   if ($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n       \
    \     $odds[] = $i;\n        }\n    }\n    \n    $max = max($", "    if ($x <\
    \ $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min =\
    \ $y;\n        $max = $x;\n    }\n\n    $evens = array();\n    for ($i = $min;\
    \ $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $evens[] = $i;\n\
    \        }\n    }\n\n    if (count($evens) == 0) {\n        return -1;\n    }\n\
    \n    return max($evens);\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php",
  "    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
    \    }\n    if ($x == $y) {\n        return $x;\n    }\n    if ($x > $y) {\n \
    \       return -1;\n    }\n    $evens = 0;\n    $odds = 0;\n    for ($i = $y;\
    \ $i >= $x; $i--) {\n        if ($i % 2 == 0) {\n            $evens++;\n     \
    \   } else {\n            $odds++;\n        }\n    }\n    if ($evens == $odds)\
    \ {\n        return $x;\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with choose_num(12, 15).\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting it. I think you misunderstood the\
    \ question. He wants to find the biggest even number between 2 numbers. So choose_num(12,\
    \ 15) should return 14. choose_num(13, 12) should return -1. choose_num(12, 15)\
    \ should return 14. choose_num(13, 12) should return -1. choose_num(12, 15) should\
    \ return 14. choose_num(13, 12) should return -1. choose_num(12, 15) should return\
    \ 14. choose_num(13, 12) should return -1. choose_num(12, 15) should return 14.\
    \ choose_num(13, 12) should return -1. choose_num(12, 15) should return 14. choose_num(13,\
    \ 12) should return -1. choose_num(12, 15) should return 14. choose_num(13, 12)\
    \ should return -1. choose_num(12, 15) should return 14. choose_num(13, 12) should\
    \ return -1. choose_num(12, 15) should return 14. choose_num(13, 12) should return\
    \ -1. choose_num(12, 15) should return 14. choose_num(13, 12) should return -1.\
    \ choose_num(12, 15) should return 14. choose_num(13, 12) should return -1. choose_num(12,\
    \ 15) should return 14. choose_num(13, 12) should return -1. choose_num(12, 15)\
    \ should return 14. choose_num(13, 12) should return -1. choose_num(12, 15) should\
    \ return 14. choose_num(13, 12) should return -1. choose_num(12, 15) should return\
    \ 14. choose_num(13, 12) should ", "    if ($x > $y) {\n        $tmp = $x;\n \
    \       $x = $y;\n        $y = $tmp;\n    }\n    if ($x == $y) {\n        return\
    \ $x;\n    }\n    if ($x == 0) {\n        return -1;\n    }\n    if ($y == 0)\
    \ {\n        return -1;\n    }\n    if ($x % 2 == 0) {\n        return choose_num($x\
    \ / 2, $y);\n    }\n    return choose_num($x, $y - 1);\n}", "    if ($x < $y)\
    \ {\n        $min = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n\
    \        $max = $x;\n    }\n    \n    while ($min < $max) {\n        $mid = ($min\
    \ + $max) / 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n \
    \       } else {\n            $max = $mid;\n        }\n    }\n    return $min;\n\
    }\n", "    $evens = $odds = 0;\n    $x = abs($x);\n    $y = abs($y);\n    while\
    \ ($x <= $y) {\n        if ($x % 2 == 0) {\n            $evens++;\n        } else\
    \ {\n            $odds++;\n        }\n        $x++;\n    }\n    if ($evens > $odds)\
    \ {\n        return $evens;\n    } else {\n        return $odds;\n    }\n}", " \
    \   if ($x < $y) {\n        $tmp = $x;\n        $x = $y;\n        $y = $tmp;\n\
    \    }\n    $x = $x - 1;\n    $y = $y - 1;\n    while ($x >= $y) {\n        $x\
    \ = $x - 2;\n        $y = $y - 2;\n    }\n    return $x + 1;\n}", "    if ($x\
    \ < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n\
    \    \n    if ($x == $y) {\n        return $x;\n    }\n    \n    if ($x % 2 ==\
    \ 0) {\n        return $x;\n    }\n    \n    $temp = $x;\n    $x = $y;\n    $y\
    \ = $temp;\n    \n    while ($x % 2 == 0) {\n        $x = $x / 2;\n    }\n   \
    \ \n    while ($y % 2 == 0) {\n        $y = $y / 2;\n    }\n    \n    return $x\
    \ + $y;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max = $y;\n \
    \   } else {\n        $min = $y;\n        $max = $x;\n    }\n    \n    $evens\
    \ = array();\n    \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i %\
    \ 2 == 0) {\n            $evens[] = $i;\n        }\n    }\n    \n    if (count($evens)\
    \ == 0) {\n        return -1;\n    }\n    \n    $even = array_pop($evens);\n \
    \   \n    for ($i = $min; $i <= $max; $i++) {\n        if ($i == $even) {\n  \
    \          return $i;\n        }\n    }\n    \n    return -1;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `choose_num(12, 15)`.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works fine. Did you try it?\n<|/ c |>\n<| c\
    \ |>\nYes, I did. `choose_num(12, 15)` returns `14`, not `-1`.\n<|/ c |>\n<| c\
    \ |>\nOh, I see. Sorry, I misunderstood your question. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nI edited my answer, now it works as expected.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php", "    if ($x < $y) {\n        $temp = $x;\n  \
    \      $x = $y;\n        $y = $temp;\n    }\n    if ($x == $y) {\n        return\
    \ $x;\n    }\n    if ($x % 2 == 0) {\n        return $x;\n    }\n    $temp = $x;\n\
    \    $x = $y;\n    $y = $temp;\n    while ($x % 2 == 0) {\n        $x = $x / 2;\n\
    \    }\n    while ($y % 2 == 0) {\n        $y = $y / 2;\n    }\n    return $x\
    \ + $y;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/10677558)\n\
    <|/ c |>\n<| c |>\nI thought the question was \"how do I find the biggest even\
    \ number between x and y?\" The code I posted does exactly that. How does it not\
    \ answer the question?\n<|/ c |>\n<| c |>\nThe question was \"how do I find the\
    \ biggest even number between x and y?\" The code I posted does exactly that.\
    \ How does it not answer the question?\n<|/ c |>\n<| c |>\nThe code you posted\
    \ does not answer the question. How does it not answer the question?\n<|/ c |>\n\
    <| c |>\nThe code I posted does exactly that. How does it not answer the question?\n\
    <|/ c |>\n<| a tags=php |>\n<code>\n<?php", "    if ($x < $y) {\n        $min\
    \ = $x;\n        $max = $y;\n    } else {\n        $min = $y;\n        $max =\
    \ $x;\n    }\n    \n    while ($min < $max) {\n        $mid = ($min + $max) /\
    \ 2;\n        if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else\
    \ {\n            $max = $mid;\n        }\n    }\n    \n    return $min;\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for small numbers but for big numbers it doesn't work. For example,\
    \ choose_num(10000, 10000) returns 10000 instead of -1. Do you know why this happens?\n\
    <|/ c |>\n<| c |>\nI added a comment to the code explaining why it works.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your code works perfectly for small numbers\
    \ but for big numbers it doesn't work. For example, choose_num(10000, 10000) returns\
    \ 10000 instead of -1. Do you know why this happens?\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the code explaining why it works.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for small numbers but for big numbers\
    \ it doesn't work. For example, choose_num(10000, 10000) returns 10000 instead\
    \ of -1. Do you know why this happens?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "    if ($x <= $y) {\n        $min = $x;\n        $max = $y;\n    } else {\n   \
    \     $min = $y;\n        $max = $x;\n    }\n    \n    while ($min <= $max) {\n\
    \        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n           \
    \ $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n  \
    \  }\n    return $min;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try `choose_num(12, 15)` - it returns `14` instead of `15`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work either. Try `choose_num(12, 15)` - it returns\
    \ `14` instead of `15`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing\
    \ it out. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work either. Try `choose_num(12,\
    \ 15)` - it returns `14` instead of `15`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    if ($x <= $y) {\n        $min = $x;\n        $max = $y;\n    } else\
    \ {\n        $min = $y;\n        $max = $x;\n    }\n    \n    while ($min <= $max)\
    \ {\n        $mid = ($min + $max) / 2;\n        if ($mid % 2 == 0) {\n       \
    \     $min = $mid + 1;\n        } else {\n            $max = $mid;\n        }\n\
    \    }\n    return $min;\n}\n", "    if ($x < $y) {\n        $min = $x;\n    \
    \    $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n\
    \    \n    while ($min <= $max) {\n        $mid = ($min + $max) / 2;\n       \
    \ if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n     \
    \       $max = $mid;\n        }\n    }\n    \n    return $min;\n}\n</code>\n<|/\
    \ a tags=php,math |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12,\
    \ 15)`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. I just tested\
    \ it again and I got 14 back.\n<|/ c |>\n<| c |>\nYeah, I tested it again and\
    \ it works now. Sorry about that. My bad.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works now. Sorry about that. My bad.\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works now. Sorry about that. My bad.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n<?php", "    if ($x <= $y) {\n        $min = $x;\n        $max = $y;\n\
    \    } else {\n        $min = $y;\n        $max = $x;\n    }\n    $even = 0;\n\
    \    $odd = 0;\n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n   \
    \         $even++;\n        } else {\n            $odd++;\n        }\n       \
    \ $min++;\n    }\n    if ($even > $odd) {\n        return $even;\n    } else {\n\
    \        return $odd;\n    }\n}", "    if ($x < $y) {\n        $tmp = $x;\n  \
    \      $x = $y;\n        $y = $tmp;\n    }\n    while ($x < $y) {\n        if\
    \ ($x % 2 == 0) {\n            $x += 2;\n        } else {\n            $x -= 2;\n\
    \        }\n    }\n    return $x;\n}\n", "    if ($x < $y) {\n        $min = $x;\n\
    \        $max = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n  \
    \  }\n    \n    while ($min < $max) {\n        $mid = ($min + $max) / 2;\n   \
    \     if ($mid % 2 == 0) {\n            $min = $mid + 1;\n        } else {\n \
    \           $max = $mid;\n        }\n    }\n    return $min;\n}\n", "    $evens\
    \ = array();\n    $odds = array();\n    for($i = $x; $i <= $y; $i++) {\n     \
    \   if($i % 2 == 0) {\n            $evens[] = $i;\n        } else {\n        \
    \    $odds[] = $i;\n        }\n    }\n    sort($evens);\n    sort($odds);\n  \
    \  foreach($evens as $even) {\n        if($even > $odds[0]) {\n            return\
    \ $even;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,algorithm,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `choose_num(12, 15)` returns `14`, but\
    \ `choose_num(13, 12)` returns `-1`.\n<|/ c |>\n<| c |>\n: You're right. I've\
    \ updated my answer. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n: I've\
    \ updated my answer again. I've tested it and it works now.\n<|/ c |>\n<| c |>\n\
    : I've updated my answer again. I've tested it and it works now.\n<|/ c |>\n<|\
    \ c |>\n: I've updated my answer again. I've tested it and it works now.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n<?php", "    $result = -1;\n    if ($x < $y)\
    \ {\n        for ($i = $x; $i <= $y; $i++) {\n            if ($i % 2 == 0) {\n\
    \                $result = $i;\n            }\n        }\n    }\n    else {\n\
    \        for ($i = $y; $i >= $x; $i--) {\n            if ($i % 2 == 0) {\n   \
    \             $result = $i;\n            }\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `choose_num(12,\
    \ 15)` returns `14`, but `choose_num(13, 12)` returns `-1`.\n<|/ c |>\n<| c |>\n\
    I edited my answer, I forgot to add $x to the for loop. Now it works.\n<|/ c |>\n\
    <| c |>\nI edited my answer, I forgot to add $x to the for loop. Now it works.\n\
    <|/ c |>\n<| c |>\nI edited my answer, I forgot to add $x to the for loop. Now\
    \ it works.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n<?php", "    if ($x < $y)\
    \ {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    if\
    \ ($x == $y) {\n        return $x;\n    }\n    if ($x > $y) {\n        return\
    \ -1;\n    }\n    $x_even = $x % 2 == 0;\n    $y_even = $y % 2 == 0;\n    if ($x_even\
    \ && $y_even) {\n        return $x;\n    }\n    if ($x_even && !$y_even) {\n \
    \       return $y;\n    }\n    if (!$x_even && $y_even) {\n        return $y;\n\
    \    }\n    return -1;\n}", "    if ($x > $y) {\n        $temp = $x;\n       \
    \ $x = $y;\n        $y = $temp;\n    }\n    $x = $x - 1;\n    $y = $y - 1;\n \
    \   while ($x >= $y) {\n        $x = $x - 2;\n        $y = $y - 2;\n    }\n  \
    \  return $x + 1;\n}\n", "    if ($x < $y) {\n        $min = $x;\n        $max\
    \ = $y;\n    } else {\n        $min = $y;\n        $max = $x;\n    }\n    $result\
    \ = -1;\n    while ($min <= $max) {\n        $mid = ($min + $max) / 2;\n     \
    \   if ($mid % 2 == 0) {\n            $result = $mid;\n            break;\n  \
    \      }\n        if ($mid < $min) {\n            $min = $mid + 1;\n        }\
    \ else {\n            $max = $mid - 1;\n        }\n    }\n    return $result;\n\
    }"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
