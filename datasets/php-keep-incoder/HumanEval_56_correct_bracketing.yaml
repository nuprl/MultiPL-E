name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
  <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return $brackets[0] == \"<\" && $brackets[count($brackets) -\
    \ 1] == \">\";\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"\
    </$value>\";\n    }\n  }\n  return count(array_unique($brackets)) == 1;\n}\n",
  "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($value) {\n        return $value\
    \ !== \"\";\n    });\n    return count($brackets) === 0;\n}\n", "  $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $opening_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n    $closing_brackets = preg_split('/[\\\
    <\\>]/', $brackets);\n    $opening_brackets = array_unique($opening_brackets);\n\
    \    $closing_brackets = array_unique($closing_brackets);\n    return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "    $brackets = explode(\"<\", $brackets);\n\
    \    foreach ($brackets as $key => $value) {\n        if ($value != \"<\") {\n\
    \            $brackets[$key] = \">\";\n        }\n    }\n    return $brackets\
    \ == array_reverse($brackets);\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array_fill(0, count($brackets), \">\"));\n    return array_reduce($brackets,\
    \ function($carry, $item) {\n        return $carry && $item === array_pop($brackets);\n\
    \    });\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work for\
    \ `<<><>>` but that's probably because it's not a valid PHP string. `<<<` is valid\
    \ but `<<>>` is not.\n<|/ c |>\n<| c |>\n: I added a version that works with `<<<`\
    \ and `<<>>`.\n<|/ c |>\n<| c |>\n: I added a version that works with `<<<` and\
    \ `<<>>`.\n<|/ c |>\n<| c |>\n: I added a version that works with `<<<` and `<<>>`.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with `<<<` and `<<>>`.\n<|/\
    \ c |>\n<| a tags=php,regex |>\n<code>\n$string = \"<<<\";\n$pattern = \"~<<<(.*?)>>>~\"\
    ;\npreg_match($pattern, $string, $matches);\n$result = $matches[1];\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work for `<<><>>` but that's probably\
    \ because it's not a valid PHP string. `<<<` is valid but `<<>>` is not.\n<|/\
    \ c |>\n<| c |>\n: I added a version that works with `<<<` and `<<>>`.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = \"<<<\";\n$pattern = \"~<<<(.*?)>>>~\"\
    ;\npreg_match($pattern, $string, $matches);\n$result = $matches[1];\necho $result;",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n \
    \       $brackets[$key + 1] = \"<\";\n      }\n    }\n    if ($value == \">\"\
    ) {\n      if ($brackets[$key + 1] == \">\") {\n        $brackets[$key + 1] =\
    \ \">\";\n      }\n    }\n  }\n  return $brackets == array_reverse($brackets);\n\
    }", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n",
  "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_filter($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return\
    \ $brackets == array_reverse($brackets);\n}\n", "  $brackets = explode(\"<\",\
    \ $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets as\
    \ $b) {\n    if ($b == \">\") {\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($el) {\n    return $el != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($key > 0) {\n        $brackets[$key - 1] .= \">\";\n      }\n    } else\
    \ {\n      if ($key < count($brackets) - 1) {\n        $brackets[$key + 1] .=\
    \ \"<\";\n      }\n    }\n  }\n  return $brackets == array_reverse($brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets);\n  return count($brackets) == 0;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    $brackets_count = count($brackets);\n\
    \    for ($i = 0; $i < $brackets_count; $i++) {\n        $opening_brackets[] =\
    \ $brackets[$i];\n        if ($brackets[$i] === '<') {\n            $closing_brackets[]\
    \ = '>';\n        } else {\n            $closing_brackets[] = '<';\n        }\n\
    \    }\n    return count(array_diff($opening_brackets, $closing_brackets)) ===\
    \ 0;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. I'm\
    \ going to test it out and see if it works.\n<|/ c |>\n<| c |>\nI tested it out\
    \ and it works great. Thanks so much!\n<|/ c |>\n<| c |>\nI tested it out and\
    \ it works great. Thanks so much!\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n\
    <?php\n$string
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value == \"<\") {\n      if ($key\
    \ > 0) {\n        $brackets[$key - 1] = \"</\" . $value;\n      }\n    }\n   \
    \ if ($value == \"<\") {\n      if ($key < count($brackets) - 1) {\n        $brackets[$key\
    \ + 1] = \"</\" . $value;\n      }\n    }\n  }\n  return implode(\">\", $brackets)\
    \ == $brackets;\n}\n", "    $opening_brackets = array();\n    $closing_brackets\
    \ = array();\n    $opening_brackets_length = strlen($brackets);\n    for ($i =\
    \ 0; $i < $opening_brackets_length; $i++) {\n        $opening_brackets[$i] = substr($brackets,\
    \ $i, 1);\n    }\n    for ($i = 0; $i < $opening_brackets_length; $i++) {\n  \
    \      if ($opening_brackets[$i] === '<') {\n            $closing_brackets[$i]\
    \ = substr($brackets, $i + 1, 1);\n        }\n    }\n    if ($opening_brackets_length\
    \ != count($closing_brackets)) {\n        return false;\n    }\n    for ($i =\
    \ 0; $i < $opening_brackets_length; $i++) {\n        if ($opening_brackets[$i]\
    \ !== $closing_brackets[$i]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $i => $bracket) {\n   \
    \ if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        $brackets[$i]\
    \ = \"<\" . $bracket . \">\";\n      }\n    }\n  }\n  return implode(\"\", array_reverse($brackets));\n\
    }\n", "    $opening_brackets = array();\n    $closing_brackets = array();\n  \
    \  foreach ($brackets as $bracket) {\n        if ($bracket == \"<\") {\n     \
    \       $opening_brackets[] = \"<\";\n        } else if ($bracket == \">\") {\n\
    \            $closing_brackets[] = \">\";\n        } else {\n            return\
    \ false;\n        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_filter($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array_fill(0, count($brackets), \">\"));\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n   \
    \ }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $b) {\n    if ($b !== \"\
    <\" && $b !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($value) {\n        return $value\
    \ !== \"\";\n    });\n    return count($brackets) === 0;\n}\n", "  $opening_brackets\
    \ = preg_split('/[<>]/', $brackets);\n  $closing_brackets = preg_split('/[<>]/',\
    \ $brackets, -1, PREG_SPLIT_NO_EMPTY);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "  $open_brackets = array();\n  $closed_brackets = array();\n  $open_brackets_count\
    \ = count($brackets);\n  for ($i = 0; $i < $open_brackets_count; $i++) {\n   \
    \ $open_brackets[$i] = $brackets[$i];\n  }\n  for ($i = 0; $i < $open_brackets_count;\
    \ $i++) {\n    if ($open_brackets[$i] === \"<\") {\n      $closed_brackets[$i]\
    \ = \">\";\n    }\n  }\n  return $open_brackets_count === count(array_unique($closed_brackets));\n\
    }\n", "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as\
    \ $key => $value) {\n    if ($key > 0) {\n      if ($value != \"<\") {\n     \
    \   return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $open_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $closed_brackets = preg_split('/[\\\
    <\\>]/', $brackets);\n  return array_diff($open_brackets, $closed_brackets);\n\
    }\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  $brackets = array_merge($brackets,\
    \ array_fill(0, count($brackets), \">\"));\n  return $brackets == array_reverse($brackets);\n\
    }\n", "    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_", " \
    \ $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $b) {\n \
    \   if ($b !== \"<\" && $b !== \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n\
    \  $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n  return (strlen($brackets)\
    \ == 0);\n}", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($value != \"<\") {\n  \
    \      return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i\
    \ < count($brackets) - 1) {\n      if ($brackets[$i + 1] != $b) {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n   \
    \ }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $i => $bracket) {\n    if ($bracket != \">\") {\n      $brackets[$i]\
    \ = \"<\" . $bracket;\n    }\n  }\n  return implode(\">\", $brackets) == $brackets;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return !array_diff($brackets,\
    \ $brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without using regular expressions.\n\
    <|/ c |>\n<| c |>\n: I added a non-regex solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| c |>\n: I added a non-regex solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| c |>\n: I added a non-regex solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| c |>\n: I added a non-regex solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$string = \"<<><>>\";\n$array = explode(\"\
    <\", $string);\n$array = array_reverse($array);\n$array = array_merge($array,\
    \ array(\">\"));\n$array = array_diff($array, $array);\n$string = implode(\"<\"\
    , $array);\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do it without using regular expressions.\n<|/\
    \ c |>\n<| c |>\n: I added a non-regex solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$string = \"<<><>>\";\n$array = explode(\"\
    <\", $string);\n$array = array_reverse($array);\n$array = array_merge($array,\
    \ array(\">\"));\n$array = array_diff($array, $array);\n$string = implode(\"<\"\
    , $array);\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do it without using regular expressions.\n<|/\
    \ c |>\n<| a tags=php,regex |>\n<code>\n$string = \"<<><>>\";\n$array = explode(\"\
    <\", $string);\n$array = array_reverse($array);\n$array = array_merge($array,\
    \ array(\">\"));\n$array = array_diff($array, $array);\n$string = implode(\"<\"\
    , $array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$string\
    \ = \"<<><>>\";\n$array = explode(\"<\", $", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    $b = trim($b);\n    if ($b != \"\") {\n  \
    \    $brackets[$i] = $b;\n      $i++;\n    }\n  }\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_unique($brackets);\n  foreach ($brackets as $b) {\n    if\
    \ ($b !== \"\") {\n      if ($brackets[$i-1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"<<\", $brackets);\n\
    \    $brackets = array_filter($brackets, function($v) { return $v != \">>\"; });\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ $brackets[$key] = \"</$value>\";\n    }\n  }\n  return implode(\"<\", $brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n \
    \   }\n  }\n  return $brackets == array_reverse($brackets);\n}\n", "    $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket", "    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == '<') {\n            $opening_brackets[] = '<';\n\
    \        } else if ($bracket == '>') {\n            $closing_brackets[] = '>';\n\
    \        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n    $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n    $opening_brackets = array_filter($opening_brackets);\n\
    \    $closing_brackets = array_filter($closing_brackets);\n    return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "    $opening_brackets = array();\n    $closing_brackets\
    \ = array();\n    foreach ($brackets as $b) {\n        if ($b == '<') {\n    \
    \        $opening_brackets[] = '<';\n        } else {\n            $opening_brackets[]\
    \ = $b;\n        }\n    }\n    foreach ($opening_brackets as $b) {\n        if\
    \ (!in_array($b, $closing_brackets)) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n  return preg_match_all('/<[^<>]+>/', $brackets);\n}", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\";\n    }\n  }\n\
    \  return implode(\"\", array_reverse($brackets));\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_filter($brackets);\n  return !empty($brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"\
    <\") {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return implode(\"\
    >\", $brackets) == $brackets;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for the answer. I'm going to try this out and see if it works. I appreciate\
    \ your help.\n<|/ c |>\n<| c |>\nThis worked perfectly! Thank you so much! I really\
    \ appreciate it.\n<|/ c |>\n<| a dscore=1 |>\nThis can be done with regular expressions.\n\
    <code>", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n \
    \   }\n  }\n  return $brackets == array_reverse($brackets);\n}\n", "    $brackets\
    \ = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n  \
    \  $brackets = array_filter($brackets, function($v) { return $v != \">\"; });\n\
    \    return count($brackets) == 0;\n}\n", "    $opening_brackets = preg_split('/[\\\
    <\\>]+/', $brackets);\n    $closing_brackets = preg_split('/[\\<\\>]+/', $brackets);\n\
    \    $opening_brackets = array_filter($opening_brackets);\n    $closing_brackets\
    \ = array_filter($closing_brackets);\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n</code>\n<|/ a tags=php,regex,preg-match |>\n<| c |>\nThis doesn't work if\
    \ there are multiple brackets inside each other, e.g. `<<><>><<>`\n<|/ c |>\n\
    <| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it doesn't work. `<<><>><<>` returns `False` instead of `True`.\n<|/ c |>\n\
    <| c |>\n: I tested it and it returns `True` as expected. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nI tested it and it returns `True` as expected. Try it yourself.\n\
    <|/ c |>\n<| a tags=php,regex,preg-match |>\n<code>\n<?php\n$string = \"<<><>><<>\"\
    ;\n$pattern = '/<<>(.*?)<<>/';\npreg_match($pattern, $string, $matches);\nvar_dump($matches);",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    $brackets_length = strlen($brackets);\n\
    \    for ($i = 0; $i < $brackets_length; $i++) {\n        $opening_brackets[]\
    \ = $brackets[$i];\n        if ($brackets[$i] === \"<\") {\n            $closing_brackets[]\
    \ = $brackets[$i + 1];\n        }\n    }\n    if ($closing_brackets === array())\
    \ {\n        return true;\n    }\n    $opening_brackets_length = count($opening_brackets);\n\
    \    $closing_brackets_length = count($closing_brackets);\n    if ($opening_brackets_length\
    \ != $closing_brackets_length) {\n        return false;\n    }\n    for ($i =\
    \ 0; $i < $opening_brackets_length; $i++) {\n        if ($opening_brackets[$i]\
    \ !== \"<\") {\n            return false;\n        }\n    }\n    for ($i = 0;\
    \ $i < $closing_brackets_length; $i++) {\n        if ($closing_brackets[$i] !==\
    \ \">\") {\n            return false;\n        }\n    }\n    return true;\n}",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $opening_brackets\
    \ = explode(\"<\", $brackets);\n    $closing_brackets = explode(\">\", $brackets);\n\
    \    foreach ($opening_brackets as $opening_bracket) {\n        if (!in_array($opening_bracket,\
    \ $closing_brackets)) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key +\
    \ 1] == \"<\") {\n        $brackets[$key + 1] = \"<\";\n      }\n    }\n  }\n\
    \  $brackets = implode(\">\", $brackets);\n  return $brackets == \"<\";\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value != \"<\" && $value != \">\") {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    $opening_brackets = preg_split('/[\\<\\>]/',\
    \ $brackets);\n    $closing_brackets = preg_split('/[\\<\\>]/', $brackets);\n\
    \    $correct_brackets = array_diff($opening_brackets, $closing_brackets);\n \
    \   return count($correct_brackets) == 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThanks for your answer. I'm sorry I didn't specify this in my question,\
    \ but I do need to use regex. I've updated my question to reflect this.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nThis should work:\n<code>\n$string = '<<><>>';\n$opening_brackets\
    \ = preg_split('/[\\<\\>]/', $string);\n$closing_brackets = preg_split('/[\\<\\\
    >]/', $string);\n$correct_brackets = array_diff($opening_brackets, $closing_brackets);\n\
    $correct_brackets = array_diff($correct_brackets, array('>'));\n$correct_brackets\
    \ = array_diff($correct_brackets, array('<'));\n$correct_brackets = array_diff($correct_brackets,\
    \ array('<<'));\n$correct_brackets = array_diff($correct_brackets, array('>>'));\n\
    $correct_brackets = array_diff($correct_brackets, array('<<<'));\n$correct_brackets\
    \ = array_diff($correct_brackets, array('>>>'));\n$correct_brackets = array_diff($correct_brackets,\
    \ array('><<'));\n$correct_brackets = array_diff($correct_brackets, array('<<<'));\n\
    $correct_brackets = array_diff($correct_brackets, array('<<<'));\n$correct_brackets\
    \ = array_diff($correct_brackets, array('<<<'));\n$correct_brackets = array_diff($correct_brackets,\
    \ array('<<<'));\n$correct_brackets = array_diff($correct_brackets, array('<<<'));\n\
    $correct_brackets = array_diff($correct_brackets, array('<<<'));\n$correct_brackets\
    \ = array_diff($correct_brackets, array('<<<'));\n$correct_brackets = array_diff($correct_brackets,\
    \ array('<<<'));\n$correct_brackets = array_diff($correct_brackets, array('<<<'));\n\
    $correct_brackets = array_diff($correct_brackets, array('<<<'));\n$correct_brackets\
    \ = array_diff($correct_brackets, array('<<<'));\n$correct_brackets = array_diff($correct_brackets,\
    \ array('<<<'));\n$correct_brackets = array_diff($correct_bracket", "  $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  return preg_match('/<[^>]*>/',\
    \ $brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n\
    \  foreach ($brackets as $b) {\n    if ($b == '<') {\n      $opening_brackets[]\
    \ = '<';\n    } else if ($b == '>') {\n      $closing_brackets[] = '>';\n    }\n\
    \  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n", " \
    \ $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n \
    \       unset($brackets[$key + 1]);\n      }\n    }\n  }\n  return count($brackets)\
    \ == 0;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != \">\") {\n   \
    \   return (bool) ($brackets[$i] == \">\");\n    }\n  }\n  return false;\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    $brackets_length = strlen($brackets);\n\
    \    for ($i = 0; $i < $brackets_length; $i++) {\n        $opening_brackets[]\
    \ = $brackets[$i];\n        if ($brackets[$i] === \"<\") {\n            $closing_brackets[]\
    \ = \">\";\n        } else {\n            $closing_brackets[] = \"</\";\n    \
    \    }\n    }\n    return array_diff($opening_brackets, $closing_brackets);\n\
    }\n", "  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  return\
    \ preg_match('/<[^<>]+>/', $brackets);\n}\n", "  $opening_brackets = array();\n\
    \  $closing_brackets = array();\n  foreach ($brackets as $b) {\n    if ($b ==\
    \ '<') {\n      $opening_brackets[] = $b;\n    } else {\n      $closing_brackets[]\
    \ = $b;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are\
    \ multiple nested brackets though.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ out. `correct_bracketing(\"<>\") // True`\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ if there are multiple nested brackets though. Try it out. `correct_bracketing(\"\
    <>\") // True`\n<|/ c |>\n<| c |>\n: It doesn't work if there are multiple nested\
    \ brackets though. Try it out. `correct_bracketing(\"<>\") // True`\n<|/ c |>\n\
    <| c |>\n: It doesn't work if there are multiple nested brackets though. Try it\
    \ out. `correct_bracketing(\"<>\") // True`\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n\
    \  return $brackets == array_reverse($brackets);\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \"<\") {\n      $brackets[$key] = \"</$value>\";\n    }\n  }\n  return count(array_diff($brackets,\
    \ array_unique(array_map(\"trim\", $brackets)))) < 2;\n}\n", "    $brackets =\
    \ explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets\
    \ = array_diff($brackets, array(\">\"));\n    return count($brackets) == 0;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"\
    <\") {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  $brackets\
    \ = implode(\">\", $brackets);\n  return $brackets == $brackets;\n}\n", "    $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);", " \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket", "    $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    return $brackets === '<>';\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value === \"<\") {\n    \
    \  if ($brackets[$key + 1] === \">\") {\n        unset($brackets[$key]);\n   \
    \     unset($brackets[$key + 1]);\n      }\n    }\n  }\n  return count($brackets)\
    \ === 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $i => $bracket) {\n    if ($bracket != \">\") {\n      if ($bracket != \"\
    <\") {\n        $brackets[$i] = \">\";\n      }\n    }\n  }\n  return $brackets\
    \ == array_reverse($brackets);\n}\n", "  $opening_brackets = explode(\"<\", $brackets);\n\
    \  $closing_brackets = explode(\">\", $brackets);\n  foreach ($opening_brackets\
    \ as $opening_bracket) {\n    if (!isset($closing_brackets[$opening_bracket]))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n   \
    \ }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n  return preg_match('/<[^<>]+>/', $brackets);\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $opening_brackets =\
    \ explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  foreach ($opening_brackets as $key => $value) {\n    if ($value !== $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $i => $bracket) {\n    if ($bracket != \">\") {\n      if ($bracket != \"\
    <\") {\n        $brackets[$i] = \"<\" . $bracket . \">\";\n      }\n    }\n  }\n\
    \  return implode(\"\", array_reverse($brackets));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks, this was very helpful.\n<|/ c |>\n<| a |>\nI came up with\
    \ a solution that is pretty simple, although it does require a little bit of code.\
    \ \n<code>\n<?php\n\n$string
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return array_reduce($brackets,\
    \ function($correct, $opening_bracket) {\n    return $correct && $opening_bracket\
    \ == array_pop($brackets);\n  }, true);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = '<<><>>';\n$pattern = '~(?<!<)<<(?!>)~';\n$replacement\
    \ = '<<';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = '<<><>>';\n$pattern\
    \ = '~(?<!<)<<(?!>)~';\n$replacement = '<<';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = '<<><>>';\n$pattern = '~(?<!<)<<(?!>)~';\n$replacement\
    \ = '<<';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '<<><>>';\n$pattern\
    \ = '~(?<!<)<<(?!>)~';\n$replacement = '<<';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = '<<><>>';\n$pattern = '~(?<!<)<<(?!>)~';\n$replacement\
    \ = '<<';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '<<><>>';\n$pattern\
    \ = '~(?<!<)<<(?!>)~';\n$replacement = '<<';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a dscore=0 |>\n", "  $open_brackets = preg_split('/[<>]+/',\
    \ $brackets);\n  $closed_brackets = preg_split('/[<>]+/', $brackets);\n  return\
    \ array_diff($open_brackets, $closed_brackets);\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets = array_filter($brackets);\n\
    \  return count($brackets) == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value === \"<\") {\n    \
    \  if ($key === 0) {\n        return false;\n      }\n      if ($key === count($brackets)\
    \ - 1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", " \
    \ $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n\
    \    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != $b) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "  $brackets = preg_replace('/<([^>]*)>/', \"\
    $1\", $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', \"$1\", $brackets);\n\
    \  return $brackets == \"<>\";\n}\n", "    $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "    $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets\
    \ as $b) {\n        if ($b !== \"<\" && $b !== \">\") {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $opening_brackets = explode(\"\
    <\", $brackets);\n    $closing_brackets = explode(\">\", $brackets);\n    foreach\
    \ ($opening_brackets as $opening_bracket => $closing_bracket) {\n        if ($opening_bracket\
    \ != $closing_bracket) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($item) {\n    return $item != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key + 1] = \"\";\n \
    \     }\n    }\n  }\n  $brackets = implode(\">\", $brackets);\n  return $brackets\
    \ == $brackets;\n}\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets\
    \ = array_filter($brackets);\n    $brackets = array_reverse($brackets);\n    $brackets\
    \ = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n   \
    \ $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_reverse($",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets);\n\
    \  $brackets = array_map(\"trim\", $brackets);\n  return count($brackets) == count(array_unique($brackets));\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  $opening_brackets = preg_split('/[<>]+/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n  foreach ($opening_brackets as $key =>\
    \ $value) {\n    if ($value !== $closing_brackets[$key]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer! I tested your function and it works perfectly! But I still don't\
    \ understand why my function doesn't work. Could you please explain it to me?\n\
    <|/ c |>\n<| c |>\nThe reason your function doesn't work is because you're splitting\
    \ on `<` and `>`, but your brackets are `<<><>>`, which means you're splitting\
    \ on `<` and `>` twice. Try splitting on `<<><>>` instead.\n<|/ c |>\n<| c |>\n\
    Oh I see. Thanks for your explanation! I thought that `<<><>>` would be split\
    \ into two strings `<<` and `>>`. But now I understand why it didn't work.\n<|/\
    \ c |>\n<| a tags=php,regex |>\nThe problem is that the regex is splitting on\
    \ < and > twice. Try splitting on <<><>> instead:\n<code>\n$brackets = preg_split('/<<><>>/',\
    \ $brackets);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$brackets\
    \ = \"<<><>>\";\n$brackets = preg_replace('/<[^>]+>/', '', $brackets);\n$brackets\
    \ = preg_replace('/<\\/[^>]+>/', '', $brackets);\n$brackets = preg_replace('/<[^>]+>/',\
    \ '', $brackets);\n$brackets = preg_replace('/<\\/[^>]+>/', '', $brackets);\n\
    $brackets = preg_replace('/<[^>]+>/', '', $brackets);\n$brackets = preg_replace('/<\\\
    /[^>]+>/', '', $brackets);\n$brackets = preg_replace('/<[^>]+>/', '', $brackets);\n\
    $brackets = preg_replace('/<\\/[^>]+>/', '', $brackets);\n$brackets = preg_replace('/<[^>]+>/',\
    \ '', $brackets);\n$brackets = preg_replace('/<\\/[^>]+>/', '', $brackets);\n\
    $brackets = preg_replace('/<[^>]+>/', '', $brackets);\n$brackets = ", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets\
    \ = array_filter($brackets);\n  return $brackets == array_reverse($brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"\
    <\") {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return $brackets\
    \ == array_reverse($brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<<>>\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value[0] != \"<\" || $value[strlen($value)\
    \ - 1] != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \ $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      if ($key > 0) {\n        $brackets[$key\
    \ - 1] = \"</\" . $brackets[$key - 1];\n      }\n    }\n  }\n  return implode(\"\
    >\", $brackets) == $brackets;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        $brackets[$i]\
    \ = \"<\";\n      }\n    }\n  }\n  $brackets = array_reverse($brackets);\n  $brackets\
    \ = implode(\">\", $brackets);\n  return $brackets == $brackets;\n}\n", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value == \"<\") {\n      if ($key\
    \ > 0) {\n        $brackets[$key - 1] .= \">\";\n      }\n    }\n  }\n  return\
    \ $brackets[0] == \">\" && $brackets[1] == \">\";\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \"<\") {\n      $brackets[$key] = \"</\" . $value . \">\";\n    }\n  }\n  return\
    \ $brackets == array_reverse($brackets);\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $opening_brackets = preg_split('/[\\<\\>]+/',\
    \ $brackets);\n  $closing_brackets = preg_split('/[\\<\\>]+/', $brackets);\n \
    \ $opening_brackets = array_flip($opening_brackets);\n  $closing_brackets = array_flip($closing_brackets);\n\
    \  return array_diff_key($opening_brackets, $closing_brackets);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n\
    : It works fine for me. `var_dump(correct_bracketing('<<><>>'))` returns `array(1)\
    \ { [\"<<\"]=> string(1) \">\" }`.\n<|/ c |>\n<| c |>\n: I see what you mean.\
    \ I've updated my answer to account for that case.\n<|/ c |>\n<| c |>\n: I see\
    \ what you mean. I've updated my answer to account for that case.\n<|/ c |>\n\
    <| c |>\n: I see what you mean. I've updated my answer to account for that case.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $opening_brackets = preg_split('/[<>]+/', $brackets);\n\
    \  $closing_brackets = preg_split('/[<>]+/', $brackets);\n  foreach ($opening_brackets\
    \ as $key => $value) {\n    if ($value !== $closing_brackets[$key]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/', $brackets);\n\
    }", "  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = \"<\";\n    } else if ($bracket == \">\") {\n      $closing_brackets[] = \"\
    >\";\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as\
    \ $i => $bracket) {\n    if ($bracket != \">\") {\n      $brackets[$i] = \"<\"\
    \ . $bracket . \">\";\n    }\n  }\n  return implode(\" \", $brackets) == $brackets;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your answer, but this doesn't\
    \ work for me. I've added a test case to my question to show why it fails.\n<|/\
    \ c |>\n<| c |>\nI added a test case to my question to show why it fails.\n<|/\
    \ c |>\n<| c |>\nI added a test case to my question to show why it fails.\n<|/\
    \ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\n$string = '<<><>>';\n\
    $pattern = '~<(<)>~';\n$replacement = '$1';\n$result = preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ answer, but this doesn't work for me. I've added a test case to my question\
    \ to show why it fails.\n<|/ c |>\n<| a dscore=0 |>\nThis should work:\n<code>\n\
    <?php\n$string = '<<><>>';\n$pattern = '~<(<)>~';\n$replacement = '$1';\n$result\
    \ = preg_replace($pattern, $replacement, $string);\necho $result;", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i > 0) {\n   \
    \   if ($brackets[$i - 1] != $b) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value == \"<\") {\n      if ($key > 0) {\n  \
    \      $brackets[$key - 1] = \"</\" . $brackets[$key - 1];\n      }\n    } else\
    \ {\n      if ($key < count($brackets) - 1) {\n        $brackets[$key + 1] = \"\
    </\" . $brackets[$key + 1];\n      }\n    }\n  }\n  return implode(\">\", $brackets)\
    \ == $brackets;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $b) {\n    if ($b == '<') {\n      $opening_brackets[] = $b;\n\
    \    }\n    if ($b == '>') {\n      $closing_brackets[] = $b;\n    }\n  }\n  return\
    \ count($opening_brackets) == count($closing_brackets);\n}\n", "  $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>$/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n", " \
    \ $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    foreach ($brackets as $key => $value) {\n        if ($value\
    \ == \"<\") {\n            $brackets[$key] = \">\";\n        }\n    }\n    return\
    \ $brackets == array_reverse($brackets);\n}\n", "  $opening_brackets = array();\n\
    \  $closing_brackets = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket\
    \ == \"<\") {\n      $opening_brackets[] = \"<\";\n    } else if ($bracket ==\
    \ \">\") {\n      $closing_brackets[] = \">\";\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis\
    \ doesn't seem to work when there are multiple brackets inside each other. For\
    \ example: `
  "    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $i => $bracket)\
    \ {\n        if ($bracket != \">\") {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value == \"<\") {\n      $brackets[$key]\
    \ = \">\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value === \"<\") {\n      if ($key === 0) {\n        return false;\n\
    \      }\n      $brackets[$key] = \"</$value>\";\n    }\n  }\n  return implode(\"\
    <\", $brackets);\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \  return preg_match_all('/<[^<>]+>/', $brackets);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nI like your solution, but I feel like it would be better to use\
    \ a stack to keep track of opening and closing brackets. That way you don't have\
    \ to worry about nested brackets.\n<|/ c |>\n<| c |>\nI agree with you, but I\
    \ didn't want to complicate the code too much. Also I wanted to keep it simple\
    \ and easy to understand.\n<|/ c |>\n<| c |>\nI agree, but I wanted to keep it\
    \ simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you, but I didn't\
    \ want to complicate the code too much. Also I wanted to keep it simple and easy\
    \ to understand.\n<|/ c |>\n<| c |>\nI agree with you, but I didn't want to complicate\
    \ the code too much. Also I wanted to keep it simple and easy to understand.\n\
    <|/ c |>\n<| a |>\nI wrote a PHP script that does this for me. \n<code>\n<?php\n\
    \n$string = \"<><><>\";\n\n$opening_brackets = array();\n$closing_brackets = array();\n\
    \n$opening_brackets_count = preg_match_all('/<[^>]+>/i', $string, $opening_brackets);\n\
    $closing_brackets_count = preg_match_all('/<\\/[^>]+>/i', $string, $closing_brackets);\n\
    \n$opening_brackets_count = count($opening_brackets[0]);\n$closing_brackets_count\
    \ = count($closing_brackets[0]);\n\n$opening_brackets_count = count($opening_brackets);\n\
    $closing_brackets_count = count($closing_brackets);\n\n$opening_brackets_count\
    \ = count($opening_brackets);\n\n$closing_brackets_count = count($closing_brackets);\n\
    \n$opening_brackets_count = count($opening_brackets);\n\n$closing_brackets_count\
    \ = count($closing_brackets);\n\n$opening_brackets_count = count($opening_brackets);\n\
    \n$closing_brackets_count = count($closing_brackets);\n\n$opening_brackets_count\
    \ = count($opening_brackets);\n\n$closing", "  $brackets = explode(\"<\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  $brackets = array_filter($brackets,\
    \ function($value) {\n    return $value !== \">\";\n  });\n  return count($brackets)\
    \ === 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return $brackets[0] ===\
    \ $brackets[1];\n}\n", "    $opening_brackets = explode(\"<\", $brackets);\n \
    \   $closing_brackets = explode(\">\", $brackets);\n    $opening_brackets_count\
    \ = count($opening_brackets);\n    $closing_brackets_count = count($closing_brackets);\n\
    \    $correct_bracketing = true;\n    for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n        if ($opening_brackets[$i] != $closing_brackets[$i]) {\n   \
    \         $correct_bracketing = false;\n            break;\n        }\n    }\n\
    \    return $correct_bracketing;\n}\n", "    $brackets = preg_replace('/<\\/?[^<>]*>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    return $brackets === '<>';\n}\n", "  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "    $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "  $open_brackets = explode(\"<\", $brackets);\n  $closed_brackets\
    \ = explode(\">\", $brackets);\n  foreach ($open_brackets as $key => $open) {\n\
    \    if ($open != $closed_brackets[$key]) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value)\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<\\/*[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<[^<>]+\\/*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/?[^<>]+\\/*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = ", "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n    return $brackets\
    \ === '<>';\n}\n</code>\n<|/ a tags=php,regex,preg-match-all,preg-match |>\n<|\
    \ c |>\nThanks for your answer, but this doesn't work. `preg_match_all` returns\
    \ an empty array when there are no matches. I updated my question to show an example\
    \ of a string that doesn't work.\n<|/ c |>\n<| c |>\n: I updated my answer to\
    \ show a function that will correctly identify brackets.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! Unfortunately it doesn't work. `preg_match_all` returns\
    \ an empty array when there are no matches. I updated my question to show an example\
    \ of a string that doesn't work.\n<|/ c |>\n<| c |>\n: I updated my answer to\
    \ show a function that will correctly identify brackets.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! Unfortunately it doesn't work. `preg_match_all` returns\
    \ an empty array when there are no matches. I updated my question to show an example\
    \ of a string that doesn't work.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string = '[foo]';\npreg_match_all('/\\[([^\\]]+)\\]/', $string, $matches);\n\
    var_dump($matches);\n</code>\n<|/ a tags=php,regex,preg-match-all,preg-match |>\n\
    <| c |>\nThanks for your answer, but this doesn't work. `preg_match_all` returns\
    \ an empty array when there are no matches. I updated my question to show an example\
    \ of a string that doesn't work.\n<|/ c |>\n<| a |>\n<code>\n$string = '[foo]';\n\
    preg_match_all('/\\[([^\\]]+)\\]/', $string, $matches);\nvar_dump($matches);\n\
    </code>\n<|/ a tags=php,regex,preg-match-all,preg-match dscore=0 |>\n<| c |>\n\
    Thanks for your answer, but this doesn't work. `preg_match_all` returns an empty\
    \ array when there are no matches. I updated my question to show an example of\
    \ a string that doesn't work.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$string = '[foo]';\n\
    preg_match_all('/\\[", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $i => $b) {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i\
    \ + 1] != \">\") {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets =\
    \ preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\"\
    , \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n\
    \  $brackets = preg_replace(\"/<+>/\", \"<\", $brackets);\n  $brackets = preg_replace(\"\
    /<+>/\", \"<\", $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ $brackets[$key] = \">\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($item) {\n    return $item != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<<>>\", $brackets);\n\
    \  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach ($brackets\
    \ as $bracket) {\n    if (strpos($bracket, \"<\") !== false) {\n      $opening_brackets[]\
    \ = $bracket;\n    } else {\n      $closing_brackets[] = $bracket;\n    }\n  }\n\
    \  return count($opening_brackets) == count($closing_brackets);\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n    if ($b !==\
    \ \"<\") {\n      if ($b !== \">\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<[^<>]+>$/', '', $brackets);\n  return\
    \ ($brackets === '<>');\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = \"[\";\n      $closing_brackets[] = \"]\";\n\
    \    } else if ($bracket == \">\") {\n      $opening_brackets[] = \"]\";\n   \
    \   $closing_brackets[] = \"[\";\n    } else {\n      $opening_brackets[] = $bracket;\n\
    \      $closing_brackets[] = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ $brackets[$key] = \"</\" . $value . \">\";\n    }\n  }\n  return $brackets ==\
    \ array_reverse($brackets);\n}\n", "    $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "    $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return !array_diff($brackets, $brackets);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for `<<><>>` but does work for `<<<>>`\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting. Try it yourself\
    \ and see.\n<|/ c |>\n<| c |>\nI tested it on `<<<>>` but on `<<><>>` it returns\
    \ `true`\n<|/ c |>\n<| c |>\n: I tested it on `<<<>>` but on `<<><>>` it returns\
    \ `true`\n<|/ c |>\n<| c |>\n: I tested it on `<<<>>` but on `<<><>>` it returns\
    \ `true`\n<|/ c |>\n<| a |>\nThis should work:\n<code>", "  $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/', $brackets);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work for me. `correct_bracketing(\"\
    <\")` returns false and `correct_bracketing(\"<>\")` returns true.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_diff($brackets, array(\">\"));\n  return !empty($brackets);\n\
    }\n", "  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);", "  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets\
    \ = explode(\">\", $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ so much for the detailed answer. I'm going to try this out and see how it goes.\
    \ I appreciate it!\n<|/ c |>\n<| c |>\nI added a test case to my question to show\
    \ that your function doesn't work. Can you please take a look and let me know\
    \ what I'm doing wrong? Thanks so much!\n<|/ c |>\n<| c |>\nI added a test case\
    \ to my question to show that your function doesn't work. Can you please take\
    \ a look and let me know what I'm doing wrong? Thanks so much!\n<|/ c |>\n<| c\
    \ |>\nI added a test case to my question to show that your function doesn't work.\
    \ Can you please take a look and let me know what I'm doing wrong? Thanks so much!\n\
    <|/ c |>\n<| c |>\nI added a test case to my question to show that your function\
    \ doesn't work. Can you please take a look and let me know what I'm doing wrong?\
    \ Thanks so much!\n<|/ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\n\
    <?php", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    foreach ($brackets as $key => $value) {\n        if ($value\
    \ != \"<\") {\n            $brackets[$key] = \"</$value>\";\n        }\n    }\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
