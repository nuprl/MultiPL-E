name: HumanEval_30_get_positive
language: php
prompt: "<?php\n// Return only positive numbers in the list.\n// >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive($l) {\n"
tests: "function candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
  \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  return array_filter($l, function($v) { return $v > 0; });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=2 |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    $arr2 = array();\n$arr3 = array();\n$arr4 = array();\n$arr5 = array();\n$arr6\
    \ = array();\n$arr7 = array();\n$arr8 = array();\n$arr9 = array();\n$arr10 = array();\n\
    $arr11 = array();\n$arr12 = array();\n$arr13 = array();\n$arr14 = array();\n$arr15\
    \ = array();\n$arr16 = array();\n$arr17 = array();\n$arr18 = array();\n$arr19\
    \ = array();\n$arr20 = array();\n$arr21 = array();\n$arr22 = array();\n$arr23\
    \ = array();\n$arr24 = array();\n$arr25 = array();\n$arr26 = array();\n$arr27\
    \ = array();\n$arr28 = array();\n$arr29 = array();\n$arr30 = array();\n$arr31\
    \ = array();\n$arr32 = array();\n$arr33 = array();\n$arr34 = array();\n$arr35\
    \ = array();\n$arr36 = array();\n$arr37 = array();\n$arr38 = array();\n$arr39\
    \ = array();\n$arr40 = array();\n$arr41 = array();\n$arr42 = array();\n$arr43\
    \ = array();\n$arr44 = array();\n$arr45 = array();\n$arr46 = array();\n$arr47\
    \ = array();\n$arr48 = array();\n", "  return array_filter($l, function ($v) {\
    \ return $v > 0; });\n}\n", "  return array_filter($l, function($v) { return $v\
    \ > 0; });\n}\n", "    return array_filter($l, function($v) { return $v > 0; });\n\
    }\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as\
    \ $value) {\n    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n\
    \  return $positive;\n}\n", "  return array_filter($l, function ($v) { return\
    \ $v > 0; });\n}\n", "  return array_filter($l, function ($v) { return $v > 0;\
    \ });\n}\n", "    return array_filter($l, function($v) {\n        return $v >\
    \ 0;\n    });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n    if ($value\
    \ > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n}\n",
  "    return array_filter($l, function($v) { return $v > 0; });\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n   \
    \ 0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n \
    \   6 => 7,\n    7 => 8,\n    8 => 9,\n    9 => 10,\n    10 => 11,\n    11 =>\
    \ 12,\n    12 => 13,\n    13 => 14,\n    14 => 15,\n    15 => 16,\n    16 => 17,\n\
    \    17 => 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n    21 => 22,\n \
    \   22 => 23,\n    23 => 24,\n    24 => 25,\n    25 => 26,\n    26 => 27,\n  \
    \  27 => 28,\n    28 => 29,\n    29 => 30,\n    30 => 31,\n    31 => 32,\n   \
    \ 32 => 33,\n    33 => 34,\n    34 => 35,\n    35 => 36,\n    36 => 37,\n    37\
    \ => 38,\n    38 => 39,\n    39 => 40,\n    40 => 41,\n    41 => 42,\n    42 =>\
    \ 43,\n    43 => 44,\n    44 => 45,\n    45 => 46,\n    46 => 47,\n    47 => 48,\n\
    \    48 => 49,\n    49 => 50,\n    50 => 51,\n    51 => 52,\n    52 => 53,\n \
    \   53 => 54,\n    54 => 55,\n    55 => 56,\n    56 => 57,\n    57 => 58,\n  \
    \  58 => 59,\n    59 => 60,\n    60 => 61,\n    61 => 62,\n    62 => 63,\n   \
    \ 63 => 64,\n    64 => 65,\n    65 => 66,\n    66 => 67,\n    67 => 68,\n    68\
    \ => 69,\n    69 => 70,\n    70 => 71,\n    71 => 72,\n    72 => 73,\n    73 =>\
    \ 74,\n    74 => 75,\n    75 => 76,\n    76 => 77,\n    77 => 78,\n    78 => 79,\n\
    \    79 => 80,\n    80 ", "  return array_filter($l, function ($v) { return $v\
    \ > 0; });\n}", "  return array_filter($l, function($v) { return $v > 0; });\n\
    }\n", "  $positive = [];\n  foreach ($l as $item) {\n    if ($item > 0) {\n  \
    \    $positive[] = $item;\n    }\n  }\n  return $positive;\n}\n", "    return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "    return array_filter($l, function ($v) { return\
    \ $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $item) {\n    if ($item\
    \ > 0) {\n      $positive[] = $item;\n    }\n  }\n  return $positive;\n}\n", " \
    \ $positive = [];\n  foreach ($l as $item) {\n    if ($item > 0) {\n      $positive[]\
    \ = $item;\n    }\n  }\n  return $positive;\n}\n", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "  return array_filter($l, function ($v) { return $v > 0;\
    \ });\n}\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n",
  "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "    return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n\
    \    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n\
    }\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  \
    \  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as\
    \ $value) {\n    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n\
    \  return $positive;\n}\n", "    return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "    return array_filter($l, function($v) { return $v > 0;\
    \ });\n}\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n",
  "    return array_filter($l, function($v) { return $v > 0; });\n}\n", "  return\
    \ array_filter($l, function ($v) { return $v > 0; });\n}", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n    if ($value\
    \ > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n}", " \
    \ return array_filter($l, function($v) { return $v > 0; });\n}\n", "    return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "    return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "    return array_filter($l, function ($v) { return $v >\
    \ 0; });\n}\n", "  return array_filter($l, function($v) {\n    return $v > 0;\n\
    \  });\n}\n", "  return array_filter($l, function ($v) { return $v > 0; });\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers in the array and you only want to keep positive ones\n\
    <|/ c |>\n<| c |>\nI added a solution that does that.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that does that.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $array = array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\n$array = array_filter($array, function($v){return $v > 0;});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have negative numbers in\
    \ the array and you only want to keep positive ones\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers in the array and you only want to keep positive\
    \ ones\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the\
    \ array and you only want to keep positive ones\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers in the array and you only want to keep positive\
    \ ones\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the\
    \ array and you only want to keep positive ones\n<|/ c |>\n<| a |>\n<code>\n$array\
    \ = array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10);\n$array = array_filter($array, function($v){return $v > 0;});\n</code>\n\
    <|/ a dscore=5 tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers in the array and you only want to keep positive ones\n<|/ c\
    \ |>\n<| a dscore=4 |>\n<code>\n$array = array(-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$array = array_filter($array, function($v){return\
    \ $v > 0;});\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10);\n$array = array_filter($array, function($v){return\
    \ $v > 0;});\n", "  return array_filter($l, function($v) { return $v > 0; });\n\
    }\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  return\
    \ array_filter($l, function($n) {\n    return $n > 0;\n  });\n}\n", "    return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive = [];\n\
    \  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[] = $value;\n\
    \    }\n  }\n  return $positive;\n}", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n$arr = [-1, 2, -4, 5, 6];\n$positive = array_filter($arr, function($v)\
    \ { return $v > 0; });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    $arr = [-1, 2, -4, 5, 6];\n$positive = array_filter($arr, function($v) { return\
    \ $v > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$arr\
    \ = [-1, 2, -4, 5, 6];\n$positive = array_filter($arr, function($v) { return $v\
    \ > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$arr\
    \ = [-1, 2, -4, 5, 6];\n$positive = array_filter($arr, function($v) { return $v\
    \ > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$arr\
    \ = [-1, 2, -4, 5, 6];\n$positive = array_filter($arr, function($v) { return $v\
    \ > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $arr = [-1, 2, -4, 5, 6];\n$positive = array_filter($arr, function($v) { return\
    \ $v > 0; });\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$arr = [-1, 2, -4,\
    \ 5, 6];\n$positive = array_filter($arr, function($v) { return $v > 0; });\n</code>\n\
    <|/ a dscore=0 tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$arr = [-1, 2, -4,\
    \ 5, 6];\n$positive = array_filter($arr, function($v) { return $v > 0; });\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n\
    $positive = array_filter($arr, function($v) { return $v > 0; });\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n\
    $positive = array_filter($arr, function($v) { return $v > 0; });\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n\
    \    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n\
    }\n", "  return array_filter($l, function($n) {\n    return $n >= 0;\n  });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more elegant than using array_filter and array_reduce.\n<|/ c |>\n<| c |>\n\
    I agree with you, this is much more elegant than array_filter and array_reduce.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ using array_filter and array_reduce.\n<|/ c |>\n<| c |>\nI agree with you, this\
    \ is much more elegant than array_filter and array_reduce.\n<|/ c |>\n<| c |>\n\
    I agree with you, this is much more elegant than array_filter and array_reduce.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$positive = array_filter($array, function($n)\
    \ {\n    return $n > 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant than using array_filter and\
    \ array_reduce.\n<|/ c |>\n<| c |>\nI agree with you, this is much more elegant\
    \ than array_filter and array_reduce.\n<|/ c |>\n<| c |>\nI agree with you, this\
    \ is much more elegant than array_filter and array_reduce.\n<|/ c |>\n<| c |>\n\
    I agree with you, this is much more elegant than array_filter and array_reduce.\n\
    <|/ c |>\n<| c |>\nI agree with you, this is much more elegant than array_filter\
    \ and array_reduce.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$positive = array_filter($array,\
    \ function($n) {\n    return $n > 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than using array_filter\
    \ and array_reduce.\n<|/ c |>\n<| c |>\nI agree with you, this is much more elegant\
    \ than array_filter and array_reduce.\n<|/ c |>\n<| c |>\nI agree with you, this\
    \ is much more elegant than array_filter and array_reduce.\n<|/ c |>\n<| a tags=arrays,php ",
  "    $positive = [];\n    foreach ($l as $item) {\n        if ($item > 0) {\n  \
    \          $positive[] = $item;\n        }\n    }\n    return $positive;\n}\n",
  "    $positive = [];\n    foreach ($l as $value) {\n        if ($value > 0) {\n\
    \            $positive[] = $value;\n        }\n    }\n    return $positive;\n\
    }\n", "    return array_filter($l, function($v) { return $v > 0; });\n}\n", " \
    \ $positive = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "    $positive = [];\n    foreach ($l\
    \ as $value) {\n        if ($value > 0) {\n            $positive[] = $value;\n\
    \        }\n    }\n    return $positive;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$arr = [\n    0 => [\n        'id' => 1,\n   \
    \     'name' => 'John',\n        'age' => 30,\n        'sex' => 'Male',\n    ],\n\
    \    1 => [\n        'id' => 2,\n        'name' => 'Jane',\n        'age' => 25,\n\
    \        'sex' => 'Female',\n    ],\n    2 => [\n        'id' => 3,\n        'name'\
    \ => 'Jack',\n        'age' => 20,\n        'sex' => 'Male',\n    ],\n    3 =>\
    \ [\n        'id' => 4,\n        'name' => 'Jill',\n        'age' => 30,\n   \
    \     'sex' => 'Male',\n    ],\n    4 => [\n        'id' => 5,\n        'name'\
    \ => 'Jack',\n        'age' => 20,\n        'sex' => 'Male',\n    ],\n];\n\n$newArr\
    \ = array();\nforeach ($arr as $key => $value) {\n    if ($value['age'] > 30)\
    \ {\n        $newArr[$key] = $value;\n    }\n}\n\n$newArr = array_values($newArr);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$arr = [\n    0 => [\n        'id' => 1,\n        'name' => 'John',\n\
    \        'age' => 30,\n        'sex' => 'Male',\n    ],\n    1 => [\n        'id'\
    \ => 2,\n        'name' => 'Jane',\n        'age' => 25,\n        'sex' => 'Female',\n\
    \    ],\n    2 => [\n        'id' => 3,\n        'name' => 'Jack',\n        'age'\
    \ => 20,\n        'sex' => 'Male',\n    ],\n    3 => [\n        'id' => 4,\n \
    \       'name' => 'Jill',\n        'age' => 30,\n        'sex' => 'Male',\n  \
    \  ],\n    4 => [\n        'id' => 5,\n        'name' => 'Jack',\n        'age'\
    \ => 20,\n        'sex' => 'Male',\n    ],\n];\n\n$newArr = array();\nforeach\
    \ ($arr as $key => $value) {\n    if ($value['age", "    $positive = [];\n   \
    \ foreach ($l as $value) {\n        if ($value > 0) {\n            $positive[]\
    \ = $value;\n        }\n    }\n    return $positive;\n}\n", "  return array_filter($l,\
    \ function ($v) { return $v > 0; });\n}\n", "    return array_filter($l, function\
    \ ($v) { return $v > 0; });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI\
    \ like this solution, but I feel like it could be made more efficient by using\
    \ a `foreach` loop and `array_search` instead of `array_filter`\n<|/ c |>\n<|\
    \ c |>\nI agree with you, `array_filter` should be more efficient. I'll add an\
    \ example using `array_search`.\n<|/ c |>\n<| c |>\nI added an example using `array_search`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = [\n    0 => 1,\n    1 => 2,\n\
    \    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n];\n\n$positive = array_filter($array,\
    \ function ($v) {\n    return $v > 0;\n});\n\nvar_dump($positive);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\n    0 =>\
    \ 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n);\n\n\
    $positive = array_filter($array, function ($v) { return $v > 0; });\n\nvar_dump($positive);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n\
    \    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n\
    );\n\n$positive = array_filter($array, function ($v) { return $v > 0; });\n\n\
    var_dump($positive);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 =>\
    \ 5,\n    5 => 6,\n);\n\n$positive = array_filter($array, function ($v) { return\
    \ $v > 0; });\n\nvar_dump($positive);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 =>\
    \ 4,\n    4 => 5,\n    5 => 6,\n);\n\n$positive = array_filter($array, function\
    \ ($v) { return $v > 0; });\n\nvar_dump($positive", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as\
    \ $item) {\n    if ($item > 0) {\n      $positive[] = $item;\n    }\n  }\n  return\
    \ $positive;\n}\n", "  $positive = [];\n  foreach ($l as $item) {\n    if ($item\
    \ > 0) {\n      $positive[] = $item;\n    }\n  }\n  return $positive;\n}\n", " \
    \ return array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function\
    \ ($v) { return $v > 0; });\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    $arr = [-1, 2, -4, 5, 6];\n$arr2 = array_filter($arr, function ($v) { return $v\
    \ > 0; });\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n\
    $arr = [-1, 2, -4, 5, 6];\n$arr2 = array_filter($arr, function ($v) { return $v\
    \ > 0; });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n\
    $arr = [-1, 2, -4, 5, 6];\n$arr2 = array_filter($arr, function ($v) { return $v\
    \ > 0; });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$arr = [-1,\
    \ 2, -4, 5, 6];\n$arr2 = array_filter($arr, function ($v) { return $v > 0; });\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$arr = [-1, 2, -4,\
    \ 5, 6];\n$arr2 = array_filter($arr, function ($v) { return $v > 0; });\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$arr = [-1, 2, -4,\
    \ 5, 6];\n$arr2 = array_filter($arr, function ($v) { return $v > 0; });\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n$arr2\
    \ = array_filter($arr, function ($v) { return $v > 0; });\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n$arr2 = array_filter($arr,\
    \ function ($v) { return $v > 0; });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n$arr2 = array_filter($arr, function ($v)\
    \ { return $v > 0; });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n$arr2 = array_filter($arr, function ($v)\
    \ { return $v > 0; });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=", "  return array_filter($l,\
    \ function($v) {\n    return $v > 0;\n  });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(1, 2, 3, -4, -5, -6);\n$positive = array_filter($array,\
    \ function($v) { return $v > 0; });\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(1, 2, 3, -4, -5, -6);\n$positive = array_filter($array,\
    \ function($v) { return $v > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(1, 2, 3, -4, -5, -6);\n$positive = array_filter($array,\
    \ function($v) { return $v > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n\
    <code>\n$array = array(1, 2, 3, -4, -5, -6);\n$positive = array_filter($array,\
    \ function($v) { return $v > 0; });\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(1, 2, 3, -4, -5, -6);\n$positive\
    \ = array_filter($array, function($v) { return $v > 0; });\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, -4, -5, -6);\n$positive\
    \ = array_filter($array, function($v) { return $v > 0; });\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1, 2, 3, -4, -5, -6);\n\
    $positive = array_filter($array, function($v) { return $v > 0; });\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 2, 3, -4, -5, -6);\n\
    $positive = array_filter($array, function($v) { return $v > 0; });\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1, 2,\
    \ 3, -4, -5, -6);\n$positive = array_filter($array, function($v) { return $v >\
    \ 0; });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(1,\
    \ 2, 3, -4, -5, -6);\n$positive = array_filter($array, function($v) { return $v",
  "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| c |>\nI like your solution, however it only works with positive numbers.\
    \ I edited my question to include a negative number example.\n<|/ c |>\n<| c |>\n\
    : I added a solution for negative numbers as well.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, however it only works with positive numbers. I edited my question\
    \ to include a negative number example.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ for negative numbers as well.\n<|/ c |>\n<| c |>\nI like your solution, however\
    \ it only works with positive numbers. I edited my question to include a negative\
    \ number example.\n<|/ c |>\n<| a tags=arrays,php,sorting |>\n<code>\n$array =\
    \ array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n\
    $array = array_filter($array, function($v) { return $v > 0; });\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=4 |>\n<code>\n$array = array(-10, -9, -8, -7, -6,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n$array = array_filter($array,\
    \ function($v) { return $v > 0; });\n</code>\n<|/ a tags=arrays,php,sorting |>\n\
    <| a dscore=3 |>\n<code>\n$array = array(-10, -9, -8, -7, -6, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n$array = array_filter($array, function($v)\
    \ { return $v > 0; });\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n$array = array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9);\n$array = array_filter($array, function($v) { return $v\
    \ > 0; });\n</code>\n<|/ a dscore=3 |>\n<| a tags=arrays,php,sorting |>\n<code>\n\
    $array = array(-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\n$array = array_filter($array, function($v) { return $v > 0; });\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=arrays,php,sorting |>\n<code>\n$array = ", "    return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function ($v) {\n    return $v > 0;\n  });\n}\n", "  return array_filter($l,\
    \ function ($v) { return $v > 0; });\n}\n", "  return array_filter($l, function\
    \ ($n) {\n    return $n >= 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nThis doesn't work if you have a negative number in the array and you want\
    \ the positive numbers. Try it with `[-5, -4, -3]`.\n<|/ c |>\n<| c |>\nIt works,\
    \ just tested it. I think you misunderstood the question. OP wants to filter negative\
    \ numbers and get positive numbers. `[-5, -4, -3]` should return `[5, 3, 3]`.\n\
    <|/ c |>\n<| c |>\nYes, I misunderstood the question. Sorry about that.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it doesn't work. Try it with `[-5, -4, -3]`.\n\
    <|/ c |>\n<| c |>\nIt works, just tested it. I think you misunderstood the question.\
    \ OP wants to filter negative numbers and get positive numbers. `[-5, -4, -3]`\
    \ should return `[5, 3, 3]`.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$positive =\
    \ array_filter($array, function($n) { return $n > 0; });\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array and\
    \ you want the positive numbers. Try it with `[-5, -4, -3]`.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have a negative number in the array and you want the\
    \ positive numbers. Try it with `[-5, -4, -3]`.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10);\n$positive = array_filter($array, function($n) { return $n > 0; });\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a negative number in\
    \ the array and you want the positive numbers. Try it with `[-5, -4, -3]`.\n<|/\
    \ c |>\n<| a dscore=4 |>\n<code>\n$array = array(-5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10);\n$positive = array_filter($array, function($n) { return\
    \ $n > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if\
    \ you have a negative ", "  return array_filter($l, function($v) { return $v >\
    \ 0; });\n}\n", "  return array_filter($l, function($v) { return $v > 0; });\n\
    }\n", "  return array_filter($l, function($n) {\n    return $n >= 0;\n  });\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ because it doesn't require any additional libraries.\n<|/ c |>\n<| c |>\nI like\
    \ it, but I wonder why it isn't the accepted answer. Seems like a good solution\
    \ to me.\n<|/ c |>\n<| c |>\nI like it too, but I wonder why it isn't the accepted\
    \ answer. Seems like a good solution to me.\n<|/ c |>\n<| c |>\nI like it too,\
    \ but I wonder why it isn't the accepted answer. Seems like a good solution to\
    \ me.\n<|/ c |>\n<| c |>\nI like it too, but I wonder why it isn't the accepted\
    \ answer. Seems like a good solution to me.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "    return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n\
    \    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n\
    }\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function\
    \ ($v) { return $v > 0; });\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if the array contains negative numbers. Try it with `[-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`.\n<|/ c |>\n<| c |>\n: I\
    \ added a version that works with negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\n: I added a version that works with negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with negative numbers. I tested it and it works.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 =>\
    \ 4,\n    4 => 5,\n    5 => 6,\n    6 => 7,\n    7 => 8,\n    8 => 9,\n    9 =>\
    \ 10,\n    10 => 11,\n    11 => 12,\n    12 => 13,\n    13 => 14,\n    14 => 15,\n\
    \    15 => 16,\n    16 => 17,\n    17 => 18,\n    18 => 19,\n    19 => 20,\n \
    \   20 => 21,\n    21 => 22,\n    22 => 23,\n    23 => 24,\n    24 => 25,\n  \
    \  25 => 26,\n    26 => 27,\n    27 => 28,\n    28 => 29,\n    29 => 30,\n   \
    \ 30 => 31,\n    31 => 32,\n    32 => 33,\n    33 => 34,\n    34 => 35,\n    35\
    \ => 36,\n    36 => 37,\n    37 => 38,\n    38 => 39,\n    39 => 40,\n    40 =>\
    \ 41,\n    41 => 42,\n    42 => 43,\n    43 => 44,\n    44 => 45,\n    45 => 46,\n\
    \    46 => 47,\n    47 => 48,\n    48 => 49,\n    49 => 50,\n    50 => 51,\n \
    \   51 => 52,\n    52 => 53,\n    53 => 54,\n    54 => 55,\n    55 => 56,\n  \
    \  56 => 57,\n    57 => ", "  return array_filter($l, function($v) { return $v\
    \ > 0; });\n}\n", "    return array_filter($l, function ($v) { return $v > 0;\
    \ });\n}\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n",
  "  return array_filter($l, function($v) { return $v > 0; });\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nI like this solution, though I wonder if it would be more efficient\
    \ to just use `array_filter` twice instead of `array_map` followed by `array_filter`?\n\
    <|/ c |>\n<| c |>\n: I doubt that would be more efficient, since `array_filter`\
    \ has to iterate over the whole array anyway. `array_map` would have to iterate\
    \ over the array twice anyway (once to map the values and once to filter them).\
    \ `array_filter` would have to iterate over the array three times (once to map\
    \ the values, once to filter the values, once to return the filtered values).\
    \ Since `array_filter` has to iterate over the array three times, it would be\
    \ more efficient to just use `array_filter` three times. But I haven't tested\
    \ that theory.\n<|/ c |>\n<| c |>\n: I tested it and it turns out that `array_filter`\
    \ does iterate over the array three times. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. `array_filter` does iterate\
    \ over the array three times. I added a test case to my answer.\n<|/ c |>\n<|\
    \ c |>\n: I added a test case to my answer. `array_filter` does iterate over the\
    \ array three times. I added a test case to my answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(\n    array(\n        'id' => 1,\n        'name'\
    \ => 'John',\n        'age' => 30,\n    ),\n    array(\n        'id' => 2,\n \
    \       'name' => 'Jane',\n        'age' => 25,\n    ),\n    array(\n        'id'\
    \ => 3,\n        'name' => 'Jack',\n        'age' => 30,\n    ),\n);\n\n$array\
    \ = array_map(function($v){\n    return $v['age'];\n}, $array);\n\n$array = array_filter($array,\
    \ function($v){\n    return $v > 0;\n});\n\nprint_r($array);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nI like this solution, though I wonder if it would be more efficient\
    \ to just use `array_filter` twice instead of `array_map` followed by `array_filter`?\n\
    <|/ c |>\n<| c |>\n: I doubt that would be more efficient, since `array_filter`\
    \ has to iterate over the whole array anyway. `array_map` would ", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$array = array(1, 2, 3, -4, 5, 6, -7, 8, -9,\
    \ 10);\n$positive = array_filter($array, function($value) {\n    return $value\
    \ > 0;\n});\nprint_r($positive);\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(1, 2, 3, -4, 5, 6, -7, 8, -9, 10);\n$positive = array_filter($array,\
    \ function($value) {\n    return $value > 0;\n});\nprint_r($positive);\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array = array(1,\
    \ 2, 3, -4, 5, 6, -7, 8, -9, 10);\n$positive = array_filter($array, function($value)\
    \ {\n    return $value > 0;\n});\nprint_r($positive);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1, 2, 3, -4, 5, 6, -7, 8,\
    \ -9, 10);\n$positive = array_filter($array, function($value) {\n    return $value\
    \ > 0;\n});\nprint_r($positive);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$array = array(1, 2, 3, -4, 5, 6, -7, 8, -9, 10);\n$positive = array_filter($array,\
    \ function($value) {\n    return $value > 0;\n});\nprint_r($positive);\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1, 2,\
    \ 3, -4, 5, 6, -7, 8, -9, 10);\n$positive = array_filter($array, function($value)\
    \ {\n    return $value > 0;\n});\nprint_r($positive);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\n$array = array(1, 2, 3, -4, 5, 6, -7, 8, -9, 10);\n$positive\
    \ = array_filter($array, function($value) {\n    return $value > 0;\n});\nprint_r($positive);\n\
    </code>\n<|/ a dscore=0 tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(1, 2, 3, -4, 5, 6, -7, 8, -9, 10);\n$positive = array_filter($array,\
    \ function($value) {\n    return $value > 0;\n});\n", "  $positive = [];\n  foreach\
    \ ($l as $value) {\n    if ($value > 0) {\n      $positive[] = $value;\n    }\n\
    \  }\n  return $positive;\n}\n", "  return array_filter($l, function ($v) { return\
    \ $v > 0; });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more concise and readable than other answers.\n<|/ c |>\n<| c |>\n\
    I agree, this is much more concise and readable. Thanks!\n<|/ c |>\n<| c |>\n\
    I like this answer because it's very concise. Just a quick question, what is the\
    \ purpose of $v > 0? I understand that it's comparing each element in the array\
    \ to the value 0, but why is it necessary?\n<|/ c |>\n<| c |>\nThe `array_filter`\
    \ function removes elements from the array that don't match the given condition.\
    \ In this case, we want to keep only positive numbers, so we only want to keep\
    \ elements that are greater than 0.\n<|/ c |>\n<| c |>\nI like this. I added a\
    \ little bit of explanation to the code so it's easier to understand what's going\
    \ on. https://gist.github.com/davidjbradshaw/7d8f9c25f6b5ff0cfa0c\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array(\n    0 => 1,\n    1 => 2,\n \
    \   2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n    6 => 7,\n    7 => 8,\n\
    \    8 => 9,\n    9 => 10,\n    10 => 11,\n    11 => 12,\n    12 => 13,\n    13\
    \ => 14,\n    14 => 15,\n    15 => 16,\n    16 => 17,\n    17 => 18,\n    18 =>\
    \ 19,\n    19 => 20,\n    20 => 21,\n    21 => 22,\n    22 => 23,\n    23 => 24,\n\
    \    24 => 25,\n    25 => 26,\n    26 => 27,\n    27 => 28,\n    28 => 29,\n \
    \   29 => 30,\n    30 => 31,\n    31 => 32,\n    32 => 33,\n    33 => 34,\n  \
    \  34 => 35,\n    35 => 36,\n    36 => 37,\n    37 => 38,\n    38 => 39,\n   \
    \ 39 => 40,\n    40 => 41,\n    41 => 42,\n    42 => 43,\n    43 => 44,\n    44\
    \ => 45,\n    45 => 46,\n    46 => 47,\n    47 => 48,\n    48 => ", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  $positive = [];\n  foreach\
    \ ($l as $value) {\n    if ($value > 0) {\n      $positive[] = $value;\n    }\n\
    \  }\n  return $positive;\n}\n", "    return array_filter($l, function ($v) {\
    \ return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n \
    \   if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n\
    }", "  $positive = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n  \
    \    $positive[] = $value;\n    }\n  }\n  return $positive;\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as\
    \ $value) {\n    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n\
    \  return $positive;\n}\n", "    return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$arr =\
    \ array(\n    'a' => 1,\n    'b' => 2,\n    'c' => 3,\n    'd' => 4,\n    'e'\
    \ => 5,\n    'f' => 6,\n    'g' => 7,\n    'h' => 8,\n    'i' => 9,\n    'j' =>\
    \ 10,\n    'k' => 11,\n    'l' => 12,\n    'm' => 13,\n    'n' => 14,\n    'o'\
    \ => 15,\n    'p' => 16,\n    'q' => 17,\n    'r' => 18,\n    's' => 19,\n   \
    \ 't' => 20,\n    'u' => 21,\n    'v' => 22,\n    'w' => 23,\n    'x' => 24,\n\
    \    'y' => 25,\n    'z' => 26,\n);\n\n$arr2 = array();\nforeach($arr as $key\
    \ => $value){\n    if($value > 0){\n        $arr2[] = $value;\n    }\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$arr = array('a' => 1, 'b'\
    \ => 2, 'c' => 3, 'd' => 4, 'e' => 5, 'f' => 6, 'g' => 7, 'h' => 8, 'i' => 9,\
    \ 'j' => 10, 'k' => 11, 'l' => 12, 'm' => 13, 'n' => 14, 'o' => 15, 'p' => 16,\
    \ 'q' => 17, 'r' => 18, 's' => 19, 't' => 20, 'u' => 21, 'v' => 22, 'w' => 23,\
    \ 'x' => 24, 'y' => 25, 'z' => 26);\n\n$arr2 = array();\nforeach($arr as $key\
    \ => $value){\n    if($value > 0){\n        $arr2[] = $value;\n    }\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a |>\n<code>\n$arr = array('a' => 1, 'b' => 2, 'c'\
    \ => 3, 'd' => 4, 'e' => 5, 'f' => 6, 'g' => 7, 'h' => 8, 'i' => 9, 'j' => 10,\
    \ 'k' => 11, 'l' => 12, 'm' => 13, 'n' => 14, 'o' => 15, 'p' => 16, 'q' => 17,\
    \ 'r' => 18, 's' => 19, 't' => 20, 'u' => 21, 'v' => 22, 'w' => 23, 'x' => 24,\
    \ 'y' => 25, 'z' => 26);\n$arr2 = array();\nforeach($arr as $key => $value){\n\
    \    if($value > 0){\n        $arr2[] = $value;\n    }\n}\n</code>\n<|/", "  return\
    \ array_filter($l, function($v) {\n    return $v > 0;\n  });\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "    return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "  return array_filter($l, function ($v) { return $v > 0;\
    \ });\n}\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n",
  "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function ($v) { return $v > 0; });\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nThis doesn't work if there are negative numbers in the array. `array_filter`\
    \ will remove all negative numbers from the array.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. `array_filter` removes elements from an array that don't match the\
    \ given condition. `array_filter` doesn't care about the type of the elements\
    \ in the array.\n<|/ c |>\n<| c |>\n: It does care about the type of the elements\
    \ in the array. `array_filter` doesn't care about the type of the elements in\
    \ the array. `array_filter` doesn't care about the type of the elements in the\
    \ array. `array_filter` doesn't care about the type of the elements in the array.\
    \ `array_filter` doesn't care about the type of the elements in the array. `array_filter`\
    \ doesn't care about the type of the elements in the array. `array_filter` doesn't\
    \ care about the type of the elements in the array. `array_filter` doesn't care\
    \ about the type of the elements in the array. `array_filter` doesn't care about\
    \ the type of the elements in the array. `array_filter` doesn't care about the\
    \ type of the elements in the array. `array_filter` doesn't care about the type\
    \ of the elements in the array. `array_filter` doesn't care about the type of\
    \ the elements in the array. `array_filter` doesn't care about the type of the\
    \ elements in the array. `array_filter` doesn't care about the type of the elements\
    \ in the array. `array_filter` doesn't care about the type of the elements in\
    \ the array. `array_filter` doesn't care about the type of the elements in the\
    \ array. `array_filter` doesn't care about the type of the elements in the array.\
    \ `array_filter` doesn't care about the type of the elements in the array. `array_filter`\
    \ doesn't care about the type of the elements in the array. `array_filter` doesn't\
    \ care about the type of the elements in the array. `array_filter` doesn't care\
    \ about the type of the elements in the array. `array_filter` doesn't care about\
    \ the type of the elements in the array. `array_filter` doesn't care about the\
    \ type of the elements in the array. `array_filter` doesn't care about the type\
    \ of the elements in the array. `array_filter` doesn't care about the type of\
    \ the elements in the array. `array_filter` doesn't care about the type of the\
    \ elements in the array. `array_filter` doesn't care about the type of the elements\
    \ in the array. `array_filter` doesn't care about the type of the elements in\
    \ the array. `array_filter` doesn't care about the type of the elements in the\
    \ array. `array_filter` doesn't care about the type of the elements in the array.\
    \ `array_filter` doesn't care about the type of the elements in the array. `array_filter`\
    \ doesn't care about the type of the elements in the array. `array_filter` doesn't\
    \ care about the type of the elements in the array. `array_filter` doesn't care\
    \ about the type of the element", "  return array_filter($l, function($n) {\n\
    \    return $n >= 0;\n  });\n}\n", "  $positive = [];\n  foreach ($l as $value)\
    \ {\n    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n  return\
    \ $positive;\n}\n", "  return array_filter($l, function($v) { return $v > 0; });\n\
    }\n", "  $positive = [];\n  foreach ($l as $item) {\n    if ($item > 0) {\n  \
    \    $positive[] = $item;\n    }\n  }\n  return $positive;\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  $positive = [];\n  foreach\
    \ ($l as $item) {\n    if ($item > 0) {\n      $positive[] = $item;\n    }\n \
    \ }\n  return $positive;\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n\
    \    if ($value > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n\
    }\n", "  return array_filter($l, function ($v) { return $v > 0; });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(1, -2, 3, -4,\
    \ 5, -6, 7, 8, -9, 10, 11, -12, 13, 14, -15, 16, -17, -18, 19);\n$positive = array_filter($array,\
    \ function ($v) { return $v > 0; });\n</code>\n<|/ a tags=arrays,php |>\n<| a\
    \ dscore=0 |>\n<code>\n$array = array(1, -2, 3, -4, 5, -6, 7, 8, -9, 10, 11, -12,\
    \ 13, 14, -15, 16, -17, -18, 19);\n$positive = array_filter($array, function ($v)\
    \ { return $v > 0; });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(1, -2, 3, -4, 5, -6, 7, 8, -9, 10, 11, -12, 13, 14,\
    \ -15, 16, -17, -18, 19);\n$positive = array_filter($array, function ($v) { return\
    \ $v > 0; });\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$array = array(1,\
    \ -2, 3, -4, 5, -6, 7, 8, -9, 10, 11, -12, 13, 14, -15, 16, -17, -18, 19);\n$positive\
    \ = array_filter($array, function ($v) { return $v > 0; });\n</code>\n<|/ a tags=arrays,php\
    \ dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| a |>\n<code>\n$array = array(1, -2, 3, -4, 5,\
    \ -6, 7, 8, -9, 10, 11, -12, 13, 14, -15, 16, -17, -18, 19);\n$positive = array_filter($array,\
    \ function ($v) { return $v > 0; });\n</code>\n<|/ a tags=arrays,php dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1,\
    \ -2, 3, -4, 5, -6, 7, 8, -9, 10, 11, -12, 13, 14, -15, 16, -17, -18, 19);\n$positive\
    \ = array_filter($array, function ($v) { return $v > 0; });\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1, -2, 3, -4, 5, -6, 7,\
    \ 8, -9, 10, 11, -12, 13, 14, -15, 16, -17, -18, 19);\n$", "    $positive = [];\n\
    \    foreach ($l as $value) {\n        if ($value > 0) {\n            $positive[]\
    \ = $value;\n        }\n    }\n    return $positive;\n}\n", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "    return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}", "  return array_filter($l, function($v) { return $v > 0; });\n\
    }\n", "  return array_filter($l, function ($v) { return $v > 0; });\n}", "  return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question at all. OP wants to filter out negative numbers, not just filter\
    \ out all negative numbers.\n<|/ c |>\n<| c |>\nI see your point, but I believe\
    \ that OP wants to filter out negative numbers, not just filter out all negative\
    \ numbers. I added an example to my answer.\n<|/ c |>\n<| c |>\nI see your point,\
    \ but I believe that OP wants to filter out negative numbers, not just filter\
    \ out all negative numbers. I added an example to my answer.\n<|/ c |>\n<| c |>\n\
    I see your point, but I believe that OP wants to filter out negative numbers,\
    \ not just filter out all negative numbers. I added an example to my answer.\n\
    <|/ c |>\n<| c |>\nI see your point, but I believe that OP wants to filter out\
    \ negative numbers, not just filter out all negative numbers. I added an example\
    \ to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n\
    $arr2 = array_filter($arr, function($v){\n    return $v > 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't answer the question at all. OP wants\
    \ to filter out negative numbers, not just filter out all negative numbers.\n\
    <|/ c |>\n<| c |>\nI see your point, but I believe that OP wants to filter out\
    \ negative numbers, not just filter out all negative numbers. I added an example\
    \ to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n\
    $arr2 = array_filter($arr, function($v){\n    return $v > 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't answer the question at all. OP wants\
    \ to filter out negative numbers, not just filter out all negative numbers.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$arr = [-1, 2, -4, 5, 6];\n$arr2 = array_filter($arr,\
    \ function($v){\n    return $v > 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't answer the question at all. OP want", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    I like this solution, but I wonder if it would be more efficient to just use array_filter()\
    \ instead of array_reduce(). array_reduce() will have to iterate through the entire\
    \ array twice. array_filter() will have to iterate through the entire array only\
    \ once.\n<|/ c |>\n<| c |>\nI agree with you. `array_filter` should be more efficient.\n\
    <|/ c |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, I wonder if it would be more efficient to just use array_filter()\
    \ instead of array_reduce(). array_reduce() will have to iterate through the entire\
    \ array twice. array_filter() will have to iterate through the entire array only\
    \ once.\n<|/ c |>\n<| c |>\nI agree with you. `array_filter` should be more efficient.\n\
    <|/ c |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, I wonder if it would be more efficient to just use array_filter()\
    \ instead of array_reduce(). array_reduce() will have to iterate through the entire\
    \ array twice. array_filter() will have to iterate through the entire array only\
    \ once.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10);\n$positive = array_filter($array, function($v) { return $v > 0;\
    \ });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more concise and readable than the other answers.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Much more concise and readable than\
    \ the other answers.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more concise and readable than the other answers.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more concise and readable than the other answers.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more concise and readable\
    \ than the other answers.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array =\
    \ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$positive = array_filter($array, function($v)\
    \ { return $v > 0; });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be ",
  "    return array_filter($l, function($v) { return $v > 0; });\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work for me. `array_filter`\
    \ returns an array with all the positive numbers in it but `array_merge` doesn't\
    \ seem to merge them back into the original array. `array_merge` returns an empty\
    \ array.\n<|/ c |>\n<| c |>\n: I tested it and it works. I added a test case to\
    \ the answer. Maybe you have a different PHP version or a custom `array_filter`\
    \ function.\n<|/ c |>\n<| c |>\n: I tested it again and it works. I added a test\
    \ case to the answer. Maybe you have a different PHP version or a custom `array_filter`\
    \ function.\n<|/ c |>\n<| c |>\n: I tested it again and it works. I added a test\
    \ case to the answer. Maybe you have a different PHP version or a custom `array_filter`\
    \ function.\n<|/ c |>\n<| c |>\n: I tested it again and it works. I added a test\
    \ case to the answer. Maybe you have a different PHP version or a custom `array_filter`\
    \ function.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n\
    $arr2 = array(2,4,6,8,10);\n$arr3 = array_diff($arr, $arr2);\n$arr4 = array_merge($arr,\
    \ $arr3);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. `array_diff` returns an array with all the positive numbers in it but\
    \ `array_merge` doesn't seem to merge them back into the original array. `array_merge`\
    \ returns an empty array.\n<|/ c |>\n<| c |>\n: I tested it and it works. I added\
    \ a test case to the answer. Maybe you have a different PHP version or a custom\
    \ `array_filter` function.\n<|/ c |>\n<| c |>\n: I tested it again and it works.\
    \ I added a test case to the answer. Maybe you have a different PHP version or\
    \ a custom `array_filter` function.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n\
    <code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$arr2 = array(2,4,6,8,10);\n$arr3\
    \ = array_diff($arr, $arr2);\n$arr4 = array_merge($arr, $arr3);\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis ", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n    if ($value\
    \ > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n}\n",
  "    return array_filter($l, function($v) { return $v > 0; });\n}\n", "    $positive\
    \ = [];\n    foreach ($l as $value) {\n        if ($value > 0) {\n           \
    \ $positive[] = $value;\n        }\n    }\n    return $positive;\n}\n", "    return\
    \ array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n</code>\n<|/ a tags=arrays,php |>\n<|\
    \ a dscore=2 |>\n<code>\n$array = array(\n    array('name' => 'John', 'age' =>\
    \ 25, 'sex' => 'M'),\n    array('name' => 'Jane', 'age' => 24, 'sex' => 'F'),\n\
    \    array('name' => 'Jack', 'age' => 26, 'sex' => 'M'),\n    array('name' =>\
    \ 'Jill', 'age' => 25, 'sex' => 'M'),\n    array('name' => 'Jack', 'age' => 26,\
    \ 'sex' => 'M'),\n    array('name' => 'Jill', 'age' => 25, 'sex' => 'M'),\n  \
    \  array('name' => 'Jack', 'age' => 26, 'sex' => 'M'),\n    array('name' => 'Jill',\
    \ 'age' => 25, 'sex' => 'M'),\n    array('name' => 'Jack', 'age' => 26, 'sex'\
    \ => 'M'),\n    array('name' => 'Jill', 'age' => 25, 'sex' => 'M'),\n    array('name'\
    \ => 'Jack', 'age' => 26, 'sex' => 'M'),\n    array('name' => 'Jill', 'age' =>\
    \ 25, 'sex' => 'M'),\n    array('name' => 'Jack', 'age' => 26, 'sex' => 'M'),\n\
    \    array('name' => 'Jill', 'age' => 25, 'sex' => 'M'),\n    array('name' =>\
    \ 'Jack', 'age' => 26, 'sex' => 'M'),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'sex' => 'M'),\n    array('name' => 'Jack', 'age' => 26, 'sex' => 'M'),\n  \
    \  array('name' => 'Jill', 'age' => 25, 'sex' => 'M'),\n    array('name' => 'Jack',\
    \ 'age' => 26, 'sex' => 'M'),\n    array('name' => 'Jill', 'age' => 25, 'sex'\
    \ => 'M'),\n    array('name' => 'Jack', 'age' => 26, 'sex' => 'M'),\n    array('name'\
    \ => 'Jill', 'age' => 25, 'sex' => 'M'),\n    array('name' => 'Jack', 'age' =>\
    \ 26, 'sex' => 'M'),\n    array('name' => 'Jill', 'age' => 25, 'sex' => 'M'),\n\
    \    array('name' => 'Jack', 'age' => 26, 'sex' => 'M'),\n    array('name' =>\
    \ 'Jill', 'age' => 25, 'sex' => 'M'),\n    array('name' => 'Jack', 'age' => 26,\
    \ 'sex' => 'M'),\n    array('name' => 'Jill', 'age' => 25, '", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "    $positive = [];\n    foreach ($l\
    \ as $item) {\n        if ($item > 0) {\n            $positive[] = $item;\n  \
    \      }\n    }\n    return $positive;\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n    if ($value\
    \ > 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n}\n",
  "  $positive = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "    return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "    return array_filter($l, function\
    \ ($v) { return $v > 0; });\n}\n", "    return array_filter($l, function($v) {\n\
    \        return $v > 0;\n    });\n}\n", "  $positive = [];\n  foreach ($l as $item)\
    \ {\n    if ($item > 0) {\n      $positive[] = $item;\n    }\n  }\n  return $positive;\n\
    }\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function ($v) { return\
    \ $v > 0; });\n}\n", "  return array_filter($l, function($v) { return $v > 0;\
    \ });\n}\n", "  return array_filter($l, function($v) {\n    return $v > 0;\n \
    \ });\n}\n", "    $positive = [];\n    foreach ($l as $value) {\n        if ($value\
    \ > 0) {\n            $positive[] = $value;\n        }\n    }\n    return $positive;\n\
    }\n", "    return array_filter($l, function($v) {\n        return $v > 0;\n  \
    \  });\n}\n", "  $positive = [];\n  foreach ($l as $value) {\n    if ($value >\
    \ 0) {\n      $positive[] = $value;\n    }\n  }\n  return $positive;\n}\n", " \
    \ $positive = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "    return array_filter($l, function($v) { return $v > 0;\
    \ });\n}\n", "  return array_filter($l, function ($v) { return $v > 0; });\n}\n",
  "    return array_filter($l, function($v) { return $v > 0; });\n}\n", "  $positive\
    \ = [];\n  foreach ($l as $value) {\n    if ($value > 0) {\n      $positive[]\
    \ = $value;\n    }\n  }\n  return $positive;\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}", "    return array_filter($l, function\
    \ ($x) {\n        return $x >= 0;\n    });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    array('id' => 1, 'name' =>\
    \ 'John'),\n    array('id' => 2, 'name' => 'Jane'),\n    array('id' => 3, 'name'\
    \ => 'Jack'),\n    array('id' => 4, 'name' => 'Jill'),\n    array('id' => 5, 'name'\
    \ => 'Jack'),\n    array('id' => 6, 'name' => 'Jill'),\n    array('id' => 7, 'name'\
    \ => 'Jack'),\n    array('id' => 8, 'name' => 'Jill'),\n    array('id' => 9, 'name'\
    \ => 'Jack'),\n    array('id' => 10, 'name' => 'Jill'),\n    array('id' => 11,\
    \ 'name' => 'Jack'),\n    array('id' => 12, 'name' => 'Jill'),\n    array('id'\
    \ => 13, 'name' => 'Jack'),\n    array('id' => 14, 'name' => 'Jill'),\n    array('id'\
    \ => 15, 'name' => 'Jack'),\n    array('id' => 16, 'name' => 'Jill'),\n    array('id'\
    \ => 17, 'name' => 'Jack'),\n    array('id' => 18, 'name' => 'Jill'),\n    array('id'\
    \ => 19, 'name' => 'Jack'),\n    array('id' => 20, 'name' => 'Jill'),\n    array('id'\
    \ => 21, 'name' => 'Jack'),\n    array('id' => 22, 'name' => 'Jill'),\n    array('id'\
    \ => 23, 'name' => 'Jack'),\n    array('id' => 24, 'name' => 'Jill'),\n    array('id'\
    \ => 25, 'name' => 'Jack'),\n    array('id' => 26, 'name' => 'Jill'),\n    array('id'\
    \ => 27, 'name' => 'Jack'),\n    array('id' => 28, 'name' => 'Jill'),\n    array('id'\
    \ => 29, 'name' => 'Jack'),\n    array('id' => 30, 'name' => 'Jill'),\n    array('id'\
    \ => 31, 'name' => 'Jack'),\n    array('id' => 32, 'name' => 'Jill'),\n    array('id'\
    \ => 33, 'name' => 'Jack'),\n    array('id' => 34, 'name' => 'Jill'),\n    array('id'\
    \ => 35, 'name' => 'Jack'),\n    array('id' => 36, 'name' => 'Jill'),\n    array('id'\
    \ => 37, 'name' => '", "  $positive = [];\n  foreach ($l as $item) {\n    if ($item\
    \ > 0) {\n      $positive[] = $item;\n    }\n  }\n  return $positive;\n}\n", " \
    \ return array_filter($l, function($v) { return $v > 0; });\n}\n", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "  return array_filter($l, function ($v) { return\
    \ $v > 0; });\n}\n", "    return array_filter($l, function($v) { return $v > 0;\
    \ });\n}\n", "  return array_filter($l, function($v) { return $v > 0; });\n}\n",
  "  return array_filter($l, function($n) {\n    return $n >= 0;\n  });\n}\n", " \
    \   return array_filter($l, function ($v) { return $v > 0; });\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't work if you have negative numbers\
    \ in the array.\n<|/ c |>\n<| c |>\n: It does work, if you have negative numbers\
    \ in the array. `array_filter` removes all the negative numbers from the array.\
    \ `array_filter` returns an array with all the positive numbers in the array.\n\
    <|/ c |>\n<| c |>\n: It does work, if you have negative numbers in the array.\
    \ `array_filter` removes all the negative numbers from the array. `array_filter`\
    \ returns an array with all the positive numbers in the array.\n<|/ c |>\n<| c\
    \ |>\n: It does work, if you have negative numbers in the array. `array_filter`\
    \ removes all the negative numbers from the array. `array_filter` returns an array\
    \ with all the positive numbers in the array.\n<|/ c |>\n<| c |>\n: It does work,\
    \ if you have negative numbers in the array. `array_filter` removes all the negative\
    \ numbers from the array. `array_filter` returns an array with all the positive\
    \ numbers in the array.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1,\
    \ -2, 3, -4);\n$positive = array_filter($array, function($v) { return $v > 0;\
    \ });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers in the array.\n<|/ c |>\n<| c |>\n: It does work, if you have\
    \ negative numbers in the array. `array_filter` removes all the negative numbers\
    \ from the array. `array_filter` returns an array with all the positive numbers\
    \ in the array.\n<|/ c |>\n<| c |>\n: It does work, if you have negative numbers\
    \ in the array. `array_filter` removes all the negative numbers from the array.\
    \ `array_filter` returns an array with all the positive numbers in the array.\n\
    <|/ c |>\n<| c |>\n: It does work, if you have negative numbers in the array.\
    \ `array_filter` removes all the negative numbers from the array. `array_filter`\
    \ returns an array with all the positive numbers in the array.\n<|/ c |>\n<| a\
    \ dscore=5 |>\n<code>\n$array = array(1, -2, 3, -4);\n$positive = array_filter($array,\
    \ function($v) { return $v > 0; });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This doesn't work if you have negative numbers in the array.\n<|/ c |>\n<|", " \
    \ return array_filter($l, function($v) { return $v > 0; });\n}", "  return array_filter($l,\
    \ function($v) { return $v > 0; });\n}\n", "  return array_filter($l, function($v)\
    \ { return $v > 0; });\n}\n", "    return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "  $positive = [];\n  foreach ($l as $item) {\n    if ($item\
    \ > 0) {\n      $positive[] = $item;\n    }\n  }\n  return $positive;\n}\n", " \
    \ $positive = [];\n  foreach ($l as $item) {\n    if ($item > 0) {\n      $positive[]\
    \ = $item;\n    }\n  }\n  return $positive;\n}\n", "  $positive = [];\n  foreach\
    \ ($l as $item) {\n    if ($item > 0) {\n      $positive[] = $item;\n    }\n \
    \ }\n  return $positive;\n}\n", "  return array_filter($l, function($v) { return\
    \ $v > 0; });\n}\n", "  return array_filter($l, function($v) { return $v > 0;\
    \ });\n}\n", "    $positive = [];\n    foreach ($l as $value) {\n        if ($value\
    \ > 0) {\n            $positive[] = $value;\n        }\n    }\n    return $positive;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
