name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given list of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points($nums)\
  \ {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  return array_intersect_key($nums, $order);\n}", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  sort($order);\n  return $order;\n}\n",
  "  $sums = array_sum($nums);\n  arsort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$num] - $sums;\n  }, $nums);\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| c |>\nI like your solution, although it seems\
    \ like it would be more efficient to just sort the array in place and avoid the\
    \ extra array creation. Also, `array_sum` isn't necessary - you can just use `array_map`\
    \ with a custom callback to calculate the sum.\n<|/ c |>\n<| c |>\nI agree, it's\
    \ more efficient to sort the array in place. I'll update my answer.\n<|/ c |>\n\
    <| c |>\nI like your solution, although it seems like it would be more efficient\
    \ to just sort the array in place and avoid the extra array creation. Also, `array_sum`\
    \ isn't necessary - you can just use `array_map` with a custom callback to calculate\
    \ the sum.\n<|/ c |>\n<| c |>\nI like your solution, although it seems like it\
    \ would be more efficient to just sort the array in place and avoid the extra\
    \ array creation. Also, `array_sum` isn't necessary - you can just use `array_map`\
    \ with a custom callback to calculate the sum.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, although it seems like it would be more efficient to just sort the\
    \ array in place and avoid the extra array creation. Also, `array_sum` isn't necessary\
    \ - you can just use `array_map` with a custom callback to calculate the sum.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  $sums = array_sum($nums);\n  asort($nums);\n\
    \  return $nums;\n}", "  $sums = array_map(function($num) {\n    return $num *\
    \ 10 + $num;\n  }, $nums);\n  usort($sums, function($a, $b) {\n    return $a -\
    \ $b;\n  });\n  return array_map(function($num) use ($nums) {\n    return array_search($num,\
    \ $nums);\n  }, $sums);\n}\n", "  $sums = array_map(function($num) {\n    return\
    \ $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function ($i) { return $nums[$i]; }, $order);\n\
    }\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_map(function($v) use ($sums) {\n        return $sums - $v;\n\
    \    }, $order);\n}\n", "    $sums = array_sum($nums);\n    $sorted = [];\n  \
    \  foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    return array_map(function ($num) use ($sums) {\n        return $sums - $num;\n\
    \    }, $sorted);\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  array_multisort($order, $nums);\n  return $nums;\n}\n", "  $sums\
    \ = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num) use\
    \ ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($v) use ($order) {\n        return $v[$order];\n\
    \    }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return\
    \ array_map(function($num) use ($sums) {\n    return $sums - $num;\n  }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2 =>\
    \ 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 =>\
    \ 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n\
    \    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n \
    \   19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n  \
    \  24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n   \
    \ 29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34\
    \ => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 =>\
    \ 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n\
    \    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n \
    \   50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n  \
    \  55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n   \
    \ 60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n    65\
    \ => 65,\n    66 => 66,\n    67 => 67,\n    68 => 68,\n    69 => 69,\n    70 =>\
    \ 70,\n    71 => 71,\n    72 => 72,\n    73 => 73,\n    74 => 74,\n    75 => 75,\n\
    \    76 => 76,", "  $sums = array_map(function($num) { return intval($num); },\
    \ $nums);\n  rsort($sums);\n  return array_map(function($num) { return $nums[$sums[$num]-1];\
    \ }, $nums);\n}", "    $sums = array_sum($nums);\n    $sorted = array_map(function\
    \ ($num) use ($sums) {\n        return $sums - $num;\n    }, $nums);\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "  $sums = array_map(function ($num) {\n    return\
    \ $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function\
    \ ($num) {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_map(function($num)\
    \ { return $num * 10; }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ { return $num / 10; }, $sums);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  return array_map(function($v) use ($sums, $order) {\n    return $order[$v];\n\
    \  }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nI like your\
    \ solution, but I believe it can be simplified a little bit more. Instead of using\
    \ array_sum and array_keys, you can just use array_reduce and array_sum. Also,\
    \ instead of array_map you can just use array_search and array_shift.\n<|/ c |>\n\
    <| c |>\nI agree with you. I've just tried to keep it simple and straightforward.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I believe it can be simplified a\
    \ little bit more. Instead of using array_sum and array_keys, you can just use\
    \ array_reduce and array_sum. Also, instead of array_map you can just use array_search\
    \ and array_shift.\n<|/ c |>\n<| c |>\nI like your solution, but I believe it\
    \ can be simplified a little bit more. Instead of using array_sum and array_keys,\
    \ you can just use array_reduce and array_sum. Also, instead of array_map you\
    \ can just use array_search and array_shift.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $array = array(1, 11, -1, -11, -12);\nusort($array, function($a, $b){\n    return\
    \ $a + $b;\n});\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. `usort` will sort them from lowest to highest.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers. `usort` will\
    \ sort them from lowest to highest.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers. `usort` will sort them from lowest to highest.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. `usort` will sort\
    \ them from lowest to highest.\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers. `usort` will sort them from lowest to highest.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  $sums = array_map(function($num) { return $num %\
    \ 10; }, $nums);\n  asort($sums);\n  $nums = array_map(function($sum) { return\
    \ $sum % 10; }, $sums);\n  return $nums;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThis doesn't work if there are multiple items with the same sum.\n<|/\
    \ c |>\n<| c |>\n: I added a note about that in the answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$sums = array_sum($arr);\n$arr = array_map(function($v) use ($sums) {\n    return\
    \ $sums - $v;\n}, $arr);\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n\
    <code>\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$sums = array_sum($arr);\n$arr = array_map(function($v) use ($sums) {\n    return\
    \ $sums - $v;\n}, ", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  return array_intersect_key($nums, $order);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  sort($order);\n  return array_map(function($v)\
    \ use ($nums) {\n    return $nums[$v];\n  }, $order);\n}\n", "    $nums = array_reverse($nums);\n\
    \    $sums = array_sum($nums);\n    asort($nums);\n    foreach ($nums as $i =>\
    \ $num) {\n        $nums[$i] = $sums - $num;\n    }\n    return $nums;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [\n\
    \    1 => [\n        'name' => 'A'\n    ],\n    2 => [\n        'name' => 'B'\n\
    \    ],\n    3 => [\n        'name' => 'C'\n    ],\n    4 => [\n        'name'\
    \ => 'D'\n    ],\n    5 => [\n        'name' => 'E'\n    ],\n    6 => [\n    \
    \    'name' => 'F'\n    ],\n    7 => [\n        'name' => 'G'\n    ],\n    8 =>\
    \ [\n        'name' => 'H'\n    ],\n    9 => [\n        'name' => 'I'\n    ],\n\
    \    10 => [\n        'name' => 'J'\n    ],\n    11 => [\n        'name' => 'K'\n\
    \    ],\n    12 => [\n        'name' => 'L'\n    ],\n    13 => [\n        'name'\
    \ => 'M'\n    ],\n    14 => [\n        'name' => 'N'\n    ],\n    15 => [\n  \
    \      'name' => 'O'\n    ],\n    16 => [\n        'name' => 'P'\n    ],\n   \
    \ 17 => [\n        'name' => 'Q'\n    ],\n    18 => [\n        'name' => 'R'\n\
    \    ],\n    19 => [\n        'name' => 'S'\n    ],\n    20 => [\n        'name'\
    \ => 'T'\n    ],\n    21 => [\n        'name' => 'U'\n    ],\n    22 => [\n  \
    \      'name' => 'V'\n    ],\n    23 => [\n        'name' => 'W'\n    ],\n   \
    \ 24 => [\n        'name' => 'X'\n    ],\n    25 => [\n        'name' => 'Y'\n\
    \    ],\n    26 => [\n        'name' => 'Z'\n    ],\n];\n\n$arr2 = [];\n$arr3\
    \ = [];\n$arr4 = [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9\
    \ = [];\n$arr10 = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n\
    $arr15 = [];\n$arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$", "  $sums = array_map(function($num)\
    \ {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10 + $num % 10;\n  }, $sums);\n}\n", "    $sums = array_sum($nums);\n\
    \    asort($nums);\n    return array_map(function ($n) use ($sums) {\n       \
    \ return $sums - $n;\n    }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$num] - $sums;\n\
    \  }, $nums);\n}\n", "    $sums = array_map(function($num) { return $num % 10;\
    \ }, $nums);\n    asort($sums);\n    return array_map(function($num) { return\
    \ $num % 10; }, $nums);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n\
    \    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n\
    \    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n \
    \   16 => 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n  \
    \  21 => 21,\n    22 => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n   \
    \ 26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31\
    \ => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 =>\
    \ 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n\
    \    42 => 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n \
    \   47 => 47,\n    48 => 48,\n    49 => 49,\n    50 => 50,\n    51 => 51,\n  \
    \  52 => 52,\n    53 => 53,\n    54 => 54,\n    55 => 55,\n    56 => 56,\n   \
    \ 57 => 57,\n    58 => 58,\n    59 => 59,\n    60 => 60,\n    61 => 61,\n    62\
    \ => 62,\n    63 => 63,\n    64 => 64,\n    65 => 65,\n    66 => 66,\n    67 =>\
    \ 67,\n    68 => 68,\n    69 => 69,\n    70 => 70,\n    71 => 71,\n    72 => 72,\n\
    \    73 => 73,\n    74 => 74,\n    75 => 75,\n    76 => 76,", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  return array_map(function ($num) use ($sums) {\n    return\
    \ $nums[$num];\n  }, $nums);\n}\n", "  $sums = array_map(function($num) {\n  \
    \  return $num * $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / $sums[$num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  sort($order);\n  return $order;\n}\n",
  "  $sums = array_map(function($num) {\n    return $num * log10($num);\n  }, $nums);\n\
    \  asort($sums);\n  return array_map(function($num) {\n    return $num / log10($num);\n\
    \  }, $sums);\n}\n", "  $sums = array_map(function($num) { return $num->points();\
    \ }, $nums);\n  sort($sums, SORT_NUMERIC);\n  return array_map(function($num)\
    \ { return $num->number(); }, $nums);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for the answer. Your solution works great for small lists, but it fails\
    \ for large lists. I added a test case to the question to show this.\n<|/ c |>\n\
    <| c |>\nI added a test case to the question to show this.\n<|/ c |>\n<| c |>\n\
    I added a test case to the question to show this.\n<|/ c |>\n<| c |>\nI added\
    \ a test case to the question to show this.\n<|/ c |>\n<| c |>\nI added a test\
    \ case to the question to show this.\n<|/ c |>\n<| a dscore=1 |>\nI ended up using\
    \ an approach similar to that of Jonathan Sampson, but I used the array_multisort\
    \ function instead of usort. \n<code>", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $sums - $num;\n \
    \ }, $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "    $sums = array_sum($nums);\n    asort($nums);\n    return array_map(function\
    \ ($num) use ($sums) {\n        return $nums[$num] - $sums;\n    }, $nums);\n\
    }\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_map(function ($n) use ($sums, $order) {\n        return $order[$n];\n\
    \    }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$arr = [\n    1 => [\n        'name' => 'John',\n        'age' =>\
    \ 25,\n        'score' => 100,\n    ],\n    2 => [\n        'name' => 'Jane',\n\
    \        'age' => 25,\n        'score' => 100,\n    ],\n    3 => [\n        'name'\
    \ => 'Jack',\n        'age' => 25,\n        'score' => 100,\n    ],\n    4 =>\
    \ [\n        'name' => 'Jill',\n        'age' => 25,\n        'score' => 100,\n\
    \    ],\n    5 => [\n        'name' => 'Jack',\n        'age' => 25,\n       \
    \ 'score' => 100,\n    ],\n    6 => [\n        'name' => 'Jill',\n        'age'\
    \ => 25,\n        'score' => 100,\n    ],\n];\n\n$arr2 = [];\nforeach ($arr as\
    \ $key => $value) {\n    $arr2[$value['score']][$key] = $value;\n}\n\nksort($arr2);\n\
    $arr2 = array_values($arr2);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $arr = [\n    1 => [\n        'name' => 'John',\n        'age' => 25,\n      \
    \  'score' => 100,\n    ],\n    2 => [\n        'name' => 'Jane',\n        'age'\
    \ => 25,\n        'score' => 100,\n    ],\n    3 => [\n        'name' => 'Jack',\n\
    \        'age' => 25,\n        'score' => 100,\n    ],\n    4 => [\n        'name'\
    \ => 'Jill',\n        'age' => 25,\n        'score' => 100,\n    ],\n    5 =>\
    \ [\n        'name' => 'Jack',\n        'age' => 25,\n        'score' => 100,\n\
    \    ],\n    6 => [\n        'name' => 'Jill',\n        'age' => 25,\n       \
    \ 'score' => 100,\n    ],\n];\n\n$arr2 = [];\nforeach ($arr as $key => $value)\
    \ {\n    $arr2[$value['score']][$key] = $value;\n}\n\nksort($arr2);\n$arr2 = array_values($arr2);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>",
  "  $sums = array_map(function($num) {\n    return $num * 10 + $num;\n  }, $nums);\n\
    \  asort($sums);\n  return array_map(function($num) {\n    return $num / 10;\n\
    \  }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ work if the array has negative numbers. Try `order_by_points([-1, -12, -10,\
    \ -9, -8])`\n<|/ c |>\n<| c |>\n: I added a note about that to the answer.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if the array has negative numbers. Try `order_by_points([-1,\
    \ -12, -10, -9, -8])`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $sums = array_sum($nums);\n\
    \  arsort($sums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$sums - $num];\n  }, $nums);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I like this solution, but I believe it can be optimized a bit. `array_sum` will\
    \ iterate over the whole array even if the sum is already known. `arsort` will\
    \ sort the array in place and will iterate over the array only once. `array_map`\
    \ will iterate over the array only once and will create another array which is\
    \ not needed. `array_sum` can be replaced with `array_reduce` which iterates over\
    \ the array only once.\n<|/ c |>\n<| c |>\n: Yes, you're right. I've updated the\
    \ answer with your suggestions.\n<|/ c |>\n<| a dscore=0 |>\nI believe this can\
    \ be done with a single array_reduce() call:\n<code>\n$nums = [1, 11, -1, -11,\
    \ -12];\n\n$sums = array_reduce($nums, function($carry, $item) {\n    return $carry\
    \ + $item;\n});\n\n$sorted = array_map(function($item) use ($sums) {\n    return\
    \ $sums - $item;\n}, $nums);\n\nvar_dump($sorted);\n</code>\nOutput:\n<code>\n\
    array(5) {\n  [0]=>\n  int(-1)\n  [1]=>\n  int(-1)\n  [2]=>\n  int(1)\n  [3]=>\n\
    \  int(-12)\n  [4]=>\n  int(-11)\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0\
    \ |>\n<code>\n$nums = [1, 11, -1, -11, -12];\n$sums = array_sum($nums);\n$sorted\
    \ = array_map(function($num) use ($sums) {\n    return $sums - $num;\n}, $nums);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$nums = [1, 11, -1,\
    \ -11, -12];\n$sums = array_sum($nums);\n$sorted = array_map(function($num) use\
    \ ($sums) {\n    return $sums - $num;\n}, $nums);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$nums = [1, 11, -1, -11, -12];\n$sums = array_sum($nums);\n\
    $sorted = array_map(function($num) use ($sum", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  array_multisort($order, $nums);\n  return\
    \ $nums;\n}", "  $sums = array_sum($nums);\n  arsort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  return array_map(function ($num) use ($sums) {\n    return $nums[$num];\n \
    \ }, array_keys($nums), $nums);\n}\n", "  $sums = array_map(function($num) {\n\
    \    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't seem to work. `order_by_points([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]` but `order_by_points([]) == []`\n<|/ c |>\n<| c |>\n\
    : I added a note to the answer. `order_by_points([])` returns an empty array.\n\
    <|/ c |>\n<| c |>\n: I added a version which sorts by the sum of the digits, not\
    \ their absolute value.\n<|/ c |>\n<| c |>\n: I added a version which sorts by\
    \ the sum of the digits, not their absolute value.\n<|/ c |>\n<| c |>\n: I added\
    \ a version which sorts by the sum of the digits, not their absolute value.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  $sums = array_sum($nums);\n  asort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$num] - $sums;\n\
    \  }, $nums);\n}\n", "  $sums = array_map(function ($num) {\n    return $num *\
    \ log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function ($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  foreach ($nums as $i => $num) {\n    $nums[$i] = $nums[$i]\
    \ - $sums[$i];\n  }\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function ($num) use ($sums) {\n    return $nums[$num] - $sums;\n\
    \  }, $nums);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis solution\
    \ doesn't work for negative numbers. `order_by_points([-1, -10, -100, -200, -300,\
    \ -400, -500, -600, -700])` returns `[-100, -200, -300, -400, -500, -600, -700,\
    \ -10]`\n<|/ c |>\n<| c |>\n: I added a note about negative numbers to the answer.\n\
    <|/ c |>\n<| c |>\nI added a note about negative numbers to the answer.\n<|/ c\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $sums = array_map(function\
    \ ($num) {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return\
    \ array_map(function ($num) {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums\
    \ = array_map(function($num) { return $num * 10; }, $nums);\n  asort($sums);\n\
    \  return array_map(function($num) { return $num / 10; }, $sums);\n}\n", "  $sums\
    \ = array_map(function($num) { return $num % 10; }, $nums);\n  asort($sums);\n\
    \  return array_map(function($num) { return $num % 10; }, $nums);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  $sums = array_sum($nums);\n \
    \ asort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't seem to work. `order_by_points([1,11,-1,-11,-12])`\
    \ returns `[-1,-11,1,-12,11]` instead of `[-1, -11, 1, -12, 11]`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I guess you missed something in your code.\
    \ Can you post the code you used?\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I guess you missed something in your code. Can you post the code you\
    \ used?\n<|/ c |>\n<| c |>\nI tested it again and it works. I guess you missed\
    \ something in your code. Can you post the code you used?\n<|/ c |>\n<| c |>\n\
    I tested it again and it works. I guess you missed something in your code. Can\
    \ you post the code you used?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$numbers\
    \ = array(\n    1 => 1,\n    11 => 11,\n    -1 => -1,\n    -11 => -11,\n    -12\
    \ => -12\n);\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "  $sums = array_map(function($num)\
    \ { return intval($num); }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ { return $nums[$nums - $num]; }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the array. For\
    \ example, `order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]` but\
    \ `order_by_points([1, 11, -1, -11, -12, -3]) == [-1, -12, -11, -3]`.\n<|/ c |>\n\
    <| c |>\nI added a note about that in the answer. Thanks.\n<|/ c |>\n<| c |>\n\
    This doesn't work if there are negative numbers in the array. For example, `order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]` but `order_by_points([1, 11, -1,\
    \ -11, -12, -3]) == [-1, -12, -11, -3]`.\n<|/ c |>\n<| c |>\nI added a note about\
    \ that in the answer. Thanks.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $sums =\
    \ array_sum($nums);\n  arsort($sums);\n  return array_map(function($num) use ($sums)\
    \ {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums = array_map(function($num)\
    \ { return $num * 10; }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ { return $num / 10; }, $sums);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\n    array(\n        'number' => 1,\n \
    \       'points' => 3\n    ),\n    array(\n        'number' => 2,\n        'points'\
    \ => 3\n    ),\n    array(\n        'number' => 3,\n        'points' => 2\n  \
    \  ),\n    array(\n        'number' => 4,\n        'points' => 2\n    ),\n   \
    \ array(\n        'number' => 5,\n        'points' => 1\n    ),\n    array(\n\
    \        'number' => 6,\n        'points' => 1\n    ),\n    array(\n        'number'\
    \ => 7,\n        'points' => 1\n    ),\n    array(\n        'number' => 8,\n \
    \       'points' => 1\n    ),\n    array(\n        'number' => 9,\n        'points'\
    \ => 1\n    ),\n    array(\n        'number' => 10,\n        'points' => 1\n \
    \   ),\n    array(\n        'number' => 11,\n        'points' => 1\n    ),\n \
    \   array(\n        'number' => 12,\n        'points' => 1\n    ),\n    array(\n\
    \        'number' => 13,\n        'points' => 1\n    ),\n    array(\n        'number'\
    \ => 14,\n        'points' => 1\n    ),\n    array(\n        'number' => 15,\n\
    \        'points' => 1\n    ),\n    array(\n        'number' => 16,\n        'points'\
    \ => 1\n    ),\n    array(\n        'number' => 17,\n        'points' => 1\n \
    \   ),\n    array(\n        'number' => 18,\n        'points' => 1\n    ),\n \
    \   array(\n        'number' => 19,\n        'points' => 1\n    ),\n    array(\n\
    \        'number' => 20,\n        'points' => 1\n    ),\n    array(\n        'number'\
    \ => 21,\n        'points' => 1\n    ),\n    array(\n        'number' => 22,\n\
    \        'points' => 1\n    ),\n    array(\n        'number' => 23,\n        'points'\
    \ => 1\n    ),\n    array(\n        'number' => 24,\n        'points' => 1\n \
    \   ),\n    array(\n        'number' => 25,\n        'points' => 1\n    ),\n \
    \   array(\n        'number' => 26,\n        'points' => 1\n    ),\n    array(\n\
    \        'number' => 27,\n        'points' => 1\n    ),\n    array(\n        'number'\
    \ => 28,\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  sort($order);\n  return $order;\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are multiple items with the same sum.\n\
    <|/ c |>\n<| c |>\n: Yes, I know. That's why I wrote \"if there are several items\
    \ with similar sum of their digits, order them based on their index in original\
    \ list.\"\n<|/ c |>\n<| c |>\n: I added a note about that.\n<|/ c |>\n<| c |>\n\
    : I added a note about that.\n<|/ c |>\n<| c |>\n: I added a note about that.\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($v) use\
    \ ($sums, $order) {\n        return $order[$v];\n    }, $nums);\n}\n", "  $sums\
    \ = array_map(function($num) {\n    return $num * 10 + $num;\n  }, $nums);\n \
    \ asort($sums);\n  return array_map(function($num) {\n    return $num / 10;\n\
    \  }, $sums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function\
    \ ($num) use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "  $sums\
    \ = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  return array_map(function($v)\
    \ use ($sums) {\n    return $sums - $v;\n  }, $order);\n}\n", "    $sums = array_map(function($num)\
    \ { return intval($num); }, $nums);\n    asort($sums);\n    return array_map(function($sum)\
    \ { return $nums[$sum]; }, $sums);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. Try `order_by_points([-1, -10, -20, -30])`\n\
    <|/ c |>\n<| c |>\n: I added a note about this to the answer.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have negative numbers. Try `order_by_points([-1,\
    \ -10, -20, -30])`\n<|/ c |>\n<| c |>\n: I added a note about this to the answer.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  $sums = array_map(function($num) {\n \
    \   return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  $order\
    \ = array_keys($nums, $sums);\n  array_multisort($order, $nums);\n  return $nums;\n\
    }\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  sort($order);\n\
    \  return $order;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  return array_map(function($n) use ($sums, $order) {\n    return $order[$n];\n\
    \  }, $nums);\n}\n", "    $sums = array_map(function($num) {\n        return $num\
    \ * 10 + $num;\n    }, $nums);\n    asort($sums);\n    return array_map(function($num)\
    \ {\n        return $num / 10;\n    }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array();\n$arr[] = array('name'\
    \ => 'a', 'points' => 1);\n$arr[] = array('name' => 'b', 'points' => 2);\n$arr[]\
    \ = array('name' => 'c', 'points' => 3);\n$arr[] = array('name' => 'd', 'points'\
    \ => 4);\n$arr[] = array('name' => 'e', 'points' => 5);\n$arr[] = array('name'\
    \ => 'f', 'points' => 6);\n$arr[] = array('name' => 'g', 'points' => 7);\n$arr[]\
    \ = array('name' => 'h', 'points' => 8);\n$arr[] = array('name' => 'i', 'points'\
    \ => 9);\n$arr[] = array('name' => 'j', 'points' => 10);\n$arr[] = array('name'\
    \ => 'k', 'points' => 11);\n$arr[] = array('name' => 'l', 'points' => 12);\n$arr[]\
    \ = array('name' => 'm', 'points' => 13);\n$arr[] = array('name' => 'n', 'points'\
    \ => 14);\n$arr[] = array('name' => 'o', 'points' => 15);\n$arr[] = array('name'\
    \ => 'p', 'points' => 16);\n$arr[] = array('name' => 'q', 'points' => 17);\n$arr[]\
    \ = array('name' => 'r', 'points' => 18);\n$arr[] = array('name' => 's', 'points'\
    \ => 19);\n$arr[] = array('name' => 't', 'points' => 20);\n$arr[] = array('name'\
    \ => 'u', 'points' => 21);\n$arr[] = array('name' => 'v', 'points' => 22);\n$arr[]\
    \ = array('name' => 'w', 'points' => 23);\n$arr[] = array('name' => 'x', 'points'\
    \ => 24);\n$arr[] = array('name' => 'y', 'points' => 25);\n$arr[] = array('name'\
    \ => 'z', 'points' => 26);\n$arr[] = array('name' => 'A', 'points' => 27);\n$arr[]\
    \ = array('name' => 'B', 'points' => 28);\n$arr[] = array('name' => 'C', 'points'\
    \ => 29);\n$arr[] = array('name' => 'D', 'points' => 30);\n$arr[] = array('name'\
    \ => 'E', '", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  asort($order);\n  return $order;\n}\n",
  "    $sorted = [];\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum +=\
    \ $num;\n        $sorted[] = $num;\n    }\n    asort($sorted);\n    return $sorted;\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($n)\
    \ use ($sums) { return $sums - $n; }, $nums);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work if there are negative numbers in the array. Try it\
    \ with `[-2, -1, -3]`.\n<|/ c |>\n<| c |>\n: Yes, you're right. I've added a note\
    \ about that to the answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array\
    \ = [1, 11, -1, -11, -12];\n$sums = array_sum($array);\narsort($sums);\n$result\
    \ = array_map(function($n) use ($sums) { return $sums - $n; }, $array);\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = [1,\
    \ 11, -1, -11, -12];\n$sums = array_sum($array);\narsort($sums);\n$result = array_map(function($n)\
    \ use ($sums) { return $sums - $n; }, $array);\nprint_r($result);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = [1, 11, -1, -11, -12];\n\
    $sums = array_sum($array);\narsort($sums);\n$result = array_map(function($n) use\
    \ ($sums) { return $sums - $n; }, $array);\nprint_r($result);\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = [1, 11,\
    \ -1, -11, -12];\n$sums = array_sum($array);\narsort($sums);\n$result = array_map(function($n)\
    \ use ($sums) { return $sums - $n; }, $array);\nprint_r($result);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = [1, 11, -1,\
    \ -11, -12];\n$sums = array_sum($array);\narsort($sums);\n$result = array_map(function($n)\
    \ use ($sums) { return $sums - $n; }, $array);\nprint_r($result);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = [1, 11, ", " \
    \   $sums = array_sum($nums);\n    $sorted = [];\n    foreach ($nums as $i =>\
    \ $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    return\
    \ array_intersect_key($nums, $sorted);\n}\n", "  $sums = array_map(function ($num)\
    \ {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function\
    \ ($num) {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  foreach ($nums as $i => $num) {\n    $nums[$i] = $sums - $num;\n\
    \  }\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}", " \
    \ $sums = array_sum($nums);\n  return array_map(function($num) use ($sums) {\n\
    \    return $nums[$num];\n  }, array_keys($nums), $nums);\n}\n", "  $sums = array_map(function($num)\
    \ { return $num * 10; }, $nums);\n  sort($sums);\n  return array_map(function($num)\
    \ { return $num / 10; }, $sums);\n}\n", "  $sums = array_map(function($num) {\n\
    \    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_map(function\
    \ ($num) {\n    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  $nums\
    \ = array_map(function ($sum) {\n    return $sum / log10($sum);\n  }, $sums);\n\
    \  return $nums;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ Your solution works perfectly for small arrays, but for large arrays it takes\
    \ too long to complete. Do you know any way to make it faster?\n<|/ c |>\n<| c\
    \ |>\nI added a faster solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your solution works perfectly for small arrays, but for large arrays\
    \ it takes too long to complete. Do you know any way to make it faster?\n<|/ c\
    \ |>\n<| c |>\nI added a faster solution. Hope it helps.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI wrote a quick script to test the speed of different solutions.\nThe script\
    \ is based on this answer: https://stackoverflow.com/a/427825/181289\n<code>\n\
    <?php\n$start = microtime(true);\n$array = array(\n    array(\n        array(1,\
    \ 2, 3, 4),\n        array(5, 6, 7, 8),\n        array(9, 10, 11, 12),\n     \
    \   array(13, 14, 15, 16),\n        array(17, 18, 19, 20),\n        array(21,\
    \ 22, 23, 24),\n        array(25, 26, 27, 28),\n        array(29, 30, 31, 32),\n\
    \        array(33, 34, 35, 36),\n        array(37, 38, 39, 40),\n        array(41,\
    \ 42, 43, 44),\n        array(45, 46, 47, 48),\n        array(49, 50, 51, 52),\n\
    \        array(53, 54, 55, 56),\n        array(57, 58, 59, 60),\n        array(61,\
    \ 62, 63, 64),\n        array(65, 66, 67, 68),\n        array(69, 70, 71, 72),\n\
    \        array(73, 74, 75, 76),\n        array(77, 78, 79, 80),\n        array(81,\
    \ 82, 83, 84),\n        array(85, 86, 87, 88),\n        array(89, 90, 91, 92),\n\
    \        array(93, 94, 95, 96),\n        array(97, 98, 99, 100),\n        array(101,\
    \ 102, 103, 104),\n        array(105, 106, 107, 108),\n        array(109, 110,\
    \ 111, 112),\n        array(11", "  $sums = array_map(function($num) {\n    return\
    \ $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / log10($num);\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$num] - $sums;\n  }, $nums);\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($sums);\n  return array_map(function($n) use ($sums) {\n    return $sums[$n];\n\
    \  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return\
    \ array_map(function($num) use ($sums) {\n    return $sums - $num;\n  }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  return\
    \ array_intersect_key($nums, array_flip($order));\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($sums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$sums - $num];\n  }, $nums);\n}\n", "    $sums = array_map(function ($num)\
    \ {\n        return array_sum(str_split($num));\n    }, $nums);\n    asort($sums);\n\
    \    return array_map(function ($num) use ($nums) {\n        return array_search($num,\
    \ $nums);\n    }, $sums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$num];\n  },\
    \ $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function\
    \ ($num) use ($sums) {\n    return $nums[$num] - $sums;\n  }, $nums);\n}\n", " \
    \ $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using array_sum and asort. Maybe with array_reduce?\n<|/ c |>\n<| c |>\n: Yes,\
    \ `array_reduce` would work. I'll post an example in a minute.\n<|/ c |>\n<| c\
    \ |>\n: I added an example using `array_reduce`.\n<|/ c |>\n<| c |>\n: I added\
    \ an example using `array_reduce`.\n<|/ c |>\n<| c |>\n: I added an example using\
    \ `array_reduce`.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array =\
    \ array(\n    array('name' => 'John', 'points' => 5),\n    array('name' => 'Jane',\
    \ 'points' => 10),\n    array('name' => 'Jack', 'points' => 2),\n    array('name'\
    \ => 'Jill', 'points' => 3),\n    array('name' => 'James', 'points' => 1),\n \
    \   array('name' => 'Jim', 'points' => 1),\n    array('name' => 'Jack', 'points'\
    \ => 2),\n    array('name' => 'Jim', 'points' => 1),\n    array('name' => 'Jim',\
    \ 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' => 1),\n    array('name' => 'Jim', 'points' => 1),\n    array('name'\
    \ => 'Jim', 'points' ", "  $sums = array_sum($nums);\n  asort($nums);\n  return\
    \ array_map(function ($num) use ($sums) {\n    return $sums - $num;\n  }, $nums);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the idea of using array_sum to\
    \ sort the array, but I wonder if this is really the best way to solve this problem.\
    \ Sorting by summing digits is O(n log n), but summing them all up is O(n). So\
    \ sorting by summing digits is O(n log n) but summing them all up is O(n^2). Is\
    \ this really the best way to solve this problem?\n<|/ c |>\n<| c |>\nI agree\
    \ with you, it's O(n^2). But I thought that sorting by summing digits is O(n log\
    \ n) because it's O(n) when sorting by summing digits. So sorting by summing digits\
    \ is O(n log n) but summing them all up is O(n^2). Is this really the best way\
    \ to solve this problem?\n<|/ c |>\n<| c |>\nSorting by summing digits is O(n\
    \ log n) because it's O(n) when sorting by summing digits. So sorting by summing\
    \ digits is O(n log n) but summing them all up is O(n^2). Is this really the best\
    \ way to solve this problem?\n<|/ c |>\n<| c |>\nI agree with you, it's O(n^2).\
    \ But I thought that sorting by summing digits is O(n log n) because it's O(n)\
    \ when sorting by summing digits. So sorting by summing digits is O(n log n) but\
    \ summing them all up is O(n^2). Is this really the best way to solve this problem?\n\
    <|/ c |>\n<| c |>\nI agree with you, it's O(n^2). But I thought that sorting by\
    \ summing digits is O(n log n) because it's O(n) when sorting by summing digits.\
    \ So sorting by summing digits is O(n log n) but summing them all up is O(n^2).\
    \ Is this really the best way to solve this problem?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n\n$numbers = [\n    1 => [\n        'name' => 'one',\n  \
    \      'points' => 1,\n    ],\n    2 => [\n        'name' => 'two", "    $sums\
    \ = array_sum($nums);\n    $sorted = [];\n    foreach ($nums as $i => $num) {\n\
    \        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    $sorted = array_values($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n\
    \    }\n    return $sorted;\n}\n", "  $sums = array_map(function($num) {\n   \
    \ return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=0 |>\n<code>", "  $sums = array_map(function($num) {\n    return $num\
    \ * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / log10($num);\n  }, $sums);\n}\n", "  $sums = array_map(function($num)\
    \ { return $num * 10; }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ { return $num / 10; }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nI like this solution. Very elegant. Thanks.\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work for negative numbers. Try `order_by_points([-1, -12, -11])`.\n\
    <|/ c |>\n<| c |>\n: I added a note about negative numbers to the answer.\n<|/\
    \ c |>\n<| c |>\n: I added a note about negative numbers to the answer.\n<|/ c\
    \ |>\n<| c |>\nI like the elegance of this solution, but I believe it fails for\
    \ negative numbers. Try `order_by_points([-1, -12, -11])`.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$nums = [1, 11, -1, -11, -12];\n$nums = array_map(function($num)\
    \ { return $num * 10; }, $nums);\nasort($nums);\n$nums = array_map(function($num)\
    \ { return $num / 10; }, $nums);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution\
    \ doesn't work for negative numbers. Try `order_by_points([-1, -12, -11])`.\n\
    <|/ c |>\n<| c |>\n: I added a note about negative numbers to the answer.\n<|/\
    \ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$nums = [1, 11, -1, -11, -12];\n\
    $nums = array_map(function($num) { return $num * 10; }, $nums);\nasort($nums);\n\
    $nums = array_map(function($num) { return $num / 10; }, $nums);\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$nums = [1, 11, -1, -11, -12];\n$nums\
    \ = array_map(function($num) { return $num * 10; }, $nums);\nasort($nums);\n$nums\
    \ = array_map(function($num) { return $num / 10; }, $nums);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$nums = [1, 11, -1, -11, -12];\n\
    $nums = array_map(function($num) { return $num", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  array_multisort($order, $nums);\n  return $order;\n}\n", "  $sums\
    \ = array_map(function ($num) {\n    return $num * 10 + $num;\n  }, $nums);\n\
    \  asort($sums);\n  return array_map(function ($num) {\n    return $num / 10;\n\
    \  }, $sums);\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return\
    \ array_map(function ($num) use ($sums) {\n    return $nums[$sums - $num];\n \
    \ }, $nums);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$numbers = array(\n    array(\n        'name' => 'John',\n    \
    \    'age' => 25,\n        'points' => 10\n    ),\n    array(\n        'name'\
    \ => 'Jane',\n        'age' => 30,\n        'points' => 20\n    ),\n    array(\n\
    \        'name' => 'Jack',\n        'age' => 35,\n        'points' => 15\n   \
    \ ),\n    array(\n        'name' => 'Jill',\n        'age' => 40,\n        'points'\
    \ => 5\n    ),\n    array(\n        'name' => 'Jack',\n        'age' => 35,\n\
    \        'points' => 15\n    ),\n    array(\n        'name' => 'Jill',\n     \
    \   'age' => 40,\n        'points' => 5\n    ),\n    array(\n        'name' =>\
    \ 'Jack',\n        'age' => 35,\n        'points' => 15\n    ),\n    array(\n\
    \        'name' => 'Jill',\n        'age' => 40,\n        'points' => 5\n    ),\n\
    \    array(\n        'name' => 'Jack',\n        'age' => 35,\n        'points'\
    \ => 15\n    ),\n    array(\n        'name' => 'Jill',\n        'age' => 40,\n\
    \        'points' => 5\n    ),\n    array(\n        'name' => 'Jack',\n      \
    \  'age' => 35,\n        'points' => 15\n    ),\n    array(\n        'name' =>\
    \ 'Jill',\n        'age' => 40,\n        'points' => 5\n    ),\n    array(\n \
    \       'name' => 'Jack',\n        'age' => 35,\n        'points' => 15\n    ),\n\
    \    array(\n        'name' => 'Jill',\n        'age' => 40,\n        'points'\
    \ => 5\n    ),\n    array(\n        'name' => 'Jack',\n        'age' => 35,\n\
    \        'points' => 15\n    ),\n    array(\n        'name' => 'Jill',\n     \
    \   'age' => 40,\n        'points' => 5\n    ),\n    array(\n        'name' =>\
    \ 'Jack',\n        'age' => 35,\n        'points' => 15\n    ),\n    array(\n\
    \        'name' => 'Jill',\n        'age' => 40,\n        'points' => 5\n    ),\n\
    \    array(\n        'name' => 'Jack',\n        'age' => 35,\n        'points'\
    \ => 15\n    ),", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "    $sorted\
    \ = [];\n    $sums = array_sum($nums);\n    foreach ($nums as $i => $num) {\n\
    \        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach ($sorted\
    \ as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n    }\n    return\
    \ $sorted;\n}\n", "    $sums = array_sum($nums);\n    asort($nums);\n    return\
    \ array_map(function($num) use ($sums) {\n        return $sums - $num;\n    },\
    \ $nums);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers. `order_by_points([-1, -10, -20, -30])` returns `[-10, -20, -30, -1]`\
    \ instead of `[-1, -10, -20, -30]`.\n<|/ c |>\n<| c |>\nI didn't realize that\
    \ negative numbers would have to be handled differently. I've updated my answer\
    \ to handle negative numbers correctly.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have negative numbers. `order_by_points([-1, -10, -20, -30])` returns\
    \ `[-10, -20, -30, -1]` instead of `[-1, -10, -20, -30]`.\n<|/ c |>\n<| c |>\n\
    I didn't realize that negative numbers would have to be handled differently. I've\
    \ updated my answer to handle negative numbers correctly.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have negative numbers. `order_by_points([-1, -10, -20,\
    \ -30])` returns `[-10, -20, -30, -1]` instead of `[-1, -10, -20, -30]`.\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php\n$numbers = [1, 11, -1, -11, -12];\n$sums = array_sum($numbers);\n\
    $sorted = array_map(function($num) use ($sums) {\n    return $sums - $num;\n},\
    \ $numbers);\nprint_r($sorted);\n</code>\n<|/ a tags=php,arrays,sorting dscore=5\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. `order_by_points([-1,\
    \ -10, -20, -30])` returns `[-10, -20, -30, -1]` instead of `[-1, -10, -20, -30]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers. `order_by_points([-1,\
    \ -10, -20, -30])` returns `[-10, -20, -30, -1]` instead of `[-1, -10, -20, -30]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers. `order_by_points([-1,\
    \ -10, -20, -30])` returns `[-10, -20, -30, -1]` instead of `[-1, -10, -20, -30]`.\n\
    <|/ c |>\n<| a dscore=", "  $sums = array_map(function($num) { return $num * 10;\
    \ }, $nums);\n  asort($sums);\n  $nums = array_map(function($sum) { return $sum\
    \ / 10; }, $sums);\n  return $nums;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't seem to work. `order_by_points([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]` but `order_by_points([]) == []`\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I added a solution that\
    \ doesn't require sorting at all. Hope it helps.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that doesn't require sorting at all. Hope it helps.\n<|/ c |>\n<|\
    \ a tags=php,sorting |>\n<code>", "  $sums = array_map(function($num) {\n    return\
    \ $num * $num;\n  }, $nums);\n  asort($sums);\n  $sorted = array_map(function($sum)\
    \ {\n    return array_search($sum, $sums);\n  }, $sums);\n  return $sorted;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if there\
    \ are two or more items with the same sum.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ I added a note to the answer.\n<|/ c |>\n<| c |>\n: I added a solution that\
    \ doesn't require sorting by sum.\n<|/ c |>\n<| c |>\n: I added a solution that\
    \ doesn't require sorting by sum.\n<|/ c |>\n<| c |>\n: I added a solution that\
    \ doesn't require sorting by sum.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\n    array('name' => 'John', 'points' => 5),\n    array('name' => 'Jane',\
    \ 'points' => 10),\n    array('name' => 'Jack', 'points' => 5),\n    array('name'\
    \ => 'Jill', 'points' => 10),\n    array('name' => 'Jack', 'points' => 5),\n \
    \   array('name' => 'Jill', 'points' => 10),\n    array('name' => 'Jane', 'points'\
    \ => 10),\n    array('name' => 'Jack', 'points' => 5),\n    array('name' => 'Jill',\
    \ 'points' => 10),\n    array('name' => 'Jack', 'points' => 5),\n    array('name'\
    \ => 'Jill', 'points' => 10),\n    array('name' => 'Jane', 'points' => 10),\n\
    \    array('name' => 'Jack', 'points' => 5),\n    array('name' => 'Jill', 'points'\
    \ => 10),\n    array('name' => 'Jack', 'points' => 5),\n    array('name' => 'Jill',\
    \ 'points' => 10),\n    array('name' => 'Jane', 'points' => 10),\n    array('name'\
    \ => 'Jack', 'points' => 5),\n    array('name' => 'Jill', 'points' => 10),\n \
    \   array('name' => 'Jack', 'points' => 5),\n    array('name' => 'Jill', 'points'\
    \ => 10),\n    array('name' => 'Jane', 'points' => 10),\n    array('name' => 'Jack',\
    \ 'points' => 5),\n    array('name' => 'Jill', 'points' ", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$num];\n  }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_map(function($v) use ($order)\
    \ {\n        return $order[$v];\n    }, $nums);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are multiple items with the same sum.\n\
    <|/ c |>\n<| c |>\n: I added a note to the answer.\n<|/ c |>\n<| c |>\nI added\
    \ a note to the answer.\n<|/ c |>\n<| c |>\n: I added a note to the answer.\n\
    <|/ c |>\n<| c |>\n: I added a note to the answer.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like your solution. However I cannot get it to work. Can you please\
    \ explain how you got it to work? I added the code to the original question and\
    \ added the function to the bottom of the page. Thanks.\n<|/ c |>\n<| c |>\nI\
    \ added a comment to the code explaining how it works. I hope that helps.\n<|/\
    \ c |>\n<| c |>\nThanks. I added the code to the original question and added the\
    \ function to the bottom of the page. Thanks.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the code explaining how it works. I hope that helps.\n<|/ c |>\n<| c |>\n\
    Thanks. I added the code to the original question and added the function to the\
    \ bottom of the page. Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", " \
    \   $sums = array_sum($nums);\n    $sorted = [];\n    foreach ($nums as $i =>\
    \ $num) {\n        $sorted[$i] = $num;\n        if ($sums[$i] == $sum) {\n   \
    \         $sorted[$i] = $i;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>", " \
    \ $sums = array_map(function($num) {\n    return $num * 10 + $num;\n  }, $nums);\n\
    \  asort($sums);\n  return array_map(function($num) {\n    return $num / 10;\n\
    \  }, $sums);\n}\n", "  $sums = array_map(function($num) {\n    return $num *\
    \ 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=php,arrays,sorting |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n\
    \    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n\
    \    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13\
    \ => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 =>\
    \ 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n\
    \    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n \
    \   29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n  \
    \  34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n   \
    \ 39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 => 43,\n    44\
    \ => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n    49 =>\
    \ 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n\
    \    55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n \
    \   60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n  \
    \  65 => 65,\n    66 => 66,\n    67 => 67,\n    68 => 68,\n    69 => 69,\n   \
    \ 70 => 70,\n    71 => 71,\n    72 => 72,\n    73 => 73,\n    74 => 74,\n    ",
  "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  asort($order);\n\
    \  return $order;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return\
    \ $nums;\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function\
    \ ($num) use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return array_map(function($n) use ($sums)\
    \ {\n    return $sums - $n;\n  }, $nums);\n}\n", "    $sums = array_map(function($num)\
    \ {\n        return $num * 10 + $num;\n    }, $nums);\n    asort($sums);\n   \
    \ return array_map(function($num) {\n        return $num / 10;\n    }, $sums);\n\
    }\n", "  $sums = array_map(function($num) {\n    return $num * $num;\n  }, $nums);\n\
    \  asort($sums);\n  return array_map(function($num) {\n    return $num / $sums[$num];\n\
    \  }, $nums);\n}\n", "  $sums = array_map(function($num) {\n    return $num *\
    \ 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function ($n) use ($sums) {\n    return\
    \ $sums - $n;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $sums - $num;\n \
    \ }, $nums);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ seem to work if there are negative numbers in the array. For example, `order_by_points([-1,\
    \ -10, -20, -30])` returns `[-30, -20, -10, -1]` instead of `[-1, -10, -20, -30]`.\n\
    <|/ c |>\n<| c |>\nI added a note to the answer. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $sums = array_sum($nums);\n\
    \  arsort($sums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `order_by_points([-1, -10, -5, -15,\
    \ -20, -25])`.\n<|/ c |>\n<| c |>\n: I believe it does. Try it yourself.\n<|/\
    \ c |>\n<| c |>\n: It does, but only because you didn't try it yourself. Try it\
    \ yourself. It doesn't work for negative numbers. Try `order_by_points([-1, -10,\
    \ -5, -15, -20, -25])`.\n<|/ c |>\n<| c |>\n: I believe it does. Try it yourself.\
    \ It doesn't work for negative numbers. Try `order_by_points([-1, -10, -5, -15,\
    \ -20, -25])`.\n<|/ c |>\n<| c |>\n: I believe it does. Try it yourself. It doesn't\
    \ work for negative numbers. Try `order_by_points([-1, -10, -5, -15, -20, -25])`.\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "  $sums = array_map(function($num)\
    \ { return $num->digits; }, $nums);\n  asort($sums);\n  return array_map(function($sum)\
    \ { return $nums[$sum]; }, $sums);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI\
    \ like your solution, but I believe it can be made more efficient by using a `foreach`\
    \ loop instead of `array_map`.\n<|/ c |>\n<| c |>\n: I agree, but I wanted to\
    \ keep it simple and understandable for the OP. Also, I wanted to show that `array_map`\
    \ can be used for this kind of task. Also, I wanted to show that `array_map` can\
    \ be used for this kind of task. Also, I wanted to show that `array_map` can be\
    \ used for this kind of task. Also, I wanted to show that `array_map` can be used\
    \ for this kind of task. Also, I wanted to show that `array_map` can be used for\
    \ this kind of task. Also, I wanted to show that `array_map` can be used for this\
    \ kind of task. Also, I wanted to show that `array_map` can be used for this kind\
    \ of task. Also, I wanted to show that `array_map` can be used for this kind of\
    \ task. Also, I wanted to show that `array_map` can be used for this kind of task.\
    \ Also, I wanted to show that `array_map` can be used for this kind of task. Also,\
    \ I wanted to show that `array_map` can be used for this kind of task. Also, I\
    \ wanted to show that `array_map` can be used for this kind of task. Also, I wanted\
    \ to show that `array_map` can be used for this kind of task. Also, I wanted to\
    \ show that `array_map` can be used for this kind of task. Also, I wanted to show\
    \ that `array_map` can be used for this kind of task. Also, I wanted to show that\
    \ `array_map` can be used for this kind of task. Also, I wanted to show that `array_map`\
    \ can be used for this kind of task. Also, I wanted to show that `array_map` can\
    \ be used for this kind of task. Also, I wanted to show that `array_map` can be\
    \ used for this kind of task. Also, I wanted to show that `array_map` can be used\
    \ for this kind of task. Also, I wanted to show that `array_map` can be used for\
    \ this kind of task. Also, I wanted to show that `array_map` can be used for this\
    \ kind of task. Also, I wanted to show that `array_map` can be used for this kind\
    \ of task. Also, I wanted to show that `array_map` can be used for this kind of\
    \ task. Also, I wanted to show that `array_map` can be used for this kind of task.\
    \ Also, I wanted to show that `array_map` can be used for this kind of task. Also,\
    \ I wanted to show that `array_map` can be used for ", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$num];\n  }, $nums);\n}\n", "  $sums = array_map(function($num) { return\
    \ $num * 10; }, $nums);\n  asort($sums);\n  return array_map(function($num) {\
    \ return $num / 10; }, $sums);\n}\n", "  $sums = array_map(function($num) { return\
    \ $num * 10; }, $nums);\n  asort($sums);\n  return array_map(function($num) {\
    \ return $num / 10; }, $sums);\n}", "    $sorted = [];\n    $sums = array_sum($nums);\n\
    \    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n   \
    \ asort($sorted);\n    foreach ($sorted as $i => $num) {\n        $sorted[$i]\
    \ = $sums - $num;\n    }\n    return $sorted;\n}\n", "    $sums = array_map(function($num)\
    \ { return $num * 10; }, $nums);\n    asort($sums);\n    return array_map(function($num)\
    \ { return $num / 10; }, $sums);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ your answer, but I think it would be better to explain how it works. Also, why\
    \ do you think it would be better to explain how it works?\n<|/ c |>\n<| c |>\n\
    I added some explanation.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2 =>\
    \ 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 =>\
    \ 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n\
    \    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n \
    \   19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n  \
    \  24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n   \
    \ 29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34\
    \ => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 =>\
    \ 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n\
    \    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n \
    \   50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n  \
    \  55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n   \
    \ 60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n    65\
    \ => 65,\n    ", "    $sorted = [];\n    $sums = array_sum($nums);\n    foreach\
    \ ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums - $num;\n\
    \    }\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_map(function($v) use ($sums, $order)\
    \ {\n        return $order[$v];\n    }, $nums);\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  sort($order);\n  return $order;\n}\n",
  "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  sort($order);\n\
    \  return $order;\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return\
    \ array_map(function($num) use ($sums) {\n    return $nums[$sums - $num];\n  },\
    \ $nums);\n}\n", "  $sums = array_map(function($num) { return $num * 10; }, $nums);\n\
    \  asort($sums);\n  return array_map(function($num) { return $num / 10; }, $sums);\n\
    }\n", "  $sums = array_map(function($num) { return $num % 10; }, $nums);\n  array_multisort($sums,\
    \ $nums);\n  return $nums;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c\
    \ |>\nThis doesn't work if there are two equal sums.\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I added a note to the answer.\n<|/ c |>\n<| c |>\nI added a note to\
    \ the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n \
    \ return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $sums - $num;\n  }, $nums);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n\
    <| c |>\nI like your answer but I think it would be better to use a `usort` with\
    \ a custom comparison function\n<|/ c |>\n<| c |>\nI agree with you. My answer\
    \ was more of a \"how to\" rather than a complete solution. I'll add an example\
    \ to my answer.\n<|/ c |>\n<| c |>\nI added an example to my answer.\n<|/ c |>\n\
    <| c |>\nI added an example to my answer.\n<|/ c |>\n<| c |>\nI added an example\
    \ to my answer.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$arr = array(\n    array('name'\
    \ => 'John', 'age' => 20, 'score' => 10),\n    array('name' => 'Jane', 'age' =>\
    \ 21, 'score' => 5),\n    array('name' => 'Jack', 'age' => 22, 'score' => 8),\n\
    \    array('name' => 'Jill', 'age' => 23, 'score' => 9),\n    array('name' =>\
    \ 'Jack', 'age' => 24, 'score' => 7),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'score' => 6),\n    array('name' => 'Jane', 'age' => 22, 'score' => 5),\n  \
    \  array('name' => 'John', 'age' => 20, 'score' => 10),\n    array('name' => 'Jack',\
    \ 'age' => 22, 'score' => 8),\n    array('name' => 'Jill', 'age' => 23, 'score'\
    \ => 9),\n    array('name' => 'Jack', 'age' => 24, 'score' => 7),\n    array('name'\
    \ => 'Jill', 'age' => 25, 'score' => 6),\n    array('name' => 'Jane', 'age' =>\
    \ 22, 'score' => 5),\n    array('name' => 'John', 'age' => 20, 'score' => 10),\n\
    \    array('name' => 'Jack', 'age' => 22, 'score' => 8),\n    array('name' =>\
    \ 'Jill', 'age' => 23, 'score' => 9),\n    array('name' => 'Jack', 'age' => 24,\
    \ 'score' => 7),\n    array('name' => 'Jill', 'age' => 25, 'score' => 6),\n  \
    \  array('name' => 'Jane', 'age' => 22, 'score' => 5),\n    array('name' => 'John',\
    \ 'age' => 20, 'score' => 10),", "    $sums = array_sum($nums);\n    $order =\
    \ array_keys($nums, $sums);\n    return array_map(function($v) use ($order) {\n\
    \        return $order[$v];\n    }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  return array_map(function ($num) use ($sums) {\n    return $nums[$num];\n \
    \ }, array_keys($nums, $sums));\n}\n", "  $sums = array_map(function($num) { return\
    \ intval($num); }, $nums);\n  array_multisort($sums, $nums);\n  return $nums;\n\
    }\n", "  $sums = array_map(function($num) {\n    return $num * 10 + $num;\n  },\
    \ $nums);\n  asort($sums);\n  return array_map(function($num) {\n    return $num\
    \ / 10;\n  }, $sums);\n}\n", "  $sums = array_map(function($num) { return intval($num);\
    \ }, $nums);\n  asort($sums);\n  return array_map(function($num) { return $nums[$nums\
    \ - $num]; }, $sums);\n}\n", "  $sums = array_map(function($num) { return $num\
    \ % 10; }, $nums);\n  array_multisort($sums, $nums);\n  return $nums;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>", "  $sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums, array_flip($order));\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = [];\n    foreach ($nums as\
    \ $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n   \
    \ return array_merge(array_slice($sorted, 0, $sums), array_slice($sorted, $sums));\n\
    }\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function\
    \ ($num) use ($sums) {\n    return $nums[$num];\n  }, $nums);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution works but it is\
    \ very slow for large lists. I posted my own answer which works much faster.\n\
    <|/ c |>\n<| a dscore=0 |>\nI posted my own answer which works much faster. Here\
    \ it is:\n<code>", "  $sums = array_map(function($num) {\n    return $num * 10\
    \ + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num) {\n\
    \    return $num / 10;\n  }, $sums);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n\
    \    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n\
    \    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n \
    \   15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n  \
    \  20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 => 24,\n   \
    \ 25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n    30\
    \ => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n    35 =>\
    \ 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n\
    \    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n \
    \   46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n    50 => 50,\n  \
    \  51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n    55 => 55,\n   \
    \ 56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n    60 => 60,\n    61\
    \ => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n    65 => 65,\n    66 =>\
    \ 66,\n    67 => 67,\n    68 => 68,\n    69 => 69,\n    70 => 70,\n    71 => 71,\n\
    \    72 => 72,\n    73 => 73,\n    74 => 74,\n    75 => 75", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($v) use\
    \ ($sums) {\n        return $sums - $v;\n    }, $order);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\n    array(\n        'name' => 'John',\n\
    \        'age' => 30,\n        'score' => 90\n    ),\n    array(\n        'name'\
    \ => 'Jane',\n        'age' => 25,\n        'score' => 80\n    ),\n    array(\n\
    \        'name' => 'Jack',\n        'age' => 25,\n        'score' => 60\n    ),\n\
    \    array(\n        'name' => 'Jill',\n        'age' => 25,\n        'score'\
    \ => 50\n    ),\n    array(\n        'name' => 'Jack',\n        'age' => 25,\n\
    \        'score' => 60\n    ),\n    array(\n        'name' => 'Jill',\n      \
    \  'age' => 25,\n        'score' => 50\n    ),\n    array(\n        'name' =>\
    \ 'Jack',\n        'age' => 25,\n        'score' => 60\n    ),\n    array(\n \
    \       'name' => 'Jill',\n        'age' => 25,\n        'score' => 50\n    ),\n\
    \    array(\n        'name' => 'Jack',\n        'age' => 25,\n        'score'\
    \ => 60\n    ),\n    array(\n        'name' => 'Jill',\n        'age' => 25,\n\
    \        'score' => 50\n    ),\n    array(\n        'name' => 'Jack',\n      \
    \  'age' => 25,\n        'score' => 60\n    ),\n    array(\n        'name' =>\
    \ 'Jill',\n        'age' => 25,\n        'score' => 50\n    ),\n    array(\n \
    \       'name' => 'Jack',\n        'age' => 25,\n        'score' => 60\n    ),\n\
    \    array(\n        'name' => 'Jill',\n        'age' => 25,\n        'score'\
    \ => 50\n    ),\n    array(\n        'name' => 'Jack',\n        'age' => 25,\n\
    \        'score' => 60\n    ),\n    array(\n        'name' => 'Jill',\n      \
    \  'age' => 25,\n        'score' => 50\n    ),\n    array(\n        'name' =>\
    \ 'Jack',\n        'age' => 25,\n        'score' => 60\n    ),\n    array(\n \
    \       'name' => 'Jill',\n        'age' => 25,\n        'score' => 50\n    ),\n\
    \    array(\n        'name' => 'Jack',\n        'age' => 25,\n        'score'\
    \ => 60\n    ),\n    array(\n        'name' => 'Jill',\n        'age' => 25,\n\
    \        'score' => 50\n    ),\n    ", "  $sums = array_sum($nums);\n  asort($nums);\n\
    \  return array_map(function ($num) use ($sums) {\n    return $sums - $num;\n\
    \  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function\
    \ ($num) use ($sums) {\n    return $nums[$num] - $sums;\n  }, $nums);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for the answer. Your solution works great for\
    \ small lists, but for large lists it takes too long to sort the list. Is there\
    \ a way to optimize this solution?\n<|/ c |>\n<| c |>\nI added a solution that\
    \ sorts lists faster than your original solution. Hope it helps.\n<|/ c |>\n<|\
    \ a tags=php,arrays,sorting |>\n<code>\n<?php\n$array = array(\n    array(\n \
    \       'id' => 1,\n        'name' => 'John',\n        'points' => 2\n    ),\n\
    \    array(\n        'id' => 2,\n        'name' => 'Jane',\n        'points' =>\
    \ 3\n    ),\n    array(\n        'id' => 3,\n        'name' => 'Jack',\n     \
    \   'points' => 1\n    ),\n    array(\n        'id' => 4,\n        'name' => 'Jill',\n\
    \        'points' => 4\n    ),\n    array(\n        'id' => 5,\n        'name'\
    \ => 'Jack',\n        'points' => 1\n    ),\n    array(\n        'id' => 6,\n\
    \        'name' => 'Jill',\n        'points' => 4\n    ),\n    array(\n      \
    \  'id' => 7,\n        'name' => 'Jack',\n        'points' => 1\n    ),\n    array(\n\
    \        'id' => 8,\n        'name' => 'Jill',\n        'points' => 4\n    ),\n\
    \    array(\n        'id' => 9,\n        'name' => 'Jack',\n        'points' =>\
    \ 1\n    ),\n    array(\n        'id' => 10,\n        'name' => 'Jill',\n    \
    \    'points' => 4\n    ),\n    array(\n        'id' => 11,\n        'name' =>\
    \ 'Jack',\n        'points' => 1\n    ),\n    array(\n        'id' => 12,\n  \
    \      'name' => 'Jill',\n        'points' => 4\n    ),\n    array(\n        'id'\
    \ => 13,\n        'name' => 'Jack',\n        'points' => 1\n    ),\n    array(\n\
    \        'id' => 14,\n        'name' => 'Jill',\n        'points' => 4\n    ),\n\
    \    array(\n        'id' => 15,\n        'name' => 'Jack',\n        'points'\
    \ => 1\n    ),\n    array(\n        'id' => 16,\n        'name' => 'Jill',\n \
    \       'points' => 4\n", "  $sums = array_sum($nums);\n  $sorted = [];\n  foreach\
    \ ($nums as $i => $num) {\n    $sorted[$i] = $num;\n  }\n  asort($sorted);\n \
    \ return array_intersect_key($nums, $sorted);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>", "  $sums = array_map(function($num)\
    \ { return $num * 10; }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ { return $num / 10; }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ having to use array_map.\n<|/ c |>\n<| c |>\nI added a solution without array_map.\n\
    <|/ c |>\n<| c |>\nI added a solution without array_map.\n<|/ c |>\n<| c |>\n\
    I added a solution without array_map.\n<|/ c |>\n<| a dscore=2 |>\n<code>", " \
    \ $sums = array_map(function($num) {\n    return $num * 10 + intval($num);\n \
    \ }, $nums);\n  asort($sums);\n  return array_map(function($num) {\n    return\
    \ $num / 10 + intval($num % 10);\n  }, $sums);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=php,sorting,arrays |>\n<code>", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($n) use ($sums, $order) {\n        return\
    \ $order[$n];\n    }, $nums);\n}\n", "  $sums = array_map(function($num) {\n \
    \   return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are multiple items with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"Note: if there are several\
    \ items with similar sum of their digits, order them based on their index in original\
    \ list.\"\n<|/ c |>\n<| c |>\nI didn't know that PHP had `array_multisort`. I\
    \ thought it was a PHP 5.3 feature.\n<|/ c |>\n<| c |>\n: I didn't know that either.\
    \ Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a solution that doesn't require PHP 5.3\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\nI believe this should work:\n<code>", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}", " \
    \ $sums = array_map(function($num) { return $num->sum(); }, $nums);\n  arsort($sums);\n\
    \  return array_map(function($num) { return $num->num(); }, $nums);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ built-in functions. I only can use loops, if, switch, arrays, etc.\n<|/ c |>\n\
    <| c |>\n: I added a solution without built-in functions.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I think I understand your code, but I still don't understand\
    \ why you use $sums[$i] instead of $sums[$nums[$i]]. Could you please explain\
    \ it a little bit more?\n<|/ c |>\n<| c |>\n: I used `$sums[$i]` because I wanted\
    \ to keep track of the sums while sorting. `$sums[$nums[$i]]` would not work because\
    \ `$nums[$i]` would refer to the element of the array `$nums` at index `$i`, whereas\
    \ `$i` refers to the index of the element in the array `$sums`. So `$sums[$i]`\
    \ would refer to the sum of the digits of `$nums[$i]`.\n<|/ c |>\n<| c |>\nThanks\
    \ for your explanation. I understand it now.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$nums = array(\n    array(1, 1),\n    array(2, 2),\n    array(3,\
    \ 3),\n    array(4, 4),\n    array(5, 5),\n    array(6, 6),\n    array(7, 7),\n\
    \    array(8, 8),\n    array(9, 9),\n    array(10, 10),\n    array(11, 11),\n\
    \    array(12, 12),\n    array(13, 13),\n    array(14, 14),\n    array(15, 15),\n\
    \    array(16, 16),\n    array(17, 17),\n    array(18, 18),\n    array(19, 19),\n\
    \    array(20, 20),\n    array(21, 21),\n    array(22, 22),\n    array(23, 23),\n\
    \    array(24, 24),\n    array(25, 25),\n    array(26, 26),\n    array(27, 27),\n\
    \    array(28, 28),\n    array(29, 29),\n    array(30, 30),\n    array(31, 31),\n\
    \    array(32, 32),\n    array(33, 33),\n    array(34, 34),\n    array(35, 35),\n\
    \    array(36, 36),", "  $sums = array_map(function($num) { return $num * 10;\
    \ }, $nums);\n  asort($sums);\n  $nums = array_map(function($sum) { return $sum\
    \ / 10; }, $sums);\n  return $nums;\n}", "    $sorted = [];\n    $sums = array_sum($nums);\n\
    \    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n   \
    \ asort($sorted);\n    foreach ($sorted as $i => $num) {\n        $sorted[$i]\
    \ = $sums - $num;\n    }\n    return $sorted;\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  $nums =\
    \ array_map(function($sum) {\n    return $sum / log10($sum);\n  }, $sums);\n \
    \ return $nums;\n}\n", "  $sums = array_map(function($num) {\n    return $num\
    \ * log10($num);\n  }, $nums);\n  asort($sums);\n  $sorted = array_map(function($sum)\
    \ {\n    return array_search($sum, $sums);\n  }, $sums);\n  return array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sorted);\n}\n", "    $sorted =\
    \ [];\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum += $num;\n \
    \       $sorted[] = $num;\n    }\n    asort($sorted);\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however\
    \ it fails for negative numbers. I added a fix for negative numbers to the answer.\n\
    <|/ c |>\n<| c |>\nI added a fix for negative numbers, too. Thanks.\n<|/ c |>\n\
    <| c |>\nI like your solution, however it fails for negative numbers. I added\
    \ a fix for negative numbers to the answer.\n<|/ c |>\n<| c |>\nI added a fix\
    \ for negative numbers, too. Thanks.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n\
    <code>", "  $sums = array_map(function($num) { return $num->digits; }, $nums);\n\
    \  usort($sums, function($a, $b) { return $a->sum - $b->sum; });\n  return array_map(function($num)\
    \ { return $num->number; }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_map(function($v) use ($sums) {\n        return $sums - $v;\n\
    \    }, $order);\n}\n", "  $sums = array_map(function($num) { return $num * 10;\
    \ }, $nums);\n  asort($sums);\n  return array_map(function($num) { return $num\
    \ / 10; }, $sums);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n\
    <code>", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "    $sums = array_map(function($num)\
    \ { return $num % 10; }, $nums);\n    asort($sums);\n    $nums = array_map(function($sum)\
    \ { return $sum % 10; }, $sums);\n    return $nums;\n}\n", "  $sums = array_map(function\
    \ ($num) {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return\
    \ array_map(function ($num) {\n    return $num / 10;\n  }, $sums);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, however it fails for negative\
    \ numbers. I added a solution that works for negative numbers as well.\n<|/ c\
    \ |>\n<| a tags=php,sorting |>\n<code>", "  $sums = array_map(function($num) {\n\
    \    return $num * 10 + $num;\n  }, $nums);\n  usort($sums, function($a, $b) {\n\
    \    return $a - $b;\n  });\n  return array_map(function($num) use ($nums) {\n\
    \    return array_search($num, $nums);\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$num];\n  },\
    \ array_keys($nums), $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "    $sorted =\
    \ [];\n    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n\
    \    asort($sorted);\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function ($num) use ($sums) {\n    return $nums[$num];\n \
    \ }, $nums);\n}\n", "  $sums = array_map(function($num) {\n    return $num * log10($num);\n\
    \  }, $nums);\n  asort($sums);\n  return array_map(function($num) use ($nums)\
    \ {\n    return $nums[$num];\n  }, $sums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't seem to work. `order_by_points([1,11,-1,-11,-12])`\
    \ returns `[-1,-11,1,-12, 11]` instead of `[-1, -11, 1, -12, 11]`.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting it. I just tested it again and\
    \ it works.\n<|/ c |>\n<| c |>\nI tested it again and it works. I guess I misunderstood\
    \ your question. I'll edit my answer to make it clearer.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works. I guess I misunderstood your question. I'll edit\
    \ my answer to make it clearer.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I guess I misunderstood your question. I'll edit my answer to make it clearer.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $sums = array_map(function($num) {\n\
    \        return $num * log10($num);\n    }, $nums);\n    asort($sums);\n    return\
    \ array_map(function($num) use ($nums) {\n        return $nums[$num];\n    },\
    \ $sums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "    $sums = array_map(function($num)\
    \ {\n        return $num * 10 + $num;\n    }, $nums);\n    asort($sums);\n   \
    \ return array_map(function($num) {\n        return $num / 10;\n    }, $sums);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", " \
    \ $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums[$n];\n  }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function ($n) use\
    \ ($sums, $order) {\n        return $order[$n];\n    }, $nums);\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to do it without using array_sum and array_keys. I wonder\
    \ if there is a way to ", "  $sums = array_map(function($num) {\n    return $num\
    \ * log10($num);\n  }, $nums);\n  asort($sums);\n  $nums = array_map(function($sum)\
    \ {\n    return $sum / log10($sum);\n  }, $sums);\n  return $nums;\n}\n", "  $sums\
    \ = array_sum($nums);\n  asort($nums);\n  return array_map(function($num) use\
    \ ($sums) {\n    return $nums[$num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  return array_map(function($n) use ($sums) {\n    return $sums\
    \ - $n;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  return array_map(function\
    \ ($num) use ($sums) {\n    return $nums[$num];\n  }, array_keys($nums));\n}\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't seem to work.\
    \ `order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]` but `order_by_points([])\
    \ == []`\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I also added a\
    \ note about how to handle multiple items with the same sum.\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work. `order_by_points([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]` but `order_by_points([]) == []`\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't seem to work.\
    \ `order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]` but `order_by_points([])\
    \ == []`\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
