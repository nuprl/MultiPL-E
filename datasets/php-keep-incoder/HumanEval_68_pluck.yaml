name: HumanEval_68_pluck
language: php
prompt: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck($arr) {\n"
tests: "function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9,\
  \ 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $evens = array_filter($arr, function($v){\n        return $v &\
    \ 1;\n    });\n    if(count($evens) === 0){\n        return [];\n    }\n    $minIndex\
    \ = array_search(min($evens), $evens);\n    return [$evens[$minIndex], $minIndex];\n\
    }\n\n$arr = [4,2,3];\n$arr2 = [1, 2, 3];\n$arr3 = [];\n$arr4 = [5, 0, 3, 0, 4,\
    \ 2];\n$arr5 = [0, 2, 5, 6, 4, 3];\n$arr6 = [0, 2, 5, 6, 4, 3, 1];\n$arr7 = [0,\
    \ 2, 5, 6, 4, 3, 1];\n$arr8 = [0, 2, 5, 6, 4, 3, 1];\n$arr9 = [0, 2, 5, 6, 4,\
    \ 3, 1];\n$arr10 = [0, 2, 5, 6, 4, 3, 1];\n$arr11 = [0, 2, 5, 6, 4, 3, 1];\n$arr12\
    \ = [0, 2, 5, 6, 4, 3, 1];\n$arr13 = [0, 2, 5, 6, 4, 3, 1];\n$arr14 = [0, 2, 5,\
    \ 6, 4, 3, 1];\n$arr15 = [0, 2, 5, 6, 4, 3, 1];\n$arr16 = [0, 2, 5, 6, 4, 3, 1];\n\
    $arr17 = [0, 2, 5, 6, 4, 3, 1];\n$arr18 = [0, 2, 5, 6, 4, 3, 1];\n$arr19 = [0,\
    \ 2, 5, 6, 4, 3, 1];\n$arr20 = [0, 2, 5, 6, 4, 3, 1];\n$arr21 = [0, 2, 5, 6, 4,\
    \ 3, 1];\n$arr22 = [0, 2, 5, 6, 4, 3, 1];\n$arr23 = [0, 2, 5, 6, 4, 3, 1];\n$arr24\
    \ = [0, 2, 5, 6, 4, 3, 1];\n$arr25 = [0, 2, 5, 6, 4, 3, 1];\n$arr26 = [0, 2, 5,\
    \ 6, 4, 3, 1];\n$arr27 = [0, 2, 5, 6, 4, 3, 1];\n$arr28 = [0, 2, 5, 6, 4, 3, 1];\n\
    $arr29 = [0, 2, 5, 6, 4, 3, 1];\n$arr30 = [0, 2, 5, 6, 4, 3, 1];\n$arr31 = [0,\
    \ 2, 5, 6, 4, 3, 1];\n$arr32 = [0, 2, 5, 6, 4, 3, 1];\n$arr33 = [0, 2, 5, 6, 4,\
    \ 3, 1];\n$arr34 = [0, 2, 5, 6, 4, 3, 1];\n$arr35 = [0, 2, 5, 6, 4, 3, 1];\n$arr36\
    \ = [0, 2, 5, 6, 4, 3, 1];\n$arr37 = [0, 2, 5, 6, 4, 3, 1];\n$arr38 = [0, 2, 5,\
    \ 6, 4, 3, 1];\n$arr39 = [0, 2, 5, 6, 4, 3, 1];\n$", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $result = [];\n    $min = null;\n    $minIndex = null;\n\
    \    foreach ($arr as $key => $value) {\n        if ($min === null || $value <\
    \ $min) {\n            $min = $value;\n            $minIndex = $key;\n       \
    \ }\n    }\n    $result[] = $min;\n    $result[] = $minIndex;\n    return $result;\n\
    }\n", "    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n", " \
    \   $result = [];\n    $even = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[] = $value;\n        } else\
    \ {\n            $result[] = [$value, $key];\n        }\n    }\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    $min = array_shift($even);\n    foreach\
    \ ($even as $key => $value) {\n        if ($value < $min) {\n            $min\
    \ = $value;\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nvar_dump($result);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are multiple\
    \ nodes with the same smallest even value.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I fixed my answer. Thanks for pointing out.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with multiple nodes with the same smallest even value.\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$even = array_filter($arr,\
    \ function($v){\n    return $v % 2 == 0;\n});\n$even = array_keys($even);\n$even\
    \ = array_values($even);\n$even = array_unique($even);\n$even = array_flip($even);\n\
    $even = array_search($arr, $even);\n$even = array_flip($even);\n$even = array_search($arr,\
    \ $even);\n$even = array_flip($even);\n$even = array_search($arr, $even);\n$even\
    \ = array_flip($even);\n$even = array_search($arr, $even);\n$even = array_flip($even);\n\
    $even = array_search($arr, $even);\n$even = array_flip($even);\n$even = array_search($arr,\
    \ $even);\n$even = array_flip($even);\n$even = array_search($arr, $even);\n$even\
    \ = array_flip($even);\n$even = array_search($arr, $even);\n$even = array_flip($even);\n\
    $even = array_search($arr, $even);\n$even = array_flip($even);\n$even = array_search($arr,\
    \ $even);\n$even = array_flip($even);\n$even = array_search($arr, $even);", " \
    \   $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 === 0) {\n            $result[] = [$value, $key];\n        }\n    }\n  \
    \  return $result;\n}\n", "    $evens = array_filter($arr, function($v){\n   \
    \     return $v % 2 === 0;\n    });\n    $evens = array_keys($evens);\n    if\
    \ (count($evens) === 0) return [];\n    $min = min($evens);\n    return array_intersect_key($arr,\
    \ function($v) use ($min){\n        return $v === $min ? $v : $min;\n    });\n\
    }\n\n$arr = [4,2,3];\n$arr2 = [1,2];\n$arr3 = [1,2,3];\n$arr4 = [];\n$arr5 = [5,0,3,0,4,2];\n\
    $arr6 = [5,0,3,0,4,2,1,2];\n$arr7 = [5,0,3,0,4,2,1,2];\n$arr8 = [5,0,3,0,4,2,1,2];\n\
    $arr9 = [5,0,3,0,4,2,1,2];\n$arr10 = [5,0,3,0,4,2,1,2];\n$arr11 = [5,0,3,0,4,2,1,2];\n\
    $arr12 = [5,0,3,0,4,2,1,2];\n$arr13 = [5,0,3,0,4,2,1,2];\n$arr14 = [5,0,3,0,4,2,1,2];\n\
    $arr15 = [5,0,3,0,4,2,1,2];\n$arr16 = [5,0,3,0,4,2,1,2];\n$arr17 = [5,0,3,0,4,2,1,2];\n\
    $arr18 = [5,0,3,0,4,2,1,2];\n$arr19 = [5,0,3,0,4,2,1,2];\n$arr20 = [5,0,3,0,4,2,1,2];\n\
    $arr21 = [5,0,3,0,4,2,1,2];\n$arr22 = [5,0,3,0,4,2,1,2];\n$arr23 = [5,0,3,0,4,2,1,2];\n\
    $arr24 = [5,0,3,0,4,2,1,2];\n$arr25 = [5,0,3,0,4,2,1,2];\n$arr26 = [5,0,3,0,4,2,1,2];\n\
    $arr27 = [5,0,3,0,4,2,1,2];\n$arr28 = [5,0,3,0,4,2,1,2];\n$arr29 = [5,0,3,0,4,2,1,2];\n\
    $arr30 = [5,0,3,0,4,2,1,2];\n$arr31 = [5,0,3,0,4,2,1,2];\n$arr32 = [5,0,3,0,4,2,1,2];\n\
    $arr33 = [5,0,3,0,4,2,1,2];\n$arr34 = [5,0,3,0,4,2,1,2];\n$arr35 = [5,0,3,0,4,2,1,2];\n\
    $arr36 = [5,0,3,0,4,2,1,2];\n$arr37 = [5,0,3,0,4,2,1,2];\n$arr38 = [5,0,3,0,",
  "    $result = [];\n    $even = [];\n    foreach ($arr as $key => $value) {\n  \
    \      if ($value % 2 == 0) {\n            $even[] = $value;\n        } else {\n\
    \            $result[$value] = $key;\n        }\n    }\n    if (count($even) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($even);\n    $result[$min] =\
    \ array_search($min, $even);\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result\
    \ = pluck($arr);\nprint_r($result);", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = array_reduce($evens, function($min, $v){\n        return\
    \ $v < $min ? $v : $min;\n    });\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho\
    \ \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr,\
    \ function($num) { return $num % 2 === 0; });\n    if (count($evens) === 0) return\
    \ [];\n    $min = min($evens);\n    $index = array_search($min, $evens);\n   \
    \ return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if(count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);",
  "    $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n     \
    \   if ($value % 2 == 0) {\n            $even[] = $value;\n        } else {\n\
    \            $odd[] = $value;\n        }\n    }\n    $even = array_filter($even);\n\
    \    $odd = array_filter($odd);\n    if (count($even) > 0) {\n        return $even;\n\
    \    }\n    if (count($odd) > 0) {\n        return $odd;\n    }\n    return [];\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nvar_dump($result);", "    $evens\
    \ = array_filter($arr, function($n) { return $n % 2 === 0; });\n    if (count($evens)\
    \ === 0) return [];\n    $minIndex = array_search(min($evens), $evens);\n    return\
    \ [ $minIndex, array_search($minIndex, $evens) ];\n}\n", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === ", "    $evens\
    \ = array_filter($arr, function($v){return $v%2==0;});\n    $evens = array_keys($evens);\n\
    \    $evens = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;", "    $evens = array_filter($arr, function($v) { return $v & 1; });\
    \ // filter out even values\n    $evens = array_keys($evens); // get keys\n  \
    \  $evens = array_flip($evens); // flip keys to get values\n    return array_intersect_key($arr,\
    \ array_flip($evens)); // get intersection\n}\n", "    $result = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $result[]\
    \ = [$value, $key];\n        }\n    }\n    if (count($result) == 0) {\n      \
    \  return [];\n    }\n    $result[] = [min($result), array_search(min($result),\
    \ $result)];\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v){\n        return\
    \ $v & 1;\n    });\n    if(count($evens) === 0){\n        return [];\n    }\n\
    \    $even = min($evens);\n    $index = array_search($even, $arr);\n    return\
    \ [ $even, $index ];\n}", "    $evens = array_filter($arr, function($v){return\
    \ $v & 1;});\n    if (count($evens) === 0){\n        return [];\n    }\n    $min\
    \ = array_reduce($evens, function($min, $v){return $min > $v ? $min : $v;});\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$arr2 = [1,2,3];\n$arr3 = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 =\
    \ [5, 0, 3, 0, 4, 2];\n\nvar_dump(pluck($arr));\nvar_dump(pluck($arr2));\nvar_dump(pluck($arr3));\n\
    var_dump(pluck($arr4));\nvar_dump(pluck($arr5));\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=arrays,php,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr2 = [1,2,3];\n\
    $arr3 = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n", "    $evens\
    \ = array_filter($arr, function($v){\n        return $v & 1;\n    });\n    if\
    \ (count($evens) === 0){\n        return [];\n    }\n    $min = array_reduce($evens,\
    \ function($min, $v){\n        return $min < $v ? $min : $v;\n    });\n    $index\
    \ = array_search($min, $evens);\n    return [$min, $index];\n}", "    $evens =\
    \ array_filter($arr, function($v){\n        return $v & 1;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $min = array_shift($evens);\n    $index\
    \ = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n\
    $result = pluck($arr);\nprint_r($result);", "    $result = [];\n    $even = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n  \
    \  $min = array_shift($even);\n    $index = array_shift($index);\n    foreach\
    \ ($even as $key => $value) {\n        if ($value < $min) {\n            $min\
    \ = $value;\n            $index = array_shift($index);\n        }\n    }\n   \
    \ $result[] = [$min, $index];\n    return $result;\n}", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\nvar_dump($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr,\
    \ function($v){\n    return $v & 1;\n});\n$result = array_keys($result);\n$min\
    \ = min($result);\n$index = array_search($min, $result);\necho $min;\necho $index;\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    $arr = [4,2,3];\n$result = array_filter($arr, function($v){\n    return $v & 1;\n\
    });\n$result = array_keys($result);\n$min = min($result);\n$index = array_search($min,\
    \ $result);\necho $min;\necho $index;\n</code>\n<|/ a tags=php,arrays dscore=0\
    \ |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr,\
    \ function($v){\n    return $v & 1;\n});\n$result = array_keys($result);\n$min\
    \ = min($result);\n$index = array_search($min, $result);\necho $min;\necho $index;\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $result = array_filter($arr, function($v){\n    return $v & 1;\n});\n$result =\
    \ array_keys($result);\n$min = min($result);\n$index = array_search($min, $result);\n\
    echo $min;\necho $index;\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n\
    $arr = [4,2,3];\n$result = array_filter($arr, function($v){\n    return $v & 1;\n\
    });\n$result = array_keys($result);\n$min = min($result);\n$index = array_search($min,\
    \ $result);\necho $min;\necho $index;\n</code>\n<|/ a tags=php,", "    $evens\
    \ = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 == 0;\n    });\n    if(count($evens) ==\
    \ 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}", "    $evens = array_filter($arr, function($v){\n\
    \        return $v % 2 === 0;\n    });\n    if (count($evens) === 0){\n      \
    \  return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) return [];\n    $min = array_reduce($evens, function($min, $num) {\n\
    \        return $min < $num ? $num : $min;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n", "    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    return $evens ? $evens[0] : [];\n}", "    $evens = array_filter($arr, function($v){\n\
    \        return $v % 2 === 0;\n    });\n    if(count($evens) === 0){\n       \
    \ return [];\n    }\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $min = $evens[0];\n    $min_index = array_search($min, $evens);\n    return\
    \ [$min, $min_index];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n", "    $evens = array_filter($arr, function($v) { return $v & 1; });\n\
    \    if (count($evens) === 0) return [];\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ return [];\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v) { return $v\
    \ & 1; });\n    if (count($evens) === 0) return [];\n    $min = array_reduce($evens,\
    \ function($min, $v) { return $min < $v ? $min : $v; });\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n", "    $evens = array_filter($arr, function($v){\n    \
    \    return $v & 1;\n    });\n    if (count($evens) === 0){\n        return [];\n\
    \    }\n    $min = array_shift($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if there are multiple nodes with the same smallest even value.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question to clarify that case.\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr1 = [1,2,3];\n\
    $arr2 = [];\n$arr3 = [];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n$arr6 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr7 = [5, 0, 3, 0, 4, 2, 1];\n$arr8 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr9 = [5, 0, 3, 0, 4, 2, 1];\n$arr10 = [5, 0, 3, 0, 4, 2, 1];\n$arr11\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr12 = [5, 0, 3, 0, 4, 2, 1];\n$arr13 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr14 = [5, 0, 3, 0, 4, 2, 1];\n$arr15 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr16 = [5, 0, 3, 0, 4, 2, 1];\n$arr17 = [5, 0, 3, 0, 4, 2, 1];\n$arr18 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr19 = [5, 0, 3, 0, 4, 2, 1];\n$arr20 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr21 = [5, 0, 3, 0, 4, 2, 1];\n$arr22 = [5, 0, 3, 0, 4, 2, 1];\n$arr23\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr24 = [5, 0, 3, 0, 4, 2, 1];\n$arr25 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr26 = [5, 0, 3, 0, 4, 2, 1];\n$arr27 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr28 = [5, 0, 3, 0, 4, 2, 1];\n$arr29 = [5, 0, 3, 0, 4, 2, 1];\n$arr30 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr31 = [5, 0, 3, 0, 4, 2, 1];\n$arr32 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr33 = [5, 0, 3, 0, 4, 2, 1];\n$arr34 = [5, 0, 3, 0, 4, 2, 1];\n$arr35\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr36 = [5, 0, 3, 0, 4, 2, 1];\n$arr37 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr38 = [5, 0, 3, 0, 4, 2, 1];\n$arr39 = [5, 0, 3, 0, 4, 2, 1];\n",
  "    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $even = min($evens);\n    return array_filter($arr, function($v)\
    \ use ($even) { return $v & $even; });\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't work if there are multiple nodes with the same smallest\
    \ even value.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ what I'm looking for.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify what I'm looking for.\n<|/ c |>\n<| c |>\nI added a comment to the\
    \ question to clarify what I'm looking for.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question to clarify what I'm looking for.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr, function($v) { return\
    \ $v & 1; });\n$even = min($evens);\n$result = array_filter($arr, function($v)\
    \ use ($even) { return $v & $even; });\nprint_r($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are multiple nodes with the same smallest\
    \ even value.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ what I'm looking for.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $evens = array_filter($arr, function($v) { return $v & 1; });\n$even = min($evens);\n\
    $result = array_filter($arr, function($v) use ($even) { return $v & $even; });\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work\
    \ if there are multiple nodes with the same smallest even value.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n$even = min($evens);\n$result = array_filter($arr,\
    \ function($v) use ($even) { return $v & $even; });\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if ", "    $evens = array_filter($arr,\
    \ function($v){return $v % 2 == 0;});\n    if (count($evens) == 0) {\n       \
    \ return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n    return\
    \ [ $minIndex, array_search(min($evens), $evens) ];\n}", "    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n", "    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $result[] = [$value, $key];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $even = [];\n    $odd = [];\n    $even_index = [];\n\
    \    $odd_index = [];\n    $even_smallest_value = [];\n    $odd_smallest_value\
    \ = [];\n    $smallest_value = [];\n    $smallest_index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n            $even_index[] = $key;\n            $even_smallest_value[]\
    \ = $value;\n            $smallest_value[] = $value;\n            $smallest_index[]\
    \ = $key;\n        } else {\n            $odd[] = $value;\n            $odd_index[]\
    \ = $key;\n            $odd_smallest_value[] = $value;\n            $smallest_value[]\
    \ = $value;\n            $smallest_index[] = $key;\n        }\n    }\n    $smallest_value\
    \ = array_slice($smallest_value, 0, 1);\n    $smallest_index = array_slice($smallest_index,\
    \ 0, 1);\n    if (count($even) == 0) {\n        return [];\n    }\n    $smallest_value\
    \ = min($even_smallest_value);\n    $smallest_index = min($even_index);\n    $smallest_value\
    \ = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $smallest_value = $even[$smallest_index];\n    $smallest_index = $even_index[$smallest_index];\n\
    \    $", "    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = array_reduce($evens,\
    \ function($min, $n) { return $min < $n ? $min : $n; });\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}\n", "    $even = [];\n    $odd = [];\n\
    \    $index = [];\n    $smallest = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $even[$key] = $value;\n        }\
    \ else {\n            $odd[$key] = $value;\n        }\n    }\n    foreach ($even\
    \ as $key => $value) {\n        if ($smallest[$value] == null) {\n           \
    \ $smallest[$value] = $value;\n            $index[$value] = $key;\n        }\n\
    \    }\n    foreach ($odd as $key => $value) {\n        if ($smallest[$value]\
    \ == null) {\n            $smallest[$value] = $value;\n            $index[$value]\
    \ = $key;\n        }\n    }\n    return $smallest;\n}\n\n$arr = [4, 2, 3];\n$arr2\
    \ = [1, 2, 3];\n$arr3 = [];\n$arr4 = [5, 0, 3, 0, 4, 2];\n$arr5 = [4, 2, 3];\n\
    $arr6 = [4, 2, 3];\n$arr7 = [4, 2, 3];\n$arr8 = [4, 2, 3];\n$arr9 = [4, 2, 3];\n\
    $arr10 = [4, 2, 3];\n$arr11 = [4, 2, 3];\n$arr12 = [4, 2, 3];\n$arr13 = [4, 2,\
    \ 3];\n$arr14 = [4, 2, 3];\n$arr15 = [4, 2, 3];\n$arr16 = [4, 2, 3];\n$arr17 =\
    \ [4, 2, 3];\n$arr18 = [4, 2, 3];\n$arr19 = [4, 2, 3];\n$arr20 = [4, 2, 3];\n\
    $arr21 = [4, 2, 3];\n$arr22 = [4, 2, 3];\n$arr23 = [4, 2, 3];\n$arr24 = [4, 2,\
    \ 3];\n$arr25 = [4, 2, 3];\n$arr26 = [4, 2, 3];\n$arr27 = [4, 2, 3];\n$arr28 =\
    \ [4, 2, 3];\n$arr29 = [4, 2, 3];\n$arr30 = [4, 2, 3];\n$arr31 = [4, 2, 3];\n\
    $arr32 = [4, 2, 3];\n$arr33 = [4, 2, 3];\n$arr34 = [4, 2, 3];\n$arr35 = [4, 2,\
    \ 3];\n$arr36 = [4, 2, 3];\n$arr37 = [4, 2, 3];\n$arr38 = [4, 2, 3];\n$arr39 =\
    \ [4, 2, 3];\n$arr40 = [4, 2, 3];\n$arr41 = [4, 2, 3];", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n", "    $evens = array_filter($arr, function($v) { return\
    \ $v & 1; });\n    if (count($evens) === 0) {\n        return [];\n    }\n   \
    \ $even = min($evens);\n    return array_filter($arr, function($v) use ($even)\
    \ { return $v === $even; });\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\
    $arr = [1, 2, 3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2,\
    \ 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, ", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}", "    $evens = array_filter($arr, function($v) { return $v &\
    \ 1; });\n    if (count($evens) === 0) return [];\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n", "    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if (count($evens) === 0){return [];}\n \
    \   $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}", "    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $result[] = [$value, $key];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\n\n$arr = [1,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    \n$arr = [];\n$result = pluck($arr);\nprint_r($result);\n\n$arr = [5, 0, 3, 0,\
    \ 4, 2];\n$result = pluck($arr);\nprint_r($result);", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\"\
    ;\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr, function($v){\n\
    \        return $v % 2 === 0;\n    });\n    if (count($evens) === 0){\n      \
    \  return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n   \
    \ return [ $evens[$minIndex], $minIndex ];\n}", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}", "    $result = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $result[]\
    \ = $value;\n        }\n    }\n    return $result;\n}", "    $even = [];\n   \
    \ $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 ==\
    \ 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_index\
    \ = array_search($smallest_value, $even);\n    if (count($even) == 0) {\n    \
    \    return [];\n    }\n    $smallest_value = min($odd);\n    $smallest_index\
    \ = array_search($smallest_value, $odd);\n    return [$smallest_value, $smallest_index];\n\
    }\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nI like this solution,\
    \ but I believe it can be optimized a bit. For example, you can just return the\
    \ smallest value from the even array and from the odd array and compare them.\
    \ No need to search the array twice.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ edited my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is O(n^2) because of the nested loops.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I've edited my answer to reflect your suggestion.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr1 = [1,2,3];\n$arr2 = [1,2,3];\n\
    $arr3 = [1,2,3];\n$arr4 = [1,2,3];\n$arr5 = [1,2,3];\n$arr6 = [1,2,3];\n$arr7\
    \ = [1,2,3];\n$arr8 = [1,2,3];\n$arr9 = [1,2,3];\n$arr10 = [1,2,3];\n$arr11 =\
    \ [1,2,3];\n$arr12 = [1,2,3];\n$arr13 = [1,2,3];\n$arr14 = [1,2,3];\n$arr15 =\
    \ [1,2,3];\n$arr16 = [1,2,3];\n$arr17 = [1,2,3];\n$arr18 = [1,2,3];\n$arr19 =\
    \ [1,2,3];\n$arr20 = [1,2,3];\n$arr21 = [1,2,3];\n$arr22 = [1,2,3];\n$arr23 =\
    \ [1,2,3];\n$arr24 = [1,2,3];\n$arr25 = [1,2,3];\n$arr26 = [1,2,3];\n$arr27 =\
    \ [1,2,3];\n$arr28 = [1,2,3];\n$arr29 = [1,2,3];\n", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $even = min($evens);\n    $index =\
    \ array_search($even, $arr);\n    return [ $even, $index ];\n}\n</code>\n<|/ a\
    \ tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't work if there are multiple\
    \ nodes with the same smallest even value.\n<|/ c |>\n<| c |>\nYes, I know. That's\
    \ why I said \"If multiple nodes with the same smallest even value are found return\
    \ the node that has smallest index.\" I didn't want to complicate the answer too\
    \ much. I'll edit my answer to make it more clear.\n<|/ c |>\n<| c |>\nI added\
    \ an example to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very elegant. I am still trying to understand how it works. I understand\
    \ that array_filter will filter out all even numbers and then min will return\
    \ the smallest one. I am not able to understand how array_search will return the\
    \ index of the smallest even number. Can you please explain how array_search works?\n\
    <|/ c |>\n<| c |>\n`array_search` returns the index of the first element in the\
    \ array that matches the search value. So if the search value is `2`, it will\
    \ return `0` because `2` is the first element in the array that has even value.\
    \ If there are multiple elements in the array that match the search value, it\
    \ will return the index of the first element that matches the search value.\n\
    <|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $arr2 = [1,5,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n$arr3 = [];\n$arr4 =\
    \ [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n$arr10\
    \ = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 = [];\n\
    $arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n$arr21 =\
    \ [];\n$arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n$arr26 = [];\n\
    $arr27 = [];\n$arr28 = [];\n$arr29 = [];\n$arr30 = [];\n$arr31 = [];\n$arr32 =\
    \ [];\n", "    $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n        }\
    \ else {\n            $odd[] = $value;\n        }\n    }\n    $even = array_filter($even);\n\
    \    $odd = array_filter($odd);\n    $even = array_keys($even);\n    $odd = array_keys($odd);\n\
    \    $even = array_values($even);\n    $odd = array_values($odd);\n    $even =\
    \ array_unique($even);\n    $odd = array_unique($odd);\n    $even = array_values($even);\n\
    \    $odd = array_values($odd);\n    $even = array_unique($even);\n    $odd =\
    \ array_unique($odd);\n    $even = array_values($even);\n    $odd = array_values($odd);\n\
    \    $even = array_unique($even);\n    $odd = array_unique($odd);\n    $even =\
    \ array_values($even);\n    $odd = array_values($odd);\n    $even = array_unique($even);\n\
    \    $odd = array_unique($odd);\n    $even = array_values($even);\n    $odd =\
    \ array_values($odd);\n    $even = array_unique($even);\n    $odd = array_unique($odd);\n\
    \    $even = array_values($even);\n    $odd = array_values($odd);\n    $even =\
    \ array_unique($even);\n    $odd = array_unique($odd);\n    $even = array_values($even);\n\
    \    $odd = array_values($odd);\n    $even = array_unique($even);\n    $odd =\
    \ array_unique($odd);\n    $even = array_values($even);\n    $odd = array_values($odd);\n\
    \    $even = array_unique($even);\n    $odd = array_unique($odd);\n    $even =\
    \ array_values($even);\n    $odd = array_values($odd);\n    $even = array_unique($even);\n\
    \    $odd = array_unique($odd);\n    $even = array_values($even);\n    $odd =\
    \ array_values($odd);\n    $even = array_unique($even);\n    $odd = array_unique($odd);\n\
    \    $even = array_values($even);\n    $odd = array_values($odd);\n    $even =\
    \ array_unique($even);\n    $odd = array_unique($odd);\n    $even = array_values($even);\n\
    \    $odd = array_values($odd);\n    $even = array_unique($even);\n    $odd =\
    \ array_unique($odd);", "    $result = [];\n    $smallest = null;\n    $smallest_index\
    \ = null;\n    foreach ($arr as $key => $value) {\n        if ($smallest === null\
    \ || $value < $smallest) {\n            $smallest = $value;\n            $smallest_index\
    \ = $key;\n        }\n    }\n    $result[] = $smallest;\n    $result[] = $smallest_index;\n\
    \    return $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);",
  "    $evens = array_filter($arr, function($v){\n        return $v % 2 === 0;\n \
    \   });\n    if (count($evens) === 0) {\n        return [];\n    }\n    $smallest\
    \ = min($evens);\n    $index = array_search($smallest, $evens);\n    return [\
    \ $smallest, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't work if there\
    \ are multiple nodes with the same smallest even value.\n<|/ c |>\n<| c |>\nI\
    \ added a comment to the question to clarify that case.\n<|/ c |>\n<| c |>\nI\
    \ added a comment to the question to clarify that case.\n<|/ c |>\n<| c |>\nI\
    \ added a comment to the question to clarify that case.\n<|/ c |>\n<| c |>\nI\
    \ added a comment to the question to clarify that case.\n<|/ c |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>", "    $evens = array_filter($arr, function($v){\n        return\
    \ $v & 1;\n    });\n    if(count($evens) === 0){\n        return [];\n    }\n\
    \    $min = array_shift($evens);\n    $index = array_search($min, $arr);\n   \
    \ return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $result = array_filter($arr, function($v){\n    return $v & 1;\n});\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr, function($v){\n \
    \   return $v & 1;\n});\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr,\
    \ function($v){\n    return $v & 1;\n});\nprint_r($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$result\
    \ = array_filter($arr, function($v){\n    return $v & 1;\n});\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr, function($v){\n \
    \   return $v & 1;\n});\nprint_r($result);\n</code>\n<|/ a dscore=0 ", "    $evens\
    \ = array_filter($arr, function($v) { return $v & 1; }); // filter out even values\n\
    \    if (count($evens) === 0) return [];\n    $smallest_even = min($evens); //\
    \ smallest even value\n    $smallest_index = array_search($smallest_even, $evens);\
    \ // smallest index\n    return [$smallest_even, $smallest_index];\n}\n", "  \
    \  $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $result[] = [$value, $key];\n        }\n    }\n    sort($result);\n\
    \    return $result[0][1];\n}\n", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}", "    $evens = array_filter($arr, function($n)\
    \ { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = array_reduce($evens, function($min, $n) { return $min < $n\
    \ ? $min : $n; });\n    $index = array_search($min, $evens);\n    return [$min,\
    \ $index];\n}\n", "    $result = [];\n    $even = [];\n    $index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $index[$key] = $value;\n        }\n\
    \    }\n    foreach ($even as $key => $value) {\n        $result[$key] = min($value,\
    \ $index[$key]);\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result\
    \ = pluck($arr);\nprint_r($result);", "    $evens = array_filter($arr, function($v){return\
    \ $v % 2 == 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = ", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $even = min($evens);\n    $index = array_search($even, $arr);\n\
    \    return [$even, $index];\n}", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\nprint_r($result);", "    $evens = array_filter($arr,\
    \ function($v){return $v % 2 == 0;});\n    if (count($evens) == 0) {\n       \
    \ return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v) { return $v\
    \ & 1; }); // filter out even values\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens); // find the smallest even value\n    $min_index = array_search($min,\
    \ $evens); // find the smallest index\n    return [ $min, $min_index ];\n}\n",
  "    $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $min = array_shift($evens);\n\
    \    $min_index = array_search($min, $arr);\n    return [$min, $min_index];\n\
    }\n", "    $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $even[] = $value;\n        } else\
    \ {\n            $odd[] = $value;\n        }\n    }\n    $even = array_filter($even);\n\
    \    $odd = array_filter($odd);\n    if (count($even) == 0) {\n        return\
    \ [];\n    }\n    $min = array_shift($even);\n    $min_index = array_search($min,\
    \ $odd);\n    if ($min_index == -1) {\n        return [];\n    }\n    return [$min,\
    \ $min_index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\necho \"<pre>\"\
    ;\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr, function($v){return\
    \ $v % 2 === 0;});\n    if(count($evens) === 0){\n        return [];\n    }\n\
    \    $even = min($evens);\n    $index = array_search($even, $arr);\n    return\
    \ [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);",
  "    $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}", " \
    \   $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $min = $evens[0];\n\
    \    $min_index = 0;\n    foreach ($evens as $key => $value) {\n        if ($value\
    \ < $min) {\n            $min = $value;\n            $min_index = $key;\n    \
    \    }\n    }\n    return [$min, $min_index];\n}\n\n$arr = [4,2,3];\n$result =\
    \ pluck($arr);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $result\
    \ = [];\n    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        } else {\n            $result[] = $value;\n    \
    \    }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $result[$index[$min]] = [min($even), $index[$min]];\n   \
    \ return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);",
  "    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $result[] = [$value, $key];\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);",
  "    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_reduce($evens, function($min, $v){\n\
    \        return $min > $v ? $min : $v;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}", "    $evens = array_filter($arr,\
    \ function($v){return $v % 2 === 0;});\n    if (count($evens) === 0){\n      \
    \  return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n   \
    \ return [$evens[$minIndex], $minIndex];\n}", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}", "    $evens = array_filter($arr, function($v) { return\
    \ $v & 1; });\n    if (count($evens) === 0) {\n        return [];\n    }\n   \
    \ $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}", "    $evens = array_filter($arr, function($v){\n        return\
    \ $v & 1;\n    });\n    $evens = array_keys($evens);\n    if (count($evens) ==\
    \ 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v){return $v %\
    \ 2 == 0;});\n    if (count($evens) === 0){\n        return [];\n    }\n    $even\
    \ = min($evens);\n    $index = array_search($even, $arr);\n    return [$even,\
    \ $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/11598278)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to find the\
    \ smallest even number in the array and return the index. He also stated that\
    \ he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return an empty array\
    \ if there are no even numbers in the array. He also stated that he wants to return\
    \ the smallest even number in the array if there are multiple even numbers in\
    \ the array. He also stated that he wants to return the smallest even number in\
    \ the array if there are multiple even numbers in the array. He also stated that\
    \ he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return the smallest\
    \ even number in the array if there are multiple even numbers in the array. He\
    \ also stated that he wants to return the smallest even number in the array if\
    \ there are multiple even numbers in the array. He also stated that he wants to\
    \ return the smallest even number in the array if there are multiple even numbers\
    \ in the array. He also stated that he wants to return the smallest even number\
    \ in the array if there are multiple even numbers in the array. He also stated\
    \ that he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return the smallest\
    \ even number in the array if there are multiple even numbers in the array. He\
    \ also stated that he wants to return the smallest even number in the array if\
    \ there are multiple even numbers in the array. He also stated that he wants to\
    \ return the smallest even number in the array if there are multiple even numbers\
    \ in the array. He also stated that he wants to return the smallest even number\
    \ in the array if there are multiple even numbers in the array. He also stated\
    \ that he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return the smallest\
    \ even number in the array if there are ", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    $evens = array_keys($evens);\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n    $min\
    \ = min($evens);\n    $min_index = array_search($min, $evens);\n    return [$min,\
    \ $min_index];\n}", "    $result = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 === 0) {\n            $result[] = [$value, $key];\n  \
    \      }\n    }\n    return $result;\n}", "    $evens = array_filter($arr, function($v){return\
    \ $v % 2 === 0;});\n    if (count($evens) === 0){\n        return [];\n    }\n\
    \    $even = min($evens);\n    $index = array_search($even, $arr);\n    return\
    \ [$even, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>",
  "    $evens = array_filter($arr, function($v){\n        return $v % 2 === 0;\n \
    \   });\n    if(count($evens) === 0){\n        return [];\n    }\n    $even =\
    \ min($evens);\n    $index = array_search($even, $arr);\n    return [$even, $index];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately,\
    \ I cannot use any built-in functions. I edited my question to make it more clear.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses no built-in functions. I hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately, I cannot\
    \ use any built-in functions. I edited my question to make it more clear.\n<|/\
    \ c |>\n<| c |>\nI added a solution that uses no built-in functions. I hope it\
    \ helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens =\
    \ array_filter($arr, function($v){\n    return $v % 2 === 0;\n});\nif(count($evens)\
    \ === 0){\n    return [];\n}\n$even = min($evens);\n$index = array_search($even,\
    \ $arr);\nreturn [$even, $index];\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    Thanks for your answer. Unfortunately, I cannot use any built-in functions. I\
    \ edited my question to make it more clear.\n<|/ c |>\n<| a tags=arrays,php |>\n\
    <code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr, function($v){\n  \
    \  return $v % 2 === 0;\n});\nif(count($evens) === 0){\n    return [];\n}\n$even\
    \ = min($evens);\n$index = array_search($even, $arr);\nreturn [$even, $index];\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $evens = array_filter($arr, function($v){\n    return $v % 2 === 0;\n});\nif(count($evens)\
    \ === 0){\n    return [];\n}\n$even = min($evens);\n$index = array_search($even,\
    \ $arr);\nreturn [$even, $index];\n</code>\n<|/ a dscore=0 |>\n<| c ", "    $evens\
    \ = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4, 2, 3];\n$result =\
    \ pluck($arr);\nprint_r($result);", "    $result = [];\n    $even = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n            $even[]\
    \ = $value;\n        } else {\n            $result[$value] = $key;\n        }\n\
    \    }\n    if (count($even) === 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $result[$min] = array_search($min, $even);\n    return $result;\n}\n\n$arr\
    \ = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n", "    $even = [];\n\
    \    $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[$key] = $value;\n        } else {\n           \
    \ $odd[$key] = $value;\n        }\n    }\n    $even = array_filter($even);\n \
    \   $odd = array_filter($odd);\n    $smallest_value = min($even);\n    $smallest_index\
    \ = array_search($smallest_value, $even);\n    if (empty($even) || empty($odd))\
    \ {\n        return [];\n    }\n    $smallest_value = min($odd);\n    $smallest_index\
    \ = array_search($smallest_value, $odd);\n    return [$smallest_value, $smallest_index];\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);", "    $evens\
    \ = array_filter($arr, function($v){return $v%2==0;});\n    if(count($evens)==0)\
    \ return [];\n    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}", "    $evens = array_filter($arr, function($n){return $n % 2\
    \ == 0;});\n    $evens = array_keys($evens);\n    if (count($evens) == 0) {\n\
    \        return [];\n    }\n    $min = $evens[0];\n    $minIndex = 0;\n    foreach\
    \ ($evens as $key => $value) {\n        if ($value < $min) {\n            $min\
    \ = $value;\n            $minIndex = $key;\n        }\n    }\n    return [$min,\
    \ $minIndex];\n}\n", "    $result = [];\n    $min = null;\n    $minIndex = null;\n\
    \    foreach ($arr as $key => $value) {\n        if ($min === null || $value <\
    \ $min) {\n            $min = $value;\n            $minIndex = $key;\n       \
    \ }\n    }\n    $result[] = $min;\n    $result[] = $minIndex;\n    return $result;\n\
    }\n", "    $evens = array_filter($arr, function($v){\n        return $v & 1;\n\
    \    });\n    if (count($evens) === 0){\n        return [];\n    }\n    $minIndex\
    \ = array_search(min($evens), $evens);\n    return [$evens[$minIndex], $minIndex];\n\
    }\n", "    $evens = array_filter($arr, function($v) { return $v & 1; });\n   \
    \ if (count($evens) === 0) return [];\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ return [];\n    $min = array_reduce($evens, function($min, $v){\n        return\
    \ $min > $v ? $min : $v;\n    });\n    $index = array_search($min, $evens);\n\
    \    return [ $min, $index ];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v) { return $v\
    \ & 1; });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5,0,3,0,4,2];\n$arr = [5,0,3,0,4,2,1];\n\
    $arr = [5,0,3,0,4,2,1,0];\n$arr = [5,0,3,0,4,2,1,0,1];\n$arr = [5,0,3,0,4,2,1,0,1,2];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,1];\n$arr = [5,0,3,0,4,2,1,0,1,0,1,2,3];\n$arr = [5,0,3,0,4,2,1,0,1,0,1,2,3,4,5];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. Your solution works perfectly fine for small arrays. But\
    \ for large arrays it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| c |>\nI added a solution that should be faster for large arrays.\
    \ I tested it on large arrays and it took less than a second.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Your solution works perfectly fine for small arrays.\
    \ But for large arrays it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| c |>\nI added a solution that should be faster for large arrays.\
    \ I tested it on large arrays and it took less than a second.\n<|/ c |>\n<| a\
    \ tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr1 = [1,2,3];\n\
    $arr2 = [];\n$arr3 = [];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n$arr6 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr7 = [5, 0, 3, 0, 4, 2, 1];\n$arr8 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr9 = [5, 0, 3, 0, 4, 2, 1];\n$arr10 = [5, 0, 3, 0, 4, 2, 1];\n$arr11\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr12 = [5, 0, 3, 0, 4, 2, 1];\n$arr13 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr14 = [5, 0, 3, 0, 4, 2, 1];\n$arr15 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr16 = [5, 0, 3, 0, 4, 2, 1];\n$arr17 = [5, 0, 3, 0, 4, 2, 1];\n$arr18 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr19 = [5, 0, 3, 0, 4, 2, 1];\n$arr20 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr21 = [5, 0, 3, 0, 4, 2, 1];\n$arr22 = [5, 0, 3, 0, 4, 2, 1];\n$arr23\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr24 = [5, 0, 3, 0, 4, 2, 1];\n$arr25 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr26 = [5, 0, 3, 0, 4, 2, 1];\n$arr27 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr28 = [5, 0, 3, 0, 4, 2, 1];\n$arr29", "    $result = [];\n    $even = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[$value] = $value;\n            $index[$value]\
    \ = $key;\n        }\n    }\n    foreach ($even as $key => $value) {\n       \
    \ $result[] = $value;\n    }\n    foreach ($index as $key => $value) {\n     \
    \   $result[] = $key;\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result\
    \ = pluck($arr);\nprint_r($result);", "    $result = [];\n    $even = [];\n  \
    \  $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[$value] = $value;\n            $index[$value] =\
    \ $key;\n        } else {\n            $result[$value] = $value;\n        }\n\
    \    }\n    if (count($even) > 0) {\n        $smallest = $even[0];\n        $smallest_index\
    \ = 0;\n        foreach ($even as $key => $value) {\n            if ($value <\
    \ $smallest) {\n                $smallest = $value;\n                $smallest_index\
    \ = $key;\n            }\n        }\n        $result[$smallest] = $smallest_index;\n\
    \    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v) { return $v\
    \ & 1; });\n    if (count($evens) === 0) return [];\n    $min = $evens[0];\n \
    \   $minIndex = 0;\n    foreach ($evens as $index => $v) {\n        if ($v ===\
    \ $min) {\n            $minIndex = $index;\n        }\n    }\n    return [$min,\
    \ $minIndex];\n}\n", "    $evens = array_filter($arr, function($v){\n        return\
    \ $v % 2 === 0;\n    });\n    if(count($evens) === 0){\n        return [];\n \
    \   }\n    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\n$arr = [5,0,3,0,4,2];\n$arr = [5,0,3,0,4,2,1];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,", "   \
    \ $evens = array_filter($arr, function($v){return $v % 2 === 0;});\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n\
    $result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";",
  "    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $min = array_reduce($evens, function($min, $v) { return\
    \ $min > $v ? $min : $v; });\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\"\
    ;\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if(count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if(count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v){\n        return\
    \ $v & 1;\n    });\n    if (count($evens) === 0){\n        return [];\n    }\n\
    \    $min = array_reduce($evens, function($min, $v){\n        return $min > $v\
    \ ? $min : $v;\n    });\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);",
  "    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v) { return $v\
    \ & 1; });\n    if (count($evens) === 0) return [];\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n", "    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n\
    $arr = [5, 0, 3, 0, 4, 2];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, ", "    $result = [];\n    $even = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n        } else {\n            $result[$value] = $key;\n\
    \        }\n    }\n    if (count($even) > 0) {\n        $result = $even;\n   \
    \ }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);",
  "    $result = [];\n    $smallest = null;\n    $smallest_index = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($smallest === null || $value < $smallest)\
    \ {\n            $smallest = $value;\n            $smallest_index = $key;\n  \
    \      }\n    }\n    $result[] = $smallest;\n    $result[] = $smallest_index;\n\
    \    return $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nvar_dump($result);",
  "    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = array_reduce($evens, function($min,\
    \ $v) { return $min < $v ? $min : $v; });\n    $index = array_search($min, $evens);\n\
    \    return [ $min, $index ];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\nI came up with this solution:\n<code>", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n", "    $evens = array_filter($arr, function($v){\n    \
    \    return $v & 1;\n    });\n    if (count($evens) === 0){\n        return [];\n\
    \    }\n    $min = array_shift($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}", "    $result = [];\n    $even = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[$value]\
    \ = $key;\n        } else {\n            $result[$value] = $key;\n        }\n\
    \    }\n    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $result[$min] = array_search($min, $even);\n    return $result;\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\nprint_r($result);", "    $even = [];\n \
    \   $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_index\
    \ = array_search($smallest_value, $even);\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $smallest_value = min($odd);\n    $smallest_index = array_search($smallest_value,\
    \ $odd);\n    return [$smallest_value, $smallest_index];\n}\n$arr = [4,2,3];\n\
    $result = pluck($arr);\nprint_r($result);", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; }); // filter out even numbers\n    $evens = array_keys($evens);\
    \ // get keys\n    $evens = array_flip($evens); // flip keys to get values\n \
    \   $evens = array_filter($evens, function($v) { return $v > 0; });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = min($evens); // get smallest\
    \ value\n    $index = array_search($min, $evens); // get index of smallest value\n\
    \    return [$min, $index];\n}\n", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; }); // filter out even values\n    if (count($evens) === 0)\
    \ return [];\n    $minIndex = array_search(min($evens), $evens); // get the smallest\
    \ index\n    return [$evens[$minIndex], $minIndex];\n}\n", "    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);", "    $evens\
    \ = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [ $minIndex, array_search($minIndex, $evens) ];\n}", " \
    \   $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\n$arr = [4,2,3];\n\
    $arr2 = [1,5,3,7,8,9];\n\n$arr3 = array_filter($arr2, function($v){\n    return\
    \ $v & 1;\n});\n\n$arr4 = array_filter($arr3, function($v){\n    return $v & 1;\n\
    });\n\n$arr5 = array_filter($arr4, function($v){\n    return $v & 1;\n});\n\n\
    $arr6 = array_filter($arr5, function($v){\n    return $v & 1;\n});\n\n$arr7 =\
    \ array_filter($arr6, function($v){\n    return $v & 1;\n});\n\n$arr8 = array_filter($arr7,\
    \ function($v){\n    return $v & 1;\n});\n\n$arr9 = array_filter($arr8, function($v){\n\
    \    return $v & 1;\n});\n\n$arr10 = array_filter($arr9, function($v){\n    return\
    \ $v & 1;\n});\n\n$arr11 = array_filter($arr10, function($v){\n    return $v &\
    \ 1;\n});\n\n$arr12 = array_filter($arr11, function($v){\n    return $v & 1;\n\
    });\n\n$arr13 = array_filter($arr12, function($v){\n    return $v & 1;\n});\n\n\
    $arr14 = array_filter($arr13, function($v){\n    return $v & 1;\n});\n\n$arr15\
    \ = array_filter($arr14, function($v){\n    return $v & 1;\n});\n\n$arr16 = array_filter($arr15,\
    \ function($v){\n    return $v & 1;\n});\n\n$arr17 = array_filter($arr16, function($v){\n\
    \    return $v & 1;\n});\n\n$arr18 = array_filter($arr17, function($v){\n    return\
    \ $v & 1;\n});\n\n$arr19 = array_filter($arr18, function($v){\n    return $v &\
    \ 1;\n});\n\n$arr20 = array_filter($arr19, function($v){\n    return $v & 1;\n\
    });\n\n$arr21 = array_filter($arr20, function($v){\n    return $v & 1;\n});\n\n\
    $", "    $evens = array_filter($arr, function($v){\n        return $v % 2 == 0;\n\
    \    });\n    if (count($evens) === 0){\n        return [];\n    }\n    $minIndex\
    \ = array_search(min($evens), $evens);\n    return [$evens[$minIndex], $minIndex];\n\
    }\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);", "    $even =\
    \ [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[$key] = $value;\n        } else {\n         \
    \   $odd[$key] = $value;\n        }\n    }\n    $smallest_value = min($even);\n\
    \    $smallest_key = array_search($smallest_value, $even);\n    $smallest_value\
    \ = min($odd);\n    $smallest_key = array_search($smallest_value, $odd);\n   \
    \ return [$smallest_value, $smallest_key];\n}\n", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n", "    $evens = array_filter($arr, function($v){\n    \
    \    return $v & 1;\n    });\n    if (count($evens) === 0){\n        return [];\n\
    \    }\n    $min = array_shift($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if(count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = $evens[0];\n    $minIndex = 0;\n    foreach($evens as\
    \ $v){\n        if($v < $min){\n            $min = $v;\n            $minIndex\
    \ = $v;\n        }\n    }\n    return [$min, $minIndex];\n}", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even values\n    if (count($evens)\
    \ === 0) return [];\n    $min = array_reduce($evens, function($min, $v) { return\
    \ $min < $v ? $min : $v; });\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n", "    $evens = array_filter($arr, function($v) { return\
    \ $v & 1; });\n    if (count($evens) === 0) return [];\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n", "    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 === 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    foreach ($even as $key => $value) {\n       \
    \ $result[$value] = $key;\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n\
    $result = pluck($arr);\nprint_r($result);", "    $result = [];\n    $min = $arr[0];\n\
    \    $minIndex = 0;\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            if ($value < $min) {\n                $min = $value;\n\
    \                $minIndex = $key;\n            }\n        }\n    }\n    $result[]\
    \ = $min;\n    $result[] = $minIndex;\n    return $result;\n}\n\n$arr = [4, 2,\
    \ 3];\n$result = pluck($arr);\nprint_r($result);\n\n$arr = [1, 2, 3];\n$result\
    \ = pluck($arr);\nprint_r($result);\n\n$arr = [];\n$result = pluck($arr);\nprint_r($result);\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\n$result = pluck($arr);\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n", "    $result = [];\n  \
    \  $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    foreach ($result as $key => $value) {\n  \
    \      if ($value == $min) {\n            $result[$key] = $key;\n        }\n \
    \   }\n    return $result;\n}", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [ $min, $index ];\n}\n\n\
    $arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n$arr\
    \ = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,",
  "    $result = [];\n    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) > 0) {\n\
    \        $result = $even[0];\n        $result = array_search($result, $index);\n\
    \    }\n    return $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho\
    \ \"$result\\n\";", "    $evens = array_filter($arr, function($v){\n        return\
    \ $v % 2 === 0;\n    });\n    if (count($evens) === 0){\n        return [];\n\
    \    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n  \
    \  return [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n\
    $arr = [5, 0, 3, 0, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4,\
    \ 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3,\
    \ 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5,\
    \ 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr\
    \ = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n\
    $arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4,\
    \ 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3,\
    \ 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5,\
    \ 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr\
    \ = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n\
    $arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4,\
    \ 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3,\
    \ 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5,\
    \ 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr\
    \ = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n\
    $arr = [5, 1, 3, 6, 4, 2];\n$arr = [", "    $evens = array_filter($arr, function($num)\
    \ {\n        return $num % 2 === 0;\n    });\n    if (count($evens) === 0) {\n\
    \        return [];\n    }\n    $even = min($evens);\n    return array_filter($arr,\
    \ function($num) use ($even) {\n        return $num === $even;\n    });\n}\n\n\
    $arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);", "    $result =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $result[] = [$value, $key];\n        }\n    }\n    sort($result);\n\
    \    return $result[0];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);",
  "    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the array is empty or has only\
    \ even values.\n<|/ c |>\n<| c |>\nI added a solution that handles empty arrays\
    \ and even values.\n<|/ c |>\n<| c |>\nI added a solution that handles empty arrays\
    \ and even values.\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php",
  "    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $result[] = [$value, $key];\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);",
  "    $even = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n     \
    \   if ($value % 2 == 0) {\n            $even[] = $value;\n        } else {\n\
    \            $odd[] = $value;\n        }\n    }\n    $even = array_filter($even);\n\
    \    $odd = array_filter($odd);\n    $even = array_keys($even);\n    $odd = array_keys($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; }); // filter out even numbers\n    if (count($evens) === 0)\
    \ return [];\n    $min = min($evens); // find the smallest even number\n    $index\
    \ = array_search($min, $evens); // find the index\n    return [ $min, $index ];\n\
    }\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't work if\
    \ there are multiple nodes with the same smallest even value.\n<|/ c |>\n<| c\
    \ |>\nI added a comment to the question to clarify.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question to clarify.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question to clarify.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify.\n<|/ c |>\n<| a dscore=1 |>\nI came up with this solution:\n<code>",
  "    $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    if(count($evens) === 0){\n        return [];\n    }\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\nprint_r($result);", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}\n</code>\n<|/ a tags=arrays,php,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple nodes with the same smallest\
    \ even value.\n<|/ c |>\n<| c |>\nI added a comment to the question asking for\
    \ clarification.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ for clarification.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ for clarification.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ for clarification.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $smallest = min($evens);\n    $index = array_search($smallest, $evens);\n\
    \    return [ $smallest, $index ];\n}\n\n$arr = [4,2,3];\n$arr2 = [1,2,3];\n$arr3\
    \ = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n\n$tests = [\n\
    \    [$arr],\n    [$arr2],\n    [$arr3],\n    [$arr4],\n    [$arr5],\n];\n\nforeach\
    \ ($tests as $test) {\n    var_dump(pluck($test[0]));\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the array is empty. Try it with `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nI added a test case for an empty array. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty. Try it\
    \ with `[1,2,3]`.\n<|/ c |>\n<| c |>\nI added a test case for an empty array.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI added a test case for an empty\
    \ array. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$arr\
    \ = [4,2,3];\n$arr2 = [1,2,3];\n$arr3 = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 =\
    \ [5, 0, 3, 0, 4, 2];\n\n$tests = [\n    [$arr],\n    [$arr2],\n    [$arr3],\n\
    \    [$arr4],\n    [$arr5],\n];\n\nforeach ($tests as $test) {\n    var_dump(pluck($test[0]));\n\
    }\n", "    $evens = array_filter($arr, function($v) { return $v & 1; });\n   \
    \ if (count($evens) === 0) return [];\n    $even = min($evens);\n    $index =\
    \ array_search($even, $arr);\n    return [$even, $index];\n}\n", "    $evens =\
    \ array_filter($arr, function($v){\n        return $v & 1;\n    });\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n\
    $arr = [1,2,3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2,\
    \ 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\n", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; });\n    if (count($evens) === 0) return [];\n    $evens =\
    \ array_keys($evens);\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr =\
    \ [5, 0, 3, 0, 4, 2, 1];", "    $evens = array_filter($arr, function($v){\n  \
    \      return $v % 2 === 0;\n    });\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $even = min($evens);\n    $index = array_search($even, $arr);\n\
    \    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho\
    \ \"<pre>\";\nprint_r($result);\necho \"</pre>\";", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n", "    $result = [];\n    $even = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n            $even[]\
    \ = $value;\n        } else {\n            $result[$value] = $key;\n        }\n\
    \    }\n    if (count($even) > 0) {\n        $result = array_intersect_key($result,\
    \ array_flip($even));\n    }\n    return $result;\n}\n", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v) { return $v\
    \ & 1; });\n    if (count($evens) === 0) return [];\n    $min = array_reduce($evens,\
    \ function($min, $v) { return $min < $v ? $min : $v; });\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n", "    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = array_reduce($evens, function($carry,\
    \ $num) {\n        return $num < $carry ? $num : $carry;\n    });\n    $index\
    \ = array_search($min, $evens);\n    return [$min, $index];\n}\n", "    $evens\
    \ = array_filter($arr, function($v){\n        return $v & 1;\n    });\n    if\
    \ (count($evens) === 0){\n        return [];\n    }\n    $min = array_reduce($evens,\
    \ function($carry, $v){\n        return $carry < $v ? $carry : $v;\n    });\n\
    \    $index = array_search($min, $evens);\n    return [ $min, $index ];\n}\n",
  "    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $result[] = [$value, $key];\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);",
  "    $even = [];\n    $odd = [];\n    $even_index = [];\n    $odd_index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[$key] = $value;\n            $even_index[$key] = $key;\n      \
    \  } else {\n            $odd[$key] = $value;\n            $odd_index[$key] =\
    \ $key;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_index\
    \ = array_search($smallest_value, $even);\n    $smallest_value_odd = min($odd);\n\
    \    $smallest_index_odd = array_search($smallest_value_odd, $odd);\n    if ($smallest_value\
    \ == $smallest_value_odd) {\n        if ($smallest_value == 0) {\n           \
    \ return [$smallest_value, $smallest_index];\n        } else {\n            return\
    \ [$smallest_value, $smallest_index];\n        }\n    }\n    if ($smallest_value\
    \ == 0) {\n        return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_index_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_value_odd) {\n\
    \        return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_index_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_value_odd) {\n\
    \        return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_index_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_value_odd) {\n\
    \        return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_index_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_value_odd) {\n\
    \        return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_index_odd) {\n        return [$smallest_value, $smallest_index];",
  "    $result = [];\n    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $index = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index;\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);", "    $result\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);", "    $evens\
    \ = array_filter($arr, function($v){\n        return $v % 2 === 0;\n    });\n\
    \    if(count($evens) === 0){\n        return [];\n    }\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't work if there are multiple\
    \ nodes with the same smallest even value\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ after I posted my answer. I'll edit my answer in a minute.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that works with multiple nodes with the\
    \ same smallest even value.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $arr1 = [1,2,3];\n$arr2 = [];\n$arr3 = [5,0,3,0,4,2];\n$arr4 = [];\n$arr5 = [5,0,3,0,4,2];\n\
    $arr6 = [5,0,3,0,4,2];\n$arr7 = [5,0,3,0,4,2];\n$arr8 = [5,0,3,0,4,2];\n$arr9\
    \ = [5,0,3,0,4,2];\n$arr10 = [5,0,3,0,4,2];\n$arr11 = [5,0,3,0,4,2];\n$arr12 =\
    \ [5,0,3,0,4,2];\n$arr13 = [5,0,3,0,4,2];\n$arr14 = [5,0,3,0,4,2];\n$arr15 = [5,0,3,0,4,2];\n\
    $arr16 = [5,0,3,0,4,2];\n$arr17 = [5,0,3,0,4,2];\n$arr18 = [5,0,3,0,4,2];\n$arr19\
    \ = [5,0,3,0,4,2];\n$arr20 = [5,0,3,0,4,2];\n$arr21 = [5,0,3,0,4,2];\n$arr22 =\
    \ [5,0,3,0,4,2];\n$arr23 = [5,0,3,0,4,2];\n$arr24 = [5,0,3,0,4,2];\n$arr25 = [5,0,3,0,4,2];\n\
    $arr26 = [5,0,3,0,4,2];\n$arr27 = [5,0,3,0,4,2];\n$arr28 = [5,0,3,0,4,2];\n$arr29\
    \ = [5,0,3,0,4,2];\n$arr30 = [5,0,3,0,4,2];\n$arr31 = [5,0,3,0,4,2];\n$arr32 =\
    \ [5,0,3,0,4,2];\n$arr33 = [5,0,3,0,4,2];\n$arr34 = [5,0,3,0,4,2];\n$arr35 = [5,0,3,",
  "    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n", " \
    \   $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $result[] = [$value, $key];\n        }\n    }\n   \
    \ return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ work if the array has duplicate values. For example, if `[1,2,2,3]` is passed\
    \ in, it will return `[2,1]` instead of `[1,2]`.\n<|/ c |>\n<| c |>\nI added a\
    \ comment to the question to clarify that duplicate values should be ignored.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question to clarify that duplicate\
    \ values should be ignored.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify that duplicate values should be ignored.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question to clarify that duplicate values should be ignored.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$array = [4,2,3];\n$result = array_filter($array,\
    \ function($v){\n    return $v % 2 == 0;\n});\n$result = array_keys($result);\n\
    print_r($result);\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ work if the array has duplicate values. For example, if `[1,2,2,3]` is passed\
    \ in, it will return `[2,1]` instead of `[1,2]`.\n<|/ c |>\n<| c |>\nI added a\
    \ comment to the question to clarify that duplicate values should be ignored.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question to clarify that duplicate\
    \ values should be ignored.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array\
    \ = [4,2,3];\n$result = array_filter($array, function($v){\n    return $v % 2\
    \ == 0;\n});\n$result = array_keys($result);\nprint_r($result);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array has duplicate\
    \ values. For example, if `[1,2,2,3]` is passed in, it will return `[2,1]` instead\
    \ of `[1,2]`.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ that duplicate values should be ignored.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n<?php\n$array = [4,2,3];\n$result = array_filter($array, function($v){\n\
    \    return $v", "    $evens = array_filter($arr, function($n) { return $n % 2\
    \ == 0; });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $index = array_search($min, $evens);\n    return [$min,\
    \ $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\necho \"<pre>\";\n\
    print_r($result);\necho \"</pre>\";", "    $result = [];\n    $even = [];\n  \
    \  $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 === 0) {\n            $even[] = $value;\n            $index[] = $key;\n  \
    \      }\n    }\n    if (count($even) === 0) {\n        return [];\n    }\n  \
    \  $min = min($even);\n    $indexMin = array_search($min, $even);\n    $result[]\
    \ = $min;\n    $result[] = $indexMin;\n    return $result;\n}\n\n$arr = [4, 2,\
    \ 3];\n$result = pluck($arr);\nvar_dump($result);\n\n$arr = [1, 2, 3];\n$result\
    \ = pluck($arr);\nvar_dump($result);\n\n$arr = [];\n$result = pluck($arr);\nvar_dump($result);\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\n$result = pluck($arr);\nvar_dump($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works well for small\
    \ arrays, but for large arrays it takes too much time. My array has about 500\
    \ 000 elements and it takes about 30 seconds to execute your code. Do you know\
    \ any way to make it faster?\n<|/ c |>\n<| c |>\nI added a code snippet that uses\
    \ `array_search` instead of `array_filter`\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works well for small arrays, but for large arrays it takes\
    \ too much time. My array has about 500 000 elements and it takes about 30 seconds\
    \ to execute your code. Do you know any way to make it faster?\n<|/ c |>\n<| c\
    \ |>\nI added a code snippet that uses `array_search` instead of `array_filter`\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works well for small arrays,\
    \ but for large arrays it takes too much time. My array has about 500 000 elements\
    \ and it takes about 30 seconds to execute your code. Do you know any way to make\
    \ it faster?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $even = [];\n \
    \   $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_key\
    \ = array_search($smallest_value, $even);\n    $smallest_value = $even[$smallest_key];\n\
    \    $smallest_key = array_search($smallest_value, $odd);\n    $smallest_value\
    \ = $odd[$smallest_key];\n    return [$smallest_value, $smallest_key];\n}\n\n\
    $arr = [4, 2, 3];\n$result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\n\
    echo \"</pre>\";", "    $evens = array_filter($arr, function($v){\n        return\
    \ $v & 1;\n    });\n    if (count($evens) === 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}", "    $evens = array_filter($arr, function($v) { return\
    \ $v & 1; });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "    $even = [];\n    $odd = [];\n   \
    \ $even_index = [];\n    $odd_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[$key] = $value;\n     \
    \       $even_index[$key] = $key;\n        } else {\n            $odd[$key] =\
    \ $value;\n            $odd_index[$key] = $key;\n        }\n    }\n    $smallest_value\
    \ = min($even);\n    $smallest_index = array_search($smallest_value, $even);\n\
    \    if ($smallest_index === false) {\n        return [];\n    }\n    $smallest_value\
    \ = min($odd);\n    $smallest_index = array_search($smallest_value, $odd);\n \
    \   if ($smallest_index === false) {\n        return [];\n    }\n    $smallest_value\
    \ = min($even, $odd);\n    $smallest_index = array_search($smallest_value, $even);\n\
    \    if ($smallest_index === false) {\n        return [];\n    }\n    $smallest_value\
    \ = min($odd, $even);\n    $smallest_index = array_search($smallest_value, $odd);\n\
    \    if ($smallest_index === false) {\n        return [];\n    }\n    $smallest_value\
    \ = min($even, $odd, $even, $odd);\n    $smallest_index = array_search($smallest_value,\
    \ $even);\n    if ($smallest_index === false) {\n        return [];\n    }\n \
    \   return [$smallest_value, $smallest_index];\n}\n", "    $result = [];\n   \
    \ $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $even[$key] = $value;\n            $index[$key]\
    \ = $key;\n        } else {\n            $result[$key] = $value;\n        }\n\
    \    }\n    foreach ($even as $key => $value) {\n        $result[$key] = $value;\n\
    \    }\n    foreach ($index as $key => $value) {\n        $result[$key] = $value;\n\
    \    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);", "    $evens = array_filter($arr, function($v) { return $v\
    \ & 1; });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\necho \"$result[0]\\n\";\necho \"$result[1]\\\
    n\";", "    $evens = array_filter($arr, function($v){\n        return $v & 1;\n\
    \    });\n    if (count($evens) === 0) {\n        return [];\n    }\n    $even\
    \ = min($evens);\n    return array_filter($arr, function($v) use ($even){\n  \
    \      return $v & $even;\n    });\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr\
    \ = [];\n$arr = [5,0,3,0,4,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];",
  "    $evens = array_filter($arr, function($n) { return $n % 2 === 0; });\n    if\
    \ (count($evens) === 0) return [];\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution doesn't work if\
    \ there are multiple nodes with the same smallest even value\n<|/ c |>\n<| c |>\n\
    I added a solution that works with multiple nodes with the same smallest even\
    \ value.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>", "    $result = [];\n   \
    \ $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    $result = $even[0];\n    $index = $index[0];\n\
    \    if (count($even) > 1) {\n        $result = min($even);\n        $index =\
    \ array_search($result, $even);\n    }\n    return [$result, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\necho\
    \ \"</pre>\";\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,algorithm |>\n\
    <code>\n<?php", "    $evens = array_filter($arr, function($v) { return $v & 1;\
    \ });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n    $index\
    \ = array_search($min, $evens);\n    return [$min, $index];\n}\n", "    $evens\
    \ = array_filter($arr, function($v){return $v & 1;});\n    if (count($evens) ===\
    \ 0){\n        return [];\n    }\n    $even = min($evens);\n    return array_filter($arr,\
    \ function($v) use ($even){return $v & $even;});\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n\
    \n$arr = [4,2,3];\n$evens = array_filter($arr, function($v){return $v & 1;});\n\
    if (count($evens) === 0){\n    return [];\n}\n$even = min($evens);\nreturn array_filter($arr,\
    \ function($v) use ($even){return $v & $even;});\n", "    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n\
    $result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";",
  "    $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    if(count($evens) === 0){\n        return [];\n    }\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n\
    $result = pluck($arr);\nprint_r($result);\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, however it fails for me on large arrays. I tested it on [4,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    <|/ c |>\n<| c |>\nIt fails because of the `array_filter` call. `array_filter`\
    \ will filter out any element that does not have a `&` bitwise operator. Since\
    \ `&` has a higher precedence than `==`, it will evaluate to `($v & 1)` instead\
    \ of `($v == 1)`. See [this answer](https://stackoverflow.com/a/470925/157957)\
    \ for more details.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I updated\
    \ the answer to fix the issue.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require `array_filter`\n<|/ c |>\n<| a |>\nHere's a solution that doesn't require\
    \ array_filter or array_search:\n<code>", "    $result = [];\n    $even = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[$value] = $key;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    asort($even);\n    foreach ($even as $key =>\
    \ $value) {\n        $result[] = $value;\n    }\n    return $result;\n}", "  \
    \  $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    $evens = array_keys($evens);\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $min = $evens[0];\n    $minIndex = 0;\n    foreach ($evens as\
    \ $key => $value) {\n        if ($value < $min) {\n            $min = $value;\n\
    \            $minIndex = $key;\n        }\n    }\n    return [$min, $minIndex];\n\
    }", "    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if\
    \ (count($evens) === 0) return [];\n    $min = array_reduce($evens, function($min,\
    \ $v) { return $min < $v ? $min : $v; });\n    return array_filter($arr, function($v)\
    \ use ($min) { return $v === $min; });\n}\n", "    $result = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n            $result[]\
    \ = [$value, $key];\n        }\n    }\n    return $result;\n}\n\n$arr = [4, 2,\
    \ 3];\n$result = pluck($arr);\nprint_r($result);", "    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $smallest = min($evens);\n    $index = array_search($smallest, $evens);\n\
    \    return [$smallest, $index];\n}\n", "    $evens = array_filter($arr, function($v){\n\
    \        return $v % 2 === 0;\n    });\n    if (count($evens) === 0){\n      \
    \  return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n   \
    \ return [ $minIndex, min($evens) ];\n}\n", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; });\n    if (count($evens) === 0) return [];\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n", " \
    \   $evens = array_filter($arr, function($v){\n        return $v & 1;\n    });\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $min = array_reduce($evens,\
    \ function($min, $v){\n        return $min > $v ? $min : $v;\n    });\n    return\
    \ array_filter($arr, function($v) use ($min){\n        return $v & $min;\n   \
    \ });\n}\n\n$arr = [4,2,3];\n$arr2 = [1, 2];\n$arr3 = [1, 2, 3];\n$arr4 = [];\n\
    $arr5 = [5, 0, 3, 0, 4, 2];\n$arr6 = [5, 0, 3, 0, 4, 2, 1];\n$arr7 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr8 = [5, 0, 3, 0, 4, 2, 1];\n$arr9 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr10 = [5, 0, 3, 0, 4, 2, 1];\n$arr11 = [5, 0, 3, 0, 4, 2, 1];\n$arr12 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr13 = [5, 0, 3, 0, 4, 2, 1];\n$arr14 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr15 = [5, 0, 3, 0, 4, 2, 1];\n$arr16 = [5, 0, 3, 0, 4, 2, 1];\n$arr17\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr18 = [5, 0, 3, 0, 4, 2, 1];\n$arr19 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr20 = [5, 0, 3, 0, 4, 2, 1];\n$arr21 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr22 = [5, 0, 3, 0, 4, 2, 1];\n$arr23 = [5, 0, 3, 0, 4, 2, 1];\n$arr24 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr25 = [5, 0, 3, 0, 4, 2, 1];\n$arr26 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr27 = [5, 0, 3, 0, 4, 2, 1];\n$arr28 = [5, 0, 3, 0, 4, 2, 1];\n$arr29\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr30 = [5, 0, 3, 0, 4, 2, 1];\n$arr31 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr32 = [5, 0, 3, 0, 4, 2, 1];\n$arr33 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr34 = [5, 0, 3, 0, 4, 2, 1];\n$arr35 = [5, 0, 3, 0, 4, 2, 1];\n$arr36 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr37 = [5, 0, 3, 0, 4, 2, 1];\n$arr38 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr39 = [5, 0, 3, 0, 4, 2, 1];\n$arr40 = [5, 0, 3, 0, 4, 2, 1];\n$arr41\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr42 = [5, 0, 3, 0, 4, 2, 1];\n$arr43 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr44 = [5, 0, 3, 0, ", "    $result = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $result[]\
    \ = [$value, $key];\n        }\n    }\n    sort($result);\n    return $result[0][1];\n\
    }\n", "    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $result[$value] = $key;\n        }\n    }\n    return\
    \ $result;\n}", "    $result = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $result[] = [$value, $key];\n    \
    \    }\n    }\n    if (count($result) == 0) {\n        return [];\n    }\n   \
    \ $result[$result[0][0] >> 1] = $result[0][1];\n    return $result;\n}\n\n$arr\
    \ = [4, 2, 3];\n$result = pluck($arr);\nvar_dump($result);", "    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);", "    $evens\
    \ = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n", "    $even = [];\n    $odd = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[$key] = $value;\n        } else {\n            $odd[$key] = $value;\n\
    \        }\n    }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n\
    \    $even = array_keys($even);\n    $odd = array_keys($odd);\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    if (count($odd) == 0) {\n        return\
    \ $even;\n    }\n    $smallest_value = $even[0];\n    $smallest_index = 0;\n \
    \   foreach ($even as $key => $value) {\n        if ($value == $smallest_value)\
    \ {\n            $smallest_index = $key;\n        }\n    }\n    foreach ($odd\
    \ as $key => $value) {\n        if ($value == $smallest_value) {\n           \
    \ $smallest_index = $key;\n        }\n    }\n    return [$smallest_value, $smallest_index];\n\
    }", "    $evens = array_filter($arr, function($num) {\n        return $num % 2\
    \ === 0;\n    });\n    if (count($evens) === 0) {\n        return [];\n    }\n\
    \    $min = array_reduce($evens, function($carry, $num) {\n        return $num\
    \ < $carry ? $num : $carry;\n    });\n    $index = array_search($min, $evens);\n\
    \    return [ $min, $index ];\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n\
    $arr = [4,2,3];\n$evens = array_filter($arr, function($num) {\n    return $num\
    \ % 2 === 0;\n});\n$min = array_reduce($evens, function($carry, $num) {\n    return\
    \ $num < $carry ? $num : $carry;\n});\n$index = array_search($min, $evens);\n\
    print_r($min);\nprint_r($index);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr, function($num)\
    \ {\n    return $num % 2 === 0;\n});\n$min = array_reduce($evens, function($carry,\
    \ $num) {\n    return $num < $carry ? $num : $carry;\n});\n$index = array_search($min,\
    \ $evens);\nprint_r($min);\nprint_r($index);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr,\
    \ function($num) {\n    return $num % 2 === 0;\n});\n$min = array_reduce($evens,\
    \ function($carry, $num) {\n    return $num < $carry ? $num : $carry;\n});\n$index\
    \ = array_search($min, $evens);\nprint_r($min);\nprint_r($index);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr,\
    \ function($num) {\n    return $num % 2 === 0;\n});\n$min = array_reduce($evens,\
    \ function($carry, $num) {\n    return $num < $carry ? $num : $carry;\n});\n$index\
    \ = array_search($min, $evens);", "    $evens = array_filter($arr, function($v)\
    \ { return $v & 1; });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5,0,3,0,4,2];\n$arr = [5,0,3,0,4,2,1];\n\
    $arr = [5,0,3,0,4,2,1,0];\n$arr = [5,0,3,0,4,2,1,0,1];\n$arr = [5,0,3,0,4,2,1,0,1,2];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4];\n$arr =\
    \ [5,0,3,0,4,2,1,0,1,0,2,3,4,5];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6];\n$arr\
    \ = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\n$arr =\
    \ [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,", "    $evens\
    \ = array_filter($arr, function($v){return $v % 2 == 0;});\n    if(count($evens)\
    \ == 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}", "    $evens = array_filter($arr, function($v){\n\
    \        return $v & 1;\n    });\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n\n$array = [4,2,3];\n$result = array_filter($array, function($v){\n\
    \    return $v & 1;\n});\n$result = array_filter($result, function($v){\n    return\
    \ $v > 0;\n});\n$result = array_filter($result, function($v){\n    return $v <\
    \ count($array);\n});\n$result = array_filter($result, function($v){\n    return\
    \ $v === 0;\n});\n$result = array_filter($result, function($v){\n    return $v\
    \ === count($array);\n});\n$result = array_filter($result, function($v){\n   \
    \ return $v === 0;\n});\n$result = array_filter($result, function($v){\n    return\
    \ $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v", "    $evens = array_filter($arr, function($v) { return $v & 1;\
    \ }); // filter out even numbers\n    if (count($evens) === 0) return [];\n  \
    \  $minIndex = array_search(min($evens), $evens);\n    return [ $minIndex, array_search($minIndex,\
    \ $evens) ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
