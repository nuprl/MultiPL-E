name: HumanEval_27_flip_case
language: php
prompt: "<?php\n// For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
  ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '{' => '{', '}'\
    \ => '}')));\n}\n", "    return preg_replace('/./u', 'u', strtoupper($string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return preg_replace('/([a-z])/', '$U$1$1', $string);\n}\n</code>\n\
    <|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work. `preg_replace` doesn't\
    \ support lookbehinds.\n<|/ c |>\n<| c |>\n: It does. Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n\
    <|/ c |>\n<| c |>\n: It does. Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n\
    <|/ c |>\n<| c |>\n: It does. Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n\
    <|/ c |>\n<| c |>\n: It does. Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$string = preg_replace('/(?<=\\p{Ll})\\p{Ll}/u',\
    \ 'u', $string);\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't\
    \ work. `preg_replace` doesn't support lookbehinds.\n<|/ c |>\n<| c |>\n: It does.\
    \ Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n<|/\
    \ c |>\n<| c |>\n: It does. Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n\
    <|/ c |>\n<| c |>\n: It does. Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n\
    <|/ c |>\n<| c |>\n: It does. Look at the [docs](http://php.net/manual/en/function.preg-replace.php).\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$string = preg_replace('/(?<=\\p{Ll})\\p{Ll}/u',\
    \ 'u', $string);\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't\
    \ work. `preg_replace` doesn't support lookbehinds.\n<|/ ", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like this solution, it's very\
    \ elegant. However it fails for `'\xDF'` which should be `'SS'`.\n<|/ c |>\n<|\
    \ c |>\nI added a fix for that case\n<|/ c |>\n<| a dscore=2 |>\nThis should work:\n\
    <code>\n$string = '\xDF';\n$string = preg_replace('/[^A-Za-z]/', '', $string);\n\
    $string = preg_replace('/[^A-Z]/', '', $string);\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis fails for `'\xDF\
    '` which should be `'SS'`.\n<|/ c |>\n<| c |>\nThis fails for `'\xDF'` which should\
    \ be `'SS'`.\n<|/ c |>\n<| c |>\nThis fails for `'\xDF'` which should be `'SS'`.\n\
    <|/ c |>\n<| c |>\nThis fails for `'\xDF'` which should be `'SS'`.\n<|/ c |>\n\
    <| c |>\nThis fails for `'\xDF'` which should be `'SS'`.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = '\xDF';\n$string = preg_replace('/[^A-Za-z]/', '', $string);\n\
    $string = preg_replace('/[^A-Z]/', '', $string);\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis fails for `'\xDF'`\
    \ which should be `'SS'`.\n<|/ c |>\n<| c |>\nThis fails for `'\xDF'` which should\
    \ be `'SS'`.\n<|/ c |>\n<| c |>\nThis fails for `'\xDF'` which should be `'SS'`.\n\
    <|/ c |>\n<| c |>\nThis fails for `'\xDF'` which should be `'SS'`.\n<|/ c |>\n\
    <| a tags=php,regex |>\n<code>\n$string = '\xDF';\n$string = preg_replace('/[^A-Za-z]/',\
    \ '', $string);\n$", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return preg_replace('/./u',\
    \ 'u', strtoupper($string));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return preg_replace('/./u',\
    \ 'u', $string);\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"\
    '\" => '\\\\\\'', \"\\n\" => '\\\\n', '\\r' => '\\\\r', \"\\t\" => '\\\\t')));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n}", " \
    \   return strtoupper(preg_replace('/./u', '',\n        str_replace(['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'],\n\
    \        $string)));\n}", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '[' => '[', ']' => ']', '{'\
    \ => '{', '}' => '}'));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$string = 'Hello\
    \ World';\n$string = preg_replace('/./u', 'u', $string);\n$string = strtoupper($string);\n\
    </code>\n<|/ a tags=string,php dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n$string = strtoupper($string);\n\
    </code>\n<|/ a tags=string,php |>\n<| a |>\n<code>\n$string = 'Hello World';\n\
    $string = preg_replace('/./u', 'u', $string);\n$string = strtoupper($string);\n\
    </code>\n<|/ a dscore=1 tags=string,php |>\n<| a tags=string,php |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n$string\
    \ = strtoupper($string);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n$string\
    \ = strtoupper($string);\n</code>\n<|/ a tags=string,php |>\n<| a tags=string,php\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n\
    $string = strtoupper($string);\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,php\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n\
    $string = strtoupper($string);\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,php\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n\
    $string = strtoupper($string);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$string = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n\
    $string = strtoupper($string);\n</code>\n<|/ a tags=string,php |>\n<| a dscore=1\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/./u', 'u', $string);\n\
    $string = strtoupper($string);\n</code>\n<|/ a ", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n$string = preg_replace('/./u',\
    \ 'u', strtolower($string));\necho $string;", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\\
    ' => '\\\\\\\\')));\n}", "    return strtr($string, array('!' => '!!', '?' =>\
    \ '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '[' =>\
    \ '[', ']' => ']', '{' => '{', '}' => '}'));\n}\n", "    return preg_replace('/\\\
    B([a-z])/', '$U\\1', $string);\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\\\1', $string));\n}", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    ''))\n}", "    return strtr(strtolower($string), array_flip(range(65, 91)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", " \
    \   return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '\\U$1', $string));\n\
    }\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThanks for your answer. Your\
    \ solution is very elegant and I like it very much. Unfortunately I cannot accept\
    \ two answers. I upvoted your answer though.\n<|/ c |>\n<| c |>\nNo problem. Glad\
    \ you found it helpful.\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string\
    \ = 'Hello World';\n$string = preg_replace('/([a-z])/i', '\\U$1', $string);\n\
    echo $string;\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your\
    \ solution is very elegant and I like it very much. Unfortunately I cannot accept\
    \ two answers. I upvoted your answer though.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/([a-z])/i', '\\U$1', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThanks for your\
    \ answer. Your solution is very elegant and I like it very much. Unfortunately\
    \ I cannot accept two answers. I upvoted your answer though.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/([a-z])/i', '\\\
    U$1', $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for\
    \ your answer. Your solution is very elegant and I like it very much. Unfortunately\
    \ I cannot accept two answers. I upvoted your answer though.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/([a-z])/i', '\\\
    U$1', $string);\necho $string;\n</code>\n<|/ a tags=php,string,regex |>\n<| c\
    \ |>\nThanks for your answer. Your solution is very elegant and I like it very\
    \ much. Unfortunately I cannot accept two answers. I upvoted your answer though.\n\
    <|/ c |>\n<| a |>\n<code>\n$string = 'Hello World';\n$string = pre", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '\\\
    U$1', $string));\n}", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtoupper(mb_convert_case($string, MB_CASE_TITLE, 'UTF-8'));\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis works great for me. Thanks for sharing!\n\
    <|/ c |>\n<| c |>\nThis works great for me. Thanks for sharing!\n<|/ c |>\n<|\
    \ c |>\nThis works great for me. Thanks for sharing!\n<|/ c |>\n<| c |>\nThis\
    \ works great for me. Thanks for sharing!\n<|/ c |>\n<| c |>\nThis works great\
    \ for me. Thanks for sharing!\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>",
  "    return strtoupper(preg_replace('/./u', 'u', $string));\n}", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' =>\
    \ '&&', '\\'' => '\\'\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(strtr($string,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return\
    \ strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\
    \"\\\"', '(' => '(', ')' => ')', '[' => '[', ']' => ']', '{' => '{', '}' => '}'));\n\
    }\n", "    return strtoupper(mb_convert_case($string, MB_CASE_TITLE, 'UTF-8'));\n\
    }\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work for `'Hello'`\
    \ - it returns `'hELLO'`\n<|/ c |>\n<| c |>\n: It works for me. `echo flip_case('Hello');`\
    \ outputs `'hELLO'`\n<|/ c |>\n<| c |>\n: I added a link to an online demo showing\
    \ it working. What PHP version are you using?\n<|/ c |>\n<| c |>\n: I added a\
    \ link to an online demo showing it working. What PHP version are you using?\n\
    <|/ c |>\n<| c |>\n: I added a link to an online demo showing it working. What\
    \ PHP version are you using?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string\
    \ = 'Hello';\n$string = preg_replace('/([a-z])/e', '$1', $string);\n$string =\
    \ preg_replace('/([A-Z])/e', '$1', $string);\necho $string;", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis was the only solution that worked for me. Thanks!\n<|/ c |>\n\
    <| c |>\nThis worked for me too. Thanks!\n<|/ c |>\n<| c |>\nThis worked for me\
    \ too. Thanks!\n<|/ c |>\n<| c |>\nThis worked for me too. Thanks!\n<|/ c |>\n\
    <| c |>\nThis worked for me too. Thanks!\n<|/ c |>\n<| a |>\n<code>", "    return\
    \ strtoupper(preg_replace('/./u', '',\n        str_replace(['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'],\n\
    \        $string)));\n}\n", "    return preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n}\n", "    return strtoupper(preg_replace('/./u', '',\n   \
    \     str_replace(' ', '', ucwords(strtolower($string)))));\n}\n", "    return\
    \ strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\
    \\\"', '&' => '\\\\&', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', '(' => '\\\\\
    (', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\
    \\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\
    \\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~'));\n}", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\'')));\n}\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n\
    $string = \"Hello World!\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple capital letters in the string. For example, it would\
    \ convert \"HelloWorld\" into \"hELLOWorld\".\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if there are multiple capital letters in the string. For example, it would convert\
    \ \"HelloWorld\" into \"hELLOWorld\".\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = \"Hello World!\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"$1\"\
    )', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,string |>\n<| a |>\n<code>\n$string = \"\
    Hello World!\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"$1\")', $string);\n\
    $string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")', $string);\necho $string;\n\
    </code>\n<|/ a dscore=2 tags=php,string |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = \"Hello World!\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"$1\"\
    )', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n\
    $string = \"Hello World!\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\necho $string;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $string = \"Hello World!\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = ", "    return strtoupper(preg_replace('/./u', 'u',\
    \ strtolower($string)));\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho\
    \ $string;\n</code>\n<|/ a tags=php,string,regex |>\n<| a dscore=1 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho\
    \ $string;\n</code>\n<|/ a tags=php,string,regex |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ $string);\necho $string;\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$string\
    \ = \"Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = \"Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| a dscore=1 |>\n<code>\n$string = \"\
    Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| a dscore=1 |>\n<code>\n$string = \"\
    Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| a dscore=1 |>\n<code>\n$string = \"\
    Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| a dscore=1 |>\n<code>\n$string = \"\
    Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| a dscore=1 |>\n<code>\n$string = \"\
    Hello World\";\n$string = preg_replace('/./u', 'u', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| a tags=php,string,regex |>\n<code>\n\
    $string = \"Hello World\";\n$string = ", "    return strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' => '(', ')'\
    \ => ')', '[' => '[', ']' => ']', '{' => '{', '}' => '}'));\n}\n", "    return\
    \ strtr($string, array_flip(str_split($string)));\n}\n", "    return preg_replace('/./u',\
    \ 'u', $string);\n}\n", "    return preg_replace('/./u', 'u', strtoupper($string));\n\
    }\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(',\
    \ ')' => ')', '*' => '*', ',' => '', ')' => '', ';' => '', ':' => '', '=' => '',\
    \ '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@', '&' => '&',\
    \ '=' => '', '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@',\
    \ '&' => '&', '=' => '', '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '',\
    \ '@' => '@', '&' => '&', '=' => '', '+' => '+', '=' => '', '*' => '', '?' =>\
    \ '', '!' => '', '@' => '@', '&' => '&', '=' => '', '+' => '+', '=' => '', '*'\
    \ => '', '?' => '', '!' => '', '@' => '@', '&' => '&', '=' => '', '+' => '+',\
    \ '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@', '&' => '&', '=' => '',\
    \ '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@', '&' => '&',\
    \ '=' => '', '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@',\
    \ '&' => '&', '=' => '', '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '',\
    \ '@' => '@', '&' => '&', '=' => '', '+' => '+', '=' => '', '*' => '', '?' =>\
    \ '', '!' => '', '@' => '@', '&' => '&', '=' => '', '+' => '+', '=' => '', '*'\
    \ => '', '?' => '', '!' => '', '@' => '@', '&' => '&', '=' => '', '+' => '+',\
    \ '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@', '&' => '&', '=' => '',\
    \ '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@', '&' => '&',\
    \ '=' => '', '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '', '@' => '@',\
    \ '&' => '&', '=' => '', '+' => '+', '=' => '', '*' => '', '?' => '', '!' => '',\
    \ '@' => '@', '&' => '&', '=' => '', '+' => '+', '=' => '', '*' => '', '?' =>\
    \ '', '!' => '', '@' => '@', '&' => '&', '=' => '', '+' => '+', '=' => '', '*'\
    \ => '', '?' => '', '!' => '', '", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string,regex |>\n<code>\n\
    $string = \"Hello\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"$1\"\
    )', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")', $string);\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/e',\
    \ 'strtoupper(\"$1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"\
    $1\")', $string);\n</code>\n<|/ a tags=php,string,regex dscore=2 |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$string = \"\
    Hello\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"$1\")', $string);\n\
    $string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")', $string);\n</code>\n\
    <|/ a tags=php,string,regex |>\n<| a tags=php,string,regex |>\n<code>\n$string\
    \ = \"Hello\";\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"$1\")', $string);\n\
    $string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")', $string);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/e',\
    \ 'strtoupper(\"$1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"\
    $1\")', $string);\n</code>", "    return strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '{'\
    \ => '{', '}' => '}', '[' => '[', ']' => '[', ':' => ':', ';' => ' ;', '=' =>\
    \ '=', '&' => '&', '|' => '|', '\\\\' => '\\\\', '/' => '//'));\n}\n", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n</code>\n<|/ a tags=php,regex |>\n<| a |>\n<code>\n$string\
    \ = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/', '\\1', $string);\n\
    echo $string;\n</code>\n<|/ a dscore=2 tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/',\
    \ '\\1', $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/',\
    \ '\\1', $string);\necho $string;\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/', '\\1', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,regex dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/', '\\1', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,regex |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/', '\\1', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,regex |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/', '\\1', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/', '\\1', $string);\n\
    echo $string;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$string\
    \ = 'Hello World';\n$string = preg_replace('/\\B([A-Z])/', '\\1', $string);\n\
    echo $string;\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$string = 'Hello World';\n\
    $string = preg_replace('/\\B([A-Z])/', '\\1', $string);\necho $", "    return\
    \ strtoupper(mb_convert_case($string, MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's much more elegant than using regex. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's much more elegant than\
    \ using regex. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's much more elegant than using regex. Thanks!\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's much\
    \ more elegant than using regex. Thanks!\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's much more elegant than using regex.\
    \ Thanks!\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string = preg_replace('/\\\
    p{Ll}/u', 'u', $string);\n$string = preg_replace('/\\p{Lu}/u', 'l', $string);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's much more elegant than using regex. Thanks!\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly and it's much more\
    \ elegant than using regex. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's much more elegant than using regex. Thanks!\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ much more elegant than using regex. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's much more elegant than using\
    \ regex. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = preg_replace('/\\\
    p{Ll}/u', 'u', $string);\n$string = preg_replace('/\\p{Lu}/u', 'l', $string);\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and ", "    return preg_replace('/./u', 'u', strtolower($string));\n\
    }", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis works great for me, but I needed to add `u` after\
    \ `strtolower` like so: `return strtoupper(preg_replace('/./u', 'u', strtolower($string)));`\n\
    <|/ c |>\n<| c |>\nThis works great for me, but I needed to add `u` after `strtolower`\
    \ like so: `return strtoupper(preg_replace('/./u', 'u', strtolower($string)));`\n\
    <|/ c |>\n<| c |>\nThis works great for me, but I needed to add `u` after `strtolower`\
    \ like so: `return strtoupper(preg_replace('/./u', 'u', strtolower($string)));`\n\
    <|/ c |>\n<| c |>\nThis works great for me, but I needed to add `u` after `strtolower`\
    \ like so: `return strtoupper(preg_replace('/./u', 'u', strtolower($string)));`\n\
    <|/ c |>\n<| c |>\nThis works great for me, but I needed to add `u` after `strtolower`\
    \ like so: `return strtoupper(preg_replace('/./u', 'u', strtolower($string)));`\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$string = 'Hello World';\n$string = preg_replace('/./u',\
    \ 'u', $string);\necho $string;", "    return preg_replace('/./u', 'u', $string);\n\
    }", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'\\\
    '', '\"' => '\\\"\\\"', '&' => '&amp;', '<' => '&lt;', '>' => '&gt;'));\n}\n",
  "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(strtr($string,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n</code>\n<|/\
    \ a tags=php,regex |>\n<| c |>\nThis doesn't work for all cases. `'Hello'` becomes\
    \ `'hELLO'`, but `'hello'` becomes `'hELLO'`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ `'hello'` becomes `'hELLO'`, but `'Hello'` becomes `'hELLO'`.\n<|/ c |>\n<|\
    \ c |>\nYes, it does. `'hello'` becomes `'hELLO'`, but `'Hello'` becomes `'hELLO'`.\n\
    <|/ c |>\n<| c |>\nYes, it does. `'hello'` becomes `'hELLO'`, but `'Hello'` becomes\
    \ `'hELLO'`.\n<|/ c |>\n<| c |>\nYes, it does. `'hello'` becomes `'hELLO'`, but\
    \ `'Hello'` becomes `'hELLO'`.\n<|/ c |>\n<| a tags=php,regex |>\nThis should\
    \ work:\n<code>\n$string = 'Hello';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for all cases. `'Hello'`\
    \ becomes `'hELLO'`, but `'hello'` becomes `'hELLO'`.\n<|/ c |>\n<| c |>\nYes,\
    \ it does. `'hello'` becomes `'hELLO'`, but `'Hello'` becomes `'hELLO'`.\n<|/\
    \ c |>\n<| c |>\nYes, it does. `'hello'` becomes `'hELLO'`, but `'Hello'` becomes\
    \ `'hELLO'`.\n<|/ c |>\n<| c |>\nYes, it does. `'hello'` becomes `'hELLO'`, but\
    \ `'Hello'` becomes `'hELLO'`.\n<|/ c |>\n<| c |>\nYes, it does. `'hello'` becomes\
    \ `'hELLO'`, but `'Hello'` becomes `'hEL", "    return preg_replace('/./u', 'u',\
    \ strtoupper($string));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'')));\n}", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a tags=php,string,case-folding |>\n\
    <| c |>\nThis doesn't work for all languages. For example, in German \"\xDF\"\
    \ becomes \"SS\". Not sure if this is an issue for OP.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for all languages. For example, in German \"\xDF\" becomes \"SS\"\
    . Not sure if this is an issue for OP.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ all languages. For example, in German \"\xDF\" becomes \"SS\". Not sure if this\
    \ is an issue for OP.\n<|/ c |>\n<| a tags=php,string,case-folding |>\nI used\
    \ the answer from and added a little bit of error checking to it, so it can handle\
    \ non-ascii characters. \n<code>", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\\
    ' => '\\\\\\\\')));\n}\n", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for all cases, for example `'\xC9\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\
    \xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\
    \xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\
    \xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\
    \xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\
    \xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\
    \xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\
    \xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\
    \xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\
    \xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\
    \xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\
    \xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\xCC\xD2\xD9\xC7\xCD\xD3\xDA\xC0\xC8\
    \xCC\xD2\uFFFD", "    return preg_replace('/./u', 'u', strtoupper($string));\n\
    }\n", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    ''))\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n</code>\n<|/ a tags=php,string,replace |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = 'Hello';\n$string = str_replace('l','O',$string);\n\
    $string = str_replace('H','e',$string);\necho $string;", "    return strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\\
    ' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '{' => '{', '}'\
    \ => '}', '[' => '[', ']' => ']', '^' => '^', '~' => '~'));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'))\n    ));\n}\n", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\"' => '???', '\\\
    '' => '????', '(' => '????(', '{' => '????{', '}' => '????}', '[' => '????[',\
    \ ']' => '????]', '*' => '????*', '+' => '????+', '-' => '????-', '/' => '????/',\
    \ '\\\\' => '????\\\\', ':' => '????:', ';' => '????;', ':' => '????:', '?' =>\
    \ '?????', '!' => '????!', '?' => '?????', '\"' => '?????\"', '\\'' => '?????\\\
    '', '(' => '?????(', '{' => '?????{', '}' => '?????}', '[' => '?????[', ']' =>\
    \ '?????]', '*' => '?????*', '+' => '?????+', '-' => '?????-', '/' => '?????/',\
    \ '\\\\' => '?????\\\\', ':' => '?????:', ';' => '?????:', '?' => '?????', '!'\
    \ => '????!', '?' => '?????', '\"' => '?????\"', '\\'' => '?????\\'', '(' => '?????(',\
    \ '{' => '?????{', '}' => '?????}', '[' => '?????[', ']' => '?????]', '*' => '?????*',\
    \ '+' => '?????+', '-' => '?????-', '/' => '?????/', '\\\\' => '?????\\\\', ':'\
    \ => '?????:', ';' => '?????:', '?' => '?????', '!' => '????!', '?' => '?????',\
    \ '\"' => '?????\"', '\\'' => '?????\\'', '(' => '?????(', '{' => '?????{', '}'\
    \ => '?????}', '[' => '?????[', ']' => '?????]', '*' => '?????*', '+' => '?????+',\
    \ '-' => '?????-', '/' => '?????/', '\\\\' => '?????\\\\', ':' => '?????:', ';'\
    \ => '?????:', '?' => '?????', '!' => '????!', '?' => '?????', '\"' => '?????\"\
    ', '\\'' => '?????\\'', '(' => '?????(', '{' => '?????{', '}' => '?????}', '['\
    \ => '?????[', ']' => '?????]', '*' => '?????*", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c\
    \ |>\nThis doesn't work for `'\xC0\xC1\xC2\xC3\xC4\xC5\xC7\xC8\xC9\xCA\xCB\xCC\
    \xCD\xCE\xCF\xD2\xD3\xD4\xD5\xD6\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\
    \xE5\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF2\xF3\xF4\xF5\xF6\xF9\xFA\xFB\xFC\
    \xFD\xFE\xFF'` which should be `'AAAAAACEEEEIIIIDNOOOOOOUUUUYSSS'`\n<|/ c |>\n\
    <| c |>\nI added a solution that works for that case too.\n<|/ c |>\n<| c |>\n\
    This doesn't work for `'\xC0\xC1\xC2\xC3\xC4\xC5\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\
    \xCF\xD2\xD3\xD4\xD5\xD6\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE7\
    \xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF2\xF3\xF4\xF5\xF6\xF9\xFA\xFB\xFC\xFD\xFE\
    \xFF'` which should be `'AAAAAACEEEEIIIIDNOOOOOOUUUUYSSS'`\n<|/ c |>\n<| c |>\n\
    I added a solution that works for that case too.\n<|/ c |>\n<| a |>\n<code>\n\
    $string = '\xC0\xC1\xC2\xC3\xC4\xC5\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD2\xD3\
    \xD4\xD5\xD6\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE7\xE8\xE9\xEA\
    \xEB\xEC\xED\xEE\xEF\xF0\xF2\xF3\xF4\xF5\xF6\xF9\xFA\xFB\xFC\xFD\xFE\xFF';\n$string\
    \ = preg_replace('/[\xC0\xC1\xC2\xC3\xC4\xC5\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\
    \xD2\xD3\xD4\xD5\xD6\xD9\xDA\xDB\xDC\xDD\uFFFD", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$string = preg_replace('/\\p{Ll}/u', 'u', $string);\n$string = preg_replace('/\\\
    P{Ll}/u', '', $string);\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = preg_replace('/\\p{Ll}/u', 'u', $string);\n$string = preg_replace('/\\\
    P{Ll}/u', '', $string);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| a tags=php", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\')));\n}\n", "    return strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' =>\
    \ '(', ')' => ')', '[' => '[', ']' => ']', '{' => '{', '}' => '}'));\n}\n", " \
    \   return preg_replace('/./u', 'u', $string);\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return preg_replace('/./u', 'u', strtoupper($string));\n\
    }\n", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '[' => '[', ']' => ']'));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"\
    ' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\
    \\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n\
    }\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', \"\
    \\n\" => '\\\\n', '\\r' => '\\\\r', \"\\t\" => '\\\\t')));\n}\n", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' =>\
    \ '&&', '\\'' => '\\'\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')'\
    \ => '', ';' => '', ':' => '', '=' => '', '[' => '[', ']' => ']', '{' => '{',\
    \ '}' => '', '|' => '|', '~' => '~', '^' => '^', '\\\\' => '\\\\', '/' => '//'));\n\
    }\n", "    return strtr($string, array_flip(array('!', '@', '#', '$', '%', '^',\
    \ '&', '*', '(', ')', '-', '+', '=', '{', '}', '[', ']', '|', '~', '`', ';', ':',\
    \ '\\'', '\"', '?'));\n}", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return preg_replace('/([a-z])/',\
    \ '$U$1$1', $string);\n}\n", "    return strtoupper(preg_replace('/./u', 'u',\
    \ $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\\
    (', '*' => '\\\\*', ')' => '\\\\)', ';' => '\\\\;', ':' => '\\\\:', '=' => '\\\
    \\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '\\\\' => '\\\\\\\\')));\n\
    }", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(',\
    \ ')' => ')', '*' => '*', ',' => '', ')' => '', ':' => '', ';' => '', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '',\
    \ '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+'\
    \ => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++',\
    \ '=' => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '+' => '++', '='\
    \ => '', '+' => '++', '=' => '', '+' => '++', '=' => '', '", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        $string)));\n}\n", "    return strtr(strtolower($string),\
    \ array('!' => '!', '?' => '?'));\n}", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}\n", "    return preg_replace('/./u', 'u', strtoupper($string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\\\\\'', '('\
    \ => '\\\\(', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,',\
    \ '-' => '\\\\-', '.' => '\\\\.', ':' => '\\\\:', ';' => '\\\\;', '<' => '\\\\\
    <', '=' => '\\\\=', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '[' => '\\\\[', ']' => '\\\\]', '{' => '\\\\{', '}' => '\\\
    \\}', '~' => '\\\\~'));\n}\n", "    return strtoupper(preg_replace('/./u', 'u',\
    \ $string));\n}\n</code>\n<|/ a tags=php,string,replace |>\n<| c |>\nThis doesn't\
    \ work for me in PHP 5.3.10. `strtoupper` doesn't seem to recognize `u` as a modifier.\n\
    <|/ c |>\n<| c |>\n- `u` was introduced in PHP 5.4.0, so if you're using an older\
    \ version of PHP, you won't be able to use it.\n<|/ c |>\n<| c |>\n- I added a\
    \ solution that works in PHP 5.3.10\n<|/ c |>\n<| c |>\n- I added a solution that\
    \ works in PHP 5.3.10\n<|/ c |>\n<| c |>\n- I added a solution that works in PHP\
    \ 5.3.10\n<|/ c |>\n<| a dscore=5 tags=php,string,replace |>\n<code>\n$string\
    \ = str_replace(' ', '', $string);\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if you have multiple spaces.\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ multiple spaces.\n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple\
    \ spaces.\n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple spaces.\n<|/ c |>\n\
    <| a tags=php,string,replace |>\n<code>\n$string = str_replace(' ', '', $string);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have multiple spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple spaces.\n<|/ c |>\n\
    <| a tags=php,string,replace |>\n<code>\n$string = str_replace(' ', '', $string);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have multiple spaces.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$string = str_replace(' ', '', $string);\n\
    </code>\n<|/ a tags=php,string,replace |>\n<| a tags=php,string,replace |>\n<code>\n\
    $string = str_replace(' ', '', $string);\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't work if you have multiple spaces.\n<|/ c |>\n<| a tags=php,string,replace\
    \ |>\n<code>\n", "    return strtoupper(strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\\
    '', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' =>\
    \ '', ')' => '', ')' => '', ')' => '', ')", "    return strtr($string, array('!'\
    \ => '!!', '?' => '??', '\"' => '???', '\\'' => '????', '(' => '????', ')' =>\
    \ '????', ':' => '????', ';' => '????', '=' => '????', '&' => '????', '*' => '????',\
    \ '/' => '????', '+' => '????', '-' => '????', '.' => '????', '/' => '????', '+'\
    \ => '????', '-' => '????', '.' => '????', '/' => '????', '+' => '????', '-' =>\
    \ '????', '.' => '????', '/' => '????', '+' => '????', '-' => '????', '.' => '????',\
    \ '/' => '????', '+' => '????', '-' => '????', '.' => '????', '/' => '????', '+'\
    \ => '????', '-' => '????', '.' => '????', '/' => '????', '+' => '????', '-' =>\
    \ '????', '.' => '????', '/' => '????', '+' => '????', '-' => '????', '.' => '????',\
    \ '/' => '????', '+' => '????', '-' => '????', '.' => '????', '/' => '????', '+'\
    \ => '????', '-' => '????', '.' => '????', '/' => '????', '+' => '????', '-' =>\
    \ '????', '.' => '????', '/' => '????', '+' => '????', '-' => '????', '.' => '????',\
    \ '/' => '????', '+' => '????', '-' => '????', '.' => '????', '/' => '????', '+'\
    \ => '????', '-' => '????', '.' => '????', '/' => '????', '+' => '????', '-' =>\
    \ '????', '.' => '????', '/' => '????', '+' => '????', '-' => '????', '.' => '????',\
    \ '/' => '????', '+' => '????', '-' => '????', '.' => '????', '/' => '????', '+'\
    \ => '????', '-' => '????', '.' => '????', '/' => '????', '+' => '????', '-' =>\
    \ '????', '.' => '????', '/' => '????', '+' => '????', '-' => '????', '.' => '????',\
    \ '/' => '????', '+' => '????', '-' => '????', '.' => '????', '/' => '????', '+'\
    \ => '????', '-' => '????', '.' => '????', '/' => '????', '+' => '????', '-' =>\
    \ '????', '.' => '????', '/' => '????', '+' => '????', '-' => '????', '.' => '????',\
    \ '/' => '????', '+' => '????', '-' => '????', '.' => '????', '/' => '????', '+'\
    \ => '????', '-' => '????', '.' => '????', '/' => '????', '+' => '????', '-' =>\
    \ '????', '.' => '????', '/' => '????', '+' => '????', '-' => '????', '.' => '????',\
    \ '/' => '????', '+' => '", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return preg_replace('/./u',\
    \ 'u', $string);\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\
    \\(', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\
    \\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\
    \\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\", "    return\
    \ strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\
    \"\\\"', '(' => '(', ')' => ')', '[' => '[', ']' => ']'));\n}\n</code>\n<|/ a\
    \ tags=php,string,regex |>\n<| c |>\nThanks for your answer, but this doesn't\
    \ work. I've tried it and it doesn't work. I've also tried it on http://writecodeonline.com/php/\
    \ and it doesn't work. I've also tried it on http://phpfiddle.org/ and it doesn't\
    \ work. I've also tried it on http://regex101.com/ and it doesn't work. I've also\
    \ tried it on http://regexr.com/ and it doesn't work. I've also tried it on http://regexpal.com/\
    \ and it doesn't work. I've also tried it on http://phptester.net/ and it doesn't\
    \ work. I've also tried it on http://phpfiddle.org/ and it doesn't work. I've\
    \ also tried it on http://writecodeonline.com/php/ and it doesn't work. I've also\
    \ tried it on http://regex101.com/ and it doesn't work. I've also tried it on\
    \ http://regexr.com/ and it doesn't work. I've also tried it on http://regexpal.com/\
    \ and it doesn't work. I've also tried it on http://phptester.net/ and it doesn't\
    \ work. I've also tried it on http://phpfiddle.org/ and it doesn't work. I've\
    \ also tried it on http://writecodeonline.com/php/ and it doesn't work. I've also\
    \ tried it on http://regex101.com/ and it doesn't work. I've also tried it on\
    \ http://regexr.com/ and it doesn't work. I've also tried it on http://regexpal.com/\
    \ and it doesn't work. I've also tried it on http://phptester.net/ and it doesn't\
    \ work. I've also tried it on http://phpfiddle.org/ and it doesn't work. I've\
    \ also tried it on http://writecodeonline.com/php/ and it doesn't work. I've also\
    \ tried it on http://regex101.com/ and it doesn't work. I've also tried it on\
    \ http://regexr.com/ and it doesn't work. I've also tried it on http://regexpal.com/\
    \ and it doesn't work. I've also tried it on http://phptester.net/ and it doesn't\
    \ work. I've also tried it on http://phpfiddle.org/ and it doesn't work. I've\
    \ also tried it on http://writecodeonline.com/php/ and it doesn't work. I've also\
    \ tried it on http://regex101.com/ and it doesn't work. I've also tried it on\
    \ http://regexr.com/ and it doesn't work. I've also tried it on http://regexpal.com/\
    \ and it doesn't work. I've also tried it on http://php", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return preg_replace('/./u',\
    \ 'u', $string);\n}", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' =>\
    \ '(', ')' => ')', '*' => '*', ',' => '', ')' => '(', ')' => '(', '(' => '(')));\n\
    }\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(',\
    \ ')' => ')', '*' => '***', '+' => '++', ',' => '+++', '-' => '--', '.' => '..',\
    \ '/' => '//', ':' => '::', ';' => ';:', '=' => '==', '>' => '>>', '<' => '<<',\
    \ '|' => '||', '~' => '~', '^' => '^~', '?' => '??', '!' => '!!', '?' => '??',\
    \ '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' =>\
    \ '(', ')' => ')', '*' => '***', '+' => '++', ',' => '+++', '-' => '--', '.' =>\
    \ '..', '/' => '//', ':' => '::', ';' => ';:', '=' => '==', '>' => '>>', '<' =>\
    \ '<<', '|' => '||', '~' => '~', '^' => '^~', '?' => '??', '!' => '!!', '?' =>\
    \ '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'',\
    \ '(' => '(', ')' => ')', '*' => '***', '+' => '++', ',' => '+++', '-' => '--',\
    \ '.' => '..', '/' => '//', ':' => '::', ';' => ';:', '=' => '==', '>' => '>>',\
    \ '<' => '<<', '|' => '||', '~' => '~', '^' => '^~', '?' => '??', '!' => '!!',\
    \ '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\\
    '\\'', '(' => '(', ')' => ')', '*' => '***', '+' => '++', ',' => '+++', '-' =>\
    \ '--', '.' => '..', '/' => '//', ':' => '::', ';' => ';:', '=' => '==', '>' =>\
    \ '>>', '<' => '<<', '|' => '||', '~' => '~', '^' => '^~', '?' => '??', '!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\''\
    \ => '\\'\\'', '(' => '(', ')' => ')', '*' => '***', '+' => '++', ',' => '+++',\
    \ '-' => '--', '.' => '..', '/' => '//', ':' => '::', ';' => ';:', '=' => '==',\
    \ '>' => '>>', '<' => '<<', '|' => '||', '~' => '~', '^' => '^~', '?' => '??',\
    \ '!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&',\
    \ '\\'' => '\\'\\'', '(' => '(', ')", "    return strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '(' => '\\\\(', ')'\
    \ => '\\\\)', '*' => '\\\\*', ',' => '\\\\,', ';' => '\\\\;', ':' => '\\\\:',\
    \ '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '&' => '\\\\&', '|' => '\\\\\
    |', '\\\\' => '\\\\\\\\'));\n}", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\
    \\\\')));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }", "    return preg_replace('/([a-z])/i', '\\U$1\\E', $string);\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtoupper(preg_replace('/./u', '',\n     \
    \   str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n}\n", " \
    \   return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Hello\
    \ World\";\n$string = preg_replace('/([a-z])/', '\\U$1', $string);\necho $string;",
  "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\', \"\
    '\" => \"\\'\\'\", \"'\" => \"\\'\\'\", \"<\" => \"&lt;\", \">\" => \"&gt;\")));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n}\n</code>\n<|/ a tags=php,string,regex\
    \ |>\n<| a dscore=2 |>\n<code>\n$string = 'Hello';\n$string = preg_replace('/./u',\
    \ '',\n    str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n    $string));\n</code>\n\
    <|/ a tags=php,string,regex |>\n<| a |>\n<code>\n$string = 'Hello';\n$string =\
    \ preg_replace('/./u', '',\n    str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n\
    \    $string));\n</code>\n<|/ a tags=php,string,regex dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$string = 'Hello';\n$string = preg_replace('/./u', '',\n    str_replace(['A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n    ['a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z'],\n    $string));\n</code>\n<|/ a tags=php,string,regex\
    \ |>\n<| a tags=php,string,regex |>\n<code>\n$string = 'Hello';\n$string = preg_replace('/",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '')));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work for `'Hello'`,\
    \ which should return `'hELLO'`.\n<|/ c |>\n<| c |>\n: Yes, it does. `preg_replace`\
    \ replaces all occurrences of `.` with `u`.\n<|/ c |>\n<| c |>\n: It does, but\
    \ only because you used `/./u` instead of `/./`. `/./u` means \"any character\"\
    , and `/./` means \"any character (except newlines)\". Since `'Hello'` contains\
    \ no newlines, `/./u` doesn't match anything.\n<|/ c |>\n<| c |>\n: Ah, I see\
    \ what you mean. Yes, I see what you mean. `/./u` means \"any character (except\
    \ newlines)\", but `/./` means \"any character (except newlines)\". Since `'Hello'`\
    \ contains no newlines, `/./u` doesn't match anything.\n<|/ c |>\n<| c |>\n: Yes,\
    \ I see what you mean. `/./u` means \"any character (except newlines)\", but `/./`\
    \ means \"any character (except newlines)\". Since `'Hello'` contains no newlines,\
    \ `/./u` doesn't match anything.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string\
    \ = 'Hello';\n$string = preg_replace('/./u', 'u', $string);\n</code>\n<|/ a tags=php,string,regex\
    \ |>\n<| c |>\nThis doesn't work for `'Hello'`, which should return `'hELLO'`.\n\
    <|/ c |>\n<| c |>\n: It does. `preg_replace` replaces all occurrences of `.` with\
    \ `u`.\n<|/ c |>\n<| c |>\n: It does, but only because you used `/./u` instead\
    \ of `/./`. `/./u` means \"any character\", and `/./` means \"any character (except\
    \ newlines)\". Since `'Hello'` contains no newlines, `/./u` doesn't match anything.\n\
    <|/ c |>\n<| c |>\n: Yes, I see what you mean. `/./u` means \"any character (except\
    \ newlines)\", but `/./` means \"any ", "    return preg_replace('/./u', 'u',\
    \ strtoupper($string));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work for all languages. For example, in Turkish, `\xC7` becomes `\xC4` but `\xC7\
    ` becomes `\xC3`. So this doesn't work for Turkish.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for all languages. For example, in Turkish, `\xC7` becomes `\xC4` but `\xC7\
    ` becomes `\xC3`. So this doesn't work for Turkish.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for all languages. For example, in Turkish, `\xC7` becomes `\xC4` but `\xC7\
    ` becomes `\xC3`. So this doesn't work for Turkish.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for all languages. For example, in Turkish, `\xC7` becomes `\xC4` but `\xC7\
    ` becomes `\xC3`. So this doesn't work for Turkish.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for all languages. For example, in Turkish, `\xC7` becomes `\xC4` but `\xC7\
    ` becomes `\xC3`. So this doesn't work for Turkish.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = preg_replace('/\\p{L}+/u', '', $string);\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work for all languages. For example, in\
    \ Turkish, `\xC7` becomes `\xC4` but `\xC7` becomes `\xC3`. So this doesn't work\
    \ for Turkish.\n<|/ c |>\n<| c |>\nThis doesn't work for all languages. For example,\
    \ in Turkish, `\xC7` becomes `\xC4` but `\xC7` becomes `\xC3`. So this doesn't\
    \ work for Turkish.\n<|/ c |>\n<| c |>\nThis doesn't work for all languages. For\
    \ example, in Turkish, `\xC7` becomes `\xC4` but `\xC7` becomes `\xC3`. So this\
    \ doesn't work for Turkish.\n<|/ c |>\n<| c |>\nThis doesn't work for all languages.\
    \ For example, in Turkish, `\xC7` becomes `\xC4` but `\xC7` becomes `\xC3`. So\
    \ this doesn't work for Turkish.\n<|/ c |>\n<| c ", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' =>\
    \ '&amp;', '<' => '&lt;', '>' => '&gt;')));\n}", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis\
    \ doesn't seem to work. `mb_convert_case` doesn't seem to support `UTF-8` encoding.\
    \ `mb_convert_case` returns `null` when `UTF-8` encoding is given.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.10 and it worked fine. Maybe you have a different\
    \ PHP version? What does `mb_detect_encoding($string)` return?\n<|/ c |>\n<| c\
    \ |>\nIt returns `UTF-8`. But `mb_convert_case` returns `null` when `UTF-8` encoding\
    \ is given.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it worked fine.\
    \ Maybe you have a different PHP version? What does `mb_detect_encoding($string)`\
    \ return?\n<|/ c |>\n<| c |>\nIt returns `UTF-8`. But `mb_convert_case` returns\
    \ `null` when `UTF-8` encoding is given.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    $string = preg_replace('/\\p{Ll}/u', '\\U$0', $string);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't seem to work. `preg_replace` doesn't seem to support\
    \ `UTF-8` encoding. `preg_replace` returns `null` when `UTF-8` encoding is given.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `preg_replace` doesn't seem to support\
    \ `UTF-8` encoding. `preg_replace` returns `null` when `UTF-8` encoding is given.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `preg_replace` doesn't seem to support\
    \ `UTF-8` encoding. `preg_replace` returns `null` when `UTF-8` encoding is given.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `preg_replace` doesn't seem to support\
    \ `UTF-8` encoding. `preg_replace` returns `null` when `UTF-8` encoding is given.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `preg_replace` doesn't seem to support\
    \ `UTF-8` encoding. `preg_replace` returns `null` when `UTF-8` encoding is given.\n\
    <|/ c |>\n<| a tags=php,regex |>\n", "    return preg_replace('/./u', 'u', strtolower($string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"\
    ' => '\\\"\\\"', '(' => '(', ')' => ')', '[' => '[', ']' => ']', '{' => '{', '}'\
    \ => '}'));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '\\U$1', $string));\n\
    }\n", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '{' => '{', '}' => '}', '['\
    \ => '[', ']' => '[', '\\\\' => '\\\\\\\\', '|' => '|', '^' => '^', '~' => '~'));\n\
    }", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return\
    \ strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\
    \\\"', '(' => '\\\\(', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ',' =>\
    \ '\\\\,', '-' => '\\\\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:', ';'\
    \ => '\\\\;', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '&' => '\\\\&',\
    \ '|' => '\\\\|', '~' => '\\\\~'));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&',\
    \ '\\'' => '\\\\\\'', '(' => '\\\\(', '*' => '\\\\*', ')' => '\\\\)', '+' => '\\\
    \\+', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\
    \\:', ';' => '\\\\;', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '@' => '\\\
    \\@', '[' => '\\\\[', '\\\\' => '\\\\\\\\', ']' => '\\\\]', '^' => '\\\\^', '~'\
    \ => '\\\\~', '|' => '\\\\|', '`' => '\\\\`', '{' => '\\\\{', '}' => '\\\\}'));\n\
    }\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\
    }", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        $string)));\n}\n", "    return preg_replace('/./u',\
    \ 'u', strtoupper($string));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\\
    '\\'', '(' => '(', ')' => ')', '{' => '{', '}' => '}', '[' => '[', ']' => ']'));\n\
    }\n", "    return preg_replace('/./u', 'u', $string);\n}\n", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '(' => '(', ')' => ')', '[' => '[', ']'\
    \ => ']', '{' => '{', '}' => '}'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace('l','I',\n        str_replace('I','l',$string))));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n}\n", "    return strtr(strtolower($string),\
    \ array('!' => '!', '?' => '?'));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' =>\
    \ '\\\\&', '\\'\\'' => '\\\\\\'\\'', '\"\\'' => '\\\\\"\\'', '\\'\"' => '\\\\\\\
    '\"', '\"\\'\\'' => '\\\\\"\\'\\'', '\\'\\'\\'' => '\\\\\\'\\'\\'', '\\'\\'\"\
    ' => '\\\\\\'\\'\"', '\\'\"\\'' => '\\\\\\'\"\\'', '\\'\"\\'\\'' => '\\\\\\'\"\
    \\'\\'', '\\'\"\\'\"' => '\\\\\\'\"\\'\"', '\\'\"\\'\\'\\'' => '\\\\\\'\"\\'\\\
    '\\'', '\\'\"\\'\"\\'' => '\\\\\\'\"\\'\"\\'', '\\'\"\\'\"\\'\\'' => '\\\\\\'\"\
    \\'\"\\'\\'', '\\'\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\\'', '\\'\"\\'\"\\'\"'\
    \ => '\\\\\\'\"\\'\"\\'\"', '\\'\"\\'\"\\'\"\\'' => '\\\\\\'\"\\'\"\\'\"\\'',\
    \ '\\'\"\\'\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\\'', '\\'\"\\'\"\\'\"\\'\\\
    '' => '\\\\\\'\"\\'\"\\'\"\\'\\'', '\\'\"\\'\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\\
    '\"\\'\\'', '\\'\"\\'\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\\'', '\\'\"\\'\"\
    \\'\"\\'\"' => '\\\\\\'\"\\'\"\\'\"\\'\"', '\\'\"\\'\"\\'\"\\'\"\\'' => '\\\\\\\
    '\"\\'\"\\'\"\\'\"\\'', '\\'\"\\'\"\\'\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\\
    '\"\\'\\'', '\\'\"\\'\"\\'\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\"\\'\\'',\
    \ '\\'\"\\'\"\\'\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\"\\'\\'', '\\'\"\\'\"\
    \\'\"\\'\"\\'\"\\'' => '\\\\\\'\"\\'\"\\'\"\\'\"\\'\"\\'', '\\'\"\\'\"\\'\"\\\
    '\"\\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\"\\'\"\\'\\'', '\\'\"\\'\"\\'\"\\'\"\
    \\'\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\"\\'\"\\'\\'', '\\'\"\\'\"\\'\"\\'\"\\\
    '\"\\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\"\\'\"\\'\\'', '\\'\"\\'\"\\'\"\\'\"\\'\"\
    \\'\\'' => '\\\\\\'\"\\'\"\\'\"\\'\"", "    return strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '(' => '\\\\(', ')'\
    \ => '\\\\)', '*' => '\\\\*', '+' =>\n        '\\\\+', '&' => '\\\\&', '=' =>\
    \ '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '\\\\' => '\\\\\\\\\
    '));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtr($string, array('a'=>'A', 'b'=>'B',\
    \ 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J',\
    \ 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R',\
    \ 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtr($string, array_flip(str_split($string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\n\
    \        'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\n\
    \        'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\n\
    \        't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z',\n\
    \        'A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g',\n\
    \        'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n',\n\
    \        'O'=>'o', 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u',\n\
    \        'V'=>'v', 'W'=>'w', 'X'=>'x', 'Y'=>'y', 'Z'=>'z')));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\''))\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
