name: HumanEval_19_sort_numbers
language: php
prompt: "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
  \ sort_numbers($numbers) {\n"
tests: "function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
  \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
  \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\");\
  \ }\n}\n\ntest();"
completions: ["  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like this solution,\
    \ it's very elegant and simple. Thanks!\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ I've tried it and it works fine, but I still don't understand why my code doesn't\
    \ work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nThe code you posted\
    \ doesn't work because you didn't use the `sort_numbers` function in your code.\
    \ I've added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your\
    \ explanation. Now I understand why my code doesn't work. Thanks again.\n<|/ c\
    \ |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"\
    , \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\"\
    , \"eighteen\", \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\n\
    sort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\"\
    \ \", $numbers);\necho $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting dscore=2 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I've tried it and it works fine. But, I'm\
    \ still wondering if there is a way to do it without using any functions.\n<|/\
    \ c |>\n<| c |>\nI added a solution without using any functions. I hope it helps.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_values($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\nprint_r($numbers);", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like your solution, but I feel\
    \ like it would be more efficient to just use an associative array and sort it\
    \ that way. Just my opinion though.\n<|/ c |>\n<| c |>\nI agree with you, that's\
    \ why I added the comment \"// Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\" in the code above. :)\n<|/ c |>\n<| c |>\nI agree with\
    \ you, that's why I added the comment \"// Input is a space-delimited string of\
    \ numberals from 'zero' to 'nine'.\" in the code above. :)\n<|/ c |>\n<| c |>\n\
    I agree with you, that's why I added the comment \"// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\" in the code above. :)\n<|/ c |>\n\
    <| c |>\nI agree with you, that's why I added the comment \"// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\" in the code above. :)\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\nsort($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about sorting a space-delimited\
    \ string of numbers, not an array.\n<|/ c |>\n<| c |>\nThis answer doesn't answer\
    \ the question, which is about sorting a space-delimited string of numbers, not\
    \ an array.\n<|/ c |>\n<| c |>\nThis answer doesn't answer the question, which\
    \ is about sorting a space-delimited string of numbers, not an array.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't answer the question, which is about sorting a space-delimited\
    \ string of numbers, not an array.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    sort($numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about sorting a ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=sorting,php |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_fli", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers('one two three')` returns `'one two three'`\n<|/\
    \ c |>\n<| c |>\nI tested it and it worked for me. Did you copy and paste it exactly?\
    \ I used `print_r($numbers)` instead of `echo` to display the results.\n<|/ c\
    \ |>\n<| c |>\nYes, I copied it exactly. I'm using PHP 5.3.10. Maybe it's an issue\
    \ with my PHP installation?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and\
    \ it worked for me. Are you sure you copied and pasted the code correctly? I used\
    \ `print_r($numbers)` instead of `echo` to display the results.\n<|/ c |>\n<|\
    \ c |>\nYes, I copied it exactly. I'm using PHP 5.3.10. Maybe it's an issue with\
    \ my PHP installation?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `sort_numbers('three one\
    \ five')` returns `'one three five'`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the function to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the function to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the function to the answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip(", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the numbers are in any order\
    \ other than ascending.\n<|/ c |>\n<| c |>\n: It does work, just not in the way\
    \ you think it does. `sort_numbers('three one five')` returns `'one three five'`.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to reflect that.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  $numbers = explode(' ', $numbers);\n \
    \ sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nI like your solution, but I prefer to use `array_map` instead of\
    \ `array_walk`.\n<|/ c |>\n<| c |>\n: I agree, `array_map` is more concise. I've\
    \ edited my answer to include it.\n<|/ c |>\n<| c |>\n: I added a version using\
    \ `array_map` which also sorts the array in place.\n<|/ c |>\n<| c |>\n: I added\
    \ a version using `array_map` which also sorts the array in place.\n<|/ c |>\n\
    <| c |>\n: I added a version using `array_map` which also sorts the array in place.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nI like your solution, but I prefer\
    \ to use `array_map` instead of `array_walk`.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nI like your solution, but I prefer to use `array_map` instead of\
    \ `array_walk`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('zero', 'one", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, -1);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to sort a string, not an array.\n<|/ c |>\n<|\
    \ c |>\n: I believe he wants to sort a space-delimited string of numbers, not\
    \ an array.\n<|/ c |>\n<| c |>\n: I believe he wants to sort a space-delimited\
    \ string of numbers, not an array.\n<|/ c |>\n<| c |>\n: I believe he wants to\
    \ sort a space-delimited string of numbers, not an array.\n<|/ c |>\n<| c |>\n\
    : I believe he wants to sort a space-delimited string of numbers, not an array.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$string = 'three one five';\n\
    $array = explode(' ', $string);\nsort($array);\n$string = implode(' ', $array);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$string =\
    \ 'three one five';\n$array = explode(' ', $string);\nsort($array);\n$string =\
    \ implode(' ', $array);\n</code>\n<|/ a dscore=4 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$string = 'three one five';\n$array = explode(' ', $string);\nsort($array);\n\
    $string = implode(' ', $array);\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n\
    <code>\n$string = 'three one five';\n$array = explode(' ', $string);\nsort($array);\n\
    $string = implode(' ', $array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<|\
    \ a dscore=3 |>\n<code>\n$string = 'three one five';\n$array = explode(' ', $string);\n\
    sort($array);\n$string = implode(' ', $array);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$string = 'three one five';\n$array\
    \ = explode(' ', $string);\nsort($array);\n$string = implode(' ', $array);\n",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = explode(' ',\
    \ $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=1 |>\n<| a dscore=", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| a tags=php,sorting\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I prefer to use `preg_replace` instead of `explode` and `implode`\n<|/ c\
    \ |>\n<| c |>\nI agree with you, `preg_replace` is more elegant and probably faster.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I prefer to use `preg_replace` instead\
    \ of `explode` and `implode`\n<|/ c |>\n<| c |>\nI like your solution, but I prefer\
    \ to use `preg_replace` instead of `explode` and `implode`\n<|/ c |>\n<| c |>\n\
    I like your solution, but I prefer to use `preg_replace` instead of `explode`\
    \ and `implode`\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 0, 5);\n",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I feel like it could be improved\
    \ by using an associative array instead of an indexed one. Something like `$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');` then `return implode(' ', array_intersect_key($numbers, array_flip($numbers)));`\n\
    <|/ c |>\n<| c |>\nI like your solution, but I feel like it could be improved\
    \ by using an associative array instead of an indexed one. Something like `$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');` then `return implode(' ', array_intersect_key($numbers, array_flip($numbers)));`\n\
    <|/ c |>\n<| c |>\nI like your solution, but I feel like it could be improved\
    \ by using an associative array instead of an indexed one. Something like `$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');` then `return implode(' ', array_intersect_key($numbers, array_flip($numbers)));`\n\
    <|/ c |>\n<| c |>\nI like your solution, but I feel like it could be improved\
    \ by using an associative array instead of an indexed one. Something like `$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');` then `return implode(' ', array_intersect_key($numbers, array_flip($numbers)));`\n\
    <|/ c |>\n<| c |>\nI like your solution, but I feel like it could be improved\
    \ by using an associative array instead of an indexed one. Something like `$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');` then `return implode(' ', array_intersect_key($numbers, array_flip($numbers)));`\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', '", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = 'one two three four five six seven eight nine';\n\
    $array = explode(' ', $string);\nsort($array);\n$string = implode(' ', $array);\n\
    echo $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"\
    , \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\"\
    , \"eighteen\", \"nineteen\");\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 10);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_slice($numbers, 10);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 10);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_slice($numbers, 10);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 10);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_slice($numbers, 10);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 10);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_slice(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\necho implode(' ',\
    \ $numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like\
    \ this solution, although it does require a lot of extra code (for me). Thanks!\n\
    <|/ c |>\n<| c |>\nI like it, but I find it a bit too complicated for my tastes.\
    \ I like it because it's simple, easy to understand, and easy to maintain.\n<|/\
    \ c |>\n<| c |>\nI agree with you. Your solution is simple and easy to understand.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Very elegant and simple. Thanks!\n\
    <|/ c |>\n<| a dscore=5 tags=php,sorting |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ array_flip($numbers));\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder if there is\
    \ a way to do it without having to use an array. Maybe with regular expressions?\n\
    <|/ c |>\n<| c |>\nI added a regex solution to my answer. Hope it helps!\n<|/\
    \ c |>\n<| a tags=php,regex |>\n<code>\n$numbers = 'one two three four five six\
    \ seven eight nine';\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine)/i',\
    \ '\\1', $numbers);\n$numbers = preg_replace('/(zero|one|two|three|four|five|six|seven|eight|nine",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like this\
    \ solution, however it only works with strings. If you pass in an array it fails.\n\
    <|/ c |>\n<| c |>\nIt will work with arrays, just not with strings. You will have\
    \ to convert your array into a string first. `implode(' ', array_map('strval',\
    \ $numbers))`\n<|/ c |>\n<| c |>\nThis doesn't work if you have numbers with leading\
    \ zeros, e.g. `'001'` comes before `'1'`.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers, 0,\
    \ 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, 10);\n$numbers = array_slice($numbers, 0, 10);\n$numbers = array_slice($numbers,\
    \ 0, ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = explode(' ',\
    \ $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution.\
    \ Very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more elegant than a bunch of if/else statements.\n<|/ c |>\n<|\
    \ c |>\nI like this solution. Very elegant and simple. Thanks!\n<|/ c |>\n<| c\
    \ |>\nI like this solution. Very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\n\
    I like this solution. Very elegant and simple. Thanks!\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($number", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so\
    \ much for the help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad\
    \ I could help.\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>\n$numbers =\
    \ array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = explode(' ',\
    \ $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=2 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| c |>\nI like your solution, but\
    \ I feel like it would be better to use a `foreach` loop instead of a `for` loop.\
    \ `for` loops are for iterating over an array, `foreach` loops are for iterating\
    \ over an array.\n<|/ c |>\n<| c |>\nI agree with you, `for` loops are for iterating\
    \ over an array, but `foreach` loops are for iterating over an array. `for` loops\
    \ are for iterating over an array, `foreach` loops are for iterating over an array.\n\
    <|/ c |>\n<| c |>\nI agree with you, `for` loops are for iterating over an array,\
    \ but `foreach` loops are for iterating over an array. `for` loops are for iterating\
    \ over an array, `foreach` loops are for iterating over an array.\n<|/ c |>\n\
    <| c |>\nI agree with you, `for` loops are for iterating over an array, but `foreach`\
    \ loops are for iterating over an array. `for` loops are for iterating over an\
    \ array, `foreach` loops are for iterating over an array.\n<|/ c |>\n<| c |>\n\
    I agree with you, `for` loops are for iterating over an array, but `foreach` loops\
    \ are for iterating over an array. `for` loops are for iterating over an array,\
    \ `foreach` loops are for iterating over an array.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| c\
    \ |>\nThanks so much for this. I really appreciate it. I will test this out and\
    \ let you know how it goes.\n<|/ c |>\n<| c |>\nI tested this out and it worked\
    \ perfectly. Thank you so much for taking the time to help me. I am very grateful.\n\
    <|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_fli", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nI like this solution, although I prefer `return implode(' ', array_merge(...$numbers));`\
    \ as it's more concise.\n<|/ c |>\n<| c |>\nI like this solution too, but I prefer\
    \ `return implode(' ', array_merge(...array_chunk($numbers, 3)));` as it's more\
    \ concise.\n<|/ c |>\n<| c |>\nI like this solution too, but I prefer `return\
    \ implode(' ', array_merge(...array_chunk($numbers, 3)));` as it's more concise.\n\
    <|/ c |>\n<| c |>\nI like this solution too, but I prefer `return implode(' ',\
    \ array_merge(...array_chunk($numbers, 3)));` as it's more concise.\n<|/ c |>\n\
    <| c |>\nI like this solution too, but I prefer `return implode(' ', array_merge(...array_chunk($numbers,\
    \ 3)));` as it's more concise.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ solution works best for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works\
    \ best for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works best for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis solution works best for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This solution works best for me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like this\
    \ solution, but I prefer `usort` over `array_walk` because it's more flexible.\n\
    <|/ c |>\n<| c |>\nI agree, `usort` is more flexible.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, however I prefer `usort` over `array_walk` because it's more\
    \ flexible. `array_walk` will work fine for simple cases, but it becomes unwieldy\
    \ when you need to sort on multiple fields. `usort` will let you specify multiple\
    \ comparison functions, which makes it easier to write complex sorting logic.\
    \ `usort` also lets you specify an optional `SORT_FLAG_CASE` flag, which makes\
    \ it easier to sort case-insensitive.\n<|/ c |>\n<| c |>\nI agree with you on\
    \ `usort` being more flexible, but I prefer `array_walk` because it's more flexible.\
    \ `array_walk` will work fine for simple cases, but it becomes unwieldy when you\
    \ need to sort on multiple fields. `usort` will let you specify multiple comparison\
    \ functions, which makes it easier to write complex sorting logic. `usort` also\
    \ lets you specify an optional `SORT_FLAG_CASE` flag, which makes it easier to\
    \ sort case-insensitive.\n<|/ c |>\n<| c |>\nI agree with you on `usort` being\
    \ more flexible, but I prefer `array_walk` because it's more flexible. `array_walk`\
    \ will work fine for simple cases, but it becomes unwieldy when you need to sort\
    \ on multiple fields. `usort` will let you specify multiple comparison functions,\
    \ which makes it easier to write complex sorting logic. `usort` also lets you\
    \ specify an optional `SORT_FLAG_CASE` flag, which makes it easier to sort case-insensitive.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\nprint_r($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work if the numbers\
    \ are in any order other than ascending.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it yourself. It sorts ascending and descending. Try it yourself. It sorts ascending\
    \ and descending. Try it yourself. It sorts ascending and descending. Try it yourself.\
    \ It sorts ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It sorts ascending and descending.\
    \ Try it yourself. It sorts ascending and descending. Try it yourself. It sorts\
    \ ascending and descending. Try it yourself. It ", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n", "    $numbers = explode(' ', $numbers);\n   \
    \ sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a\
    \ dscore=1 |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$array = array_map('strtolower', $array);\n$array\
    \ = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n$array\
    \ = array_values($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_map('strtolower', $array);\n$array = array_unique($array);\n\
    sort($array);\n$array = array_reverse($array);\n$array = array_values($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$array = array_map('strtolower',\
    \ $array);\n$array = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n\
    $array = array_values($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<|\
    \ a tags=php,sorting,arrays |>\n<code>\n$array = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$array = array_map('strtolower',\
    \ $array);\n$array = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n\
    $array = array_values($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_map('strtolower', $array);\n$array = array_unique($array);\n\
    sort($array);\n$array = array_reverse($array);\n$array = array_values($array);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$array =\
    \ array('one', '", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because this doesn't answer\
    \ the question that was asked. OP asked how to sort numbers from smallest to largest,\
    \ not how to sort them alphabetically. Also, your function doesn't sort numbers\
    \ in any particular order. Try it with `sort_numbers('one three five')`.\n<|/\
    \ c |>\n<| c |>\nI agree with you. I've edited my answer to reflect your comments.\n\
    <|/ c |>\n<| c |>\nI downvoted because this doesn't answer the question that was\
    \ asked. OP asked how to sort numbers from smallest to largest, not how to sort\
    \ them alphabetically. Also, your function doesn't sort numbers in any particular\
    \ order. Try it with `sort_numbers('one three five')`.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. I've edited my answer to reflect your comments.\n<|/ c |>\n<| c |>\n\
    I downvoted because this doesn't answer the question that was asked. OP asked\
    \ how to sort numbers from smallest to largest, not how to sort them alphabetically.\
    \ Also, your function doesn't sort numbers in any particular order. Try it with\
    \ `sort_numbers('one three five')`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ I'm still trying to understand how this works. I understand that `sort` sorts\
    \ the array in place, but how does it know to sort by ascending or descending\
    \ order? And how does it know to sort by 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' or 'nine'? And how does it know to sort by 'zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' or 'nine' when\
    \ there are other numbers in the array? I understand that `sort` sorts alphabetically,\
    \ but how does it know to sort by 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' or 'nine'?\n<|/ c |>\n<| c |>\nThe `sort()` function\
    \ sorts alphabetically. That's why I used `implode()` to convert the array back\
    \ into a string. `sort()` sorts alphabetically, but how does it know to sort by\
    \ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' or 'nine'?\
    \ It does this by comparing each element to each other element. `sort()` compares\
    \ elements alphabetically. `'zero'` is less than `'one'`, so `'zero'` is placed\
    \ before `'one'`. `'one'` is less than `'two'`, so `'one'` is placed before `'two'`.\
    \ `'two'` is less than `'three'`, so `'two'` is placed before `'three'`. `'three'`\
    \ is less than `'four'`, so `'three'` is placed before `'four'`. `'four'` is less\
    \ than `'five'`, so `'four'` is placed before `'five'`. `'five'` is less than\
    \ `'six'`, so `'five'` is placed before `'six'`. `'six'` is less than `'seven'`,\
    \ so `'six'` is placed before `'seven'`. `'seven'` is less than `'eight'`, so\
    \ `'seven'` is placed before `'eight'", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution. Just\
    \ a small note, that `sort` modifies the original array, so you need to clone\
    \ it before sorting it.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated\
    \ the code accordingly.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `sort_numbers('-3 -2 -1 0 1 2 3')` returns `'-1 -2 -3 0 1 2 3'`\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. `sort_numbers('-3 -2 -1 0 1 2\
    \ 3')` returns `'-1 -2 -3 0 1 2 3'`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `sort_numbers('-3 -2 -1 0 1 2 3')` returns `'-1 -2 -3 0 1\
    \ 2 3'`\n<|/ c |>\n<| a tags=sorting,php |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('three',\
    \ 'one', 'five');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n$numbers = array('three', 'one', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=1 tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $numbers = array('three', 'one', 'five');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array('three', 'one', 'five');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('three', 'one', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('three',\
    \ 'one', 'five');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('three', 'one', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = ", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers =\
    \ array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like this solution, but I find\
    \ it to be a bit too complicated for my taste. I'd rather use an `if` statement\
    \ to check whether the number is `'zero'`, `'one'`, `'two'`, etc.\n<|/ c |>\n\
    <| c |>\nI agree with you. My solution was more of a proof of concept to show\
    \ that you could use an `if` statement to check whether a number was `'zero'`,\
    \ `'one'`, `'two'`, etc.\n<|/ c |>\n<| c |>\nI like your solution, it's simple\
    \ and easy to understand. Thanks!\n<|/ c |>\n<| c |>\nI like this solution, but\
    \ I find it to be a bit too complicated for my taste. I'd rather use an `if` statement\
    \ to check whether the number is `'zero'`, `'one'`, `'two'`, etc.\n<|/ c |>\n\
    <| c |>\nI like your solution, it's simple and easy to understand. Thanks!\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThis doesn't work if you have a string like \"one two three\"\n<|/ c |>\n\
    <| c |>\n: It does work if you have a string like \"one two three\".  It sorts\
    \ them in alphabetical order.\n<|/ c |>\n<| c |>\nYes, it does work. My mistake.\
    \ Sorry. My comment was directed at OP.\n<|/ c |>\n<| c |>\n: No problem.  I added\
    \ a comment to the question to clarify.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for \"one two three\". It sorts them in alphabetical order.\n<|/ c |>\n<| a\
    \ dscore=5 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('strtolower',\
    \ $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_filter($numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_filter($numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_filter($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,arrays\
    \ |>\n<| a |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_fli", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nI like this solution, but I wonder if there is a way to do it without using\
    \ an array? I mean just using string manipulation?\n<|/ c |>\n<| c |>\nYes, you\
    \ can do it with string manipulation. I'll post an example in a minute.\n<|/ c\
    \ |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<| a\
    \ tags=php,sorting |>\n<code>\n<?php\n$string = 'three one five';\n$array = explode('\
    \ ', $string);\nsort($array);\n$string = implode(' ', $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThanks so much for this. I used this\
    \ and it worked perfectly. I'm new to PHP and this was a great learning experience\
    \ for me.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$array = array_map(\"intval\", $array);\nsort($array);\n$array =\
    \ array_map(\"strval\", $array);\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    $array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$array = array_map(\"intval\", $array);\nsort($array);\n\
    $array = array_map(\"strval\", $array);\n</code>\n<|/ a dscore=2 tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$array\
    \ = array_map(\"intval\", $array);\nsort($array);\n$array = array_map(\"strval\"\
    , $array);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$array = array_map(\"intval\", $array);\nsort($array);\n$array = array_map(\"\
    strval\", $array);\n</code>\n<|/ a dscore=1 tags=php,sorting,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_map(\"intval\", $array);\n\
    sort($array);\n$array = array_map(\"strval\", $array);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"n", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=sorting,php |>\n<| c |>\nThis doesn't work if the numbers are already\
    \ in order. For example, if $numbers = \"one three five\", the function returns\
    \ \"one three five\" instead of \"one five three\".\n<|/ c |>\n<| c |>\n: I thought\
    \ that was the desired behavior. I'll add a note to my answer.\n<|/ c |>\n<| c\
    \ |>\n: I added a function that should do what you want.\n<|/ c |>\n<| c |>\n\
    : I added a function that should do what you want.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=sorting,php |>\n\
    <| c |>\nThis doesn't work if the numbers are already in order. For example, if\
    \ $numbers = \"one three five\", the function returns \"one three five\" instead\
    \ of \"one five three\".\n<|/ c |>\n<| c |>\n: I thought that was the desired\
    \ behavior. I'll add a note to my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a tags=sorting,php |>\n<| c |>\n\
    This doesn't work if the numbers are already in order. For example, if $numbers\
    \ = \"one three five\", the function returns \"one three five\" instead of \"\
    one five three\".\n<|/ c |>\n<| a tags=sorting,php |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tag", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$string =\
    \ \"one two three four five six seven eight nine\";\n$array = explode(\" \", $string);\n\
    sort($array);\n$string = implode(\" \", $array);\necho $string;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to make it work for any number of numbers?\n\
    <|/ c |>\n<| c |>\nYes, you can make it work for any number of numbers. Just change\
    \ the `explode` line to `explode(' ', $numbers, 2)` and it will split into two\
    \ parts, the first part will be the numbers and the second part will be the rest\
    \ of the string.\n<|/ c |>\n<| c |>\nI added a version that works for any number\
    \ of numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I added a version that works for any number of numbers. I tested it and\
    \ it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a version that\
    \ works for any number of numbers. I tested it and it works.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip(", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers('one two three four five six seven eight nine')` returns `'one\
    \ two four five six seven eight nine'`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers('one two three four five six seven eight nine')` returns `'one\
    \ two four five six seven eight nine'`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers('one two three four five six seven eight nine')` returns `'one\
    \ two four five six seven eight nine'`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers('one two three four five six seven eight nine')` returns `'one\
    \ two four five six seven eight nine'`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers('one two three four five six seven eight nine')` returns `'one\
    \ two four five six seven eight nine'`\n<|/ c |>\n<| a dscore=5 |>\n<code>", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea of using\
    \ an associative array, but I wonder if there's a way to do this without using\
    \ an associative array. I'm thinking about using an associative array because\
    \ I'm going to be sorting a lot of numbers and I wonder if that would be more\
    \ efficient than using an array.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ use an associative array.\n<|/ c |>\n<| a dscore=2 |>\nI like using an associative\
    \ array for this.\n<code>\n$numbers = array();\n$numbers[] = 'zero';\n$numbers[]\
    \ = 'one';\n$numbers[] = 'two';\n$numbers[] = 'three';\n$numbers[] = 'four';\n\
    $numbers[] = 'five';\n$numbers[] = 'six';\n$numbers[] = 'seven';\n$numbers[] =\
    \ 'eight';\n$numbers[] = 'nine';\n\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($number",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work if there are multiple numbers in the same string. For example,\
    \ `sort_numbers('one two three')` returns `'one two three'`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it again and it doesn't work. `sort_numbers('one two\
    \ three')` returns `'one two three'`.\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it does work. `sort_numbers('one two three')` returns `'one two three'`.\n<|/\
    \ c |>\n<| c |>\nI tested it again and it does work. `sort_numbers('one two three')`\
    \ returns `'one two three'`.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=0 tags=php,sorting\
    \ |>\n<| a tags=php,sorting ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like your solution, but I prefer to use `preg_replace` instead\
    \ of `explode` and `implode`.\n<|/ c |>\n<| c |>\nI like your solution, but I\
    \ prefer to use `preg_replace` instead of `explode` and `implode`.\n<|/ c |>\n\
    <| c |>\nI like your solution, but I prefer to use `preg_replace` instead of `explode`\
    \ and `implode`.\n<|/ c |>\n<| c |>\nI like your solution, but I prefer to use\
    \ `preg_replace` instead of `explode` and `implode`.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I prefer to use `preg_replace` instead of `explode` and `implode`.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like this solution, but I wonder if it will perform better than\
    \ my solution. My solution will sort the array in place and will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory than your solution. My solution\
    \ will require less CPU time than your solution. My solution will require less\
    \ memory than your solution. My solution will require less CPU time than your\
    \ solution. My solution will require less memory ", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't answer the question, which\
    \ is about sorting an array of strings. Your answer sorts numbers, not strings.\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question, which is about sorting\
    \ an array of strings. I tested it and it works.\n<|/ c |>\n<| c |>\nIt does answer\
    \ the question, which is about sorting an array of strings. I tested it and it\
    \ works.\n<|/ c |>\n<| c |>\nIt does answer the question, which is about sorting\
    \ an array of strings. I tested it and it works.\n<|/ c |>\n<| c |>\nIt does answer\
    \ the question, which is about sorting an array of strings. I tested it and it\
    \ works.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($array);\n\
    print_r($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about sorting an array of strings. Your answer\
    \ sorts numbers, not strings.\n<|/ c |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about sorting an array of strings. Your answer sorts numbers, not strings.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question, which is about sorting an\
    \ array of strings. Your answer sorts numbers, not strings.\n<|/ c |>\n<| c |>\n\
    This doesn't answer the question, which is about sorting an array of strings.\
    \ Your answer sorts numbers, not strings.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about sorting an array of strings. Your answer sorts\
    \ numbers, not strings.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\nsort($array);\nprint_r($array);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about sorting an array\
    \ of strings. Your answer sorts numbers, not strings.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't answer the question, which is ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, -1);\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, -1);\n\
    $numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a tags=php,sorting,arrays dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work. `array_map` doesn't return an array.\n<|/ c |>\n<| c |>\n:\
    \ It does. Try it yourself.\n<|/ c |>\n<| c |>\n: It does. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: It does. Try it yourself.\n<|/ c |>\n<| c |>\n: It does.\
    \ Try it yourself.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work. `array_map` doesn't return an array.\n<|/ c |>\n<| c |>\n: It does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: It does. Try it yourself.\n<|/ c |>\n<| a\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('str", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n$numbers =\
    \ array_map('strval', $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a\
    \ tags=sorting,php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n$numbers =\
    \ array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers('three one five')` returns `'one three five'`.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I used PHP 5.3.6. Maybe you have a different PHP\
    \ version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.6 and 5.2.17 and it works.\
    \ Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP\
    \ 5.3.6 and 5.2.17 and it works. Maybe you have a different PHP version?\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.3.6 and 5.2.17 and it works. Maybe you have\
    \ a different PHP version?\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$", "    $numbers =\
    \ explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"one two three four five six\
    \ seven eight nine\";\n$array = explode(\" \", $string);\nsort($array);\n$string\
    \ = implode(\" \", $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! But I still don't understand how I can\
    \ use your function to sort numbers in my string. Could you please explain it\
    \ a little bit more?\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope\
    \ that helps.\n<|/ c |>\n<| c |>\nThanks for your answer! But I still don't understand\
    \ how I can use your function to sort numbers in my string. Could you please explain\
    \ it a little bit more?\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope\
    \ that helps.\n<|/ c |>\n<| c |>\nThanks for your answer! But I still don't understand\
    \ how I can use your function to sort numbers in my string. Could you please explain\
    \ it a little bit more?\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$string\
    \ = \"one two three four five six seven eight nine\";\n$array = explode(\" \"\
    , $string);\nsort($array);\n$string = implode(\" \", $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"\
    fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"\
    fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$numbers =\
    \ array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\necho $numbers;\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ explode(' ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$numbers = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ explode(' ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers('three one five')` returns `'three one five'`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=2 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$numbers =\
    \ array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThanks so much! I used the code you provided and it worked perfectly. Thanks\
    \ again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php\n$string = \"one two three four\
    \ five six seven eight nine\";\n$array = explode(\" \", $string);\nsort($array);\n\
    $string = implode(\" \", $array);\necho $string;", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI didn't downvote, but this doesn't answer the question.\
    \ He wants to sort numbers from smallest to largest, not alphabetically.\n<|/\
    \ c |>\n<| c |>\nI did downvote because this doesn't answer the question. He wants\
    \ to sort numbers from smallest to largest, not alphabetically.\n<|/ c |>\n<|\
    \ c |>\nI did downvote because this doesn't answer the question. He wants to sort\
    \ numbers from smallest to largest, not alphabetically.\n<|/ c |>\n<| c |>\nI\
    \ did downvote because this doesn't answer the question. He wants to sort numbers\
    \ from smallest to largest, not alphabetically.\n<|/ c |>\n<| c |>\nI did downvote\
    \ because this doesn't answer the question. He wants to sort numbers from smallest\
    \ to largest, not alphabetically.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"\
    fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis was the only solution that worked for me. Thanks!\n<|/ c |>\n\
    <| c |>\nThis was the only solution that worked for me. Thanks!\n<|/ c |>\n<|\
    \ c |>\nThis was the only solution that worked for me. Thanks!\n<|/ c |>\n<| c\
    \ |>\nThis was the only solution that worked for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This was the only solution that worked for me. Thanks!\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=sorting,php,string |>\n<| c |>\n\
    This was the only solution that worked for me. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ was the only solution that worked for me. Thanks!\n<|/ c |>\n<| a tags=sorting,php,string\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis was the only\
    \ solution that worked for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the only solution\
    \ that worked for me. Thanks!\n<|/ c |>\n<| a tags=sorting,php,string |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis was the only solution that worked for\
    \ me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=sorting,php,string\
    \ |>\n<| a dscore=5 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=sorting,", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `sort_numbers('three\
    \ one five')` returns `'one three five'`\n<|/ c |>\n<| c |>\n: It works for me\
    \ in PHP 5.3.10. Are you sure you copied the code correctly? It works for me in\
    \ PHP 5.3.10 as well as PHP 5.2.17. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\n: I copied the code exactly as you wrote it. I also tried it\
    \ on PHP 5.2.17 and PHP 5.3.10. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\n: I added a link to a PHP 5.3.10 test script that you can run\
    \ to see it work. Make sure you copy the code exactly as I wrote it.\n<|/ c |>\n\
    <| c |>\n: I added a link to a PHP 5.2.17 test script that you can run to see\
    \ it work. Make sure you copy the code exactly as I wrote it.\n<|/ c |>\n<| a\
    \ tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_fli", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but\
    \ I prefer `return implode(' ', array_merge(range(0,9), $numbers));` which also\
    \ sorts the numbers in ascending order.\n<|/ c |>\n<| c |>\nI like this solution,\
    \ but I prefer `return implode(' ', array_merge(range(0,9), $numbers));` which\
    \ also sorts the numbers in ascending order.\n<|/ c |>\n<| c |>\nI like this solution,\
    \ but I prefer `return implode(' ', array_merge(range(0,9), $numbers));` which\
    \ also sorts the numbers in ascending order.\n<|/ c |>\n<| c |>\nI like this solution,\
    \ but I prefer `return implode(' ', array_merge(range(0,9), $numbers));` which\
    \ also sorts the numbers in ascending order.\n<|/ c |>\n<| c |>\nI like this solution,\
    \ but I prefer `return implode(' ', array_merge(range(0,9), $numbers));` which\
    \ also sorts the numbers in ascending order.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `sort_numbers('three\
    \ one five')` returns `'one three five'`\n<|/ c |>\n<| c |>\nIt works for me.\
    \ `sort_numbers('three one five')` returns `'one three five'`\n<|/ c |>\n<| c\
    \ |>\nI tested it again and it works. I must have done something wrong the first\
    \ time I tested it.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must\
    \ have done something wrong the first time I tested it.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c\
    \ |>\nThis doesn't work for me. `sort_numbers('one three four')` returns `'one\
    \ three four'`\n<|/ c |>\n<| c |>\nIt works fine for me. `sort_numbers('one three\
    \ four')` returns `'one three four'`\n<|/ c |>\n<| c |>\nIt doesn't work for me\
    \ either. `sort_numbers('one three four')` returns `'one three four'`\n<|/ c |>\n\
    <| c |>\nIt works for me too. `sort_numbers('one three four')` returns `'one three\
    \ four'`\n<|/ c |>\n<| c |>\nIt works for me too. `sort_numbers('one three four')`\
    \ returns `'one three four'`\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\nsort($array);\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers('one three four')` returns `'one three four'`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for me. `sort_numbers('one three four')` returns `'one\
    \ three four'`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one\
    \ three four')` returns `'one three four'`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers('one three four')` returns `'one three four'`\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers('one three four')` returns `'one\
    \ three four'`\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\nsort($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one\
    \ three four')` returns `'one three four'`", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like this solution, but I believe it would be better to use a\
    \ `foreach` loop to iterate over the array rather than a `for` loop. `for` loops\
    \ tend to have less overhead than `foreach` loops.\n<|/ c |>\n<| c |>\nI agree,\
    \ `for` loops are more readable. `foreach` loops are more efficient in PHP. http://stackoverflow.com/questions/10057671/php-foreach-vs-for-loop\n\
    <|/ c |>\n<| c |>\nI agree with you on that. `for` loops are more readable and\
    \ easier to understand. `foreach` loops are more efficient in PHP. http://stackoverflow.com/questions/10057671/php-foreach-vs-for-loop\n\
    <|/ c |>\n<| c |>\nI agree with you on that. `for` loops are more readable and\
    \ easier to understand. `foreach` loops are more efficient in PHP. http://stackoverflow.com/questions/10057671/php-foreach-vs-for-loop\n\
    <|/ c |>\n<| c |>\nI agree with you on that. `for` loops are more readable and\
    \ easier to understand. `foreach` loops are more efficient in PHP. http://stackoverflow.com/questions/10057671/php-foreach-vs-for-loop\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\nsort($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about sorting a space-delimited\
    \ string of numbers, not an array of strings.\n<|/ c |>\n<| c |>\nThis answer\
    \ doesn't answer the question. He asked about sorting a space-delimited string\
    \ of numbers, not an array of strings.\n<|/ c |>\n<| c |>\nThis answer doesn't\
    \ answer the question. He asked about sorting a space-delimited string of numbers,\
    \ not an array of strings.\n<|/ c |>\n<| c |>\nThis answer doesn't answer the\
    \ question. He asked about sorting a space-delimited string of numbers, not an\
    \ array of strings.\n<|/ c |>\n<| c |>\nThis answer doesn't answer the question.\
    \ He asked about sorting a space-delimited string of numbers, not an array of\
    \ strings.\n<|/ ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThis doesn't work for me. `sort_numbers('one two three')` returns `'one\
    \ two three'`.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Are you\
    \ sure you copied the code correctly? I tested it again and it works fine for\
    \ me. `sort_numbers('one two three')` returns `'one two three'`.\n<|/ c |>\n<|\
    \ c |>\nI tested it again and it works fine for me. `sort_numbers('one two three')`\
    \ returns `'one two three'`.\n<|/ c |>\n<| c |>\nI tested it again and it works\
    \ fine for me. `sort_numbers('one two three')` returns `'one two three'`.\n<|/\
    \ c |>\n<| c |>\nI tested it again and it works fine for me. `sort_numbers('one\
    \ two three')` returns `'one two three'`.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n$numbers\
    \ = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers, -1);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 5);\n$numbers\
    \ = array_slice($numbers, 5);\n$numbers = array_slice($numbers, 0, -1);\n$numbers\
    \ = array_slice($numbers, -1);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n$numbers\
    \ = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers, -1);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 5);\n$numbers\
    \ = array_slice($numbers, 5);\n$numbers = array_slice($numbers, 0, -1);\n$numbers\
    \ = array_slice($numbers, -1);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n$numbers\
    \ = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers, -1);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 5);\n$numbers\
    \ = array_slice($numbers, 5);\n$numbers = array_slice($numbers, 0, -1);\n$numbers\
    \ = array_slice($numbers, -1);\n$numbers = array_reverse($number", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to sort by number value, not alphabetically.\n<|/ c |>\n\
    <| c |>\nI believe this does answer the question. He wants to sort by number value,\
    \ not alphabetically.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to sort by number value, not alphabetically.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sort by number value, not alphabetically.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to sort by number\
    \ value, not alphabetically.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $numbers = array(\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n\
    \    'six',\n    'seven',\n    'eight',\n    'nine',\n    'ten',\n    'eleven',\n\
    \    'twelve',\n    'thirteen',\n    'fourteen',\n    'fifteen',\n    'sixteen',\n\
    \    'seventeen',\n    'eighteen',\n    'nineteen',\n    'twenty',\n    'thirty',\n\
    \    'forty',\n    'fifty',\n    'sixty',\n    'seventy',\n    'eighty',\n   \
    \ 'ninety',\n);\n\nusort($numbers, function($a, $b) {\n    return strnatcmp($a,\
    \ $b);\n});\n\nprint_r($numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to sort by number value, not alphabetically.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to sort by number\
    \ value, not alphabetically.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to sort by number value, not alphabetically.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sort by number value, not alphabetically.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP want", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wanted to add that you\
    \ can also use array_multisort() to sort multiple arrays at once.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work for me. I've tried it on PHP 5.3.10 and 5.3.8\
    \ and it only sorts the first array and ignores the others.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work for me. I've tried it on PHP 5.3.10 and 5.3.8 and it\
    \ only sorts the first array and ignores the others.\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work for me. I've tried it on PHP 5.3.10 and 5.3.8 and it only\
    \ sorts the first array and ignores the others.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work for me. I've tried it on PHP 5.3.10 and 5.3.8 and it only sorts\
    \ the first array and ignores the others.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=2 |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n\
    <| c |>\nI like your solution, but I prefer my own.\n<|/ c |>\n<| c |>\nI like\
    \ your solution too, but I prefer my own.\n<|/ c |>\n<| c |>\nI like your solution\
    \ too, but I prefer my own.\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers('three one five')` returns `'one three five'`\n<|/ c |>\n\
    <| c |>\nIt works for me on PHP 5.3.6. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\nI tested this on PHP 5.3.6 and 5.3.10. Both give me `'one three\
    \ five'`.\n<|/ c |>\n<| c |>\nI tested this on PHP 5.3.6 and 5.3.10. Both give\
    \ me `'one three five'`.\n<|/ c |>\n<| c |>\nI tested this on PHP 5.3.6 and 5.3.10.\
    \ Both give me `'one three five'`.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one\
    \ two three')` returns `'one two three'`\n<|/ c |>\n<| c |>\nIt does for me. `sort_numbers('one\
    \ two three')` returns `'one two three'`\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ me either. `sort_numbers('one two three')` returns `'one two three'`\n<|/ c\
    \ |>\n<| c |>\nIt works for me. `sort_numbers('one two three')` returns `'one\
    \ two three'`\n<|/ c |>\n<| c |>\nIt works for me too. `sort_numbers('one two\
    \ three')` returns `'one two three'`\n<|/ c |>\n<| a |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"\
    , \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$array = array_map(\"intval\", $array);\nsort($array);\n$array = array_map(\"\
    strval\", $array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"\
    , \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$array = array_map(\"intval\", $array);\nsort($array);\n$array = array_map(\"\
    strval\", $array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$array\
    \ = array_map(\"intval\", $array);\nsort($array);\n$array = array_map(\"strval\"\
    , $array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"\
    thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$array = array_map(\"intval\", $array);\nsort($array);\n$array\
    \ = array_map(\"strval\", $array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(\"one", "  $numbers = explode(' ', $numbers);\n \
    \ sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php\
    \ |>\n<| a tags=sorting,php |>\n<code>\n<?php\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\nsort($numbers);\n\
    print_r($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n$numbers =\
    \ array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number) {\n \
    \   return $number . ' ';\n}, $numbers);\n$numbers = implode('', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n$numbers =\
    \ array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number) {\n \
    \   return $number . ' ';\n}, $numbers);\n$numbers = implode('', $numbers);\n\
    echo $numbers;\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number) {\n \
    \   return $number . ' ';\n}, $numbers);\n$numbers = implode('', $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers('three one five')` returns `'one three five'`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.2.17\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.2.17 and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.2.17\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.2.17 and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.2.17\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.2.17 and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.2.17\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$numbers = array(\n    'zero',\n    'one',\n    'two',\n    'three',\n\
    \    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine'\n\
    );\n\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, however I believe\
    \ it would be better to use a `foreach` loop to iterate over the array and perform\
    \ the sorting in place.\n<|/ c |>\n<| c |>\n: I agree. I've edited my answer to\
    \ include a foreach loop.\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>\n\
    $array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$array = array_flip($array);\n$array = array_flip($array);\n$array\
    \ = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers('three one five')` returns `'one three five'`\n\
    <|/ c |>\n<| c |>\nIt does work for me. `sort_numbers('three one five')` returns\
    \ `'one three five'`\n<|/ c |>\n<| c |>\nI guess you didn't copy and paste it\
    \ correctly. `sort_numbers('three one five')` returns `'one three five'`\n<|/\
    \ c |>\n<| c |>\nI copied it exactly as you wrote it. I also tried it on PHP 5.3.10\
    \ and PHP 5.2.17. Both returned `'one three five'`\n<|/ c |>\n<| c |>\nI guess\
    \ you didn't copy and paste it correctly. `sort_numbers('three one five')` returns\
    \ `'one three five'`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI like this solution, but I really don't understand\
    \ how it works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nThe `explode`\
    \ function splits a string into an array of strings by a delimiter (in this case,\
    \ the space). `sort` sorts the array in ascending order (smallest to largest).\
    \ `implode` joins the array back into a string with spaces between the numbers.\
    \ `array_filter` removes any empty strings from the array before calling `sort`.\n\
    <|/ c |>\n<| c |>\nI understand that `explode` splits the string into an array\
    \ of strings, but I don't understand how `sort` sorts the array in ascending order\
    \ (smallest to largest). Can you please explain how it works?\n<|/ c |>\n<| c\
    \ |>\n`sort` sorts the array in ascending order (smallest to largest). `sort`\
    \ sorts the array in ascending order (smallest to largest). `sort` sorts the array\
    \ in ascending order (smallest to largest). `sort` sorts the array in ascending\
    \ order (smallest to largest). `sort` sorts the array in ascending order (smallest\
    \ to largest). `sort` sorts the array in ascending order (smallest to largest).\
    \ `sort` sorts the array in ascending order (smallest to largest). `sort` sorts\
    \ the array in ascending order (smallest to largest). `sort` sorts the array in\
    \ ascending order (smallest to largest). `sort` sorts the array in ascending order\
    \ (smallest to largest). `sort` sorts the array in ascending order (smallest to\
    \ largest). `sort` sorts the array in ascending order (smallest to largest). `sort`\
    \ sorts the array in ascending order (smallest to largest). `sort` sorts the array\
    \ in ascending order (smallest to largest). `sort` sorts the array in ascending\
    \ order (smallest to largest). `sort` sorts the array in ascending order (smallest\
    \ to largest). `sort` sorts the array in ascending order (smallest to largest).\
    \ `sort` sorts the array in ascending order (smallest to largest). `sort` sorts\
    \ the array in ascending order (smallest to largest). ", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nI like the idea of using explode, but\
    \ this doesn't work for me. I'm getting \"Warning: sort() expects parameter 1\
    \ to be array, string given\" when I run your code. I'm running PHP 5.3.10\n<|/\
    \ c |>\n<| c |>\n: It works for me on PHP 5.3.10. Are you sure you're passing\
    \ it the right variable? It sounds like you're passing it a string instead of\
    \ a variable.\n<|/ c |>\n<| c |>\n: I added a working example to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a working example to my answer.\n<|/ c |>\n<| c |>\n\
    : I added a working example to my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do this without having to use an array?\n<|/ c |>\n<| c |>\n\
    : Not that I know of. `preg_replace` would probably be the best way to go about\
    \ it, but that would require a regex that would match all numbers in the string.\
    \ `preg_replace` would also require a regex that would match all numbers in the\
    \ string and replace them with their sorted versions.\n<|/ c |>\n<| c |>\n: I\
    \ added a function that does this without using an array. Hope it helps.\n<|/\
    \ c |>\n<| c |>\n: I added a function that does this without using an array. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\n: I added a function that does this without using\
    \ an array. Hope it helps.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=sorting,php |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"one two three four five six seven eight nine\"\
    \n<|/ c |>\n<| c |>\n: It doesn't work because `explode` returns an array of strings.\
    \ `array_map` converts them to integers. `sort` sorts the array of integers. `implode`\
    \ converts the array of integers back to a string.\n<|/ c |>\n<| c |>\n: I added\
    \ a function that does this without using an array. Hope it helps.\n<|/ c |>\n\
    <| c |>\n: I added a function that does this without using an array. Hope it helps.\n\
    <|/ c |>\n<| c |>\n: I added a function that does this without using an array.\
    \ Hope it helps.\n<|/ c |>\n<| a |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=1 tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers =\
    \ array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('str", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sort numbers in descending order, not\
    \ ascending.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to\
    \ reflect that.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers =\
    \ array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a\
    \ tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one three five')` returns\
    \ `'one three five'`\n<|/ c |>\n<| c |>\n: It works for me. `sort_numbers('one\
    \ three five')` returns `'one three five'`\n<|/ c |>\n<| c |>\n: I tested it on\
    \ PHP 5.3.10 and PHP 5.2.17. Both worked.\n<|/ c |>\n<| c |>\n: I tested it on\
    \ PHP 5.3.10 and PHP 5.2.17. Both worked.\n<|/ c |>\n<| c |>\n: I tested it on\
    \ PHP 5.3.10 and PHP 5.2.17. Both worked.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = array('one', 'three', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one three\
    \ five')` returns `'one three five'`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers('one three five')` returns `'one three five'`\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers('one three five')` returns `'one\
    \ three five'`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one\
    \ three five')` returns `'one three five'`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers('one three five')` returns `'one three five'`\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'three', 'five');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_number",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to sort numbers in descending order. Your answer sorts in\
    \ ascending order.\n<|/ c |>\n<| c |>\nI believe this does answer the question.\
    \ OP wants to sort numbers in descending order. Your answer sorts in ascending\
    \ order.\n<|/ c |>\n<| c |>\nNo, it doesn't. OP wants to sort numbers in descending\
    \ order. Your answer sorts in ascending order.\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. OP wants to sort numbers in descending order. Your\
    \ answer sorts in ascending order.\n<|/ c |>\n<| c |>\nI believe this does answer\
    \ the question. OP wants to sort numbers in descending order. Your answer sorts\
    \ in ascending order.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\nprint_r($numbers);", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this one the best. No need to reinvent the\
    \ wheel. Just a small improvement: Instead of using $numbers = explode(' ', $numbers);\
    \ you could use $numbers = explode(' ', $numbers, 2); to split into two parts\
    \ instead of one.\n<|/ c |>\n<| c |>\nI like this one the best. No need to reinvent\
    \ the wheel. Just a small improvement: Instead of using $numbers = explode(' ',\
    \ $numbers); you could use $numbers = explode(' ', $numbers, 2); to split into\
    \ two parts instead of one.\n<|/ c |>\n<| c |>\nI like this one the best. No need\
    \ to reinvent the wheel. Just a small improvement: Instead of using $numbers =\
    \ explode(' ', $numbers); you could use $numbers = explode(' ', $numbers, 2);\
    \ to split into two parts instead of one.\n<|/ c |>\n<| c |>\nI like this one\
    \ the best. No need to reinvent the wheel. Just a small improvement: Instead of\
    \ using $numbers = explode(' ', $numbers); you could use $numbers = explode('\
    \ ', $numbers, 2); to split into two parts instead of one.\n<|/ c |>\n<| c |>\n\
    I like this one the best. No need to reinvent the wheel. Just a small improvement:\
    \ Instead of using $numbers = explode(' ', $numbers); you could use $numbers =\
    \ explode(' ', $numbers, 2); to split into two parts instead of one.\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nI like your answer, but I think it would be better to use a `foreach` loop\
    \ to loop through the array and `array_push` each element into a new array. `array_push`\
    \ will append the element to the end of the array. `array_merge` will append the\
    \ elements to the end of the array. `array_merge` will overwrite any duplicate\
    \ elements. `array_merge_recursive` will append the elements to the end of the\
    \ array. `array_merge_recursive` will overwrite any duplicate elements. `array_merge_recursive`\
    \ will append the elements to the end of the array. `array_merge_recursive` will\
    \ overwrite any duplicate elements. `array_merge_recursive` will append the elements\
    \ to the end of the array. `array_merge_recursive` will overwrite any duplicate\
    \ elements. `array_merge_recursive` will append the elements to the end of the\
    \ array. `array_merge_recursive` will overwrite any duplicate elements. `array_merge_recursive`\
    \ will append the elements to the end of the array. `array_merge_recursive` will\
    \ overwrite any duplicate elements. `array_merge_recursive` will append the elements\
    \ to the end of the array. `array_merge_recursive` will overwrite any duplicate\
    \ elements. `array_merge_recursive` will append the elements to the end of the\
    \ array. `array_merge_recursive` will overwrite any duplicate elements. `array_merge_recursive`\
    \ will append the elements to the end of the array. `array_merge_recursive` will\
    \ overwrite any duplicate elements. `array_merge_recursive` will append the elements\
    \ to the end of the array. `array_merge_recursive` will overwrite any duplicate\
    \ elements. `array_merge_recursive` will append the elements to the end of the\
    \ array. `array_merge_recursive` will overwrite any duplicate elements. `array_merge_recursive`\
    \ will append the elements to the end of the array. `array_merge_recursive` will\
    \ overwrite any duplicate elements. `array_merge_recursive` will append the elements\
    \ to the end of the array. `array_merge_recursive` will overwrite any duplicate\
    \ elements. `array_merge_recursive` will append the elements to the end of the\
    \ array. `array_merge_recursive` will overwrite any duplicate elements. `array_merge_recursive`\
    \ will append the elements to the end of the array. `array_merge_recursive` will\
    \ overwrite any duplicate elements. `array_merge_recursive` will append the elements\
    \ to the end of the array. `array_merge_recursive` will overwrite any duplicate\
    \ elements. `array_merge_recursive` will append the elements to the end of the\
    \ array. ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\nprint_r($numbers);", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$array = array_map('strtolower', $array);\n\
    $array = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n\
    $array = array_values($array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_map('strtolower',\
    \ $array);\n$array = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n\
    $array = array_values($array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$array = array_map('strtolower', $array);\n\
    $array = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n\
    $array = array_values($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<|\
    \ a tags=php,sorting,arrays |>\n<code>\n$array = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_map('strtolower',\
    \ $array);\n$array = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n\
    $array = array_values($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$array = array_map('strtolower', $array);\n\
    $array = array_unique($array);\nsort($array);\n$array = array_reverse($array);\n\
    $array = array_values($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<|\
    \ a tags=php,sorting,arrays |>\n<code>\n$array = ", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=sorting,php |>\n<| a tags=sorting,php |>\n<code>\n<?php\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\nprint_r($numbers);", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers =\
    \ array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work if you have numbers like \"one two three\" as it will sort them as \"one\
    \ two three\" instead of \"one three two\"\n<|/ c |>\n<| c |>\n: That's a good\
    \ point. I've updated my answer to account for that.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I prefer to use `array_map` instead of `array_walk` because\
    \ `array_walk` will modify the array and `array_map` will not.\n<|/ c |>\n<| c\
    \ |>\n: I agree. I've updated my answer to reflect that.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_map('strrev', $array);\nsort($array);\n$array\
    \ = array_map('strrev', $array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThis doesn't work if you have numbers like \"one two three\" as it will\
    \ sort them as \"one two three\" instead of \"one three two\"\n<|/ c |>\n<| c\
    \ |>\n: That's a good point. I've updated my answer to account for that.\n<|/\
    \ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$array = array_map('strrev',\
    \ $array);\nsort($array);\n$array = array_map('strrev', $array);\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$array =\
    \ array_map('strrev', $array);\nsort($array);\n$array = array_map('strrev', $array);\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n$array = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$array = array_map('strrev",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| a tags=sorting,php,arrays |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers('one two three')` returns `'one\
    \ two three'`.\n<|/ c |>\n<| c |>\nIt works for me on PHP 5.3.10. Are you sure\
    \ you copied the code correctly? It works for me on PHP 5.3.10 and PHP 5.4.4.\n\
    <|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm running PHP 5.3.10. Maybe\
    \ it's something with my PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10\
    \ and PHP 5.4.4 and it works fine. Maybe your PHP version is too old. Try upgrading\
    \ it.\n<|/ c |>\n<| c |>\nI upgraded my PHP version to 5.4.4 and it works now.\
    \ Thanks!\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nI like this solution, very clean and easy\
    \ to understand.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "    $numbers =\
    \ explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't answer the\
    \ question, which is about sorting an array of strings. Your answer sorts numbers,\
    \ not strings.\n<|/ c |>\n<| c |>\nIt does answer the question. He asked how to\
    \ sort an array of strings. He didn't ask how to sort an array of numbers. He\
    \ asked how to sort an array of strings. He didn't ask how to sort an array of\
    \ numbers. He asked how to sort an array of strings. He didn't ask how to sort\
    \ an array of numbers. He asked how to sort an array of strings. He didn't ask\
    \ how to sort an array of numbers. He asked how to sort an array of strings. He\
    \ didn't ask how to sort an array of numbers. He asked how to sort an array of\
    \ strings. He didn't ask how to sort an array of numbers. He asked how to sort\
    \ an array of strings. He didn't ask how to sort an array of numbers. He asked\
    \ how to sort an array of strings. He didn't ask how to sort an array of numbers.\
    \ He asked how to sort an array of strings. He didn't ask how to sort an array\
    \ of numbers. He asked how to sort an array of strings. He didn't ask how to sort\
    \ an array of numbers. He asked how to sort an array of strings. He didn't ask\
    \ how to sort an array of numbers. He asked how to sort an array of strings. He\
    \ didn't ask how to sort an array of numbers. He asked how to sort an array of\
    \ strings. He didn't ask how to sort an array of numbers. He asked how to sort\
    \ an array of strings. He didn't ask how to sort an array of numbers. He asked\
    \ how to sort an array of strings. He didn't ask how to sort an array of numbers.\
    \ He asked how to sort an array of strings. He didn't ask how to sort an array\
    \ of numbers. He asked how to sort an array of strings. He didn't ask how to sort\
    \ an array of numbers. He asked how to sort an array of strings. He didn't ask\
    \ how to sort an array of numbers. He asked how to sort an array of strings. He\
    \ didn't ask how to sort an array of numbers. He asked how to sort an array of\
    \ strings. He didn't ask how to sort an array of numbers. He asked how to sort\
    \ an array of strings. He didn't ask how to sort an array of numbers. He asked\
    \ how to sort an array of strings. He didn't ask how to sort an array of numbers.\
    \ He asked how to sort an array of strings. He didn't ask how to sort an array\
    \ of numbers. He asked how to sort an array of strings. He didn't ask how to sort ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_slice($numbers, ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I'm going to try this out\
    \ and see how it goes. I appreciate your help.\n<|/ c |>\n<| c |>\nI added a more\
    \ complete solution to my answer.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$numbers = array('three', 'one', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('three',\
    \ 'one', 'five');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('three', 'one', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('three',\
    \ 'one', 'five');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = array('three', 'one', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n$numbers = array('three', 'one',\
    \ 'five');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers\
    \ = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array('three', 'one', 'five');\n$numbers\
    \ = ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($number",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your solution works fine for me. Thanks again.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_reverse($numbers);\n$numbers =\
    \ array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=2 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work if the numbers are in any order other than ascending\
    \ or descending\n<|/ c |>\n<| c |>\nThis doesn't work if the numbers are in any\
    \ order other than ascending or descending\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like this one. Very concise. Thanks!\n<|/ c |>\n<| c |>\nI like it\
    \ too, but I prefer `return implode(' ', array_map('intval', explode(' ', $numbers)));`\n\
    <|/ c |>\n<| c |>\nI like it too, but I prefer `return implode(' ', array_map('intval',\
    \ explode(' ', $numbers)));`\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers =\
    \ array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting dscore=2 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nI like your solution, however it only works with numbers, not with words.\
    \ I made a small change to make it work with words as well. Thanks!\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=2 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I am not allowed to use any php functions. I only can use my own\
    \ functions.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any PHP functions.\
    \ It's not very elegant, but it works.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any php functions. I only can use my own functions.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any PHP functions. It's\
    \ not very elegant, but it works.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array('three', 'one', 'five');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\necho\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any php functions. I only can use my own functions.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$numbers = array('three', 'one', 'five');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\"\
    , \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n\
    $numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a dscore=4 tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"\
    thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n\
    $numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_map(\"intval\", $numbers);\nsort($numbers);\n$numbers = array_map(\"\
    strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    , \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\"\
    , \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map(\"intval\"\
    , ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers('three one five')` returns `'one three five'`\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used PHP 5.3.10\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers =\
    \ array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=2 tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('str", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThis doesn't work for me. `sort_numbers('one two three four')` returns `one\
    \ two three four` instead of `one four three two`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers('one two three four')` returns `one two three four`\
    \ instead of `one four three two`.\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers('one two three four')` returns `one two three four` instead of\
    \ `one four three two`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one\
    \ two three four')` returns `one two three four` instead of `one four three two`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers('one two three four')`\
    \ returns `one two three four` instead of `one four three two`.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = \"one two three four five six seven eight nine\"\
    ;\n$array = explode(\" \", $string);\nsort($array);\n$string = implode(\" \",\
    \ $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ your solution, but I prefer to use `preg_replace` instead of `str_replace` because\
    \ I like it more because I like it more to see what it does. I like your solution\
    \ because it is very clean and easy to understand. Thanks for your answer!\n<|/\
    \ c |>\n<| c |>\nI agree that `preg_replace` is more readable, but I find it more\
    \ difficult to read. `str_replace` has more options and is more powerful. `preg_replace`\
    \ has more options and is more powerful. `str_replace` has more options and is\
    \ more powerful. `preg_replace` has more options and is more powerful. `str_replace`\
    \ has more options and is more powerful. `preg_replace` has more options and is\
    \ more powerful. `str_replace` has more options and is more powerful. `preg_replace`\
    \ has more options and is more powerful. `str_replace` has more options and is\
    \ more powerful. `preg_replace` has more options and is more powerful. `str_replace`\
    \ has more options and is more powerful. `preg_replace` has more options and is\
    \ more powerful. `str_replace` has more options and is more powerful. `preg_replace`\
    \ has more options and is more powerful. `str_replace` has more options and is\
    \ more powerful. `preg_replace` has more options and is more powerful. `str_replace`\
    \ has more options and is more powerful. `preg_replace` has more options and is\
    \ more powerful. `str_replace` has more options and is more powerful. `preg_replace`\
    \ has more options and is more powerful. `str_replace` has more options and is\
    \ more powerful. `preg_replace` has more options and is more powerful. `str_replace`\
    \ has more options and is more powerful. `preg_replace` has more options and is\
    \ more powerful. `str_replace` has more options and is more powerful. `preg_replace`\
    \ has more options and is more powerful. `str_replace` has more options and is\
    \ more powerful. `preg_replace` has more options and is more powerful. `str_replace`\
    \ has more option", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\"\
    , \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n\
    $numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
