name: HumanEval_22_filter_integers
language: php
prompt: "<?php\n// Filter given list of any python values only for integers\n// >>>\
  \ filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc',\
  \ {}, []])\n// [1, 2, 3]\nfunction filter_integers($values) {\n"
tests: "function candidate(...$args) {\n    return filter_integers(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, array(), array(), 23.2, 9, \"adasd\"\
  )) !== array(4, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ \"c\", 3, 3, \"a\", \"b\")) !== array(3, 3, 3)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "  return array_filter($values, function ($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_integer($value);\n  });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_numeric($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_integer($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_integer($value);\n \
    \ });\n}\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "  return array_filter($values, function($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_integer($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_integer($value);\n    });\n}\n", "  \
    \  return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_integer($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "    return array_filter($values, function ($value) {\n        return is_integer($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_integer($value);\n    });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_integer($value);\n    });\n}\n", "  \
    \  return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");\n\n$array = array_filter($array,function($value){\n    return\
    \ !is_numeric($value);\n});\n\nprint_r($array);\n</code>\n<|/ a dscore=4 |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\"\
    ,\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"\
    ,\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\n$array = array_filter($array,function($value){\n\
    \    return !is_numeric($value);\n});\n\nprint_r($array);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=3 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\n$array = array_filter($array,function($value){\n\
    \    return !is_numeric($value);\n});\n\nprint_r($array);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=3 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\n$array = array_filter($array,function($value){\n\
    \    return !is_numeric($value);\n});\n\nprint_r($array);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=3 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n", "  return array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_integer($value);\n  });\n}\n", "  return array_filter($values, function($value)\
    \ {\n    return is_integer($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/\
    \ a tags=php,arrays,multidimensional-array |>\n<| c |>\nI like this solution,\
    \ however it only filters integers, not floats, strings, etc.\n<|/ c |>\n<| c\
    \ |>\nYes, I missed that requirement. I've updated my answer to include that requirement.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(\n    array('name' => 'John',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jane', 'age' => 22,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York'),\n    array('name' => 'Jill', 'age' => 25, 'city' => 'New York'),\n \
    \   array('name' => 'Jack', 'age' => 25, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York'),\n    array('name' => 'Jill', 'age' => 25, 'city' => 'New York'),\n \
    \   array('name' => 'Jack', 'age' => 25, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York'),\n    array('name' => 'Jill', 'age' => 25, 'city' => 'New York'),\n \
    \   array('name' => 'Jack', 'age' => 25, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_int($value);\n  });\n\
    }\n\n/**\n * Filter given list of any python values only for floats\n * >>> filter_floats(['a',\
    \ 3.14, 5])\n * [3.14]\n * >>> filter_floats([1, 2, 3, 'abc', {}, []])\n * [1,\
    \ 2, 3]\n */", "    return array_filter($values, function($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_integer($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_integer($value);\n    });\n}\n", "  \
    \  return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_integer($value);\n    });\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\"\
    ,\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($value){\n \
    \   return is_numeric($value);\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. `array_filter` was introduced in PHP 5.5.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. `array_filter` was introduced\
    \ in PHP 5.5.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `array_filter`\
    \ was introduced in PHP 5.5.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `array_filter` was introduced in PHP 5.5.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. `array_filter` was introduced in PHP 5.5.\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($value){\n    return\
    \ is_numeric($value);\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. `array_filter` was introduced in PHP 5.5.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\");\n$array = array_filter($array,function($value){\n    return\
    \ is_numeric($value);\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis should\
    \ be the accepted answer. `array_filter` was introduced in PHP 5.5.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\");\n$array = array_filter($array,function($value){\n    return\
    \ is_numeric($value);\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis should\
    \ be the accepted answer. `array_filter` was introduced in PHP 5.5.\n<|/ c |>\n\
    <| a dscore=", "  return array_filter($values, function ($value) {\n    return\
    \ is_integer($value);\n  });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution because it\
    \ doesn't require any additional libraries. I used it in a project where I needed\
    \ to filter out some values from a database query and I didn't want to add any\
    \ additional libraries.\n<|/ c |>\n<| c |>\nI like this solution as well, because\
    \ it doesn't require any additional libraries. I used it in a project where I\
    \ needed to filter out some values from a database query and I didn't want to\
    \ add any additional libraries.\n<|/ c |>\n<| c |>\nI like this solution as well,\
    \ because it doesn't require any additional libraries. I used it in a project\
    \ where I needed to filter out some values from a database query and I didn't\
    \ want to add any additional libraries.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, because it doesn't require any additional libraries. I used it in a\
    \ project where I needed to filter out some values from a database query and I\
    \ didn't want to add any additional libraries.\n<|/ c |>\n<| c |>\nI like this\
    \ solution as well, because it doesn't require any additional libraries. I used\
    \ it in a project where I needed to filter out some values from a database query\
    \ and I didn't want to add any additional libraries.\n<|/ c |>\n<| a dscore=5\
    \ |>\nI like to use array_filter() for this purpose:\n<code>\n$filtered = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis should be the accepted answer. No additional libraries, no\
    \ additional function calls.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No additional libraries, no additional function calls.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No additional libraries, no additional function\
    \ calls.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No additional\
    \ libraries, no additional function calls.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. No additional libraries, no additional function calls.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$filtered = array_filter($array, function\
    \ ($value) {\n    return is_int($value);\n});\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis should be the accepted answer. No additional libraries, no additional\
    \ function calls.", "  return array_filter($values, function ($value) {\n    return\
    \ is_integer($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    array('id' => 1, 'name' =>\
    \ 'John', 'age' => 25),\n    array('id' => 2, 'name' => 'Jane', 'age' => 30),\n\
    \    array('id' => 3, 'name' => 'Jack', 'age' => 35),\n    array('id' => 4, 'name'\
    \ => 'Jill', 'age' => 25),\n    array('id' => 5, 'name' => 'Jack', 'age' => 35),\n\
    \    array('id' => 6, 'name' => 'Jill', 'age' => 25),\n    array('id' => 7, 'name'\
    \ => 'Jack', 'age' => 35),\n    array('id' => 8, 'name' => 'Jill', 'age' => 25),\n\
    \    array('id' => 9, 'name' => 'Jack', 'age' => 35),\n    array('id' => 10, 'name'\
    \ => 'Jill', 'age' => 25),\n    array('id' => 11, 'name' => 'Jack', 'age' => 35),\n\
    \    array('id' => 12, 'name' => 'Jill', 'age' => 25),\n    array('id' => 13,\
    \ 'name' => 'Jack', 'age' => 35),\n    array('id' => 14, 'name' => 'Jill', 'age'\
    \ => 25),\n    array('id' => 15, 'name' => 'Jack', 'age' => 35),\n    array('id'\
    \ => 16, 'name' => 'Jill', 'age' => 25),\n    array('id' => 17, 'name' => 'Jack',\
    \ 'age' => 35),\n    array('id' => 18, 'name' => 'Jill', 'age' => 25),\n    array('id'\
    \ => 19, 'name' => 'Jack', 'age' => 35),\n    array('id' => 20, 'name' => 'Jill',\
    \ 'age' => 25),\n    array('id' => 21, 'name' => 'Jack', 'age' => 35),\n    array('id'\
    \ => 22, 'name' => 'Jill', 'age' => 25),\n    array('id' => 23, 'name' => 'Jack',\
    \ 'age' => 35),\n    array('id' => 24, 'name' => 'Jill', 'age' => 25),\n    array('id'\
    \ => 25, 'name' => 'Jack', 'age' => 35),\n    array('id' => 26, 'name' => 'Jill',\
    \ 'age' => 25),\n    array('id' => 27, 'name' => 'Jack', 'age' => 35),\n    array('id'\
    \ => 28, 'name' => 'Jill", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n<?php\n$array\
    \ = [\n    'a',\n    3.14,\n    5,\n    'abc',\n    [],\n];\n\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n\nprint_r($array);\n</code>\n\
    <|/ a tags=arrays,php,filter |>\n<| a tags=arrays,php,filter |>\n<code>\n<?php\n\
    $array = [\n    'a',\n    3.14,\n    5,\n    'abc',\n    [],\n];\n\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n\nprint_r($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php,filter |>\n<code>\n<?php\n$array = [\n\
    \    'a',\n    3.14,\n    5,\n    'abc',\n    [],\n];\n\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});\n\nprint_r($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php,filter |>\n<code>\n$array = [\n    'a',\n\
    \    3.14,\n    5,\n    'abc',\n    [],\n];\n\n$array = array_filter($array, function\
    \ ($value) {\n    return is_int($value);\n});\n\nprint_r($array);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\n$array = [\n    'a',\n    3.14,\n    5,\n  \
    \  'abc',\n    [],\n];\n\n$array = array_filter($array, function ($value) {\n\
    \    return is_int($value);\n});\n\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,filter\
    \ dscore=1 |>\n<| a |>\n<code>\n<?php\n$array = [\n    'a',\n    3.14,\n    5,\n\
    \    'abc',\n    [],\n];\n\n$array = array_filter($array, function ($value) {\n\
    \    return is_int($value);\n});\n\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,filter\
    \ dscore=1 |>\n<| a tags=arrays,php,filter |>\n<code>\n<?php\n$array = [\n   \
    \ 'a',\n    3.14,\n    5,\n    'abc',\n    [],\n];\n\n$array = array_filter($array,\
    \ function ($value) {\n    return is_int($value);\n});", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "  return array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_integer($value);\n \
    \ });\n}\n", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like your\
    \ solution, but I wonder why `is_int` doesn't work here? `is_int('a')` returns\
    \ `true`, but `is_int(['a'])` returns `false`\n<|/ c |>\n<| c |>\n`is_int` checks\
    \ if the value is an integer, not if it is a string. `is_int(['a'])` returns `false`\
    \ because `['a']` is not an integer.\n<|/ c |>\n<| c |>\nI see. So `is_int` doesn't\
    \ work because `['a']` is not an integer, but `is_int('a')` returns `true` because\
    \ `'a'` is an integer.\n<|/ c |>\n<| c |>\nYes, that's right. `is_int` checks\
    \ if the value is an integer, not if it is a string. `is_int(['a'])` returns `false`\
    \ because `['a']` is not an integer.\n<|/ c |>\n<| c |>\nI see. So `is_int` doesn't\
    \ work because `['a']` is not an integer, but `is_int('a')` returns `true` because\
    \ `'a'` is an integer.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd');\n$array = array_filter($array, function($value) {\n    return\
    \ is_numeric($value);\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=3 |>\n\
    <code>\n$array = array('a', 'b', 'c', 'd');\n$array = array_filter($array, function($value)\
    \ {\n    return is_numeric($value);\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c', 'd');\n$array =\
    \ array_filter($array, function($value) {\n    return is_numeric($value);\n});\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd');\n$array = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('a', 'b', 'c', 'd');\n$array = array_filter($array, function($value)\
    \ {\n    return is_numeric($value);\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array", "  return array_filter($values, function ($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "  return array_filter($values, function($value) {\n    return is_int($value);\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if you have a string that looks like a number. `filter_integers(['a',\
    \ 3.14, 5])` returns `[3.14, 5]` instead of `[5]`.\n<|/ c |>\n<| c |>\nThis also\
    \ doesn't work if you have an array with mixed types. `filter_integers([1, 'a',\
    \ 3.14, 5])` returns `[1, 3.14, 5]` instead of `[5]`.\n<|/ c |>\n<| c |>\nThis\
    \ also doesn't work if you have an array with mixed types. `filter_integers([1,\
    \ 'a', 3.14, 5])` returns `[1, 3.14, 5]` instead of `[5]`.\n<|/ c |>\n<| c |>\n\
    This also doesn't work if you have an array with mixed types. `filter_integers([1,\
    \ 'a', 3.14, 5])` returns `[1, 3.14, 5]` instead of `[5]`.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "    return array_filter($values, function($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "  return array_filter($values, function($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_integer($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_integer($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_integer($value);\n  });\n}\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. I didn't know about `array_filter` before, thank you!\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any additional\
    \ libraries. I didn't know about `array_filter` before, thank you!\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any additional\
    \ libraries. I didn't know about `array_filter` before, thank you!\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any additional\
    \ libraries. I didn't know about `array_filter` before, thank you!\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any additional\
    \ libraries. I didn't know about `array_filter` before, thank you!\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array(\n    1 => 1,\n    2 => 2,\n \
    \   3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n\
    \    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n   \
    \ 14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19\
    \ => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 =>\
    \ 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n\
    \    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n \
    \   35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n  \
    \  40 => 40,\n    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n   \
    \ 45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n    50\
    \ => 50,\n    51 => 51,\n    52 => 52,", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "    return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "  return array_filter($values, function ($value)\
    \ {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\n    array('id' => 1, 'name' =>\
    \ 'John'),\n    array('id' => 2, 'name' => 'Jane'),\n    array('id' => 3, 'name'\
    \ => 'Jack'),\n    array('id' => 4, 'name' => 'Jill'),\n    array('id' => 5, 'name'\
    \ => 'Jack'),\n    array('id' => 6, 'name' => 'Jill'),\n    array('id' => 7, 'name'\
    \ => 'Jack'),\n    array('id' => 8, 'name' => 'Jill'),\n    array('id' => 9, 'name'\
    \ => 'Jack'),\n    array('id' => 10, 'name' => 'Jill'),\n    array('id' => 11,\
    \ 'name' => 'Jack'),\n    array('id' => 12, 'name' => 'Jill'),\n    array('id'\
    \ => 13, 'name' => 'Jack'),\n    array('id' => 14, 'name' => 'Jill'),\n    array('id'\
    \ => 15, 'name' => 'Jack'),\n    array('id' => 16, 'name' => 'Jill'),\n    array('id'\
    \ => 17, 'name' => 'Jack'),\n    array('id' => 18, 'name' => 'Jill'),\n    array('id'\
    \ => 19, 'name' => 'Jack'),\n    array('id' => 20, 'name' => 'Jill'),\n    array('id'\
    \ => 21, 'name' => 'Jack'),\n    array('id' => 22, 'name' => 'Jill'),\n    array('id'\
    \ => 23, 'name' => 'Jack'),\n    array('id' => 24, 'name' => 'Jill'),\n    array('id'\
    \ => 25, 'name' => 'Jack'),\n    array('id' => 26, 'name' => 'Jill'),\n    array('id'\
    \ => 27, 'name' => 'Jack'),\n    array('id' => 28, 'name' => 'Jill'),\n    array('id'\
    \ => 29, 'name' => 'Jack'),\n    array('id' => 30, 'name' => 'Jill'),\n    array('id'\
    \ => 31, 'name' => 'Jack'),\n    array('id' => 32, 'name' => 'Jill'),\n    array('id'\
    \ => 33, 'name' => 'Jack'),\n    array('id' => 34, 'name' => 'Jill'),\n    array('id'\
    \ => 35, 'name' => 'Jack'),\n    array('id' => 36, 'name' => 'Jill'),\n    array('",
  "  return array_filter($values, function ($value) {\n    return is_int($value);\n\
    \  });\n}\n", "    return array_filter($values, function ($value) {\n        return\
    \ is_int($value);\n    });\n}\n", "  return array_filter($values, function ($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nI came up with a solution using array_walk and array_filter:\n\
    <code>\n$array = array('a', 'b', 'c', 'd', 'e', 'f', 'g');\n$filtered = array_filter($array,\
    \ function($value) use ($array) {\n    return in_array($value, $array);\n});\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if you have a value\
    \ that isn't in the array and you still want to keep it.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e', 'f', 'g');\n$filtered =\
    \ array_filter($array, function($value) use ($array) {\n    return in_array($value,\
    \ $array);\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array('a', 'b', 'c', 'd', 'e', 'f', 'g');\n$filtered = array_filter($array,\
    \ function($value) use ($array) {\n    return in_array($value, $array);\n});\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g');\n$filtered = array_filter($array, function($value)\
    \ use ($array) {\n    return in_array($value, $array);\n});\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g');\n$filtered = array_filter($array, function($value) use ($array) {\n\
    \    return in_array($value, $array);\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e', 'f', 'g');\n$filtered =\
    \ array_filter($array, function($value) use ($array) {\n    return in_array($value,\
    \ $array);\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n\
    <code>\n$array = array('a', 'b', 'c', 'd', 'e', 'f', 'g');\n$filtered = array_filter($array,\
    \ function($value) use ($array) {\n    return in_array($value, $array);\n});\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g');", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "    return array_filter($values, function ($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_integer($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if you\
    \ have an array with mixed types. `filter_integers([1, 'a', 3.14, 5])` returns\
    \ `[1, 'a', 3.14, 5]` instead of `[1, 5]`\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with mixed types. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a version that works with mixed types. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a version\
    \ that works with mixed types. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a version that works with mixed types. I tested\
    \ it and it works.\n<|/ c |>\n<| a |>\n<code>\n$array = array('a', 'b', 'c');\n\
    $array = array_filter($array, function($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a tags=arrays,php dscore=5 |>\n<| c |>\nThis doesn't work if\
    \ you have an array with mixed types. `filter_integers([1, 'a', 3.14, 5])` returns\
    \ `[1, 'a', 3.14, 5]` instead of `[1, 5]`\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with mixed types. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a version that works with mixed types. I tested\
    \ it and it works.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('a', 'b',\
    \ 'c');\n$array = array_filter($array, function($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=5 |>\n<code>\n$array = array('a',\
    \ 'b', 'c');\n$array = array_filter($array, function($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array('a', 'b', 'c');\n$array = array_filter($array, function($value) {\n\
    \    return is_int($value);\n});\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\n\
    $array = array('a', 'b', 'c');\n$", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function($value) {\n    return is_integer($value);\n \
    \ });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI love this solution. Very clean\
    \ and easy to understand.\n<|/ c |>\n<| c |>\nI love this solution. Very clean\
    \ and easy to understand.\n<|/ c |>\n<| c |>\nI love this solution. Very clean\
    \ and easy to understand.\n<|/ c |>\n<| c |>\nI love this solution. Very clean\
    \ and easy to understand.\n<|/ c |>\n<| c |>\nI love this solution. Very clean\
    \ and easy to understand.\n<|/ c |>\n<| a dscore=5 |>\nI love the solution by\
    \ Jonathan Wakely, but wanted to add an alternative that uses array_reduce() instead\
    \ of array_filter(). \n<code>", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_integer($value);\n    });\n}\n", "   \
    \ return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=2 |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd', 'e');\n$array = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('a', 'b', 'c', 'd', 'e');\n$array = array_filter($array, function($value)\
    \ {\n    return is_numeric($value);\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_filter($array,\
    \ function($value) {\n    return is_numeric($value);\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array\
    \ = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('a', 'b', 'c', 'd', 'e');\n$array = array_filter($array, function($value)\
    \ {\n    return is_numeric($value);\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_filter($array,\
    \ function($value) {\n    return is_numeric($value);\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array\
    \ = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('a', 'b', 'c', 'd', 'e');\n$array = array_filter($array, function($value)\
    \ {\n    return is_numeric($value);\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_filter($array,\
    \ function($value) {\n    return is_numeric($value);\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n\
    $array = array_filter($array, function($value) {", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n\n/**\n * Filter\
    \ given list of any python values only for floats\n * >>> filter_floats(['a',\
    \ 3.14, 5])\n * [3.14]\n * >>> filter_floats([1, 2, 3, 'abc', {}, []])\n * [1,\
    \ 2, 3]\n */", "    return array_filter($values, function ($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_integer($value);\n    });\n}\n", "  \
    \  return array_filter($values, function($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function ($value) {\n      \
    \  return is_int($value);\n    });\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "    return array_filter($values, function ($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function($value) {\n        return is_int($value);\n \
    \   });\n}\n", "  return array_filter($values, function($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's much more elegant than using array_filter().\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's much more elegant than\
    \ using array_filter().\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's much more elegant than using array_filter().\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's much\
    \ more elegant than using array_filter().\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's much more elegant than using array_filter().\n\
    <|/ c |>\n<| a tags=arrays,php,filter |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd', 'e');\n$array = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's much more elegant than using array_filter().\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's much\
    \ more elegant than using array_filter().\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's much more elegant than using array_filter().\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ much more elegant than using array_filter().\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's much more elegant than using\
    \ array_filter().\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd', 'e');\n$array = array_filter($array, function($value) {\n    return\
    \ is_numeric($value);\n});\n</code>\n<|/ a tags=arrays,php,filter |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's much more elegant\
    \ than using array_filter().\n<|/ c |>\n<| c |>", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n\n/**\n * Filter given list of any python values only for floats\n\
    \ * >>> filter_floats(['a', 3.14, 5])\n * [3.14, 5]\n * >>> filter_floats([1,\
    \ 2, 3, 'abc', {}, []])\n * [1.0, 2.0, 3.0]\n */", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function($value) {\n    return is_integer($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\n\
    \    array('id' => 1, 'name' => 'John'),\n    array('id' => 2, 'name' => 'Jane'),\n\
    \    array('id' => 3, 'name' => 'Jack'),\n    array('id' => 4, 'name' => 'Jill'),\n\
    \    array('id' => 5, 'name' => 'Jack'),\n    array('id' => 6, 'name' => 'Jill'),\n\
    \    array('id' => 7, 'name' => 'Jack'),\n    array('id' => 8, 'name' => 'Jill'),\n\
    \    array('id' => 9, 'name' => 'Jack'),\n    array('id' => 10, 'name' => 'Jill'),\n\
    \    array('id' => 11, 'name' => 'Jack'),\n    array('id' => 12, 'name' => 'Jill'),\n\
    \    array('id' => 13, 'name' => 'Jack'),\n    array('id' => 14, 'name' => 'Jill'),\n\
    \    array('id' => 15, 'name' => 'Jack'),\n    array('id' => 16, 'name' => 'Jill'),\n\
    \    array('id' => 17, 'name' => 'Jack'),\n    array('id' => 18, 'name' => 'Jill'),\n\
    \    array('id' => 19, 'name' => 'Jack'),\n    array('id' => 20, 'name' => 'Jill'),\n\
    \    array('id' => 21, 'name' => 'Jack'),\n    array('id' => 22, 'name' => 'Jill'),\n\
    \    array('id' => 23, 'name' => 'Jack'),\n    array('id' => 24, 'name' => 'Jill'),\n\
    \    array('id' => 25, 'name' => 'Jack'),\n    array('id' => 26, 'name' => 'Jill'),\n\
    \    array('id' => 27, 'name' => 'Jack'),\n    array('id' => 28, 'name' => 'Jill'),\n\
    \    array('id' => 29, 'name' => 'Jack'),\n    array('id' => 30, 'name' => 'Jill'),\n\
    \    array('id' => 31, 'name' => 'Jack'),\n    array('id' => 32, 'name' => 'Jill'),\n\
    \    array('id' => 33, 'name' => 'Jack'),\n    array('id' => 34, 'name' => 'Jill'),\n\
    \    array('id' => 35, 'name' => 'Jack'),\n    array('id' => 36, 'name' => 'J",
  "    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_integer($value);\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays,filtering,arrays |>\n<| a dscore=1 |>\n\
    <code>\n$array = [\n    'a',\n    3.14,\n    5,\n    true,\n    false,\n    null,\n\
    \    [],\n];\n\n$filtered = array_filter($array, function ($value) {\n    return\
    \ is_integer($value);\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays,filtering,arrays\
    \ |>\n<| a tags=php,arrays,filtering,arrays |>\n<code>\n$array = [\n    'a',\n\
    \    3.14,\n    5,\n    true,\n    false,\n    null,\n    [],\n];\n\n$filtered\
    \ = array_filter($array, function ($value) {\n    return is_integer($value);\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $array = [\n    'a',\n    3.14,\n    5,\n    true,\n    false,\n    null,\n  \
    \  [],\n];\n\n$filtered = array_filter($array, function ($value) {\n    return\
    \ is_integer($value);\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays,filtering,arrays\
    \ |>\n<| a tags=php,arrays,filtering,arrays |>\n<code>\n$array = [\n    'a',\n\
    \    3.14,\n    5,\n    true,\n    false,\n    null,\n    [],\n];\n\n$filtered\
    \ = array_filter($array, function ($value) {\n    return is_integer($value);\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $array = [\n    'a',\n    3.14,\n    5,\n    true,\n    false,\n    null,\n  \
    \  [],\n];\n\n$filtered = array_filter($array, function ($value) {\n    return\
    \ is_integer($value);\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays,filtering,arrays\
    \ |>\n<| a tags=php,arrays,filtering,arrays |>\n<code>\n$array = [\n    'a',\n\
    \    3.14,\n    5,\n    true,\n    false,\n    null,\n    [],\n];\n\n$filtered\
    \ = array_filter($array, function ($value) {\n    return is_integer($value);\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=1 |>\n<| a tag", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n\n/**\n * Filter\
    \ given list of any python values only for floats\n * >>> filter_floats(['a',\
    \ 3.14, 5])\n * [3.14]\n * >>> filter_floats([1, 2, 3, 'abc', {}, []])\n * [1.0,\
    \ 2.0, 3.0]\n */", "    return array_filter($values, function ($value) {\n   \
    \     return is_int($value);\n    });\n}\n", "  return array_filter($values, function\
    \ ($value) {\n    return is_integer($value);\n  });\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c', 'd');\n$array\
    \ = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ `array_filter` was introduced in PHP 5.3\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. `array_filter` was introduced in PHP 5.3\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. `array_filter` was introduced in PHP\
    \ 5.3\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('a', 'b', 'c', 'd');\n\
    $array = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be the accepted answer.\
    \ `array_filter` was introduced in PHP 5.3\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $array = array('a', 'b', 'c', 'd');\n$array = array_filter($array, function($value)\
    \ {\n    return is_numeric($value);\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis should be the accepted answer. `array_filter` was introduced in\
    \ PHP 5.3\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd');\n$array = array_filter($array, function($value) {\n    return is_numeric($value);\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ `array_filter` was introduced in PHP 5.3\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $array = array('a', 'b', 'c', 'd');\n$array = array_filter($array, function($value)\
    \ {\n    return is_numeric($value);\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=5 |>\n<code>\n$array = array('a', 'b', 'c', 'd');\n$array = array_filter($array,\
    \ function($value) {\n    return is_numeric($value);\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=5 |>\n<code>\n$array = array('a', 'b', 'c', 'd');", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "  return array_filter($values, function($value)\
    \ {\n    return is_int($value);\n  });\n}\n", "    return array_filter($values,\
    \ function($value) {\n        return is_int($value);\n    });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "    return array_filter($values, function($value) {\n       \
    \ return is_int($value);\n    });\n}\n", "    return array_filter($values, function\
    \ ($value) {\n        return is_int($value);\n    });\n}\n", "    return array_filter($values,\
    \ function ($value) {\n        return is_int($value);\n    });\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Simple, efficient,\
    \ and works with any PHP version.\n<|/ c |>\n<| c |>\nI like this answer because\
    \ it doesn't require any additional libraries. However, I do have one question:\
    \ why do you use `is_int` instead of `is_numeric`?\n<|/ c |>\n<| c |>\n`is_int`\
    \ checks for integers only. `is_numeric` checks for numbers and decimals.\n<|/\
    \ c |>\n<| c |>\nI used `is_int` because I wanted to filter out strings and arrays.\
    \ `is_numeric` would filter out `'1'`, `'1.0'`, `'1.0e2'`, `'1.0e-2'`, `'1.0e-10'`,\
    \ etc.\n<|/ c |>\n<| c |>\nI used `is_int` because I wanted to filter out strings\
    \ and arrays. `is_numeric` would filter out `'1'`, `'1.0'`, `'1.0e2'`, `'1.0e-2'`,\
    \ `'1.0e-10'`, etc.\n<|/ c |>\n<| a |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd');\n$array = array_filter($array, 'is_int');\n</code>\n<|/ a tags=php,arrays\
    \ dscore=5 |>\n<| c |>\nThis doesn't work anymore in PHP 5.6. `array_filter` now\
    \ expects a callback function as second parameter, not a string.\n<|/ c |>\n<|\
    \ c |>\nThis answer was posted before the question was edited to specify PHP 5.6.\
    \ Since then, `array_filter` has been available since PHP 5.3.\n<|/ c |>\n<| c\
    \ |>\nAh okay, I didn't realize that `array_filter` was available since 5.3\n\
    <|/ c |>\n<| c |>\nThis answer was posted before PHP 5.3 was released. Since then,\
    \ `array_filter` has been available since PHP 5.3.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd');\n$array = array_filter($array,\
    \ 'is_int');\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work anymore in\
    \ PHP 5.6. `array_filter` now expects a callback function as second parameter,\
    \ not a string.\n<|/ c |>\n<| a dscore=5 ", "  return array_filter($values, function\
    \ ($value) {\n    return is_int($value);\n  });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n", "  return\
    \ array_filter($values, function ($value) {\n    return is_int($value);\n  });\n\
    }\n", "    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n\
    $result = array_filter($array, function($value){\n    return is_int($value);\n\
    });\n\nvar_dump($result);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. Simple, straightforward and easy to understand.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple, straightforward and\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple, straightforward and easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Simple, straightforward and easy to understand.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Simple, straightforward and\
    \ easy to understand.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n$result = array_filter($array,\
    \ function($value){\n    return is_int($value);\n});\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple, straightforward and\
    \ easy to understand.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array,\
    \ function($value){\n    return is_int($value);\n});\n\nvar_dump($result);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Simple, straightforward\
    \ and easy to understand.\n<|/ c |>\n<| a |>\n<code>\n$array = array(\"a\" =>\
    \ 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n\n$result = array_filter($array,\
    \ function($value){\n    return is_int($value);\n});\n\nvar_dump($result);\n</code>\n\
    <|/ a tags=php,arrays dscore=4 |>\n<| a dscore=4 |>\n<code>\n$array = array(\"",
  "    return array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function ($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function ($value)\
    \ {\n        return is_int($value);\n    });\n}\n", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\n<?php\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\");\n$array = array_filter($array,function($v){\n\
    \    return is_numeric($v);\n});\nprint_r($array);", "  return array_filter($values,\
    \ function ($value) {\n    return is_integer($value);\n  });\n}\n", "    return\
    \ array_filter($values, function ($value) {\n        return is_int($value);\n\
    \    });\n}\n", "  return array_filter($values, function($value) {\n    return\
    \ is_int($value);\n  });\n}\n", "    return array_filter($values, function($value)\
    \ {\n        return is_int($value);\n    });\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nI like this answer because it's simple and easy to understand.\n\
    <|/ c |>\n<| c |>\nI like this answer because it's simple and easy to understand.\n\
    <|/ c |>\n<| c |>\nI like this answer because it's simple and easy to understand.\n\
    <|/ c |>\n<| c |>\nI like this answer because it's simple and easy to understand.\n\
    <|/ c |>\n<| a tags=php,arrays,filter |>\n<code>\n$array = array(\n    'a' =>\
    \ 1,\n    'b' => 2,\n    'c' => 3,\n    'd' => 4,\n    'e' => 5,\n    'f' => 6,\n\
    \    'g' => 7,\n    'h' => 8,\n    'i' => 9,\n    'j' => 10,\n    'k' => 11,\n\
    \    'l' => 12,\n    'm' => 13,\n    'n' => 14,\n    'o' => 15,\n    'p' => 16,\n\
    \    'q' => 17,\n    'r' => 18,\n    's' => 19,\n    't' => 20,\n    'u' => 21,\n\
    \    'v' => 22,\n    'w' => 23,\n    'x' => 24,\n    'y' => 25,\n    'z' => 26,\n\
    );\n\n$array = array_filter($array, function($value) {\n    return is_int($value);\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n\
    <| a tags=php,arrays,filter |>\n<code>\n$array = array(\n    'a' => 1,\n    'b'\
    \ => 2,\n    'c' => 3,\n    'd' => 4,\n    'e' => 5,\n    'f' => 6,\n    'g' =>\
    \ 7,\n    'h' => 8,\n    'i' => 9,\n    'j' => 10,\n    '", "  return array_filter($values,\
    \ function ($value) {\n    return is_int($value);\n  });\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
