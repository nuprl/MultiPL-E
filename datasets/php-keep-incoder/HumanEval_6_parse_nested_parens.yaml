name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((()))\
  \ () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n            if ($level < 0) {\n                $max_level = $level;\n\
    \            }\n        }\n    }\n    return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } else if ($paren == ')') {\n            $level--;\n        }\n     \
    \   if ($level > $max_level) {\n            $max_level = $level;\n        }\n\
    \    }\n    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_levels = array();\n    $paren_levels_length = 0;\n    $paren_levels_index\
    \ = 0;\n    $paren_levels_index2 = 0;\n    $paren_levels_index3 = 0;\n    $paren_levels_index4\
    \ = 0;\n    $paren_levels_index5 = 0;\n    $paren_levels_index6 = 0;\n    $paren_levels_index7\
    \ = 0;\n    $paren_levels_index8 = 0;\n    $paren_levels_index9 = 0;\n    $paren_levels_index10\
    \ = 0;\n    $paren_levels_index11 = 0;\n    $paren_levels_index12 = 0;\n    $paren_levels_index13\
    \ = 0;\n    $paren_levels_index14 = 0;\n    $paren_levels_index15 = 0;\n    $paren_levels_index16\
    \ = 0;\n    $paren_levels_index17 = 0;\n    $paren_levels_index18 = 0;\n    $paren_levels_index19\
    \ = 0;\n    $paren_levels_index20 = 0;\n    $paren_levels_index21 = 0;\n    $paren_levels_index22\
    \ = 0;\n    $paren_levels_index23 = 0;\n    $paren_levels_index24 = 0;\n    $paren_levels_index25\
    \ = 0;\n    $paren_levels_index26 = 0;\n    $paren_levels_index27 = 0;\n    $paren_levels_index28\
    \ = 0;\n    $paren_levels_index29 = 0;\n    $paren_levels_index30 = 0;\n    $paren_levels_index31\
    \ = 0;\n    $paren_levels_index32 = 0;\n    $paren_levels_index33 = 0;\n    $paren_levels_index34\
    \ = 0;\n    $paren_levels_index35 = 0;\n    $paren_levels_index36 = 0;\n    $paren_levels_index37\
    \ = 0;\n    $paren_levels_index38 = 0;\n    $paren_levels_index39 = 0;\n    $paren_levels_index40\
    \ = 0;\n    $paren_levels_index41 = 0;\n    $paren_levels_index42 = 0;\n    $paren_levels_index43\
    \ = 0;\n    $paren_levels_index44 = 0;\n    $paren_levels_index45 = 0;\n    $paren_levels_index46\
    \ = 0;\n    $paren_levels_index47 = 0;\n    $paren_levels_index48 = 0;\n    $paren_levels_index49\
    \ = 0;\n    $paren_levels_index50 = 0;\n    $paren_levels_index51 = 0;\n    $paren_levels_index52\
    \ = 0;\n    $paren_levels_index53 = 0;\n    $paren_levels_index54 = 0;\n    $paren_",
  "  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n  $paren_levels_len\
    \ = count($paren_array);\n  for ($i = 0; $i < $paren_levels_len; $i++) {\n   \
    \ $paren_levels[$i] = $paren_array[$i];\n  }\n  $max_level = 0;\n  $max_level_len\
    \ = count($paren_levels);\n  for ($i = 0; $i < $max_level_len; $i++) {\n    $current_level\
    \ = $paren_levels[$i];\n    $next_level = $paren_levels[$i + 1];\n    if ($current_level\
    \ != $next_level) {\n      $max_level = $i;\n      break;\n    }\n  }\n  return\
    \ $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level\
    \ = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $level++;\n        } else if ($paren == ')') {\n    \
    \        $level--;\n            if ($level < 0) {\n                $max_level\
    \ = 0;\n                break;\n            }\n        }\n        $max_level =\
    \ max($max_level, $level);\n    }\n    return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } elseif ($paren == ')') {\n            $level--;\n        } elseif ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n    }\n    return\
    \ $max_level;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\nI wrote\
    \ a recursive function for this purpose.\n<code>", "  $paren_array = explode('\
    \ ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  $paren_level = 0;\n\
    \  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n      $level++;\n\
    \      if ($level > $max_level) {\n        $max_level = $level;\n      }\n   \
    \ } else if ($paren == ')') {\n      $level--;\n      if ($level < $max_level)\
    \ {\n        $max_level = $level;\n      }\n    } else if ($paren == '') {\n \
    \     $paren_level++;\n    }\n  }\n  return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $level = 0;\n    $max_level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } elseif ($paren == ')') {\n            $level--;\n            if ($level\
    \ < 0) {\n                $max_level = 0;\n                break;\n          \
    \  }\n        } elseif ($level > 0) {\n            $max_level = max($max_level,\
    \ $level);\n        }\n    }\n    return $max_level;\n}\n", "  $levels = array();\n\
    \  $paren_level = 0;\n  $paren_nesting = 0;\n  $paren_levels = array();\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n\
    \  $paren_nesting++;\n  $paren_levels[] = $paren_level;\n  $paren_nestings[] =\
    \ $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n  $paren_levels[] =\
    \ $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n\
    \  $paren_nesting++;\n  $paren_levels[] = $paren_level;\n  $paren_nestings[] =\
    \ $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n  $paren_levels[] =\
    \ $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n\
    \  $paren_nesting++;\n  $paren_levels[] = $paren_level;\n  $paren_nestings[] =\
    \ $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n  $paren_levels[] =\
    \ $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n\
    \  $paren_nesting++;\n  $paren_levels[] = $paren_level;\n  $paren_nestings[] =\
    \ $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n  $paren_levels[] =\
    \ $paren_level;\n  $paren_nestings[] = $paren_nesting;\n  $paren_level++;\n  $paren_nesting++;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_nesting", "    $paren_array = explode('\
    \ ', $paren_string);\n    $levels = array();\n    $level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n        }\n        $levels[]\
    \ = $level;\n    }\n    return $levels;\n}\n", "  $nested_parens = array();\n\
    \  $paren_level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char === '(') {\n      $paren_stack[$paren_level]++;\n\
    \    } else if ($char === ')') {\n      $paren_stack[$paren_level]--;\n      if\
    \ ($paren_stack[$paren_level] === 0) {\n        $nested_parens[] = $paren_level;\n\
    \      }\n    }\n    $paren_level++;\n  }\n  return $nested_parens;\n}\n", " \
    \ $paren_levels = array();\n  $paren_levels_stack = array();\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[] = 0;\n  $paren_levels_stack[]\
    \ = 0;", "  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n \
    \ $paren_stack_string = '';\n  foreach (explode(' ', $paren_string) as $char)\
    \ {\n    if ($char == '(') {\n      $paren_stack[] = $level;\n      $paren_stack_string\
    \ .= $char;\n    } else if ($char == ')') {\n      $level = max($paren_stack[$paren_stack.length\
    \ - 1], $level);\n      $paren_stack_string = trim($paren_stack_string, ' ');\n\
    \      $paren_stack_string = $paren_stack_string.$char;\n    } else {\n      $paren_stack_string\
    \ = $paren_stack_string.$char;\n    }\n  }\n  return $paren_stack;\n}\n", "  \
    \  $paren_array = explode(' ', $paren_string);\n    $level = 0;\n    $max_level\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $level++;\n        } else if ($paren == ')') {\n            $level--;\n\
    \            if ($level < 0) {\n                $max_level = 0;\n            \
    \    break;\n            }\n        }\n        $max_level = max($max_level, $level);\n\
    \    }\n    return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $level++;\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < 0) {\n        $max_level = 0;\n        break;\n      }\n \
    \   }\n    $max_level = max($max_level, $level);\n  }\n  return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $level) {\n    $level_array = explode(')',\
    \ $level);\n    if (count($level_array) > $max_level) {\n      $max_level = count($level_array);\n\
    \      $max_level_array = $level_array;\n    }\n  }\n  return $max_level;\n}\n",
  "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $paren) {\n        $level = 0;\n       \
    \ $paren_array = explode(')', $paren);\n        foreach ($paren_array as $nested_paren)\
    \ {\n            $level++;\n            $nested_paren_array = explode('(', $nested_paren);\n\
    \            $nested_paren_array = $nested_paren_array[0];\n            if ($nested_paren_array\
    \ != '') {\n                $max_level_array[$level] = $max_level;\n         \
    \   }\n        }\n        $max_level = $level;\n    }\n    return $max_level_array;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $paren_array_size\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n", "  $nested_levels = array();\n\
    \  $paren_level = 0;\n  $paren_nesting = 0;\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_nesting++;\n    } else\
    \ if ($paren == ')') {\n      $paren_nesting--;\n    }\n    if ($paren_nesting\
    \ < 0) {\n      $nested_levels[] = $paren_level;\n      $paren_level = 0;\n  \
    \  }\n    $paren_level++;\n  }\n  return $nested_levels;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array =\
    \ [];\n    foreach ($paren_array as $paren) {\n        $paren_level = strlen($paren);\n\
    \        if ($paren_level > $max_level) {\n            $max_level = $paren_level;\n\
    \        }\n        if ($paren_level > $max_level_array[0]) {\n            $max_level_array\
    \ = $paren_level;\n        }\n    }\n    return $max_level_array;\n}", "  $paren_array\
    \ = explode(' ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $level++;\n    }\
    \ else if ($paren == ')') {\n      $level--;\n      if ($level < 0) {\n      \
    \  $max_level = $level;\n      }\n    }\n  }\n  return $max_level;\n}\n", "  \
    \  $paren_array = explode(' ', $paren_string);\n    $paren_array_size = count($paren_array);\n\
    \    $max_level = 0;\n    $level = 0;\n    $paren_array_index = 0;\n    $paren_array_value\
    \ = null;\n    foreach ($paren_array as $paren_array_value) {\n        if ($paren_array_value\
    \ == '(') {\n            $level++;\n        } else if ($paren_array_value == ')')\
    \ {\n            $level--;\n        }\n        if ($level > $max_level) {\n  \
    \          $max_level = $level;\n        }\n        if ($level < 0) {\n      \
    \      $level = 0;\n        }\n        if ($level == 0 && $paren_array_index >\
    \ 0) {\n            $max_level = $level;\n        }\n        $paren_array_index++;\n\
    \    }\n    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $level = 0;\n    $paren_level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        \
    \    $paren_level++;\n        } elseif ($paren == ')') {\n            $level--;\n\
    \            $paren_level--;\n        }\n        if ($level > $max_level) {\n\
    \            $max_level = $level;\n        }\n        if ($paren_level > $max_level)\
    \ {\n            $max_level = $paren_level;\n        }\n    }\n    return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = $level;\n      }\n    }\n  }\n  return $max_level;\n\
    }\n", "  $nested_level = 0;\n  $paren_stack = array();\n  foreach (explode(' ',\
    \ $paren_string) as $paren) {\n    if ($paren == '(') {\n      $paren_stack[]\
    \ = $paren;\n    } else if ($paren == ')') {\n      $nested_level--;\n      if\
    \ ($nested_level == 0) {\n        $paren_stack = array_reverse($paren_stack);\n\
    \        return $paren_stack;\n      }\n    }\n  }\n  return $nested_level;\n\
    }\n", "    $nested_level = 0;\n    $nested_parens = array();\n    $paren_chars\
    \ = str_split($paren_string);\n    foreach ($paren_chars as $char) {\n       \
    \ if ($char == '(') {\n            $nested_parens[] = $nested_level;\n       \
    \     $nested_level++;\n        } elseif ($char == ')') {\n            $nested_level--;\n\
    \            $nested_parens[] = $nested_level;\n        }\n    }\n    return $nested_parens;\n\
    }\n", "    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $parens\
    \ = preg_split('/\\s*\\((?!\\?)/', $paren_string);\n    $levels = array_fill(0,\
    \ count($parens), 0);\n    foreach ($parens as $i => $paren) {\n        $level\
    \ = 0;\n        foreach ($paren as $char) {\n            if ($char === '(') {\n\
    \                $level++;\n            } else if ($char === ')') {\n        \
    \        $level--;\n            }\n        }\n        $levels[$i] = $level;\n\
    \    }\n    return $levels;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $level++;\n        } else if ($paren\
    \ == ')') {\n            $level--;\n            if ($level < 0) {\n          \
    \      $max_level = 0;\n                break;\n            }\n        }\n   \
    \     $max_level = max($max_level, $level);\n    }\n    return $max_level;\n}\n",
  "    $paren_array = explode(' ', $paren_string);\n    $level = 0;\n    $max_level\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $level++;\n        } else if ($paren == ')') {\n            $level--;\n\
    \            if ($level < 0) {\n                $max_level = 0;\n            \
    \    break;\n            }\n        }\n        $max_level = max($max_level, $level);\n\
    \    }\n    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_levels = array();\n    $max_level = 0;\n    foreach ($paren_array\
    \ as $paren_string) {\n        $paren_levels[] = count($paren_levels);\n     \
    \   if ($paren_string == '(') {\n            $max_level++;\n        } else if\
    \ ($paren_string == ')') {\n            $max_level--;\n        }\n    }\n    return\
    \ $paren_levels;\n}\n", "  $paren_array = explode(' ', $paren_string);\n  $level\
    \ = 0;\n  $max_level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $level++;\n      if ($level > $max_level) {\n        $max_level\
    \ = $level;\n      }\n    } else if ($paren == ')') {\n      $level--;\n    }\n\
    \  }\n  return $max_level;\n}\n", "  $paren_levels = array();\n  $paren_levels_string\
    \ = array();\n  $paren_levels_string[0] = $paren_string;\n  $paren_levels_string[1]\
    \ = '';\n  $paren_levels_string[2] = '';\n  $paren_levels_string[3] = '(';\n \
    \ $paren_levels_string[4] = ')';\n  $paren_levels_string[5] = '(';\n  $paren_levels_string[6]\
    \ = ')';\n  $paren_levels_string[7] = '(';\n  $paren_levels_string[8] = ')';\n\
    \  $paren_levels_string[9] = '(';\n  $paren_levels_string[10] = ')';\n  $paren_levels_string[11]\
    \ = '(';\n  $paren_levels_string[12] = ')';\n  $paren_levels_string[13] = '(';\n\
    \  $paren_levels_string[14] = ')';\n  $paren_levels_string[15] = '(';\n  $paren_levels_string[16]\
    \ = ')';\n  $paren_levels_string[17] = '(';\n  $paren_levels_string[18] = ')';\n\
    \  $paren_levels_string[19] = '(';\n  $paren_levels_string[20] = ')';\n  $paren_levels_string[21]\
    \ = '(';\n  $paren_levels_string[22] = ')';\n  $paren_levels_string[23] = '(';\n\
    \  $paren_levels_string[24] = ')';\n  $paren_levels_string[25] = '(';\n  $paren_levels_string[26]\
    \ = ')';\n  $paren_levels_string[27] = '(';\n  $paren_levels_string[28] = ')';\n\
    \  $paren_levels_string[29] = '(';\n  $paren_levels_string[30] = '(';\n  $paren_levels_string[31]\
    \ = '(';\n  $paren_levels_string[32] = ')';\n  $paren_levels_string[33] = '(';\n\
    \  $paren_levels_string[34] = ')';\n  $paren_levels_string[35] = '(';\n  $paren_levels_string[36]\
    \ = ')';\n  $paren_levels_string[37] = '(';\n  $paren_levels_string[38] = ')';\n\
    \  $paren_levels_string[39] = '(';\n  $paren_levels_string[40] = '(';\n  $paren_levels_string[41]\
    \ = '(';\n  $paren_levels_string", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $level++;\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < 0) {\n        $max_level = 0;\n        break;\n      }\n \
    \   }\n    $max_level = max($max_level, $level);\n  }\n  return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $level++;\n      $paren_level++;\n    } elseif ($paren == ')')\
    \ {\n      $level--;\n      $paren_level--;\n    }\n    if ($level > $max_level)\
    \ {\n      $max_level = $level;\n    }\n    if ($level < $max_level && $paren_level\
    \ > $max_level) {\n      $max_level = $paren_level;\n    }\n  }\n  return $max_level;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_item) {\n   \
    \     $paren_item = trim($paren_item);\n        if ($paren_item == '') {\n   \
    \         continue;\n        }\n        $level = 0;\n        $paren_item = str_replace('(',\
    \ ' ( ', $paren_item);\n        $paren_item = str_replace(')', ' ) ', $paren_item);\n\
    \        $paren_item = str_replace('(', ' ( ', $paren_item);\n        $paren_item\
    \ = str_replace(')', ' ) ', $paren_item);\n        $paren_item = str_replace('(',\
    \ ' ( ', $paren_item);\n        $paren_item = str_replace(')', ' ) ', $paren_item);\n\
    \        $paren_item = str_replace('(', ' ( ', $paren_item);\n        $paren_item\
    \ = str_replace(')', ' ) ', $paren_item);\n        $paren_item = str_replace('(',\
    \ ' ( ', $paren_item);\n        $paren_item = str_replace(')', ' ) ', $paren_item);\n\
    \        $paren_item = str_replace('(', ' ( ', $paren_item);\n        $paren_item\
    \ = str_replace(')', ' ) ', $paren_item);\n        $paren_item = str_replace('(',\
    \ ' ( ', $paren_item);\n        $paren_item = str_replace(')', ' ) ', $paren_item);\n\
    \        $paren_item = str_replace('(', ' ( ', $paren_item);\n        $paren_item\
    \ = str_replace(')', ' ) ', $paren_item);\n        $paren_item = str_replace('(',\
    \ ' ( ', $paren_item);\n        $paren_item = str_replace(')', ' ) ', $paren_item);\n\
    \        $paren_item = str_replace('(', ' ( ', $paren_item);\n        $paren_item\
    \ = str_replace(')', ' ) ', $paren_item);\n        $paren_item = str_replace('(',\
    \ ' ( ', $paren_item);\n        $paren_item = str_replace(')', ' ) ', $paren_item);\n\
    \        $paren_item = str_replace('(', ' ( ', $paren_item);\n        $paren_item\
    \ = str_replace(')', ' ) ', $paren_item);\n        $paren_item = str_replace('(',\
    \ ' ( ', $paren_item);\n        $paren_item = str_replace(')', ' ) ', $paren_item);\n\
    \        $paren_item = str_replace('(', ' ( ', $paren_item);\n        $paren_item\
    \ = str_replace(')', ' ) ', $paren_item);\n", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $paren_levels = array();\n    $max_level = 0;\n    foreach\
    \ ($paren_array as $paren_string) {\n        $paren_level = 0;\n        $paren_array\
    \ = explode(' ', $paren_string);\n        foreach ($paren_array as $paren_string)\
    \ {\n            $paren_level++;\n        }\n        $paren_levels[] = $paren_level;\n\
    \        if ($paren_level > $max_level) {\n            $max_level = $paren_level;\n\
    \        }\n    }\n    return $max_level;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $max_level_array = [];\n    foreach\
    \ ($paren_array as $paren_group) {\n        $paren_group_array = explode('(',\
    \ $paren_group);\n        $paren_group_array2 = explode(')', $paren_group);\n\
    \        $level = 0;\n        foreach ($paren_group_array as $paren_group_element)\
    \ {\n            $paren_group_element2 = explode(')', $paren_group_element);\n\
    \            $paren_group_element2 = array_reverse($paren_group_element2);\n \
    \           $paren_group_element2 = array_pop($paren_group_element2);\n      \
    \      $paren_group_element2 = array_pop($paren_group_element2);\n           \
    \ $paren_group_element2 = array_pop($paren_group_element2);\n            $level++;\n\
    \        }\n        $max_level_array[] = $level;\n        if ($level > $max_level)\
    \ {\n            $max_level = $level;\n        }\n    }\n    return $max_level_array;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(')', $paren_string);\n        $level = 0;\n   \
    \     foreach ($paren_array as $paren_string) {\n            $paren_array = explode('(',\
    \ $paren_string);\n            $level++;\n        }\n        if ($level > $max_level)\
    \ {\n            $max_level = $level;\n            $max_level_array = $paren_array;\n\
    \        }\n    }\n    return $max_level_array;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $level = 0;\n  $paren_levels = array();\n  $paren_levels_len = array();\n \
    \ $paren_levels_len = count($paren_levels_len);\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren_levels_len[$paren_levels_len - 1] = 0;\n  $paren_levels_len[$paren_levels_len\
    \ - 1] = 0;\n  $paren", "    $paren_array = explode(' ', $paren_string);\n   \
    \ $levels = array();\n    $level = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $levels[$level]++;\n        } else\
    \ if ($paren == ')') {\n            $levels[$level]--;\n        }\n        $level++;\n\
    \    }\n    return $levels;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $level++;\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < 0) {\n        $max_level = 0;\n        break;\n      }\n \
    \   }\n    $max_level = max($max_level, $level);\n  }\n  return $max_level;\n\
    }\n", "  $level = 0;\n  $paren_levels = array();\n  $paren_levels_len = count($paren_levels);\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n  $paren_levels_len--;\n\
    \  $paren_levels_len--;", "    $paren_array = explode(' ', $paren_string);\n \
    \   $paren_array_count = count($paren_array);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $paren_string) {\n        $paren_array_count\
    \ = count($paren_array);\n        $paren_array = explode(' ', $paren_string);\n\
    \        $paren_array_count = count($paren_array);\n        if ($paren_array_count\
    \ > $max_level) {\n            $max_level = $paren_array_count;\n        }\n \
    \   }\n    for ($i = 0; $i < $max_level; $i++) {\n        $max_level_array[$i]\
    \ = $i;\n    }\n    $max_level_array_count = count($max_level_array);\n    for\
    \ ($i = 0; $i < $max_level_array_count; $i++) {\n        $paren_array[$max_level_array[$i]]\
    \ = $i;\n    }\n    $paren_array_count = count($paren_array);\n    $max_level_array_count\
    \ = count($max_level_array);\n    $paren_array_count_2 = $paren_array_count -\
    \ 1;\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        for ($j = 0;\
    \ $j < $paren_array_count_2; $j++) {\n            if ($paren_array[$i] == $paren_array[$j])\
    \ {\n                $paren_array[$i] = $j;\n            }\n        }\n    }\n\
    \    $max_level_array_count_2 = count($max_level_array) - 1;\n    for ($i = 0;\
    \ $i < $max_level_array_count; $i++) {\n        for ($j = 0; $j < $max_level_array_count_2;\
    \ $j++) {\n            if ($max_level_array[$i] == $max_level_array[$j]) {\n \
    \               $max_level_array[$i] = $j;\n            }\n        }\n    }\n\
    \    $max_level_array_count_2 = count($max_level_array) - 1;\n    for ($i = 0;\
    \ $i < $max_level_array_count_2; $i++) {\n        for ($j = 0; $j < $max_level_array_count_2;\
    \ $j++) {\n            if ($max_level_array[$i] == $max_level_array[$j]) {\n \
    \               $max_level_array[$i] = $j;\n            }\n        }\n    }\n\
    \    $max_level_array_count_2 = count($max_level_array) - 1;\n    for ($i = 0;\
    \ $i < $max_level_array_count_2; $i++) {\n        for ($j = 0; $j < $max_level_array_count_2;\
    \ $j++) {\n            if ($max_level_array[$i] == $max_level_array[$j]) {\n \
    \               $max_level_array[$i] = $j;\n            }\n        }\n    }\n\
    \    $max_level_array_count_2 = count($max_", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n    }\n    return\
    \ $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level\
    \ = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $level++;\n        } else if ($paren == ')') {\n    \
    \        $level--;\n        }\n        if ($level > $max_level) {\n          \
    \  $max_level = $level;\n        }\n    }\n    return $max_level;\n}\n", "   \
    \ $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_paren_array\
    \ = [];\n    foreach ($paren_array as $paren_element) {\n        if ($paren_element\
    \ == '(') {\n            $max_level++;\n            $max_level_paren_array[] =\
    \ $paren_element;\n        } elseif ($paren_element == ')') {\n            $max_level--;\n\
    \            if ($max_level < 0) {\n                return false;\n          \
    \  }\n            $max_level_paren_array[] = $paren_element;\n        }\n    }\n\
    \    return $max_level_paren_array;\n}\n", "  $level = 0;\n  $nested_parens =\
    \ [];\n  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren ==\
    \ '(') {\n      $level++;\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < 0) {\n        throw new Exception('Invalid parenthesis string');\n\
    \      }\n    } else if ($level > 0) {\n      $nested_parens[] = $level;\n   \
    \ }\n  }\n  return $nested_parens;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $paren) {\n        $level = 0;\n        $paren_array = explode(')', $paren);\n\
    \        foreach ($paren_array as $nested_paren) {\n            $level++;\n  \
    \          $nested_paren_array = explode('(', $nested_paren);\n            foreach\
    \ ($nested_paren_array as $nested_paren_element) {\n                $level++;\n\
    \            }\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n            $max_level_array = $paren_array;\n        }\n    }\n\
    \    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_paren_array = [];\n    foreach ($paren_array\
    \ as $paren_element) {\n        if ($paren_element == '(') {\n            $max_level++;\n\
    \            $max_level_paren_array[] = $paren_element;\n        } elseif ($paren_element\
    \ == ')') {\n            $max_level--;\n            $max_level_paren_array[] =\
    \ $paren_element;\n        }\n    }\n    return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    $paren_level\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $level++;\n            $paren_level++;\n        } elseif ($paren\
    \ == ')') {\n            $level--;\n            $paren_level--;\n        } elseif\
    \ ($paren == '') {\n            $level = 0;\n            $paren_level = 0;\n \
    \       }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n        if ($paren_level > $max_level) {\n            $max_level =\
    \ $paren_level;\n        }\n    }\n    return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array_length = count($paren_array);\n\
    \    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length; $i++) {\n   \
    \     if ($paren_array[$i] === '(') {\n            $max_level++;\n        } else\
    \ if ($paren_array[$i] === ')') {\n            $max_level--;\n        }\n    }\n\
    \    return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $max_level_array = [];\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      $max_level++;\n    } else if ($paren == ')')\
    \ {\n      $max_level--;\n      if ($max_level < 0) {\n        return $max_level_array;\n\
    \      }\n    }\n    $max_level_array[] = $max_level;\n  }\n  return $max_level_array;\n\
    }", "  $paren_array = explode(' ', $paren_string);\n  $levels = array();\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $levels[$level]++;\n    } else if ($paren == ')') {\n      $levels[$level]--;\n\
    \      if ($levels[$level] == 0) {\n        $level++;\n      }\n    }\n  }\n \
    \ return $level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n   \
    \ $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $level)\
    \ {\n        if ($level == '(') {\n            $max_level++;\n        } else if\
    \ ($level == ')') {\n            $max_level--;\n        }\n        $max_level_array[]\
    \ = $max_level;\n    }\n    return $max_level_array;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array_length = count($paren_array);\n\
    \    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length; $i++) {\n   \
    \     if ($paren_array[$i] === '(') {\n            $max_level++;\n        } else\
    \ if ($paren_array[$i] === ')') {\n            $max_level--;\n        }\n    }\n\
    \    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_paren_array = [];\n    foreach ($paren_array\
    \ as $paren_string) {\n        $paren_array = explode(')', $paren_string);\n \
    \       $level = 0;\n        foreach ($paren_array as $paren_string) {\n     \
    \       $paren_array = explode('(', $paren_string);\n            $level++;\n \
    \       }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \            $max_level_paren_array = $paren_array;\n        }\n    }\n    return\
    \ $max_level_paren_array;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $max_level++;\n       \
    \ } else if ($paren == ')') {\n            $max_level--;\n            if ($max_level\
    \ < 0) {\n                return false;\n            }\n        } else {\n   \
    \         if ($max_level > 0) {\n                return false;\n            }\n\
    \        }\n        $max_level_array[] = $max_level;\n    }\n    return $max_level_array;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = $level;\n      }\n    }\n  }\n  return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $max_level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n      if ($level > $max_level) {\n        $max_level = $level;\n\
    \      }\n    } elseif ($paren == ')') {\n      $level--;\n    }\n  }\n  return\
    \ $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level\
    \ = 0;\n  $level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren ==\
    \ '(') {\n      $level++;\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < 0) {\n        $max_level = 0;\n        break;\n      }\n \
    \   }\n    $max_level = max($max_level, $level);\n  }\n  return $max_level;\n}",
  "  $level = 0;\n  $nested_levels = array();\n  $paren_array = explode(' ', $paren_string);\n\
    \  foreach ($paren_array as $paren_string) {\n    if ($paren_string == '(') {\n\
    \      $level++;\n    } else if ($paren_string == ')') {\n      $level--;\n  \
    \    if ($level < 0) {\n        $nested_levels[] = $level;\n      }\n    }\n \
    \ }\n  return $nested_levels;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_paren_array = [];\n    foreach ($paren_array\
    \ as $paren_string) {\n        $paren_array = explode(')', $paren_string);\n \
    \       $level = 0;\n        foreach ($paren_array as $paren_string) {\n     \
    \       $paren_array = explode('(', $paren_string);\n            $level++;\n \
    \       }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \            $max_level_paren_array = $paren_array;\n        }\n    }\n    return\
    \ $max_level_paren_array;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $levels = array();\n  $level = 0;\n  foreach ($paren_array as $paren) {\n \
    \   if ($paren == '(') {\n      $levels[$level]++;\n    } else if ($paren == ')')\
    \ {\n      $levels[$level]--;\n      if ($levels[$level] == 0) {\n        $level++;\n\
    \      }\n    }\n  }\n  return $levels;\n}\n", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_level = 0;\n    $level = 0;\n    $paren_levels = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $level++;\n            $paren_levels[$level] = $level;\n        } elseif\
    \ ($paren == ')') {\n            $level--;\n            $paren_levels[$level]\
    \ = $level;\n        } else {\n            $level = $paren_levels[$level];\n \
    \       }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\nI wrote a recursive function for this problem in PHP:\n<code>",
  "  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = '';\n  $paren_stack_len = count($paren_stack);\n  $paren_stack_pos = 0;\n\
    \  $paren_stack_last_pos = 0;\n  while ($paren_stack_pos < $paren_stack_len) {\n\
    \    $paren_stack_last_pos = $paren_stack_pos;\n    $paren_stack_pos = $paren_stack[$paren_stack_pos];\n\
    \    $paren_stack_string .= $paren_string[$paren_stack_pos];\n    if ($paren_string[$paren_stack_pos]\
    \ == '(') {\n      $paren_stack[$paren_stack_pos] = $paren_stack[$paren_stack_last_pos]\
    \ + 1;\n    }\n    if ($paren_string[$paren_stack_pos] == ')') {\n      $paren_stack[$paren_stack_pos]\
    \ = $paren_stack[$paren_stack_last_pos] - 1;\n    }\n  }\n  return $paren_stack;\n\
    }\n", "  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $parens\
    \ = preg_split('/\\s+/', $paren_string);\n  $levels = array();\n  $level = 0;\n\
    \  foreach ($parens as $paren) {\n    if ($paren == '(') {\n      $levels[$level]\
    \ = $level;\n      $level++;\n    } else if ($paren == ')') {\n      $levels[$level]\
    \ = $level;\n      $level--;\n    }\n  }\n  return $levels;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nI like your solution, but I prefer a solution without\
    \ recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| a tags=php,parentheses,regex\
    \ |>\nThis regex will match all nested parentheses:\n<code>\n\\((?!\\()[^()]+\\\
    )\n</code>\nDemo\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I prefer\
    \ a solution without recursion.\n<|/ c |>\n<| a tags=php,parentheses,regex |>\n\
    This regex will match all nested parentheses:\n<code>\n\\((?!\\()[^()]+\\)\n</code>\n\
    Demo\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThis regex will match all nested parentheses:\n\
    <code>\n\\((?!\\()[^()]+\\)\n</code>\nDemo\n<|/ a tags=php,parentheses,regex |>\n\
    <| a dscore=1 |>\nThis regex will match all nested parentheses:\n<code>\n\\((?!\\\
    ()[^()]+\\)\n</code>\nDemo\n<|/ a tags=php,parentheses,regex |>\n<| a tags=php,parentheses,regex\
    \ |>\n<code>\n$string = '(()()) ((())) () ((())()())';\npreg_match_all('/\\((?!\\\
    ()[^()]+\\)/', $string, $matches);\nprint_r($matches);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\n$string = '(()()) ((())) () ((())()())';\npreg_match_all('/\\\
    ((?!\\()[^()]+\\)/', $string, $matches);\nprint_r($matches);\n</code>\n<|/ a tags=php,parentheses,regex ",
  "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $level\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $level++;\n        } else if ($paren == ')') {\n            $level--;\n\
    \            if ($level < 0) {\n                $max_level = 0;\n            \
    \    break;\n            }\n        }\n        $max_level = max($max_level, $level);\n\
    \    }\n    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_count = count($paren_array);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $paren_item) {\n        $paren_item_array\
    \ = explode('(', $paren_item);\n        $paren_item_array_count = count($paren_item_array);\n\
    \        if ($paren_item_array_count > $max_level) {\n            $max_level =\
    \ $paren_item_array_count;\n            $max_level_array = $paren_item_array;\n\
    \        }\n    }\n    return $max_level_array;\n}\n", "  $paren_array = explode('\
    \ ', $paren_string);\n  $level = 0;\n  $max_level = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n      if ($level >\
    \ $max_level) {\n        $max_level = $level;\n      }\n    } elseif ($paren ==\
    \ ')') {\n      $level--;\n      if ($level < $max_level) {\n        $max_level\
    \ = $level;\n      }\n    }\n  }\n  return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array_size = count($paren_array);\n\
    \    $max_level = 0;\n    for ($i = 0; $i < $paren_array_size; $i++) {\n     \
    \   if ($paren_array[$i] === '(') {\n            $max_level++;\n        } else\
    \ if ($paren_array[$i] === ')') {\n            $max_level--;\n        }\n    }\n\
    \    return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  $paren_level = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_level++;\n    } else if\
    \ ($paren == ')') {\n      $paren_level--;\n      if ($paren_level == 0) {\n \
    \       $level++;\n      }\n    }\n    if ($paren_level > $max_level) {\n    \
    \  $max_level = $paren_level;\n    }\n  }\n  return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } else if ($paren == ')') {\n            $level--;\n        }\n     \
    \   if ($level > $max_level) {\n            $max_level = $level;\n        }\n\
    \    }\n    return $max_level;\n}\n", "  $level = 0;\n  $paren_string = preg_replace('/\\\
    s+/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\\
    )\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\\
    )\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\", "    $paren_array = explode(' ', $paren_string);\n   \
    \ $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $paren_string)\
    \ {\n        $paren_array = explode(')', $paren_string);\n        $level = 0;\n\
    \        foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode('(', $paren_string);\n            $level++;\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n        $max_level_array[]\
    \ = $level;\n    }\n    return $max_level_array;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $levels = array();\n    $level = 0;\n    $paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } else if ($paren == ')') {\n          \
    \  $paren_count--;\n            if ($paren_count == 0) {\n                $levels[]\
    \ = $level;\n            }\n        }\n        $level++;\n    }\n    return $levels;\n\
    }\n", "    $nested_level = 0;\n    $paren_stack = [];\n    $paren_stack[] = 0;\n\
    \    $paren_stack_string = '';\n    $paren_stack_last_char = '';\n    $paren_stack_last_char_length\
    \ = 0;\n    $paren_stack_last_char_length_count = 0;\n    $paren_stack_last_char_length_count2\
    \ = 0;\n    $paren_stack_last_char_length_count3 = 0;\n    $paren_stack_last_char_length_count4\
    \ = 0;\n    $paren_stack_last_char_length_count5 = 0;\n    $paren_stack_last_char_length_count6\
    \ = 0;\n    $paren_stack_last_char_length_count7 = 0;\n    $paren_stack_last_char_length_count8\
    \ = 0;\n    $paren_stack_last_char_length_count9 = 0;\n    $paren_stack_last_char_length_count10\
    \ = 0;\n    $paren_stack_last_char_length_count11 = 0;\n    $paren_stack_last_char_length_count12\
    \ = 0;\n    $paren_stack_last_char_length_count13 = 0;\n    $paren_stack_last_char_length_count14\
    \ = 0;\n    $paren_stack_last_char_length_count15 = 0;\n    $paren_stack_last_char_length_count16\
    \ = 0;\n    $paren_stack_last_char_length_count17 = 0;\n    $paren_stack_last_char_length_count18\
    \ = 0;\n    $paren_stack_last_char_length_count19 = 0;\n    $paren_stack_last_char_length_count20\
    \ = 0;\n    $paren_stack_last_char_length_count21 = 0;\n    $paren_stack_last_char_length_count22\
    \ = 0;\n    $paren_stack_last_char_length_count23 = 0;\n    $paren_stack_last_char_length_count24\
    \ = 0;\n    $paren_stack_last_char_length_count25 = 0;\n    $paren_stack_last_char_length_count26\
    \ = 0;\n    $paren_stack_last_char_length_count27 = 0;\n    $paren_stack_last_char_length_count28\
    \ = 0;\n    $paren_stack_last_char_length_count29 = 0;\n    $paren_stack_last_char_length_count30\
    \ = 0;\n    $paren_stack_last_char_length_count31 = 0;\n    $paren_stack_last_char_length_count32\
    \ = 0;\n    $paren_stack_last_char_length_count33 = 0;\n    $paren_stack_last_char_length_count34\
    \ = 0;\n    $paren_stack_last_char_length_count35 = 0;\n    $paren_stack_last_char_length_count36\
    \ = 0;\n    $paren_stack_last_char_length_count37 = 0;\n    $paren_stack_last_char_length_count38\
    \ = 0;\n    $paren_stack_last_char_length_count39 = 0;\n    $paren_stack_last_char_length_count40\
    \ = 0;\n    $paren_stack_last_char_length_count41 = 0;\n    $paren_stack_last_char_length_count42\
    \ = 0;\n    $paren_stack_last_char_length_count43 = 0;\n    $paren", "  $nested_levels\
    \ = array();\n  $paren_level = 0;\n  $paren_nesting = 0;\n  $paren_nesting_level\
    \ = 0;\n  $paren_nesting_count = 0;\n  $paren_nesting_count_max = 0;\n  $paren_nesting_count_max_index\
    \ = 0;\n  $paren_nesting_count_max_index2 = 0;\n  $paren_nesting_count_max2 =\
    \ 0;\n  $paren_nesting_count_max3 = 0;\n  $paren_nesting_count_max4 = 0;\n  $paren_nesting_count_max5\
    \ = 0;\n  $paren_nesting_count_max6 = 0;\n  $paren_nesting_count_max7 = 0;\n \
    \ $paren_nesting_count_max8 = 0;\n  $paren_nesting_count_max9 = 0;\n  $paren_nesting_count_max10\
    \ = 0;\n  $paren_nesting_count_max11 = 0;\n  $paren_nesting_count_max12 = 0;\n\
    \  $paren_nesting_count_max13 = 0;\n  $paren_nesting_count_max14 = 0;\n  $paren_nesting_count_max15\
    \ = 0;\n  $paren_nesting_count_max16 = 0;\n  $paren_nesting_count_max17 = 0;\n\
    \  $paren_nesting_count_max18 = 0;\n  $paren_nesting_count_max19 = 0;\n  $paren_nesting_count_max20\
    \ = 0;\n  $paren_nesting_count_max21 = 0;\n  $paren_nesting_count_max22 = 0;\n\
    \  $paren_nesting_count_max23 = 0;\n  $paren_nesting_count_max24 = 0;\n  $paren_nesting_count_max25\
    \ = 0;\n  $paren_nesting_count_max26 = 0;\n  $paren_nesting_count_max27 = 0;\n\
    \  $paren_nesting_count_max28 = 0;\n  $paren_nesting_count_max29 = 0;\n  $paren_nesting_count_max30\
    \ = 0;\n  $paren_nesting_count_max31 = 0;\n  $paren_nesting_count_max32 = 0;\n\
    \  $paren_nesting_count_max33 = 0;\n  $paren_nesting_count_max34 = 0;\n  $paren_nesting_count_max35\
    \ = 0;\n  $paren_nesting_count_max36 = 0;\n  $paren_nesting_count_max37 = 0;\n\
    \  $paren_nesting_count_max38 = 0;\n  $paren_nesting_count_max39 = 0;\n  $paren_nesting_count_max40\
    \ = 0;\n  $paren_nesting_count_max41 = 0;\n  $paren_nesting_count_max42 = 0;\n\
    \  $paren_nesting_count_max43 = 0;\n  $paren_nesting_count_max44 = 0;\n  $paren_nesting_count_max45\
    \ = 0;\n  $paren_nesting_count_max46 = 0;\n  $paren", "  $paren_array = explode('\
    \ ', $paren_string);\n  $max_level = 0;\n  $max_level_array = [];\n  foreach ($paren_array\
    \ as $paren) {\n    $paren_level = strlen($paren);\n    if ($paren_level > $max_level)\
    \ {\n      $max_level = $paren_level;\n    }\n    $max_level_array[] = $paren_level;\n\
    \  }\n  return $max_level_array;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $level) {\n        if ($level == '(') {\n            $max_level++;\n       \
    \ } else if ($level == ')') {\n            $max_level--;\n        }\n        if\
    \ ($max_level > $max_level_array[0]) {\n            $max_level_array = $max_level;\n\
    \        }\n    }\n    return $max_level_array;\n}\n", "    $nested_levels = array();\n\
    \    $paren_level = 0;\n    $paren_nesting = 0;\n    $paren_levels = array();\n\
    \    $paren_levels[$paren_level] = $paren_nesting;\n    $paren_levels[$paren_level\
    \ + 1] = 0;\n    $paren_levels[$paren_level + 2] = 0;\n    $paren_levels[$paren_level\
    \ + 3] = 0;\n    $paren_levels[$paren_level + 4] = 0;\n    $paren_levels[$paren_level\
    \ + 5] = 0;\n    $paren_levels[$paren_level + 6] = 0;\n    $paren_levels[$paren_level\
    \ + 7] = 0;\n    $paren_levels[$paren_level + 8] = 0;\n    $paren_levels[$paren_level\
    \ + 9] = 0;\n    $paren_levels[$paren_level + 10] = 0;\n    $paren_levels[$paren_level\
    \ + 11] = 0;\n    $paren_levels[$paren_level + 12] = 0;\n    $paren_levels[$paren_level\
    \ + 13] = 0;\n    $paren_levels[$paren_level + 14] = 0;\n    $paren_levels[$paren_level\
    \ + 15] = 0;\n    $paren_levels[$paren_level + 16] = 0;\n    $paren_levels[$paren_level\
    \ + 17] = 0;\n    $paren_levels[$paren_level + 18] = 0;\n    $paren_levels[$paren_level\
    \ + 19] = 0;\n    $paren_levels[$paren_level + 20] = 0;\n    $paren_levels[$paren_level\
    \ + 21] = 0;\n    $paren_levels[$paren_level + 22] = 0;\n    $paren_levels[$paren_level\
    \ + 23] = 0;\n    $paren_levels[$paren_level + 24] = 0;\n    $paren_levels[$paren_level\
    \ + 25] = 0;\n    $paren_levels[$paren_level + 26] = 0;\n    $paren_levels[$paren_level\
    \ + 27] = 0;\n    $paren_levels[$paren_level + 28] = 0;\n    $paren_levels[$paren_level\
    \ + 29] = 0;\n    $paren_levels[$paren_level + 30] = 0;\n    $paren_levels[$paren_level\
    \ + 31] = 0;\n    $paren_levels[$paren_level + 32] = 0;\n    $paren_levels[$paren_level\
    \ + 33] = 0;\n    $paren_levels[$paren_level + 34] = 0;\n    $paren_levels[$paren_level\
    \ + 35] = 0;\n    $paren_levels[$paren_level + ", "  $paren_array = explode('\
    \ ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n      if ($level < 0) {\n        $max_level = $level;\n\
    \      }\n    }\n  }\n  return $max_level;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $max_level_array = [];\n    foreach\
    \ ($paren_array as $level) {\n        if ($level == '(') {\n            $max_level++;\n\
    \        } else if ($level == ')') {\n            $max_level--;\n        }\n \
    \       if ($max_level > $max_level_array[0]) {\n            $max_level_array\
    \ = $max_level;\n        }\n    }\n    return $max_level_array;\n}\n", "  $level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = '';\n  $paren_stack_string_count = 0;\n  $paren_stack_string_count = 0;\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char === '(') {\n\
    \      $paren_stack_string_count++;\n      $paren_stack_string = $char;\n    }\n\
    \    if ($char === ')') {\n      $paren_stack_string_count--;\n      if ($paren_stack_string_count\
    \ === 0) {\n        $paren_stack[] = $level;\n        $level--;\n      }\n   \
    \ }\n  }\n  return $paren_stack;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $paren_string) {\n        $paren_array = explode(')', $paren_string);\n    \
    \    $level = 0;\n        foreach ($paren_array as $paren_string) {\n        \
    \    $paren_array = explode('(', $paren_string);\n            $level++;\n    \
    \    }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n        $max_level_array[] = $level;\n    }\n    return $max_level_array;\n\
    }\n", "  $level = 0;\n  $paren_stack = [];\n  $paren_stack_count = [];\n  $paren_stack_count[$paren_string[0]]\
    \ = 0;\n  $paren_stack[$paren_string[0]] = $paren_string;\n  $paren_stack_count[$paren_string[0]]\
    \ += 1;\n  $paren_string = trim($paren_string);\n  while ($paren_string) {\n \
    \   $paren_string = trim($paren_string);\n    if ($paren_stack_count[$paren_string[0]]\
    \ > 0) {\n      $level++;\n      $paren_stack_count[$paren_string[0]] -= 1;\n\
    \    }\n    if ($paren_stack_count[$paren_string[0]] == 0) {\n      $level--;\n\
    \      $paren_stack_count[$paren_string[0]] += 1;\n    }\n    $paren_string =\
    \ trim($paren_stack[$paren_string[0]]);\n    $paren_stack_count[$paren_string[0]]\
    \ += 1;\n    $paren_stack[$paren_string[0]] = $paren_string;\n  }\n  return $level;\n\
    }", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        $paren_level\
    \ = strlen($paren);\n        if ($paren_level > $max_level) {\n            $max_level\
    \ = $paren_level;\n        }\n        if ($paren_level > $max_level_array[0])\
    \ {\n            $max_level_array = $paren_level;\n        }\n    }\n    return\
    \ $max_level_array;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $paren_string) {\n        $paren_array = explode(')', $paren_string);\n    \
    \    $level = 0;\n        foreach ($paren_array as $paren_string) {\n        \
    \    $paren_array = explode('(', $paren_string);\n            $level++;\n    \
    \    }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    $max_level_array[] = $max_level;\n    return $max_level_array;\n\
    }\n", "  $levels = array();\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n            if ($level < 0)\
    \ {\n                return $max_level;\n            }\n        }\n        $max_level\
    \ = max($max_level, $level);\n    }\n    return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array =\
    \ [];\n    foreach ($paren_array as $paren) {\n        $level = 0;\n        $paren_array\
    \ = explode(')', $paren);\n        foreach ($paren_array as $nested_paren) {\n\
    \            $level++;\n            $nested_paren_array = explode('(', $nested_paren);\n\
    \            $nested_paren_array = $nested_paren_array[0];\n            if ($nested_paren_array\
    \ != '') {\n                $max_level_array[$level] = $max_level;\n         \
    \   }\n        }\n        if ($level > $max_level) {\n            $max_level =\
    \ $level;\n        }\n    }\n    return $max_level_array;\n}\n", "  $level = 0;\n\
    \  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string = '';\n\
    \  $paren_stack_string_count = 0;\n  foreach (explode(' ', $paren_string) as $char)\
    \ {\n    if ($char == '(') {\n      $paren_stack_string_count++;\n      $paren_stack_string\
    \ = $char;\n    } else if ($char == ')') {\n      $paren_stack_string_count--;\n\
    \      if ($paren_stack_string_count == 0) {\n        $paren_stack_string = $paren_stack_string.$char;\n\
    \        $paren_stack[] = $level;\n        $level--;\n      }\n    }\n  }\n  return\
    \ $paren_stack;\n}\n", "  $paren_levels = array();\n  $paren_levels_count = array();\n\
    \  $paren_levels_count = preg_match_all('/\\(([^()]*+)\\)/', $paren_string, $paren_levels_count);\n\
    \  $paren_levels = array_fill(0, $paren_levels_count[0], 0);\n  $paren_levels_count\
    \ = preg_match_all('/\\(([^()]*+)\\)/', $paren_string, $paren_levels);\n  return\
    \ $paren_levels;\n}\n", "    $paren_array = explode(' ', $paren_string);\n   \
    \ $max_level = 0;\n    $max_level_paren_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $max_level++;\n    \
    \        $max_level_paren_array[] = $paren;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n            $max_level_paren_array[] = $paren;\n\
    \        }\n        if ($max_level > $max_level_paren_array[$max_level_paren_array.length\
    \ - 1])\n            $max_level_paren_array[] = $paren;\n    }\n    return $max_level_paren_array;\n\
    }\n", "  $levels = array();\n  $paren_stack = array();\n  $paren_level = 0;\n\
    \  $paren_open = false;\n  $paren_closed = false;\n  $paren_level_count = 0;\n\
    \  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current\
    \ = 0;\n  $paren_level_count_max = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max\
    \ = 0;\n  $paren_level_count_current = 0;\n  $paren_level_count_max = 0;\n  $",
  "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $paren_string) {\n        $paren_array =\
    \ explode(')', $paren_string);\n        $level = 0;\n        foreach ($paren_array\
    \ as $paren_string) {\n            $paren_array = explode('(', $paren_string);\n\
    \            $level++;\n        }\n        if ($level > $max_level) {\n      \
    \      $max_level = $level;\n        }\n    }\n    $max_level_array[$max_level]\
    \ = $max_level;\n    return $max_level_array;\n}\n", "  $paren_array = explode('\
    \ ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n      if ($level < 0) {\n        $max_level = 0;\n\
    \        break;\n      }\n    }\n    $max_level = max($max_level, $level);\n \
    \ }\n  return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $paren_string) {\n        $paren_array = explode(')', $paren_string);\n    \
    \    $level = 0;\n        foreach ($paren_array as $paren_string) {\n        \
    \    $paren_array = explode('(', $paren_string);\n            $level++;\n    \
    \    }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \            $max_level_array = $paren_array;\n        }\n    }\n    return $max_level_array;\n\
    }\n", "  $nested_parens_levels = array();\n  $paren_level = 0;\n  $paren_nesting\
    \ = 0;\n  $paren_nesting_level = 0;\n  $paren_nesting_level_max = -1;\n  $paren_nesting_level_max_index\
    \ = -1;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_nesting_level_max_index = 0;\n  $paren_nesting_level_max_index\
    \ = 0;\n  $paren_", "  $paren_array = explode(' ', $paren_string);\n  $max_level\
    \ = 0;\n  $level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren ==\
    \ '(') {\n      $level++;\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < 0) {\n        $max_level = $level;\n      }\n    }\n  }\n\
    \  return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $paren_string) {\n        $paren_array = explode(')', $paren_string);\n    \
    \    $level = 0;\n        foreach ($paren_array as $paren_string) {\n        \
    \    $paren_array = explode('(', $paren_string);\n            $level++;\n    \
    \    }\n        $max_level_array[$level] = max($max_level_array[$level], $level);\n\
    \        $max_level = max($max_level, $level);\n    }\n    return $max_level_array[$max_level];\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == '(') {\n      $level++;\n      $paren_levels[$level] = $level;\n\
    \    } else if ($paren == ')') {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = max($max_level, $level);\n\
    \      }\n    }\n  }\n  return $max_level;\n}\n", "  $paren_level = 0;\n  $paren_nesting\
    \ = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string) as $char)\
    \ {\n    if ($char == '(') {\n      $paren_level++;\n      $paren_stack[] = $paren_level;\n\
    \    } else if ($char == ')') {\n      $paren_level--;\n      if ($paren_level\
    \ == 0) {\n        $paren_nesting++;\n      }\n      $paren_stack[] = $paren_level;\n\
    \    }\n  }\n  return $paren_nesting;\n}\n", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n            if ($level < 0)\
    \ {\n                break;\n            }\n        }\n        if ($level > $max_level)\
    \ {\n            $max_level = $level;\n        }\n    }\n    return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_len = count($paren_array);\n  for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n    $paren_levels[$i] = $paren_levels_len - $i;\n  }\n  $max_level\
    \ = 0;\n  $max_level_len = count($paren_levels);\n  for ($i = 0; $i < $max_level_len;\
    \ $i++) {\n    $max_level = max($max_level, $paren_levels[$i]);\n  }\n  $nested_parens\
    \ = array();\n  for ($i = 0; $i < $max_level; $i++) {\n    $nested_parens[$i]\
    \ = array();\n  }\n  for ($i = 0; $i < $paren_levels_len; $i++) {\n    $nested_parens[$i][$paren_array[$i]]\
    \ = $i;\n  }\n  $nested_parens_len = count($nested_parens);\n  for ($i = 0; $i\
    \ < $nested_parens_len; $i++) {\n    $paren_level = $nested_parens[$i];\n    $paren_levels_len\
    \ = count($paren_level);\n    for ($j = 0; $j < $paren_levels_len; $j++) {\n \
    \     $paren_level[$j] = $j;\n    }\n    $max_level_len = count($paren_level);\n\
    \    for ($j = 0; $j < $max_level_len; $j++) {\n      $max_level = max($max_level,\
    \ $paren_level[$j]);\n    }\n  }\n  return $nested_parens;\n}\n", "  $nested_levels\
    \ = array();\n  $paren_level = 0;\n  $paren_nesting = 0;\n  $paren_levels = array();\n\
    \  $paren_levels[$paren_level] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 1] = 0;\n  $paren_levels[$paren_level + 2] = 0;\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_level++;\n      $paren_nesting++;\n\
    \      $paren_levels[$paren_level] = $paren_nesting;\n      $paren_levels[$paren_level\
    \ + 1] = 0;\n      $paren_levels[$paren_level + 2] = 0;\n    } else if ($paren\
    \ == ')') {\n      $paren_level--;\n      $paren_nesting--;\n      $paren_levels[$paren_level]\
    \ = $paren_nesting;\n      $paren_levels[$paren_level + 1] = 0;\n      $paren_levels[$paren_level\
    \ + 2] = 0;\n    } else if ($paren == ' ') {\n      $paren_levels[$paren_level]++;\n\
    \      $paren_levels[$paren_level + 1] = 0;\n      $paren_levels[$paren_level\
    \ + 2] = 0;\n    }\n  }\n  $max_level = 0;\n  $max_nesting = 0;\n  foreach ($paren_levels\
    \ as $level => $nesting) {\n    if ($nesting > $max_nesting) {\n      $max_nesting\
    \ = $nesting;\n      $max_level = $level;\n    }\n  }\n  return $max_level;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not work if there are multiple\
    \ nested parentheses inside each other.\n<|/ c |>\n<| c |>\nThis does not work\
    \ if there are multiple nested parentheses inside each other.\n<|/ c |>\n<| c\
    \ |>\nThis does not work if there are multiple nested parentheses inside each\
    \ other.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a recursive function which works\
    \ fine for me:\n<code>", "  $paren_array = explode(' ', $paren_string);\n  $levels\
    \ = [0];\n  $level = 0;\n  $paren_level = 0;\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      $levels[$level] = $level;\n      $paren_level++;\n\
    \    } else if ($paren == ')') {\n      $levels[$level] = $level;\n      $level--;\n\
    \      if ($level == 0) {\n        $levels[$level] = $level;\n        $level--;\n\
    \      }\n    }\n  }\n  $max_level = max($levels);\n  foreach ($levels as $level)\
    \ {\n    if ($level == $max_level) {\n      return $max_level;\n    }\n  }\n \
    \ return -1;\n}\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level\
    \ = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $level++;\n        } else if ($paren == ')') {\n    \
    \        $level--;\n            if ($level < 0) {\n                $max_level\
    \ = 0;\n                break;\n            }\n        }\n        $max_level =\
    \ max($max_level, $level);\n    }\n    return $max_level;\n}\n", "  $paren_array\
    \ = explode(' ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $level++;\n    }\
    \ else if ($paren == ')') {\n      $level--;\n      if ($level < 0) {\n      \
    \  $max_level = 0;\n        break;\n      }\n    }\n    $max_level = max($max_level,\
    \ $level);\n  }\n  return $max_level;\n}\n", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $paren_array_size = count($paren_array);\n    $max_level\
    \ = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $level++;\n        } else if ($paren == ')') {\n    \
    \        $level--;\n        }\n        if ($level > $max_level) {\n          \
    \  $max_level = $level;\n        }\n    }\n    return $max_level;\n}\n", "   \
    \ $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $paren_string) {\n        $paren_array =\
    \ explode(')', $paren_string);\n        $level = 0;\n        foreach ($paren_array\
    \ as $paren_string) {\n            $paren_array = explode('(', $paren_string);\n\
    \            $level++;\n        }\n        if ($level > $max_level) {\n      \
    \      $max_level = $level;\n            $max_level_array = $paren_array;\n  \
    \      }\n    }\n    return $max_level_array;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $max_level_array = [];\n    foreach\
    \ ($paren_array as $paren_string) {\n        $level = 0;\n        $paren_array\
    \ = explode(' ', $paren_string);\n        foreach ($paren_array as $paren_string)\
    \ {\n            $level++;\n            $paren_array = explode(' ', $paren_string);\n\
    \        }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    foreach ($paren_array as $paren_element) {\n        if ($paren_element ==\
    \ '(') {\n            $max_level++;\n            $max_level_paren_array[] = $paren_element;\n\
    \        } elseif ($paren_element == ')') {\n            $max_level--;\n     \
    \       $max_level_paren_array[] = $paren_element;\n        }\n    }\n    return\
    \ $max_level_paren_array;\n}\n", "  $nested_levels = array();\n  $paren_level\
    \ = 0;\n  $paren_nesting = 0;\n  $paren_levels = array();\n  $paren_levels[$paren_level]\
    \ = $paren_nesting;\n  $paren_levels[$paren_level + 1] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 2] = $paren_nesting;\n  $paren_levels[$paren_level + 3] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 4] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 5] = $paren_nesting;\n  $paren_levels[$paren_level + 6] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 7] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 8] = $paren_nesting;\n  $paren_levels[$paren_level + 9] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 10] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 11] = $paren_nesting;\n  $paren_levels[$paren_level + 12] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 13] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 14] = $paren_nesting;\n  $paren_levels[$paren_level + 15] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 16] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 17] = $paren_nesting;\n  $paren_levels[$paren_level + 18] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 19] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 20] = $paren_nesting;\n  $paren_levels[$paren_level + 21] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 22] = $paren_nesting;\n  $paren_levels[$paren_level\
    \ + 23] = $paren_nesting;\n  $paren_levels[$paren_level + 24] = $paren_nesting;\n\
    \  $paren_levels[$paren_level + 25] = $paren_", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n    }\n    return\
    \ $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n  $paren_array_length\
    \ = count($paren_array);\n  $max_level = 0;\n  $level = 0;\n  for ($i = 0; $i\
    \ < $paren_array_length; $i++) {\n    if ($paren_array[$i] === '(') {\n      $level++;\n\
    \    } else if ($paren_array[$i] === ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = $level;\n        break;\n      }\n    }\n  }\n\
    \  return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $level++;\n        } else if ($paren\
    \ == ')') {\n            $level--;\n            if ($level == 0) {\n         \
    \       $max_level = $level;\n            }\n        }\n    }\n    return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $levels = array();\n \
    \ $level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $levels[$level] = $level;\n      $level++;\n    } else if ($paren == ')')\
    \ {\n      $levels[$level] = $level;\n      $level--;\n    }\n  }\n  return array_pop($levels);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I believe it can be improved.\
    \ For example it fails for `((())))` which has three levels of nesting.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that handles nested parentheses correctly.\n\
    <|/ c |>\n<| a tags=php,parentheses,regex |>\nI wrote a recursive function for\
    \ this purpose:\n<code>", "  $paren_array = explode(' ', $paren_string);\n  $max_level\
    \ = 0;\n  $level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren ==\
    \ '(') {\n      $level++;\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < 0) {\n        $max_level = $level;\n      }\n    }\n  }\n\
    \  return $max_level;\n}\n", "  $level = 0;\n  $paren_stack = array();\n  $paren_stack[]\
    \ = -1;\n  $paren_stack_string = '';\n  $paren_stack_string_count = 0;\n  $paren_stack_string_count\
    \ = 0;\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(')\
    \ {\n      $paren_stack_string_count++;\n      $paren_stack_string = $char;\n\
    \    } else if ($char == ')') {\n      $paren_stack_string_count--;\n      if\
    \ ($paren_stack_string_count == 0) {\n        $paren_stack_string = $paren_stack_string.$char;\n\
    \        $paren_stack[] = $level;\n        $level--;\n      }\n    } else if ($char\
    \ == ' ') {\n      if ($paren_stack_string_count > 0) {\n        $level++;\n \
    \     }\n    }\n  }\n  return $paren_stack;\n}\n</code>\n<|/ a tags=php,parentheses,regex\
    \ |>\n<| c |>\nThis doesn't work for nested parentheses such as `((()))` which\
    \ should return `3` but returns `2`.\n<|/ c |>\n<| c |>\nI tested it and it returns\
    \ 3 for ((()))\n<|/ c |>\n<| c |>\nI tested it and it returns 3 for ((()))\n<|/\
    \ c |>\n<| c |>\nI tested it and it returns 3 for ((()))\n<|/ c |>\n<| c |>\n\
    I tested it and it returns 3 for ((()))\n<|/ c |>\n<| a tags=php,parentheses,regex\
    \ |>\n<code>\n<?php\n$string = '(()())';\n$paren_stack = array();\n$paren_stack_string\
    \ = '';\n$paren_stack_string_count = 0;\n$paren_stack_string_count = 0;\nforeach\
    \ (explode(' ', $string) as $char) {\n    if ($char == '(') {\n        $paren_stack_string_count++;\n\
    \        $paren_stack_string = $char;\n    } else if ($char == ')') {\n      \
    \  $paren_stack_string_count--;\n        if ($paren_stack_string_count == 0) {\n\
    \            $paren_stack_string = $paren_stack_string.$char;\n            $paren_stack[]\
    \ = $level;\n            $level--;\n        }\n    } else if ($char == ' ') {\n\
    \        if ($paren_stack_string_count > 0) {\n            $level++;\n       \
    \ }\n    }\n}\nprint_r($paren_stack);", "  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array =\
    \ [];\n    foreach ($paren_array as $paren) {\n        $paren_level = strlen($paren);\n\
    \        if ($paren_level > $max_level) {\n            $max_level = $paren_level;\n\
    \        }\n        if ($paren_level > $max_level_array[0]) {\n            $max_level_array\
    \ = $paren_level;\n        }\n    }\n    return $max_level_array;\n}\n", "   \
    \ $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $level\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $level++;\n        } else if ($paren == ')') {\n            $level--;\n\
    \            if ($level < 0) {\n                $max_level = 0;\n            \
    \    break;\n            }\n        }\n        $max_level = max($max_level, $level);\n\
    \    }\n    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_count = count($paren_array);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        $level = 0;\n\
    \        $paren_array[$i] = '(' . $paren_array[$i] . ')';\n        $paren_array[$i]\
    \ = preg_replace('/\\(/', '(', $paren_array[$i]);\n        $paren_array[$i] =\
    \ preg_replace('/\\)/', ')', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\\
    )/', '(', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\)/',\
    \ '(', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\)/', '(',\
    \ $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n\
    \        $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n  \
    \      $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n    \
    \    $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n      \
    \  $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\)/', '(', $paren_array[$i]);\n        $paren_array[$i] =\
    \ preg_replace('/\\)/', '(', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\\
    )/', '(', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\)/',\
    \ '(', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\)/', '(',\
    \ $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n\
    \        $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n  \
    \      $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n    \
    \    $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);\n      \
    \  $paren_array[$i] = preg_replace('/\\)/', '(', $paren_array[$i]);", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    $paren_levels\
    \ = array();\n    foreach ($paren_array as $paren_string) {\n        if ($paren_string\
    \ == '(') {\n            $level++;\n        } else if ($paren_string == ')') {\n\
    \            $level--;\n            if ($level == 0) {\n                $max_level\
    \ = $level;\n            }\n        }\n        $paren_levels[$level] = $level;\n\
    \    }\n    return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  $paren_levels = array();\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n      if ($level < 0) {\n        $max_level = $level;\n\
    \      }\n    }\n    $paren_levels[$level] = $level;\n  }\n  return $max_level;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_array = array();\n\
    \    $paren_level = 0;\n    $paren_nesting = 0;\n    $paren_level_count = array();\n\
    \    $paren_level_count_max = array();\n    $paren_level_count_max_index = array();\n\
    \    $paren_level_count_max_index[0] = 0;\n    $paren_level_count_max[0] = 0;\n\
    \    $paren_level_count_max[1] = 0;\n    $paren_level_count_max[2] = 0;\n    $paren_level_count_max[3]\
    \ = 0;\n    $paren_level_count_max[4] = 0;\n    $paren_level_count_max[5] = 0;\n\
    \    $paren_level_count_max[6] = 0;\n    $paren_level_count_max[7] = 0;\n    $paren_level_count_max[8]\
    \ = 0;\n    $paren_level_count_max[9] = 0;\n    $paren_level_count_max[10] = 0;\n\
    \    $paren_level_count_max[11] = 0;\n    $paren_level_count_max[12] = 0;\n  \
    \  $paren_level_count_max[13] = 0;\n    $paren_level_count_max[14] = 0;\n    $paren_level_count_max[15]\
    \ = 0;\n    $paren_level_count_max[16] = 0;\n    $paren_level_count_max[17] =\
    \ 0;\n    $paren_level_count_max[18] = 0;\n    $paren_level_count_max[19] = 0;\n\
    \    $paren_level_count_max[20] = 0;\n    $paren_level_count_max[21] = 0;\n  \
    \  $paren_level_count_max[22] = 0;\n    $paren_level_count_max[23] = 0;\n    $paren_level_count_max[24]\
    \ = 0;\n    $paren_level_count_max[25] = 0;\n    $paren_level_count_max[26] =\
    \ 0;\n    $paren_level_count_max[27] = 0;\n    $paren_level_count_max[28] = 0;\n\
    \    $paren_level_count_max[29] = 0;\n    $paren_level_count_max[30] = 0;\n  \
    \  $paren_level_count_max[31] = 0;\n    $paren_level_count_max[32] = 0;\n    $paren_level_count_max[33]\
    \ = 0;\n    $paren_level_count_max[34] = 0;\n    $paren_level_count_max[35] =\
    \ 0;\n    $paren_level_count_max[36] = 0;\n    $paren_level_count_max[37] = 0;\n\
    \    $paren_level_count_max[38] = 0;\n    $paren_level_count_max[39] = 0;\n  \
    \  $paren_level_count_max[40] = 0;\n    $paren_level_count_max[41] = 0;\n    $paren_level_count_max[42]\
    \ = 0;\n    $paren_level_count_max[43] = 0;\n    $paren_level_count_max[44] =\
    \ 0;\n    $paren_level_count_max", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $level++;\n        } else if ($paren\
    \ == ')') {\n            $level--;\n            if ($level < 0) {\n          \
    \      return $max_level;\n            }\n        }\n        $max_level = max($max_level,\
    \ $level);\n    }\n    return $max_level;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n            if ($level < 0)\
    \ {\n                $max_level = 0;\n                break;\n            }\n\
    \        }\n        $max_level = max($max_level, $level);\n    }\n    return $max_level;\n\
    }\n", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(([^()]+", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_count = count($paren_array);\n    $max_level = 0;\n    for ($i\
    \ = 0; $i < $paren_array_count; $i++) {\n        if ($paren_array[$i] === '(')\
    \ {\n            $max_level++;\n        } else if ($paren_array[$i] === ')') {\n\
    \            $max_level--;\n        }\n    }\n    return $max_level;\n}\n", " \
    \   $paren_array = explode(' ', $paren_string);\n    $paren_array_size = count($paren_array);\n\
    \    $max_level = 0;\n    $max_level_paren_array = [];\n    for ($i = 0; $i <\
    \ $paren_array_size; $i++) {\n        if ($paren_array[$i] === '(') {\n      \
    \      $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n \
    \       } else {\n            $max_level--;\n        }\n    }\n    return $max_level_paren_array;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_len = count($paren_array);\n  for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n    $paren_levels[$i] = $paren_array[$i];\n  }\n  $paren_levels_len\
    \ = count($paren_levels);\n  $max_level = 0;\n  $max_level_len = count($paren_levels);\n\
    \  for ($i = 0; $i < $paren_levels_len; $i++) {\n    if ($paren_levels[$i] ===\
    \ '(') {\n      $max_level++;\n    } else if ($paren_levels[$i] === ')') {\n \
    \     $max_level--;\n    }\n    if ($max_level < $max_level_len) {\n      $max_level_len\
    \ = $max_level;\n    }\n  }\n  return $max_level_len;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_parens =\
    \ array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $max_level++;\n            $max_level_parens[$max_level] = 1;\n\
    \        } elseif ($paren == ')') {\n            $max_level--;\n            $max_level_parens[$max_level]\
    \ = 1;\n        } else {\n            $max_level_parens[$max_level]++;\n     \
    \   }\n    }\n    return $max_level_parens;\n}\n", "    $nested_levels = array();\n\
    \    $paren_level = 0;\n    $paren_nesting = 0;\n    $paren_nesting_level = 0;\n\
    \    $paren_nesting_nesting = 0;\n    $paren_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting\
    \ = 0;\n    $paren_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_nesting_level = 0;\n    $paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    $paren_nesting_nesting_nesting_", "  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = $paren_string;\n  while\
    \ ($paren_stack) {\n    $paren_string = array_pop($paren_stack);\n    $paren_array\
    \ = array_merge($paren_array, explode(' ', $paren_string));\n    foreach ($paren_array\
    \ as $key => $value) {\n      if ($value == '(') {\n        $paren_level++;\n\
    \      } else if ($value == ')') {\n        $paren_level--;\n      }\n      if\
    \ ($paren_level == 0) {\n        break;\n      }\n    }\n  }\n  return $paren_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_len = count($paren_array);\n  for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n    $paren_levels[$i] = $paren_array[$i];\n  }\n  $max_level = 0;\n\
    \  $max_level_len = count($paren_levels);\n  for ($i = 0; $i < $max_level_len;\
    \ $i++) {\n    $current_level = $paren_levels[$i];\n    $next_level = $paren_levels[$i\
    \ + 1];\n    if ($current_level != $next_level) {\n      $max_level = $i;\n  \
    \    break;\n    }\n  }\n  return $max_level;\n}\n", "  $paren_array = explode('\
    \ ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n      if ($level < 0) {\n        $max_level = 0;\n\
    \        break;\n      }\n    }\n    $max_level = max($max_level, $level);\n \
    \ }\n  return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $level++;\n        } else if ($paren\
    \ == ')') {\n            $level--;\n            if ($level < 0) {\n          \
    \      $max_level = 0;\n                break;\n            }\n        }\n   \
    \     $max_level = max($max_level, $level);\n    }\n    return $max_level;\n}\n",
  "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $paren) {\n        $paren_level = strlen($paren);\n\
    \        if ($paren_level > $max_level) {\n            $max_level = $paren_level;\n\
    \        }\n        if ($paren_level > $max_level_array[0]) {\n            $max_level_array\
    \ = $paren_level;\n        }\n    }\n    return $max_level_array;\n}\n", "  $level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = '';\n  $paren_stack_string = preg_replace('/\\(([^()]*)\\)/', '($1)', $paren_string);\n\
    \  while ($paren_stack_string) {\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($1)', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\\
    (([^()]*)\\)/', '($", "    $paren_array = explode(' ', $paren_string);\n    $max_level\
    \ = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $level++;\n        } else if ($paren == ')') {\n    \
    \        $level--;\n        }\n        if ($level > $max_level) {\n          \
    \  $max_level = $level;\n        }\n    }\n    return $max_level;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,parentheses,regex |>\n<code>\n<?php\n\n$string\
    \ = '(()()) ((())) () ((())()())';\n\n$parens = preg_match_all('/\\((.*?)\\)/',\
    \ $string, $matches);\n\n$parens = $matches[1];\n\n$parens = array_count_values($parens);\n\
    \n$max_level = max($parens);\n\n$max_level = array_search($max_level, $parens);\n\
    \necho $max_level;\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if\
    \ there are multiple nested parentheses.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if there are multiple nested parentheses.\n<|/ c |>\n<| a tags=php,parentheses,regex\
    \ |>\n<code>\n<?php\n\n$string = '(()()) ((())) () ((())()())';\n\n$parens = preg_match_all('/\\\
    ((.*?)\\)/', $string, $matches);\n\n$parens = $matches[1];\n\n$parens = array_count_values($parens);\n\
    \n$max_level = max($parens);\n\n$max_level = array_search($max_level, $parens);\n\
    \necho $max_level;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $string = '(()()) ((())) () ((())()())';\n$parens = preg_match_all('/\\((.*?)\\\
    )/', $string, $matches);\n$parens = $matches[1];\n$parens = array_count_values($parens);\n\
    $max_level = max($parens);\n$max_level = array_search($max_level, $parens);\n\
    echo $max_level;", "  $paren_array = explode(' ', $paren_string);\n  $max_level\
    \ = 0;\n  $max_level_array = [];\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $max_level++;\n    }\n    if ($paren == ')') {\n  \
    \    $max_level--;\n    }\n    if ($max_level > $max_level_array[$max_level])\
    \ {\n      $max_level_array[$max_level] = $max_level;\n    }\n  }\n  return $max_level_array;\n\
    }", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = $level;\n      }\n    }\n  }\n  return $max_level;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_array as $paren_string) {\n        $paren_levels[] = count($paren_array);\n\
    \        $paren_array = explode(')', $paren_string);\n    }\n    return $paren_levels;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $level = 0;\n        $paren_array = explode(' ', $paren_string);\n   \
    \     foreach ($paren_array as $paren_string) {\n            $level++;\n     \
    \       if ($level > $max_level) {\n                $max_level = $level;\n   \
    \             $max_level_array = $paren_array;\n            }\n        }\n   \
    \ }\n    return $max_level_array;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_count = count($paren_array);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        $level = 0;\n\
    \        $paren_array[$i] .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i]\
    \ .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n\
    \        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n        $paren_array[$i]\
    \ .= '(';\n        $paren_array[$i] .= ')';\n        $paren_array[$i] .= '(';\n\
    \        $paren_array[$i] .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i]\
    \ .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n\
    \        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n        $paren_array[$i]\
    \ .= '(';\n        $paren_array[$i] .= ')';\n        $paren_array[$i] .= '(';\n\
    \        $paren_array[$i] .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i]\
    \ .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n\
    \        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n        $paren_array[$i]\
    \ .= '(';\n        $paren_array[$i] .= ')';\n        $paren_array[$i] .= '(';\n\
    \        $paren_array[$i] .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i]\
    \ .= ')';\n        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n\
    \        $paren_array[$i] .= '(';\n        $paren_array[$i] .= ')';\n        $paren_array[$i]\
    \ .= '(';\n        $paren", "  $paren_array = explode(' ', $paren_string);\n \
    \ $max_level = 0;\n  $max_level_array = [];\n  foreach ($paren_array as $paren_string)\
    \ {\n    $paren_array = explode(')', $paren_string);\n    $level = 0;\n    foreach\
    \ ($paren_array as $paren_string) {\n      $paren_array = explode('(', $paren_string);\n\
    \      $level++;\n      foreach ($paren_array as $paren_string) {\n        $paren_array\
    \ = explode(')', $paren_string);\n        $level--;\n      }\n      if ($level\
    \ > $max_level) {\n        $max_level = $level;\n      }\n    }\n    $max_level_array[]\
    \ = $max_level;\n  }\n  return $max_level_array;\n}\n", "  $paren_array = explode('\
    \ ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  $paren_levels = array();\n\
    \  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n      $level++;\n\
    \      $paren_levels[$level] = $level;\n    } else if ($paren == ')') {\n    \
    \  $level--;\n      $paren_levels[$level] = $level;\n      if ($level == 0) {\n\
    \        $max_level = max($max_level, $level);\n      }\n    }\n  }\n  return\
    \ $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level\
    \ = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n \
    \       $paren_level = count($paren);\n        if ($paren_level > $max_level)\
    \ {\n            $max_level = $paren_level;\n        }\n        if ($paren_level\
    \ > $max_level_array[0]) {\n            $max_level_array = $paren_level;\n   \
    \     }\n    }\n    return $max_level_array;\n}\n", "  $paren_array = explode('\
    \ ', $paren_string);\n  $max_level = 0;\n  $max_level_parens = array();\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $max_level++;\n\
    \    } else if ($paren == ')') {\n      $max_level--;\n      if ($max_level <\
    \ 0) {\n        break;\n      }\n    }\n    $max_level_parens[$max_level] = $paren;\n\
    \  }\n  return $max_level_parens;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $level = 0;\n  $max_level = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $level++;\n      if ($level > $max_level) {\n     \
    \   $max_level = $level;\n      }\n    } else if ($paren == ')') {\n      $level--;\n\
    \    }\n  }\n  return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_array_size = count($paren_array);\n  $max_level = 0;\n  $max_level_nesting\
    \ = 0;\n  for ($i = 0; $i < $paren_array_size; $i++) {\n    if ($paren_array[$i]\
    \ === '(') {\n      $max_level++;\n      if ($max_level_nesting < $max_level)\
    \ {\n        $max_level_nesting = $max_level;\n      }\n    } else if ($paren_array[$i]\
    \ === ')') {\n      $max_level--;\n    }\n  }\n  return $max_level_nesting;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else {\n           \
    \ $max_level--;\n        }\n        $max_level_array[] = $max_level;\n    }\n\
    \    return $max_level_array;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_levels = array();\n    $paren_levels_count = array();\n    $paren_levels_count_max\
    \ = array();\n    foreach ($paren_array as $paren) {\n        $paren_levels[]\
    \ = $paren;\n        $paren_levels_count[] = substr_count($paren, '(');\n    \
    \    $paren_levels_count_max[] = max($paren_levels_count);\n    }\n    $max_levels\
    \ = max($paren_levels_count);\n    $nested_levels = array();\n    foreach ($paren_levels_count\
    \ as $i => $level) {\n        if ($level == $max_levels) {\n            $nested_levels[]\
    \ = $paren_levels[$i];\n        }\n    }\n    return $nested_levels;\n}\n", " \
    \ $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $max_level = 0;\n\
    \  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n      $level++;\n\
    \    } else if ($paren == ')') {\n      $level--;\n      if ($level < 0) {\n \
    \       $max_level = 0;\n        break;\n      }\n    }\n    $max_level = max($max_level,\
    \ $level);\n  }\n  return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_array_count = count($paren_array);\n  $max_level = 0;\n  $max_level_paren_array\
    \ = [];\n  for ($i = 0; $i < $paren_array_count; $i++) {\n    $paren_array[$i]\
    \ = trim($paren_array[$i]);\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n\
    \      $max_level_paren_array[] = $i;\n    } else if ($paren_array[$i] === ')')\
    \ {\n      $max_level--;\n      if ($max_level < 0) {\n        throw new Exception('Invalid\
    \ parenthesis string');\n      }\n      $max_level_paren_array[] = $i;\n    }\n\
    \  }\n  return $max_level_paren_array;\n}\n", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n    }\n    return\
    \ $max_level;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  $paren_stack[$paren_level++] = $paren_string;\n  while ($paren_level\
    \ > 0) {\n    $paren_string = array_pop($paren_stack);\n    $paren_array = array_merge($paren_array,\
    \ explode(' ', $paren_string));\n    $paren_level--;\n  }\n  return $paren_array;\n\
    }\n", "  $nested_levels = array();\n  $paren_level = 0;\n  $paren_nesting = 0;\n\
    \  $paren_levels = array();\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level]\
    \ = 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] =\
    \ 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] = 0;\n\
    \  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level]\
    \ = 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] =\
    \ 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] = 0;\n\
    \  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level]\
    \ = 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] =\
    \ 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] = 0;\n\
    \  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level]\
    \ = 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] =\
    \ 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] = 0;\n\
    \  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level]\
    \ = 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] =\
    \ 0;\n  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] = 0;\n\
    \  $paren_levels[$paren_level] = 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level]\
    \ = 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] =\
    \ 0;\n  $paren_nestings[$paren_level] = 0;\n  $paren_levels[$paren_level] = 0;\n\
    \  $paren_nestings[$paren_level] = 0;\n  $", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $max_level_paren_array = [];\n  foreach ($paren_array as\
    \ $paren_array_item) {\n    if ($paren_array_item == '(') {\n      $max_level++;\n\
    \    } else if ($paren_array_item == ')') {\n      $max_level--;\n      if ($max_level\
    \ < 0) {\n        throw new Exception('Invalid parenthesis string');\n      }\n\
    \    } else {\n      $max_level_paren_array[] = $max_level;\n    }\n  }\n  return\
    \ $max_level_paren_array;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  $paren_levels = array();\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n      $paren_levels[$level]\
    \ = $level;\n    } elseif ($paren == ')') {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = $level;\n      }\n\
    \    }\n  }\n  return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $max_level_paren_array = [];\n    foreach ($paren_array\
    \ as $paren_item) {\n        $paren_item_array = explode('(', $paren_item);\n\
    \        $paren_item_array_count = count($paren_item_array);\n        if ($paren_item_array_count\
    \ > $max_level) {\n            $max_level = $paren_item_array_count;\n       \
    \     $max_level_paren_array = $paren_item_array;\n        }\n    }\n    return\
    \ $max_level_paren_array;\n}\n", "  $level = 0;\n  $paren_stack = array();\n \
    \ $paren_stack[] = -1;\n  $paren_stack_string = '';\n  $paren_stack_string = $paren_string;\n\
    \  while ($paren_stack_string) {\n    $paren_stack_string = substr($paren_stack_string,\
    \ 1);\n    $paren_stack_string = trim($paren_stack_string);\n    if ($paren_stack_string)\
    \ {\n      $paren_stack[] = $level;\n      $level++;\n    }\n  }\n  return $paren_stack;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $levels = array();\n\
    \    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $levels[$level]++;\n        } else if ($paren == ')') {\n\
    \            $levels[$level]--;\n        }\n        $level++;\n    }\n    return\
    \ $levels;\n}\n", "    $paren_array = explode(' ', $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_count; $i++) {\n        $level = 0;\n      \
    \  $paren_array[$i] = '(' . $paren_array[$i] . ')';\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_length = count($paren_array);\n    $max_level = 0;\n    for\
    \ ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i] ===\
    \ '(') {\n            $max_level++;\n        } else if ($paren_array[$i] === ')')\
    \ {\n            $max_level--;\n        }\n    }\n    return $max_level;\n}\n",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[$paren_level]\
    \ = '';\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char ==\
    \ '(') {\n      $paren_level++;\n      $paren_stack[$paren_level] = '';\n    }\
    \ else if ($char == ')') {\n      $paren_level--;\n      $paren_stack[$paren_level]\
    \ = '';\n    } else if ($char == ' ') {\n      $paren_stack[$paren_level] .= $char;\n\
    \    } else {\n      $paren_stack[$paren_level] .= $char;\n    }\n  }\n  $paren_level--;\n\
    \  for ($i = 0; $i < $paren_level; $i++) {\n    $paren_array[] = $paren_stack[$i];\n\
    \  }\n  return $paren_array;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  $paren_levels = array();\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n      if ($level >\
    \ $max_level) {\n        $max_level = $level;\n      }\n    } else if ($paren\
    \ == ')') {\n      $level--;\n      if ($level < $max_level) {\n        $max_level\
    \ = $level;\n      }\n    }\n    $paren_levels[] = $level;\n  }\n  return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = $level;\n      }\n    }\n  }\n  return $max_level;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(')', $paren_string);\n        $level = 0;\n   \
    \     foreach ($paren_array as $paren_string) {\n            $paren_array = explode('(',\
    \ $paren_string);\n            $level++;\n        }\n        if ($level > $max_level)\
    \ {\n            $max_level = $level;\n        }\n    }\n    foreach ($paren_array\
    \ as $paren_string) {\n        $paren_array = explode('(', $paren_string);\n \
    \       $level = 0;\n        foreach ($paren_array as $paren_string) {\n     \
    \       $paren_array = explode(')', $paren_string);\n            $level++;\n \
    \       }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=php,regex |>\n<code>\n<?php\n$string = \"(()()) ((())) () ((())()())\"\
    ;\n$string = preg_replace('/\\(([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $string);\n$string = preg_replace('/\\(([^()]+)\\)/', '(', $string);\n$string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $string);\n$string = preg_replace('/\\(([^()]+)\\)/', '(', $string);\n$string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $string);\n$string = preg_replace('/\\(([^()]+)\\)/', '(', $string);\n$string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $string);\n$string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n            if ($level < 0) {\n                $max_level = 0;\n\
    \                break;\n            }\n        }\n        $max_level = max($max_level,\
    \ $level);\n    }\n    return $max_level;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $paren_array_count = count($paren_array);\n    $max_level\
    \ = 0;\n    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $level++;\n        } else if ($paren == ')') {\n    \
    \        $level--;\n            if ($level < 0) {\n                $max_level\
    \ = 0;\n                break;\n            }\n        }\n        $max_level =\
    \ max($max_level, $level);\n    }\n    return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } else if ($paren == ')') {\n            $level--;\n        }\n     \
    \   if ($level > $max_level) {\n            $max_level = $level;\n        }\n\
    \    }\n    return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_size = count($paren_array);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    for ($i = 0; $i < $paren_array_size; $i++) {\n        $level = 0;\n\
    \        $paren_char = $paren_array[$i];\n        for ($j = 0; $j < strlen($paren_char);\
    \ $j++) {\n            $paren_char[$j] = '0' . $paren_char[$j];\n        }\n \
    \       $paren_char = '(' . $paren_char . ')';\n        $paren_char = preg_replace('/\\\
    s/', '', $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n\
    \        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char\
    \ = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\\
    (\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '',\
    \ $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n\
    \        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char\
    \ = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\\
    (\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '',\
    \ $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n\
    \        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char\
    \ = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\\
    (\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '',\
    \ $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n\
    \        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char\
    \ = preg_replace('/\\(\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\\
    (\\)/', '', $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '',\
    \ $paren_char);\n        $paren_char = preg_replace('/\\(\\)/', '', $paren_char);\n\
    \        $paren_", "  $paren_array = explode(' ', $paren_string);\n  $max_level\
    \ = 0;\n  $level = 0;\n  $paren_levels = array();\n  foreach ($paren_array as\
    \ $paren) {\n    if ($paren == '(') {\n      $level++;\n      $paren_levels[$level]\
    \ = $level;\n    } elseif ($paren == ')') {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = max($max_level, $level);\n\
    \      }\n    }\n  }\n  return $max_level;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_group_array = explode('(',\
    \ $paren_group);\n        $level_of_paren_group = 0;\n        foreach ($paren_group_array\
    \ as $paren_group_element) {\n            if ($paren_group_element == '(') {\n\
    \                $level_of_paren_group++;\n            } else {\n            \
    \    $level_of_paren_group--;\n            }\n            if ($level_of_paren_group\
    \ > $max_level) {\n                $max_level = $level_of_paren_group;\n     \
    \           $max_level_paren_array = $paren_group_array;\n            }\n    \
    \    }\n    }\n    return $max_level_paren_array;\n}\n", "    $paren_string =\
    \ preg_replace('/\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n    $paren_string = preg_replace('/\\(\\(\\)/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\(\\(\\)\\)/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\(\\(\\(\\)\\)\\)/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\)\\)\\)\\)/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\\
    (\\(\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } else if ($paren == ')') {\n            $level--;\n            if ($level\
    \ < 0) {\n                break;\n            }\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n    }\n    return\
    \ $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n  $level\
    \ = 0;\n  $max_level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $level++;\n      if ($level > $max_level) {\n        $max_level\
    \ = $level;\n      }\n    } else if ($paren == ')') {\n      $level--;\n    }\n\
    \  }\n  return $max_level;\n}\n", "  $paren_string = trim($paren_string);\n  $level\
    \ = 0;\n  $paren_count = 0;\n  $paren_stack = array();\n  foreach (explode(' ',\
    \ $paren_string) as $char) {\n    if ($char === '(') {\n      $paren_stack[$level]++;\n\
    \    } else if ($char === ')') {\n      $paren_stack[$level]--;\n      if ($paren_stack[$level]\
    \ === 0) {\n        $level--;\n      }\n    }\n    $level++;\n  }\n  return $paren_count;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n", "  $level = 0;\n\
    \  $paren_levels = array();\n  $paren_levels_len = count($paren_levels);\n  $paren_levels[$paren_levels_len]\
    \ = $paren_levels_len;\n  $paren_levels[$paren_levels_len - 1] = $paren_levels_len;\n\
    \  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren == '(') {\n\
    \      $level++;\n      $paren_levels[$level] = $level;\n    } elseif ($paren\
    \ == ')') {\n      $level--;\n      $paren_levels[$level] = $level;\n    }\n \
    \ }\n  $max_level = max($paren_levels);\n  $nested_levels = array();\n  for ($i\
    \ = 0; $i < $max_level; $i++) {\n    $nested_levels[$i] = $paren_levels[$i] -\
    \ $max_level;\n  }\n  return $nested_levels;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $max_level_array = [];\n    foreach\
    \ ($paren_array as $level) {\n        if ($level == '(') {\n            $max_level++;\n\
    \        } else if ($level == ')') {\n            $max_level--;\n        }\n \
    \       $max_level_array[] = $max_level;\n    }\n    return $max_level_array;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } else if ($paren == ')') {\n            $level--;\n        }\n     \
    \   if ($level > $max_level) {\n            $max_level = $level;\n        }\n\
    \    }\n    return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  $paren_levels = array();\n  foreach ($paren_array\
    \ as $paren_string) {\n    if ($paren_string == '(') {\n      $level++;\n    \
    \  $paren_levels[$level] = $level;\n    } else if ($paren_string == ')') {\n \
    \     $level--;\n      $paren_levels[$level] = $level;\n      if ($level == 0)\
    \ {\n        $max_level = $level;\n      }\n    }\n  }\n  return $max_level;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == '(') {\n      $level++;\n      if ($level > $max_level) {\n  \
    \      $max_level = $level;\n      }\n    } else if ($paren == ')') {\n      $level--;\n\
    \      if ($level < $max_level) {\n        $max_level = $level;\n      }\n   \
    \ }\n    $paren_levels[] = $level;\n  }\n  return $max_level;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_level = 0;\n    $max_level_array =\
    \ [];\n    foreach ($paren_array as $paren_string) {\n        $paren_array = explode(')',\
    \ $paren_string);\n        $level = 0;\n        foreach ($paren_array as $paren_string)\
    \ {\n            $paren_array = explode('(', $paren_string);\n            $level++;\n\
    \        }\n        $max_level = max($max_level, $level);\n        $max_level_array[]\
    \ = $level;\n    }\n    return $max_level_array;\n}\n", "  $paren_array = explode('\
    \ ', $paren_string);\n  $levels = array();\n  $max_level = 0;\n  foreach ($paren_array\
    \ as $paren_string) {\n    $level = 0;\n    $paren_array = explode(' ', $paren_string);\n\
    \    foreach ($paren_array as $paren_string) {\n      if ($paren_string == '(')\
    \ {\n        $level++;\n      } else if ($paren_string == ')') {\n        $level--;\n\
    \      }\n      if ($level > $max_level) {\n        $max_level = $level;\n   \
    \   }\n    }\n    $levels[] = $max_level;\n  }\n  return $levels;\n}\n", "  $paren_array\
    \ = explode(' ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $level++;\n    }\
    \ else if ($paren == ')') {\n      $level--;\n      if ($level < 0) {\n      \
    \  $max_level = 0;\n        break;\n      }\n    }\n    $max_level = max($max_level,\
    \ $level);\n  }\n  return $max_level;\n}\n", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_level = 0;\n    $max_level_paren_array = [];\n   \
    \ foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n         \
    \   $max_level++;\n            $max_level_paren_array[] = $paren;\n        } elseif\
    \ ($paren == ')') {\n            $max_level--;\n            $max_level_paren_array[]\
    \ = $paren;\n        }\n    }\n    return $max_level_paren_array;\n}\n", "   \
    \ $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n    $level\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $level++;\n        } else if ($paren == ')') {\n            $level--;\n\
    \            if ($level < 0) {\n                $max_level = $level;\n       \
    \     }\n        }\n    }\n    return $max_level;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_level = 0;\n    $max_level_array = [];\n    foreach\
    \ ($paren_array as $paren_item) {\n        $paren_item = trim($paren_item);\n\
    \        if ($paren_item === '') {\n            continue;\n        }\n       \
    \ if ($paren_item === '(') {\n            $max_level++;\n            $max_level_array[]\
    \ = $max_level;\n            continue;\n        }\n        if ($paren_item ===\
    \ ')') {\n            $max_level--;\n            if ($max_level < 0) {\n     \
    \           continue;\n            }\n            $max_level_array[] = $max_level;\n\
    \            continue;\n        }\n    }\n    return $max_level_array;\n}\n",
  "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n\
    \  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $level++;\n      $paren_levels[$level] = $level;\n    } elseif\
    \ ($paren == ')') {\n      $level--;\n      $paren_levels[$level] = $level;\n\
    \      if ($level == 0) {\n        $max_level = $level;\n      }\n    }\n  }\n\
    \  return $max_level;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_array_count = count($paren_array);\n  $max_level = 0;\n  $level = 0;\n\
    \  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n      $level++;\n\
    \    } else if ($paren == ')') {\n      $level--;\n      if ($level < 0) {\n \
    \       $max_level = 0;\n        break;\n      }\n    }\n    $max_level = max($max_level,\
    \ $level);\n  }\n  return $max_level;\n}\n", "  $paren_levels = array();\n  $paren_levels_string\
    \ = array();\n  $paren_levels_string[0] = $paren_string;\n  $paren_levels_string[1]\
    \ = '';\n  $paren_levels_string[2] = '';\n  $paren_levels_string[3] = '(';\n \
    \ $paren_levels_string[4] = ')';\n  $paren_levels_string[5] = '(';\n  $paren_levels_string[6]\
    \ = ')';\n  $paren_levels_string[7] = '(';\n  $paren_levels_string[8] = ')';\n\
    \  $paren_levels_string[9] = '(';\n  $paren_levels_string[10] = ')';\n  $paren_levels_string[11]\
    \ = '(';\n  $paren_levels_string[12] = ')';\n  $paren_levels_string[13] = '(';\n\
    \  $paren_levels_string[14] = ')';\n  $paren_levels_string[15] = '(';\n  $paren_levels_string[16]\
    \ = ')';\n  $paren_levels_string[17] = '(';\n  $paren_levels_string[18] = ')';\n\
    \  $paren_levels_string[19] = '(';\n  $paren_levels_string[20] = ')';\n  $paren_levels_string[21]\
    \ = '(';\n  $paren_levels_string[22] = ')';\n  $paren_levels_string[23] = '(';\n\
    \  $paren_levels_string[24] = ')';\n  $paren_levels_string[25] = '(';\n  $paren_levels_string[26]\
    \ = ')';\n  $paren_levels_string[27] = '(';\n  $paren_levels_string[28] = ')';\n\
    \  $paren_levels_string[29] = '(';\n  $paren_levels_string[30] = '(';\n  $paren_levels_string[31]\
    \ = '(';\n  $paren_levels_string[32] = ')';\n  $paren_levels_string[33] = '(';\n\
    \  $paren_levels_string[34] = ')';\n  $paren_levels_string[35] = '(';\n  $paren_levels_string[36]\
    \ = ')';\n  $paren_levels_string[37] = '(';\n  $paren_levels_string[38] = ')';\n\
    \  $paren_levels_string[39] = '(';\n  $paren_levels_string[40] = ')';\n  $paren_levels_string[41]\
    \ = '(';\n  $paren_levels_string[", "  $level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = '';\n  foreach (explode(' ',\
    \ $paren_string) as $char) {\n    if ($char === '(') {\n      $level++;\n    \
    \  $paren_stack_string = $char;\n      $paren_stack[] = $level;\n    } elseif\
    \ ($char === ')') {\n      $level--;\n      if ($level === 0) {\n        $paren_stack_string\
    \ = $char;\n        $paren_stack[] = $level;\n      } else {\n        $paren_stack_string\
    \ = $paren_stack_string.$char;\n      }\n    }\n  }\n  return $paren_stack;\n\
    }\n", "  $levels = array();\n  $paren_level = 0;\n  $paren_nesting = 0;\n  $paren_levels\
    \ = array();\n  $paren_levels_count = array();\n  $paren_levels_count = explode('\
    \ ', $paren_string);\n  foreach ($paren_levels_count as $paren_level_count) {\n\
    \    $paren_level_count = trim($paren_level_count);\n    if ($paren_level_count\
    \ == '(') {\n      $paren_level++;\n      $paren_levels[$paren_level] = $paren_level;\n\
    \      $paren_levels_count[$paren_level] = 1;\n    } else if ($paren_level_count\
    \ == '(') {\n      $paren_level++;\n      $paren_levels[$paren_level] = $paren_level;\n\
    \      $paren_levels_count[$paren_level] = 1;\n    } else if ($paren_level_count\
    \ == ')') {\n      $paren_level--;\n      $paren_levels[$paren_level] = $paren_level;\n\
    \      $paren_levels_count[$paren_level]--;\n    } else if ($paren_level_count\
    \ == ')') {\n      $paren_level--;\n      $paren_levels[$paren_level] = $paren_level;\n\
    \      $paren_levels_count[$paren_level]--;\n    }\n  }\n  foreach ($paren_levels\
    \ as $paren_level => $paren_level_count) {\n    if ($paren_level_count > $paren_nesting)\
    \ {\n      $paren_nesting = $paren_level_count;\n    }\n  }\n  return $paren_nesting;\n\
    }", "  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren_array\
    \ = [];\n  foreach ($paren_array as $paren_element) {\n    if ($paren_element\
    \ == '(') {\n      $max_level++;\n    } else {\n      if ($max_level > 0) {\n\
    \        $max_level--;\n      }\n    }\n    $max_level_paren_array[] = $max_level;\n\
    \  }\n  return $max_level_paren_array;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_levels = array();\n  $paren_levels_count = array();\n  $paren_levels_count_max\
    \ = array();\n  foreach ($paren_array as $paren_string) {\n    $paren_levels_count_max[]\
    \ = count($paren_levels);\n    $paren_levels[] = array();\n    $paren_levels_count[]\
    \ = count($paren_levels);\n  }\n  foreach ($paren_array as $paren_string) {\n\
    \    $paren_levels[$paren_levels_count[count($paren_levels) - 1]][] = $paren_string;\n\
    \  }\n  $max_levels = max($paren_levels_count_max);\n  foreach ($paren_levels\
    \ as $i => $paren_level) {\n    $paren_levels[$i] = array_slice($paren_level,\
    \ 0, $max_levels);\n  }\n  return $paren_levels;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
