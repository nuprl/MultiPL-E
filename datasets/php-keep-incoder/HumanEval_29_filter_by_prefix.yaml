name: HumanEval_29_filter_by_prefix
language: php
prompt: "<?php\n// Filter an input list of strings only for ones that start with a\
  \ given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix($strings,\
  \ $prefix) {\n"
tests: "function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\",\
  \ \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
  , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  return array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'John', 'age' => '25');\n$array[] = array('name' => 'Jane', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '35');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '40');\n\n$newArray = array();\nforeach($array as $key => $value){\n\
    \    if($value['name'] == 'Jack'){\n        $newArray[] = $value;\n    }\n}\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=2 |>\n<code>\n\
    $array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n$array[]\
    \ = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '35');\n$array[] = array('name' => 'Jill', 'age' => '40');\n\n$newArray\
    \ = array();\nforeach($array as $key => $value){\n    if($value['name'] == 'Jack'){\n\
    \        $newArray[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'John', 'age' => '25');\n$array[] = array('name' => 'Jane', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '35');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '40');\n\n$newArray = array();\nforeach($array as $key => $value){\n\
    \    if($value['name'] == 'Jack'){\n        $newArray[] = $value;\n    }\n}\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => '25');\n$array[] = array('name'\
    \ => 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '35');\n\
    $array[] = array('name' => 'Jill', '", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I didn't know about `array_filter()`.\
    \ However, I still don't understand why my code doesn't work. Can you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nThe code in your question doesn't\
    \ work because you're not passing the callback function to the `array_filter()`\
    \ function.  You're passing the return value of the `array_map()` function, which\
    \ is a boolean value.  `array_filter()` expects a callback function that returns\
    \ true or false.  You're passing the return value of the `array_map()` function,\
    \ which is a string value.  `array_filter()` will never return anything other\
    \ than true or false because you're not passing a callback function to it.\n<|/\
    \ c |>\n<| c |>\nI see. But why does my code work if I change `array_map` to `array_filter`?\
    \ I thought `array_map` was supposed to return an array of strings that start\
    \ with the prefix. Why does my code work if I change `array_map` to `array_filter`?\n\
    <|/ c |>\n<| c |>\nBecause `array_map()` returns an array of strings that start\
    \ with the prefix, and `array_filter()` expects a callback function that returns\
    \ true or false.  `array_map()` returns an array of strings that start with the\
    \ prefix, and `array_filter()` expects a callback function that returns true or\
    \ false.  `array_map()` returns an array of strings that start with the prefix,\
    \ and `array_filter()` expects a callback function that returns true or false.\
    \  `array_map()` returns an array of strings that start with the prefix, and `array_filter()`\
    \ expects a callback function that returns true or false.  `array_map()` returns\
    \ an array of strings that start with the prefix, and `array_filter()` expects\
    \ a callback function that returns true or false.  `array_map()` returns an array\
    \ of strings that start with the prefix, and `array_filter()` expects a callback\
    \ function that returns true or false.  `array_map()` returns an array of strings\
    \ that start with the prefix, and `array_filter()` expects a callback function\
    \ that returns true or false.\n<|/ c |>\n<| c |>\n`array_map()` returns an array\
    \ of strings that start with the prefix, and `array_filter()` expects a callback\
    \ function that returns true or false.  `array_map()` returns an array of strings\
    \ that start with the prefix, and `array_filter()` expects a callback function\
    \ that returns true or false.  `array_map()` returns an array of strings that\
    \ start with the prefix, and `array_filter()` expects a callback function that\
    \ returns true or false.  `", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThank you for your answer. Unfortunately this doesn't work for\
    \ me. I've added some more information to the original question. Maybe this helps.\n\
    <|/ c |>\n<| c |>\nI updated my answer with a working example based on your updated\
    \ question.\n<|/ c |>\n<| c |>\nThank you for your answer. Unfortunately this\
    \ doesn't work for me. I've added some more information to the original question.\
    \ Maybe this helps.\n<|/ c |>\n<| c |>\nI updated my answer with a working example\
    \ based on your updated question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$arr =\
    \ [\n    'name' => 'John',\n    'surname' => 'Doe',\n    'age' => 25,\n    'country'\
    \ => 'USA',\n    'city' => 'New York',\n    'country' => 'Canada',\n    'city'\
    \ => 'Ottawa',\n    'country' => 'Mexico',\n    'city' => 'Mexico City',\n   \
    \ 'country' => 'Mexico',\n    'city' => 'Mexico City',\n    'country' => 'Mexico',\n\
    \    'city' => 'Mexico City',\n    'country' => 'Mexico',\n    'city' => 'Mexico\
    \ City',\n    'country' => 'Mexico',\n    'city' => 'Mexico City',\n    'country'\
    \ => 'Mexico',\n    'city' => 'Mexico City',\n    'country' => 'Mexico',\n   \
    \ 'city' => 'Mexico City',\n    'country' => 'Mexico',\n    'city' => 'Mexico\
    \ City',\n    'country' => 'Mexico',\n    'city' => 'Mexico City',\n    'country'\
    \ => 'Mexico',\n    'city' => 'Mexico City',\n    'country' => 'Mexico',\n   \
    \ 'city' => 'Mexico City',\n    'country' => 'Mexico',\n    'city' => 'Mexico\
    \ City',\n    'country' => 'Mexico',\n    'city' => 'Mexico City',\n    'country'\
    \ => 'Mexico',\n    'city' => 'Mexico City',\n    'country' => 'Mexico',\n   \
    \ 'city' => 'Mexico City',\n    'country' => 'Mexico',\n    'city' => 'Mexico\
    \ City',\n    'country' => 'Mexi", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\");\n$search = \"abc\";\n\
    $result = array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) === 0;\n});\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's simple.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\n$array = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"\
    stu\");\n$search = \"abc\";\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\");\n$search = \"abc\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=4 tags=php,arrays |>\n<| a dscore=3 |>\n<code>\n$array = array(\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\");\n$search = \"abc\";\n\
    $result = array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=3 |>\n\
    <code>\n$array = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"\
    stu\");\n$search = \"abc\";\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\", \"jkl\"\
    , \"mno\", \"pqr\", \"stu\");\n$search = \"abc\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) === ", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\");\n$array\
    \ = array_filter($array, function($var) {\n    return strpos($var, \"a\") ===\
    \ 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    abc\", \"def\", \"ghi\");\n$array = array_filter($array, function($var) {\n  \
    \  return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\");\n$array =\
    \ array_filter($array, function($var) {\n    return strpos($var, \"a\") === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    abc\", \"def\", \"ghi\");\n$array = array_filter($array, function($var) {\n  \
    \  return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\");\n\
    $array = array_filter($array, function($var) {\n    return strpos($var, \"a\"\
    ) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array =\
    \ array(\"abc\", \"def\", \"ghi\");\n$array = array_filter($array, function($var)\
    \ {\n    return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"\
    def\", \"ghi\");\n$array = array_filter($array, function($var) {\n    return strpos($var,\
    \ \"a\") === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\");\n$array = array_filter($array,\
    \ function($var) {\n    return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a ", "  return array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't require any\
    \ additional libraries. But it does require PHP >= 5.3.0.\n<|/ c |>\n<| c |>\n\
    I like this solution, because it doesn't require any additional libraries. But\
    \ it does require PHP >= 5.3.0.\n<|/ c |>\n<| c |>\nI like this solution, because\
    \ it doesn't require any additional libraries. But it does require PHP >= 5.3.0.\n\
    <|/ c |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. But it does require PHP >= 5.3.0.\n<|/ c |>\n<| c |>\nI like this\
    \ solution, because it doesn't require any additional libraries. But it does require\
    \ PHP >= 5.3.0.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you for your answer. Unfortunately this does not work as expected.\
    \ `filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')` returns `['abc', 'array']`\
    \ instead of `['abc', 'bcd', 'cde']`.\n<|/ c |>\n<| c |>\nOh, I see. My bad. I'll\
    \ fix it in a minute.\n<|/ c |>\n<| c |>\nI fixed the issue. Sorry about that.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. Unfortunately this does not work\
    \ as expected. `filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')` returns\
    \ `['abc', 'array']` instead of `['abc', 'bcd', 'cde']`.\n<|/ c |>\n<| c |>\n\
    I fixed the issue. Sorry about that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThanks for your answer.\
    \ I've tried this but unfortunately it didn't work. I've updated my question to\
    \ show you the code I've tried.\n<|/ c |>\n<| c |>\nI updated my answer. Try it\
    \ now. Your code was almost right, but you were missing a closing bracket on the\
    \ `if` statement.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried this\
    \ but unfortunately it didn't work. I've updated my question to show you the code\
    \ I've tried.\n<|/ c |>\n<| c |>\nI updated my answer. Try it now. Your code was\
    \ almost right, but you were missing a closing bracket on the `if` statement.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried this but unfortunately it\
    \ didn't work. I've updated my question to show you the code I've tried.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nThanks for your answer. I've tried this\
    \ but unfortunately it didn't work. I've updated my question to show you the code\
    \ I've tried.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nThanks for your answer. I've tried this\
    \ but unfortunately it didn't work. I've updated my question to show you the code\
    \ I've tried.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$strings = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nI like the idea of using array_filter, but I believe it only works\
    \ on arrays, not objects. I could be wrong, though.\n<|/ c |>\n<| c |>\n: You're\
    \ right. I've edited my answer to include a solution that works on objects.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$filtered = array_filter($array, function($value)\
    \ {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 |>\n<code>\n$filtered = array_filter($array, function($value)\
    \ {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$filtered = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$filtered\
    \ = array_filter($array, function($value) {\n    return strpos($value, 'a') ===\
    \ 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$filtered = array_filter($array, function($value) {\n    return\
    \ strpos($value, 'a') === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$filtered = array_filter($array, function($value) {\n    return strpos($value,\
    \ 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n\
    <| a dscore=1 |>\n<code>\n$filtered = array_filter($array, function($value) {\n\
    \    return strpos($value, 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 |>\n<code>\n$filtered = array_filter($array, function($value)\
    \ {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/ a tags=php,", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a way to do this without using any external\
    \ libraries.\n<|/ c |>\n<| c |>\nI added a solution without external libraries.\n\
    <|/ c |>\n<| a |>\nI like your solution, but I wonder if there is a way to do\
    \ this without using any external libraries.\n\nYes, there is. You can use the\
    \ array_filter function and pass a callback function as the second argument. \n\
    <code>\n$strings = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\nOutput:\n<code>\nArray\n\
    (\n    [0] => abc\n    [2] => array\n)\n</code>\n<|/ a tags=php,arrays dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$strings = ['abc', 'bcd', 'cde', 'array'];\n$prefix\
    \ = 'a';\n\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$strings = ['abc',\
    \ 'bcd', 'cde', 'array'];\n$prefix = 'a';\n\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n\
    <code>\n$strings = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$strings = ['abc', 'bcd', 'cde', 'array'];\n\
    $prefix = 'a';\n\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThanks, I used this solution and it worked\
    \ for me. However I used the array_filter function instead of array_walk because\
    \ I needed to filter out empty arrays as well.\n<|/ c |>\n<| c |>\nI used array_filter\
    \ because I needed to filter out empty arrays as well. array_walk would not do\
    \ that for you. array_filter does that for you.\n<|/ c |>\n<| c |>\nI used array_filter\
    \ because I needed to filter out empty arrays as well. array_walk would not do\
    \ that for you. array_filter does that for you.\n<|/ c |>\n<| c |>\nI used array_filter\
    \ because I needed to filter out empty arrays as well. array_walk would not do\
    \ that for you. array_filter does that for you.\n<|/ c |>\n<| a |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$result = array();\nforeach($array as\
    \ $key => $value) {\n    if(strpos($value, 'a') === 0) {\n        $result[] =\
    \ $value;\n    }\n}\n</code>\n<|/ a dscore=5 tags=php,arrays |>\n<| c |>\nI used\
    \ this solution and it worked for me. However I used the array_filter function\
    \ instead of array_walk because I needed to filter out empty arrays as well.\n\
    <|/ c |>\n<| c |>\nI used array_filter because I needed to filter out empty arrays\
    \ as well. array_walk would not do that for me. array_filter does that for me.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$result = array();\nforeach($array as $key => $value) {\n    if(strpos($value,\
    \ 'a') === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $result = array();\nforeach($array as $key => $value) {\n    if(strpos($value,\
    \ 'a') === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use\
    \ any external libraries. I updated my question to reflect this.\n<|/ c |>\n<|\
    \ c |>\n: I updated my answer with a solution that doesn't use any external libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I updated my question to reflect this.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer with a solution that doesn't use any external libraries.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThanks, this is exactly what I was looking\
    \ for!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($value) use\
    \ ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($value) use\
    \ ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($value) use\
    \ ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($value) use\
    \ ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function(", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. Your code is very similar to mine, but\
    \ I wanted to avoid using loops because I thought it would be more efficient.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nI doubt that looping would be more efficient.\
    \ Looping over an array is basically a looping over an array (except the loop\
    \ variable is implicitly rewritten on each iteration). So the only difference\
    \ would be the amount of code executed in the loop (which would be negligible).\
    \ But I guess it would be more efficient to write it in a way that doesn't require\
    \ looping at all.\n<|/ c |>\n<| c |>\nI agree with you that looping would be more\
    \ efficient, but I wanted to know if there was a way to do it without looping\
    \ at all.\n<|/ c |>\n<| c |>\nI added a version that doesn't use looping.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n\
    \            'c' => [\n                'd' => [\n                    'e' => [\n\
    \                        'f' => [\n                            'g' => [\n    \
    \                            'h' => [\n                                    'i'\
    \ => [\n                                        'j' => [\n                   \
    \                         'k' => [\n                                         \
    \       'l' => [\n                                                    'm' => [\n\
    \                                                        'n' => [\n          \
    \                                                  'o' => [\n                \
    \                                                'p' => [\n                  \
    \                                                  'q' => [\n                \
    \                                                        'r' => [\n          \
    \                                                                  's' => [\n\
    \                                                                            \
    \    't' => [\n                                                              \
    \                      'u' => [\n                                            \
    \                                            'v' => [\n                      \
    \                                                                      'w' =>\
    \ [\n                                                                        \
    \                        'x' => [\n                                          \
    \                                                          'y' => [\n        \
    \                                                                            \
    \                    'z' => [\n                                              \
    \                                                              'a' => [\n    \
    \                                                                            \
    \                                'b' => [\n                                  \
    \                                                                            \
    \      'c' => [\n                                                            \
    \                                                            'd' => [\n      \
    \                                                                            \
    \                                          'e' => [\n                        \
    \                                                                            \
    \                                            'f' => [\n                      \
    \                                                                            \
    \                                  'g' => [\n                                \
    \                                                                            \
    \                            'h' => [\n                                      \
    \                                                                            \
    \                                          'i' => [\n                        \
    \                                                                            \
    \                                                            'j' => [\n      \
    \                                                                            \
    \                                                                            \
    \      'k' => [\n                                                            \
    \                                                                            \
    \                                'l' => [\n                                  \
    \                                                                            \
    \                                                              'm' => [\n    \
    \                                                                            \
    \                                                                            \
    \                    'n' => [\n                                              \
    \                                                                            \
    \                                                          'o' => [\n        \
    \                                                                            \
    \                                                                            \
    \                        'p' => [\n                                          \
    \                                                                            \
    \                                                                      'q' =>\
    \ [\n", "  return array_filter($strings, function($string) use ($prefix) {\n \
    \   return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nI like this solution, however it only works with strings. If you have an\
    \ array of objects, it won't work. You'll have to loop through the array and call\
    \ `strpos()` on each object in the array.\n<|/ c |>\n<| c |>\nYes, I realized\
    \ that after I posted my comment. I've updated my answer to include a solution\
    \ for an array of objects.\n<|/ c |>\n<| a tags=php,arrays,filter |>\n<code>",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your\
    \ solution, however I believe it can be improved by using array_filter() instead\
    \ of array_map(). array_map() will create a new array and array_filter() will\
    \ modify the original array in place. array_filter() will also allow you to filter\
    \ out empty strings (which would otherwise be filtered out by strpos()).\n<|/\
    \ c |>\n<| c |>\nI agree with you. `array_map` will create a new array and `array_filter`\
    \ will modify the original array in place. `array_filter` will also allow you\
    \ to filter out empty strings (which would otherwise be filtered out by `strpos`).\n\
    <|/ c |>\n<| c |>\nI agree with you. `array_map` will create a new array and `array_filter`\
    \ will modify the original array in place. `array_filter` will also allow you\
    \ to filter out empty strings (which would otherwise be filtered out by `strpos`).\n\
    <|/ c |>\n<| c |>\nI agree with you. `array_map` will create a new array and `array_filter`\
    \ will modify the original array in place. `array_filter` will also allow you\
    \ to filter out empty strings (which would otherwise be filtered out by `strpos`).\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n\
    $prefix = 'a';\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");\n$array = array_filter($array,function($var){\n    return strpos($var,\"\
    a\") === 0;\n});\nprint_r($array);", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like your answer but I think it would be better\
    \ to use a lambda function instead of an anonymous function\n<|/ c |>\n<| c |>\n\
    I agree with you, lambdas are more readable and more maintainable. Also the code\
    \ will be more readable and maintainable if you use lambdas instead of anonymous\
    \ functions.\n<|/ c |>\n<| c |>\nI agree with you but I think it would be better\
    \ to use a lambda function instead of an anonymous function\n<|/ c |>\n<| c |>\n\
    I agree with you but I think it would be better to use a lambda function instead\
    \ of an anonymous function\n<|/ c |>\n<| c |>\nI agree with you but I think it\
    \ would be better to use a lambda function instead of an anonymous function\n\
    <|/ c |>\n<| a dscore=5 tags=php,arrays,filter |>\n<code>\n$array = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\");\n$filtered = array_filter($array,\
    \ function($item){\n    return strpos($item, \"a\") === 0;\n});\n</code>\n<|/\
    \ a |>\n<| c |>\nThis should be the accepted answer. Simple, concise, and works.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise, and works.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise, and works.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise, and works.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise, and works.\n\
    <|/ c |>\n<| a dscore=5 tags=php,arrays,filter |>\n<code>\n$array = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\");\n$filtered = array_filter($array,\
    \ function($item){\n    return strpos($item, \"a\") === 0;\n});\n</code>\n<|/\
    \ a |>\n<| c |>\nThis should be the accepted answer. Simple, concise, and works.\n\
    <|/ c |>\n<| a dscore=5 |>", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nI like your solution, but I prefer a solution without looping through\
    \ the array twice. Thanks anyway!\n<|/ c |>\n<| c |>\n: I agree, looping twice\
    \ is less efficient than looping once. My solution also avoids looping twice by\
    \ using a `foreach` loop to filter out all strings that don't start with the prefix.\
    \ My solution also avoids looping twice by using a `foreach` loop to filter out\
    \ all strings that don't start with the prefix. My solution also avoids looping\
    \ twice by using a `foreach` loop to filter out all strings that don't start with\
    \ the prefix. My solution also avoids looping twice by using a `foreach` loop\
    \ to filter out all strings that don't start with the prefix. My solution also\
    \ avoids looping twice by using a `foreach` loop to filter out all strings that\
    \ don't start with the prefix. My solution also avoids looping twice by using\
    \ a `foreach` loop to filter out all strings that don't start with the prefix.\n\
    <|/ c |>\n<| c |>\n: I added a solution without looping twice that avoids looping\
    \ twice by using a `foreach` loop to filter out all strings that don't start with\
    \ the prefix.\n<|/ c |>\n<| c |>\n: I added a solution without looping twice that\
    \ avoids looping twice by using a `foreach` loop to filter out all strings that\
    \ don't start with the prefix.\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ looping twice that avoids looping twice by using a `foreach` loop to filter\
    \ out all strings that don't start with the prefix.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n\
    \            'e' => 'f'\n        ],\n        'f' => [\n            'g' => 'h',\n\
    \            'i' => 'j'\n        ]\n    ],\n    'k' => [\n        'l' => [\n \
    \           'm' => 'n',\n            'o' => 'p'\n        ],\n        'q' => [\n\
    \            'r' => 's',\n            't' => 'u'\n        ]\n    ]\n];\n\n$",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do it without using regex. Maybe some kind of string manipulation\
    \ function?\n<|/ c |>\n<| c |>\nI added a solution without regex.\n<|/ c |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'def', 'ghi');\n$filtered = array_filter($array, function($value) use ($string)\
    \ {\n    return strpos($value, $string) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using regex. Maybe some kind of string manipulation function?\n<|/ c |>\n<|\
    \ c |>\nI added a solution without regex.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    $string = 'abc';\n$array = array('abc', 'def', 'ghi');\n$filtered = array_filter($array,\
    \ function($value) use ($string) {\n    return strpos($value, $string) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a |>\n<code>\n$string = 'abc';\n\
    $array = array('abc', 'def', 'ghi');\n$filtered = array_filter($array, function($value)\
    \ use ($string) {\n    return strpos($value, $string) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays,string dscore=1 |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do it without using regex. Maybe some kind of string manipulation\
    \ function?\n<|/ c |>\n<| c |>\nI added a solution without regex.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def', 'ghi');\n\
    $filtered = array_filter($array, function($value) use ($string) {\n    return\
    \ strpos($value, $string) === 0;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'def', 'ghi');", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 tags=php,arrays,string |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant and efficient than using array_filter\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant and efficient\
    \ than using array_filter\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and efficient than using array_filter\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more elegant and efficient than using\
    \ array_filter\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much more\
    \ elegant and efficient than using array_filter\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$array = array('a', 'b', 'c', 'd');\n$array2 = array('a', 'b', 'c', 'd');\n\
    $array3 = array();\n\n$array3 = array_diff($array2, $array);\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis should be the accepted answer. Much more elegant and efficient\
    \ than using array_filter\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and efficient than using array_filter\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more elegant and efficient than using\
    \ array_filter\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much more\
    \ elegant and efficient than using array_filter\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant and efficient than using array_filter\n\
    <|/ c |>\n<| a |>\n<code>\n$array = array('a', 'b', 'c', 'd');\n$array2 = array('a',\
    \ 'b', 'c', 'd');\n$array3 = array();\n\n$array3 = array_diff($array2, $array);\n\
    </code>\n<|/ a dscore=5 tags=php,arrays,string |>\n<| c |>\nThis should be the\
    \ accepted answer. Much more elegant and efficient than using array_filter\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$array = array", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks for your answer! I used your function and added a little bit of code to\
    \ make it work. I'll post my answer below.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    I used the answer from and added some code to make it work. Thanks again to everyone\
    \ who helped me out!\n<code>", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThanks for the answer. Your code works perfectly\
    \ for me. Just one question, why did you use $strings as an argument in the array_filter\
    \ function? I thought the function would take care of that for me. Thanks again!\n\
    <|/ c |>\n<| c |>\nThe `array_filter` function doesn't take care of it. It just\
    \ filters the array for you. That's why I passed the array to the function as\
    \ an argument. Otherwise you would have to loop through the array and filter it\
    \ yourself.\n<|/ c |>\n<| c |>\nI see. Thanks again!\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array2 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array3 = array();\n$array4 =\
    \ array();\n$array5 = array();\n$array6 = array();\n$array7 = array();\n$array8\
    \ = array();\n$array9 = array();\n$array10 = array();\n$array11 = array();\n$array12\
    \ = array();\n$array13 = array();\n$array14 = array();\n$array15 = array();\n\
    $array16 = array();\n$array17 = array();\n$array18 = array();\n$array19 = array();\n\
    $array20 = array();\n$array21 = array();\n$array22 = array();\n$array23 = array();\n\
    $array24 = array();\n$array25 = array();\n$array26 = array();\n$array27 = array();\n\
    $array28 = array();\n$array29 = array();\n$array30 = array();\n$array31 = array();\n\
    $array32 = array();\n$array33 = array();\n$array34 = array();\n$array35 = array();\n\
    $", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't seem to work. `filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')` returns `['abc', 'bcd', 'cde', 'array']` instead\
    \ of `['abc', 'array']`\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the code I tested it with. Maybe you forgot to add `return $filtered;` at the\
    \ end of the function?\n<|/ c |>\n<| c |>\nI added the code I tested it with.\
    \ Maybe you forgot to add `return $filtered;` at the end of the function?\n<|/\
    \ c |>\n<| c |>\nI added the code I tested it with. Maybe you forgot to add `return\
    \ $filtered;` at the end of the function?\n<|/ c |>\n<| a tags=arrays,php |>\n\
    <code>\n<?php\n$array = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$result\
    \ = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    $array = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array = ['abc',\
    \ 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = ['abc', 'bcd',\
    \ 'cde', 'array'];\n$prefix = 'a';\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array = ['abc', 'bcd',\
    \ 'cde', 'array'];\n$prefix = 'a';\n$result = ", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI came up with a solution\
    \ using array_filter and a closure:\n<code>\n$strings = ['abc', 'def', 'ghi',\
    \ 'jkl'];\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$strings = ['abc',\
    \ 'def', 'ghi', 'jkl'];\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$strings = ['abc', 'def', 'ghi',\
    \ 'jkl'];\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$strings\
    \ = ['abc', 'def', 'ghi', 'jkl'];\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$strings = ['abc',\
    \ 'def', 'ghi', 'jkl'];\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$strings = ['abc', 'def',\
    \ 'ghi', 'jkl'];\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter($array, function($item) use\
    \ ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $prefix = 'a';\n$result = array_filter($array, function($item) use ($prefix) {\n\
    \    return strpos($item, $prefix) === 0;\n});\n</code>", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$array = array_filter($array, function($var)\
    \ {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=2 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$array =\
    \ array_filter($array, function($var) {\n    return strpos($var, 'a') === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=2 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$array = array_filter($array, function($var) {\n    return\
    \ strpos($var, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$array = array_filter($array,\
    \ function($var) {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $array = array_filter($array, function($var) {\n    return strpos($var, 'a') ===\
    \ 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$array = array_filter($array, function($var) {\n    return\
    \ strpos($var, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$array = array_filter($array,\
    \ function($var) {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $array = array_filter($array, function($var) {\n    return strpos($var, 'a') ===\
    \ 0;\n});\n</code>\n<|/ a ", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| c |>\nThanks for your answer. I'm going to\
    \ try it out and see if it works.\n<|/ c |>\n<| c |>\nI got it working with your\
    \ code. Thanks so much!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $array = array_filter($array, function($value) {\n    return strpos($value, 'a')\
    \ === 0;\n});\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a dscore=1 |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");\n$array = array_filter($array, function($value) {\n    return\
    \ strpos($value, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php,sorting |>\n\
    <| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"\
    t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array, function($value)\
    \ {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php,sorting |>\n<| a tags=arrays,php,", "  $filtered = [];\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$string = 'Hello World';\n$pattern =\
    \ '/^Hello/';\npreg_match($pattern, $string, $matches);\nprint_r($matches);",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array,function($value){\n    return strpos($value,\"\
    a\") === 0;\n});\nprint_r($array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array,function($value){\n    return strpos($value,\"\
    a\") === 0;\n});\nprint_r($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array,function($value){\n    return strpos($value,\"\
    a\") === 0;\n});\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array,function($value){\n    return strpos($value,\"\
    a\") === 0;\n});\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array,function($value){\n    return strpos($value,\"\
    a\") === 0;\n});\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\");\n$array = array_filter($array,function($value){\n    return strpos($value,\"\
    a\") === 0;\n});\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php,multidimensional-array\
    \ |>\n<| a |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age'\
    \ => '20');\n$array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name'\
    \ => 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jack", "  $filtered = [];\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($value){\n\
    \    return strpos($value,'a') === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($value){\n\
    \    return strpos($value,'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\"\
    ,\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"\
    ,\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($value){\n\
    \    return strpos($value,'a') === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($value){\n\
    \    return strpos($value,'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"c\"\
    ,\"d\",\"e\",\"f\",\"", "  return array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => '25');\n$array[] = array('name'\
    \ => 'Jane', 'age' => '28');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n\n$result = array();\nforeach($array\
    \ as $key => $value) {\n    if($value['name'] == 'Jill') {\n        $result[]\
    \ = $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'John', 'age' => '25');\n$array[] = array('name' => 'Jane', 'age' => '28');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n\n$result = array();\nforeach($array as $key => $value)\
    \ {\n    if($value['name'] == 'Jill') {\n        $result[] = $value;\n    }\n\
    }\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jane', 'age' => '28');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n\n$result = array();\nforeach($array\
    \ as $key => $value) {\n    if($value['name'] == 'Jill') {\n        $result[]\
    \ = $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '28');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like this solution, but I still don't understand why my code doesn't\
    \ work. Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    Your code doesn't work because you never actually call `filter_by_prefix()`. You\
    \ only define it, but never call it.\n<|/ c |>\n<| c |>\nI see. So how do I call\
    \ it? I thought I did that in my code by calling `filter_by_prefix()`\n<|/ c |>\n\
    <| c |>\nYou call it like any other function: `filter_by_prefix($strings, 'a')`\n\
    <|/ c |>\n<| c |>\nOh I see. Thank you so much!\n<|/ c |>\n<| a tags=php |>\n\
    <code>\n<?php", "  $filtered = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however\
    \ I do not understand how it works. I understand that you are checking if the\
    \ string starts with the prefix, but how does it know to only return those that\
    \ start with the prefix? I understand that you are using strpos to find the position\
    \ of $prefix, but how does it know to only return those that start with the prefix?\n\
    <|/ c |>\n<| c |>\n`strpos` returns the position of the first occurrence of the\
    \ substring in the string. Since `strpos` returns `FALSE` if the substring is\
    \ not found, the `if` statement checks if the return value is `FALSE`, which means\
    \ it didn't find the substring. Since `strpos` returns `FALSE` if the substring\
    \ is not found, the `if` statement will evaluate to `FALSE` and skip the rest\
    \ of the loop.\n<|/ c |>\n<| c |>\nI see now. Thank you for the explanation!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('id' => 1, 'name' => 'John');\n\
    $array[] = array('id' => 2, 'name' => 'Jane');\n$array[] = array('id' => 3, 'name'\
    \ => 'Jack');\n\n$array2 = array();\n$array2[] = array('id' => 1, 'name' => 'John',\
    \ 'age' => 20);\n$array2[] = array('id' => 2, 'name' => 'Jane', 'age' => 30);\n\
    $array2[] = array('id' => 3, 'name' => 'Jack', 'age' => 40);\n\n$array3 = array();\n\
    $array3[] = array('id' => 1, 'name' => 'John', 'age' => 20);\n$array3[] = array('id'\
    \ => 2, 'name' => 'Jane', 'age' => 30);\n$array3[] = array('id' => 3, 'name' =>\
    \ 'Jack', 'age' => 40);\n\n$array4 = array();\n$array4[] = array('id' => 1, 'name'\
    \ => 'John', 'age' => 20);\n$array4[] = array('id' => 2, 'name' => 'Jane', 'age'\
    \ => 30);\n$array4[] = array('id' => 3, 'name' => 'Jack', 'age' => 40);\n\n$array5\
    \ = array();\n$array5[] = array('id' => 1, 'name' => 'John', 'age' => 20);\n$array5[]\
    \ = array('id' => 2, 'name' => 'Jane', 'age' => 30);\n$array5[] = array('id' =>\
    \ 3, 'name' => 'Jack', 'age' => 40);\n\n$array6 = array();\n$array6[] = array('id'\
    \ => 1, 'name' => 'John', 'age' => 20);\n$array6[] = array('id' => 2, 'name' =>\
    \ 'Jane', 'age' => 30);\n$array6[] = array('id' => 3, 'name' => 'Jack', 'age'\
    \ => 40);\n\n$array7 = array();\n$array7[] = array('id' => 1, 'name' => 'John',\
    \ 'age' => 20);\n$array7[] = array('id' => 2, 'name' => 'Jane', 'age' => 30);\n\
    $array7[] = array('id' => 3, 'name' => 'Jack', 'age' => 40);\n\n$array8 = array();\n\
    $array8[] = array('id' => 1, 'name' => 'John", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer since\
    \ it uses anonymous functions which were introduced in PHP 5.3\n<|/ c |>\n<| a\
    \ dscore=4 |>\n<code>", "  return array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nI like your answer but I think it would be better\
    \ to use a closure instead of a function.\n<|/ c |>\n<| c |>\nI agree, that's\
    \ why I added the comment at the top of my answer. :)\n<|/ c |>\n<| c |>\nI added\
    \ a closure version as well, just for fun.\n<|/ c |>\n<| c |>\nI like your answer\
    \ but I think it would be better to use a closure instead of a function.\n<|/\
    \ c |>\n<| c |>\nI added a closure version as well, just for fun.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly but i would like\
    \ to know if there is a way to do it with array_filter or array_walk. Thanks again\n\
    <|/ c |>\n<| c |>\nI added a solution using `array_filter`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$array = [\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n   \
    \ 'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n];\n\n$prefix = 'abc';\n\
    \n$result = array_filter($array, function($value) use ($prefix) {\n    return\
    \ strpos($value, $prefix) === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = [\n   \
    \ 'abc',\n    'def',\n    'ghi',\n    'jkl',\n    'mno',\n    'pqr',\n    'stu',\n\
    \    'vwx',\n    'yz'\n];\n\n$prefix = 'abc';\n\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $array = [\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n    'mno',\n    'pqr',\n\
    \    'stu',\n    'vwx',\n    'yz'\n];\n\n$prefix = 'abc';\n\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'abc',\n    'def',\n    'ghi',\n\
    \    'jkl',\n    'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n];\n\n\
    $prefix = 'abc';\n\n$result = array_filter($", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because\
    \ it doesn't require a loop. Just a filter. Thanks!\n<|/ c |>\n<| c |>\nI like\
    \ this solution as well, because it doesn't require a loop. Just a filter. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this solution as well, because it doesn't require a\
    \ loop. Just a filter. Thanks!\n<|/ c |>\n<| c |>\nI like this solution as well,\
    \ because it doesn't require a loop. Just a filter. Thanks!\n<|/ c |>\n<| c |>\n\
    I like this solution as well, because it doesn't require a loop. Just a filter.\
    \ Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = 'abcdefghijklmnopqrstuvwxyz';\n\
    $prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/', $string);\n</code>\n<|/\
    \ a tags=php,string,arrays,substring |>\n<| c |>\nThis should be the accepted\
    \ answer. No loops, no regex. Just a filter.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. No loops, no regex. Just a filter.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No loops, no regex. Just a filter.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. No loops, no regex. Just a\
    \ filter.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No loops, no\
    \ regex. Just a filter.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = 'abcdefghijklmnopqrstuvwxyz';\n\
    $prefix = 'a';\n$result = array_filter(explode($prefix), function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=php,string,arrays,substring |>\n<| c |>\nThis should be the accepted answer.\
    \ No loops, no regex. Just a filter.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No loops, no regex. Just a filter.\n<|/ c |>\n<|", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis answer doesn't work\
    \ if you have a string that starts with `'a'` and ends with `'b'`\n<|/ c |>\n\
    <| c |>\n: I didn't say it didn't. I'm saying that it doesn't work if you have\
    \ a string that starts with `'a'` and ends with `'b'`\n<|/ c |>\n<| c |>\n: I\
    \ didn't say it didn't. I'm saying that it doesn't work if you have a string that\
    \ starts with `'a'` and ends with `'b'`\n<|/ c |>\n<| c |>\n: I didn't say it\
    \ didn't. I'm saying that it doesn't work if you have a string that starts with\
    \ `'a'` and ends with `'b'`\n<|/ c |>\n<| c |>\n: I didn't say it didn't. I'm\
    \ saying that it doesn't work if you have a string that starts with `'a'` and\
    \ ends with `'b'`\n<|/ c |>\n<| a |>\n<code>\n$array = array('a', 'b', 'c', 'd',\
    \ 'e');\n$prefix = 'a';\n\n$result = array_filter($array, function($value) use\
    \ ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=5 tags=arrays,php |>\n<| c |>\nThis answer doesn't work\
    \ if you have a string that starts with `'a'` and ends with `'b'`\n<|/ c |>\n\
    <| c |>\nThis answer doesn't work if you have a string that starts with `'a'`\
    \ and ends with `'b'`\n<|/ c |>\n<| c |>\nThis answer doesn't work if you have\
    \ a string that starts with `'a'` and ends with `'b'`\n<|/ c |>\n<| c |>\nThis\
    \ answer doesn't work if you have a string that starts with `'a'` and ends with\
    \ `'b'`\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd', 'e');\n$prefix = 'a';\n\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=5 |>\n<|", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI like this solution, although it would be\
    \ better to use a closure rather than a global function.  Also, `array_filter`\
    \ will remove empty strings, so `array_filter($strings, function($string) { return\
    \ strpos($string, $prefix) === 0; });` would be better.  Finally, `array_filter`\
    \ will remove empty strings, so `array_filter($strings, function($string) { return\
    \ strpos($string, $prefix) === 0; }` would be better.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for the suggestions. I added them to the answer.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for the suggestions. I added them to the answer.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for the suggestions. I added them to the answer.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for the suggestions. I added them to the answer.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result =\
    \ array_filter($array, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result\
    \ = array_filter($array, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result =\
    \ array_filter($array, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result =\
    \ array_filter($array, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array('abc', 'def', 'ghi', '", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = [\n    'abc',\n\
    \    'bcd',\n    'cde',\n    'array'\n];\n\n$prefix = 'a';\n\n$filtered = array_filter($array,\
    \ function($v) use ($prefix) {\n    return strpos($v, $prefix) === 0;\n});\n\n\
    print_r($filtered);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n\
    $filtered = array_filter($array, function($v) use ($prefix) {\n    return strpos($v,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array =\
    \ array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($array,\
    \ function($v) use ($prefix) {\n    return strpos($v, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array dscore=1 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n\
    $filtered = array_filter($array, function($v) use ($prefix) {\n    return strpos($v,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $array = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($array,\
    \ function($v) use ($prefix) {\n    return strpos($v, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n\
    $filtered = array_filter($array, function($v) use ($prefix) {\n    return strpos($v,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add ", " \
    \ $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$search\
    \ = 'a';\n$result = array_filter($array, function($value) use ($search) {\n  \
    \  return strpos($value, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) === 0;\n});\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I used\
    \ the other answer because I didn't want to use any external libraries, but I\
    \ appreciate your answer nonetheless.\n<|/ c |>\n<| a dscore=1 |>\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer nonetheless.\nI used the\
    \ other answer because I didn't want to use any external libraries, but I appreciate\
    \ your answer nonetheless.\nI used the other answer because I didn't want to use\
    \ any external libraries, but I appreciate your answer ", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$result = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"abc\",\
    \ \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\n\
    \    'a' => array(\n        'b' => array(\n            'c' => 'd',\n         \
    \   'e' => 'f'\n        ),\n        'g' => array(\n            'h' => 'i',\n \
    \           'j' => 'k'\n        )\n    ),\n    'l' => array(\n        'm' => 'n',\n\
    \        'o' => 'p'\n    )\n);\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks, this was very helpful.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer. Your code\
    \ works but only if the array is empty. If there is already something in the array\
    \ it won't work. Do you know why that is?\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a version that works with an empty array.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code and it works perfectly for empty arrays.\
    \ But when I try it with a array that already has something in it it won't work.\
    \ Do you know why that is?\n<|/ c |>\n<| c |>\nI edited my answer to include a\
    \ version that works with an array that already has something in it.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I tried your code and it works perfectly for\
    \ empty arrays. But when I try it with a array that already has something in it\
    \ it won't work. Do you know why that is?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$array = array('abc', 'def', 'ghi', 'jkl');\n$array2 = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$array3 = array('abc', 'def', 'ghi', 'jkl');\n\n$array4 = array();\n\
    $array5 = array();\n$array6 = array();\n\n$array4[] = $array;\n$array5[] = $array2;\n\
    $array6[] = $array3;\n\n$array4[] = $array;\n$array5[] = $array2;\n$array6[] =\
    \ $array3;\n\n$array4[] = $array;\n$array5[] = $array2;\n$array6[] = $array3;\n\
    \n$array4[] = $array;\n$array5[] = $array2;\n$array6[] = $array3;\n\n$array4[]\
    \ = $array;\n$array5[] = $array2;\n$array6[] = $array3;\n\n$array4[] = $array;\n\
    $array5[] = $array2;\n$array6[] = $array3;\n\n$array4[] = $array;\n$array5[] =\
    \ $array2;\n$array6[] = $array3;\n\n$array4[] = $array;\n$array5[] = $array2;\n\
    $array6[] = $", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($var){\n\
    \    return strpos($var,\"a\") !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis should be the accepted answer. No need to use any loops, no need\
    \ for regex. Just simple string functions. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to use any loops, no need for regex. Just simple\
    \ string functions. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to use any loops, no need for regex. Just simple string functions. Thanks!\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to use any loops,\
    \ no need for regex. Just simple string functions. Thanks!\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to use any loops, no need for regex.\
    \ Just simple string functions. Thanks!\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");\n$array = array_filter($array,function($var){\n    return strpos($var,\"\
    a\") !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to use any loops, no need for regex. Just simple string\
    \ functions. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No\
    \ need to use any loops, no need for regex. Just simple string functions. Thanks!\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI love this solution. Very clean\
    \ and simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Simple,\
    \ clean, and no unnecessary looping.\n<|/ c |>\n<| c |>\nI love this solution.\
    \ Very clean and simple.\n<|/ c |>\n<| c |>\nI love this solution. Very clean\
    \ and simple.\n<|/ c |>\n<| c |>\nI love this solution. Very clean and simple.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n\
    $prefix = 'a';\n$result = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple, clean, and no unnecessary\
    \ looping.\n<|/ c |>\n<| c |>\nI love this solution. Very clean and simple.\n\
    <|/ c |>\n<| c |>\nI love this solution. Very clean and simple.\n<|/ c |>\n<|\
    \ c |>\nI love this solution. Very clean and simple.\n<|/ c |>\n<| c |>\nI love\
    \ this solution. Very clean and simple.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $strings = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nI love this solution.\
    \ Very clean and simple.\n<|/ c |>\n<| c |>\nI love this solution. Very clean\
    \ and simple.\n<|/ c |>\n<| c |>\nI love this solution. Very clean and simple.\n\
    <|/ c |>\n<| c |>\nI love this solution. Very clean and simple.\n<|/ c |>\n",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your code works fine but i\
    \ would like to know how can i use it in my code. Can you please help me with\
    \ that?\n<|/ c |>\n<| c |>\nI added an example for you. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks again for your answer. I am getting this error `Fatal error:\
    \ Call to undefined function filter_by_prefix() in C:\\xampp\\htdocs\\test\\index.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nYou have to define it before using it. You can\
    \ define it in a separate file like `functions.php` and include it before you\
    \ use it.\n<|/ c |>\n<| c |>\nI added the code you suggested but still getting\
    \ this error `Fatal error: Call to undefined function filter_by_prefix() in C:\\\
    xampp\\htdocs\\test\\index.php on line 4`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$strings = array(\n    'abc',\n    'bcd',\n    'cde',\n    'array'\n);\n\
    \n$prefix = 'a';\n\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer. Your code\
    \ works fine but i would like to know how can i use it in my code. Can you please\
    \ help me with that?\n<|/ c |>\n<| c |>\nI added an example for you. Hope it helps.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings = array(\n    'abc',\n   \
    \ 'bcd',\n    'cde',\n    'array'\n);\n\n$prefix = 'a';\n\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks\
    \ for your answer. Your code works fine but i would like to know how can i use\
    \ it in my code. ", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}\n", "  $filtered = [];\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nThanks so much! I really appreciate\
    \ it!\n<|/ c |>\n<| a |>\n<code>\n$strings = array('abc', 'bcd', 'cde', 'array');\n\
    $prefix = 'a';\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=2 |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a dscore=1 |>\n<code>\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a |>\n\
    <code>", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$string = 'Hello World';\n\
    $search = 'l';\n$pos = strpos($string, $search);\nif ($pos === false) {\n    echo\
    \ \"The string '$search' was not found in the string '$string'\";\n} else {\n\
    \    echo \"The string '$search' was found in the string '$string'\";\n    echo\
    \ \" and exists at position $pos\";\n}", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string |>\n<code>",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer as it uses native PHP functions. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer as it uses\
    \ native PHP functions. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer as it uses native PHP functions. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer as it uses\
    \ native PHP functions. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer as it uses native PHP functions. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = 'abc def ghi jkl mno\
    \ pqr stu vwx yz';\n$prefix = 'a';\n$result = preg_grep('/^' . $prefix . '/i',\
    \ $string);\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis should be the accepted\
    \ answer as it uses native PHP functions. No need to reinvent the wheel.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer as it uses native PHP functions.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer as it uses native PHP functions. No need to reinvent the wheel.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer as it uses native PHP functions.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer as it uses native PHP functions. No need to reinvent the wheel.\n<|/\
    \ c |>\n<| a tags=php,string |>\n<code>\n$string = 'abc def ghi jkl mno pqr stu\
    \ vwx yz';\n$prefix = 'a';\n$result = preg_grep('/^' . $prefix . '/i', $string);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer as it\
    \ uses native PHP functions. No need to reinvent the wheel.\n<|/ c |>", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your\
    \ answer. I've tried this but I'm getting this error `Warning: array_filter()\
    \ expects parameter 2 to be a valid callback, function 'filter_by_prefix' not\
    \ found or invalid function name`\n<|/ c |>\n<| c |>\nYou have to define the function\
    \ before using it. See my updated answer.\n<|/ c |>\n<| c |>\nThanks again. I've\
    \ tried this but I'm getting this error `Warning: array_filter() expects parameter\
    \ 2 to be a valid callback, function 'filter_by_prefix' not found or invalid function\
    \ name`\n<|/ c |>\n<| c |>\nYou have to define the function before using it. See\
    \ my updated answer.\n<|/ c |>\n<| c |>\nThanks again. I've tried this but I'm\
    \ getting this error `Warning: array_filter() expects parameter 2 to be a valid\
    \ callback, function 'filter_by_prefix' not found or invalid function name`\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$array = array_filter($array, function($var) {\n    return strpos($var,\
    \ 'a') === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$array = array_filter($array, function($var)\
    \ {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $array = array_filter($array, function($var) {\n    return strpos($var, 'a') ===\
    \ 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$array = array_filter($array, function($var)\
    \ {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $array = array_filter($array, function($var) {\n    return strpos($var, 'a') ===\
    \ 0;\n", "  return array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$search\
    \ = 'a';\n$result = array_filter($array, function($item) use ($search) {\n   \
    \ return strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$search\
    \ = 'a';\n$result = array_filter($array, function($item) use ($search) {\n   \
    \ return strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$search = 'a';\n\
    $result = array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) === 0;\n});\n</code>\n<|/ a tag", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThanks, this is exactly what I was looking for!\n<|/ c |>\n<| a\
    \ |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\");\n$search = \"abc\";\n\
    $result = array_filter($array, function($value) use ($search) {\n    return strpos($value,\
    \ $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<| c |>\n\
    Thanks, this is exactly what I was looking for!\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(\"abc\", \"def\", \"ghi\");\n$search = \"abc\";\n$result\
    \ = array_filter($array, function($value) use ($search) {\n    return strpos($value,\
    \ $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\");\n$search = \"abc\";\n\
    $result = array_filter($array, function($value) use ($search) {\n    return strpos($value,\
    \ $search) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $array = array(\"abc\", \"def\", \"ghi\");\n$search = \"abc\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    abc\", \"def\", \"ghi\");\n$search = \"abc\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"abc\", \"def\", \"ghi\");\n$search = \"abc\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"def\", \"ghi\");\n$search = \"abc\";\n$result = array_", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, however\
    \ it only works with strings. What about arrays?\n<|/ c |>\n<| c |>\n: It works\
    \ for arrays as well. `array_filter` calls `array_walk` internally, which calls\
    \ `array_map` internally, which calls `array_search` internally, which calls `strpos`\
    \ internally, which calls `strcmp` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which calls `strlen` internally, which calls `strlen` internally,\
    \ which calls `strlen` internally, which calls `strlen` internally, which calls\
    \ `strlen` internally, which ", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n", " \
    \ $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for the answer. I'm going to try this out and see how it goes.\n\
    <|/ c |>\n<| c |>\nI added a more detailed explanation to the answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for the detailed explanation. I'm going to\
    \ try this out and see how it goes.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ '", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks so much for this. I didn't realize you could use anonymous\
    \ functions like that. I'm going to have to read up on anonymous functions more\
    \ to understand how they work. Thanks again!\n<|/ c |>\n<| c |>\n: Glad I could\
    \ help. Anonymous functions are a very powerful feature of PHP. I've used them\
    \ a lot, and they can make your code a lot more readable. :)\n<|/ c |>\n<| c |>\n\
    : I added a more detailed explanation of how this works. I hope it helps!\n<|/\
    \ c |>\n<| c |>\nThanks so much for this. I didn't realize you could use anonymous\
    \ functions like that. I'm going to have to read up on anonymous functions more\
    \ to understand how they work. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n$array[]\
    \ = array('name' => 'Jane', 'age' => 30);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'J", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this solution, because it doesn't require any additional libraries.\
    \ But I wonder why this isn't the default behavior in PHP. Seems like a very common\
    \ use case.\n<|/ c |>\n<| c |>\nI agree with you, it's very common and I wonder\
    \ why it's not the default behavior. Maybe it's because it's more difficult to\
    \ implement and to maintain.\n<|/ c |>\n<| c |>\nI agree with you, it's very common\
    \ and I wonder why it's not the default behavior. Maybe it's because it's more\
    \ difficult to implement and to maintain.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ it's very common and I wonder why it's not the default behavior. Maybe it's\
    \ because it's more difficult to implement and to maintain.\n<|/ c |>\n<| c |>\n\
    I agree with you, it's very common and I wonder why it's not the default behavior.\
    \ Maybe it's because it's more difficult to implement and to maintain.\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n\
    $prefix = 'a';\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php,filter\
    \ |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the\
    \ wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$strings\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I prefer `array_filter` over `array_reduce`\
    \ because it's more readable and easier to understand.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. I just wanted to show a more readable solution. :)\n<|/ c |>\n<| c\
    \ |>\nI agree with you. I just wanted to show a more readable solution. :)\n<|/\
    \ c |>\n<| a |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n$prefix\
    \ = 'a';\n$result = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a |>\n<code>\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings =\
    \ array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$prefix = 'a';\n$result = array_filter", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this answer better than the accepted one because it doesn't\
    \ require a dependency on any external libraries.\n<|/ c |>\n<| c |>\nI like this\
    \ answer better than the accepted one because it doesn't require a dependency\
    \ on any external libraries.\n<|/ c |>\n<| c |>\nI like this answer better than\
    \ the accepted one because it doesn't require a dependency on any external libraries.\n\
    <|/ c |>\n<| c |>\nI like this answer better than the accepted one because it\
    \ doesn't require a dependency on any external libraries.\n<|/ c |>\n<| c |>\n\
    I like this answer better than the accepted one because it doesn't require a dependency\
    \ on any external libraries.\n<|/ c |>\n<| a tags=arrays,php,string |>\n<code>",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if the prefix is at the start of the string. `filter_by_prefix(['abc',\
    \ 'bcd', 'cde'], 'a')` returns `['abc', 'bcd', 'cde']`.\n<|/ c |>\n<| c |>\n:\
    \ Yes, I noticed that and fixed it. I also added a version that doesn't require\
    \ a callback.\n<|/ c |>\n<| c |>\nI added a version that doesn't require a callback.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n$array = ['abc', 'bcd', 'cde'];\n$prefix =\
    \ 'a';\n$result = array_filter($array, function($item) use ($prefix) {\n    return\
    \ strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a\
    \ |>\n<code>\n$array = ['abc', 'bcd', 'cde'];\n$prefix = 'a';\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = ['abc', 'bcd', 'cde'];\n$prefix = 'a';\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n$array = ['abc', 'bcd',\
    \ 'cde'];\n$prefix = 'a';\n$result = array_filter($array, function($item) use\
    \ ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = ['abc', 'bcd', 'cde'];\n$prefix = 'a';\n\
    $result = array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$array\
    \ = ['abc', 'bcd', 'cde'];\n$prefix = 'a';\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays ", "  $filtered = [];\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nThanks, this was very helpful!\n<|/\
    \ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,\
    \ function($v){\n    return strpos($v, \"a\") === 0;\n});\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"\
    e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,\
    \ function($v){\n    return strpos($v, \"a\") === 0;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"\
    e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"\
    r\",\"s\",\"t", "  $filtered = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\n\
    \    array('name' => 'John', 'age' => '25'),\n    array('name' => 'Jane', 'age'\
    \ => '30'),\n    array('name' => 'Jack', 'age' => '35')\n);\n\n$search = 'Jack';\n\
    \n$result = array_filter($array, function($v) use ($search) {\n    return strpos($v['name'],\
    \ $search) !== false;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nThis should be the accepted answer as it uses anonymous functions which\
    \ is the only way to pass variables into them.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    $array = array(\n    array('name' => 'John', 'age' => '25'),\n    array('name'\
    \ => 'Jane', 'age' => '30'),\n    array('name' => 'Jack', 'age' => '35')\n);\n\
    \n$search = 'Jack';\n\n$result = array_filter($array, function($v) use ($search)\
    \ {\n    return strpos($v['name'], $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=3 |>\n<code>\n\
    $array = array(\n    array('name' => 'John', 'age' => '25'),\n    array('name'\
    \ => 'Jane', 'age' => '30'),\n    array('name' => 'Jack', 'age' => '35')\n);\n\
    \n$search = 'Jack';\n\n$result = array_filter($array, function($v) use ($search)\
    \ {\n    return strpos($v['name'], $search) !== false;\n});\n\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=3 |>\n<code>\n\
    $array = array(\n    array('name' => 'John', 'age' => '25'),\n    array('name'\
    \ => 'Jane', 'age' => '30'),\n    array('name' => 'Jack', 'age' => '35')\n);\n\
    \n$search = 'Jack';\n\n$result = array_filter($array, function($v) use ($search)\
    \ {\n    return strpos($v['name'], $search) !== false;\n});\n\nprint_r($", " \
    \ $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\n<code>\n$arr = array(\"abc\", \"\
    def\", \"ghi\");\n$arr2 = array(\"abc\", \"def\", \"ghi\");\n$arr3 = array(\"\
    abc\", \"def\", \"ghi\");\n$arr4 = array(\"abc\", \"def\", \"ghi\");\n$arr5 =\
    \ array(\"abc\", \"def\", \"ghi\");\n$arr6 = array(\"abc\", \"def\", \"ghi\");\n\
    $arr7 = array(\"abc\", \"def\", \"ghi\");\n$arr8 = array(\"abc\", \"def\", \"\
    ghi\");\n$arr9 = array(\"abc\", \"def\", \"ghi\");\n$arr10 = array(\"abc\", \"\
    def\", \"ghi\");\n$arr11 = array(\"abc\", \"def\", \"ghi\");\n$arr12 = array(\"\
    abc\", \"def\", \"ghi\");\n$arr13 = array(\"abc\", \"def\", \"ghi\");\n$arr14\
    \ = array(\"abc\", \"def\", \"ghi\");\n$arr15 = array(\"abc\", \"def\", \"ghi\"\
    );\n$arr16 = array(\"abc\", \"def\", \"ghi\");\n$arr17 = array(\"abc\", \"def\"\
    , \"ghi\");\n$arr18 = array(\"abc\", \"def\", \"ghi\");\n$arr19 = array(\"abc\"\
    , \"def\", \"ghi\");\n$arr20 = array(\"abc\", \"def\", \"ghi\");\n$arr21 = array(\"\
    abc\", \"def\", \"ghi\");\n$arr22 = array(\"abc\", \"def\", \"ghi\");\n$arr23\
    \ = array(\"abc\", \"def\", \"ghi\");\n$arr24 = array(\"abc\", \"def\", \"ghi\"\
    );\n$arr25 = array(\"abc\", \"def\", \"ghi\");\n$arr26 = array(\"abc\", \"def\"\
    , \"ghi\");\n$arr27 = array(\"abc\", \"def\", \"ghi\");\n$arr28 = array(\"abc\"\
    , \"def\", \"ghi\");\n$arr29 = array(\"abc\", \"def\", \"ghi\");\n$arr30 = array(\"\
    abc\", \"def\", \"ghi\");\n$arr31 = array(\"abc\", \"def\", \"ghi\");\n$arr32\
    \ = array(\"abc\", \"def\", \"ghi\");\n$arr33 = array(\"abc\", \"def\", \"ghi\"\
    );\n$arr34 = array(\"abc\", \"def\", \"ghi\");\n$arr35 = array(\"abc\", \"def\"\
    , \"ghi\");\n$arr36 = array(\"abc\", \"def\", \"ghi\");\n", "  $filtered = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/\
    \ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThank you for sharing\
    \ your solution. I've been trying to figure out how to do this for a while now.\
    \ Your solution works perfectly for my needs.\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array();\n\
    $array[] = array('name' => 'John', 'age' => 25);\n$array[] = array('name' => 'Jane',\
    \ 'age' => 30);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[]\
    \ = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[]\
    \ = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[]\
    \ = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[]\
    \ = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name' => 'Jim', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jim', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jim', 'age' => 25);\n$", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n            'e'\
    \ => 'f'\n        ],\n        'g' => [\n            'h' => 'i',\n            'j'\
    \ => 'k'\n        ]\n    ],\n    'm' => [\n        'n' => 'o',\n        'p' =>\
    \ 'q'\n    ]\n];\n\n$prefix = 'a';\n\n$result = [];\nforeach ($array as $key =>\
    \ $value) {\n    if (is_array($value)) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($k != $prefix) {\n                $result[$key][$k] = $v;\n\
    \            }\n        }\n    } else {\n        $result[$key] = $value;\n   \
    \ }\n}\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = [\n   \
    \ 'a' => [\n        'b' => [\n            'c' => 'd',\n            'e' => 'f'\n\
    \        ],\n        'g' => [\n            'h' => 'i',\n            'j' => 'k'\n\
    \        ]\n    ],\n    'm' => [\n        'n' => 'o',\n        'p' => 'q'\n  \
    \  ]\n];\n\n$prefix = 'a';\n\n$result = [];\nforeach ($array as $key => $value)\
    \ {\n    if (is_array($value)) {\n        foreach ($value as $k => $v) {\n   \
    \         if ($k != $prefix) {\n                $result[$key][$k] = $v;\n    \
    \        }\n        }\n    } else {\n        $result[$key] = $value;\n    }\n\
    }\n\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n\
    \            'e' => 'f'\n        ],\n        'g' => [\n            'h' => 'i',\n\
    \            'j' => 'k'\n        ]\n    ],\n    'm' => [\n        'n' => 'o',\n\
    \        'p' => 'q'\n    ]\n];\n\n$prefix = 'a';\n\n$result = [];\nforeach ($array\
    \ as $key => $value) {\n    if (is_array($value)) {\n        foreach ($value as\
    \ $k => $v) {\n            if ($k != ", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThank you for your answer. Unfortunately I cannot use any external libraries\
    \ such as `filter` because I am not allowed to use any external libraries. I must\
    \ use only native PHP functions.\n<|/ c |>\n<| c |>\nI added a native PHP solution\
    \ to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$strings = [\n   \
    \ 'abc',\n    'bcd',\n    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$strings = [\n    'abc',\n    'bcd',\n\
    \    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$strings = [\n    'abc',\n    'bcd',\n    'cde',\n    'array',\n\
    ];\n\n$prefix = 'a';\n\n$filtered = array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n<?php\n$strings =\
    \ [\n    'abc',\n    'bcd',\n    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\n\
    $filtered = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$strings = [\n \
    \   'abc',\n    'bcd',\n    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\n$filtered\
    \ = array_filter($", "  $filtered = [];\n  foreach ($strings as $string) {\n \
    \   if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$strings = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $strings = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n$strings = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n\
    <code>\n$strings = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$strings\
    \ = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\n$strings\
    \ = ['abc', 'bcd', 'cde', 'array'];\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n$string", "  $filtered = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks so much for your help! I appreciate it!\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jane', 'age' => 30);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[]", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array1 = array(\"\
    a\",\"b\",\"c\");\n$array2 = array(\"d\",\"e\",\"f\");\n$array3 = array(\"g\"\
    ,\"h\",\"i\");\n\n$array4 = array($array1,$array2,$array3);\n\n$array5 = array();\n\
    foreach($array4 as $array){\n    foreach($array as $key=>$value){\n        if($key==0){\n\
    \            $array5[] = $value;\n        }\n    }\n}\n\nprint_r($array5);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array1 = array(\"a\",\"b\",\"c\"\
    );\n$array2 = array(\"d\",\"e\",\"f\");\n$array3 = array(\"g\",\"h\",\"i\");\n\
    \n$array4 = array($array1,$array2,$array3);\n\n$array5 = array();\nforeach($array4\
    \ as $array){\n    foreach($array as $key=>$value){\n        if($key==0){\n  \
    \          $array5[] = $value;\n        }\n    }\n}\n\nprint_r($array5);\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array1 = array(\"a\",\"b\",\"c\");\n$array2 = array(\"d\",\"e\"\
    ,\"f\");\n$array3 = array(\"g\",\"h\",\"i\");\n\n$array4 = array($array1,$array2,$array3);\n\
    \n$array5 = array();\nforeach($array4 as $array){\n    foreach($array as $key=>$value){\n\
    \        if($key==0){\n            $array5[] = $value;\n        }\n    }\n}\n\n\
    print_r($array5);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array1\
    \ = array(\"a\",\"b\",\"c\");\n$array2 = array(\"d\",\"e\",\"f\");\n$array3 =\
    \ array(\"g\",\"h\",\"i\");\n\n$array4 = array($array1,$array2,$array3);\n\n$array5\
    \ = array();\nforeach($array4 as $array){\n    foreach($array as $key=>$value",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n\
    $array = [\n    'a' => 'a',\n    'b' => 'b',\n    'c' => 'c',\n    'd' => 'd',\n\
    \    'e' => 'e',\n    'f' => 'f',\n    'g' => 'g',\n];\n\n$prefix = 'a';\n\n$result\
    \ = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=2 tags=php,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array('a' => 'a', 'b' => 'b', 'c' =>\
    \ 'c', 'd' => 'd', 'e' => 'e', 'f' => 'f', 'g' => 'g');\n\n$prefix = 'a';\n\n\
    $result = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=1 |>\n<code>\n$array = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd'\
    \ => 'd', 'e' => 'e', 'f' => 'f', 'g' => 'g');\n\n$prefix = 'a';\n\n$result =\
    \ array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=1 |>\n<code>\n$array = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd'\
    \ => 'd', 'e' => 'e', 'f' => 'f', 'g' => 'g');\n\n$prefix = 'a';\n\n$result =\
    \ array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array('a' => 'a', 'b' => 'b', 'c' =>\
    \ 'c', 'd' => 'd', 'e' => 'e', 'f' => 'f', 'g' => 'g');\n\n$prefix = 'a';\n\n\
    $result = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\n$array = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd'\
    \ => 'd', 'e' => 'e', 'f' => 'f', 'g' => 'g", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$result = array_filter($array, function($value) {\n    return strpos($value,\
    \ 'a') === 0;\n});\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should be the accepted\
    \ answer. Simple, elegant, and works.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Simple, elegant, and works.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$result = array_filter($array, function($value) {\n    return strpos($value,\
    \ 'a') === 0;\n});\n</code>\n<|/ a dscore=3 tags=php,arrays |>\n<| a dscore=3\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result =\
    \ array_filter($array, function($value) {\n    return strpos($value, 'a') ===\
    \ 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=3 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($value)\
    \ {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$result = array_filter($array, function($value) {\n    return strpos($value,\
    \ 'a') === 0;\n});\n</code>\n<|/ a dscore", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$string = 'The quick brown fox jumps over the\
    \ lazy dog';\n$search = 'fox';\n$pos = strpos($string, $search);\n$result = substr($string,\
    \ 0, $pos);\necho $result;", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI like your answer, but I think it would be\
    \ better to use a `foreach` loop and `break` after the first match. Also, `array_filter`\
    \ will create a new array and copy the items into it, so it would be better to\
    \ use a `foreach` loop and `break` after the first match. Also, `array_filter`\
    \ will create a new array and copy the items into it, so it would be better to\
    \ use a `foreach` loop and `break` after the first match.\n<|/ c |>\n<| c |>\n\
    I agree with you on all points. I added a foreach loop and a break after the first\
    \ match. Thanks for your feedback.\n<|/ c |>\n<| c |>\nI added a foreach loop\
    \ and a break after the first match. Thanks for your feedback.\n<|/ c |>\n<| a\
    \ tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result = array();\n\
    foreach($array as $key => $value){\n    if(strpos($value, $search) !== false){\n\
    \        $result[] = $value;\n        break;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"\
    ,\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search\
    \ = \"a\";\n$result = array();\nforeach($array as $key => $value){\n    if(strpos($value,\
    \ $search) !== false){\n        $result[] = $value;\n        break;\n    }\n}\n\
    print_r($result);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$string\
    \ = 'abc def ghi jkl mno pqr stu vwx yz';\n$prefix = 'abc';\n$array = explode(\"\
    \ \", $string);\n$result = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n$string\
    \ = 'abc def ghi jkl mno pqr stu vwx yz';\n$prefix = 'abc';\n$array = explode(\"\
    \ \", $string);\n$result = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$string = 'abc def\
    \ ghi jkl mno pqr stu vwx yz';\n$prefix = 'abc';\n$array = explode(\" \", $string);\n\
    $result = array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = 'abc def ghi jkl mno pqr stu vwx yz';\n$prefix = 'abc';\n\
    $array = explode(\" \", $string);\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$string = 'abc def ghi jkl mno pqr\
    \ stu vwx yz';\n$prefix = 'abc';\n$array = explode(\" \", $string);\n$result =\
    \ array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=1 |>\n<| a ", "  $filtered = [];\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}", "  $filtered = [];\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I've tried it and it doesn't work. I've added the code to the\
    \ question. Maybe you can see what I'm doing wrong?\n<|/ c |>\n<| c |>\nI added\
    \ a working example to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I've tried it and it doesn't work. I've added the code to the question. Maybe\
    \ you can see what I'm doing wrong?\n<|/ c |>\n<| c |>\nI added a working example\
    \ to my answer.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n\
    <?php\n$array = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n \
    \           'e' => 'f'\n        ],\n        'g' => [\n            'h' => 'i',\n\
    \            'j' => 'k'\n        ]\n    ],\n    'l' => [\n        'm' => [\n \
    \           'n' => 'o',\n            'p' => 'q'\n        ],\n        'r' => [\n\
    \            's' => 't',\n            'u' => 'v'\n        ]\n    ]\n];\n\n$prefix\
    \ = 'a';\n\n$result = array_reduce($array, function ($carry, $item) {\n    return\
    \ array_merge($carry, array_filter($item, function ($item) use ($prefix) {\n \
    \       return strpos($item, $prefix) === 0;\n    }));\n}, []);\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'a' => [\n\
    \        'b' => [\n            'c' => 'd',\n            'e' => 'f'\n        ],\n\
    \        'g' => [\n            'h' => 'i',\n            'j' => 'k'\n        ]\n\
    \    ],\n    'l' => [\n        'm' => [\n            'n' => 'o',\n           \
    \ 'p' => 'q'\n        ],\n        'r' => [\n            's' => 't',\n        \
    \    'u' => 'v'\n        ]\n    ]\n];\n\n$prefix = 'a';\n\n$result = array_reduce($array,\
    \ function ($carry, $item) {\n    return array_merge($carry, array_filter($item,\
    \ function ($item) use ($prefix) {\n        return strpos($item, $prefix) ===\
    \ 0;\n    }));\n}, []);\n\nprint_r($result);\n</code>\n<|/ a tags=php,", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", " \
    \ $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution. Very concise. Thanks!\n<|/ c |>\n<| c |>\nI like\
    \ this solution as well. Very concise. Thanks!\n<|/ c |>\n<| c |>\nI like this\
    \ solution as well. Very concise. Thanks!\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well. Very concise. Thanks!\n<|/ c |>\n<| c |>\nI like this solution as well.\
    \ Very concise. Thanks!\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    a\" => \"green\", \"red\", \"blue\", \"red\");\n$search = \"red\";\n$result =\
    \ array_filter($array, function($var) use ($search) {\n    return strpos($var,\
    \ $search) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly and it's easy to understand.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Works perfectly and it's easy to\
    \ understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\" => \"green\", \"red\"\
    , \"blue\", \"red\");\n$search = \"red\";\n$result = array_filter($array, function($var)\
    \ use ($search) {\n    return strpos($var, $search) !== false;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<| a |>\n<code>\n\
    $array = array(\"a\" => \"green\", \"red\", \"blue\", \"red\");\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like this solution, however I believe it can be\
    \ improved by using array_filter() instead of array_walk() since array_walk()\
    \ will loop through every element in the array and array_filter() will stop after\
    \ the first match.\n<|/ c |>\n<| c |>\nI agree with you, `array_filter()` is more\
    \ appropriate in this case. I've updated my answer to reflect this.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$strings = array('abc', 'def', 'ghi');\n$prefix\
    \ = 'a';\n$filtered = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php,filter\
    \ |>\n<| c |>\nThis should be the accepted answer. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$strings = array('abc', 'def', 'ghi');\n$prefix\
    \ = 'a';\n$filtered = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php,filter\
    \ |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Much more elegant than my answer.\n\
    <|/ ", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $array = array_filter($array,function($value){\n    return strpos($value,\"a\"\
    )===0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding how and/or why it solves\
    \ the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($value){\n\
    \    return strpos($value,\"a\")===0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\"\
    ,\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"\
    ,\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($value){\n\
    \    return strpos($value,\"a\")===0;\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"\
    e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array,function($value",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array(\n    'a' => array('b' => array('c' => 'd')),\n \
    \   'e' => array('f' => array('g' => 'h'))\n);\n\n$result = array();\nforeach\
    \ ($array as $key => $value) {\n    if (is_array($value)) {\n        foreach ($value\
    \ as $k => $v) {\n            if (is_array($v)) {\n                foreach ($v\
    \ as $k2 => $v2) {\n                    if (is_array($v2)) {\n               \
    \         foreach ($v2 as $k3 => $v3) {\n                            if (is_array($v3))\
    \ {\n                                foreach ($v3 as $k4 => $v4) {\n         \
    \                           if (is_array($v4)) {\n                           \
    \             foreach ($v4 as $k5 => $v5) {\n                                \
    \            if (is_array($v5)) {\n                                          \
    \      foreach ($v5 as $k6 => $v6) {\n                                       \
    \             if (is_array($v6)) {\n                                         \
    \               foreach ($v6 as $k7 => $v7) {\n                              \
    \                              if (is_array($v7)) {\n                        \
    \                                        foreach ($v7 as $k8 => $v8) {\n     \
    \                                                               if (is_array($v8))\
    \ {\n                                                                        foreach\
    \ ($v8 as $k9 => $v9) {\n                                                    \
    \                        if (is_array($v9)) {\n                              \
    \                                                  foreach ($v9 as $k10 => $v10)\
    \ {\n                                                                        \
    \            if (is_array($v10)) {\n                                         \
    \                                               foreach ($v10 as $k11 => $v11)\
    \ {\n                                                                        \
    \                    if (is_array($v11)) {\n                                 \
    \                                                               foreach ($v11\
    \ as $k12 => $v12) {\n                                                       \
    \                                             if (is_array($v12)) {\n        \
    \                                                                            \
    \                    foreach ($v12 as $k13 => $v13) {\n                      \
    \                                                                            \
    \          if (is_array($v13)) {\n                                           \
    \                                                                     foreach\
    \ ($v13 as $k14 => $v14) {\n                                                 \
    \                                                                   if (is_array($v14))\
    \ {\n                                                                        \
    \                                                foreach ($v14 as $k15 => $v15)\
    \ {\n                                                                        \
    \                                                    if (is_array($v15)) {\n \
    \                                                                            \
    \                                                   foreach ($v15 as $k16 => $v16)\
    \ {\n                                                                        \
    \                                                            if (is_array($v16))\
    \ {\n                                                                        \
    \                                                                foreach ($v16\
    \ as $", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nI like your\
    \ answer but I'm getting this error `Warning: array_filter() expects parameter\
    \ 2 to be a valid callback, function 'filter_by_prefix' not found or invalid function\
    \ name`\n<|/ c |>\n<| c |>\nI added the function to the top of my answer. Make\
    \ sure you copy and paste it exactly.\n<|/ c |>\n<| c |>\nI added the function\
    \ to the top of my answer. Make sure you copy and paste it exactly.\n<|/ c |>\n\
    <| c |>\nI added the function to the top of my answer. Make sure you copy and\
    \ paste it exactly.\n<|/ c |>\n<| c |>\nI added the function to the top of my\
    \ answer. Make sure you copy and paste it exactly.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n$array = [\n    'name' => 'John',\n    'age' => 25,\n    'city' => 'New\
    \ York',\n    'country' => 'USA',\n    'email' => ''\n];\n\n$array2 = [];\nforeach\
    \ ($array as $key => $value) {\n    if (strpos($key, 'name') === 0) {\n      \
    \  $array2['name'] = $value;\n    }\n    if (strpos($key, 'age') === 0) {\n  \
    \      $array2['age'] = $value;\n    }\n    if (strpos($key, 'city') === 0) {\n\
    \        $array2['city'] = $value;\n    }\n    if (strpos($key, 'country') ===\
    \ 0) {\n        $array2['country'] = $value;\n    }\n    if (strpos($key, 'email')\
    \ === 0) {\n        $array2['email'] = $value;\n    }\n}\n\nprint_r($array2);\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = [\n    'name' => 'John',\n    'age' => 25,\n    'city'\
    \ => 'New York',\n    'country' => 'USA',\n    'email' => ''\n];\n\n$array2 =\
    \ [];\nforeach ($array as $key => $value) {\n    if (strpos($key, 'name') ===\
    \ 0) {\n        $array2['name'] = $value;\n    }\n    if (strpos($key, 'age')\
    \ === 0) {\n        $array2['age'] = $value;\n    }\n    if (strpos($", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=3 |>\n<| c\
    \ |>\nThanks, this was very helpful.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = 'abc';\n$prefix = 'a';\n$strings = array('abc', 'bcd', 'cde', 'array');\n\n\
    $result = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n\nvar_dump($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$string = 'abc';\n$prefix = 'a';\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array');\n\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n\nvar_dump($result);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$string = 'abc';\n$prefix\
    \ = 'a';\n$strings = array('abc', 'bcd', 'cde', 'array');\n\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n\nvar_dump($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n\
    <code>\n$string = 'abc';\n$prefix = 'a';\n$strings = array('abc', 'bcd', 'cde',\
    \ 'array');\n\n$result = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n\nvar_dump($result);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$string = 'abc';\n$prefix\
    \ = 'a';\n$strings = array('abc', 'bcd', 'cde', 'array');\n\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n\nvar_dump($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$string = 'abc';\n$prefix = 'a';\n$strings = array('abc', 'bcd',\
    \ 'cde', 'array');\n\n$result = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) === 0;\n});\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $search = \"a\";\n$result = array_filter($array, function($var) use ($search)\
    \ {\n    return strpos($var, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result\
    \ = array_filter($array, function($var) use ($search) {\n    return strpos($var,\
    \ $search) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) === 0;\n});\n\
    print_r", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThis doesn't work if you\
    \ have a string that starts with `a` and ends with `a`\n<|/ c |>\n<| c |>\n: That's\
    \ a good point. I've added a version that doesn't have that problem.\n<|/ c |>\n\
    <| a |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    \n$filtered = array_filter($array, function($string) use ($string) {\n    return\
    \ strpos($string, $string) === 0;\n});\n\nprint_r($filtered);\n</code>\n<|/ a\
    \ tags=php,arrays,string dscore=5 |>\n<| c |>\nThis doesn't work if you have a\
    \ string that starts with `a` and ends with `a`\n<|/ c |>\n<| c |>\n: That's a\
    \ good point. I've added a version that doesn't have that problem.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have a string that starts with `a` and ends\
    \ with `a`\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$string = 'abc';\n\
    $array = array('abc', 'def', 'ghi', 'jkl');\n\n$filtered = array_filter($array,\
    \ function($string) use ($string) {\n    return strpos($string, $string) === 0;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work if you have a string that starts with `a` and ends with `a`\n<|/ c |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n\n$filtered = array_filter($array, function($string)\
    \ use ($string) {\n    return strpos($string, $string) === 0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php,arrays,string |>\n<code>\n$string =\
    \ 'abc';\n$array = array('abc', 'def', 'ghi', 'jkl');\n\n$filtered = array_filter($array,\
    \ function($string) use ($string) {\n    return strpos($string, $string", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. I'm new to PHP and I didn't know about `array_filter()`. However,\
    \ I still don't understand how I can use it to filter out all strings that don't\
    \ start with a given prefix.\n<|/ c |>\n<| c |>\nI added an example to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm still not able\
    \ to get it to work. I've added the code I wrote to my original question. Can\
    \ you please take a look and tell me what I'm doing wrong?\n<|/ c |>\n<| c |>\n\
    I added an example to my answer. Hope it helps.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$strings = array(\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n\
    \    'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n);\n\n$prefix = 'abc';\n\
    \n$filtered = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n\nvar_dump($filtered);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer. I'm new to PHP and I didn't know\
    \ about `array_filter()`. However, I still don't understand how I can use it to\
    \ filter out all strings that don't start with a given prefix.\n<|/ c |>\n<| c\
    \ |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$strings = array(\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n\
    \    'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n);\n\n$prefix = 'abc';\n\
    \n$filtered = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n\nvar_dump($filtered);\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| c |>\nThanks for your answer. I'm new to PHP and I didn't\
    \ know about `array_filter()`. However, I still don't understand how I can use\
    \ it to filter ", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution. Just a small improvement: instead of `array_filter`\
    \ you could use `array_filter($strings, function($string) use ($prefix) { return\
    \ strpos($string, $prefix) === 0; });`\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, but I prefer `array_filter` because it's more readable and easier to\
    \ remember. `array_filter` also has more options and is more flexible.\n<|/ c\
    \ |>\n<| c |>\nI prefer this solution as well, but I prefer `array_filter` because\
    \ it's more readable and easier to remember. `array_filter` also has more options\
    \ and is more flexible.\n<|/ c |>\n<| c |>\nI prefer this solution as well, but\
    \ I prefer `array_filter` because it's more readable and easier to remember. `array_filter`\
    \ also has more options and is more flexible.\n<|/ c |>\n<| c |>\nI prefer this\
    \ solution as well, but I prefer `array_filter` because it's more readable and\
    \ easier to remember. `array_filter` also has more options and is more flexible.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n\
    $prefix = 'a';\n$result = array_filter(\n    $strings,\n    function($string)\
    \ use ($prefix) {\n        return strpos($string, $prefix) === 0;\n    }\n);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis should be the accepted answer\
    \ as it's more readable and easier to remember\n<|/ c |>\n<| c |>\nI prefer this\
    \ solution as well, but I prefer `array_filter` because it's more readable and\
    \ easier to remember. `array_filter` also has more options and is more flexible.\n\
    <|/ c |>\n<| c |>\nI prefer this solution as well, but I prefer `array_filter`\
    \ because it's more readable and easier to remember. `array_filter` also has more\
    \ options and is more flexible.\n<|/ c |>\n<| c |>\nI prefer this solution as\
    \ well, but I prefer `array_filter` because it's more readable and easier to remember.\
    \ `array_", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$string\
    \ = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/', $string);\n\
    print_r($result);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n\
    <code>\n$string = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$string = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$string = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$string = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$string = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$string = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$string = 'abcde';\n$prefix = 'a';\n$result = preg_grep('/^'.$prefix.'/',\
    \ $string);\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$string = 'abcde';\n$prefix = 'a';\n$", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much! I ended up using your first\
    \ solution and it worked perfectly. Thanks again!\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$strings = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\nprint_r($result);\n</code>\n<|/ a tags=arrays,php dscore=1 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $prefix = \"a\";\n$result = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$strings = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    <code>\n<?php\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$result = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$strings = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    <code>\n<?php\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$result = array_filter($", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, it's very clean and easy to\
    \ understand.\n<|/ c |>\n<| c |>\nI like it, but I find it a little bit too complicated\
    \ for my taste. I'd rather use array_filter with a closure. Something like `array_filter($strings,\
    \ function($string) { return strpos($string, $prefix) === 0; });`\n<|/ c |>\n\
    <| c |>\nI like it, but I find it a little bit too complicated for my taste. I'd\
    \ rather use array_filter with a closure. Something like `array_filter($strings,\
    \ function($string) { return strpos($string, $prefix) === 0; });`\n<|/ c |>\n\
    <| c |>\nI like it, but I find it a little bit too complicated for my taste. I'd\
    \ rather use array_filter with a closure. Something like `array_filter($strings,\
    \ function($string) { return strpos($string, $prefix) === 0; });`\n<|/ c |>\n\
    <| c |>\nI like it, but I find it a little bit too complicated for my taste. I'd\
    \ rather use array_filter with a closure. Something like `array_filter($strings,\
    \ function($string) { return strpos($string, $prefix) === 0; });`\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array('a', 'b', 'c', 'd');\n$array2\
    \ = array('a', 'b', 'c', 'd');\n$array3 = array();\n$array4 = array();\n$array5\
    \ = array();\n$array6 = array();\n$array7 = array();\n$array8 = array();\n$array9\
    \ = array();\n$array10 = array();\n$array11 = array();\n$array12 = array();\n\
    $array13 = array();\n$array14 = array();\n$array15 = array();\n$array16 = array();\n\
    $array17 = array();\n$array18 = array();\n$array19 = array();\n$array20 = array();\n\
    $array21 = array();\n$array22 = array();\n$array23 = array();\n$array24 = array();\n\
    $array25 = array();\n$array26 = array();\n$array27 = array();\n$array28 = array();\n\
    $array29 = array();\n$array30 = array();\n$array", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, it's very\
    \ elegant. However I cannot get it to work. I've added the code to the original\
    \ post. Could you please have a look?\n<|/ c |>\n<| c |>\nI added the code to\
    \ the original post. Could you please have a look?\n<|/ c |>\n<| c |>\nI added\
    \ the code to the original post. Could you please have a look?\n<|/ c |>\n<| c\
    \ |>\nI added the code to the original post. Could you please have a look?\n<|/\
    \ c |>\n<| c |>\nI added the code to the original post. Could you please have\
    \ a look?\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\",\
    \ \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, it's very elegant.\
    \ However I cannot get it to work. I've added the code to the original post. Could\
    \ you please have a look?\n<|/ c |>\n<| c |>\nI added the code to the original\
    \ post. Could you please have a look?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\"\
    ;\n$result = array_filter($array, function($item) use ($prefix) {\n    return\
    \ strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nI like your solution, it's very elegant. However I cannot get it to work.\
    \ I've added the code to the original post. Could you please have a look?\n<|/\
    \ c |>\n<| c |>\nI added the code to the original post. ", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\",\
    \ \"vwx\", \"yz\");\n$prefix = \"abc\";\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's easy to understand.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"\
    , \"stu\", \"vwx\", \"yz\");\n$prefix = \"abc\";\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's easy to understand.\n<|/ c\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"def\", \"ghi\"\
    , \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\");\n$prefix = \"abc\";\n\
    $result = array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>", "  $filtered = [];\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n\
    <code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered\
    \ = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays dscore=4 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered\
    \ = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\n\
    $array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=2 |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=2 |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($array, function($value",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. Your solution works great for me. Just\
    \ a little question: Why do you use $strings as an argument in the array_filter\
    \ function? I thought you had to pass an array to the array_filter function.\n\
    <|/ c |>\n<| c |>\nThe `array_filter` function accepts an array as its first argument.\
    \ That's why I used `$strings` instead of `$array`.\n<|/ c |>\n<| c |>\nI see.\
    \ Thanks for your help and explanation!\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array(\n    array('name' => 'John', 'age' => '20'),\n \
    \   array('name' => 'Jane', 'age' => '30'),\n    array('name' => 'Jack', 'age'\
    \ => '40'),\n);\n\n$result = array();\nforeach($array as $key => $value) {\n \
    \   if($value['name'] == 'Jack') {\n        $result[] = $value;\n    }\n}\n\n\
    print_r($result);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your solution works great for me. Just a little question: Why do you use $array\
    \ as an argument in the foreach function? I thought you had to pass an array to\
    \ the foreach function.\n<|/ c |>\n<| c |>\nI used $array as an argument because\
    \ I wanted to show you how you can access the array elements. If you had used\
    \ $array as the argument to array_filter, you would have had to pass an array\
    \ to array_filter. array_filter only accepts an array as its first argument.\n\
    <|/ c |>\n<| a |>\n<code>\n$array = array(\n    array('name' => 'John', 'age'\
    \ => '20'),\n    array('name' => 'Jane', 'age' => '30'),\n    array('name' =>\
    \ 'Jack', 'age' => '40'),\n);\n\n$result = array();\nforeach($array as $key =>\
    \ $value) {\n    if($value['name'] == 'Jack') {\n        $result[] = $value;\n\
    \    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=1 tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. Your solution works great for me. Just\
    \ a little question: Why do you use $array as an argument ", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$arr = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$newArr = array();\nforeach($arr as $key => $value){\n\
    \    if(strpos($value, 'abc') !== false){\n        $newArr[] = $value;\n    }\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$arr = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$newArr = array();\nforeach($arr as $key => $value){\n    if(strpos($value,\
    \ 'abc') !== false){\n        $newArr[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n$arr = array('abc', 'def', 'ghi', 'jkl');\n\
    $newArr = array();\nforeach($arr as $key => $value){\n    if(strpos($value, 'abc')\
    \ !== false){\n        $newArr[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$arr = array('abc', 'def', 'ghi', 'jkl');\n\
    $newArr = array();\nforeach($arr as $key => $value){\n    if(strpos($value, 'abc')\
    \ !== false){\n        $newArr[] = $value;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n$arr = array('abc', 'def', 'ghi', 'jkl');\n$newArr\
    \ = array();\nforeach($arr as $key => $value){\n    if(strpos($value, 'abc') !==\
    \ false){\n        $newArr[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$arr = array('abc', 'def', 'ghi', 'jkl');\n$newArr\
    \ = array();\nforeach($arr as $key => $value){\n    if(strpos($value, 'abc') !==\
    \ false){\n        $newArr[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$strings = array('abc', 'bcd',\
    \ 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings =\
    \ array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to make it work with a variable number of arguments. I mean, what if I want\
    \ to filter by multiple prefixes? Like `filter_by_prefix(array('abc', 'bcd', 'cde',\
    \ 'array'), 'a', 'b', 'c')`\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ variable number of arguments. I hope it helps.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, however I find it a bit too verbose for my taste. I'd rather have\
    \ something like: `filter_by_prefix(array('abc', 'bcd', 'cde', 'array'), 'a',\
    \ 'b', 'c')`\n<|/ c |>\n<| c |>\nI agree with you. That's why I added the second\
    \ version. :)\n<|/ c |>\n<| c |>\nI like your solution, however I find it a bit\
    \ too verbose for my taste. I'd rather have something like: `filter_by_prefix(array('abc',\
    \ 'bcd', 'cde', 'array'), 'a', 'b', 'c')`\n<|/ c |>\n<| a dscore=5 |>\nI like\
    \ using array_filter() for this kind of thing:\n<code>", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to avoid the use of `use`? I mean, it's not a big deal, but\
    \ I wonder if there is a way to avoid it.\n<|/ c |>\n<| c |>\nI guess you could\
    \ use a closure instead, but I haven't tested it: `array_filter($strings, function($string)\
    \ use ($prefix) { return strpos($string, $prefix) === 0; });`\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I guess it's just that PHP doesn't support anonymous\
    \ functions as callbacks yet.\n<|/ c |>\n<| c |>\nI guess you could also use a\
    \ lambda, but I haven't tested it: `array_filter($strings, function($string) {\
    \ return strpos($string, $prefix) === 0; });`\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I guess it's just that PHP doesn't support anonymous functions\
    \ as callbacks yet.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a small library to solve\
    \ this problem:\nhttps://github.com/jonasrothfuss/php-string-filter\n<code>\n\
    <?php\nuse Jonas\\StringFilter\\StringFilter;\n\n$strings = [\n    'abc',\n  \
    \  'bcd',\n    'cde',\n    'array',\n];\n\n$filter = new StringFilter();\n$filtered\
    \ = $filter->filter($strings, '/^a/');\n\nvar_dump($filtered);\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\nI wrote a small library to solve\
    \ this problem:\nhttps://github.com/jonasrothfuss/php-string-filter\n<code>\n\
    <?php\nuse Jonas\\StringFilter\\StringFilter;\n\n$strings = [\n    'abc',\n  \
    \  'bcd',\n    'cde',\n    'array',\n];\n\n$filter = new StringFilter();\n$filtered\
    \ = $filter->filter($strings, '/^a/');\n\nvar_dump($filtered);\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=php,arrays |>\nI wrote a small library to solve this\
    \ problem:\nhttps://github.com/jonasrothfuss/php-string-filter\n<code>\n<?php\n\
    use Jonas\\StringFilter\\StringFilter;\n\n$strings = [\n    'abc',\n", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"\
    bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$result = array_filter($array, function($value) use ($prefix) {\n  \
    \  return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $prefix = \"a\";\n$result = array_filter($array, function($value) use ($prefix)\
    \ {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. Thank\
    \ you very much for your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = [\n\
    \    'a' => [\n        'b' => [\n            'c' => 'value',\n            'd'\
    \ => 'value',\n            'e' => 'value',\n        ],\n        'f' => [\n   \
    \         'g' => 'value',\n            'h' => 'value',\n            'i' => 'value',\n\
    \        ],\n    ],\n    'j' => [\n        'k' => [\n            'l' => 'value',\n\
    \            'm' => 'value',\n            'n' => 'value',\n        ],\n      \
    \  'o' => [\n            'p' => 'value',\n            'q' => 'value',\n      \
    \      'r' => 'value',\n        ],\n    ],\n];\n\n$prefix = 'a';\n\n$result =\
    \ array_filter($array, function($item) use ($prefix) {\n    return array_key_exists($prefix,\
    \ $item);\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n<?php\n$array =\
    \ [\n    'a' => [\n        'b' => [\n            'c' => 'value',\n           \
    \ 'd' => 'value',\n            'e' => 'value',\n        ],\n        'f' => [\n\
    \            'g' => 'value',\n            'h' => 'value',\n            'i' =>\
    \ 'value',\n        ],\n    ],\n    'j' => [\n        'k' => [\n            'l'\
    \ => 'value',\n            'm' => 'value',\n            'n' => 'value',\n    \
    \    ],\n        'o' => [\n            'p' => 'value',\n            'q' => 'value',\n\
    \            'r' => 'value',\n        ],\n    ],\n];\n\n$prefix = 'a';\n\n$result\
    \ = array_filter($array, function($item) use ($prefix) {\n    return array_key_exists($prefix,\
    \ $item);\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n\
    \            'c' => 'value',\n            'd", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant than using array_filter and a callback.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more elegant than using array_filter\
    \ and a callback.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more elegant than using array_filter and a callback.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant than using array_filter and\
    \ a callback.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much more\
    \ elegant than using array_filter and a callback.\n<|/ c |>\n<| a |>\n<code>\n\
    $strings = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php,string dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. Much more elegant than using array_filter and a callback.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ using array_filter and a callback.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more elegant than using array_filter and a callback.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than using array_filter\
    \ and a callback.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more elegant than using array_filter and a callback.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n\
    $filtered = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| c |>\nThis should be the accepted answer. Much more elegant ", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n \
    \           'c' => [\n                'd' => [\n                    'e' => [\n\
    \                        'f' => [\n                            'g' => [\n    \
    \                            'h' => [\n                                    'i'\
    \ => [\n                                        'j' => [\n                   \
    \                         'k' => [\n                                         \
    \       'l' => [\n                                                    'm' => [\n\
    \                                                        'n' => [\n          \
    \                                                  'o' => [\n                \
    \                                                'p' => [\n                  \
    \                                                  'q' => [\n                \
    \                                                        'r' => [\n          \
    \                                                                  's' => [\n\
    \                                                                            \
    \    't' => [\n                                                              \
    \                      'u' => [\n                                            \
    \                                            'v' => [\n                      \
    \                                                                      'w' =>\
    \ [\n                                                                        \
    \                        'x' => [\n                                          \
    \                                                          'y' => [\n        \
    \                                                                            \
    \                    'z' => [\n                                              \
    \                                                              'a' => [\n    \
    \                                                                            \
    \                                'b' => [\n                                  \
    \                                                                            \
    \      'c' => [\n                                                            \
    \                                                            'd' => [\n      \
    \                                                                            \
    \                                          'e' => [\n                        \
    \                                                                            \
    \                                            'f' => [\n                      \
    \                                                                            \
    \                                  'g' => [\n                                \
    \                                                                            \
    \                            'h' => [\n                                      \
    \                                                                            \
    \                          'i' => [\n                                        \
    \                                                                            \
    \                            'j' => [\n                                      \
    \                                                                            \
    \                                  'k' => [\n                                \
    \                                                                            \
    \                                            'l' => [\n                      \
    \                                                                            \
    \                                                          'm' => [\n        \
    \                                                                            \
    \                                                                            'n'\
    \ => [\n                                                                     \
    \                                                                            \
    \                   'o' => [\n                                               \
    \                                                                            \
    \                                             'p' => [\n                     \
    \                                                                            \
    \                                                                           'q'\
    \ => [\n                                                                     \
    \                                                                            \
    \                               'r' => [\n                                   \
    \                                                                            \
    \                                                                     's' => [\n\
    \                                                                            \
    \                                                                            \
    \                                't' => [\n                                  \
    \                                                                            \
    \                                                                            \
    \  'u' => [\n                                                                \
    \                                                                            \
    \                                                                    'v' => [\n\
    \                                                                            \
    \                                                                            \
    \                                            'w' => [\n                      \
    \                                                                            \
    \                                                                            \
    \                          'x' => [\n                                        \
    \                                                                            \
    \                                                                            \
    \            'y' => [\n                                                      \
    \                                                                            \
    \                                                                            \
    \  'z' => [\n                                                                \
    \                                                                            \
    \                                                        'a' => [\n          \
    \                                                                            \
    \                                                                            \
    \                                      'b' => [\n                            \
    \                                                                            \
    \                                                                            \
    \                        'c' => [\n                                          \
    \                                                                            \
    \                                                                            \
    \              'd' => [\n                                                    \
    \                                                                            \
    \                                                                            \
    \        'e' => [\n                                                          \
    \                                                                            \
    \                                                                            \
    \      'f' => [\n                                                            \
    \                                                                            \
    \                                                                            \
    \        'g' => [\n                                                          \
    \                                                                            \
    \                                                                            \
    \              'h' => [\n                                                    \
    \                                                                            \
    \                                                                            \
    \                        'i' => [\n                                          \
    \                                                                            \
    \                                                                            \
    \                                      'j' => [\n                            \
    \                                                                            \
    \                                                                            \
    \                                                        'k' => [\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  'l' => [\n                                                                \
    \                                                                            \
    \                                                                            \
    \                            'm' => [\n                                      \
    \                          ", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    array('name' => 'John', 'age'\
    \ => 25),\n    array('name' => 'Jane', 'age' => 30),\n    array('name' => 'Jack',\
    \ 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name' =>\
    \ 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jill', 'age' => 35),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => '", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    \n$result = array();\nforeach($array as $key => $value){\n    if($value['name']\
    \ == 'Jack'){\n        $result[] = $value;\n    }\n}\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name'\
    \ => 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n\n$result = array();\nforeach($array\
    \ as $key => $value){\n    if($value['name'] == 'Jack'){\n        $result[] =\
    \ $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    \n$result = array();\nforeach($array as $key => $value){\n    if($value['name']\
    \ == 'Jack'){\n        $result[] = $value;\n    }\n}\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => '20');\n$array[] = array('name'\
    \ => 'Jane', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n\
    $", "  return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. I tried your solution and it works fine, but I still have one\
    \ problem. My array is like that:\n`Array\n(\n    [0] => Array\n        (\n  \
    \          [id] => 1\n            [name] => test\n            [description] =>\
    \ test\n            [price] => 10\n        )\n\n    [1] => Array\n        (\n\
    \            [id] => 2\n            [name] => test2\n            [description]\
    \ => test2\n            [price] => 20\n        )\n\n    [2] => Array\n       \
    \ (\n            [id] => 3\n            [name] => test3\n            [description]\
    \ => test3\n            [price] => 30\n        )\n\n    [3] => Array\n       \
    \ (\n            [id] => 4\n            [name] => test4\n            [description]\
    \ => test4\n            [price] => 40\n        )\n\n    [4] => Array\n       \
    \ (\n            [id] => 5\n            [name] => test5\n            [description]\
    \ => test5\n            [price] => 50\n        )\n\n    [5] => Array\n       \
    \ (\n            [id] => 6\n            [name] => test6\n            [description]\
    \ => test6\n            [price] => 60\n        )\n\n    [6] => Array\n       \
    \ (\n            [id] => 7\n            [name] => test7\n            [description]\
    \ => test7\n            [price] => 70\n        )\n\n    [7] => Array\n       \
    \ (\n            [id] => 8\n            [name] => test8\n            [description]\
    \ => test8\n            [price] => 80\n        )\n\n    [8] => Array\n       \
    \ (\n            [id] => 9\n            [name] => test9\n            [description]\
    \ => test9\n            [price] => 90\n        )\n\n    [9] => Array\n       \
    \ (\n            [id] => 10\n            [name] => test10\n            [description]\
    \ => test10\n            [price] => 100\n        )\n\n    [10] => Array\n    \
    \    (\n            [id] => 11\n            [name] => test11\n            [description]\
    \ => test11\n            [price] => 110\n        )\n\n    [11] => Array\n    \
    \    (\n            [id] => 12\n            [name] => test12\n            [description]\
    \ => test12\n            [price] => 120\n        )\n\n    [12] => Array\n    \
    \    (\n            [id] => 13\n            [name] => test13\n            [description]\
    \ => test13\n            [price] => 130\n        )\n\n    [13] => Array\n    \
    \    (\n            [id] => 14\n            [name] => test14\n            [description]\
    \ => test14\n            [price] => 140\n        )\n\n    [14] => Array\n    \
    \    (\n            [id] => ", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"\
    ,\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\"\
    ,\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\"\
    ,\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"0\",\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"+\",\"-\",\"_\",\"@\",\"#\"\
    ,\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"|\",\"\\\\\
    \",\"/\",\"<\",\">\",\"?\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"\
    (\",\")\",\"[\",\"]\",\"{\",\"}\",\"|\",\"\\\\\",\"/\",\"<\",\">\",\"?\",\"!\"\
    ,\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\"\
    ,\"|\",\"\\\\\",\"/\",\"<\",\">\",\"?\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"\
    &\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"|\",\"\\\\\",\"/\",\"<\",\">\"\
    ,\"?\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\"\
    ,\"{\",\"}\",\"|\",\"\\\\\",\"/\",\"<\",\">\",\"?\",\"!\",\"@\",\"#\",\"$\",\"\
    %\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"|\",\"\\\\\",\"/\"\
    ,\"<\",\">\",\"?\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\"\
    ,\"[\",\"]\",\"{\",\"}\",\"|\",\"\\\\\",\"/\",\"<\",\">\",\"?\",\"!\",\"@\",\"\
    #\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"|\",\"\
    \\\\\",\"/\",\"<\",\">\",\"?\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I am not familiar\
    \ with PHP so I didn't know about `array_filter()`. However, I did try your solution\
    \ and it didn't work. I am still getting all values returned even though I only\
    \ want values that start with the prefix I provided. Any ideas?\n<|/ c |>\n<|\
    \ c |>\nI updated my answer to include a working example. Let me know if that\
    \ works for you.\n<|/ c |>\n<| c |>\nThanks for your help. I appreciate it. I\
    \ tried your updated solution and it still didn't work. I think it may be a problem\
    \ with my PHP installation. I am running PHP 7.2.24 on a Windows 10 machine. I\
    \ am going to try it on a Linux machine and see if it works.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a working example for PHP 7.2.24 on a Windows 10\
    \ machine.\n<|/ c |>\n<| c |>\nThanks for your help. I appreciate it. I tried\
    \ your updated solution and it still didn't work. I think it may be a problem\
    \ with my PHP installation. I am running PHP 7.2.24 on a Windows 10 machine. I\
    \ am going to try it on a Linux machine and see if it works.\n<|/ c |>\n<| a tags=php,arrays,array-filter\
    \ |>\n<code>\n$array = [\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n   \
    \ 'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n];\n\n$prefix = 'abc';\n\
    \n$filtered = array_filter($array, function($value) use ($prefix) {\n    return\
    \ strpos($value, $prefix) === 0;\n});\n\nvar_dump($filtered);\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThanks for your answer. I am not familiar with PHP so\
    \ I didn't know about `array_filter()`. However, I did try your solution and it\
    \ didn't work. I am still getting all values returned even though I only want\
    \ values that start with the prefix I provided. Any ideas?\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a working example. Let me know if that works for\
    \ you.\n<|/ c |>\n", "  $filtered = [];\n  foreach ($strings as $string) {\n \
    \   if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = [\n    'abc',\n    'bcd',\n    'cde',\n    'array',\n];\n\
    \n$prefix = 'a';\n\n$filtered = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = [\n    'abc',\n\
    \    'bcd',\n    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\n$filtered = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = [\n    'abc',\n    'bcd',\n    'cde',\n    'array',\n];\n\n$prefix\
    \ = 'a';\n\n$filtered = array_filter($array, function($item) use ($prefix) {\n\
    \    return strpos($item, $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = [\n    'abc',\n \
    \   'bcd',\n    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\n$filtered = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$array\
    \ = [\n    'abc',\n    'bcd',\n    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\
    \n$filtered = array_filter($array, function($item) use ($prefix) {\n    return\
    \ strpos($item, $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n<|/ a dscore=0\
    \ tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'abc',\n    'bcd',\n\
    \    'cde',\n    'array',\n];\n\n$prefix = 'a';\n\n$", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks so much! This was exactly what I was looking for. Works perfectly!\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have a string like `'abc'` as your prefix.\
    \ `strpos` will return `0` which evaluates to `false`\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code by adding `=== 0` after `strpos`.\n\
    <|/ c |>\n<| a dscore=5 tags=php,arrays,string |>\n<code>\n$array = array(\"a\"\
    , \"b\", \"c\", \"d\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/\
    \ a |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's easy to understand.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's easy\
    \ to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's easy to understand.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\");\n$search = \"a\";\n\
    $result = array_filter($array, function($value) use ($search) {\n    return strpos($value,\
    \ $search) === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's easy to understand.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ easy to understand.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array\
    \ = array(\"a\", \"", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis does not answer the question. OP wants to filter out all strings\
    \ that do not start with a given prefix.\n<|/ c |>\n<| c |>\nThe question was\
    \ \"how to filter out all strings that do not start with a given prefix\". This\
    \ answer does exactly that. OP can easily adapt it to their needs.\n<|/ c |>\n\
    <| c |>\nThe question was \"how to filter out all strings that do not start with\
    \ a given prefix\". This answer does exactly that. OP can easily adapt it to their\
    \ needs.\n<|/ c |>\n<| c |>\nThe question was \"how to filter out all strings\
    \ that do not start with a given prefix\". This answer does exactly that. OP can\
    \ easily adapt it to their needs.\n<|/ c |>\n<| c |>\nThe question was \"how to\
    \ filter out all strings that do not start with a given prefix\". This answer\
    \ does exactly that. OP can easily adapt it to their needs.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result\
    \ = array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis does\
    \ not answer the question. OP wants to filter out all strings that do not start\
    \ with a given prefix.\n<|/ c |>\n<| c |>\nThe question was \"how to filter out\
    \ all strings that do not start with a given prefix\". This answer does exactly\
    \ that. OP can easily adapt it to their needs.\n<|/ c |>\n<| a |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$prefix = 'a';\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work as expected. `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')`\
    \ returns `['abc']` instead of `['abc', 'bcd', 'cde']`.\n<|/ c |>\n<| c |>\nAh,\
    \ I see what you're saying. I've updated my answer with a new function that should\
    \ do what you want.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work as expected. `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')`\
    \ returns `['abc']` instead of `['abc', 'bcd', 'cde']`.\n<|/ c |>\n<| c |>\nAh,\
    \ I see what you're saying. I've updated my answer with a new function that should\
    \ do what you want.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work as expected. `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')`\
    \ returns `['abc']` instead of `['abc', 'bcd', 'cde']`.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = array('abc', 'bcd', 'cde');\n$prefix = 'a';\n$result = array_filter($arr,\
    \ function($v) use ($prefix) {\n    return strpos($v, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work as expected. `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')` returns `['abc']`\
    \ instead of `['abc', 'bcd', 'cde']`.\n<|/ c |>\n<| c |>\nAh, I see what you're\
    \ saying. I've updated my answer with a new function that should do what you want.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$arr = array('abc', 'bcd', 'cde');\n\
    $prefix = 'a';\n$result = array_filter($arr, function($v) use ($prefix) {\n  \
    \  return strpos($v, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. Unfortunately this doesn't work as expected. `filter_by_prefix(['abc',\
    \ 'bcd', 'c", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant and readable than\
    \ other solutions.\n<|/ c |>\n<| c |>\nI like this solution because it doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more elegant and readable than other solutions.\n<|/ c |>\n<| c\
    \ |>\nThis should be the accepted answer. Much more elegant and readable than\
    \ other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more elegant and readable than other solutions.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$array = array_filter($array,\
    \ function($var) {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Much more elegant and readable\
    \ than other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and readable than other solutions.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant and readable\
    \ than other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| a |>\n<code>\n\
    $array = array('abc', 'def', 'ghi', 'jkl');\n$array = array_filter($array, function($var)\
    \ {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ dscore=5 |>\n<| c |>\nThis should be the accepted answer. Much more elegant\
    \ and readable than other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more elegant and readable than other solutions.\n<|/ c |>\n<| a\
    \ tag", "  return array_filter($strings, function($string) use ($prefix) {\n \
    \   return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your answer but I think it would be better to use a `foreach`\
    \ instead of a `for` loop. `for` loops are slower than `foreach` loops.\n<|/ c\
    \ |>\n<| c |>\nI agree that `for` loops are slower, but in this case `foreach`\
    \ loops are more readable and easier to understand.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, `for` loops are easier to understand and easier to read, but in this\
    \ case `foreach` loops are more readable and easier to understand.\n<|/ c |>\n\
    <| c |>\nI agree with you, `for` loops are easier to understand and easier to\
    \ read, but in this case `foreach` loops are more readable and easier to understand.\n\
    <|/ c |>\n<| c |>\nI agree with you, `for` loops are easier to understand and\
    \ easier to read, but in this case `foreach` loops are more readable and easier\
    \ to understand.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $prefix = \"a\";\n$result = array();\nforeach($array as $key => $value){\n   \
    \ if(strpos($value, $prefix) === 0){\n        $result[] = $value;\n    }\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer but I think it would be\
    \ better to use a `foreach` instead of a `for` loop. `for` loops are slower than\
    \ `foreach` loops.\n<|/ c |>\n<| c |>\nI agree with you, `for` loops are easier\
    \ to understand and easier to read, but in this case `foreach` loops are more\
    \ readable and easier to understand.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n", "  $filtered = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant than the accepted answer.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than the accepted\
    \ answer.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant\
    \ than the accepted answer.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant than the accepted answer.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant than the accepted answer.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$string = 'Hello World';\n$search = 'World';\n$pos =\
    \ strpos($string, $search);\nif ($pos !== false) {\n    echo 'Found at ' . $pos;\n\
    } else {\n    echo 'Not found';\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\n\
    This should be the accepted answer. Much more elegant than the accepted answer.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ the accepted answer.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant than the accepted answer.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant than the accepted answer.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than the accepted\
    \ answer.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'Hello World';\n\
    $search = 'World';\n$pos = strpos($string, $search);\nif ($pos !== false) {\n\
    \    echo 'Found at ' . $pos;\n} else {\n    echo 'Not found';\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Much more elegant\
    \ than the accepted answer.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string\
    \ = 'Hello World';\n$search = 'World';\n$pos = strpo", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\n\
    This doesn't work if you have a string that starts with \"abc\" but also starts\
    \ with \"ab\"\n<|/ c |>\n<| c |>\n: That's a good point. I've added a version\
    \ that doesn't have that problem.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'abc', 'age' => '20');\n\
    $array[] = array('name' => 'def', 'age' => '30');\n$array[] = array('name' =>\
    \ 'ghi', 'age' => '40');\n$array[] = array('name' => 'jkl', 'age' => '50');\n\
    $array[] = array('name' => 'mno', 'age' => '60');\n$array[] = array('name' =>\
    \ 'pqr', 'age' => '70');\n$array[] = array('name' => 'stu', 'age' => '80');\n\
    $array[] = array('name' => 'vwx', 'age' => '90');\n$array[] = array('name' =>\
    \ 'yz', 'age' => '100');\n\n$newArray = array();\nforeach($array as $key => $value){\n\
    \    if($value['name'] == 'abc'){\n        $newArray[] = $value;\n    }\n}\n\n\
    print_r($newArray);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if\
    \ you have a string that starts with \"abc\" but also starts with \"ab\"\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'abc', 'age' => '20');\n$array[] = array('name' => 'def', 'age' => '30');\n\
    $array[] = array('name' => 'ghi', 'age' => '40');\n$array[] = array('name' =>\
    \ 'jkl', 'age' => '50');\n$array[] = array('name' => 'mno', 'age' => '60');\n\
    $array[] = array('name' => 'pqr', 'age' => '70');\n$array[] = array('name' =>\
    \ 'stu', 'age' => '80');\n$array[] = array('name' => 'vwx', 'age' => '90');\n\
    $array[] = array('name' => 'yz', 'age' => '100');\n\n$newArray = array();\nforeach($",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis\
    \ doesn't work if you have multiple arrays with different prefixes. For example,\
    \ if you have arrays with prefixes `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`,\
    \ `j`, `k`, `l`, `m`, `n`, `o`, `p`, `q`, `r`, `s`, `t`, `u`, `v`, `w`, `x`, `y`,\
    \ `z`, then `filter_by_prefix($arrays, 'a')` will return `['b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z']`, but `filter_by_prefix($arrays, 'b')` will return\
    \ `['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\
    \ 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ I see what you mean. I've added a version that works with multiple prefixes.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$arrays = array(\n    array('a', 'b', 'c'),\n\
    \    array('d', 'e', 'f'),\n    array('g', 'h', 'i'),\n    array('j', 'k', 'l'),\n\
    \    array('m', 'n', 'o'),\n    array('p', 'q', 'r'),\n    array('s', 't', 'u'),\n\
    \    array('v', 'w', 'x'),\n    array('y', 'z')\n);\n\n$prefix = 'a';\n\n$result\
    \ = array();\nforeach($arrays as $array) {\n    foreach($array as $value) {\n\
    \        if(strpos($value, $prefix) === 0) {\n            $result[] = $value;\n\
    \        }\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a dscore=2 |>\n<code>\n$arrays = array(\n    array('a', 'b', 'c'),\n    array('d',\
    \ 'e', 'f'),\n    array('g', 'h', 'i'),\n    array('j', 'k', 'l'),\n    array('m',\
    \ 'n', 'o'),\n    array('p', 'q', 'r'),\n    array('s', 't', 'u'),\n    array('v',\
    \ 'w', 'x'),\n    array('y', 'z')\n);\n\n$prefix = 'a';\n\n$result = array();\n\
    foreach($arrays as $array) {\n    foreach($array as ", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if you\
    \ have a string that starts with the prefix but doesn't end with the prefix. For\
    \ example, `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')` returns `['abc']` instead\
    \ of `['abc', 'bcd']`.\n<|/ c |>\n<| c |>\n: That's a good point. I've updated\
    \ the answer to include a fix for that case.\n<|/ c |>\n<| a dscore=3 |>\n<code>",
  "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,php |>\n\
    <code>\n$strings = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $strings = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,php |>\n\
    <code>\n$strings = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered\
    \ = array_filter($strings, function($", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_filter($array, function($var){\n\
    \    return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis should be the accepted answer. Works perfectly and doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and doesn't require any additional libraries.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly and doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and doesn't require any additional libraries.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Works perfectly and doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $array = array_filter($array, function($var){\n    return strpos($var, \"a\")\
    \ === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and doesn't require any additional libraries.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and doesn't require any additional libraries.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<|", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi');\n$prefix = 'abc';\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to use any external libraries.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to use any external libraries.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to use any external libraries.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. No need to use any external\
    \ libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ use any external libraries.\n<|/ c |>\n<| a |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi');\n$prefix = 'abc';\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=5 tags=php,arrays |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to use any external libraries.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to use any external libraries.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to use any external libraries.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$array = array('abc', 'def', 'ghi');\n$prefix\
    \ = 'abc';\n$result = array_filter($array, function($value) use ($prefix) {\n\
    \    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis should be the accepted answer. No need to use any external\
    \ libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ use any external libraries.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi');\n$prefix", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"\
    ,\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($var) use ($search) {\n  \
    \  return strpos($var, $search) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=1 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"\
    ,\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\"\
    ,\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) === 0;\n});\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $search = \"a\";\n$result = array_filter($array, function($var) use ($search)\
    \ {\n    return strpos($var, $search) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"\
    t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) === 0;\n});\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for this. I really\
    \ appreciate it!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = 'abc def ghi jkl\
    \ mno pqr';\n$prefix = 'abc';\n$result = preg_grep('/^'.$prefix.'/', explode('\
    \ ', $string));\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string dscore=2\
    \ |>\n<| c |>\nThanks so much for this. I really appreciate it!\n<|/ c |>\n<|\
    \ a tags=php,arrays,string |>\n<code>\n$string = 'abc def ghi jkl mno pqr';\n\
    $prefix = 'abc';\n$result = preg_grep('/^'.$prefix.'/', explode(' ', $string));\n\
    print_r($result);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for this.\
    \ I really appreciate it!\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $string = 'abc def ghi jkl mno pqr';\n$prefix = 'abc';\n$result = preg_grep('/^'.$prefix.'/',\
    \ explode(' ', $string));\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=php,arrays,string |>\n<code>\n$string = 'abc def ghi jkl mno pqr';\n$prefix\
    \ = 'abc';\n$result = preg_grep('/^'.$prefix.'/', explode(' ', $string));\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$string =\
    \ 'abc def ghi jkl mno pqr';\n$prefix = 'abc';\n$result = preg_grep('/^'.$prefix.'/',\
    \ explode(' ', $string));\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=php,arrays,string |>\n<code>\n$string = 'abc def ghi jkl mno pqr';\n$prefix\
    \ = 'abc';\n$result = preg_grep('/^'.$prefix.'/', explode(' ', $string", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'hello';\n$string2\
    \ = 'hello';\n$string3 = 'hello';\n$string4 = 'hello';\n$string5 = 'hello';\n\
    $string6 = 'hello';\n$string7 = 'hello';\n$string8 = 'hello';\n$string9 = 'hello';\n\
    $string10 = 'hello';\n$string11 = 'hello';\n$string12 = 'hello';\n$string13 =\
    \ 'hello';\n$string14 = 'hello';\n$string15 = 'hello';\n$string16 = 'hello';\n\
    $string17 = 'hello';\n$string18 = 'hello';\n$string19 = 'hello';\n$string20 =\
    \ 'hello';\n$string21 = 'hello';\n$string22 = 'hello';\n$string23 = 'hello';\n\
    $string24 = 'hello';\n$string25 = 'hello';\n$string26 = 'hello';\n$string27 =\
    \ 'hello';\n$string28 = 'hello';\n$string29 = 'hello';\n$string30 = 'hello';\n\
    $string31 = 'hello';\n$string32 = 'hello';\n$string33 = 'hello';\n$string34 =\
    \ 'hello';\n$string35 = 'hello';\n$string36 = 'hello';\n$string37 = 'hello';\n\
    $string38 = 'hello';\n$string39 = 'hello';\n$string40 = 'hello';\n$string41 =\
    \ 'hello';\n$string42 = 'hello';\n$string43 = 'hello';\n$string44 = 'hello';\n\
    $string45 = 'hello';\n$string46 = 'hello';\n$string47 = 'hello';\n$string48 =\
    \ 'hello';\n$string49 = 'hello';\n$string50 = 'hello';\n$string51 = 'hello';\n\
    $string52 = 'hello';\n$string53 = 'hello';\n$string54 = 'hello';\n$string55 =\
    \ 'hello';\n$string56 = 'hello';\n$string57 = 'hello';\n$string58 = 'hello';\n\
    $string59 = 'hello';\n$string60 = 'hello';\n$string61 = 'hello';\n$string62 =\
    \ 'hello';\n$string63 = 'hello';\n$string64 = 'hello';\n$string65", "  $filtered\
    \ = [];\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix) ===\
    \ 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThanks for your answer. I'm going to try this and see if it works.\n\
    <|/ c |>\n<| c |>\nI added a more complete example to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm going to try this and see if it\
    \ works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\",\"b\",\"c\"\
    ,\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"\
    ,\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\"\
    ,\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\"\
    ,\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"0\",\"1\",\"2\"\
    ,\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"+\",\"-\",\"*\",\"/\",\"(\",\")\"\
    ,\"[\",\"]\",\"{\",\"}\",\"^\",\"~\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\"\
    ,\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"^\",\"~\",\"!\",\"@\",\"#\",\"$\"\
    ,\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"^\",\"~\",\"!\"\
    ,\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\"\
    ,\"^\",\"~\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\"\
    ,\"]\",\"{\",\"}\",\"^\",\"~\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\"\
    ,\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"^\",\"~\",\"!\",\"@\",\"#\",\"$\",\"%\"\
    ,\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"^\",\"~\",\"!\",\"@\"\
    ,\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"^\"\
    ,\"~\",\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 tags=php,arrays,multidimensional-array |>\n\
    <| c |>\nThis should be the accepted answer as it is more efficient and more elegant\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer as it is more efficient\
    \ and more elegant\n<|/ c |>\n<| c |>\nThis should be the accepted answer as it\
    \ is more efficient and more elegant\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer as it is more efficient and more elegant\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer as it is more efficient and more elegant\n<|/ c |>\n\
    <| a tags=php,arrays,multidimensional-array |>\n<code>\n$array1 = array(\"a\"\
    \ => array(\"b\" => \"c\"), \"d\" => \"e\");\n$array2 = array(\"a\" => array(\"\
    b\" => \"c\"), \"d\" => \"e\");\n\n$array3 = array_merge($array1, $array2);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer as it\
    \ is more efficient and more elegant\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer as it is more efficient and more elegant\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer as it is more efficient and more elegant\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer as it is more efficient and more elegant\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer as it is more efficient\
    \ and more elegant\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array1 = array(\"a\"\
    \ => array(\"b\" => \"c\"), \"d\" => \"e\");\n$array2 = array(\"a\" => array(\"\
    b\" => \"c\"), \"d\" => \"e\");\n\n$array3 = array_merge($array1, $array2);\n\
    </code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThis should\
    \ be the accepted answer as it is more efficient and more elegant\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$array1 = array(\"a\" => ", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work as expected. `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')`\
    \ returns `['abc']` instead of `['abc', 'bcd', 'cde']`\n<|/ c |>\n<| c |>\nAh,\
    \ I see what you mean. I've updated my answer to include a fix for that.\n<|/\
    \ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$strings = ['abc', 'bcd', 'cde'];\n\
    $prefix = 'a';\n$result = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work as expected. `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')` returns `['abc']`\
    \ instead of `['abc', 'bcd', 'cde']`\n<|/ c |>\n<| c |>\nYes, I missed that part.\
    \ I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings\
    \ = ['abc', 'bcd', 'cde'];\n$prefix = 'a';\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work as expected. `filter_by_prefix(['abc', 'bcd', 'cde'], 'a')`\
    \ returns `['abc']` instead of `['abc', 'bcd', 'cde']`\n<|/ c |>\n<| c |>\nThis\
    \ answer was posted before the other answers were posted, and was posted before\
    \ I saw the other answers. I posted this answer because I thought it would be\
    \ more helpful to others who come across this question. I've updated my answer\
    \ to include a fix for that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings\
    \ = ['abc', 'bcd', 'cde'];\n$prefix = 'a';\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\nprint_r",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional libraries. However, I do think it would be better to\
    \ use a `foreach` loop instead of `array_filter`, because `array_filter` will\
    \ create a new array and copy the filtered values into it, which is not necessary\
    \ in this case.\n<|/ c |>\n<| c |>\nI agree with you, `array_filter` should be\
    \ used only when you want to create a new array and copy the filtered values into\
    \ it. In this case `foreach` should be used instead.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, `array_filter` should be used only when you want to create a new array\
    \ and copy the filtered values into it. In this case `foreach` should be used\
    \ instead.\n<|/ c |>\n<| c |>\nI like this solution, because it doesn't require\
    \ any additional libraries. However, I do think it would be better to use a `foreach`\
    \ loop instead of `array_filter`, because `array_filter` will create a new array\
    \ and copy the filtered values into it, which is not necessary in this case.\n\
    <|/ c |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, I do think it would be better to use a `foreach` loop instead\
    \ of `array_filter`, because `array_filter` will create a new array and copy the\
    \ filtered values into it, which is not necessary in this case.\n<|/ c |>\n<|\
    \ a tags=php,arrays,filter |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\");\n$filtered = array_filter($array, function($value)\
    \ {\n    return strpos($value, \"a\") !== false;\n});\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me.\n\
    <|/ c |>\n<| a dscore=5 |>", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI like your solution but i think it can be\
    \ done with less code with array_filter and strpos. I added my solution as an\
    \ answer\n<|/ c |>\n<| a dscore=1 |>\nI like your solution but i think it can\
    \ be done with less code with array_filter and strpos. I added my solution as\
    \ an answer\n<code>", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using an anonymous function?\n<|/ c |>\n<| c |>\nI added a version without anonymous\
    \ function\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc', 'bcd',\
    \ 'cde', 'array');\n$prefix = 'a';\n\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings =\
    \ array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings\
    \ = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n\
    \            'e' => 'f'\n        ],\n        'g' => [\n            'h' => 'i',\n\
    \            'j' => 'k'\n        ]\n    ],\n    'l' => [\n        'm' => 'n',\n\
    \        'o' => 'p'\n    ]\n];\n\n$result = [];\nforeach ($array as $key => $value)\
    \ {\n    foreach ($value as $key2 => $value2) {\n        if (is_array($value2))\
    \ {\n            foreach ($value2 as $key3 => $value3) {\n                if (is_array($value3))\
    \ {\n                    foreach ($value3 as $key4 => $value4) {\n           \
    \             if ($key4 === 'c') {\n                            $result[$key][$key2][$key3]\
    \ = $value4;\n                        }\n                    }\n             \
    \   }\n            }\n        }\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n \
    \           'c' => 'd',\n            'e' => 'f'\n        ],\n        'g' => [\n\
    \            'h' => 'i',\n            'j' => 'k'\n        ]\n    ],\n    'l' =>\
    \ [\n        'm' => 'n',\n        'o' => 'p'\n    ]\n];\n\n$result = [];\nforeach\
    \ ($array as $key => $value) {\n    foreach ($value as $key2 => $value2) {\n \
    \       if (is_array($value2)) {\n            foreach ($value2 as $key3 => $value3)\
    \ {\n                if (is_array($value3)) {\n                    foreach ($value3\
    \ as $key4 => $value4) {\n                        if ($key4 === 'c') {\n     \
    \                       $result[$key][$key2][$key3] = $value4;\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ dscore=0 |>\n<| a |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n \
    \           'c' => 'd',\n            'e' => 'f'\n        ],\n        'g' => [\n\
    \            'h' => 'i',\n            'j' => 'k'\n        ]\n    ],\n    'l' =>\
    \ [", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n \
    \           'c' => 'd',\n            'e' => 'f'\n        ],\n        'f' => [\n\
    \            'g' => 'h',\n            'i' => 'j'\n        ]\n    ],\n    'k' =>\
    \ [\n        'l' => [\n            'm' => 'n',\n            'o' => 'p'\n     \
    \   ],\n        'q' => [\n            'r' => 's',\n            't' => 'u'\n  \
    \      ]\n    ]\n];\n\n$prefix = 'a';\n\n$result = array_reduce($array, function($carry,\
    \ $item) {\n    return array_merge($carry, array_filter(array_keys($item), function($key)\
    \ use ($prefix) {\n        return strpos($key, $prefix) === 0;\n    }));\n}, []);\n\
    \nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n\
    <| a dscore=0 |>\n<code>\n$array = [\n    'a' => [\n        'b' => [\n       \
    \     'c' => 'd',\n            'e' => 'f'\n        ],\n        'f' => [\n    \
    \        'g' => 'h',\n            'i' => 'j'\n        ]\n    ],\n    'k' => [\n\
    \        'l' => [\n            'm' => 'n',\n            'o' => 'p'\n        ],\n\
    \        'q' => [\n            'r' => 's',\n            't' => 'u'\n        ]\n\
    \    ]\n];\n\n$prefix = 'a';\n\n$result = array_reduce($array, function($carry,\
    \ $item) {\n    return array_merge($carry, array_filter(array_keys($item), function($key)\
    \ use ($prefix) {\n        return strpos($key, $prefix) === 0;\n    }));\n}, []);\n\
    \nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n\
    $array = [\n    'a' => [\n        'b' => [\n            'c' => 'd',\n        \
    \    'e' => 'f'\n        ],\n        'f' => [\n            'g' => 'h',\n     \
    \       'i' => 'j'\n        ]\n    ],\n    'k' => [\n        'l' => [\n      \
    \      'm' => 'n',\n            'o' => 'p'", "  $filtered = [];\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nI like your solution,\
    \ however it only works with strings. What about arrays?\n<|/ c |>\n<| c |>\n\
    : It works fine with arrays. I've added a version that works with arrays too.\n\
    <|/ c |>\n<| c |>\n: I've added a version that works with arrays too.\n<|/ c |>\n\
    <| c |>\n: I've added a version that works with arrays too.\n<|/ c |>\n<| c |>\n\
    : I've added a version that works with arrays too.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def', 'ghi');\n\n$result\
    \ = array_filter($array, function($v) use ($string) {\n    return strpos($v, $string)\
    \ === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def', 'ghi');\n\n$result\
    \ = array_filter($array, function($v) use ($string) {\n    return strpos($v, $string)\
    \ === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def', 'ghi');\n\n$result\
    \ = array_filter($array, function($v) use ($string) {\n    return strpos($v, $string)\
    \ === 0;\n});\n\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'def', 'ghi');\n\n$result = array_filter($array, function($v) use ($string)\
    \ {\n    return strpos($v, $string) === 0;\n});\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'def', 'ghi');\n\n$result = array_filter($array, function($v) use ($string)\
    \ {\n    return strpos($v, $string) === 0;\n});\n\nprint_r($", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  $filtered = [];\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => '25');\n$array[] = array('name'\
    \ => 'Jane', 'age' => '28');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n\
    $array[] = array('name' => 'Jill", "  $filtered = [];\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for me. Just one question, why did you use\
    \ $strings as $string? I thought $strings was already an array. Thanks again!\n\
    <|/ c |>\n<| c |>\nYou're welcome! `$strings` was an array, but `$string` was\
    \ a string. Since `$string` was a string, `$strings` was also a string. Since\
    \ `$strings` was an array, `$string` was also an array. Since `$string` was an\
    \ array, `$strings` was also an array.\n<|/ c |>\n<| c |>\nThanks for the explanation.\
    \ Your explanation was very helpful.\n<|/ c |>\n<| a tags=arrays,php,filter |>\n\
    <code>\n<?php\n$strings = array('abc', 'bcd', 'cde', 'array');\n$prefix = 'a';\n\
    $filtered = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\nprint_r($filtered);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n<?php\n$strings = array('abc', 'bcd', 'cde', 'array');\n\
    $prefix = 'a';\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\nprint_r($filtered);\n</code>\n\
    <|/ a tags=arrays,php,filter |>\n<| a dscore=2 |>\n<code>\n<?php\n$strings = array('abc',\
    \ 'bcd', 'cde', 'array');\n$prefix = 'a';\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\nprint_r($filtered);\n</code>\n<|/ a tags=arrays,php,filter |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$strings = array('abc', 'bcd', 'cde', 'array');\n$prefix\
    \ = 'a';\n$filtered = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\nprint_r($filtered);\n</code>\n\
    <|/ a tags=arrays,php,filter |>\n<| a dscore=", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThanks so\
    \ much! This works perfectly! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n\
    <code>\n$newArray = array();\nforeach ($array as $key => $value) {\n    if (strpos($value,\
    \ 'a') === 0) {\n        $newArray[$key] = $value;\n    }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$new_array = array();\nforeach ($array as $key => $value)\
    \ {\n    if (strpos($value, 'a') === 0) {\n        $new_array[$key] = $value;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$new_array = array();\nforeach ($array as $key => $value)\
    \ {\n    if (strpos($value, 'a') === 0) {\n        $new_array[$key] = $value;\n\
    \    }\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a |>\n\
    <code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$new_array = array();\nforeach\
    \ ($array as $key => $value) {\n    if (strpos($value, 'a') === 0) {\n       \
    \ $new_array[$key] = $value;\n    }\n}\n</code>\n<|/ a dscore=1 tags=php,arrays,multidimensional-array\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$new_array = array();\nforeach ($array as $key => $value)\
    \ {\n    if (strpos($value, 'a') === 0) {\n        $new_array[$key] = $value;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl", "  return array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThis doesn't work if\
    \ you have a string that starts with \"a\" and ends with \"a\" like \"aaa\". Your\
    \ code will remove \"aaa\" but leave \"a\" in the array.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. `array_filter` removes elements from the array that don't match\
    \ the given callback. `strpos` returns `false` if the string is not found, so\
    \ `array_filter` will remove all elements that don't start with the prefix. `strpos`\
    \ returns `true` if the string starts with the prefix, so `array_filter` will\
    \ remove all elements that don't end with the prefix.\n<|/ c |>\n<| c |>\nAh I\
    \ see now. Thanks for clarifying.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. I've tried your solution and it works perfectly.\
    \ I've also added a small improvement to my original question. Do you think you\
    \ can help me with that as well?\n<|/ c |>\n<| c |>\nI added a small improvement\
    \ to my original question. Do you think you can help me with that as well?\n<|/\
    \ c |>\n<| c |>\nI added a small improvement to my original question. Do you think\
    \ you can help me with that as well?\n<|/ c |>\n<| c |>\nI added a small improvement\
    \ to my original question. Do you think you can help me with that as well?\n<|/\
    \ c |>\n<| c |>\nI added a small improvement to my original question. Do you think\
    \ you can help me with that as well?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$string\
    \ = 'abcde';\n$prefix = 'a';\n$strings = explode($prefix);\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThanks for your answer.\
    \ I've tried your solution and it works perfectly. I've also added a small improvement\
    \ to my original question. Do you think you can help me with that as well?\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n$string = 'abcde';\n$prefix = 'a';\n$strings\
    \ = explode($prefix);\n$result = array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=php,arrays,string |>\n<| c |>\nThanks for your answer. I've tried your\
    \ solution and it works perfectly. I've also added a small improvement to my original\
    \ question. Do you think you can help me with that as well?\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = 'abcde';\n$prefix = 'a';\n$strings = explode($prefix);\n\
    $result = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n</code>\n<|/", "  $filtered = [];\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, but I prefer to use `array_filter` instead of `array_map`\
    \ because it's more readable and easier to understand.\n<|/ c |>\n<| c |>\nI agree,\
    \ `array_filter` would be more readable. I've updated my answer to include `array_filter`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$strings = [\n    'abc',\n    'def',\n   \
    \ 'ghi',\n    'jkl',\n    'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n\
    ];\n\n$prefix = 'abc';\n\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n\nprint_r($filtered);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$strings = [\n  \
    \  'abc',\n    'def',\n    'ghi',\n    'jkl',\n    'mno',\n    'pqr',\n    'stu',\n\
    \    'vwx',\n    'yz'\n];\n\n$prefix = 'abc';\n\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n\
    <code>\n$strings = [\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n    'mno',\n\
    \    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n];\n\n$prefix = 'abc';\n\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n\nprint_r($filtered);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$strings = [\n    'abc',\n    'def',\n    'ghi',\n\
    \    'jkl',\n    'mno',\n    'pqr',\n    'stu',\n    'vwx',\n    'yz'\n];\n\n\
    $prefix = 'abc';\n\n$filtered = array_filter($strings, function($string", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$array2 = array('abc', 'def', 'ghi', 'jkl');\n$array3 = array();\n\
    $array4 = array();\n$array5 = array();\n$array6 = array();\n$array7 = array();\n\
    $array8 = array();\n$array9 = array();\n$array10 = array();\n$array11 = array();\n\
    $array12 = array();\n$array13 = array();\n$array14 = array();\n$array15 = array();\n\
    $array16 = array();\n$array17 = array();\n$array18 = array();\n$array19 = array();\n\
    $array20 = array();\n$array21 = array();\n$array22 = array();\n$array23 = array();\n\
    $array24 = array();\n$array25 = array();\n$array26 = array();\n$array27 = array();\n\
    $array28 = array();\n$array29 = array();\n$array30 = array();\n$array31 = array();\n\
    $array32 = array();\n$array33 = array();\n$array34 = array();\n$array35 = array();\n\
    $array36 = array();\n$array37 = array();\n$array38 = array();\n$array39 = array();\n\
    $array40 = array();\n$array41 = array();\n$array42 = array();\n$array43 = array();\n\
    $array44 = array();\n$array45 = array();\n$array46 = array();\n$array47 = array();\n\
    $array48 = array();\n$array49 = array();\n$array50 = array();\n$array51 = array();\n\
    $array52 = array();\n$array53 = array();\n$array54 = array();\n$array55 = array();\n\
    $array56 = array();\n$array57 = array();\n$array58 = array();\n$array59 = array();\n\
    $array60 = array();\n$array61 = array();\n$array62 = array();\n$array63 = array();\n\
    $array64 = array();\n$array65 = array();\n$array66 = array", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. Your code works but i think i need to use\
    \ array_filter() instead of array_map(). Because i need to filter out all empty\
    \ strings and also i need to filter out all empty arrays. So i think i need to\
    \ use array_filter() instead of array_map(). Can you please help me with this?\n\
    <|/ c |>\n<| c |>\n: I added an example for filtering the empty strings and empty\
    \ arrays.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works but i think\
    \ i need to use array_filter() instead of array_map(). Because i need to filter\
    \ out all empty strings and also i need to filter out all empty arrays. So i think\
    \ i need to use array_filter() instead of array_map(). Can you please help me\
    \ with this?\n<|/ c |>\n<| c |>\n: I added an example for filtering the empty\
    \ strings and empty arrays.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code\
    \ works but i think i need to use array_filter() instead of array_map(). Because\
    \ i need to filter out all empty strings and also i need to filter out all empty\
    \ arrays. So i think i need to use array_filter() instead of array_map(). Can\
    \ you please help me with this?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array =\
    \ array(\n    array('name' => 'John', 'age' => '25'),\n    array('name' => 'Jane',\
    \ 'age' => '30'),\n    array('name' => 'Jack', 'age' => '35'),\n    array('name'\
    \ => 'Jill', 'age' => '40'),\n    array('name' => 'Jack', 'age' => '35'),\n  \
    \  array('name' => 'Jill', 'age' => '40'),\n    array('name' => 'Jack', 'age'\
    \ => '35'),\n    array('name' => 'Jill', 'age' => '40'),\n    array('name' =>\
    \ 'Jack', 'age' => '35'),\n    array('name' => 'Jill', 'age' => '40'),\n    array('name'\
    \ => 'Jack', 'age' => '35'),\n    array('name' => 'Jill', 'age' => '40'),\n  \
    \  array('name' => 'Jack', 'age' => '35'),\n    array('name' => 'Jill', 'age'\
    \ => '40'),\n", "  $filtered = [];\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n", "  $filtered = [];\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\n\
    I like your answer, but I think it would be better to use a `foreach` instead\
    \ of a `for` loop. `for` loops are generally considered bad practice in PHP. http://stackoverflow.com/questions/12445972/php-for-loop-vs-foreach\n\
    <|/ c |>\n<| c |>\nI agree with you, `for` loops are generally considered bad\
    \ practice in PHP, but in this case I believe that `foreach` is more readable\
    \ and easier to understand. Also, I believe that `for` loops are faster than `foreach`\
    \ loops.\n<|/ c |>\n<| c |>\nI agree with you on `for` loops being faster than\
    \ `foreach` loops. But I believe that `for` loops are more readable and easier\
    \ to understand. Also, I believe that `for` loops are faster than `foreach` loops.\n\
    <|/ c |>\n<| c |>\nI agree with you on `for` loops being faster than `foreach`\
    \ loops. But I believe that `for` loops are more readable and easier to understand.\
    \ Also, I believe that `for` loops are faster than `foreach` loops.\n<|/ c |>\n\
    <| c |>\nI agree with you on `for` loops being faster than `foreach` loops. But\
    \ I believe that `for` loops are more readable and easier to understand. Also,\
    \ I believe that `for` loops are faster than `foreach` loops.\n<|/ c |>\n<| a\
    \ tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$filtered = array_filter($array, function($value) {\n    return strpos($value,\
    \ \"a\") === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Much more readable than other solutions.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more readable than other solutions.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more readable than\
    \ other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more readable than other solutions.\n<|/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
