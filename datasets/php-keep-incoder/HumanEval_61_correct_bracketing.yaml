name: HumanEval_61_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
  (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  \
    \  $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $bracket", "    $brackets = str_replace(\")\", \"\", $brackets);\n    $brackets\
    \ = str_replace(\"(\", \"\", $brackets);\n    return $brackets == \"()\";\n}",
  "  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[] = $bracket;\n\
    \    } else if ($bracket == ')') {\n      $closing_brackets[] = $bracket;\n  \
    \  }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n",
  "  $brackets = explode(\")\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($brackets[$key-1] != $value) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't work.\
    \ Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with `\"\
    (()())\"`.\n<|/ c |>\n<| c |>\n: It doesn't work. Try it with `\"(()())\"`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<|\
    \ c |>\n: It doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php", "    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    return $brackets === '()' || $brackets === '[]' || $brackets === '{}';\n\
    }\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    return $brackets == '()';\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"\
    (()())\")` returns `true` but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting. I'll post a link\
    \ to the [online tester](http://regex101.com/r/qG9kW6/1).\n<|/ c |>\n<| c |>\n\
    : I added a link to a [tester](http://regex101.com/r/qG9kW6/2) that shows it working.\n\
    <|/ c |>\n<| c |>\n: I added a link to a [tester](http://regex101.com/r/qG9kW6/2)\
    \ that shows it working.\n<|/ c |>\n<| c |>\n: I added a link to a [tester](http://regex101.com/r/qG9kW6/2)\
    \ that shows it working.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php", "  $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. I've tried\
    \ your code, but I got this error: `Warning: preg_replace() [function.preg-replace]:\
    \ Unknown modifier '(' in /home/mysite/public_html/test.php on line 7`\n<|/ c\
    \ |>\n<| c |>\n: Sorry, I forgot to escape the `(` character. I've edited my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried your code,\
    \ but I got this error: `Warning: preg_replace() [function.preg-replace]: Unknown\
    \ modifier '(' in /home/mysite/public_html/test.php on line 7`\n<|/ c |>\n<| c\
    \ |>\n: Sorry, I forgot to escape the `(` character. I've edited my answer accordingly.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this\
    \ error: `Warning: preg_replace() [function.preg-replace]: Unknown modifier '('\
    \ in /home/mysite/public_html/test.php on line 7`\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"(()())\";\n$pattern = '/\\(/';\n$replacement = '';\n\
    echo preg_replace($pattern, $replacement, $string);", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if\
    \ the brackets are nested (like `((()))`), but this can be easily fixed by adding\
    \ a `+` after the `*`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it\
    \ (I added a note to the answer).\n<|/ c |>\n<| c |>\nI added a note to the answer.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n\
    $string = '(()())';\n$pattern = '/([()]+)/';\npreg_match_all($pattern, $string,\
    \ $matches);\nprint_r($matches);", "  $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()' || $brackets === '[]' || $brackets\
    \ === '{}';\n}\n", "  $opening = strpos($brackets, \"(\");\n  $closing = strpos($brackets,\
    \ \")\");\n  return $opening < $closing;\n}\n", "  $opening_brackets = array();\n\
    \  $closing_brackets = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket\
    \ == '(') {\n      $opening_brackets[] = $bracket;\n    }\n    if ($bracket ==\
    \ ')') {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple brackets inside each other, e.g. `((()))` will give\
    \ a false positive.\n<|/ c |>\n<| c |>\n: Yes, I realized that after I posted\
    \ my answer. I've updated my answer to account for multiple brackets inside each\
    \ other.\n<|/ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(", "  $brackets = explode(\"(\", $brackets);\n  foreach ($brackets\
    \ as $key => $bracket) {\n    if ($bracket != \")\") {\n      $brackets[$key]\
    \ = \")\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n",
  "  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\)([^()]*+\\)/', '\\\\1', $brackets);\n  return\
    \ $brackets === '()';\n}\n</code>\n<|/ a tags=regex,php |>\n<| c |>\nThis doesn't\
    \ work for nested brackets, e.g. `((()))` returns `true` but `((())))` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself (I tested it before\
    \ posting).\n<|/ c |>\n<| c |>\n: It doesn't work for nested brackets, e.g. `((()))`\
    \ returns `true` but `((())))` returns `false`.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work for nested brackets, e.g. `((()))` returns `true` but `((())))` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: It doesn't work for nested brackets, e.g. `((()))`\
    \ returns `true` but `((())))` returns `false`.\n<|/ c |>\n<| a tags=regex,php\
    \ |>\n<code>\n<?php\n$brackets = preg_replace('/\\(([^()]*+)\\)/', '\\\\1', $brackets);\n\
    $brackets = preg_replace('/\\)([^()]*+\\)/', '\\\\1', $brackets);\nreturn $brackets\
    \ === '()';", "    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    return $brackets === '()';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets === '()'\
    \ || $brackets === '[]';\n}\n", "  $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nI like your solution, however it fails for `
  "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = ", "  $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $brackets);\n  return $brackets === '()';\n}\n", "  $opening_brackets\
    \ = array();\n  $closing_brackets = array();\n  foreach ($brackets as $bracket)\
    \ {\n    if ($bracket == \"(\") {\n      $opening_brackets[] = $bracket;\n   \
    \ } else if ($bracket == \")\") {\n      $closing_brackets[] = $bracket;\n   \
    \ }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n",
  "    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    return $brackets\
    \ === '()' || $brackets === '[]';\n}\n", "  $brackets = explode(\")\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($brackets[count($brackets) - 1] == $b)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return preg_match('/\\\
    ([^)]*\\)/', $brackets);\n}\n", "  $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()' || $brackets === '[]' || $brackets\
    \ === '{}';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    return $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = pre", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\", "    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace", "    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \   $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == '(') {\n\
    \      $opening_brackets[] = $bracket;\n    } else if ($bracket == ')') {\n  \
    \    $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "    $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \   $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i] === '(') {\n\
    \            $closing_brackets[] = ')';\n        } else {\n            $closing_brackets[]\
    \ = '(';\n        }\n    }\n    $opening_brackets_count = count($opening_brackets);\n\
    \    $closing_brackets_count = count($closing_brackets);\n    if ($opening_brackets_count\
    \ !== $closing_brackets_count) {\n        return false;\n    }\n    for ($i =\
    \ 0; $i < $opening_brackets_count; $i++) {\n        if ($opening_brackets[$i]\
    \ !== $closing_brackets[$i]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = ", "  $brackets = str_replace(array('(',\
    \ ')'), array('{', '}'), $brackets);\n  $brackets = explode('{', $brackets);\n\
    \  $brackets = array_filter($brackets);\n  return !empty($brackets);\n}\n", " \
    \ $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "    $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\\\1',\
    \ $brackets);\n    $brackets = preg_replace('/\\)([^()]*+\\)/', '\\\\1', $brackets);\n\
    \    return $brackets === '()';\n}\n", "  $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $opening_brackets\
    \ = explode(\"(\", $brackets);\n  $closing_brackets = explode(\")\", $brackets);\n\
    \  foreach ($opening_brackets as $key => $value) {\n    if ($value !== $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    return $brackets ===\
    \ '()';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = ", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    return ($brackets === '()' || $brackets ===\
    \ '[]');\n}\n", "  $brackets = explode(\"(\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value != \")\") {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n\
    \  $closing_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $opening_brackets\
    \ = array_filter($opening_brackets);\n  $closing_brackets = array_filter($closing_brackets);\n\
    \  return count($opening_brackets) == count($closing_brackets);\n}\n", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\\
    )[\\[\\]]/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\[[^\\]]*\\\
    ]\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    [[^\\]]*\\]\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets === '()'\
    \ || $brackets === '[]';\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n", "   \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]';\n}\n", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n", "    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^(]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = pre", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\", "  $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = pre", "    $brackets = str_replace(array('(', ')'), array('{',\
    \ '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('(', ')'),\
    \ $brackets);\n    $brackets = str_replace(array('(', ')'), array('(', '}'), $brackets);\n\
    \    $brackets = str_replace(array('(', '}'), array('(', ')'), $brackets);\n \
    \   $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n  \
    \  $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n   \
    \ $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets\
    \ = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets =\
    \ str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{',\
    \ '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'),\
    \ array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('{',\
    \ '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('{', '}'),\
    \ $brackets);\n    $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n\
    \    $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n \
    \   $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n  \
    \  $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n   \
    \ $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets\
    \ = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets =\
    \ str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{',\
    \ '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'),\
    \ array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('{',\
    \ '}'), $brackets);\n    $brackets = str_replace(", "  $brackets = str_replace(array('(',\
    \ ')'), '', $brackets);\n  $brackets = explode(')', $brackets);\n  foreach ($brackets\
    \ as $i => $bracket) {\n    if ($bracket == '') {\n      unset($brackets[$i]);\n\
    \    }\n  }\n  return count($brackets) == 0;\n}\n", "    $opening_brackets = array();\n\
    \    $closing_brackets = array();\n    foreach ($brackets as $bracket) {\n   \
    \     if ($bracket == '(') {\n            $opening_brackets[] = $bracket;\n  \
    \      }\n        if ($bracket == ')') {\n            $closing_brackets[] = $bracket;\n\
    \        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $opening_brackets = array();\n    $closing_brackets = array();\n  \
    \  $brackets_count = count($brackets);\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i]\
    \ === '(') {\n            $closing_brackets[] = ')';\n        } else if ($brackets[$i]\
    \ === ')') {\n            $closing_brackets[] = '(';\n        }\n    }\n    return\
    \ count(array_diff($opening_brackets, $closing_brackets)) === 0;\n}\n", "    $brackets\
    \ = explode(\")\", $brackets);\n    foreach ($brackets as $i => $bracket) {\n\
    \        if ($bracket == $brackets[$i - 1]) {\n            unset($brackets[$i]);\n\
    \        }\n    }\n    return count($brackets) == 0;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! I didn't know about this function. I will\
    \ try it out and let you know if it works.\n<|/ c |>\n<| c |>\nI tested your function\
    \ and it works perfectly. Thank you very much!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = '(()())';\n$string = str_replace('(', '(', str_replace(')', '(',\
    \ $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str",
  "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n\
    \  $brackets_count = count($brackets);\n  for ($i = 0; $i < $brackets_count; $i++)\
    \ {\n    $opening_brackets[] = $brackets[$i];\n  }\n  for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n    $closing_brackets[] = $brackets[$i];\n  }\n  $opening_brackets_count\
    \ = count($opening_brackets);\n  for ($i = 0; $i < $opening_brackets_count; $i++)\
    \ {\n    if ($opening_brackets[$i] !== \"(\") {\n      return false;\n    }\n\
    \  }\n  for ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($opening_brackets[$i]\
    \ !== \")\") {\n      return false;\n    }\n  }\n  for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n    if ($opening_brackets[$i] !== \"(\") {\n      return false;\n \
    \   }\n  }\n  for ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($opening_brackets[$i]\
    \ !== \")\") {\n      return false;\n    }\n  }\n  for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n    if ($opening_brackets[$i] !== \")\") {\n      return false;\n \
    \   }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    return $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    return $brackets === '()' || $brackets ===\
    \ '[]' || $brackets === '{}';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = ", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\", "  $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work if the brackets are nested. For example, `((()))`\
    \ will fail.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it,\
    \ and it works fine.\n<|/ c |>\n<| c |>\n: It also works with nested brackets.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: It also works with nested brackets. Try\
    \ it yourself. `((()))` will fail.\n<|/ c |>\n<| c |>\n: It also works with nested\
    \ brackets. Try it yourself. `((()))` will fail.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$string = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\n</code>\n<|/ a tags=php,regex |>\n\
    <| a tags=php,regex |>\n<code>\n$string = '(()())';\n$pattern = '/\\(([^()]+)\\\
    )/';\npreg_match_all($pattern, $string, $matches);\nprint_r($matches);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$string = '(()())';\n$pattern = '/\\\
    (([^()]+)\\)/';\npreg_match_all($pattern, $string, $matches);\nprint_r($matches);\n\
    </code>\n<|/ a tags=php,regex |>\n<| a dscore=0 |>\n<code>\n$string = '(()())';\n\
    $pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern, $string, $matches);\n\
    print_r($matches);\n</code>\n<|/ a tags=php,regex |>\n<| a dscore=0 |>\n<code>\n\
    $string = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern",
  "  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $bracket) {\n    if ($bracket != \")\") {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\", "  $brackets = explode(\"(\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  foreach ($brackets as $bracket) {\n\
    \    if ($bracket != \")\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \  return $brackets === '()';\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work when there are multiple nested brackets.\n<|/ c |>\n<| c |>\n:\
    \ It does, but only because you didn't test it properly. Try it with the example\
    \ I gave in my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| a tags=regex,php |>\n<code>\n\
    <?php\n$string = \"(()())\";\n$pattern = '/[()]/';\npreg_match_all($pattern, $string,\
    \ $matches);\nprint_r($matches);", "  $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\nI added\
    \ a test case to my answer. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. But\
    \ it fails for `\"(()())\"`.\n<|/ c |>\n<| c |>\nI added a test case to my answer.\
    \ Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it fails for `\"(()())\"\
    `.\n<|/ c |>\n<| a tags=php,regex |>\nThis regex will match all valid brackets:\n\
    <code>\n\\((?!\\))\n</code>\nIt will match all brackets that are not followed\
    \ by a closing bracket.\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `\"(()())\"`.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Did\
    \ you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it fails for `\"(()())\"`.\n\
    <|/ c |>\n<| c |>\nI added a test case to my answer. Did you try it?\n<|/ c |>\n\
    <| c |>\nYes, I did. But it fails for `\"(()())\"`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = '(()())';\n$pattern = '/\\((?!\\))/';\n$replacement =\
    \ '';\necho preg_replace($pattern, $replacement, $string);", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n", "    $opening_brackets = array();\n    $closing_brackets = array();\n  \
    \  $brackets_count = count($brackets);\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        $opening_brackets[] = $brackets[$i];\n    }\n    for ($i =\
    \ 0; $i < $brackets_count; $i++) {\n        $closing_brackets[] = $brackets[$i\
    \ + 1];\n    }\n    return array_diff($opening_brackets, $closing_brackets);\n\
    }\n", "  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $opening_brackets = array_diff($opening_brackets,\
    \ array_unique($closing_brackets));\n  return count($opening_brackets) == 0;\n\
    }\n", "    $brackets = str_replace(array('(', ')'), array('{', '}'), $brackets);\n\
    \    $brackets = explode('{', $brackets);\n    $brackets = array_filter($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n", "  $brackets\
    \ = explode(\",\", $brackets);\n  foreach ($brackets as $b) {\n    if ($b != \"\
    ()\" && $b != \"\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !==\
    \ \")\";\n  });\n  return count($brackets) === 0;\n}\n", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = pre", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()';\n}\n", "  $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ `true` but `correct_bracketing(\")(()\")` returns `false`.\n<|/ c |>\n<| c |>\n\
    : It works for me in PHP 5.3.10. Are you sure you copied it correctly?\n<|/ c\
    \ |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = '(()())';\n$pattern = '/[()]/';\n\
    $replacement = '';\necho preg_replace($pattern, $replacement, $string);\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\"\
    )` returns `true` but `correct_bracketing(\")(()\")` returns `false`.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| a |>\n<code>\n$string = '(()())';\n$pattern\
    \ = '/[()]/';\n$replacement = '';\necho preg_replace($pattern, $replacement, $string);\n\
    </code>\n<|/ a tags=php,regex dscore=2 |>\n<| c |>\nThis doesn't work for me.\
    \ `correct_bracketing(\"(()())\")` returns `true` but `correct_bracketing(\")(()\"\
    )` returns `false`.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = '(()())';\n\
    $pattern = '/[()]/';\n$replacement = '';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = '(()())';\n\
    $pattern = '/[()]/';\n$replacement = '';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n\
    $", "    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\", "  $brackets\
    \ = preg_replace('/\\(([^()]*\\))/', '\\\\1', $brackets);\n  return preg_match('/\\\
    (([^()]*\\))/', $brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis\
    \ doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `\"\
    (()())\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `\"(()())\"`.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it with `\"(()())\"`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = '(()())';\n$pattern = '/\\\\(([^()]*\\\\))/';\n\
    preg_match_all($pattern, $string, $matches);\nvar_dump($matches);", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets === '()'\
    \ || $brackets === '[]';\n}\n", "    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/", "  $brackets = preg_replace('/\\(([^)]+)\\)/', '\\1', $brackets);\n\
    \  return $brackets === '()';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does. I tested it before\
    \ posting.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = \"(()())\"\
    ;\n$pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern, $string, $matches);\n\
    print_r($matches);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n\
    $string = \"(()())\";\n$pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n<?php\n$string = \"(()())\";\n$pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);", "  $opening_brackets = preg_split('/[\\\
    (\\)]/', $brackets);\n  $closing_brackets = preg_split('/[\\)\\]]/', $brackets);\n\
    \  return count($opening_brackets) == count($closing_brackets);\n}\n", "    $brackets\
    \ = explode(\")\", $brackets);\n    foreach ($brackets as $i => $bracket) {\n\
    \        if ($bracket == $brackets[$i - 1]) {\n            unset($brackets[$i]);\n\
    \        }\n    }\n    return count($brackets) == 0;\n}\n", "  $opening_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets = preg_split('/[\\\
    )\\]]/', $brackets);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $brackets = explode(\"(\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value != \")\") {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    $brackets = explode(\",\", $brackets);\n    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == \"(\") {\n            $opening_brackets[] = $bracket;\n\
    \        } else {\n            $closing_brackets[] = $bracket;\n        }\n  \
    \  }\n    return count(array_diff($opening_brackets, $closing_brackets)) == 0;\n\
    }\n", "    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace", "  $opening_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets = preg_split('/[\\\
    (\\)]/', $brackets);\n  $i = 0;\n  while ($i < count($opening_brackets)) {\n \
    \   if ($opening_brackets[$i] == $closing_brackets[$i]) {\n      $i++;\n    }\
    \ else {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    This doesn't work if there are nested brackets. e.g. `((()))` will fail.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it yourself. It returns `true` for `((()))`\
    \ and `
  "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    return $brackets === '()';\n\
    }\n", "    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"(()())\";\n$pattern =\
    \ '/\\(([^()]*+)\\)/';\npreg_match_all($pattern, $string, $matches);\nprint_r($matches);",
  "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm\
    \ going to try this out and see how it goes.\n<|/ c |>\n<| c |>\nI added a test\
    \ case to the question. Your code doesn't seem to work. Can you please take a\
    \ look?\n<|/ c |>\n<| c |>\nI added a test case to the question. Your code doesn't\
    \ seem to work. Can you please take a look?\n<|/ c |>\n<| c |>\nI added a test\
    \ case to the question. Your code doesn't seem to work. Can you please take a\
    \ look?\n<|/ c |>\n<| c |>\nI added a test case to the question. Your code doesn't\
    \ seem to work. Can you please take a look?\n<|/ c |>\n<| a tags=php,regex |>\n\
    You can use this regex:\n<code>\n^(?:\\((?!\\))|(?!\\))\\))*$\n</code>\nRegEx\
    \ Demo\nCode:\n<code>\n$string = '(()())';\n$pattern = '/^(?:\\((?!\\))|(?!\\\
    ))\\))*$/';\nif (preg_match($pattern, $string)) {\n    echo \"Matched\";\n} else\
    \ {\n    echo \"Not Matched\";\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. I'm going to try this out and see how it goes.\n<|/ c |>\n\
    <| c |>\nI added a test case to the question. Your code doesn't seem to work.\
    \ Can you please take a look?\n<|/ c |>\n<| c |>\nI added a test case to the question.\
    \ Your code doesn't seem to work. Can you please take a look?\n<|/ c |>\n<| c\
    \ |>\nI added a test case to the question. Your code doesn't seem to work. Can\
    \ you please take a look?\n<|/ c |>\n<| c |>\nI added a test case to the question.\
    \ Your code doesn't seem to work. Can you please take a look?\n<|/ c |>\n<| a\
    \ dscore=1 |>\nThis regex should work:\n<code>\n^(?:\\((?!\\))|(?!\\))\\))*$\n\
    </code>\nDemo\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. I'm going\
    \ to try this out and see how ", "    $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', ", "  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  $count = count($opening_brackets);\n\
    \  for($i = 0; $i < $count; $i++) {\n    if($opening_brackets[$i] != $closing_brackets[$i])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nI like the idea of using recursion to solve\
    \ this problem. Thanks!\n<|/ c |>\n<| c |>\nI like your solution, but I feel like\
    \ it can be simplified a bit. I'll post my solution below.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI like my solution, but I feel like it can be simplified a bit.\n<code>",
  "    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\",
  "    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i] === '(') {\n\
    \            $closing_brackets[] = ')';\n        } else if ($brackets[$i] ===\
    \ ')') {\n            $opening_brackets[] = ')';\n        }\n    }\n    return\
    \ $opening_brackets === $closing_brackets;\n}\n</code>\n<|/ a tags=php,regex |>\n\
    <| c |>\nI like this solution, but I believe it can be improved. For example,\
    \ what about `((())))`? It will give a false positive.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it can be improved. But I believe that OP will figure it out by himself.\n<|/\
    \ c |>\n<| c |>\nI agree. I'm just saying that the OP will have to figure it out\
    \ himself :)\n<|/ c |>\n<| c |>\n: I agree. I'm just saying that the OP will have\
    \ to figure it out himself :)\n<|/ c |>\n<| c |>\nI like your solution, but I\
    \ believe it can be improved. For example, what about `((())))`? It will give\
    \ a false positive.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = '(()())';\n\
    $pattern = '/\\(|\\)|\\(|\\)/';\n$replacement = '';\necho preg_replace($pattern,\
    \ $replacement, $string);", "  $brackets = str_replace(\")\", \"\", $brackets);\n\
    \  $brackets = str_replace(\"(\", \"\", $brackets);\n  return $brackets == \"\
    ()\";\n}\n", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]' || $brackets === '{}';\n}\n",
  "  $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \  $brackets = explode(\"}\", $brackets);\n  foreach ($brackets as $key => $bracket)\
    \ {\n    if ($bracket != \"{\") {\n      if ($bracket != \"}\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $opening_brackets = array();\n\
    \  $closing_brackets = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket\
    \ == \"(\") {\n      $opening_brackets[] = $bracket;\n    }\n    if ($bracket\
    \ == \")\") {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "  $opening_brackets = preg_split('/[\\(\\\
    )]/', $brackets);\n  $closing_brackets = preg_split('/[\\)\\]]/', $brackets);\n\
    \  $opening_brackets = array_filter($opening_brackets);\n  $closing_brackets =\
    \ array_filter($closing_brackets);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $brackets = explode(\",\", $brackets);\n    $opening_brackets = array_filter($brackets,\
    \ function($x) {\n        return $x === '(';\n    });\n    $closing_brackets =\
    \ array_filter($brackets, function($x) {\n        return $x === ')';\n    });\n\
    \    return count($opening_brackets) === count($closing_brackets);\n}\n", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets\
    \ = preg_replace('/\\(([^()]*+)\\)/', '$1', $brackets);\n  return $brackets !==\
    \ $brackets;\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\", "  $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a\
    \ tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"\
    (()())\")` returns true.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before\
    \ posting it, and it works. I even tested it on [regex101](https://regex101.com/r/pY3oX6/1).\
    \ Can you show me the code you're using?\n<|/ c |>\n<| c |>\n: I added a link\
    \ to regex101.\n<|/ c |>\n<| c |>\n: I added a link to regex101.\n<|/ c |>\n<|\
    \ c |>\n: I added a link to regex101.\n<|/ c |>\n<| a dscore=1 |>\nThis regex\
    \ should work:\n<code>\n\\(([^)]*)\\)\n</code>\nIt will match any number of non-closing\
    \ parentheses inside parentheses.\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't\
    \ seem to work. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n<| c\
    \ |>\n: Yes, it does. I tested it before posting it, and it works. I even tested\
    \ it on [regex101](https://regex101.com/r/pY3oX6/1). Can you show me the code\
    \ you're using?\n<|/ c |>\n<| c |>\n: I added a link to regex101.\n<|/ c |>\n\
    <| c |>\n: I added a link to regex101.\n<|/ c |>\n<| c |>\n: I added a link to\
    \ regex101.\n<|/ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\npreg_match('/\\\
    (([^)]*)\\)/', $brackets, $matches);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't seem to work. `correct_bracketing(\"(()())\")` returns true.\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. I tested it before posting it, and it works. I\
    \ even tested it on [regex101](https://regex101.com/r/pY3oX6/1). Can you show\
    \ me ", "  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  return count($opening_brackets) ==\
    \ count($closing_brackets);\n}\n", "    $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', ", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_", "  $opening_brackets = array();\n  $closing_brackets = array();\n\
    \  foreach ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    else if ($bracket == ')') {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    else if ($bracket == ')') {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $opening_brackets = preg_match_all('/\\(([^()]+)\\)/', $brackets, $matches);\n\
    \  $closing_brackets = preg_match_all('/\\)([^()]+)/', $brackets, $matches);\n\
    \  return $opening_brackets == $closing_brackets;\n}\n", "  $brackets = preg_replace('/\\\
    (([^()]*+)\\)/', '$1', $brackets);\n  return preg_match('/\\(([^()]*+)\\)/', $brackets)\
    \ === 1;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work\
    \ for me. `preg_match` returns false on `(()())` but returns true on `()()()`.\
    \ Any ideas?\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.2). Are you sure you're\
    \ using PHP 5.3? What does `var_dump(preg_match('/\\(([^()]*+)\\)/', '(()())'))`\
    \ return?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does that work\
    \ for you?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does that work\
    \ for you?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does that work\
    \ for you?\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '(()())';\n\
    $pattern = '/\\(([^()]*+)\\)/';\npreg_match($pattern, $string, $matches);\nprint_r($matches);",
  "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = ", "  $brackets = explode(\",\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b[0] != \"(\" || $b[strlen($b) - 1] !=\
    \ \")\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets === '()'\
    \ || $brackets === '[]';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^[]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^[]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\[[^[]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^[]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^[]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_", "  $brackets = explode(\")\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != $brackets[$i -\
    \ 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $opening_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets = preg_split('/[\\\
    (\\)]/', $brackets);\n  $opening_brackets = array_diff($opening_brackets, $closing_brackets);\n\
    \  return !empty($opening_brackets);\n}\n", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    return $brackets == '()';\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks for your answer. I'm going to try it out and see if it\
    \ works. I appreciate your help.\n<|/ c |>\n<| c |>\nI added a test case to my\
    \ question. Can you please take a look and see if it works?\n<|/ c |>\n<| c |>\n\
    I added a test case to my question. Can you please take a look and see if it works?\n\
    <|/ c |>\n<| c |>\nI added a test case to my question. Can you please take a look\
    \ and see if it works?\n<|/ c |>\n<| c |>\nI added a test case to my question.\
    \ Can you please take a look and see if it works?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"(()())\";\n$string = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $string);\n$string = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $string);\n\
    echo $string;", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \   $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_", "  $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n\
    </code>\n<|/ a tags=php,regex |>\n<| c |>\nI like this solution, although it does\
    \ require a little more work to make it work with nested brackets.\n<|/ c |>\n\
    <| c |>\nI added a recursive solution that should handle nested brackets.\n<|/\
    \ c |>\n<| a tags=php,regex |>\nThis regex will match all brackets except for\
    \ those that are inside a string or comment:\n<code>\n/\\([^()]*\\)/\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't match nested brackets.\n<|/ c |>\n<|\
    \ c |>\nIt does match nested brackets. Try it yourself and see for yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't match nested brackets. Try it yourself and see for\
    \ yourself.\n<|/ c |>\n<| c |>\nIt does match nested brackets. Try it yourself\
    \ and see for yourself.\n<|/ c |>\n<| c |>\nIt does match nested brackets. Try\
    \ it yourself and see for yourself.\n<|/ c |>\n<| a dscore=2 |>\nThis regex will\
    \ match all brackets except for those that are inside a string or comment:\n<code>\n\
    /\\([^()]*\\)/\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n\
    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't match nested brackets.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n</code>\n\
    <|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex\
    \ |>\n<code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\([^\\\
    )]*\\)/', '', $brackets);\n</code>\n<|/ a ", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work for me. `correct_bracketing(\"\
    (()())\")` returns `true`, but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it. I just added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n\
    $string = '(()())';\n$string = preg_replace('/\\([^)]*\\)/', '', $string);\necho\
    \ $string;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work for\
    \ me. `correct_bracketing(\"(()())\")` returns `true`, but `correct_bracketing(\"\
    )(()\")` returns `false`.\n<|/ c |>\n<| c |>\n: It works for me. `correct_bracketing(\"\
    (()())\")` returns `true`, but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = '(()())';\n$string = preg_replace('/\\([^)]*\\)/', '', $string);\necho $string;\n\
    </code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work for me. `correct_bracketing(\"\
    (()())\")` returns `true`, but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = '(()())';\n$string = preg_replace('/\\([^)]*\\\
    )/', '', $string);\necho $string;", "    $brackets = explode(\",\", $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('strtolower',\
    \ $brackets);\n    $brackets = array_filter($brackets);\n    $brackets = array_unique($brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $", "    $brackets = str_replace(array('(', ')'), '', $brackets);\n    $brackets\
    \ = explode(')', $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets\
    \ = array_merge($brackets, array($brackets[0]));\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = str_replace(\"(\",\
    \ \"($brackets)\", $brackets);\n  $brackets = str_replace(\")\", \"($brackets)\"\
    , $brackets);\n  return $brackets === \"($brackets)\";\n}\n", "  $open_brackets\
    \ = preg_match_all('/\\(([^()]*?)\\)/', $brackets, $matches);\n  $closed_brackets\
    \ = preg_match_all('/\\)([^()]*?)\\)/', $brackets, $matches);\n  return $open_brackets\
    \ == $closed_brackets;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't\
    \ work for me. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n<| c\
    \ |>\n: I fixed the regex to match `(()())` as well.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n\
    <| c |>\n: I fixed the regex to match `(()())` as well.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n\
    <| a tags=php,regex |>\n<code>\n<?php", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. However\
    \ I cannot understand why it works. Could you please explain to me how it works?\n\
    <|/ c |>\n<| c |>\n: I added some explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"(()())\";\n$pattern = '/\\([^()]*\\)/';\npreg_match($pattern,\
    \ $string, $matches);\nprint_r($matches);", "  $brackets = explode(\")\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($brackets[$key - 1] != $value)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == \"(\") {\n            $opening_brackets[] = $bracket;\n\
    \        } else {\n            $closing_brackets[] = $bracket;\n        }\n  \
    \  }\n    return count($opening_brackets) == count($closing_brackets);\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if there are nested brackets.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it out.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if there are nested brackets. Try it out.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if there are nested brackets. Try it out.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if there are nested brackets. Try it out.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n<?php\n$string = '(()())';\n$pattern = '/\\(|\\)/';\n$replacement = '';\n\
    echo preg_replace($pattern, $replacement, $string);", "  $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    $opening_brackets_length =\
    \ strlen($brackets);\n    $closing_brackets_length = strlen($brackets) - $opening_brackets_length;\n\
    \    $i = 0;\n    $j = 0;\n    while ($i < $opening_brackets_length) {\n     \
    \   if ($brackets[$i] == $brackets[$i + 1]) {\n            $i++;\n        } else\
    \ {\n            $opening_brackets[$j] = $brackets[$i];\n            $j++;\n \
    \       }\n        $i++;\n    }\n    while ($j < $closing_brackets_length) {\n\
    \        if ($brackets[$j] == $brackets[$j + 1]) {\n            $j++;\n      \
    \  } else {\n            $closing_brackets[$i] = $brackets[$j];\n            $i++;\n\
    \        }\n        $j++;\n    }\n    for ($i = 0; $i < $opening_brackets_length;\
    \ $i++) {\n        if ($opening_brackets[$i] != $closing_brackets[$i]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n", "  $brackets\
    \ = explode(\",\", $brackets);\n  foreach ($brackets as $b) {\n    if ($b != \"\
    ()\" && $b != \"\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/\\(([^()]*?)\\)/', '$1', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()';\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == ')') {\n      $closing_brackets[] = $brackets[$i];\n    }\n    if ($brackets[$i]\
    \ == '(') {\n      $opening_brackets[] = $brackets[$i];\n    }\n  }\n  return\
    \ count(array_diff($opening_brackets, $closing_brackets)) == 0;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "    $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n    return $brackets === '()' || $brackets === '[]';\n}\n",
  "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = ", "  $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets = str_replace(array('(',\
    \ ')'), array('{', '}'), $brackets);\n  $brackets = explode('{', $brackets);\n\
    \  $brackets = array_filter($brackets);\n  $brackets = array_values($brackets);\n\
    \  return $brackets[0] === $brackets[count($brackets) - 1];\n}\n</code>\n<|/ a\
    \ tags=php,regex |>\n<| c |>\nThanks, I didn't know about this function. I think\
    \ I'll use it.\n<|/ c |>\n<| c |>\nThis doesn't work if the brackets are nested.\
    \ For example, it doesn't work for `((()))`. See [my answer](http://stackoverflow.com/a/41515331/1438393)\
    \ for a function that does work.\n<|/ c |>\n<| a tags=php,regex |>\nI wrote a\
    \ function that does work:\n<code>", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $opening_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets = preg_split('/[\\\
    )\\]]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "  $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n",
  "  $opening_brackets = array();\n  $closing_brackets = array();\n  $opening_brackets_length\
    \ = strlen($brackets);\n  for ($i = 0; $i < $opening_brackets_length; $i++) {\n\
    \    $opening_brackets[] = $brackets[$i];\n  }\n  for ($i = 0; $i < $opening_brackets_length;\
    \ $i++) {\n    $closing_brackets[] = $brackets[$opening_brackets_length - 1 -\
    \ $i];\n  }\n  return $opening_brackets == $closing_brackets;\n}\n", "  $opening_brackets\
    \ = array();\n  $closing_brackets = array();\n  foreach ($brackets as $bracket)\
    \ {\n    if ($bracket == \"(\") {\n      $opening_brackets[] = $bracket;\n   \
    \ }\n    if ($bracket == \")\") {\n      $closing_brackets[] = $bracket;\n   \
    \ }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n\
    </code>\n<|/ a tags=php,regex |>\n<| c |>\nI like this solution, although it does\
    \ require a little more code than my solution. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ solution does not work if there are multiple brackets inside each other. Example:\
    \ `(()())` will give `False`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it out with\
    \ your example. `correct_bracketing(\"(()())\")` returns `True`.\n<|/ c |>\n<|\
    \ c |>\n: It does work. Try it out with your example. `correct_bracketing(\"(()())\"\
    )` returns `True`.\n<|/ c |>\n<| c |>\n: It does work. Try it out with your example.\
    \ `correct_bracketing(\"(()())\")` returns `True`.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\nI came up with a solution that uses preg_match_all and preg_replace:\n<code>\n\
    $string = \"(()())\";\n$pattern = '/[\\(\\)]/';\n$replacement = '|';\n\n$matches\
    \ = preg_match_all($pattern, $string, $matches);\n$string = preg_replace($pattern,\
    \ $replacement, $string);\n\nif ($matches == 0) {\n    return false;\n}\n\n$opening_brackets\
    \ = $matches[0];\n$closing_brackets = $matches[1];\n\n$opening_brackets = array_unique($opening_brackets);\n\
    $closing_brackets = array_unique($closing_brackets);\n\nreturn count($opening_brackets)\
    \ == count($closing_brackets);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution\
    \ does not work if there are multiple brackets inside each other. Example: `(()())`\
    \ will give `False`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it out with your\
    \ example. `correct_bracketing(\"(()())\")` returns `True", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^\\\
    ]]*\\]\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == '(') {\n\
    \      $opening_brackets[] = $bracket;\n    }\n    if ($bracket == ')') {\n  \
    \    $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "    $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \ $brackets = explode(\",\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  foreach ($brackets as $key => $bracket) {\n    if ($bracket != $opening_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    return $brackets === '()';\n}\n", "    $opening_brackets\
    \ = preg_match_all('/\\(([^()]+)\\)/', $brackets, $matches);\n    $closing_brackets\
    \ = preg_match_all('/\\)([^()]+)/', $brackets, $matches);\n    return ($opening_brackets\
    \ == $closing_brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't\
    \ seem to work. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work because you didn't test it properly. `correct_bracketing(\"\
    (()())\")` returns false because `correct_bracketing(\"(()())\")` returns true.\n\
    <|/ c |>\n<| c |>\nI tested it and it returns false for me. `correct_bracketing(\"\
    (()())\")` returns false because `correct_bracketing(\"(()())\")` returns true.\n\
    <|/ c |>\n<| c |>\nI tested it and it returns false for me. `correct_bracketing(\"\
    (()())\")` returns false because `correct_bracketing(\"(()())\")` returns true.\n\
    <|/ c |>\n<| c |>\nI tested it and it returns false for me. `correct_bracketing(\"\
    (()())\")` returns false because `correct_bracketing(\"(()())\")` returns true.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php", "    $brackets = explode(\"\
    )\", $brackets);\n    foreach ($brackets as $b) {\n        if ($brackets[count($brackets)\
    \ - 1] == $b) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "  $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n  return\
    \ $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \   $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    return $brackets === '()' || $brackets === '[]';\n}\n", " \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\", "  $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n", " \
    \ $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^\\\
    ]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n  return (strlen($brackets) == 0);\n}", "  $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n  return $brackets == '()';\n}\n", "    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = ", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \  return $brackets === '()';\n}\n", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ true.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it returns true. Are\
    \ you sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c\
    \ |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n</code>\n\
    <|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets =\
    \ preg_replace('/\\([^()]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 tags=php,regex\
    \ |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*",
  "  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == '(') {\n      $open_brackets[] = $bracket;\n\
    \    }\n    else {\n      if (empty($closed_brackets)) {\n        // We haven't\
    \ seen a closing bracket yet, so this isn't a correct bracket.\n        return\
    \ false;\n      }\n      $closed_brackets[] = $bracket;\n    }\n  }\n  return\
    \ empty($closed_brackets);\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $opening_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets = preg_split('/[\\\
    )\\]]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"(\")\
    \ {\n      $opening_brackets[] = $bracket;\n    } else if ($bracket == \")\")\
    \ {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "    $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n", "    $brackets = preg_replace('/\\([^\\\
    )]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\\
    )]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets == '()' || $brackets == '[]';\n\
    }\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,regex |>\n<code>", " \
    \ $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \  $brackets = str_replace(array(\"{\", \"}\"), array(\"(\", \")\"), $brackets);\n\
    \  return preg_match(\"/{$brackets}$/\", $brackets);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ `true` but `correct_bracketing(\")(()\")` returns `false`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running PHP 5.3.10\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.10 and it works fine. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running\
    \ PHP 5.3.10\n<|/ c |>\n<| a tags=php,regex |>\nI believe this should work:\n\
    <code>\n$brackets = preg_replace('/\\([^)]*\\)/', '{', $brackets);\n$brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '}', $brackets);\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ `true` but `correct_bracketing(\")(()\")` returns `false`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nI copied it correctly. I'm running PHP 5.3.10\n<|/ c |>\n<|\
    \ c |>\nI tested it on PHP 5.3.10 and it works fine. Are you sure you copied the\
    \ code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running\
    \ PHP 5.3.10\n<|/ c |>\n<| a tags=php,regex |>\n<code>", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return\
    \ $brackets === '()' || $brackets === '[]' || $brackets === '{}';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
