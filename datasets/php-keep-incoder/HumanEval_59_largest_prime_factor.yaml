name: HumanEval_59_largest_prime_factor
language: php
prompt: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a\
  \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
  // 2\nfunction largest_prime_factor($n) {\n"
tests: "function candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n     \
    \   if ($n % $i == 0) {\n            $j++;\n            if ($j > $i) {\n     \
    \           $i = $j;\n            }\n        }\n        $i++;\n    }\n    return\
    \ $i;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n  \
    \      if ($n % $i == 0) {\n            $j++;\n            if ($j == $i) {\n \
    \               return $i;\n            }\n        }\n        $i++;\n    }\n \
    \   return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $n = $i . '/' . $n;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $n;\n}\n", "    $n = abs($n);\n\
    \    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $n = $n / $i;\n            $i = $j + 1;\n            $j++;\n        }\n\
    \        elseif ($n % $i == 1) {\n            $i++;\n        }\n        else {\n\
    \            $j++;\n        }\n    }\n    return $j;\n}\n", "    $i = 2;\n   \
    \ $p = $n;\n    while ($p < $n) {\n        if ($n % $i == 0) {\n            $p\
    \ *= $i;\n            $i++;\n        }\n        else {\n            $i = 2;\n\
    \        }\n    }\n    return $p;\n}\n", "  $n = abs($n);\n  $i = $j = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    while ($n % $i == 0) {\n      $i++;\n    }\n    if ($i\
    \ == $j) {\n      return $j;\n    }\n    $j++;\n  }\n  return $j;\n}", "    $n\
    \ = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if\
    \ ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n      \
    \  }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes\
    \ |>\n<| c |>\nThis code doesn't work for me. I'm getting a blank page when I\
    \ run it.\n<|/ c |>\n<| c |>\nI tested it and it worked for me. Are you sure you\
    \ copied the code correctly? Did you change the variable names?\n<|/ c |>\n<|\
    \ c |>\nI copied the code exactly as you wrote it. I changed the variable names.\
    \ I even tried copying and pasting your code into a new php file and running it\
    \ on localhost. I'm still getting a blank page.\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works fine for me. Are you sure you copied the code correctly?\
    \ Did you change the variable names?\n<|/ c |>\n<| c |>\nI copied the code exactly\
    \ as you wrote it. I changed the variable names. I even tried copying and pasting\
    \ your code into a new php file and running it on localhost. I'm still getting\
    \ a blank page.\n<|/ c |>\n<| a tags=php,primes |>\n<code>\n<?php", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i\
    \ . $n / $i;\n    } else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n",
  "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n    \
    \    if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $i = 2;\n  \
    \  $p = $n;\n    while ($p > 1) {\n        if ($n % $i == 0) {\n            $p\
    \ = $p / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $p;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to find the largest prime factor of a\
    \ number, not just its greatest prime factor.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Find the largest prime factor of a number\", not \"Find the greatest prime\
    \ factor of a number\"\n<|/ c |>\n<| c |>\nThe question was \"Find the largest\
    \ prime factor of a number\", not \"Find the greatest prime factor of a number\"\
    \n<|/ c |>\n<| c |>\nThe question was \"Find the largest prime factor of a number\"\
    , not \"Find the greatest prime factor of a number\"\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Find the largest prime factor of a number\", not \"Find the greatest prime\
    \ factor of a number\"\n<|/ c |>\n<| a tags=php,prime-factoring |>\n<code>\n<?php",
  "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n\
    \        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}", "  $n = abs($n);\n\
    \  $i = $j = 2;\n  while ($i <= $n) {\n    while ($n % $i == 0) {\n      $i++;\n\
    \    }\n    if ($i == $j) {\n      return $j;\n    }\n    while ($j % $i == 0)\
    \ {\n      $j++;\n    }\n    if ($j == $i) {\n      return $i;\n    }\n    $i++;\n\
    \    $j++;\n  }\n}", "    $n = abs($n);\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $n = $i . $n / $i;\n           \
    \ $i = 2;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for small numbers\
    \ but for large numbers it gives wrong result. For example, for number 1536, it\
    \ returns 3 instead of 2.\n<|/ c |>\n<| c |>\nYes, I tested it for large numbers\
    \ and it works perfectly. Try it again with 1536 and see if it works.\n<|/ c |>\n\
    <| c |>\nYes, it works perfectly for large numbers. But for number 1536 it returns\
    \ 3 instead of 2. Do you know why it happens?\n<|/ c |>\n<| c |>\nI tested it\
    \ again with 1536 and it returns 2 correctly. Are you sure you copied the code\
    \ correctly? It returns 2 correctly for 1536.\n<|/ c |>\n<| c |>\nYes, I copied\
    \ your code and tested it again with 1536 and it returns 2 correctly. Are you\
    \ sure you copied the code correctly? It returns 2 correctly for 1536.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = 2;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $n;\n}\n", "    $n = abs($n);\n    $i = 1;\n    $factor = 2;\n   \
    \ while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code doesn't work for me.\
    \ `largest_prime_factor(13195)` returns `2` instead of `3`.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 7.0.10 and it works fine. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6.15 and it works fine. Maybe you have\
    \ a different PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it\
    \ works fine. Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and it works fine. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| a tags=php,primes |>\n<code>", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $n = $i . $n / $i;\n            $i\
    \ = 2;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n\
    }", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $factor = $i;\n            break;\n        }\n     \
    \   $i++;\n    }\n    return $factor;\n}\n", "    $n--;\n    do {\n        $n--;\
    \ // Divide by 2\n        $n++; // Divide by 3\n        $n++; // Divide by 5\n\
    \        $n++; // Divide by 7\n        $n++; // Divide by 11\n        $n++; //\
    \ Divide by 13\n        $n++; // Divide by 17\n        $n++; // Divide by 19\n\
    \        $n++; // Divide by 23\n        $n++; // Divide by 29\n        $n++; //\
    \ Divide by 31\n        $n++; // Divide by 37\n        $n++; // Divide by 41\n\
    \        $n++; // Divide by 43\n        $n++; // Divide by 47\n        $n++; //\
    \ Divide by 53\n        $n++; // Divide by 59\n        $n++; // Divide by 61\n\
    \        $n++; // Divide by 67\n        $n++; // Divide by 71\n        $n++; //\
    \ Divide by 73\n        $n++; // Divide by 79\n        $n++; // Divide by 83\n\
    \        $n++; // Divide by 89\n        $n++; // Divide by 97\n    } while ($n\
    \ > 1);\n    return $n;\n}\n", "    $n = abs($n);\n    $i = 1;\n    $factor =\
    \ 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $i = 2; $p =\
    \ 1; $q = $n; $m = $n; $found = false;\n    while ($i <= $m) {\n        if ($n\
    \ % $i == 0) {\n            $p *= $i;\n            $found = true;\n        }\n\
    \        $i += $q;\n        $q = $p * $q;\n    }\n    return $p > 1 ? $p : null;\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThe algorithm is correct, but\
    \ I believe it can be optimized a bit. Instead of checking all numbers from 2\
    \ to sqrt(n), it would be better to check only odd numbers from 2 to sqrt(n).\n\
    <|/ c |>\n<| c |>\nI agree, but I wanted to keep it simple and easy to understand.\n\
    <|/ c |>\n<| c |>\nI agree with you that it's easy to understand, but I believe\
    \ it can be optimized a bit. Instead of checking all numbers from 2 to sqrt(n),\
    \ it would be better to check only odd numbers from 2 to sqrt(n).\n<|/ c |>\n\
    <| c |>\nI agree with you that it's easy to understand, but I believe it can be\
    \ optimized a bit. Instead of checking all numbers from 2 to sqrt(n), it would\
    \ be better to check only odd numbers from 2 to sqrt(n).\n<|/ c |>\n<| c |>\n\
    I agree with you that it's easy to understand, but I believe it can be optimized\
    \ a bit. Instead of checking all numbers from 2 to sqrt(n), it would be better\
    \ to check only odd numbers from 2 to sqrt(n).\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n         \
    \   $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n", " \
    \   $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n   \
    \     if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes\
    \ |>\n<| c |>\nThis code is not working with large numbers. I tested with number\
    \ like `1000000000000` and it returns `1` instead of `2`.\n<|/ c |>\n<| c |>\n\
    I tested with number like `1000000000000` and it returns `1` instead of `2`.\n\
    <|/ c |>\n<| c |>\nIt returns 1 because `1000000000000` is greater than `PHP_INT_MAX`,\
    \ which is 2147483647. `PHP_INT_MAX` is `9223372036854775807` which is `9223372036854775808`.\
    \ `9223372036854775808` is greater than `2147483647`, which is `2147483648`. `2147483648`\
    \ is greater than `2147483647`, which is `2147483647`. `2147483647` is greater\
    \ than `2147483647`, which is `2147483647`. `2147483647` is greater than `2147483647`,\
    \ which is `2147483647`. `2147483647` is greater than `2147483647`, which is `2147483647`.\
    \ `2147483647` is greater than `2147483647`, which is `2147483647`. `2147483647`\
    \ is greater than `2147483647`, which is `2147483647`. `2147483647` is greater\
    \ than `2147483647`, which is `2147483647`. `2147483647` is greater than `2147483647`,\
    \ which is `2147483647`. `2147483647` is greater than `2147483647`, which is `2147483647`.\
    \ `2147483647` is greater than `2147483647`, which is `2147483647`. `2147483647`\
    \ is greater than `2147483647`, which is `2147483647`. `2147483647` is greater\
    \ than `2147483647`, which is `2147483647`. `2147483647` is greater than `2147483647`,\
    \ which is `2147483647`. `2147483647` is greater than `2147483647`, which is `2147483647`.\
    \ `2147483647` is greater than `2147483647`, which is `2147483647", "    $n =\
    \ abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n    \
    \    if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThe question was about PHP not Python\n<|/ c |>\n<| c |>\nI added\
    \ a PHP solution\n<|/ c |>\n<| c |>\nThe question was about PHP not Python\n<|/\
    \ c |>\n<| c |>\nI added a PHP solution\n<|/ c |>\n<| c |>\nThe question was about\
    \ PHP not Python\n<|/ c |>\n<| a |>\n<code>\n<?php", "    $n = abs($n);\n    $i\
    \ = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $factor = $i;\n            break;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n            if\
    \ ($j > $i) {\n                return $i;\n            }\n        }\n        $i++;\n\
    \    }\n    return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor = $i;\n\
    \            $n = $n / $i;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "  $n = abs($n);\n  $i = 1;\n  while ($i <= sqrt($n)) {\n    $n = $i * $n;\n\
    \    $i++;\n  }\n  return $n;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\n\
    This code doesn't work. Try it with `largest_prime_factor(1025)`.\n<|/ c |>\n\
    <| c |>\nIt works fine for me. Try it with `largest_prime_factor(1025)`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for me. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| c |>\nIt works for me on PHP 5.3.10. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| c |>\nIt works for me on PHP 5.3.10. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            $n = $n / $i;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $i =\
    \ $j + 1;\n        } else {\n            $j++;\n        }\n    }\n    return $j;\n\
    }\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= $n) {\n    if ($n % $i == 0)\
    \ {\n      $n = $i + ($n / $i);\n    } else {\n      $i = $i + 1;\n    }\n  }\n\
    \  return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $factor = $i;\n            break;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n      \
    \      $n = $i . $n / $i;\n            $i = 2;\n        } else {\n           \
    \ $i++;\n        }\n    }\n    return $n;\n}\n</code>\n<|/ a tags=php,primes |>\n\
    <| c |>\nThe first two lines of code are unnecessary, and can be replaced with\
    \ `return $n <= 1 ? 1 : $n <= 3 ? 3 : largest_prime_factor($n / 2);`\n<|/ c |>\n\
    <| c |>\n: Yes, but that would not work if `$n` is negative (which it might be).\n\
    <|/ c |>\n<| c |>\n: Yes, but that would not work if `$n` is negative (which it\
    \ might be).\n<|/ c |>\n<| c |>\n: Yes, but that would not work if `$n` is negative\
    \ (which it might be).\n<|/ c |>\n<| c |>\n: Yes, but that would not work if `$n`\
    \ is negative (which it might be).\n<|/ c |>\n<| a dscore=5 |>\n<code>", "   \
    \ $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n\
    \        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $i = 2; $max\
    \ = 2; $max_so_far = $n; $factor = $n; $found = 0; $prime = true;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $found++;\n            if\
    \ ($found == $max) {\n                $max++; $max_so_far = $n;\n            }\n\
    \            $factor = $i;\n            $prime = false;\n        }\n        $i++;\n\
    \    }\n    if ($prime) {\n        return $factor;\n    } else {\n        return\
    \ $max_so_far;\n    }\n}", "    $n = abs($n);\n    $i = 1;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for this. I understand\
    \ it better now. I've been trying to learn PHP by myself and I really appreciate\
    \ your help. I really appreciate your time. Thank you so much!\n<|/ c |>\n<| c\
    \ |>\nNo problem. Glad I could help. If this answer solved your problem, please\
    \ consider marking it as accepted by clicking the check mark next to it.\n<|/\
    \ c |>\n<| c |>\nI did but my reputation is too low for it to show publicly.\n\
    <|/ c |>\n<| c |>\nAh, I see. Thanks for letting me know. :)\n<|/ c |>\n<| a tags=php,primes\
    \ |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine for small numbers but for large numbers it takes too much time to execute.\
    \ Is there any way to optimize it?\n<|/ c |>\n<| c |>\n: I added a faster version.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks a lot. Your code works perfectly for\
    \ large numbers. But it takes too much time to execute for small numbers. Is there\
    \ any way to optimize it?\n<|/ c |>\n<| c |>\n: I added a faster version. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks a lot. Your code works perfectly for large\
    \ numbers. But it takes too much time to execute for small numbers. Is there any\
    \ way to optimize it?\n<|/ c |>\n<| a |>\n<code>\n<?php", "    $n = abs($n);\n\
    \    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $j++;\n        }\n        $i += $j;\n    }\n    return $j;\n}\n", "  \
    \  $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n    \
    \    if ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n \
    \   }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThanks\
    \ so much! I appreciate it!\n<|/ c |>\n<| c |>\nThe code above is wrong. Try it\
    \ with `largest_prime_factor(1025)`. You'll get `3` instead of `5`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/ c |>\n\
    <| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $factor = $i;\n            break;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $n\
    \ / $i;\n      $i++;\n    } else {\n      $i++;\n    }\n  }\n  return $n;\n}",
  "    $n = abs($n);\n    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n)) {\n\
    \        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "  $n = abs($n);\n\
    \  $i = 1;\n  while ($i <= $n) {\n    $i += $n % $i;\n    $n = $n / $i;\n    $i++;\n\
    \  }\n  return $i;\n}\n", "    $n--;\n    do {\n        $n--; // Divide n by 2\n\
    \    } while ($n > 1);\n    return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $i\
    \ . '/' . $n;\n        }\n        $i++;\n    }\n    return $n;\n}", "    $n =\
    \ abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n    \
    \    if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor = $i;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n       \
    \ $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<|\
    \ c |>\nThanks for your answer. Your code works perfectly for small numbers, but\
    \ for large numbers it doesn't work properly. For example, for 13195 it returns\
    \ 3, but for 2048 it returns 2. Do you know why it happens?\n<|/ c |>\n<| c |>\n\
    I tested it with your numbers and it works fine. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.3.8. Maybe you have a typo or\
    \ something?\n<|/ c |>\n<| c |>\nYes, I copied your code exactly. Maybe I should\
    \ try it on another computer. Thanks for your help.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.3.8. Maybe you have a typo or something?\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.10 and PHP 5.3.8. Maybe you have a typo or something?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $n = abs($n);\n    $i = $j =\
    \ 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return $j;\n}\n", "    $n = abs($n);\n \
    \   $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor = $i;\n            break;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "    $i = 2;\n    $max_factor = 1;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $max_factor = $i;\n\
    \        }\n        $i++;\n    }\n    return $max_factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis doesn't seem to work. `largest_prime_factor(13195)` returns `2` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. I tested\
    \ it on PHP 5.2.17 and it works. I tested it on PHP 5.1.6 it works. I tested it\
    \ on PHP 5.3.0 it works. I tested it on PHP 5.2.6 it works. I tested it on PHP\
    \ 5.3.3 it works. I tested it on PHP 5.3.8 it works. I tested it on PHP 5.3.2\
    \ it works. I tested it on PHP 5.3.1 it works. I tested it on PHP 5.3.4 it works.\
    \ I tested it on PHP 5.3.6 it works. I tested it on PHP 5.3.7 it works. I tested\
    \ it on PHP 5.3.9 it works. I tested it on PHP 5.3.10 it works. I tested it on\
    \ PHP 5.3.11 it works. I tested it on PHP 5.3.12 it works. I tested it on PHP\
    \ 5.3.13 it works. I tested it on PHP 5.3.14 it works. I tested it on PHP 5.3.15\
    \ it works. I tested it on PHP 5.3.16 it works. I tested it on PHP 5.3.17 it works.\
    \ I tested it on PHP 5.3.18 it works. I tested it on PHP 5.3.19 it works. I tested\
    \ it on PHP 5.3.20 it works. I tested it on PHP 5.3.21 it works. I tested it on\
    \ PHP 5.3.22 it works. I tested it on PHP 5.3.23 it works. I tested it on PHP\
    \ 5.3.24 it works. I tested it on PHP 5.3.25 it works. I tested it on PHP 5.3.26\
    \ it works. I tested it on PHP 5.3.27 it works. I tested it on PHP 5.3.28 it works.\
    \ I tested it on PHP 5.3.29 it works. I tested it on PHP 5.3.30 it works. I tested\
    \ it on PHP 5.3.31 it works. I tested it on PHP 5.3.32 it works. I tested it on\
    \ PHP 5.3.33 it ", "    $n = abs($n);\n    $i = 2;\n    $factor = 1;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code doesn't work for large\
    \ numbers. Try it with `largest_prime_factor(1000000000)`\n<|/ c |>\n<| c |>\n\
    It works for me on PHP 5.6.29. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.6.29 and it didn't work for me. Try it yourself.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.6.29 and it didn't work for me. Try it yourself.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.6.29 and it didn't work for me. Try it yourself.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n<?php", "    $n = abs($n);\n    $i = $j =\
    \ 2;\n    $max_i = $n - 1;\n    $max_j = 2;\n    while ($i <= $max_i && $j <=\
    \ $max_j) {\n        if ($n % $i == 0) {\n            $i++;\n        }\n     \
    \   if ($n % $j == 0) {\n            $j++;\n        }\n        if ($i % $j ==\
    \ 0) {\n            $j++;\n        }\n        if ($j > $max_j) {\n           \
    \ $max_j = $j;\n        }\n        if ($i > $max_i) {\n            $max_i = $i;\n\
    \        }\n    }\n    return $max_j * pow(2, $max_i);\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $p = 3;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $p = $i;\n        }\n        $i += $p;\n    }\n    return $p;\n}\n\
    </code>\n<|/ a tags=php,primes |>\n<| a dscore=0 |>\n<code>\n<?php", "    $n =\
    \ abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0)\
    \ {\n            $n = $n / $i;\n            $i = $j + 1;\n        } else {\n \
    \           $j++;\n        }\n    }\n    return $j;\n}\n", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i\
    \ . $n / $i;\n      $i++;\n    }\n    else {\n      $i++;\n    }\n  }\n  return\
    \ $n;\n}\n", "    $n = abs($n);\n    $i = 1;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n         \
    \   $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n", " \
    \ $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0)\
    \ {\n      $n = $n / $i;\n      $i = 2;\n    } else {\n      $i++;\n    }\n  }\n\
    \  return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n\
    \        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i =\
    \ $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return $j;\n}\n", "    $i = 2; $prime =\
    \ 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $prime\
    \ = $i;\n            $n = $n / $i;\n        } else {\n            $i++;\n    \
    \    }\n    }\n    return $prime;\n}\n", "    $n = abs($n);\n    $i = 2;\n   \
    \ $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n  \
    \          $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n \
    \   }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nIt does\
    \ provide an answer to the question. He asked \"how do I find the largest prime\
    \ factor of a number?\" and I provided an answer that does exactly that. How is\
    \ that not an answer?\n<|/ c |>\n<| c |>\nThe question was \"how do I find the\
    \ largest prime factor of a number?\" Your answer does not do that. Your answer\
    \ finds the largest prime factor of a number. Your answer does not answer the\
    \ question. Your answer does not explain why your answer works.\n<|/ c |>\n<|\
    \ c |>\nThe question was \"how do I find the largest prime factor of a number?\"\
    \ Your answer does not do that. Your answer finds the largest prime factor of\
    \ a number. Your answer does not answer the question. Your answer does not explain\
    \ why your answer works.\n<|/ c |>\n<| c |>\nThe question was \"how do I find\
    \ the largest prime factor of a number?\" Your answer does not do that. Your answer\
    \ finds the largest prime factor of a number. Your answer does not answer the\
    \ question. Your answer does not explain why your answer works.\n<|/ c |>\n<|\
    \ a dscore=4 |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            break;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThanks so much! I appreciate it!\n\
    <|/ c |>\n<| c |>\nYou're welcome! I hope you enjoy this code! :)\n<|/ c |>\n\
    <| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| c |>\nThanks so much!\
    \ I appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor = $i;\n            break;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n =\
    \ $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n", "    $i = 2;\n    $p = 3;\n    while ($i <= sqrt($n)) {\n  \
    \      if ($n % $i == 0) {\n            $p = $i;\n        }\n        $i += $p;\n\
    \    }\n    return $p;\n}", "  $n = abs($n);\n  $i = 1;\n  while ($i <= sqrt($n))\
    \ {\n    $n = $i * $n;\n    $i++;\n  }\n  return $n;\n}\n", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n    $i += 2;\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i\
    \ = 2;\n    $factor = 2;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0)\
    \ {\n            $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            break;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe first\
    \ part of this answer was very helpful to me. Thanks.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n\
    \    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i = 2;\n    } else {\n \
    \     $i++;\n    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n\
    \            $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <=\
    \ sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    } else {\n\
    \      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i\
    \ = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i ==\
    \ 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n       \
    \ $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n \
    \   $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n      \
    \      $factor = $i;\n            break;\n        }\n        $i++;\n    }\n  \
    \  return $factor;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI like your answer,\
    \ but this doesn't seem to work for me. I'm getting `Fatal error: Call to undefined\
    \ function largest_prime_factor()`\n<|/ c |>\n<| c |>\nYou have to define it yourself.\
    \ I added the function definition to the answer.\n<|/ c |>\n<| c |>\nI added the\
    \ function definition to the answer.\n<|/ c |>\n<| c |>\nI added the function\
    \ definition to the answer.\n<|/ c |>\n<| c |>\nI added the function definition\
    \ to the answer.\n<|/ c |>\n<| a |>\n<code>\n<?php", "    $n = abs($n);\n    $i\
    \ = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $i = 2; $m = $n; $p = 1; $q = $n; $r = $n; $s = $n; $t = $n;\n    while\
    \ ($i <= $m) {\n        while ($n % $i == 0) {\n            $p *= $i; $q *= $i;\
    \ $r *= $i; $s *= $i; $t *= $i;\n            $i++;\n        }\n        if ($p\
    \ > $q) {\n            $m = $p; $p = $q; $q = $r; $r = $s; $s = $t;\n        }\n\
    \    }\n    return $q;\n}", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $i = 2; $s = 2; $d = 2; $r = 1;\n    while ($i <= sqrt($n)) {\n   \
    \     if ($n % $i == 0) {\n            $n = $i . $n / $i;\n            $d = $i\
    \ * $i;\n            $s = $i * $s;\n            $r = $i * $r;\n        }\n   \
    \     $i++;\n    }\n    return $r;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,primes\
    \ |>\n<code>", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i =\
    \ 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "    $i = 2; $p = 1; $q = $n; $m = $n; $factor\
    \ = 1;\n    while ($i <= $m) {\n        if ($n % $i == 0) {\n            $p *=\
    \ $i; $q = $p / $i; $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }", "    $n = abs($n);\n    $i = $j = 2;\n    $max_i = $n;\n    while ($i <= $max_i)\
    \ {\n        if ($n % $i == 0) {\n            $max_i = $i;\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return $j;\n}\n", "    $n = abs($n);\n \
    \   $i = 1;\n    $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0)\
    \ {\n            $factor++;\n            $i++;\n        }\n        else {\n  \
    \          $i++;\n        }\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n--;\n    $i\
    \ = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis doesn't work for me. `largest_prime_factor(13195)`\
    \ returns `3` but `largest_prime_factor(2048)` returns `2`.\n<|/ c |>\n<| c |>\n\
    The code works fine for me on PHP 5.5.9. Are you sure you're using PHP 5.5.9?\
    \ It works fine for me on PHP 5.3.10 as well.\n<|/ c |>\n<| c |>\nYes, I'm sure.\
    \ I'm using PHP 5.3.10. I'm running Ubuntu 12.04 LTS. Maybe it's an issue with\
    \ my version of PHP?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works\
    \ fine. Maybe it's an issue with your version of PHP? Try upgrading to the latest\
    \ version of PHP and see if it works.\n<|/ c |>\n<| c |>\nI upgraded to PHP 5.3.10\
    \ and it still doesn't work. I'm running Ubuntu 12.04 LTS.\n<|/ c |>\n<| a |>\n\
    <code>\n<?php", "    $n--;\n    do {\n        $n--; // Divide by two and discard\
    \ remainder.\n        $f = $n % $n;\n        $n = (int) ($n/$f);\n    } while\
    \ ($n > 1);\n    return $n;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for large numbers. Try `largest_prime_factor(1000000007)`\n<|/ c |>\n<|\
    \ c |>\n: It works for me. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it\
    \ on PHP 5.3.10 and PHP 5.2.17. Both give me `2`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and PHP 5.2.17. Both give me `2`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and PHP 5.2.17. Both give me `2`.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= sqrt($n)) {\n \
    \       if ($n % $i == 0) {\n            $n = $n / $i;\n            $i = $j +\
    \ 1;\n            $j = $i;\n        }\n        else {\n            $i = $i + 1;\n\
    \        }\n    }\n    return $j;\n}\n</code>\n<|/ a tags=php,primes |>\n<| a\
    \ dscore=2 |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 1;\n    $p = 2;\n\
    \    $q = 3;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n          \
    \  $p = $i;\n            while ($n % $p == 0) {\n                $q = $p;\n  \
    \              $p++;\n            }\n            $n = $q;\n        }\n       \
    \ $i++;\n    }\n    return $p;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n \
    \   while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = $j + 1;\n            $j = $j + 1;\n        } else {\n\
    \            $i = $i + 1;\n        }\n    }\n    return $j;\n}\n", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i\
    \ . $n / $i;\n    } else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n",
  "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $n = $n / $i;\n            $i = $j + 1;\n        } else\
    \ {\n            $j++;\n        }\n    }\n    return $j;\n}\n", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i\
    \ . '/' . $n;\n    } else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n",
  "    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i\
    \ == 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n    \
    \    $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $factor = $i;\n            break;\n        }\n        $i++;\n    }\n \
    \   return $factor;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n    } else {\n      $i++;\n\
    \    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n     \
    \       $i = $j + 1;\n        } else {\n            $j++;\n        }\n    }\n\
    \    return $j;\n}\n", "    $n = abs($n);\n    $i = 1;\n    $p = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n        }\n\
    \        $i++;\n    }\n    return $p;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code\
    \ doesn't work for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| a dscore=4 tags=php,primes |>\n<code>", "    $n--;\n    do {\n  \
    \      $n--; // Divide by 2\n        $n--; // Divide by 3\n        $n--; // Divide\
    \ by 5\n        $n--; // Divide by 7\n        $n--; // Divide by 11\n        $n--;\
    \ // Divide by 13\n        $n--; // Divide by 17\n        $n--; // Divide by 19\n\
    \        $n--; // Divide by 23\n        $n--; // Divide by 29\n        $n--; //\
    \ Divide by 31\n        $n--; // Divide by 37\n        $n--; // Divide by 41\n\
    \        $n--; // Divide by 43\n        $n--; // Divide by 47\n        $n--; //\
    \ Divide by 53\n        $n--; // Divide by 59\n        $n--; // Divide by 61\n\
    \        $n--; // Divide by 67\n        $n--; // Divide by 71\n        $n--; //\
    \ Divide by 73\n        $n--; // Divide by 79\n        $n--; // Divide by 83\n\
    \        $n--; // Divide by 89\n        $n--; // Divide by 97\n        $n--; //\
    \ Divide by 101\n        $n--; // Divide by 103\n        $n--; // Divide by 107\n\
    \        $n--; // Divide by 109\n        $n--; // Divide by 113\n        $n--;\
    \ // Divide by 127\n        $n--; // Divide by 131\n        $n--; // Divide by\
    \ 137\n        $n--; // Divide by 139\n        $n--; // Divide by 147\n      \
    \  $n--; // Divide by 151\n        $n--; // Divide by 157\n        $n--; // Divide\
    \ by 163\n        $n--; // Divide by 167\n        $n--; // Divide by 173\n   \
    \     $n--; // Divide by 179\n        $n--; // Divide by 181\n        $n--; //\
    \ Divide by 191\n        $n--; // Divide by 193\n        $n--; // Divide by 197\n\
    \        $n--; // Divide by 199\n        $n--; // Divide by 211\n        $n--;\
    \ // Divide by 223\n        $n--; // Divide by 227\n        $n--; // Divide by\
    \ 229\n        $n--; // Divide by 233\n        $n--; // Divide by 239\n      \
    \  $n--; // Divide by 241\n        $n--; // Divide by 251\n        $n--; // Divide\
    \ by 257\n", "    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n  \
    \      if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $p = 3;\n    while ($i <= sqrt($n)) {\n        if ($n % $i ==\
    \ 0) {\n            $p = $i;\n        }\n        $i += $p;\n    }\n    return\
    \ $p;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i =\
    \ $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n\
    \ = $n / $i;\n            $i = $j + 1;\n        }\n        else {\n          \
    \  $j++;\n        }\n    }\n    return $j;\n}\n", "    $n = abs($n);\n    $i =\
    \ 2;\n    $factor = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $factor = $i;\n            $n = $n / $i;\n        } else {\n    \
    \        $i++;\n        }\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 1;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n       \
    \ $i++;\n    }\n    return $factor;\n}\n", "    $i = 2; $max = 2; $factor = 1;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor = $i;\n\
    \            $max = $i;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i\
    \ == 0) {\n      $n = $n / $i;\n      $i++;\n    } else {\n      $i++;\n    }\n\
    \  }\n  return $n;\n}", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i = 2;\n    } else {\n\
    \      $i++;\n    }\n  }\n  return $n;\n}\n", "    $i = 2; $p = 2; $q = $n; $factor\
    \ = 1;\n    while ($i <= $q) {\n        if ($n % $i == 0) {\n            $n =\
    \ $i . $p . $factor;\n            $factor = 1;\n            $p++;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $n;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe question was about a specific algorithm, not about a general\
    \ algorithm.\n<|/ c |>\n<| c |>\nThe question was about a specific algorithm,\
    \ not about a general algorithm.\n<|/ c |>\n<| c |>\nThe question was about a\
    \ specific algorithm, not about a general algorithm.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a specific algorithm, not about a general algorithm.\n<|/ c |>\n<|\
    \ c |>\nThe question was about a specific algorithm, not about a general algorithm.\n\
    <|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    $n = abs($n);\n   \
    \ $i = 1;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0)\
    \ {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    while ($i <= sqrt($n)) {\n        if\
    \ ($n % $i == 0) {\n            $n = $n / $i;\n            $i = 2;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $n;\n}\n", "    $n =\
    \ abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n    \
    \    if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n      \
    \      $n = $i . '/' . $n;\n            $i++;\n        }\n        else {\n   \
    \         $i++;\n        }\n    }\n    return $n;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThe `sqrt` function doesn't exist in PHP. You'll need to use `sqrt()`.\n\
    <|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= sqrt($n)) {\n        if ($n\
    \ % $i == 0) {\n            $n = $n / $i;\n            $i = $j + 1;\n        \
    \    $j++;\n        }\n        else {\n            $i++;\n        }\n    }\n \
    \   return $j;\n}", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n\
    \    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n    } else {\n      $i =\
    \ $i + 1;\n    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i = 1;\n \
    \   $p = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n           \
    \ $p = $i;\n        }\n        $i++;\n    }\n    return $p;\n}\n", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n    $i += 2;\n  }\n  return $n;\n}\n", "    $i = 2;\n    $p = $n;\n\
    \    while ($p < $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n  \
    \      }\n        $i += 1;\n    }\n    return $p;\n}\n", "  $n = abs($n);\n  $i\
    \ = 1;\n  while ($n % $i == 0) {\n    $i++;\n  }\n  return $i;\n}\n", "    $n\
    \ = abs($n);\n    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n)) {\n  \
    \      if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't seem to work. `largest_prime_factor(13195)` returns\
    \ `2` but `largest_prime_factor(2048)` returns `3`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and it worked fine. Are you sure you copied the code correctly?\
    \ I tested it on PHP 5.3.10 and it worked fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.3.10 and it worked fine. Are you sure you copied the code correctly?\
    \ I tested it on PHP 5.3.10 and it worked fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.3.10 and it worked fine. Are you sure you copied the code correctly?\
    \ I tested it on PHP 5.3.10 and it worked fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.3.10 and it worked fine. Are you sure you copied the code correctly?\
    \ I tested it on PHP 5.3.10 and it worked fine.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if\
    \ ($n % $i == 0) {\n      $n = $i . '/' . $n;\n    } else {\n      $i = $i + 1;\n\
    \    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n            if\
    \ ($j > $i) {\n                $i = $j;\n            }\n        } else {\n   \
    \         $i++;\n        }\n    }\n    return $i;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i =\
    \ 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0)\
    \ {\n            $n = $n / $i;\n            $factor = $i;\n        }\n       \
    \ $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 1;\n \
    \   $s = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n           \
    \ $n = $s / $i;\n            $s = $i;\n            $i++;\n        }\n        else\
    \ {\n            $i++;\n        }\n    }\n    return $s;\n}\n", "  $n = abs($n);\n\
    \  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n    $i += 2;\n  }\n  return $n;\n}\n", "    $i = 2;\n    $p = $n;\n\
    \    while ($p <= $n) {\n        if ($n % $i == 0) {\n            $p = $i * $i;\n\
    \        }\n        $i += 1;\n    }\n    return $n;\n}\n", "    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n          \
    \  $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n  \
    \  return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis doesn't\
    \ seem to work. `largest_prime_factor(13195)` returns `2` instead of `3`.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.6.30 and it works. I edited my answer to\
    \ include a link to the PHP documentation for largest_prime_factor.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.6.30 and it works. I edited my answer to include\
    \ a link to the PHP documentation for largest_prime_factor.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.6.30 and it works. I edited my answer to include a link to\
    \ the PHP documentation for largest_prime_factor.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.6.30 and it works. I edited my answer to include a link to the PHP\
    \ documentation for largest_prime_factor.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php", "    $n = abs($n);\n    $i = 2;\n    $p = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $p = $i;\n        }\n        $i\
    \ += $p;\n    }\n    return $p;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            $n = $n / $i;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n", "    $i = 2; $max = 2; $factor = 2; $factors = [];\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n  \
    \          if ($i > $max) {\n                $max = $i;\n            }\n     \
    \       $i++;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors[count($factors) - 1];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `largest_prime_factor(19)`.\n<|/ c |>\n<| c |>\nIt\
    \ works fine for me. `largest_prime_factor(19)` returns `2`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. But it also returns `2` for `largest_prime_factor(19)`.\n<|/ c |>\n\
    <| c |>\nYes, it does. But it also returns `2` for `largest_prime_factor(19)`.\n\
    <|/ c |>\n<| c |>\nIt returns `2` for `largest_prime_factor(19)` because `19`\
    \ isn't a prime. Try it with `largest_prime_factor(19)`.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n\
    \        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n =\
    \ $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Can\
    \ you please explain me why you used $n = abs($n); ?\n<|/ c |>\n<| c |>\nBecause\
    \ `abs()` returns the absolute value of its argument. `-42` becomes `42`, but\
    \ `-42` becomes `-42`.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you\
    \ please tell me why you used $n = abs($n); ?\n<|/ c |>\n<| c |>\nBecause `abs()`\
    \ returns the absolute value of its argument. `-42` becomes `42`, but `-42` becomes\
    \ `-42`.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you please tell\
    \ me why you used $n = abs($n); ?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  $n = abs($n);\n  $i = 1;\n  while ($i <= $n) {\n    $i += floor($n / $i);\n \
    \   $n = $n % $i;\n  }\n  return $i;\n}\n", "    $n = abs($n);\n    $i = 2;\n\
    \    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i\
    \ . $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n     \
    \   }\n    }\n    return $n;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\n\
    This code doesn't work. Try it with `largest_prime_factor(10)`. You'll get `1`\
    \ instead of `2`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it worked.\
    \ Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it correctly. I'm running PHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built:\
    \ Jul 17 2013 11:58:26).\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it worked.\
    \ Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it correctly. I'm running PHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built:\
    \ Jul 17 2013 11:58:26).\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    $n = $i * $n;\n\
    \    $i++;\n  }\n  return $n;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i\
    \ <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    } else\
    \ {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i =\
    \ 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n          \
    \  $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n  \
    \  return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factor = $i;\n            break;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a |>\n\
    <| a tags=php,primes |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n   \
    \ $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0) {\n          \
    \  $factor = $i;\n            $n = $n / $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $factor;\n}\n", "    $i = 2; $s = 2; $t = 2;\n \
    \   while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $s = $s * $i;\n            $t = $t * $i;\n        }\n   \
    \     $i++;\n    }\n    return $t;\n}\n", "    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code\
    \ will fail for large numbers. For example, `largest_prime_factor(10000000000000000000000000000000)`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, it will. That's why I said\
    \ \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n<| c |>\nYes, I know. That's\
    \ why I said \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n<| c |>\nYes, I know.\
    \ That's why I said \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n<| c |>\n\
    Yes, I know. That's why I said \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    } else {\n      $i\
    \ = $i + 1;\n    }\n  }\n  return $n;\n}\n", "    $i = 2; $max = 2; $max_i = $n;\
    \ $max_n = 1; $max_p = 1; $max_q = 1;\n    while ($i <= $n) {\n        if ($n\
    \ % $i == 0) {\n            $p = $i; $n = $n / $i;\n            $q = $i; $i =\
    \ 2; $max = $max * $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    while ($i <= $max_i) {\n        if ($n % $i == 0) {\n            $p = $i;\
    \ $n = $n / $i;\n            $q = $i; $i = 2; $max = $max * $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    while ($i <= $max_n) {\n       \
    \ if ($n % $i == 0) {\n            $p = $i; $n = $n / $i;\n            $q = $i;\
    \ $i = 2; $max = $max * $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    while ($i <= $max_p) {\n        if ($n % $i == 0) {\n            $p\
    \ = $i; $n = $n / $i;\n            $q = $i; $i = 2; $max = $max * $i;\n      \
    \  } else {\n            $i++;\n        }\n    }\n    while ($i <= $max_q) {\n\
    \        if ($n % $i == 0) {\n            $p = $i; $n = $n / $i;\n           \
    \ $q = $i; $i = 2; $max = $max * $i;\n        } else {\n            $i++;\n  \
    \      }\n    }\n    return $max;\n}", "    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n        } else {\n            $j++;\n        }\n  \
    \  }\n    return $j;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $i = 2;\n    $p = $n;\n    while ($p <= $i) {\n        if ($n % $i\
    \ == 0) {\n            $p = $i;\n        }\n        $i += $p;\n    }\n    return\
    \ $p;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 1;\n    while ($i\
    \ <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n   \
    \         $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n",
  "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n    \
    \    if ($n % $i == 0) {\n            $factor = $i;\n            $n = $n / $i;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $i = 2;\n  \
    \  $p = $n;\n    while ($p > 1) {\n        if ($n % $i == 0) {\n            $p\
    \ = $p / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $p;\n}\n", "    $n = abs($n);\n    $i = 2;\n   \
    \ $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0) {\n          \
    \  $factor++;\n            $n = ($n / $i) + 1;\n        } else {\n           \
    \ $i++;\n        }\n    }\n    return $factor;\n}", "    $n = abs($n);\n    $i\
    \ = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <=\
    \ $n) {\n    if ($n % $i == 0) {\n      $n = $i + ($n / $i);\n    } else {\n \
    \     $i = $i + 2;\n    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i\
    \ = $j = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n      \
    \      $n = $n / $i;\n            $i = $j + 1;\n        } else {\n           \
    \ $j++;\n        }\n    }\n    return $j;\n}\n", "    $n = abs($n);\n    $i =\
    \ 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0)\
    \ {\n            $n = $n / $i;\n            $factor = $i;\n        }\n       \
    \ $i++;\n    }\n    return $factor;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n   \
    \ } else {\n      $i++;\n    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for your answer. Can you please explain how this works?\n<|/ c\
    \ |>\n<| c |>\nThis code will find the largest prime factor of the number passed\
    \ in. For example, `largest_prime_factor(13195)` will return `29` because `29\
    \ = 2^3 * 3 * 5^1`\n<|/ c |>\n<| c |>\nThis code will find the largest prime factor\
    \ of the number passed in. For example, `largest_prime_factor(13195)` will return\
    \ `29` because `29 = 2^3 * 3 * 5^1`\n<|/ c |>\n<| c |>\nThis code will find the\
    \ largest prime factor of the number passed in. For example, `largest_prime_factor(13195)`\
    \ will return `29` because `29 = 2^3 * 3 * 5^1`\n<|/ c |>\n<| c |>\nThis code\
    \ will find the largest prime factor of the number passed in. For example, `largest_prime_factor(13195)`\
    \ will return `29` because `29 = 2^3 * 3 * 5^1`\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n %\
    \ $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return $n;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis doesn't work for me. `largest_prime_factor(13195)`\
    \ returns `29` instead of `3`.\n<|/ c |>\n<| c |>\n: It works for me in PHP 5.3.10.\
    \ Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\n: I tested it on\
    \ PHP 5.3.10 and PHP 5.2.17. Both give me `3`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and PHP 5.2.17. Both give me `3`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and PHP 5.2.17. Both give me `3`.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>\n<?php", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $j++;\n        }\n        $i +=\
    \ $j;\n    }\n    return $j;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            $n = $n / $i;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n", "    $i = 2;\n    $p = $n;\n    while ($p > 1) {\n        if\
    \ ($n % $i == 0) {\n            $p = $p / $i;\n        }\n        $i++;\n    }\n\
    \    return $p;\n}\n", "    $n = abs($n);\n    $i = 1;\n    $factor = 2;\n   \
    \ while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }", "    $n = abs($n);\n    $i = 2;\n    while($i <= sqrt($n)) {\n        if($n\
    \ % $i == 0) {\n            $n = $i . '/' . $n;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    return $n;\n}", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $factor = $i;\n            break;\n        }\n        $i++;\n    }\n \
    \   return $factor;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i = 2;\n    } else {\n\
    \      $i++;\n    }\n  }\n  return $n;\n}", "    $n = abs($n);\n    $i = 2;\n\
    \    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i\
    \ . $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n     \
    \   }\n    }\n    return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            break;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n--;\n    do {\n        $n--; // Divide by 2\n        $n++; // Divide\
    \ by 3\n        $n++; // Divide by 5\n        $n++; // Divide by 7\n        $n++;\
    \ // Divide by 11\n        $n++; // Divide by 13\n        $n++; // Divide by 17\n\
    \        $n++; // Divide by 19\n        $n++; // Divide by 23\n        $n++; //\
    \ Divide by 29\n        $n++; // Divide by 31\n    } while ($n > 1);\n    return\
    \ $n;\n}\n</code>\n<|/ a tags=php,primes,algorithm |>\n<| c |>\nThe algorithm\
    \ is wrong. Try it with 13195 and you'll see that it's wrong.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for pointing out. I've corrected the algorithm.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for pointing out. I've corrected the algorithm.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for pointing out. I've corrected the algorithm.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for pointing out. I've corrected the algorithm.\n<|/ c |>\n<| a\
    \ tags=php,primes,algorithm |>\n<code>\n<?php", "    $i = 2;\n    $p = $n;\n \
    \   while ($p < $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n   \
    \     }\n        $i += 2;\n    }\n    return $p;\n}\n</code>\n<|/ a tags=php,primes\
    \ |>\n<| a tags=php,primes |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php",
  "    $i = 2;\n    $p = $n;\n    while ($p > 1) {\n        if ($n % $i == 0) {\n\
    \            $p = $p / $i;\n        }\n        $i++;\n    }\n    return $p;\n\
    }\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis doesn't work. Try it with\
    \ `largest_prime_factor(1300)`.\n<|/ c |>\n<| c |>\nIt works fine for me with\
    \ 1300 :) It returns 2 as the largest prime factor.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for me with 1300 either. Try it with `largest_prime_factor(1300)`.\n<|/\
    \ c |>\n<| c |>\nIt works for me with 1300 :) It returns 2 as the largest prime\
    \ factor.\n<|/ c |>\n<| c |>\nIt works for me with 1300 :) It returns 2 as the\
    \ largest prime factor.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>", "    $n\
    \ = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n  \
    \      if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor = $i;\n            $n = $n / $i;\n        }\n    \
    \    $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n\
    <| c |>\nThis code does not work for large numbers. For example, `largest_prime_factor(1000000000000)`\
    \ returns `1` instead of `2`.\n<|/ c |>\n<| c |>\nIt works for me on PHP 7.2.17.\
    \ Try it yourself here: https://3v4l.org/7u3Vc\n<|/ c |>\n<| c |>\nIt works for\
    \ me on PHP 7.2.17. Try it yourself here: https://3v4l.org/7u3Vc\n<|/ c |>\n<|\
    \ c |>\nIt works for me on PHP 7.2.17. Try it yourself here: https://3v4l.org/7u3Vc\n\
    <|/ c |>\n<| c |>\nIt works for me on PHP 7.2.17. Try it yourself here: https://3v4l.org/7u3Vc\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n \
    \   }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n =\
    \ $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $j++;\n            if ($j > $i) {\n\
    \                break;\n            }\n        }\n        $i++;\n    }\n    return\
    \ $i;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis code doesn't work. Try it with 13195 and you'll get an infinite loop.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied the\
    \ code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly. Maybe it's my\
    \ PHP version?\n<|/ c |>\n<| c |>\nYes, it works fine for me on PHP 5.3.10. Try\
    \ `echo largest_prime_factor(13195);` on http://writecodeonline.com/php/\n<|/\
    \ c |>\n<| c |>\nOh, I see what's going on. You're using PHP 5.2.17. Try it on\
    \ PHP 5.3.10 and you'll see it works. I guess I'll have to upgrade my PHP version.\
    \ Thanks for your help!\n<|/ c |>\n<| a tags=php,primes |>\n<code>", "    $n =\
    \ abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if\
    \ ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n   \
    \         $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    $n = abs($n);\n\
    \    $i = 1;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if\
    \ ($n % $i == 0) {\n            $j++;\n            if ($j == $i) {\n         \
    \       return $i;\n            }\n        }\n        $i++;\n    }\n    return\
    \ $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $p = 3;\n    while (!($n % $p))\
    \ {\n        $i += $p;\n        $p = $i * $i;\n    }\n    return $i;\n}\n", " \
    \   $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n\
    \        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n       \
    \ $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n \
    \   while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
