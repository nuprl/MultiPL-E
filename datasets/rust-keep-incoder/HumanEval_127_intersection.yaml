name: HumanEval_127_intersection
language: rust
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// intersection((1, 2), (2, 3)) ==> \"NO\"\n/// intersection((-1,\
  \ 1), (0, 4)) ==> \"NO\"\n/// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let mut intervals = vec![interval1, interval2];\n    let mut intervals_len\
    \ = intervals.len();\n    let mut intervals_len2 = intervals_len * intervals_len;\n\
    \    let mut intervals_len3 = intervals_len2 * intervals_len;\n    let mut intervals_len4\
    \ = intervals_len3 * intervals_len;\n    let mut intervals_len5 = intervals_len4\
    \ * intervals_len;\n    let mut intervals_len6 = intervals_len5 * intervals_len;\n\
    \    let mut intervals_len7 = intervals_len6 * intervals_len;\n    let mut intervals_len8\
    \ = intervals_len7 * intervals_len;\n    let mut intervals_len9 = intervals_len8\
    \ * intervals_len;\n    let mut intervals_len10 = intervals_len9 * intervals_len;\n\
    \    let mut intervals_len11 = intervals_len10 * intervals_len;\n    let mut intervals_len12\
    \ = intervals_len11 * intervals_len;\n    let mut intervals_len13 = intervals_len12\
    \ * intervals_len;\n    let mut intervals_len14 = intervals_len13 * intervals_len;\n\
    \    let mut intervals_len15 = intervals_len14 * intervals_len;\n    let mut intervals_len16\
    \ = intervals_len15 * intervals_len;\n    let mut intervals_len17 = intervals_len16\
    \ * intervals_len;\n    let mut intervals_len18 = intervals_len17 * intervals_len;\n\
    \    let mut intervals_len19 = intervals_len18 * intervals_len;\n    let mut intervals_len20\
    \ = intervals_len19 * intervals_len;\n    let mut intervals_len21 = intervals_len20\
    \ * intervals_len;\n    let mut intervals_len22 = intervals_len21 * intervals_len;\n\
    \    let mut intervals_len23 = intervals_len22 * intervals_len;\n    let mut intervals_len24\
    \ = intervals_len23 * intervals_len;\n    let mut intervals_len25 = intervals_len24\
    \ * intervals_len;\n    let mut intervals_len26 = intervals_len25 * intervals_len;\n\
    \    let mut intervals_len27 = intervals_len26 * intervals_len;\n    let mut intervals_len28\
    \ = intervals_len27 * intervals_len;\n    let mut intervals_len29 = intervals_len28\
    \ * intervals_len;\n    let mut intervals_len30 = intervals_len29 * intervals_len;\n\
    \    let mut intervals_len31 = intervals_len30 * interval", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  while interval1_length > 0 || interval2_length > 0 {\n        if interval1_length\
    \ == 0 {\n            interval1_prime = false;\n            interval1_length +=\
    \ 1;\n        }\n        if interval2_length == 0 {\n            interval2_prime\
    \ = false;\n            interval2_length += 1;\n        }\n        if interval1_length\
    \ == interval2_length {\n            if interval1_start == interval2_start {\n\
    \                return \"NO\";\n            }\n            return \"YES\";\n\
    \        }\n        if interval1_length < interval2_length {\n            interval1_length\
    \ += 1;\n        } else {\n            interval2_length += 1;\n        }\n   \
    \ }\n    if interval1_prime && interval2_prime {\n        return \"YES\";\n  \
    \  }\n    return \"NO\";", "    if interval1.start < interval1.end && interval2.start\
    \ < interval2.end {\n        let mut interval = interval1;\n        interval.start\
    \ = interval.end;\n        interval.end = interval.start;\n        interval =\
    \ interval2;\n        interval.start = interval.end;\n        interval.end = interval.start;\n\
    \        let mut interval_len = interval.end - interval.start + 1;\n        let\
    \ mut prime = true;\n        for i in 1..interval_len {\n            if interval_len(i)\
    \ == 1 {\n                prime = false;\n                break;\n           \
    \ }\n        }\n        if prime {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\"\
    ;\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_end < interval2_start {\n        interval1_end\
    \ = interval2_start;\n        interval2_start = interval1_end;\n    }\n    if\
    \ interval1_end < interval2_end {\n        interval1_end = interval2_end;\n  \
    \      interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end == interval2_end {\n        return \"NO\";\n    }\n    let mut\
    \ interval1_length = interval1_end - interval1_start;\n    let mut interval2_length\
    \ = interval2_end - interval2_start;\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\";\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length == interval", "    let mut interval = interval1;\n  \
    \  let mut interval2 = interval2;\n    let mut len = 0;\n    while interval.start\
    \ < interval.end {\n        if interval2.start < interval2.end {\n           \
    \ if interval.start < interval2.start {\n                interval = interval2;\n\
    \                interval2 = interval1;\n            } else {\n              \
    \  interval = interval2;\n                interval2 = interval1;\n           \
    \ }\n        } else {\n            interval = interval2;\n            interval2\
    \ = interval1;\n        }\n        len += 1;\n    }\n    if len % 2 == 0 {\n \
    \       return \"NO\"\n    } else {\n        return \"YES\"\n    }", "    let\
    \ (start, end) = interval1;\n    let (start2, end2) = interval2;\n    if start\
    \ > end {\n        (start, end) = (end, start)\n    }\n    if start2 > end2 {\n\
    \        (start2, end2) = (end2, start2)\n    }\n    if start == start2 && end\
    \ == end2 {\n        return \"NO\"\n    }\n    if start == start2 && end > end2\
    \ {\n        return \"NO\"\n    }\n    if start > start2 && end == end2 {\n  \
    \      return \"NO\"\n    }\n    if start > start2 && end > end2 {\n        let\
    \ mut ans = String::new();\n        let mut i = start;\n        let mut j = end;\n\
    \        let mut k = start2;\n        let mut l = end2;\n        while i <= j\
    \ && k <= l {\n            if i % k == 0 && j % l == 0 {\n                ans.push_str(\"\
    YES\");\n                break;\n            }\n            i += 1;\n        \
    \    k += 1;\n            l += 1;\n        }\n        if i == j && k == l {\n\
    \            ans.push_str(\"NO\");\n        }\n        return ans;\n    }\n  \
    \  return \"NO\"", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n    }\n    if interval2_start > interval2_end {\n        interval2_start\
    \ = interval2_end;\n    }\n    if interval1_start < interval2_start {\n      \
    \  interval1_start = interval2_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n    }\n    if interval1_start < interval1_end\
    \ {\n        return \"NO\";\n    }\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    if interval2_start < interval2_end {\n        intersection_length\
    \ = interval2_end - interval2_start;\n    }\n    if intersection_length == 1 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 2 {\n        if\
    \ interval1_start == interval1_end {\n            return \"YES\";\n        }\n\
    \        if interval2_start == interval2_end {\n            return \"YES\";\n\
    \        }\n    }\n    if intersection_length == 3 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 4 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n    }\n    if intersection_length == 5 {\n     \
    \   if interval1_start == interval1_end {\n            return \"YES\";\n     \
    \   }\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n    }\n    if intersection_length == 6 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 7 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n    }\n    if intersection_length == 8 {\n     \
    \   if interval1_start == interval1_end {\n            return \"YES\";\n     \
    \   }\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n    }\n    if intersection_length == 9 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }", "    let\
    \ mut interval1 = interval1.clone();\n    let mut interval2 = interval2.clone();\n\
    \    let mut intersection = interval1.clone();\n    let mut intersection_length\
    \ = interval1.clone();\n    let mut interval1_length = interval1.clone();\n  \
    \  let mut interval2_length = interval2.clone();\n    let mut interval1_start\
    \ = interval1.clone();\n    let mut interval2_start = interval2.clone();\n   \
    \ let mut interval1_end = interval1.clone();\n    let mut interval2_end = interval2.clone();\n\
    \    let mut interval1_start_end = interval1.clone();\n    let mut interval2_start_end\
    \ = interval2.clone();\n    let mut interval1_start_end_length = interval1.clone();\n\
    \    let mut interval2_start_end_length = interval2.clone();\n    let mut interval1_start_end_start\
    \ = interval1.clone();\n    let mut interval2_start_end_start = interval2.clone();\n\
    \    let mut interval1_start_end_end_length = interval1.clone();\n    let mut\
    \ interval2_start_end_end_length = interval2.clone();\n    let mut interval1_start_end_end_start\
    \ = interval1.clone();\n    let mut interval2_start_end_end_start = interval2.clone();\n\
    \    let mut interval1_start_end_end_end_length = interval1.clone();\n    let\
    \ mut interval2_start_end_end_end_length = interval2.clone();\n    let mut interval1_start_end_end_end_start\
    \ = interval1.clone();\n    let mut interval2_start_end_end_end_start = interval2.clone();\n\
    \    let mut interval1_start_end_end_end_end_length = interval1.clone();\n   \
    \ let mut interval2_start_end_end_end_end_length = interval2.clone();\n    let\
    \ mut interval1_start_end_end_end_end_start = interval1.clone();\n    let mut\
    \ interval2_start_end_end_end_end_start = interval2.clone();\n    let mut interval1_start_end_end_end_end_end_length\
    \ = interval1.clone();\n    let mut interval2_start_end_end_end_end_length = interval2.clone();\n\
    \    let mut interval1_start_end_end_end_end_start_length = interval1.clone();\n\
    \    let mut interval2_start_end_end_end_end_start_length = interval2.clone();\n\
    \    let mut interval1_start_end_end_end_end_start_start = interval1.clone();\n\
    \    let mut interval2_start_end_end_end_end_start_start = interval2.clone();\n\
    \    let mut interval1_start_end_end_end_end_start_start_length = interval1.clone();\n\
    \    let mut interval2_start_end_end_end_end_start_start_length = interval2.clone();\n\
    \    let mut interval1_start_end_end_end_end_start_start_start = interval1.clone();\n\
    \    let mut interval2_start_end_end_end_end_start_start_start = interval2.clone();\n\
    \    let mut interval1_start_end_end_end_end_start_start_start_length = ", " \
    \   if interval1[0] > interval1[1] || interval2[0] > interval2[1] {\n        return\
    \ \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval_length = interval1[1] - interval1[0] + 1;\n    let mut interval2_length\
    \ = interval2[1] - interval2[0] + 1;\n    while interval[0] < interval2[0] {\n\
    \        interval[0] += 1;\n        interval_length += 1;\n    }\n    while interval2[0]\
    \ < interval1[0] {\n        interval2[0] += 1;\n        interval2_length += 1;\n\
    \    }\n    if interval_length == interval2_length {\n        if interval[0] <\
    \ interval2[0] {\n            interval[0] += 1;\n            interval_length +=\
    \ 1;\n        }\n        if interval2[0] < interval1[0] {\n            interval2[0]\
    \ += 1;\n            interval2_length += 1;\n        }\n        if interval_length\
    \ == interval2_length {\n            if interval[0] == interval2[0] {\n      \
    \          return \"YES\";\n            }\n        }\n    }\n    return \"NO\"\
    ;", "    let mut interval1 = interval1.clone();\n    let mut interval2 = interval2.clone();\n\
    \    let mut intersection = interval1.clone();\n    let mut interval1_end = interval1.1;\n\
    \    let mut interval2_end = interval2.1;\n    let mut interval1_start = interval1.0;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval1_len = interval1.1;\n\
    \    let mut interval2_len = interval2.1;\n    let mut interval1_prime = true;\n\
    \    let mut interval2_prime = true;\n    let mut prime = true;\n    loop {\n\
    \        if interval1_end < interval2_start {\n            interval1_end = interval1_end\
    \ + interval1_len;\n            interval1_start = interval1_start - interval1_len;\n\
    \            interval1_len = interval1_end - interval1_start;\n            prime\
    \ = false;\n        }\n        if interval2_end < interval1_start {\n        \
    \    interval2_end = interval2_end + interval2_len;\n            interval2_start\
    \ = interval2_start - interval2_len;\n            interval2_len = interval2_end\
    \ - interval2_start;\n            prime = false;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end = interval1_end - interval1_len;\n\
    \            interval1_start = interval1_start + interval1_len;\n            interval1_len\
    \ = interval1_end - interval1_start;\n            prime = false;\n        }\n\
    \        if interval2_end > interval1_end {\n            interval2_end = interval2_end\
    \ - interval2_len;\n            interval2_start = interval2_start + interval2_len;\n\
    \            interval2_len = interval2_end - interval2_start;\n            prime\
    \ = false;\n        }\n        if prime {\n            intersection = interval1_start..interval1_end;\n\
    \            interval1_prime = false;\n            interval2_prime = false;\n\
    \        }\n        if intersection.iter().any(|&x| x == interval2_start) {\n\
    \            intersection = intersection.iter().filter(|&x| x != interval2_start);\n\
    \            interval1_prime = false;\n            interval2_prime = false;\n\
    \        }\n        if intersection.iter().any(|&x| x == interval1_start) {\n\
    \            intersection = intersection.iter().filter(|&x| x != interval1_start);\n\
    \            interval1_prime = false;\n            interval2_prime = false;\n\
    \        }\n        if intersection.iter().any(|&x| x == interval1_end) {\n  \
    \          intersection = intersection.iter().filter(|&x| x != interval1_end);\n\
    \            interval1_prime = false;\n            interval2_prime = false;\n\
    \        }\n        if intersection.iter().any(|&x| x == interval2_end) {\n  \
    \          intersection = intersection.iter().", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_len = interval1_end - interval1_start;\n    let mut interval1_len\
    \ = interval2_end - interval2_start;\n    let mut interval2_len = interval1_end\
    \ - interval1_start;\n    let mut prime_number: isize = 1;\n    let mut prime_number_len:\
    \ isize = 1;\n    let mut prime_number_flag = true;\n    let mut prime_number_flag2\
    \ = true;\n    let mut prime_number_flag3 = true;\n    let mut prime_number_flag4\
    \ = true;\n    let mut prime_number_flag5 = true;\n    let mut prime_number_flag6\
    \ = true;\n    let mut prime_number_flag7 = true;\n    let mut prime_number_flag8\
    \ = true;\n    let mut prime_number_flag9 = true;\n    let mut prime_number_flag10\
    \ = true;\n    let mut prime_number_flag11 = true;\n    let mut prime_number_flag12\
    \ = true;\n    let mut prime_number_flag13 = true;\n    let mut prime_number_flag14\
    \ = true;\n    let mut prime_number_flag15 = true;\n    let mut prime_number_flag16\
    \ = true;\n    let mut prime_number_flag17 = true;\n    let mut prime_number_flag18\
    \ = true;\n    let mut prime_number_flag19 = true;\n    let mut prime_number_flag20\
    \ = true;\n    let mut prime_number_flag21 = true;\n    let mut prime_number_flag22\
    \ = true;\n    let mut prime_number_flag23 = true;\n    let mut prime_number_flag24\
    \ = true;\n    let mut prime_number_flag25 = true;\n    let mut prime_number_flag26\
    \ = true;\n    let mut prime_number_flag27 = true;\n    let mut prime_number_flag28\
    \ = true;\n    let mut prime_number_flag29 = true;\n    let mut prime_number_flag30\
    \ = true;\n    let mut prime_number_flag31 = true;\n    let mut prime_number_flag32\
    \ = true;\n    let mut prime_number_flag33 = true;\n    let mut prime_number_flag34\
    \ = true;\n    let mut prime_number_flag35 = true;\n    let mut prime_number_flag36\
    \ = true;\n    let mut prime_number_flag37 = true;\n    let mut prime_number_flag38\
    \ = true;\n    let mut prime_number_flag39 = true;", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_found = false;\n    let mut prime_number_found2\
    \ = false;\n    let mut prime_number_found3 = false;\n    let mut prime_number_found4\
    \ = false;\n    let mut prime_number_found5 = false;\n    let mut prime_number_found6\
    \ = false;\n    let mut prime_number_found7 = false;\n    let mut prime_number_found8\
    \ = false;\n    let mut prime_number_found9 = false;\n    let mut prime_number_found10\
    \ = false;\n    let mut prime_number_found11 = false;\n    let mut prime_number_found12\
    \ = false;\n    let mut prime_number_found13 = false;\n    let mut prime_number_found14\
    \ = false;\n    let mut prime_number_found15 = false;\n    let mut prime_number_found16\
    \ = false;\n    let mut prime_number_found17 = false;\n    let mut prime_number_found18\
    \ = false;\n    let mut prime_number_found19 = false;\n    let mut prime_number_found20\
    \ = false;\n    let mut prime_number_found21 = false;\n    let mut prime_number_found22\
    \ = false;\n    let mut prime_number_found23 = false;\n    let mut prime_number_found24\
    \ = false;\n    let mut prime_number_found25 = false;\n    let mut prime_number_found26\
    \ = false;\n    let mut prime_number_found27 = false;\n    let mut prime_number_found28\
    \ = false;\n    let mut prime_number_found29 = false;\n    let mut prime_number_found30\
    \ = false;\n    let mut prime_number_found31 = false;\n    let mut prime_number_found32\
    \ = false;\n    let mut prime_number_found33 = false;\n    let mut prime_number_found34\
    \ = false;\n    let mut prime_number_found35 = false;\n    let mut prime_number_found36\
    \ = false;\n    let mut prime_number_found37 = false;\n    let mut prime_number_found38\
    \ = false;\n    let mut prime_number_found39 = false;\n    let mut prime_number_found40\
    \ = false;\n    let mut prime_number_found41 = false;\n    let mut prime_number_found42\
    \ = false;\n    let mut prime_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_start == interval2_start {\n \
    \       return \"NO\";\n    }\n    if interval1_end == interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start <= interval2_end {\n       \
    \ let mut interval1_length = interval1_end - interval1_start;\n        let mut\
    \ interval2_length = interval2_end - interval2_start;\n        if interval1_length\
    \ == interval2_length {\n            if interval1_length == 1 {\n            \
    \    return \"YES\";\n            }\n            if interval1_length == 2 && interval2_length\
    \ == 2 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 2 && interval2_length == 3 {\n                return \"YES\";\n         \
    \   }\n            if interval1_length == 3 && interval2_length == 3 {\n     \
    \           return \"YES\";\n            }\n            if interval1_length ==\
    \ 3 && interval2_length == 4 {\n                return \"YES\";\n            }\n\
    \            if interval1_length == 4 && interval2_length == 4 {\n           \
    \     return \"YES\";\n            }\n            if interval1_length == 5 &&\
    \ interval2_length == 5 && interval1_length != 2 {\n                return \"\
    YES\";\n            }\n            if interval1_length == 5 && interval2_length\
    \ == 6 && interval1_length != 2 {\n                return \"YES\";\n         \
    \   }\n            if interval1_length == 6 && interval2_length == 6 && interval1_length\
    \ != 2 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 6 && interval2_length == 7 && interval1_length != 2 {\n                return\
    \ \"YES\";\n            }\n            if interval1_length == 7 && interval2_length\
    \ == 7 && interval1_length != 2 {\n                return \"YES\";\n         \
    \   }\n            if interval1_length == 7 && interval2_length == 8 && interval1_length\
    \ != 2 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 8 && interval2_length == 8 && interval1_length != 2 {\n                return\
    \ \"YES\";\n            }\n            if interval1_length == 8 && interval2_length\
    \ == 9 && interval1_length != 2 {\n                return \"YES\";\n         \
    \   }\n            if interval1_length == 9", "    let (start, end) = interval1;\n\
    \    let (end1, end2) = interval2;\n    if start > end {\n        (end, start)\
    \ = (start, end)\n    }\n    if end1 < end2 {\n        (end1, end2) = (end2, end1)\n\
    \    }\n    if start < end1 && end > end2 {\n        return \"NO\"\n    }\n  \
    \  if start < end1 && end < end2 {\n        return \"YES\"\n    }\n    if start\
    \ == end1 && end == end2 {\n        return \"YES\"\n    }\n    if start == end1\
    \ && end > end2 {\n        return \"NO\"\n    }\n    if start > end1 && end ==\
    \ end2 {\n        return \"NO\"\n    }\n    if start > end1 && end < end2 {\n\
    \        return \"YES\"\n    }\n    if start < end1 && end > end2 {\n        return\
    \ \"NO\"\n    }\n    if start < end1 && end < end2 {\n        return \"YES\"\n\
    \    }\n    if start == end1 && end < end2 {\n        return \"NO\"\n    }\n \
    \   if start == end1 && end > end2 {\n        return \"YES\"\n    }\n    if start\
    \ < end1 && end == end2 {\n        return \"YES\"\n    }\n    if start < end1\
    \ && end > end2 {\n        return \"NO\"\n    }\n    if start < end1 && end <\
    \ end2 {\n        return \"NO\"\n    }\n    if start == end1 && end < end2 {\n\
    \        return \"YES\"\n    }\n    if start == end1 && end > end2 {\n       \
    \ return \"NO\"\n    }\n    if start < end1 && end == end2 {\n        return \"\
    NO\"\n    }\n    if start < end1 && end > end2 {\n        return \"YES\"\n   \
    \ }\n    if start == end1 && end < end2 {\n        return \"YES\"\n    }\n   \
    \ if start == end1 && end > end2 {\n        return \"NO\"\n    }\n    if start\
    \ < end1 && end == end2 {\n        return \"YES\"\n    }\n    if start < end1\
    \ && end > end2 {\n        return \"NO\"\n    }\n    if start == end1 && end <\
    \ end2 {\n        return \"NO\"\n    }\n    if start == end1 && end > end2 {\n\
    \        return \"YES\"\n    }\n    if start < end1 && end == end2 {\n       \
    \ return \"NO\"\n    }\n    if start < end1 && end > end2 {\n        return \"\
    YES\"\n    }\n    if start == end1 && end < end2 {\n        return \"YES\"\n \
    \   }\n    if start == end1 && end > end2 {\n        return \"NO\"\n    }\n  \
    \  if start < end1 && end == end2 {\n        return \"NO\"\n    }\n    if start\
    \ < end1 && end > end2 {\n        return \"YES\"", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval2_start > interval1_end {\n        interval2_start, interval2_end\
    \ = interval1_end, interval2_start;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n \
    \       return \"NO\";\n    }\n\n    if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start\
    \ >= interval2_start && interval1_end <= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1.0;\n    let mut interval1_end\
    \ = interval1.1;\n    let mut interval2_start = interval2.0;\n    let mut interval2_end\
    \ = interval2.1;\n    let mut intersection_start = interval1_start;\n    let mut\
    \ intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut interval1_prime = true;\n    let mut interval2_prime\
    \ = true;\n    \n    while intersection_start <= intersection_end {\n        while\
    \ interval1_start <= interval1_end {\n            while interval2_start <= interval2_end\
    \ {\n                if intersection_start == intersection_end {\n           \
    \         intersection_prime = true;\n                    break;\n           \
    \     }\n                \n                if intersection_start == interval1_end\
    \ {\n                    interval1_prime = false;\n                    break;\n\
    \                }\n                \n                if intersection_start ==\
    \ interval2_end {\n                    interval2_prime = false;\n            \
    \        break;\n                }\n                \n                if intersection_start\
    \ == intersection_end {\n                    intersection_prime = true;\n    \
    \                break;\n                }\n                \n               \
    \ if intersection_start == interval1_end {\n                    interval1_prime\
    \ = false;\n                    break;\n                }\n                \n\
    \                if intersection_start == interval2_end {\n                  \
    \  interval2_prime = false;\n                    break;\n                }\n \
    \               \n                if intersection_start == intersection_end {\n\
    \                    intersection_prime = true;\n                    break;\n\
    \                }\n                \n                if intersection_start ==\
    \ interval1_end {\n                    interval1_prime = false;\n            \
    \        break;\n                }\n                \n                if intersection_start\
    \ == interval2_end {\n                    interval2_prime = false;\n         \
    \           break;\n                }\n                \n                if intersection_start\
    \ == intersection_end {\n                    intersection_prime = true;\n    \
    \                break;\n                }\n                \n               \
    \ if intersection_start == interval1_end {\n                    interval1_prime\
    \ = false;\n                    break;\n                }\n                \n\
    \                if intersection_start == interval2_end {\n                  \
    \  interval2_prime = false;\n                    break;\n                }\n \
    \               \n                if intersection_start == intersection_end {\n\
    \                    intersection_prime = true;\n                    break;\n\
    \                }\n                \n                if intersection_start ==\
    \ interval1_end {\n                    interval1_prime = false;\n            \
    \        break;\n                }\n                \n                if intersection_start\
    \ == interval2_end {\n                    interval2_prime = false;\n         \
    \           break;\n                }\n                \n                if intersection_start\
    \ == intersection_end {\n                    intersection_prime = true;\n    \
    \                break;\n                }\n                \n               \
    \ if intersection_start == interval1_end {\n                    interval1_prime\
    \ = false;\n                    break;\n                }\n                \n\
    \                if intersection_start == interval2_end {\n                  \
    \  interval2_prime = false;\n                    break;", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found\
    \ = false;\n    \n    while prime_number_found == false {\n        if interval1_start\
    \ <= interval2_end {\n            if interval2_start <= interval1_end {\n    \
    \            if interval1_start <= intersection_end && intersection_end <= interval2_end\
    \ {\n                    intersection_length = intersection_end - intersection_start;\n\
    \                    interval1_length = interval1_end - interval1_start;\n   \
    \                 interval2_length = interval2_end - interval2_start;\n      \
    \              prime_number = 1;\n                    prime_number_found = true;\n\
    \                } else {\n                    intersection_start = intersection_end;\n\
    \                    intersection_end = interval1_end;\n                    intersection_length\
    \ = intersection_end - intersection_start;\n                    interval1_length\
    \ = interval1_end - interval1_start;\n                    interval2_length = interval2_end\
    \ - interval2_start;\n                    prime_number = 1;\n                \
    \    prime_number_found = true;\n                }\n            } else {\n   \
    \             intersection_start = intersection_end;\n                intersection_end\
    \ = interval2_end;\n                intersection_length = intersection_end - intersection_start;\n\
    \                interval1_length = interval1_end - interval1_start;\n       \
    \         interval2_length = interval2_end - interval2_start;\n              \
    \  prime_number = 1;\n                prime_number_found = true;\n           \
    \ }\n        } else {\n            intersection_start = intersection_end;\n  \
    \          intersection_end = interval2_end;\n            intersection_length\
    \ = intersection_end - intersection_start;\n            interval1_length = interval1_end\
    \ - interval1_start;\n            interval2_length = interval2_end - interval2_start;\n\
    \            prime_number = 1;\n            prime_number_found = true;\n     \
    \   }\n    }\n    \n    if prime_number_found == true {\n        if intersection_length\
    \ == prime_number {\n            return \"YES\";\n        } else {\n         \
    \   return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }", " \
    \   let mut interval1_start = interval1.0;\n    let mut interval1_end = interval1.1;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval2_end = interval2.1;\n\
    \    let mut intersection_length = interval1_end - interval1_start;\n    let mut\
    \ prime_number: isize = 0;\n    let mut prime_number_found = false;\n    \n  \
    \  while prime_number_found == false {\n        if interval1_start < interval2_end\
    \ {\n            if interval1_end < interval2_start {\n                prime_number_found\
    \ = true;\n                prime_number = interval1_end - interval2_start;\n \
    \           } else {\n                prime_number_found = true;\n           \
    \     prime_number = interval1_end - interval1_start;\n            }\n       \
    \ } else {\n            if interval1_end < interval2_start {\n               \
    \ prime_number_found = true;\n                prime_number = interval2_end - interval1_start;\n\
    \            } else {\n                prime_number_found = true;\n          \
    \      prime_number = interval2_end - interval2_start;\n            }\n      \
    \  }\n        \n        intersection_length += prime_number;\n        interval1_start\
    \ += prime_number;\n        interval1_end += prime_number;\n        interval2_start\
    \ += prime_number;\n        interval2_end += prime_number;\n    }\n    \n    if\
    \ prime_number_found == true {\n        if intersection_length == prime_number\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n    let mut intersection_length\
    \ = 0;\n    let mut interval1_length = interval1_end - interval1_start;\n    let\
    \ mut interval2_length = interval2_end - interval2_start;\n    while interval1_length\
    \ >= interval2_length {\n        interval1_length -= interval2_length;\n     \
    \   interval2_length += interval1_length;\n    }\n    while interval2_length >=\
    \ interval1_length {\n        interval2_length -= interval1_length;\n        interval1_length\
    \ += interval2_length;\n    }\n    while interval1_start <= interval2_end {\n\
    \        intersection_length += 1;\n        interval1_start += interval1_length;\n\
    \        interval1_length -= interval1_length;\n        interval2_start += interval2_length;\n\
    \        interval2_length -= interval2_length;\n    }\n    if interval1_length\
    \ == 0 {\n        return \"NO\".to_string();\n    }\n    if interval2_length ==\
    \ 0 {\n        return \"NO\".to_string();\n    }\n    if intersection_length ==\
    \ 0 {\n        return \"NO\".to_string();\n    }\n    if intersection_length ==\
    \ 1 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 3 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 4 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 5 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 6 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 7 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 8 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 9 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 10 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 11 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 12 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 13 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 14 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 15 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 16 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 17 {\n        return \"YES\".to_string();\n    }\n    if intersection_length\
    \ == 18 {\n        return \"YES\".to_string();\n    }\n    if intersection", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_start > interval2_end {\n      \
    \  intersection_start = interval1_end;\n        intersection_end = interval2_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        intersection_start =\
    \ interval1_start;\n        intersection_end = interval2_end;\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    if interval1_start < interval1_end {\n                return \"NO\";\n  \
    \          }\n            return \"YES\";\n        }\n        return \"NO\";\n\
    \    }\n    if interval2_start == interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_start < interval1_end {\n        if interval2_start\
    \ < interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_start < interval2_end {\n        if interval2_start\
    \ < interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ < interval1_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_start == interval2_end {\n        if interval1_end\
    \ < interval1_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_end < interval2_end {\n        if interval2_end\
    \ < interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_end < interval2_start {\n        if interval2_start\
    \ < interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_end == interval2_start {\n        if interval1_end\
    \ < interval1_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval2_start > interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n  \
    \      return \"NO\";\n    }\n    if interval2_start == interval2_end {\n    \
    \    return \"NO\";\n    }\n    if interval1_start < interval2_start {\n     \
    \   return \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_start < interval1_end {\n        return \"\
    NO\";\n    }\n    if interval2_start < interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_start {\n        return \"NO\";\n    }\n\
    \    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start < interval2_start {\n        return \"NO\";\n    }\n    if interval1_end\
    \ > interval2_end {\n        return \"NO\";\n    }\n    if interval1_start < interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval2_start < interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n    \
    \    return \"NO\";\n    }\n    if interval1_start == interval2_start {\n    \
    \    return \"NO\";\n    }\n    if interval1_end == interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_start < interval2_start {\n        return \"\
    NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\";\n\
    \    }\n    if interval1_start < interval1_end {\n        return \"NO\";\n   \
    \ }\n    if interval2_start < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_start {\n        return \"NO\";\n    }\n\
    \    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start ", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n    let mut\
    \ interval1_length = interval1_end - interval1_start + 1;\n    let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n    let mut intersection_length = interval1_length\
    \ + interval2_length;\n    if interval1_length == interval2_length {\n       \
    \ if interval1_start < interval2_start {\n            intersection_length = interval1_length\
    \ + 1;\n        } else {\n            intersection_length = interval2_length +\
    \ 1;\n        }\n    }\n    if intersection_length == 2 {\n        if interval1_start\
    \ < interval2_start {\n            return \"YES\";\n        } else {\n       \
    \     return \"NO\";\n        }\n    }\n    if intersection_length == 1 {\n  \
    \      if interval1_start < interval2_start {\n            return \"NO\";\n  \
    \      } else {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if intersection_length == interval1_length\
    \ {\n        return \"YES\";\n    }\n    if intersection_length == interval2_length\
    \ {\n        return \"NO\";\n    }", "    if interval1[0] > interval1[1] || interval2[0]\
    \ > interval2[1] {\n        return \"NO\";\n    }\n    let mut intersection =\
    \ interval1;\n    let mut interval1_length = interval1[1] - interval1[0] + 1;\n\
    \    let mut interval2_length = interval2[1] - interval2[0] + 1;\n    let mut\
    \ prime = true;\n    while intersection[0] < intersection[1] {\n        if interval1_length\
    \ == interval2_length {\n            prime = false;\n            break;\n    \
    \    }\n        if interval1_length < interval2_length {\n            intersection[0]\
    \ += 1;\n            interval1_length += 1;\n        } else {\n            intersection[1]\
    \ += 1;\n            interval2_length += 1;\n        }\n    }\n    if prime {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval2_start > interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n  \
    \      return \"NO\";\n    }\n    if interval2_start == interval2_end {\n    \
    \    return \"NO\";\n    }\n    if interval1_start < interval2_start {\n     \
    \   return \"NO\";\n    }\n    if interval1_start < interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if interval1_end\
    \ < interval2_end {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_end < interval2_end {\n      \
    \  return \"NO\";\n    }\n    if interval1_end == interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_end < interval2_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_end < interval2_end {\n        return \"NO\";\n    }\n    if interval1_end\
    \ == interval2_end {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_end == interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_end ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval1_end\
    \ {\n        return \"NO\";\n    }\n    let mut intersection_length = 0;\n   \
    \ let mut interval1_length = interval1_end - interval1_start;\n    let mut interval2_length\
    \ = interval2_end - interval2_start;\n    while interval1_length >= interval2_length\
    \ {\n        intersection_length += 1;\n        interval1_length -= 1;\n     \
    \   interval2_length -= 1;\n    }\n    if interval1_length == 0 {\n        return\
    \ \"NO\";\n    }\n    if interval2_length == 0 {\n        return \"NO\";\n   \
    \ }\n    if intersection_length == 0 {\n        return \"NO\";\n    }\n    if\
    \ intersection_length == 1 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 2 {\n        return \"YES\";\n    }\n    if intersection_length == 3 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 4 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 5 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 6 {\n        return \"YES\";\n    }\n  \
    \  if intersection_length == 7 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 8 {\n        return \"YES\";\n    }\n    if intersection_length == 9 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 10 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 11 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 12 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 13 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 14 {\n        return \"YES\";\n    }\n    if intersection_length == 15 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 16 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 17 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 18 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 19 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 20 {\n        return \"YES\";\n    }\n    if intersection_length == 21 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 22 {\n        return\
    \ \"YES\";\n    }\n    if intersection_", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ intersection = interval1;\n    let mut interval1_end = interval1[1];\n    let\
    \ mut interval2_end = interval2[1];\n    let mut interval1_start = interval1[0];\n\
    \    let mut interval2_start = interval2[0];\n    while interval1_end < interval2_start\
    \ {\n        intersection = (interval1_end, interval2_end);\n        interval1_end\
    \ = interval1_end + 1;\n        interval2_end = interval2_end + 1;\n    }\n  \
    \  while interval1_start < interval2_end {\n        intersection = (interval1_start,\
    \ interval2_end);\n        interval1_start = interval1_start + 1;\n        interval2_end\
    \ = interval2_end + 1;\n    }\n    if interval1_start == interval1_end && interval2_start\
    \ == interval2_end {\n        return \"YES\";\n    }\n    if interval1_start ==\
    \ interval1_end {\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if intersection[0] == intersection[1]\
    \ {\n        return \"NO\";\n    }\n    if intersection[0] % 2 == 0 {\n      \
    \  return \"NO\";\n    }\n    if intersection[1] % 2 == 0 {\n        return \"\
    NO\";\n    }\n    if intersection[0] % 3 == 0 && intersection[1] % 3 == 0 {\n\
    \        return \"YES\";\n    }\n    if intersection[0] % 3 == 0 && intersection[1]\
    \ % 3 == 1 {\n        return \"NO\";\n    }\n    if intersection[0] % 3 == 1 &&\
    \ intersection[1] % 3 == 0 {\n        return \"NO\";\n    }\n    if intersection[0]\
    \ % 3 == 1 && intersection[1] % 3 == 1 {\n        return \"YES\";\n    }\n   \
    \ if intersection[0] % 5 == 0 && intersection[1] % 5 == 0 {\n        return \"\
    YES\";\n    }\n    if intersection[0] % 5 == 0 && intersection[1] % 5 == 1 {\n\
    \        return \"NO\";\n    }\n    if intersection[0] % 5 == 1 && intersection[1]\
    \ % 5 == 0 {\n        return \"NO\";\n    }\n    if intersection[0] % 5 == 1 &&\
    \ intersection[1] % 5 == 1 {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;", "    let (start, end) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start > end {\n        (start, end) = (end, start)\n    }\n    if start2\
    \ > end2 {\n        (start2, end2) = (end2, start2)\n    }\n    if start == start2\
    \ && end == end2 {\n        return \"NO\"\n    }\n    let mut prime = true;\n\
    \    let mut prime2 = true;\n    let mut prime3 = true;\n    let mut prime4 =\
    \ true;\n    let mut prime5 = true;\n    let mut prime6 = true;\n    let mut prime7\
    \ = true;\n    let mut prime8 = true;\n    let mut prime9 = true;\n    let mut\
    \ prime10 = true;\n    let mut prime11 = true;\n    let mut prime12 = true;\n\
    \    let mut prime13 = true;\n    let mut prime14 = true;\n    let mut prime15\
    \ = true;\n    let mut prime16 = true;\n    let mut prime17 = true;\n    let mut\
    \ prime18 = true;\n    let mut prime19 = true;\n    let mut prime20 = true;\n\
    \    let mut prime21 = true;\n    let mut prime22 = true;\n    let mut prime23\
    \ = true;\n    let mut prime24 = true;\n    let mut prime25 = true;\n    let mut\
    \ prime26 = true;\n    let mut prime27 = true;\n    let mut prime28 = true;\n\
    \    let mut prime29 = true;\n    let mut prime30 = true;\n    let mut prime31\
    \ = true;\n    let mut prime32 = true;\n    let mut prime33 = true;\n    let mut\
    \ prime34 = true;\n    let mut prime35 = true;\n    let mut prime36 = true;\n\
    \    let mut prime37 = true;\n    let mut prime38 = true;\n    let mut prime39\
    \ = true;\n    let mut prime40 = true;\n    let mut prime41 = true;\n    let mut\
    \ prime42 = true;\n    let mut prime43 = true;\n    let mut prime44 = true;\n\
    \    let mut prime45 = true;\n    let mut prime46 = true;\n    let mut prime47\
    \ = true;\n    let mut prime48 = true;\n    let mut prime49 = true;\n    let mut\
    \ prime50 = true;\n    let mut prime51 = true;\n    let mut prime52 = true;\n\
    \    let mut prime53 = true;\n    let mut prime54 = true;\n    let mut prime55\
    \ = true;\n    let mut prime56 = true;\n    let mut prime57 = true;\n    let mut\
    \ prime58 = true;\n    let mut prime59 = true;\n    let mut prime60 = true;\n\
    \    let mut prime61 = true;\n    let mut prime62 = true;", "    let mut interval1\
    \ = interval1.clone();\n    let mut interval2 = interval2.clone();\n    let mut\
    \ intersection = interval1.clone();\n    let mut intersection_length = interval1.clone();\n\
    \    let mut interval1_length = interval1.clone();\n    let mut interval2_length\
    \ = interval2.clone();\n    let mut prime_numbers = vec![false; interval1.len()];\n\
    \    let mut prime_numbers_length = vec![false; interval1.len()];\n    let mut\
    \ prime_numbers_length = vec![false; interval1.len()];\n    let mut prime_numbers_length\
    \ = vec![false; interval1.len()];\n    let mut prime_numbers_length = vec![false;\
    \ interval1.len()];\n    let mut prime_numbers_length = vec![false; interval1.len()];\n\
    \    let mut prime_numbers_length = vec![false; interval1.len()];\n    let mut\
    \ prime_numbers_length = vec![false; interval1.len()];\n    let mut prime_numbers_length\
    \ = vec![false; interval1.len()];\n    let mut prime_numbers_length = vec![false;\
    \ interval1.len()];\n    let mut prime_numbers_length = vec![false; interval1.len()];\n\
    \    let mut prime_numbers_length = vec![false; interval1.len()];\n    let mut\
    \ prime_numbers_length = vec![false; interval1.len()];\n    let mut prime_numbers_length\
    \ = vec![false; interval1.len()];\n    let mut prime_numbers_length = vec![false;\
    \ interval1.len()];\n    let mut prime_numbers_length = vec![false; interval1.len()];\n\
    \    let mut prime_numbers_length = vec![false; interval1.len()];\n    let mut\
    \ prime_numbers_length = vec![false; interval1.len()];\n    let mut prime_numbers_length\
    \ = vec![false; interval1.len()];\n    let mut prime_numbers_length = vec![false;\
    \ interval1.len()];\n    let mut prime_numbers_length = vec![false; interval1.len()];\n\
    \    let mut prime_numbers_length = vec![false; interval1.len()];\n    let mut\
    \ prime_numbers_length = vec![false; interval1.len()];\n    let mut prime_numbers_length\
    \ = vec![false; interval1.len()];\n    let mut prime_numbers_length = vec![false;\
    \ interval1.len()];\n    let mut prime_numbers_length = vec![false; interval1.len()];\n\
    \    let mut prime_numbers_length = vec![false; interval1.", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut interval = interval1;\n        interval.0 = interval.1;\n   \
    \     interval.1 = interval.0;\n        let mut interval2 = interval2;\n     \
    \   interval2.0 = interval2.1;\n        interval2.1 = interval2.0;\n        let\
    \ mut count = 0;\n        let mut prime = true;\n        for &(start, end) in\
    \ &interval {\n            if start > end {\n                return \"NO\";\n\
    \            }\n            for &(start, end) in &interval2 {\n              \
    \  if start > end {\n                    return \"NO\";\n                }\n \
    \               if start == end {\n                    count++;\n            \
    \    }\n            }\n        }\n        if count % 2 == 0 {\n            return\
    \ \"NO\";\n        }\n        if count == 2 {\n            return \"YES\";\n \
    \       }\n        if count == 3 {\n            return \"YES\";\n        }\n \
    \       if count == 4 {\n            return \"YES\";\n        }\n        if count\
    \ == 5 {\n            return \"YES\";\n        }\n        if count == 6 {\n  \
    \          return \"YES\";\n        }\n        if count == 7 {\n            return\
    \ \"YES\";\n        }\n        if count == 8 {\n            return \"YES\";\n\
    \        }\n        if count == 9 {\n            return \"YES\";\n        }\n\
    \        if count == 10 {\n            return \"YES\";\n        }\n        if\
    \ count == 11 {\n            return \"YES\";\n        }\n        if count == 12\
    \ {\n            return \"YES\";\n        }\n        if count == 13 {\n      \
    \      return \"YES\";\n        }\n        if count == 14 {\n            return\
    \ \"YES\";\n        }\n        if count == 15 {\n            return \"YES\";\n\
    \        }\n        if count == 16 {\n            return \"YES\";\n        }\n\
    \        if count == 17 {\n            return \"YES\";\n        }\n        if\
    \ count == 18 {\n            return \"YES\";\n        }\n        if count == 19\
    \ {\n            return \"YES\";\n        }\n        if count == 20 {\n      \
    \      return \"YES\";\n        }\n        if count == 21 {\n            return\
    \ \"YES\";\n        }\n        if count == 22 {\n            return \"YES\";\n\
    \        }\n        if count == 23 {\n            return \"YES\";\n        }\n\
    \        if count == 24 {\n            return \"YES\";\n        }\n        if\
    \ count == 25 {\n            return \"YES\";\n        }\n        if count == 26\
    \ {\n            return \"YES\";\n        }\n        if count == 27 {\n      \
    \      return \"YES\";\n        }\n        if count == 28 {\n            return\
    \ \"YES\";\n        }\n        if count == 29 {\n            return \"YES\";\n\
    \        }\n        if count == 30 {\n            return \"YES\";\n        }\n\
    \        if count == 31 {\n            return \"YES\";\n        }\n        if\
    \ count == 32 {\n            return \"YES\";\n        }\n        if count == 33\
    \ {\n", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_len = interval1_end\
    \ - interval1_start;\n    let mut prime_number: isize = 1;\n    let mut prime_number_len:\
    \ isize = 1;\n    let mut prime_number_flag = true;\n    let mut prime_number_flag2\
    \ = true;\n    let mut prime_number_flag3 = true;\n    let mut prime_number_flag4\
    \ = true;\n    let mut prime_number_flag5 = true;\n    let mut prime_number_flag6\
    \ = true;\n    let mut prime_number_flag7 = true;\n    let mut prime_number_flag8\
    \ = true;\n    let mut prime_number_flag9 = true;\n    let mut prime_number_flag10\
    \ = true;\n    let mut prime_number_flag11 = true;\n    let mut prime_number_flag12\
    \ = true;\n    let mut prime_number_flag13 = true;\n    let mut prime_number_flag14\
    \ = true;\n    let mut prime_number_flag15 = true;\n    let mut prime_number_flag16\
    \ = true;\n    let mut prime_number_flag17 = true;\n    let mut prime_number_flag18\
    \ = true;\n    let mut prime_number_flag19 = true;\n    let mut prime_number_flag20\
    \ = true;\n    let mut prime_number_flag21 = true;\n    let mut prime_number_flag22\
    \ = true;\n    let mut prime_number_flag23 = true;\n    let mut prime_number_flag24\
    \ = true;\n    let mut prime_number_flag25 = true;\n    let mut prime_number_flag26\
    \ = true;\n    let mut prime_number_flag27 = true;\n    let mut prime_number_flag28\
    \ = true;\n    let mut prime_number_flag29 = true;\n    let mut prime_number_flag30\
    \ = true;\n    let mut prime_number_flag31 = true;\n    let mut prime_number_flag32\
    \ = true;\n    let mut prime_number_flag33 = true;\n    let mut prime_number_flag34\
    \ = true;\n    let mut prime_number_flag35 = true;\n    let mut prime_number_flag36\
    \ = true;\n    let mut prime_number_flag37 = true;\n    let mut prime_number_flag38\
    \ = true;\n    let mut prime_number_flag39 = true;\n    let mut prime_number_flag40\
    \ = true;\n    let mut prime_number_flag41 = true;\n    let mut prime", "    if\
    \ interval1.start <= interval1.end && interval2.start <= interval2.end {\n   \
    \     let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        interval.start += 1;\n      \
    \  interval.end -= 1;\n        \n        let mut interval2 = interval2;\n    \
    \    interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        interval2.start += 1;\n        interval2.end -= 1;\n        \n      \
    \  let mut interval = interval;\n        interval.start = interval.end;\n    \
    \    interval.end = interval.start;\n        interval.start += 1;\n        interval.end\
    \ -= 1;\n        \n        let mut interval2 = interval2;\n        interval2.start\
    \ = interval2.end;\n        interval2.end = interval2.start;\n        interval2.start\
    \ += 1;\n        interval2.end -= 1;\n        \n        let mut interval = interval;\n\
    \        interval.start = interval.end;\n        interval.end = interval.start;\n\
    \        interval.start += 1;\n        interval.end -= 1;\n        \n        let\
    \ mut interval2 = interval2;\n        interval2.start = interval2.end;\n     \
    \   interval2.end = interval2.start;\n        interval2.start += 1;\n        interval2.end\
    \ -= 1;\n        \n        let mut interval = interval;\n        interval.start\
    \ = interval.end;\n        interval.end = interval.start;\n        interval.start\
    \ += 1;\n        interval.end -= 1;\n        \n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        interval2.start += 1;\n        interval2.end -= 1;\n        \n      \
    \  let mut interval = interval;\n        interval.start = interval.end;\n    \
    \    interval.end = interval.start;\n        interval.start += 1;\n        interval.end\
    \ -= 1;\n        \n        let mut interval2 = interval2;\n        interval2.start\
    \ = interval2.end;\n        interval2.end = interval2.start;\n        interval2.start\
    \ += 1;\n        interval2.end -= 1;\n        \n        let mut interval = interval;\n\
    \        interval.start = interval.end;\n        interval.end = interval.start;\n\
    \        interval.start += 1;\n        interval.end -= 1;\n        \n        let\
    \ mut interval2 = interval2;\n        interval2.start = interval2.end;\n     \
    \   interval2.end = interval2.start;\n        interval2.start += 1;\n        interval2.end\
    \ -= 1;\n        \n        let mut interval = interval;\n        interval.start\
    \ = interval.end;\n        interval.end = interval.start;\n        interval.start\
    \ += 1;\n        interval.end -= 1;\n        \n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n", "    let (start, end) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start > end {\n        let tmp =\
    \ start;\n        start = end;\n        end = tmp;\n    }\n    if start2 > end2\
    \ {\n        let tmp = start2;\n        start2 = end2;\n        end2 = tmp;\n\
    \    }\n    if start > start2 {\n        return \"NO\";\n    }\n    if end < end2\
    \ {\n        return \"NO\";\n    }\n    let mut prime = true;\n    let mut prime2\
    \ = true;\n    let mut prime3 = true;\n    let mut prime4 = true;\n    let mut\
    \ prime5 = true;\n    let mut prime6 = true;\n    let mut prime7 = true;\n   \
    \ let mut prime8 = true;\n    let mut prime9 = true;\n    let mut prime10 = true;\n\
    \    let mut prime11 = true;\n    let mut prime12 = true;\n    let mut prime13\
    \ = true;\n    let mut prime14 = true;\n    let mut prime15 = true;\n    let mut\
    \ prime16 = true;\n    let mut prime17 = true;\n    let mut prime18 = true;\n\
    \    let mut prime19 = true;\n    let mut prime20 = true;\n    let mut prime21\
    \ = true;\n    let mut prime22 = true;\n    let mut prime23 = true;\n    let mut\
    \ prime24 = true;\n    let mut prime25 = true;\n    let mut prime26 = true;\n\
    \    let mut prime27 = true;\n    let mut prime28 = true;\n    let mut prime29\
    \ = true;\n    let mut prime30 = true;\n    let mut prime31 = true;\n    let mut\
    \ prime32 = true;\n    let mut prime33 = true;\n    let mut prime34 = true;\n\
    \    let mut prime35 = true;\n    let mut prime36 = true;\n    let mut prime37\
    \ = true;\n    let mut prime38 = true;\n    let mut prime39 = true;\n    let mut\
    \ prime40 = true;\n    let mut prime41 = true;\n    let mut prime42 = true;\n\
    \    let mut prime43 = true;\n    let mut prime44 = true;\n    let mut prime45\
    \ = true;\n    let mut prime46 = true;\n    let mut prime47 = true;\n    let mut\
    \ prime48 = true;\n    let mut prime49 = true;\n    let mut prime50 = true;\n\
    \    let mut prime51 = true;\n    let mut prime52 = true;\n    let mut prime53\
    \ = true;\n    let mut prime54 = true;\n    let mut prime55 = true;\n    let mut\
    \ prime56 = true;\n    let mut prime57 = true;\n    let mut prime58 = true;\n\
    \    let mut prime59 = true;\n    let mut prime", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_length\
    \ = interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n    let mut interval1_prime = true;\n    let mut interval2_prime\
    \ = true;\n    \n    while interval1_length >= interval2_length {\n        interval1_prime\
    \ = false;\n        interval1_length -= 1;\n    }\n    while interval2_length\
    \ >= interval1_length {\n        interval2_prime = false;\n        interval2_length\
    \ -= 1;\n    }\n    \n    if interval1_prime && interval2_prime {\n        return\
    \ \"YES\";\n    } else if interval1_prime {\n        return \"NO\";\n    } else\
    \ if interval2_prime {\n        return \"NO\";\n    } else {\n        return \"\
    NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_start < interval1_end {\n        let mut interval1_length\
    \ = interval1_end - interval1_start;\n        let mut interval2_length = interval2_end\
    \ - interval2_start;\n        if interval1_length == interval2_length {\n    \
    \        if interval1_length == 1 {\n                return \"YES\";\n       \
    \     }\n            if interval1_length == 2 {\n                return \"YES\"\
    ;\n            }\n            if interval1_length == 3 {\n                return\
    \ \"YES\";\n            }\n            if interval1_length == 4 {\n          \
    \      return \"YES\";\n            }\n            if interval1_length == 5 {\n\
    \                return \"YES\";\n            }\n            if interval1_length\
    \ == 6 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 7 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 8 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 9 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 10 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 11 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 12 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 13 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 14 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 15 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 16 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 17 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 18 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 19 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 20 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 21 {\n                return \"YES\";\n            }\n            if interval1_length",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        if interval1_end < interval2_start\
    \ {\n            return \"NO\";\n        }\n        let mut interval1_length =\
    \ interval1_end - interval1_start;\n        let mut interval2_length = interval2_end\
    \ - interval2_start;\n        let mut intersection_length = interval1_length +\
    \ interval2_length;\n        let mut prime = true;\n        let mut i = 1;\n \
    \       while i < intersection_length {\n            if interval1_start + i ==\
    \ interval2_start {\n                prime = false;\n                break;\n\
    \            }\n            i += 1;\n        }\n        if prime {\n         \
    \   return \"YES\";\n        }\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    \n    while interval1_start <= interval1_end && interval2_start <=\
    \ interval2_end {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ interval2_start += 1;\n        }\n        intersection_length += 1;\n    }\n\
    \    \n    if interval1_start > interval1_end {\n        interval1_start = interval1_end\
    \ - 1;\n    }\n    if interval2_start > interval2_end {\n        interval2_start\
    \ = interval2_end - 1;\n    }\n    \n    if intersection_length == 2 {\n     \
    \   if interval1_start == interval1_end {\n            if interval2_start == interval2_end\
    \ {\n                return \"YES\";\n            }\n            return \"NO\"\
    ;\n        }\n        return \"NO\";\n    }\n    \n    if intersection_length\
    \ == 1 {\n        if interval1_start == interval1_end {\n            return \"\
    NO\";\n        }\n        return \"NO\";\n    }\n    \n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n    \n    return \"YES\";", "    if interval1.start\
    \ >= interval1.end || interval2.start >= interval2.end {\n        return \"NO\"\
    ;\n    }\n    let mut intersection = interval1;\n    intersection.start = min(interval1.start,\
    \ interval2.start);\n    intersection.end = max(interval1.end, interval2.end);\n\
    \    if intersection.start > intersection.end {\n        return \"NO\";\n    }\n\
    \    if intersection.start == intersection.end {\n        return \"NO\";\n   \
    \ }\n    if intersection.start == interval1.start {\n        return \"YES\";\n\
    \    }\n    if intersection.start == interval2.start {\n        return \"YES\"\
    ;\n    }\n    if intersection.end == interval1.end {\n        return \"YES\";\n\
    \    }\n    if intersection.end == interval2.end {\n        return \"YES\";\n\
    \    }\n    if intersection.start == intersection.end {\n        return \"YES\"\
    ;\n    }\n    if intersection.start < interval1.start {\n        return \"NO\"\
    ;\n    }\n    if intersection.start < interval2.start {\n        return \"NO\"\
    ;\n    }\n    if intersection.end > interval1.end {\n        return \"NO\";\n\
    \    }\n    if intersection.end > interval2.end {\n        return \"NO\";\n  \
    \  }\n    if intersection.start < intersection.end {\n        return \"YES\";\n\
    \    }\n    if intersection.start > intersection.end {\n        return \"YES\"\
    ;\n    }\n    if intersection.start == interval1.start {\n        return \"YES\"\
    ;\n    }\n    if intersection.start == interval2.start {\n        return \"YES\"\
    ;\n    }\n    if intersection.end == interval1.end {\n        return \"YES\";\n\
    \    }\n    if intersection.end == interval2.end {\n        return \"YES\";\n\
    \    }\n    if intersection.start == intersection.end {\n        return \"YES\"\
    ;\n    }\n    if intersection.start < interval1.start {\n        return \"YES\"\
    ;\n    }\n    if intersection.start < interval2.start {\n        return \"YES\"\
    ;\n    }\n    if intersection.end > interval1.end {\n        return \"YES\";\n\
    \    }\n    if intersection.end > interval2.end {\n        return \"YES\";\n \
    \   }\n    if intersection.start < intersection.end {\n        return \"YES\"\
    ;\n    }\n    if intersection.start > intersection.end {\n        return \"YES\"\
    ;\n    }\n    if intersection.start == interval1.start {\n        return \"YES\"\
    ;\n    }\n    if intersection.start == interval2.start {\n        return \"YES\"\
    ;\n    }\n    if intersection.end == interval1.end {\n        return \"YES\";\n\
    \    }\n    if intersection.end == interval2.end {\n        return \"YES\";\n\
    \    }\n    if intersection.start == intersection", "    let mut interval_len\
    \ = interval1[1] - interval1[0] + 1;\n    let mut interval2_len = interval2[1]\
    \ - interval2[0] + 1;\n    let mut interval_start = interval1[0];\n    let mut\
    \ interval_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    \n    while interval_start <=\
    \ interval_end && interval2_start <= interval2_end {\n        if interval_start\
    \ <= interval_end {\n            if interval_start <= interval2_start {\n    \
    \            if interval_end <= interval2_end {\n                    if interval_end\
    \ == interval2_end {\n                        interval_len += 1;\n           \
    \         }\n                } else {\n                    interval_len += 1;\n\
    \                }\n            } else {\n                interval_len += 1;\n\
    \            }\n        } else {\n            interval_len += 1;\n        }\n\
    \        \n        interval_start += 1;\n        interval_end += 1;\n        interval2_start\
    \ += 1;\n        interval2_end += 1;\n    }\n    \n    if interval_len == 2 {\n\
    \        if interval1[0] == interval2[0] {\n            if interval1[1] == interval2[1]\
    \ {\n                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        } else {\n            return \"NO\";\n     \
    \   }\n    } else {\n        return \"NO\";\n    }", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    while interval1_start < interval1_end && interval2_start\
    \ < interval2_end {\n        if interval1_start <= interval2_start {\n       \
    \     intersection_start = interval1_start;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            intersection_end = interval1_end;\n        }\n\
    \        if intersection_start <= intersection_end {\n            interval1_start\
    \ += 1;\n        }\n        if intersection_start <= intersection_end {\n    \
    \        interval1_end += 1;\n        }\n        if intersection_start <= intersection_end\
    \ {\n            interval2_start += 1;\n        }\n        if intersection_start\
    \ <= intersection_end {\n            interval2_end += 1;\n        }\n    }\n \
    \   if interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval2_start == interval2_end {\n        return \"NO\";\n    }\n   \
    \ if intersection_start == intersection_end {\n        return \"YES\";\n    }\n\
    \    if intersection_start < intersection_end {\n        return \"YES\";\n   \
    \ }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start = interval2_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end = interval2_end;\n        }\n \
    \       if interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n            if interval1_start < interval2_start {\n                interval1_start\
    \ = interval2_start;\n            }\n            if interval1_end > interval2_end\
    \ {\n                interval1_end = interval2_end;\n            }\n         \
    \   if interval1_start < interval1_end && interval2_start < interval2_end {\n\
    \                if interval1_start < interval2_start {\n                    interval1_start\
    \ = interval2_start;\n                }\n                if interval1_end > interval2_end\
    \ {\n                    interval1_end = interval2_end;\n                }\n \
    \               if interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n                    if interval1_start < interval2_start {\n            \
    \            interval1_start = interval2_start;\n                    }\n     \
    \               if interval1_end > interval2_end {\n                        interval1_end\
    \ = interval2_end;\n                    }\n                    if interval1_start\
    \ < interval1_end && interval2_start < interval2_end {\n                     \
    \   if interval1_start < interval2_start {\n                            interval1_start\
    \ = interval2_start;\n                        }\n                        if interval1_end\
    \ > interval2_end {\n                            interval1_end = interval2_end;\n\
    \                        }\n                        if interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start = interval2_start;\n\
    \                            }\n                            if interval1_end >\
    \ interval2_end {\n                                interval1_end = interval2_end;\n\
    \                            }\n                            if interval1_start\
    \ < interval1_end && interval2_start < interval2_end {\n                     \
    \           if interval1_start < interval2_start {\n                         \
    \           interval1_start = interval2_start;\n                             \
    \   }\n                                if interval1_end > interval2_end {\n  \
    \                                  interval1_end = interval2_end;\n          \
    \                      }\n                                if interval1_start <\
    \ interval1_end ", "    let mut interval1_start = interval1.0;\n    let mut interval1_end\
    \ = interval1.1;\n    let mut interval2_start = interval2.0;\n    let mut interval2_end\
    \ = interval2.1;\n    let mut intersection_length = 0;\n    \n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            intersection_length += 1;\n            interval1_start\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ intersection_length += 1;\n            interval2_start += 1;\n        }\n  \
    \  }\n    \n    if interval1_start > interval1_end {\n        intersection_length\
    \ += 1;\n        interval1_start += 1;\n    }\n    if interval2_start > interval2_end\
    \ {\n        intersection_length += 1;\n        interval2_start += 1;\n    }\n\
    \    \n    if intersection_length == 2 {\n        if interval1_start == interval1_end\
    \ {\n            if interval2_start == interval2_end {\n                return\
    \ \"YES\";\n            }\n            return \"NO\";\n        }\n        return\
    \ \"NO\";\n    }\n    \n    if intersection_length == 1 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    \n    if intersection_length == 0 {\n        return \"NO\";\n\
    \    }\n    \n    if intersection_length == 2 {\n        return \"YES\";\n   \
    \ }\n    \n    if intersection_length == 1 {\n        return \"NO\";\n    }\n\
    \    \n    if intersection_length == 3 {\n        return \"YES\";\n    }\n   \
    \ \n    if intersection_length == 4 {\n        return \"YES\";\n    }\n    \n\
    \    if intersection_length == 5 {\n        return \"YES\";\n    }\n    \n   \
    \ if intersection_length == 6 {\n        return \"YES\";\n    }\n    \n    if\
    \ intersection_length == 7 {\n        return \"YES\";\n    }\n    \n    if intersection_length\
    \ == 8 {\n        return \"YES\";\n    }\n    \n    if intersection_length ==\
    \ 9 {\n        return \"YES\";\n    }\n    \n    if intersection_length == 10\
    \ {\n        return \"YES\";\n    }\n    \n    if intersection_length == 11 {\n\
    \        return \"YES\";\n    }\n    \n    if intersection_length == 12 {\n  \
    \      return \"YES\";\n    }\n    \n    if intersection_length == 13 {\n    \
    \    return \"YES\";\n    }\n    \n    if intersection_length == 14 {\n      \
    \  return \"YES\";\n    }\n    \n    if intersection_length == 15 {\n        return\
    \ \"YES\";\n    }\n    \n    if intersection_length == 16 {\n        return \"\
    YES\";\n", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut length = 0;\n    while interval[0] <\
    \ interval1[1] && interval2[0] < interval2[1] {\n        if interval[0] > interval2[0]\
    \ {\n            interval[0] = interval2[0];\n            interval[1] = interval2[1];\n\
    \            interval2 = interval;\n            length += 1;\n        } else {\n\
    \            interval[0] = interval1[0];\n            interval[1] = interval1[1];\n\
    \            interval = interval2;\n            length += 1;\n        }\n    }\n\
    \    if interval[0] > interval1[1] {\n        interval[0] = interval1[0];\n  \
    \      interval[1] = interval1[1];\n        interval = interval2;\n        length\
    \ += 1;\n    }\n    if interval2[0] > interval2[1] {\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval1[1];\n        interval = interval2;\n        length\
    \ += 1;\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    let\
    \ mut prime = true;\n    while interval_len > 0 && interval2_len > 0 {\n     \
    \   if interval[0] > interval2[0] {\n            interval[0] = interval[0] - 1;\n\
    \            interval_len -= 1;\n        } else {\n            interval[0] = interval[0]\
    \ + 1;\n            interval_len -= 1;\n        }\n        if interval[1] < interval2[1]\
    \ {\n            interval[1] = interval[1] + 1;\n            interval2_len -=\
    \ 1;\n        } else {\n            interval[1] = interval[1] - 1;\n         \
    \   interval2_len -= 1;\n        }\n    }\n    if interval_len == 0 && interval2_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval_len == 0 {\n        return\
    \ \"YES\";\n    }\n    if interval2_len == 0 {\n        return \"NO\";\n    }\n\
    \    if interval[0] == interval[1] {\n        return \"NO\";\n    }\n    if interval[0]\
    \ == interval2[0] {\n        return \"YES\";\n    }\n    if interval[0] == interval2[1]\
    \ {\n        return \"NO\";\n    }\n    if interval[1] < interval2[0] {\n    \
    \    return \"NO\";\n    }\n    if interval[1] > interval2[1] {\n        return\
    \ \"YES\";\n    }\n    if interval[0] == interval2[0] {\n        return \"YES\"\
    ;\n    }\n    if interval[0] == interval2[1] {\n        return \"YES\";\n    }\n\
    \    if interval[1] < interval2[0] {\n        return \"YES\";\n    }\n    if interval[1]\
    \ > interval2[1] {\n        return \"YES\";\n    }\n    if interval[0] == interval2[0]\
    \ {\n        return \"YES\";\n    }\n    if interval[0] == interval2[1] {\n  \
    \      return \"YES\";\n    }\n    if interval[1] < interval2[0] {\n        return\
    \ \"YES\";\n    }\n    if interval[1] > interval2[1] {\n        return \"YES\"\
    ;\n    }\n    if interval[0] == interval2[0] {\n        return \"YES\";\n    }\n\
    \    if interval[0] == interval2[1] {\n        return \"YES\";\n    }\n    if\
    \ interval[1] < interval2[0] {\n        return \"YES\";\n    }\n    if interval[1]\
    \ > interval2[1] {\n        return \"YES\";\n    }\n    if interval[0] == interval2[0]\
    \ {\n        return \"YES\";\n    }\n    if interval[0] == interval2[1] {\n  \
    \      return \"YES\";\n    }\n    if interval[1] < interval2[0] {\n        return\
    \ \"YES\";\n    }\n    if interval[1] > interval2[1] {\n        return \"YES\"\
    ;\n    }\n", "    let mut interval_1 = interval1;\n    let mut interval_2 = interval2;\n\
    \    let mut intersection = interval1;\n    let mut intersection_length = interval_1.0;\n\
    \    let mut interval_1_end = interval_1.1;\n    let mut interval_2_end = interval_2.1;\n\
    \    let mut interval_1_start = interval_1.0;\n    let mut interval_2_start =\
    \ interval_2.0;\n    loop {\n        if interval_1_end > interval_2_start {\n\
    \            if interval_2_end > interval_1_start {\n                intersection\
    \ = (interval_1_start, interval_2_start);\n                intersection_length\
    \ = interval_1_end - interval_2_start;\n            } else {\n               \
    \ intersection = (interval_1_start, interval_2_end);\n                intersection_length\
    \ = interval_2_end - interval_1_start;\n            }\n        } else {\n    \
    \        if interval_1_end > interval_2_end {\n                intersection =\
    \ (interval_2_start, interval_1_end);\n                intersection_length = interval_2_end\
    \ - interval_1_start;\n            } else {\n                intersection = (interval_2_start,\
    \ interval_1_end);\n                intersection_length = interval_1_end - interval_2_start;\n\
    \            }\n        }\n        if intersection_length == 2 {\n           \
    \ return \"YES\";\n        }\n        if intersection_length == 1 {\n        \
    \    return \"NO\";\n        }\n        if intersection_length == 0 {\n      \
    \      return \"NO\";\n        }\n        if intersection_length == -1 {\n   \
    \         return \"NO\";\n        }\n        if intersection_length == -2 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -3 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -4 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -5 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -6 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -7 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -8 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -9 {\n\
    \            return \"NO\";\n        }\n        if intersection_length == -10\
    \ {\n            return \"NO\";\n        }\n        if intersection_length ==\
    \ -11 {\n            return \"NO\";\n        }\n        if intersection_length\
    \ == -12 {\n            return \"NO\";\n        }\n        if intersection_length\
    \ == -13 {\n            return \"NO\";\n        }\n        if intersection_length\
    \ == -14 {\n            return \"NO\";\n        }\n        if intersection_length\
    \ == -15 {\n            return \"NO\";\n        }\n        if intersection_length\
    \ == -16 {\n            return \"NO\";\n        }\n        if intersection_length\
    \ == -17 {\n            return \"", "    let mut interval_length: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mut interval_start: isize = 0;\n    let mut interval_end: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mut interval_start: isize = 0;\n    let mut interval_end: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mut interval_start: isize = 0;\n    let mut interval_end: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mut interval_start: isize = 0;\n    let mut interval_end: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mut interval_start: isize = 0;\n    let mut interval_end: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mut interval_start: isize = 0;\n    let mut interval_end: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mut interval_start: isize = 0;\n    let mut interval_end: isize = 0;\n\
    \    let mut interval_start1: isize = 0;\n    let mut interval_end1: isize = 0;\n\
    \    let mut interval_start2: isize = 0;\n    let mut interval_end2: isize = 0;\n\
    \    let mu", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut inter = intervals.iter().filter(|&(start,\
    \ end)| *start < *end).collect::<Vec<_>>();\n    let mut len = inter.len();\n\
    \    if len == 2 {\n        if inter[0][0] == inter[1][0] {\n            return\
    \ \"NO\";\n        }\n        return \"YES\";\n    }\n    if len == 1 {\n    \
    \    return \"NO\";\n    }\n    if inter[0][0] == inter[1][1] {\n        return\
    \ \"NO\";\n    }\n    if inter[0][1] == inter[1][0] {\n        return \"YES\"\
    ;\n    }\n    if inter[0][0] == inter[1][1] && inter[0][1] == inter[1][0] {\n\
    \        return \"YES\";\n    }\n    if inter[0][0] == inter[1][1] && inter[0][1]\
    \ == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0] == inter[1][1]\
    \ && inter[0][1] == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0]\
    \ == inter[1][1] && inter[0][1] == inter[1][0] {\n        return \"YES\";\n  \
    \  }\n    if inter[0][0] == inter[1][1] && inter[0][1] == inter[1][0] {\n    \
    \    return \"YES\";\n    }\n    if inter[0][0] == inter[1][1] && inter[0][1]\
    \ == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0] == inter[1][1]\
    \ && inter[0][1] == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0]\
    \ == inter[1][1] && inter[0][1] == inter[1][0] {\n        return \"YES\";\n  \
    \  }\n    if inter[0][0] == inter[1][1] && inter[0][1] == inter[1][0] {\n    \
    \    return \"YES\";\n    }\n    if inter[0][0] == inter[1][1] && inter[0][1]\
    \ == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0] == inter[1][1]\
    \ && inter[0][1] == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0]\
    \ == inter[1][1] && inter[0][1] == inter[1][0] {\n        return \"YES\";\n  \
    \  }\n    if inter[0][0] == inter[1][1] && inter[0][1] == inter[1][0] {\n    \
    \    return \"YES\";\n    }\n    if inter[0][0] == inter[1][1] && inter[0][1]\
    \ == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0] == inter[1][1]\
    \ && inter[0][1] == inter[1][0] {\n        return \"YES\";\n    }\n    if inter[0][0]\
    \ == inter[1][1] && inter[0][1] == inter[1][0] {\n        return \"YES\";\n  \
    \  }\n    if inter[0][0] == inter[1][1] && inter[0][1] == inter[1][0] {\n    \
    \    return \"YES\";\n    }\n    if inter[0][0] == inter[1][1] && inter[0][1]\
    \ == inter", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    let mut prime_numbers\
    \ = vec![];\n    let mut prime_numbers_length = prime_numbers.len();\n    \n \
    \   while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            if interval2_start\
    \ < interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_length +=\
    \ 1;\n                }\n            }\n        }\n        \n        if interval1_start\
    \ > interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }\n        }\n        \n        if interval1_start > interval1_end {\n\
    \            if interval2_start > interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_length += 1;\n                }\n            }\n        }\n   \
    \     \n        if interval1_start <= interval1_end {\n            if interval2_start\
    \ > interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_length +=\
    \ 1;\n                }\n            }\n        }\n        \n        if interval1_start\
    \ <= interval1_end {\n            if interval2_start > interval2_end {\n     \
    \           if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }\n        }\n        \n        if interval1_start < interval1_end {\n\
    \            if interval2_start > interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_length += 1;\n                }\n            }\n        }\n   \
    \     \n        if interval1_start < interval1_end {\n            if interval2_start\
    \ > interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_length +=\
    \ 1;\n                }\n            }\n        }\n        \n        if interval1_start\
    \ <= interval1_end {\n            if interval2_start < interval2_end {\n     \
    \           if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut interval1_length = interval2_end - interval2_start;\n\
    \    let mut interval2_length = interval1_end - interval1_start;\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n        interval1_length\
    \ = interval1_end - interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start = interval2_end;\n        interval2_length = interval2_end\
    \ - interval2_start;\n    }\n    if interval1_start > interval2_start {\n    \
    \    interval1_start = interval2_start;\n        interval1_length = interval2_end\
    \ - interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_length = interval2_end - interval2_start;\n\
    \    }\n    if interval1_end < interval1_start {\n        interval1_end = interval1_start;\n\
    \        interval1_length = interval1_end - interval1_start;\n    }\n    if interval2_end\
    \ < interval2_start {\n        interval2_end = interval2_start;\n        interval2_length\
    \ = interval2_end - interval2_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_length = interval2_end - interval2_start;\n    }\n    if\
    \ interval1_end > interval1_start {\n        interval1_length = interval1_end\
    \ - interval1_start;\n    }\n    if interval2_end > interval1_end {\n        interval2_length\
    \ = interval1_end - interval1_start;\n    }\n    if interval2_end > interval2_start\
    \ {\n        interval2_length = interval2_end - interval2_start;\n    }\n    if\
    \ interval1_end > interval2_end {\n        interval1_length = interval2_end -\
    \ interval2_start;\n    }\n    if interval1_end > interval1_start {\n        interval1_length\
    \ = interval1_end - interval1_start;\n    }\n    if interval2_end > interval1_end\
    \ {\n        interval2_length = interval1_end - interval1_start;\n    }\n    if\
    \ interval1_end > interval2_end {\n        interval1_length = interval2_end -\
    \ interval2_start;\n    }\n    if interval1_end > interval1_start {\n        interval1_length\
    \ = interval1_end - interval1_start;\n    }\n    if interval2_end > interval1_end\
    \ {\n        interval2_length = interval1_end - interval1_start;", "    let mut\
    \ interval1_start = interval1.0;\n    let mut interval1_end = interval1.1;\n \
    \   let mut interval2_start = interval2.0;\n    let mut interval2_end = interval2.1;\n\
    \n    let mut interval1_length = interval1_end - interval1_start;\n    let mut\
    \ interval2_length = interval2_end - interval2_start;\n\n    while interval1_length\
    \ > 0 || interval2_length > 0 {\n        if interval1_length == 0 {\n        \
    \    interval1_start = interval1_end;\n            interval1_length += 1;\n  \
    \      }\n        if interval2_length == 0 {\n            interval2_start = interval2_end;\n\
    \            interval2_length += 1;\n        }\n\n        if interval1_start >\
    \ interval2_start {\n            interval1_start -= 1;\n            interval1_length\
    \ -= 1;\n        } else {\n            interval2_start -= 1;\n            interval2_length\
    \ -= 1;\n        }\n    }\n\n    if interval1_length == interval2_length {\n \
    \       if interval1_start < interval2_start {\n            return \"NO\";\n \
    \       } else {\n            return \"YES\";\n        }\n    } else {\n     \
    \   return \"NO\";\n    }", "    let mut interval = interval1;\n    if interval1.start\
    \ > interval1.end {\n        interval = interval2;\n    }\n    if interval2.start\
    \ > interval2.end {\n        interval = interval1;\n    }\n    if interval.start\
    \ < interval.end {\n        let mut start = interval.start;\n        let mut end\
    \ = interval.end;\n        let mut count = 0;\n        while start < end {\n \
    \           if interval1.start <= start && interval1.end >= end {\n          \
    \      count += 1;\n                start += 1;\n            }\n            if\
    \ interval2.start <= start && interval2.end >= end {\n                count +=\
    \ 1;\n                start += 1;\n            }\n            if interval1.start\
    \ <= end && interval1.end >= end {\n                count += 1;\n            \
    \    end -= 1;\n            }\n            if interval2.start <= end && interval2.end\
    \ >= end {\n                count += 1;\n                end -= 1;\n         \
    \   }\n        }\n        if count % 2 == 0 {\n            return \"NO\";\n  \
    \      }\n        return \"YES\";\n    }\n    return \"NO\";", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut\
    \ interval2_len = interval2[1] - interval2[0] + 1;\n    let mut interval_start\
    \ = interval1[0];\n    let mut interval_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval_len\
    \ = interval_end - interval_start + 1;\n    let mut interval2_len = interval2_end\
    \ - interval2_start + 1;\n    let mut interval_start = interval1[0];\n    let\
    \ mut interval_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_len = interval_end\
    \ - interval_start + 1;\n    let mut interval2_len = interval2_end - interval2_start\
    \ + 1;\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_len = interval_end - interval_start +\
    \ 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n    let\
    \ mut interval_start = interval1[0];\n    let mut interval_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_len = interval_end - interval_start + 1;\n    let mut interval2_len\
    \ = interval2_end - interval2_start + 1;\n    let mut interval_start = interval1[0];\n\
    \    let mut interval_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_len = interval_end\
    \ - interval_start + 1;\n    let mut interval2_len = interval2_end - interval2_start\
    \ + 1;\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_len = interval_end - interval_start +\
    \ 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n    let\
    \ mut interval_start = interval1[0];\n    let mut interval_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_len = interval_end - interval_start + ", "    if interval1[0]\
    \ < interval1[1] {\n        if interval2[0] < interval2[1] {\n            if interval1[0]\
    \ < interval2[0] {\n                if interval1[1] > interval2[1] {\n       \
    \             return \"NO\";\n                } else {\n                    return\
    \ \"YES\";\n                }\n            } else {\n                return \"\
    NO\";\n            }\n        } else {\n            return \"NO\";\n        }\n\
    \    } else {\n        if interval2[0] < interval2[1] {\n            return \"\
    NO\";\n        } else {\n            return \"YES\";\n        }\n    }", "   \
    \ if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut intersection = interval1;\n    let mut intersection2 = interval2;\n\
    \    let mut length = interval1[1] - interval1[0] + 1;\n    let mut length2 =\
    \ interval2[1] - interval2[0] + 1;\n    let mut prime = true;\n    while prime\
    \ && length != length2 {\n        if length == 0 {\n            prime = false;\n\
    \        }\n        if length2 == 0 {\n            prime = false;\n        }\n\
    \        if intersection[0] < intersection2[0] {\n            intersection[0]\
    \ = intersection[0] + 1;\n            intersection[1] = intersection[1] - 1;\n\
    \            length -= 1;\n        } else {\n            intersection2[0] = intersection2[0]\
    \ + 1;\n            intersection2[1] = intersection2[1] - 1;\n            length2\
    \ -= 1;\n        }\n    }\n    if prime {\n        return \"YES\";\n    }\n  \
    \  return \"NO\";", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] >= interval2[0] {\n            if interval1[1] >\
    \ interval2[1] {\n                return \"NO\";\n            }\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    if interval1_len > interval2_len {\n\
    \        interval1_end = interval2_end;\n        interval1_len = interval2_len;\n\
    \    }\n    if interval1_len < interval2_len {\n        interval2_start = interval1_start;\n\
    \        interval2_len = interval1_len;\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        if interval1_len == interval2_len\
    \ {\n            return \"YES\";\n        }\n        if interval1_len > interval2_len\
    \ {\n            interval1_len = interval2_len;\n        }\n        if interval1_len\
    \ < interval2_len {\n            interval2_len = interval1_len;\n        }\n \
    \       let mut interval1_prime = true;\n        let mut interval2_prime = true;\n\
    \        let mut prime_len = interval1_len + interval2_len;\n        while prime_len\
    \ > 1 {\n            if interval1_prime && interval2_prime {\n               \
    \ prime_len = prime_len - 1;\n            } else {\n                prime_len\
    \ = prime_len / 2;\n            }\n            if prime_len == 1 {\n         \
    \       interval1_prime = false;\n                interval2_prime = false;\n \
    \           }\n        }\n        if interval1_prime && interval2_prime {\n  \
    \          return \"YES\";\n        }\n        return \"NO\";\n    }\n    return\
    \ \"NO\";", "    if interval1.start < interval1.end && interval2.start < interval2.end\
    \ {\n        let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval2.start;\n        interval.start += 1;\n     \
    \   interval.end += 1;\n        let mut prime = true;\n        for i in 1..interval.end\
    \ {\n            if interval1.start % i == 0 && interval2.start % i == 0 {\n \
    \               prime = false;\n                break;\n            }\n      \
    \  }\n        if prime {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    return \"NO\";", "    let mut interval = interval1;\n  \
    \  if interval1.0 < interval2.0 {\n        interval = interval2;\n    }\n    let\
    \ mut start = interval.0;\n    let mut end = interval.1;\n    let mut count =\
    \ 0;\n    while start < end {\n        count += 1;\n        start += 1;\n    \
    \    end += 1;\n    }\n    if count % 2 == 0 {\n        return \"NO\";\n    }\n\
    \    let mut prime = true;\n    let mut prime_start = start;\n    let mut prime_end\
    \ = end;\n    while prime_start < prime_end {\n        if prime_start % 2 == 0\
    \ {\n            prime = false;\n        }\n        prime_start += 1;\n      \
    \  prime_end += 1;\n    }\n    if prime {\n        return \"YES\";\n    }\n  \
    \  return \"NO\";", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut counter = 0;\n    while counter < interval1[0]\
    \ {\n        interval = (interval[0], interval[1]);\n        counter += 1;\n \
    \   }\n    while counter < interval2[0] {\n        interval2 = (interval2[0],\
    \ interval2[1]);\n        counter += 1;\n    }\n    if interval[0] == interval1[1]\
    \ && interval2[0] == interval2[1] {\n        return \"YES\";\n    }\n    if interval[0]\
    \ == interval1[0] && interval2[0] == interval2[1] {\n        return \"NO\";\n\
    \    }\n    if interval[0] == interval1[1] && interval2[1] == interval2[0] {\n\
    \        return \"NO\";\n    }\n    if interval[0] == interval1[0] && interval2[0]\
    \ == interval2[0] {\n        return \"YES\";\n    }\n    if interval[0] == interval1[1]\
    \ && interval2[0] == interval2[1] {\n        return \"NO\";\n    }\n    if interval[0]\
    \ == interval1[0] && interval2[1] == interval2[0] {\n        return \"NO\";\n\
    \    }\n    if interval[0] == interval1[1] && interval2[1] == interval2[0] {\n\
    \        return \"YES\";\n    }\n    if interval[0] == interval1[0] && interval2[0]\
    \ == interval2[1] {\n        return \"NO\";\n    }\n    if interval[0] == interval1[1]\
    \ && interval2[1] == interval2[0] {\n        return \"NO\";\n    }\n    if interval[0]\
    \ == interval1[0] && interval2[0] == interval2[1] {\n        return \"YES\";\n\
    \    }\n    if interval[0] == interval1[1] && interval2[0] == interval2[1] {\n\
    \        return \"NO\";\n    }\n    if interval[0] == interval1[0] && interval2[0]\
    \ == interval2[1] {\n        return \"NO\";\n    }\n    if interval[0] == interval1[1]\
    \ && interval2[0] == interval2[1] {\n        return \"YES\";\n    }\n    if interval[0]\
    \ == interval1[0] && interval2[0] == interval2[1] {\n        return \"NO\";\n\
    \    }\n    if interval[0] == interval1[1] && interval2[0] == interval2[1] {\n\
    \        return \"NO\";\n    }\n    if interval[0] == interval1[0] && interval2[0]\
    \ == interval2[1] {\n        return \"YES\";\n    }\n    if interval[0] == interval1[1]\
    \ && interval2[0] == interval2[1] {\n        return \"NO\";\n    }\n    if interval[0]\
    \ == interval1[0] && interval2[0] == interval2[1] {\n        return \"NO\";\n\
    \    }\n    if interval[0] == interval1[1] && interval2[0] == interval2[1] {\n\
    \        return \"YES\";\n    }\n    if interval[0] == interval1[0] && interval2[0]\
    \ == interval2[1] {\n        return \"NO\";\n", "    if interval1.0 > interval2.0\
    \ {\n        let (start, end) = interval2;\n        interval2 = (start, end)\n\
    \    }\n    if interval1.0 > interval2.0 {\n        let (start, end) = interval1;\n\
    \        interval1 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        interval2 = (start, end)\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let (start, end) = interval1;\n        interval1 = (start, end)\n   \
    \ }\n    if interval1.0 < interval2.0 {\n        let (start, end) = interval2;\n\
    \        ", "    let (start, end) = interval1;\n    let (end1, end2) = interval2;\n\
    \    if start > end {\n        (start, end2) = (end2, end1);\n    }\n    if start\
    \ > end1 {\n        (start, end1) = (end1, start);\n    }\n    if start > end2\
    \ {\n        (start, end2) = (end2, start);\n    }\n    if start < end1 {\n  \
    \      (start, end1) = (start1, start);\n    }\n    if start < end2 {\n      \
    \  (start, end2) = (start2, start);\n    }\n    if start == end1 && end == end2\
    \ {\n        return \"NO\";\n    }\n    if start == end1 && end > end2 {\n   \
    \     return \"NO\";\n    }\n    if start == end1 && end < end2 {\n        return\
    \ \"YES\";\n    }\n    if start == end2 && end > end1 {\n        return \"NO\"\
    ;\n    }\n    if start == end2 && end < end1 {\n        return \"YES\";\n    }\n\
    \    if start < end1 && end < end2 {\n        return \"YES\";\n    }\n    if start\
    \ < end2 && end > end1 {\n        return \"YES\";\n    }\n    if start < end2\
    \ && end < end2 {\n        return \"NO\";\n    }\n    if start == end1 && end\
    \ == end2 {\n        return \"YES\";\n    }\n    if start == end2 && end == end1\
    \ {\n        return \"YES\";\n    }\n    if start == end2 && end > end1 {\n  \
    \      return \"NO\";\n    }\n    if start == end2 && end < end1 {\n        return\
    \ \"NO\";\n    }\n    if start < end1 && end == end2 {\n        return \"NO\"\
    ;\n    }\n    if start < end2 && end == end1 {\n        return \"NO\";\n    }\n\
    \    if start < end2 && end > end1 {\n        return \"YES\";\n    }\n    if start\
    \ < end2 && end < end2 {\n        return \"YES\";\n    }\n    if start == end1\
    \ && end == end2 {\n        return \"YES\";\n    }\n    if start == end2 && end\
    \ == end1 {\n        return \"YES\";\n    }\n    if start == end2 && end > end1\
    \ {\n        return \"NO\";\n    }\n    if start == end2 && end < end1 {\n   \
    \     return \"NO\";\n    }\n    if start < end1 && end == end2 {\n        return\
    \ \"NO\";\n    }\n    if start < end2 && end == end1 {\n        return \"NO\"\
    ;\n    }\n    if start < end2 && end > end1 {\n        return \"YES\";\n    }\n\
    \    if start < end2 && end < end2 {\n        return \"YES\";\n    }\n    if start\
    \ == end1 && end == end2 {\n        return \"YES\";\n    }\n    if start == end2\
    \ && end == end1 {\n", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut intersection = intervals[0];\n  \
    \  for i in 1..intervals.len() {\n        if intervals[i][0] >= intersection[1]\
    \ {\n            intersection = intervals[i];\n        }\n    }\n    if intersection[0]\
    \ >= intersection[1] {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }", "    let mut interval1_start = interval1.0;\n    let mut interval1_end\
    \ = interval1.1;\n    let mut interval2_start = interval2.0;\n    let mut interval2_end\
    \ = interval2.1;\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval_length_2 = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 0;\n    let mut prime_number_2: isize = 0;\n    let mut\
    \ prime_number_3: isize = 0;\n    let mut prime_number_4: isize = 0;\n    let\
    \ mut prime_number_5: isize = 0;\n    let mut prime_number_6: isize = 0;\n   \
    \ let mut prime_number_7: isize = 0;\n    let mut prime_number_8: isize = 0;\n\
    \    let mut prime_number_9: isize = 0;\n    let mut prime_number_10: isize =\
    \ 0;\n    let mut prime_number_11: isize = 0;\n    let mut prime_number_12: isize\
    \ = 0;\n    let mut prime_number_13: isize = 0;\n    let mut prime_number_14:\
    \ isize = 0;\n    let mut prime_number_15: isize = 0;\n    let mut prime_number_16:\
    \ isize = 0;\n    let mut prime_number_17: isize = 0;\n    let mut prime_number_18:\
    \ isize = 0;\n    let mut prime_number_19: isize = 0;\n    let mut prime_number_20:\
    \ isize = 0;\n    let mut prime_number_21: isize = 0;\n    let mut prime_number_22:\
    \ isize = 0;\n    let mut prime_number_23: isize = 0;\n    let mut prime_number_24:\
    \ isize = 0;\n    let mut prime_number_25: isize = 0;\n    let mut prime_number_26:\
    \ isize = 0;\n    let mut prime_number_27: isize = 0;\n    let mut prime_number_28:\
    \ isize = 0;\n    let mut prime_number_29: isize = 0;\n    let mut prime_number_30:\
    \ isize = 0;\n    let mut prime_number_31: isize = 0;\n    let mut prime_number_32:\
    \ isize = 0;\n    let mut prime_number_33: isize = 0;\n    let mut prime_number_34:\
    \ isize = 0;\n    let mut prime_number_35: isize = 0;\n    let mut prime_number_36:\
    \ isize = 0;\n    let mut prime_number_37: isize = 0;\n    let mut prime_number_",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        return \"NO\";\n\
    \    }\n\n    if interval2_start == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval2_start = interval1_start;\n    }\n\n  \
    \  if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       interval1_end = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end > interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_start = interval1_end;\n    }\n\n    if interval1_start ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       interval1_end = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end > interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_start = interval1_end;\n    }\n\n    if interval1_start ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end ", "    if interval1.start < interval1.end && interval2.start\
    \ < interval2.end {\n        let mut interval = interval1;\n        interval.start\
    \ = interval.end;\n        interval.end = interval.start;\n        interval =\
    \ interval2;\n        interval.start = interval.end;\n        interval.end = interval.start;\n\
    \        let mut intersection = interval;\n        let mut i = 0;\n        while\
    \ i < intersection.start {\n            i += 1;\n        }\n        while i <\
    \ intersection.end {\n            i += 1;\n        }\n        if i == intersection.start\
    \ {\n            return \"NO\";\n        }\n        if i == intersection.end {\n\
    \            return \"YES\";\n        }\n        let mut j = 0;\n        while\
    \ j < intersection.start {\n            j += 1;\n        }\n        while j <\
    \ intersection.end {\n            j += 1;\n        }\n        if j == intersection.start\
    \ {\n            return \"NO\";\n        }\n        if j == intersection.end {\n\
    \            return \"YES\";\n        }\n        if i == intersection.start {\n\
    \            return \"NO\";\n        }\n        if i == intersection.end {\n \
    \           return \"YES\";\n        }\n        if j == intersection.start {\n\
    \            return \"NO\";\n        }\n        if j == intersection.end {\n \
    \           return \"YES\";\n        }\n        if i == intersection.start {\n\
    \            return \"NO\";\n        }\n        if i == intersection.end {\n \
    \           return \"YES\";\n        }\n        if j == intersection.start {\n\
    \            return \"NO\";\n        }\n        if j == intersection.end {\n \
    \           return \"YES\";\n        }\n        if i == intersection.start {\n\
    \            return \"NO\";\n        }\n        if i == intersection.end {\n \
    \           return \"YES\";\n        }\n        if j == intersection.start {\n\
    \            return \"NO\";\n        }\n        if j == intersection.end {\n \
    \           return \"YES\";\n        }\n        if i == intersection.start {\n\
    \            return \"NO\";\n        }\n        if i == intersection.end {\n \
    \           return \"YES\";\n        }\n        if j == intersection.start {\n\
    \            return \"NO\";\n        }\n        if j == intersection.end {\n \
    \           return \"YES\";\n        }\n        if i == intersection.start {\n\
    \            return \"NO\";\n        }\n        if i == intersection.end {\n \
    \           return \"YES\";\n        }\n        if j == intersection.start {\n\
    \            return \"NO\";\n        }\n        if j == intersection.end {\n \
    \           return \"YES\";\n        }\n        if i == intersection.start {\n\
    \            return \"NO\";\n        }\n        if i == intersection.end {\n \
    \           return \"YES\";\n        }\n        if j == intersection.start {\n\
    \            return \"NO\";\n        }\n        if j == intersection.end {\n \
    \           return \"YES\";\n        }\n        if i == intersection.start {\n",
  "    let mut interval1_start = interval1.0;\n    let mut interval1_end = interval1.1;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval2_end = interval2.1;\n\
    \    let mut intersection_length = 0;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start = interval1_end + 1;\n        } else {\n    \
    \        interval2_start = interval2_end + 1;\n        }\n        intersection_length\
    \ += 1;\n    }\n    \n    if interval1_start > interval1_end {\n        intersection_length\
    \ -= 1;\n    }\n    \n    if interval2_start > interval2_end {\n        intersection_length\
    \ -= 1;\n    }\n    \n    if intersection_length == 0 {\n        return \"NO\"\
    ;\n    }\n    \n    if intersection_length == 1 {\n        return \"YES\";\n \
    \   }\n    \n    if intersection_length == 2 {\n        return \"YES\";\n    }\n\
    \    \n    if intersection_length == 3 {\n        return \"YES\";\n    }\n   \
    \ \n    if intersection_length == 4 {\n        return \"YES\";\n    }\n    \n\
    \    if intersection_length == 5 {\n        return \"YES\";\n    }\n    \n   \
    \ if intersection_length == 6 {\n        return \"YES\";\n    }\n    \n    if\
    \ intersection_length == 7 {\n        return \"YES\";\n    }\n    \n    if intersection_length\
    \ == 8 {\n        return \"YES\";\n    }\n    \n    if intersection_length ==\
    \ 9 {\n        return \"YES\";\n    }\n    \n    if intersection_length == 10\
    \ {\n        return \"YES\";\n    }\n    \n    if intersection_length == 11 {\n\
    \        return \"YES\";\n    }\n    \n    if intersection_length == 12 {\n  \
    \      return \"YES\";\n    }\n    \n    if intersection_length == 13 {\n    \
    \    return \"YES\";\n    }\n    \n    if intersection_length == 14 {\n      \
    \  return \"YES\";\n    }\n    \n    if intersection_length == 15 {\n        return\
    \ \"YES\";\n    }\n    \n    if intersection_length == 16 {\n        return \"\
    YES\";\n    }\n    \n    if intersection_length == 17 {\n        return \"YES\"\
    ;\n    }\n    \n    if intersection_length == 18 {\n        return \"YES\";\n\
    \    }\n    \n    if intersection_length == 19 {\n        return \"YES\";\n  \
    \  }\n    \n    if intersection_length == 20 {\n        return \"YES\";\n    }\n\
    \    \n    if intersection_length == 21 {\n        return \"YES\";\n    }\n  \
    \  \n    if intersection_length == 22 {\n        return \"YES\";\n    }\n    \n\
    \    if intersection_", "    if interval1[0] < interval1[1] && interval2[0] <\
    \ interval2[1] {\n        if interval1[0] < interval2[0] {\n            return\
    \ \"NO\";\n        }\n        if interval1[1] > interval2[1] {\n            return\
    \ \"NO\";\n        }\n        let mut len = 0;\n        let mut start1 = interval1[0];\n\
    \        let mut start2 = interval2[0];\n        let mut end1 = interval1[1];\n\
    \        let mut end2 = interval2[1];\n        while start1 <= end1 && start2\
    \ <= end2 {\n            if start1 < start2 {\n                start1 += 1;\n\
    \            } else {\n                start2 += 1;\n            }\n         \
    \   len += 1;\n        }\n        if len == 2 {\n            if start1 == end1\
    \ && start2 == end2 {\n                return \"YES\";\n            }\n      \
    \      return \"NO\";\n        }\n        if len % 2 == 0 {\n            return\
    \ \"NO\";\n        }\n        if len % 3 == 0 {\n            return \"YES\";\n\
    \        }\n    }\n    return \"NO\";", "    if interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n  \
    \          return \"NO\";\n        }\n        if interval1[1] > interval2[1] {\n\
    \            return \"NO\";\n        }\n        let mut interval = interval1;\n\
    \        interval[0] = interval1[1];\n        interval[1] = interval2[0];\n  \
    \      let mut prime = true;\n        for i in 1..interval[0] {\n            if\
    \ interval[0] % i == 0 {\n                prime = false;\n                break;\n\
    \            }\n        }\n        for i in 1..interval[1] {\n            if interval[1]\
    \ % i == 0 {\n                prime = false;\n                break;\n       \
    \     }\n        }\n        if prime {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    while interval1_start < interval1_end && interval2_start\
    \ < interval2_end {\n        if interval1_start < interval1_end {\n          \
    \  intersection_start = interval1_start;\n            intersection_end = interval1_end;\n\
    \            intersection_length += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval1_start = interval2_start;\n        \
    \    interval1_end = interval2_end;\n            interval1_length += 1;\n    \
    \    }\n        interval2_start = interval2_end + 1;\n        interval2_end =\
    \ interval2_start + 1;\n        interval2_length += 1;\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    if intersection_length == 1 {\n                return \"YES\".to_string();\n\
    \            }\n            return \"NO\".to_string();\n        }\n        return\
    \ \"NO\".to_string();\n    }\n    if interval2_start == interval2_end {\n    \
    \    return \"NO\".to_string();\n    }\n    if intersection_length == 1 {\n  \
    \      return \"YES\".to_string();\n    }\n    if intersection_length == 2 {\n\
    \        if interval1_length == 1 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_length == 1 {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if intersection_length\
    \ == 3 {\n        if interval1_length == 1 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_length == 1 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval1_length == 2 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_length == 2 {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if intersection_length\
    \ == 4 {\n        if interval1_length == 1 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_length == 1 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval1_length == 2 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_length == 2 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval1_length == 3 {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_length == 3 {\n            return \"YES\".",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_len: isize = 1;\n    let mut prime_number_flag = true;\n\
    \    let mut prime_number_flag2 = true;\n    let mut prime_number_flag3 = true;\n\
    \    let mut prime_number_flag4 = true;\n    let mut prime_number_flag5 = true;\n\
    \    let mut prime_number_flag6 = true;\n    let mut prime_number_flag7 = true;\n\
    \    let mut prime_number_flag8 = true;\n    let mut prime_number_flag9 = true;\n\
    \    let mut prime_number_flag10 = true;\n    let mut prime_number_flag11 = true;\n\
    \    let mut prime_number_flag12 = true;\n    let mut prime_number_flag13 = true;\n\
    \    let mut prime_number_flag14 = true;\n    let mut prime_number_flag15 = true;\n\
    \    let mut prime_number_flag16 = true;\n    let mut prime_number_flag17 = true;\n\
    \    let mut prime_number_flag18 = true;\n    let mut prime_number_flag19 = true;\n\
    \    let mut prime_number_flag20 = true;\n    let mut prime_number_flag21 = true;\n\
    \    let mut prime_number_flag22 = true;\n    let mut prime_number_flag23 = true;\n\
    \    let mut prime_number_flag24 = true;\n    let mut prime_number_flag25 = true;\n\
    \    let mut prime_number_flag26 = true;\n    let mut prime_number_flag27 = true;\n\
    \    let mut prime_number_flag28 = true;\n    let mut prime_number_flag29 = true;\n\
    \    let mut prime_number_flag30 = true;\n    let mut prime_number_flag31 = true;\n\
    \    let mut prime_number_flag32 = true;\n    let mut prime_number_flag33 = true;\n\
    \    let mut prime_number_flag34 = true;\n    let mut prime_number_flag35 = true;\n\
    \    let mut prime_number_flag36 = true;\n    let mut prime_number_flag37 = true;\n\
    \    let mut prime_number_flag38 = true;\n    let mut prime_number_flag39 = true;",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut intersection = interval1;\n    let mut intersection2 = interval2;\n    let\
    \ mut length = 0;\n    while interval.start < interval.end && interval2.start\
    \ < interval2.end {\n        if interval.start < interval2.start {\n         \
    \   intersection = interval;\n            interval = interval2;\n            interval2\
    \ = intersection2;\n            intersection2 = interval;\n        }\n       \
    \ if interval.end > interval2.end {\n            intersection = interval;\n  \
    \          interval = interval2;\n            interval2 = intersection2;\n   \
    \         intersection2 = interval;\n        }\n        if interval.start <= interval2.end\
    \ {\n            intersection.end = intersection2.start;\n            intersection2.start\
    \ = intersection.end;\n            length += 1;\n        }\n    }\n    if interval.start\
    \ < interval.end {\n        intersection.end = intersection2.start;\n        intersection2.start\
    \ = intersection.end;\n        length += 1;\n    }\n    if length == 1 {\n   \
    \     return \"NO\".to_string();\n    }\n    if length == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    return \"NO\".to_string();", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n    let mut intersection_length\
    \ = 0;\n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end -= 1;\n        }\n      \
    \  if interval2_start < interval2_end {\n            interval2_start += 1;\n \
    \       } else {\n            interval2_end -= 1;\n        }\n        intersection_length\
    \ += 1;\n    }\n    if interval1_start > interval1_end {\n        intersection_length\
    \ -= 1;\n    }\n    if interval2_start > interval2_end {\n        intersection_length\
    \ -= 1;\n    }\n    if intersection_length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    if intersection_length == 1 {\n        return \"YES\".to_string();\n\
    \    }\n    if intersection_length == 2 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \ }\n    if intersection_length == 3 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \ }\n    if intersection_length == 4 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \ }\n    if intersection_length == 5 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \ }\n    if intersection_length == 6 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \ }\n    if intersection_length == 7 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \ }\n    if intersection_length == 8 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n", " \
    \   let mut interval_1 = interval1.0;\n    let mut interval_2 = interval2.0;\n\
    \    let mut interval_3 = interval1.0;\n    let mut interval_4 = interval2.0;\n\
    \    let mut interval_5 = interval1.0;\n    let mut interval_6 = interval2.0;\n\
    \    let mut interval_7 = interval1.0;\n    let mut interval_8 = interval2.0;\n\
    \    let mut interval_9 = interval1.0;\n    let mut interval_10 = interval2.0;\n\
    \    let mut interval_11 = interval1.0;\n    let mut interval_12 = interval2.0;\n\
    \    let mut interval_13 = interval1.0;\n    let mut interval_14 = interval2.0;\n\
    \    let mut interval_15 = interval1.0;\n    let mut interval_16 = interval2.0;\n\
    \    let mut interval_17 = interval1.0;\n    let mut interval_18 = interval2.0;\n\
    \    let mut interval_19 = interval1.0;\n    let mut interval_20 = interval2.0;\n\
    \    let mut interval_21 = interval1.0;\n    let mut interval_22 = interval2.0;\n\
    \    let mut interval_23 = interval1.0;\n    let mut interval_24 = interval2.0;\n\
    \    let mut interval_25 = interval1.0;\n    let mut interval_26 = interval2.0;\n\
    \    let mut interval_27 = interval1.0;\n    let mut interval_28 = interval2.0;\n\
    \    let mut interval_29 = interval1.0;\n    let mut interval_30 = interval2.0;\n\
    \    let mut interval_31 = interval1.0;\n    let mut interval_32 = interval2.0;\n\
    \    let mut interval_33 = interval1.0;\n    let mut interval_34 = interval2.0;\n\
    \    let mut interval_35 = interval1.0;\n    let mut interval_36 = interval2.0;\n\
    \    let mut interval_37 = interval1.0;\n    let mut interval_38 = interval2.0;\n\
    \    let mut interval_39 = interval1.0;\n    let mut interval_40 = interval2.0;\n\
    \    let mut interval_41 = interval1.0;\n    let mut interval_42 = interval2.0;\n\
    \    let mut interval_43 = interval1.0;\n    let mut interval_44 = interval2.0;\n\
    \    let mut interval_45 = interval1.0;\n    let mut interval_46 = interval2.0;\n\
    \    let mut interval_47 = interval1.0;\n    let mut interval_48 = interval2.0;\n\
    \    let mu", "    let mut intervals = vec![interval1, interval2];\n    let mut\
    \ intervals_len = intervals.len();\n    let mut intervals_len2 = intervals_len\
    \ * intervals_len;\n    let mut intervals_len3 = intervals_len2 * intervals_len;\n\
    \    let mut intervals_len4 = intervals_len3 * intervals_len;\n    let mut intervals_len5\
    \ = intervals_len4 * intervals_len;\n    let mut intervals_len6 = intervals_len5\
    \ * intervals_len;\n    let mut intervals_len7 = intervals_len6 * intervals_len;\n\
    \    let mut intervals_len8 = intervals_len7 * intervals_len;\n    let mut intervals_len9\
    \ = intervals_len8 * intervals_len;\n    let mut intervals_len10 = intervals_len9\
    \ * intervals_len;\n    let mut intervals_len11 = intervals_len10 * intervals_len;\n\
    \    let mut intervals_len12 = intervals_len11 * intervals_len;\n    let mut intervals_len13\
    \ = intervals_len12 * intervals_len;\n    let mut intervals_len14 = intervals_len13\
    \ * intervals_len;\n    let mut intervals_len15 = intervals_len14 * intervals_len;\n\
    \    let mut intervals_len16 = intervals_len15 * intervals_len;\n    let mut intervals_len17\
    \ = intervals_len16 * intervals_len;\n    let mut intervals_len18 = intervals_len17\
    \ * intervals_len;\n    let mut intervals_len19 = intervals_len18 * intervals_len;\n\
    \    let mut intervals_len20 = intervals_len19 * intervals_len;\n    let mut intervals_len21\
    \ = intervals_len20 * intervals_len;\n    let mut intervals_len22 = intervals_len21\
    \ * intervals_len;\n    let mut intervals_len23 = intervals_len22 * intervals_len;\n\
    \    let mut intervals_len24 = intervals_len23 * intervals_len;\n    let mut intervals_len25\
    \ = intervals_len24 * intervals_len;\n    let mut intervals_len26 = intervals_len25\
    \ * intervals_len;\n    let mut intervals_len27 = intervals_len26 * intervals_len;\n\
    \    let mut intervals_len28 = intervals_len27 * intervals_len;\n    let mut intervals_len29\
    \ = intervals_len28 * intervals_len;\n    let mut intervals_len30 = intervals_len29\
    \ * intervals_len;\n    let mut intervals_len31 = intervals_len30 * interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n        interval2_start, interval2_end =\
    \ interval1_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \        interval2_start, interval2_end = interval1_start, interval1_end;\n  \
    \  }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ >= interval2_start && interval1_end <= interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start <= interval2_start && interval1_end >= interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_start >= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start >=\
    \ interval2_start && interval1_end <= interval2_end {\n        return \"YES\"\
    ;\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end >= interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                return \"YES\";\n            }\n       \
    \     if interval1_end % interval2_end == 0 {\n                return \"YES\"\
    ;\n            }\n        }\n    }\n    return \"NO\";", "    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    \n    if interval1.0 >\
    \ interval2.0 {\n        interval = interval2;\n        interval2 = interval1;\n\
    \    }\n    \n    if interval1.0 < interval2.0 {\n        interval = interval1;\n\
    \        interval2 = interval2;\n    }\n    \n    if interval1.1 == interval2.1\
    \ {\n        return \"NO\";\n    }\n    \n    let mut interval_len = interval1.1\
    \ - interval1.0;\n    let mut interval2_len = interval2.1 - interval2.0;\n   \
    \ \n    while interval_len > interval2_len {\n        interval_len -= interval2_len;\n\
    \        interval2_len += interval_len;\n    }\n    \n    if interval_len == interval2_len\
    \ {\n        if interval1.0 > interval2.0 {\n            return \"NO\";\n    \
    \    }\n        \n        if interval1.0 < interval2.0 {\n            return \"\
    NO\";\n        }\n        \n        if interval1.1 == interval2.1 {\n        \
    \    return \"YES\";\n        }\n        \n        return \"NO\";\n    }\n   \
    \ \n    let mut interval_len = interval1.1 - interval1.0;\n    let mut interval2_len\
    \ = interval2.1 - interval2.0;\n    \n    while interval_len > interval2_len {\n\
    \        interval_len -= interval2_len;\n        interval2_len += interval_len;\n\
    \    }\n    \n    if interval_len == interval2_len {\n        if interval1.0 >\
    \ interval2.0 {\n            return \"NO\";\n        }\n        \n        if interval1.0\
    \ < interval2.0 {\n            return \"NO\";\n        }\n        \n        if\
    \ interval1.1 == interval2.1 {\n            return \"YES\";\n        }\n     \
    \   \n        return \"NO\";\n    }\n    \n    let mut interval_len = interval1.1\
    \ - interval1.0;\n    let mut interval2_len = interval2.1 - interval2.0;\n   \
    \ \n    while interval_len > interval2_len {\n        interval_len -= interval2_len;\n\
    \        interval2_len += interval_len;\n    }\n    \n    if interval_len == interval2_len\
    \ {\n        if interval1.0 > interval2.0 {\n            return \"NO\";\n    \
    \    }\n        \n        if interval1.0 < interval2.0 {\n            return \"\
    NO\";\n        }\n        \n        if interval1.1 == interval2.1 {\n        \
    \    return \"YES\";\n        }\n        \n        return \"NO\";\n    }\n   \
    \ \n    let mut interval_len = interval1.1 - interval1.0;\n    let mut interval2_len\
    \ = interval2.1 - interval2.0;\n    \n    while interval_len > interval2_len {\n\
    \        interval_len -= interval2_len;\n        interval2_len += interval_len;\n\
    \    }\n    ", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    \n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            interval1_start += 1;\n        }\n        if\
    \ interval2_start < interval2_end {\n            interval2_start += 1;\n     \
    \   }\n        intersection_length += 1;\n    }\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end + 1;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end + 1;\n    }\n   \
    \ if intersection_length == 2 {\n        if interval1_start == interval1_end {\n\
    \            return \"YES\";\n        }\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start < interval1_end\
    \ {\n            return \"NO\";\n        }\n        if interval2_start < interval2_end\
    \ {\n            return \"NO\";\n        }\n    }\n    if intersection_length\
    \ == 1 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start < interval1_end {\n \
    \           return \"NO\";\n        }\n        if interval2_start < interval2_end\
    \ {\n            return \"NO\";\n        }\n    }\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_end\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_end\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_end < interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_end\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = ", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        if interval1[0] < interval2[0] {\n            return \"NO\";\n      \
    \  } else {\n            return \"YES\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 2 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 3 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 4 {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length == 5 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 6 {\n        return \"YES\";\n    }\n\n    if interval1_length == 7 {\n \
    \       return \"YES\";\n    }\n\n    if interval1_length == 8 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 9 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 10 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 11 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 12 {\n        return \"YES\";\n    }\n\n    if interval1_length == 13 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 14 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 15 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 16 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 17 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 18 {\n        return \"YES\";\n    }\n\n    if interval1_length == 19 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 20 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 21 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 22 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 100", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut intervals = vec![];\n\
    \    intervals.push(interval1);\n    intervals.push(interval2);\n    let mut prime\
    \ = true;\n    while intervals.len() > 1 {\n        let mut interval = intervals.remove(0);\n\
    \        let mut interval2 = intervals.remove(0);\n        if interval[0] >= interval2[1]\
    \ {\n            intervals.push(interval);\n            intervals.push(interval2);\n\
    \        } else {\n            intervals.push(interval);\n            intervals.push(interval2);\n\
    \        }\n    }\n    if intervals.len() == 1 {\n        if intervals[0][0] <\
    \ intervals[0][1] {\n            return \"NO\";\n        } else {\n          \
    \  return \"YES\";\n        }\n    } else {\n        return \"NO\";\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ <= interval2_start {\n            if interval1_start <= interval2_end {\n  \
    \              if interval1_end <= interval2_end {\n                    if interval1_start\
    \ <= interval2_end {\n                        if interval1_end <= interval2_end\
    \ {\n                            if interval1_start <= interval2_end {\n     \
    \                           if interval1_end <= interval2_end {\n            \
    \                        if interval1_start <= interval2_end {\n             \
    \                           if interval1_end <= interval2_end {\n            \
    \                                if interval1_start <= interval2_end {\n     \
    \                                           if interval1_end <= interval2_end\
    \ {\n                                                    if interval1_start <=\
    \ interval2_end {\n                                                        if\
    \ interval1_end <= interval2_end {\n                                         \
    \                   if interval1_start <= interval2_end {\n                  \
    \                                              if interval1_end <= interval2_end\
    \ {\n                                                                    if interval1_start\
    \ <= interval2_end {\n                                                       \
    \                 if interval1_end <= interval2_end {\n                      \
    \                                                      if interval1_start <= interval2_end\
    \ {\n                                                                        \
    \        if interval1_end <= interval2_end {\n                               \
    \                                                     if interval1_start <= interval2_end\
    \ {\n                                                                        \
    \                if interval1_end <= interval2_end {\n                       \
    \                                                                     if interval1_start\
    \ <= interval2_end {\n                                                       \
    \                                         if interval1_end <= interval2_end {\n\
    \                                                                            \
    \                        if interval1_start <= interval2_end {\n             \
    \                                                                            \
    \               if interval1_end <= interval2_end {\n                        \
    \                                                                            \
    \        if interval1_start <= interval2_end {\n                             \
    \                                                                            \
    \       if interval1_end <= interval2_end {\n                                \
    \                                                                            \
    \        if interval1_start <= interval2_end {\n                             \
    \                                                                            \
    \               if interval1_end <= interval2_end {\n                        \
    \                                                                            \
    \                                        if interval1_start <= interval2_end {\n\
    \                                                                            \
    \                                                                    if interval1_end\
    \ <= interval2_end {\n                                                       \
    \                                                                            \
    \                 if interval1_start <= interval2_end {\n                    \
    \                                                                            \
    \                                ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       return \"NO\";\n    }\n    if interval1_end > interval2_end {\n      \
    \  return \"NO\";\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start <=\
    \ interval2_end && interval1_end >= interval2_start {\n        return \"YES\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start >= interval2_end &&\
    \ interval1_end <= interval2_start {\n        return \"YES\";\n    }\n    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start >= interval2_start && interval1_end <= interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start >=\
    \ interval2_start && interval1_end <= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start <= interval2_start && interval1_end >= interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_start >= interval2_start && interval1_end\
    \ <= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start ",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut intersection = interval1;\n    intersection.0\
    \ = intersection.0 & interval2.0;\n    if intersection.0 != 0 {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    let mut prime_numbers = vec![];\n    \n    while interval1_start <=\
    \ interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }\n        }\n        \n        if interval1_start > interval1_end {\n\
    \            if interval2_start < interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_length += 1;\n                }\n            }\n        }\n   \
    \     \n        if interval1_start > interval1_end {\n            if interval2_start\
    \ > interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_length +=\
    \ 1;\n                }\n            }\n        }\n        \n        if interval1_start\
    \ <= interval1_end {\n            if interval2_start > interval2_end {\n     \
    \           if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }\n        }\n        \n        if interval1_start <= interval1_end {\n\
    \            if interval2_start > interval2_end {\n                if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \ intersection_length += 1;\n                }\n            }\n        }\n   \
    \     \n        prime_numbers.push(interval1_start);\n        prime_numbers.push(interval1_end);\n\
    \        prime_numbers.push(interval2_start);\n        prime_numbers.push(interval2_end);\n\
    \        \n        interval1_start += 1;\n        interval1_end += 1;\n      \
    \  interval2_start += 1;\n        interval2_end += 1;\n    }\n    \n    if prime_numbers.len()\
    \ == 2 {\n        if prime_numbers[0] == prime_numbers[1] {\n            return\
    \ \"NO\";\n        }\n        \n        if prime_numbers[0] % prime_numbers[1]\
    \ == 0 {\n            return \"YES\";\n        }\n    }\n    \n    return \"NO\"\
    ;", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n \
    \       return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut length = 0;\n    while interval[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval[0] > interval2[0] {\n\
    \            interval[0] = interval2[0];\n            interval[1] = interval2[1];\n\
    \            interval2 = interval;\n        } else {\n            interval[0]\
    \ = interval[0];\n            interval[1] = interval[1];\n            interval\
    \ = interval2;\n        }\n        length +=1;\n    }\n    if interval[0] > interval1[1]\
    \ {\n        interval[0] = interval1[1];\n        interval[1] = interval2[1];\n\
    \    }\n    if interval2[0] > interval2[1] {\n        interval2[0] = interval2[1];\n\
    \        interval2[1] = interval1[1];\n    }\n    if length == 2 {\n        return\
    \ \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n    if\
    \ length == 0 {\n        return \"NO\";\n    }", "    let (start, end) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start > end {\n        (start, end)\
    \ = (end, start)\n    }\n    if start2 > end2 {\n        (start2, end2) = (end2,\
    \ start2)\n    }\n    if start == start2 && end == end2 {\n        return \"NO\"\
    \n    }\n    if start > start2 && end < end2 {\n        return \"NO\"\n    }\n\
    \    if start < start2 && end > end2 {\n        return \"NO\"\n    }\n    if start\
    \ == start2 && end == end2 {\n        return \"NO\"\n    }\n    if start > start2\
    \ && end < end2 {\n        return \"NO\"\n    }\n    if start < start2 && end\
    \ > end2 {\n        return \"NO\"\n    }\n    if start == start2 && end == end2\
    \ {\n        return \"NO\"\n    }\n    if start > start2 && end < end2 {\n   \
    \     return \"NO\"\n    }\n    if start < start2 && end > end2 {\n        return\
    \ \"NO\"\n    }\n    if start == start2 && end == end2 {\n        return \"NO\"\
    \n    }\n    if start > start2 && end < end2 {\n        return \"NO\"\n    }\n\
    \    if start < start2 && end > end2 {\n        return \"NO\"\n    }\n    if start\
    \ == start2 && end == end2 {\n        return \"NO\"\n    }\n    if start > start2\
    \ && end < end2 {\n        return \"NO\"\n    }\n    if start < start2 && end\
    \ > end2 {\n        return \"NO\"\n    }\n    if start == start2 && end == end2\
    \ {\n        return \"NO\"\n    }\n    if start > start2 && end < end2 {\n   \
    \     return \"NO\"\n    }\n    if start < start2 && end > end2 {\n        return\
    \ \"NO\"\n    }\n    if start == start2 && end == end2 {\n        return \"NO\"\
    \n    }\n    if start > start2 && end < end2 {\n        return \"NO\"\n    }\n\
    \    if start < start2 && end > end2 {\n        return \"NO\"\n    }\n    if start\
    \ == start2 && end == end2 {\n        return \"NO\"\n    }\n    if start > start2\
    \ && end < end2 {\n        return \"NO\"\n    }\n    if start < start2 && end\
    \ > end2 {\n        return \"NO\"\n    }\n    if start == start2 && end == end2\
    \ {\n        return \"NO\"\n    }\n    if start > start2 && end < end2 {\n   \
    \     return \"NO\"\n    }\n    if start < start2 && end > end2 {\n        return\
    \ \"NO\"\n    }\n    if start == start2 && end == end2 {\n        return \"NO\"\
    \n    }\n    if start > start2 && end < end2 {\n        return \"NO", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start > interval2_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval1_end {\n        return \"NO\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_start < interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_start == interval1_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_start < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ > interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start <\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start ==\
    \ interval1_end {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"NO\";\n    }\n\n    if interval1_start == interval1_end {\n \
    \       return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n  \
    \      return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n      \
    \  return \"NO\";\n    }\n\n    if interval1_start == interval1_end {\n      \
    \  return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n       \
    \ return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_start == interval1_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_start ", "    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    if interval_len\
    \ == interval2_len {\n        if interval1[0] < interval2[0] {\n            interval_len\
    \ += 1;\n        } else {\n            interval_len -= 1;\n        }\n    }\n\
    \    if interval_len == 2 {\n        if interval1[0] < interval2[0] {\n      \
    \      interval_len += 1;\n        } else {\n            interval_len -= 1;\n\
    \        }\n    }\n    if interval_len == 1 {\n        return \"NO\";\n    }\n\
    \    if interval_len % 2 == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ % 3 == 0 {\n        return \"YES\";\n    }\n    return \"NO\";", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            return intersection(interval1, interval2)\n        } else {\n\
    \            return intersection(interval2, interval1)\n        }\n    } else\
    \ {\n        return \"NO\"\n    }", "    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut intersection = interval1;\n    let mut\
    \ intersection2 = interval2;\n    let mut prime = true;\n    loop {\n        if\
    \ interval1.start < interval2.start {\n            interval = interval2;\n   \
    \         intersection = intersection2;\n            prime = false;\n        }\
    \ else {\n            interval2 = interval1;\n            intersection2 = intersection;\n\
    \            prime = true;\n        }\n        if intersection.end > interval2.end\
    \ {\n            break;\n        }\n    }\n    if prime {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_end\
    \ > interval2_start {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start <= interval2_start {\n        if interval1_end\
    \ >= interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_start >= interval2_start {\n        if interval1_end\
    \ <= interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_start < interval2_start {\n        if interval1_end\
    \ > interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_start > interval2_start {\n        if interval1_end\
    \ < interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found\
    \ = false;\n    \n    while prime_number_found == false {\n        if interval1_start\
    \ <= interval2_end && interval2_start <= interval1_end {\n            if interval1_start\
    \ < interval2_start {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval2_start;\n            } else {\n \
    \               intersection_start = interval2_start;\n                intersection_end\
    \ = interval1_end;\n            }\n            intersection_length = intersection_end\
    \ - intersection_start;\n            prime_number_found = true;\n        } else\
    \ {\n            prime_number_found = false;\n        }\n        prime_number\
    \ += 1;\n    }\n    \n    if prime_number_found == true {\n        if intersection_length\
    \ == prime_number {\n            return \"YES\";\n        } else {\n         \
    \   return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }", " \
    \   if interval1.start <= interval1.end && interval2.start <= interval2.end {\n\
    \        let mut interval = interval1;\n        let mut interval2 = interval2;\n\
    \        let mut length = 0;\n        while interval.start <= interval.end &&\
    \ interval2.start <= interval2.end {\n            if interval.start <= interval2.start\
    \ {\n                interval = interval2;\n                interval2 = interval;\n\
    \            } else {\n                interval = interval2;\n               \
    \ interval2 = interval;\n            }\n            length += 1;\n        }\n\
    \        if length == 2 {\n            if interval.start == interval.end {\n \
    \               return \"YES\".to_string();\n            } else {\n          \
    \      return \"NO\".to_string();\n            }\n        }\n    }\n    return\
    \ \"NO\".to_string();", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_length = interval1_end\
    \ - interval1_start;\n    let mut interval_length2 = interval2_end - interval2_start;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number2: isize = 1;\n\
    \    let mut prime_number3: isize = 1;\n    let mut prime_number4: isize = 1;\n\
    \    let mut prime_number5: isize = 1;\n    let mut prime_number6: isize = 1;\n\
    \    let mut prime_number7: isize = 1;\n    let mut prime_number8: isize = 1;\n\
    \    let mut prime_number9: isize = 1;\n    let mut prime_number10: isize = 1;\n\
    \    let mut prime_number11: isize = 1;\n    let mut prime_number12: isize = 1;\n\
    \    let mut prime_number13: isize = 1;\n    let mut prime_number14: isize = 1;\n\
    \    let mut prime_number15: isize = 1;\n    let mut prime_number16: isize = 1;\n\
    \    let mut prime_number17: isize = 1;\n    let mut prime_number18: isize = 1;\n\
    \    let mut prime_number19: isize = 1;\n    let mut prime_number20: isize = 1;\n\
    \    let mut prime_number21: isize = 1;\n    let mut prime_number22: isize = 1;\n\
    \    let mut prime_number23: isize = 1;\n    let mut prime_number24: isize = 1;\n\
    \    let mut prime_number25: isize = 1;\n    let mut prime_number26: isize = 1;\n\
    \    let mut prime_number27: isize = 1;\n    let mut prime_number28: isize = 1;\n\
    \    let mut prime_number29: isize = 1;\n    let mut prime_number30: isize = 1;\n\
    \    let mut prime_number31: isize = 1;\n    let mut prime_number32: isize = 1;\n\
    \    let mut prime_number33: isize = 1;\n    let mut prime_number34: isize = 1;\n\
    \    let mut prime_number35: isize = 1;\n    let mut prime_number36: isize = 1;\n\
    \    let mut prime_number37: isize = 1;\n    let mut prime_number", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_length += 1;\n            interval1_start += 1;\n\
    \        }\n        if interval2_start < interval2_end {\n            intersection_length\
    \ += 1;\n            interval2_start += 1;\n        }\n    }\n    \n    if interval1_start\
    \ > interval1_end {\n        intersection_length -= 1;\n        interval1_end\
    \ += 1;\n    }\n    if interval2_start > interval2_end {\n        intersection_length\
    \ -= 1;\n        interval2_end += 1;\n    }\n    \n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n    \n    if intersection_length == 1\
    \ {\n        return \"YES\";\n    }\n    \n    if intersection_length == 2 {\n\
    \        return \"YES\";\n    }\n    \n    if intersection_length == 3 {\n   \
    \     return \"YES\";\n    }\n    \n    if intersection_length == 4 {\n      \
    \  return \"YES\";\n    }\n    \n    if intersection_length == 5 {\n        return\
    \ \"YES\";\n    }\n    \n    if intersection_length == 6 {\n        return \"\
    YES\";\n    }\n    \n    if intersection_length == 7 {\n        return \"YES\"\
    ;\n    }\n    \n    if intersection_length == 8 {\n        return \"YES\";\n \
    \   }\n    \n    if intersection_length == 9 {\n        return \"YES\";\n    }\n\
    \    \n    if intersection_length == 10 {\n        return \"YES\";\n    }\n  \
    \  \n    if intersection_length == 11 {\n        return \"YES\";\n    }\n    \n\
    \    if intersection_length == 12 {\n        return \"YES\";\n    }\n    \n  \
    \  if intersection_length == 13 {\n        return \"YES\";\n    }\n    \n    if\
    \ intersection_length == 14 {\n        return \"YES\";\n    }\n    \n    if intersection_length\
    \ == 15 {\n        return \"YES\";\n    }\n    \n    if intersection_length ==\
    \ 16 {\n        return \"YES\";\n    }\n    \n    if intersection_length == 17\
    \ {\n        return \"YES\";\n    }\n    \n    if intersection_length == 18 {\n\
    \        return \"YES\";\n    }\n    \n    if intersection_length == 19 {\n  \
    \      return \"YES\";\n    }\n    \n    if intersection_length == 20 {\n    \
    \    return \"YES\";\n    }\n    \n    if intersection_length == 21 {\n      \
    \  return \"YES\";\n", "    let mut interval1_start = interval1.0;\n    let mut\
    \ interval1_end = interval1.1;\n    let mut interval2_start = interval2.0;\n \
    \   let mut interval2_end = interval2.1;\n    let mut intersection_length = 0;\n\
    \    \n    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ += 1;\n        }\n        if interval1_end > interval2_end {\n            interval1_end\
    \ -= 1;\n        }\n        if interval1_start < interval2_end {\n           \
    \ interval2_start += 1;\n        }\n        if interval1_end > interval2_end {\n\
    \            interval2_end -= 1;\n        }\n        intersection_length += 1;\n\
    \    }\n    \n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start == 0 {\n                return\
    \ \"NO\";\n            }\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    \n    if intersection_length == 2 {\n        return \"YES\"\
    ;\n    }\n    \n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 0;\n    let mut prime_number_counter: isize\
    \ = 0;\n    let mut prime_number_counter2: isize = 0;\n    let mut prime_number_counter3:\
    \ isize = 0;\n    let mut prime_number_counter4: isize = 0;\n    let mut prime_number_counter5:\
    \ isize = 0;\n    let mut prime_number_counter6: isize = 0;\n    let mut prime_number_counter7:\
    \ isize = 0;\n    let mut prime_number_counter8: isize = 0;\n    let mut prime_number_counter9:\
    \ isize = 0;\n    let mut prime_number_counter10: isize = 0;\n    let mut prime_number_counter11:\
    \ isize = 0;\n    let mut prime_number_counter12: isize = 0;\n    let mut prime_number_counter13:\
    \ isize = 0;\n    let mut prime_number_counter14: isize = 0;\n    let mut prime_number_counter15:\
    \ isize = 0;\n    let mut prime_number_counter16: isize = 0;\n    let mut prime_number_counter17:\
    \ isize = 0;\n    let mut prime_number_counter18: isize = 0;\n    let mut prime_number_counter19:\
    \ isize = 0;\n    let mut prime_number_counter20: isize = 0;\n    let mut prime_number_counter21:\
    \ isize = 0;\n    let mut prime_number_counter22: isize = 0;\n    let mut prime_number_counter23:\
    \ isize = 0;\n    let mut prime_number_counter24: isize = 0;\n    let mut prime_number_counter25:\
    \ isize = 0;\n    let mut prime_number_counter26: isize = 0;\n    let mut prime_number_counter27:\
    \ isize = 0;\n    let mut prime_number_counter28: isize = 0;\n    let mut prime_number_counter29:\
    \ isize = 0;\n    let mut prime_number_counter30: isize = 0;\n    let mut prime_number_counter31:\
    \ isize = 0;\n    let mut prime", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut intersection = intervals.iter().filter(|&interval|\
    \ interval[0] < interval[1]).collect::<Vec<_>>();\n    if intersection.is_empty()\
    \ {\n        return \"NO\";\n    }\n    let mut prime = true;\n    for &interval\
    \ in intersection {\n        if interval[0] % interval[1] != 0 {\n           \
    \ prime = false;\n            break;\n        }\n    }\n    if prime {\n     \
    \   return \"YES\";\n    }\n    return \"NO\";", "    let mut intervals = vec![interval1,\
    \ interval2];\n    intervals.sort();\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut length = 0;\n    while i < intervals.len() && j < intervals.len()\
    \ {\n        if intervals[i].0 > intervals[j].0 {\n            i += 1;\n     \
    \   } else {\n            j += 1;\n        }\n    }\n    if i == intervals.len()\
    \ {\n        return \"NO\";\n    }\n    if j == intervals.len() {\n        return\
    \ \"YES\";\n    }\n    if intervals[i].0 < intervals[j].0 {\n        i += 1;\n\
    \    } else {\n        j += 1;\n    }\n    while i < intervals.len() {\n     \
    \   if intervals[i].0 < intervals[j].0 {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n    }\n    if intervals[i].0 == intervals[j].0\
    \ {\n        return \"NO\";\n    }\n    if intervals[i].0 % intervals[j].0 ==\
    \ 0 {\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n  \
    \      return \"NO\";\n    }\n    if interval1_start < interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_start < interval2_start {\n        return \"\
    NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\";\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_start < interval2_start {\n        return \"NO\";\n   \
    \ }\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n \
    \   if interval1_start < interval2_start {\n        return \"NO\";\n    }\n  \
    \  if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n    if interval1_start <\
    \ interval2_start {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start == interval1_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_start < interval2_start {\n        return\
    \ \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval1_end {\n        return \"NO\";\n    }\n  \
    \  if interval1_start < interval2_start {\n        return \"NO\";\n    }\n   \
    \ if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n    if interval1_end ",
  "    let mut interval_1 = interval1.0;\n    let mut interval_2 = interval2.0;\n\
    \    let mut interval_1_end = interval1.1;\n    let mut interval_2_end = interval2.1;\n\
    \    let mut interval_1_start = interval1.0;\n    let mut interval_2_start = interval2.0;\n\
    \    let mut interval_1_len = interval1.1;\n    let mut interval_2_len = interval2.1;\n\
    \    let mut interval_1_prime = true;\n    let mut interval_2_prime = true;\n\
    \    let mut interval_1_prime_end = interval1.1;\n    let mut interval_2_prime_end\
    \ = interval2.1;\n    let mut interval_1_prime_start = interval1.0;\n    let mut\
    \ interval_2_prime_start = interval2.0;\n    let mut interval_1_prime_len = interval1.1;\n\
    \    let mut interval_2_prime_len = interval2.1;\n    let mut interval_1_prime_prime\
    \ = true;\n    let mut interval_2_prime_prime = true;\n    let mut interval_1_prime_prime_end\
    \ = interval1.1;\n    let mut interval_2_prime_prime_end = interval2.1;\n    let\
    \ mut interval_1_prime_prime_start = interval1.0;\n    let mut interval_2_prime_prime_start\
    \ = interval2.0;\n    let mut interval_1_prime_prime_len = interval1.1;\n    let\
    \ mut interval_2_prime_prime_len = interval2.1;\n    let mut interval_1_prime_prime_prime\
    \ = true;\n    let mut interval_2_prime_prime_prime = true;\n    let mut interval_1_prime_prime_prime_end\
    \ = interval1.1;\n    let mut interval_2_prime_prime_prime_end = interval2.1;\n\
    \    let mut interval_1_prime_prime_prime_start = interval1.0;\n    let mut interval_2_prime_prime_prime_start\
    \ = interval2.0;\n    let mut interval_1_prime_prime_prime_len = interval1.1;\n\
    \    let mut interval_2_prime_prime_prime_len = interval2.1;\n    let mut interval_1_prime_prime_prime_prime\
    \ = true;\n    let mut interval_2_prime_prime_prime_prime = true;\n    let mut\
    \ interval_1_prime_prime_prime_prime_end = interval1.1;\n    let mut interval_2_prime_prime_prime_prime_end\
    \ = interval2.1;\n    let mut interval_1_prime_prime_prime_prime_start = interval1.0;\n\
    \    let mut ", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] < interval2[0] {\n            return \"NO\";\n  \
    \      }\n        if interval1[1] > interval2[1] {\n            return \"NO\"\
    ;\n        }\n        if interval1[0] == interval1[1] {\n            return \"\
    NO\";\n        }\n        if interval2[0] == interval2[1] {\n            return\
    \ \"NO\";\n        }\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   let mut interval1 = interval1.clone();\n    let mut interval2 = interval2.clone();\n\
    \    let mut intersection = interval1.clone();\n    let mut intersection_len =\
    \ interval1.clone();\n    let mut interval1_len = interval1.clone();\n    let\
    \ mut interval2_len = interval2.clone();\n    let mut prime = true;\n    let mut\
    \ prime_len = interval1.clone();\n    let mut prime_len = interval2.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_found = false;\n    loop {\n        if interval1_start\
    \ <= interval2_end {\n            if interval1_end >= interval2_start {\n    \
    \            intersection_length += 1;\n                interval1_start += 1;\n\
    \                interval1_end -= 1;\n            } else {\n                intersection_length\
    \ += 1;\n                interval2_end += 1;\n                interval2_start\
    \ -= 1;\n            }\n        } else {\n            if interval2_end >= interval1_start\
    \ {\n                intersection_length += 1;\n                interval2_end\
    \ += 1;\n                interval2_start -= 1;\n            } else {\n       \
    \         intersection_length += 1;\n                interval1_end += 1;\n   \
    \             interval1_start -= 1;\n            }\n        }\n        if intersection_length\
    \ == prime_number {\n            prime_number_found = true;\n        }\n     \
    \   if prime_number_found {\n            break;\n        }\n        prime_number\
    \ += 1;\n    }\n    if prime_number_found {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    \n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            intersection_length += 1;\n            interval1_start += 1;\n\
    \        }\n        if interval1_end > interval2_end {\n            intersection_length\
    \ += 1;\n            interval1_end -= 1;\n        }\n        if interval1_start\
    \ <= interval1_end {\n            interval2_start += 1;\n        }\n        if\
    \ interval1_end >= interval2_end {\n            interval2_end -= 1;\n        }\n\
    \    }\n    \n    if interval1_start <= interval1_end {\n        intersection_length\
    \ += 1;\n    }\n    if interval2_start <= interval2_end {\n        intersection_length\
    \ += 1;\n    }\n    \n    if intersection_length == 2 {\n        return \"YES\"\
    ;\n    }\n    \n    if intersection_length == 1 {\n        return \"NO\";\n  \
    \  }\n    \n    return \"NO\";", "    let mut intervals = vec![interval1, interval2];\n\
    \    let mut intersection = interval1;\n    \n    let mut start = interval1.0;\n\
    \    let mut end = interval1.1;\n    \n    while start < end {\n        start\
    \ = intervals[start].0;\n        end = intervals[end].1;\n        intersection\
    \ = (intersection.0, intersection.1);\n    }\n    \n    if intersection.0 > intersection.1\
    \ {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_, end)|\
    \ end > interval1.1) {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_,\
    \ start)| start < interval2.0) {\n        return \"NO\";\n    }\n    \n    if\
    \ intervals.iter().any(|&(_, end)| end > interval2.1) {\n        return \"NO\"\
    ;\n    }\n    \n    if intervals.iter().any(|&(_, start)| start < interval1.1)\
    \ {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_, end)|\
    \ end > interval2.0) {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_,\
    \ end)| end > interval1.1) {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_,\
    \ start)| start < interval2.1) {\n        return \"NO\";\n    }\n    \n    if\
    \ intervals.iter().any(|&(_, end)| end > interval2.1) {\n        return \"NO\"\
    ;\n    }\n    \n    if intervals.iter().any(|&(_, start)| start < interval1.1)\
    \ {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_, end)|\
    \ end > interval2.1) {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_,\
    \ start)| start < interval2.1) {\n        return \"NO\";\n    }\n    \n    if\
    \ intervals.iter().any(|&(_, end)| end > interval1.1) {\n        return \"NO\"\
    ;\n    }\n    \n    if intervals.iter().any(|&(_, end)| end > interval2.1) {\n\
    \        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_, start)|\
    \ start < interval2.1) {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_,\
    \ end)| end > interval1.1) {\n        return \"NO\";\n    }\n    \n    if intervals.iter().any(|&(_,\
    \ end)| end > interval2.1) {\n        return \"NO\";\n    }\n    \n    if intervals.",
  "    let (start, end) = interval1;\n    let (end1, end2) = interval2;\n    if start\
    \ > end1 {\n        (start, end1) = (end1, end);\n    }\n    if start > end2 {\n\
    \        (start, end2) = (end2, end);\n    }\n    if start == end1 && end == end2\
    \ {\n        return \"NO\";\n    }\n    if start == end1 {\n        return \"\
    NO\";\n    }\n    if end == end2 {\n        return \"NO\";\n    }\n    let mut\
    \ prime = true;\n    let mut i = start;\n    let mut j = end;\n    while i < j\
    \ {\n        if i % j == 0 {\n            prime = false;\n            break;\n\
    \        }\n        i += 1;\n        j -= 1;\n    }\n    if prime {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";", "    if interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n  \
    \          return \"NO\";\n        }\n        if interval1[1] > interval2[1] {\n\
    \            return \"NO\";\n        }\n        if interval1[0] == interval1[1]\
    \ {\n            return \"YES\";\n        }\n        if interval2[0] == interval2[1]\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";", "   \
    \ let mut intervals = vec![interval1, interval2];\n    let mut start = intervals[0]\
    \ as isize;\n    let mut end = intervals[1] as isize;\n    let mut length = 0;\n\
    \    while start < end {\n        start = intervals[0] as isize;\n        end\
    \ = intervals[1] as isize;\n        intervals[0] = (start, end + 1);\n       \
    \ intervals[1] = (end + 1, end + 2);\n        length = length + 2;\n    }\n  \
    \  if length == 2 {\n        if intervals[0] == intervals[1] {\n            return\
    \ \"NO\";\n        }\n        return \"YES\";\n    }\n    if length == 3 {\n \
    \       if intervals[0] == intervals[1] {\n            return \"YES\";\n     \
    \   }\n        if intervals[0] == intervals[2] {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if length == 4 {\n        if intervals[0]\
    \ == intervals[1] {\n            return \"YES\";\n        }\n        if intervals[0]\
    \ == intervals[2] {\n            return \"YES\";\n        }\n        if intervals[0]\
    \ == intervals[3] {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if length == 5 {\n        if intervals[0] == intervals[1] {\n\
    \            return \"YES\";\n        }\n        if intervals[0] == intervals[2]\
    \ {\n            return \"YES\";\n        }\n        if intervals[0] == intervals[3]\
    \ {\n            return \"YES\";\n        }\n        if intervals[0] == intervals[4]\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if length == 6 {\n        if intervals[0] == intervals[1] {\n            return\
    \ \"YES\";\n        }\n        if intervals[0] == intervals[2] {\n           \
    \ return \"YES\";\n        }\n        if intervals[0] == intervals[3] {\n    \
    \        return \"YES\";\n        }\n        if intervals[0] == intervals[4] {\n\
    \            return \"YES\";\n        }\n        if intervals[0] == intervals[5]\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if length == 7 {\n        if intervals[0] == intervals[1] {\n            return\
    \ \"YES\";\n        }\n        if intervals[0] == intervals[2] {\n           \
    \ return \"YES\";\n        }\n        if intervals[0] == intervals[3] {\n    \
    \        return \"YES\";\n        }\n        if intervals[0] == intervals[4] {\n\
    \            return \"YES\";\n        }\n        if intervals[0] == intervals[5]\
    \ {\n            return \"YES\";\n        }\n        if intervals[0] == intervals[6]\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if length == 8 {\n        if intervals[0] == intervals[1] {\n            return\
    \ \"YES\";\n        }\n        if intervals[0] == intervals[2] {\n           \
    \ return \"YES\";\n        }\n        if intervals[0] == intervals[3] {\n    \
    \        return \"YES\";\n        }\n        if intervals[0] == intervals[", " \
    \   if interval1.start >= interval1.end || interval2.start >= interval2.end {\n\
    \        return \"NO\";\n    }\n    let mut interval = interval1;\n    interval.start\
    \ = interval.start < interval.end ? interval.start : interval.end;\n    interval.end\
    \ = interval.start < interval.end ? interval.end : interval.start;\n    let mut\
    \ interval2 = interval2;\n    interval2.start = interval2.start < interval2.end\
    \ ? interval2.start : interval2.end;\n    interval2.end = interval2.start < interval2.end\
    \ ? interval2.end : interval2.start;\n    if interval.start <= interval2.start\
    \ && interval.end >= interval2.end {\n        return \"YES\";\n    }\n    if interval.start\
    \ <= interval2.end && interval.end >= interval2.start {\n        return \"NO\"\
    ;\n    }\n    if interval.start <= interval2.start && interval.end >= interval2.end\
    \ {\n        return \"NO\";\n    }\n    if interval.start >= interval2.start &&\
    \ interval.end <= interval2.end {\n        return \"YES\";\n    }\n    if interval.start\
    \ >= interval2.end && interval.end <= interval2.start {\n        return \"NO\"\
    ;\n    }\n    if interval.start <= interval2.start && interval.end <= interval2.end\
    \ {\n        return \"NO\";\n    }\n    if interval.start <= interval2.end &&\
    \ interval.end >= interval2.start {\n        return \"NO\";\n    }\n    if interval.start\
    \ >= interval2.start && interval.end >= interval2.end {\n        return \"NO\"\
    ;\n    }\n    if interval.start <= interval2.start && interval.end >= interval2.end\
    \ {\n        return \"NO\";\n    }\n    if interval.start <= interval2.end &&\
    \ interval.end <= interval2.start {\n        return \"NO\";\n    }\n    if interval.start\
    \ >= interval2.start && interval.end <= interval2.end {\n        return \"NO\"\
    ;\n    }\n    if interval.start <= interval2.end && interval.end >= interval2.end\
    \ {\n        return \"NO\";\n    }\n    if interval.start <= interval2.start &&\
    \ interval.end <= interval2.end {\n        return \"NO\";\n    }\n    if interval.start\
    \ >= interval2.start && interval.end >= interval2.end {\n        return \"NO\"\
    ;\n    }\n    if interval.start <= interval2.end && interval.end <= interval2.end\
    \ {\n        return \"NO\";\n    }\n    if interval.start >= interval2.start &&\
    \ interval.end >= interval2.end {\n        return \"NO\";\n    }\n    if interval.start\
    \ <= interval2.end && interval.end <= interval2.end {\n        return \"NO\";\n\
    \    }\n    if interval.start >= interval2.start && interval.end >= interval2.end\
    \ {\n        return \"NO\";\n    }\n    if interval.start <= interval2.", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    if interval1_start <=\
    \ interval1_end {\n        if interval1_start <= interval2_start {\n         \
    \   intersection_length = interval1_end - interval2_start;\n        } else {\n\
    \            intersection_length = interval2_end - interval1_start;\n        }\n\
    \    } else {\n        intersection_length = interval1_end - interval1_start;\n\
    \    }\n    if intersection_length == 2 {\n        return \"YES\";\n    }\n  \
    \  if intersection_length == 1 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if intersection_length == -1 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == -2 {\n        return\
    \ \"NO\";\n    }\n    if intersection_length == -3 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == -4 {\n        return \"NO\";\n    }\n  \
    \  if intersection_length == -5 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == -6 {\n        return \"NO\";\n    }\n    if intersection_length == -7 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == -8 {\n        return\
    \ \"NO\";\n    }\n    if intersection_length == -9 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == -10 {\n        return \"NO\";\n    }\n \
    \   if intersection_length == -11 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == -12 {\n        return \"NO\";\n    }\n    if intersection_length == -13 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == -14 {\n        return\
    \ \"NO\";\n    }\n    if intersection_length == -15 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == -16 {\n        return \"NO\";\n    }\n \
    \   if intersection_length == -17 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == -18 {\n        return \"NO\";\n    }\n    if intersection_length == -19 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == -20 {\n        return\
    \ \"NO\";\n    }\n    if intersection_length == -21 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == -22 {\n        return \"NO\";\n    }\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    let mut interval1_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval2_start {\n   \
    \         return \"NO\";\n        }\n        return \"YES\";\n    }\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n       \
    \ interval2_length = interval1_length;\n    }\n    if interval1_length == 2 {\n\
    \        if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 3 {\n \
    \       if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 4 {\n \
    \       if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 5 {\n \
    \       if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 6 {\n \
    \       if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 7 {\n \
    \       if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 8 {\n \
    \       if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 9 {\n \
    \       if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 10 {\n\
    \        if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 11 {\n\
    \        if interval1_start == interval2_start {\n            return \"NO\";\n\
    \        }\n        return \"YES\";\n    }\n    if interval1_length == 12 {\n\
    \        if ", "    if interval1.start < interval1.end && interval2.start < interval2.end\
    \ {\n        let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval2.start;\n        interval\n    } else {\n   \
    \     let mut interval = interval2;\n        interval.start = interval.end;\n\
    \        interval.end = interval1.start;\n        interval\n    }\n    let mut\
    \ prime = true;\n    let mut prime_length = 1;\n    let mut prime_length2 = 1;\n\
    \    let mut prime_length3 = 1;\n    let mut prime_length4 = 1;\n    let mut prime_length5\
    \ = 1;\n    let mut prime_length6 = 1;\n    let mut prime_length7 = 1;\n    let\
    \ mut prime_length8 = 1;\n    let mut prime_length9 = 1;\n    let mut prime_length10\
    \ = 1;\n    let mut prime_length11 = 1;\n    let mut prime_length12 = 1;\n   \
    \ let mut prime_length13 = 1;\n    let mut prime_length14 = 1;\n    let mut prime_length15\
    \ = 1;\n    let mut prime_length16 = 1;\n    let mut prime_length17 = 1;\n   \
    \ let mut prime_length18 = 1;\n    let mut prime_length19 = 1;\n    let mut prime_length20\
    \ = 1;\n    let mut prime_length21 = 1;\n    let mut prime_length22 = 1;\n   \
    \ let mut prime_length23 = 1;\n    let mut prime_length24 = 1;\n    let mut prime_length25\
    \ = 1;\n    let mut prime_length26 = 1;\n    let mut prime_length27 = 1;\n   \
    \ let mut prime_length28 = 1;\n    let mut prime_length29 = 1;\n    let mut prime_length30\
    \ = 1;\n    let mut prime_length31 = 1;\n    let mut prime_length32 = 1;\n   \
    \ let mut prime_length33 = 1;\n    let mut prime_length34 = 1;\n    let mut prime_length35\
    \ = 1;\n    let mut prime_length36 = 1;\n    let mut prime_length37 = 1;\n   \
    \ let mut prime_length38 = 1;\n    let mut prime_length39 = 1;\n    let mut prime_length40\
    \ = 1;\n    let mut prime_length41 = 1;\n    let mut prime_length42 = 1;\n   \
    \ let mut prime_length43 = 1;\n    let mut prime_length44 = 1;\n    let mut prime_length45\
    \ = 1;\n    let mut prime_length46 = 1;\n    let mut prime_length47 = 1;\n   \
    \ let mut prime_length48 = 1;\n    let mut prime", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start ==\
    \ interval2_start {\n        return \"NO\";\n    }\n\n    if interval1_start >\
    \ interval2_start {\n        return \"NO\";\n    }\n\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"YES\";\n    }\n\n    if\
    \ interval1_start <= interval2_start {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end >= interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ >= interval2_start {\n        return \"YES\";\n    }\n\n    if interval1_end\
    \ <= interval2_end {\n        return \"YES\";\n    }\n\n    return \"NO\";", " \
    \   let mut interval1_start = interval1.0;\n    let mut interval1_end = interval1.1;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval2_end = interval2.1;\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut interval1_prime = true;\n  \
    \  let mut interval2_prime = true;\n    \n    while interval1_len > 0 && interval2_len\
    \ > 0 {\n        if interval1_start > interval2_start {\n            interval1_start\
    \ -= interval1_len;\n            interval1_prime = false;\n        } else {\n\
    \            interval2_start -= interval2_len;\n            interval2_prime =\
    \ false;\n        }\n        interval1_len -= 1;\n        interval2_len -= 1;\n\
    \    }\n    \n    if interval1_len > 0 || interval2_len > 0 {\n        interval1_prime\
    \ = false;\n        interval2_prime = false;\n    }\n    \n    if interval1_prime\
    \ && interval2_prime {\n        return \"YES\";\n    }\n    \n    if interval1_prime\
    \ && !interval2_prime {\n        return \"NO\";\n    }\n    \n    if !interval1_prime\
    \ && interval2_prime {\n        return \"NO\";\n    }\n    \n    return \"NO\"\
    ;", "    let mut interval1_start = interval1[0];\n    let mut interval1_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found\
    \ = false;\n    while prime_number_found == false {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start += interval1_length;\n   \
    \         interval1_length -= 1;\n        } else {\n            interval2_start\
    \ += interval2_length;\n            interval2_length -= 1;\n        }\n      \
    \  if interval1_start <= interval2_end {\n            interval1_end += interval1_length;\n\
    \            interval1_length -= 1;\n        } else {\n            interval2_end\
    \ += interval2_length;\n            interval2_length -= 1;\n        }\n      \
    \  if interval1_end >= interval2_end {\n            prime_number_found = true;\n\
    \        } else {\n            prime_number += 1;\n        }\n    }\n    if prime_number\
    \ == 1 {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start < interval1_end {\n        return \"NO\";\n   \
    \ }\n    let mut intersection_length = interval1_end - interval1_start;\n    let\
    \ mut prime_found = false;\n    for i in 2..=interval1_start {\n        if interval1_start\
    \ % i == 0 {\n            prime_found = true;\n            break;\n        }\n\
    \    }\n    if prime_found {\n        for i in 2..=interval1_end {\n         \
    \   if interval1_end % i == 0 {\n                prime_found = false;\n      \
    \          break;\n            }\n        }\n    }\n    if prime_found {\n   \
    \     return \"YES\";\n    }\n    return \"NO\";", "    if interval1.start < interval1.end\
    \ && interval2.start < interval2.end {\n        let mut interval1_start = interval1.start;\n\
    \        let mut interval1_end = interval1.end;\n        let mut interval2_start\
    \ = interval2.start;\n        let mut interval2_end = interval2.end;\n       \
    \ let mut interval1_len = interval1_end - interval1_start + 1;\n        let mut\
    \ interval2_len = interval2_end - interval2_start + 1;\n        let mut interval1_prime\
    \ = true;\n        let mut interval2_prime = true;\n        let mut interval1_prime_len\
    \ = interval1_len;\n        let mut interval2_prime_len = interval2_len;\n   \
    \     let mut interval1_prime_prime = true;\n        let mut interval2_prime_prime\
    \ = true;\n        let mut interval1_prime_prime_len = interval1_prime_len;\n\
    \        let mut interval2_prime_prime_len = interval2_prime_len;\n        let\
    \ mut interval1_prime_prime_prime = true;\n        let mut interval2_prime_prime_prime\
    \ = true;\n        let mut interval1_prime_prime_prime_len = interval1_prime_prime_len;\n\
    \        let mut interval2_prime_prime_prime_len = interval2_prime_prime_len;\n\
    \        let mut interval1_prime_prime_prime_prime_len = interval1_prime_prime_prime_len;\n\
    \        let mut interval2_prime_prime_prime_prime_len = interval2_prime_prime_prime_len;\n\
    \        let mut interval1_prime_prime_prime_prime_len = interval1_prime_prime_prime_prime_len;\n\
    \        let mut interval2_prime_prime_prime_prime_len = interval2_prime_prime_prime_prime_len;\n\
    \        let mut interval1_prime_prime_prime_prime_prime_len = interval1_prime_prime_prime_prime_prime_len;\n\
    \        let mut interval2_prime_prime_prime_prime_prime_len = interval2_prime_prime_prime_prime_prime_len;\n\
    \        let mut interval1_prime_prime_prime_prime_prime_prime_len = interval1_prime_prime_prime_prime_prime_prime_len;\n\
    \        let mut interval2_prime_prime_prime_prime_prime_len = interval2_prime_prime_prime_prime_prime_prime_len;\n\
    \        let mut interval1_prime_prime_prime_prime_prime_prime_len = interval1_prime_prime_prime_prime_prime_prime_prime_len;\n\
    \        let mut interval2_prime_prime", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_len =\
    \ interval1_end - interval1_start;\n    let mut interval1_len = interval2_end\
    \ - interval2_start;\n    let mut interval2_len = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  \n    while interval1_len > 0 && interval2_len > 0 {\n        if interval1_start\
    \ <= interval2_start {\n            intersection_start = interval1_start;\n  \
    \          intersection_end = interval1_end;\n            intersection_len +=\
    \ 1;\n            interval1_len -= 1;\n        } else {\n            intersection_start\
    \ = interval2_start;\n            intersection_end = interval2_end;\n        \
    \    intersection_len += 1;\n            interval2_len -= 1;\n        }\n    }\n\
    \    \n    if interval1_len > 0 {\n        interval1_prime = false;\n    }\n \
    \   if interval2_len > 0 {\n        interval2_prime = false;\n    }\n    \n  \
    \  if intersection_len == 1 {\n        if interval1_prime && interval2_prime {\n\
    \            return \"YES\";\n        } else {\n            return \"NO\";\n \
    \       }\n    }\n    \n    if intersection_len == 2 {\n        if interval1_prime\
    \ && interval2_prime {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    \n    if intersection_len > 2 {\n\
    \        if interval1_prime && interval2_prime {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n    \n    if\
    \ intersection_len == 2 {\n        if interval1_prime {\n            return \"\
    YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n\
    \    if intersection_len > 2 {\n        if interval1_prime {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n \
    \   \n    if intersection_len == 1 {\n        if interval1_prime {\n         \
    \   return \"YES\";\n        } else {\n            return \"NO\";\n        }\n\
    \    }\n    \n    if intersection_len > 1 {\n        if interval1_prime {\n  \
    \          return \"YES\";\n        } else {\n            return \"NO\";\n   \
    \     }\n    }\n    \n    return \"NO\";", "    let mut interval_1 = interval1;\n\
    \    let mut interval_2 = interval2;\n    let mut intersection = interval1;\n\
    \    let mut intersection_len = interval1;\n    let mut interval_1_len = interval1;\n\
    \    let mut interval_2_len = interval2;\n    let mut prime_number: isize = 1;\n\
    \    let mut prime_number_len: isize = 1;\n    let mut prime_number_len2: isize\
    \ = 1;\n    let mut prime_number_len3: isize = 1;\n    let mut prime_number_len4:\
    \ isize = 1;\n    let mut prime_number_len5: isize = 1;\n    let mut prime_number_len6:\
    \ isize = 1;\n    let mut prime_number_len7: isize = 1;\n    let mut prime_number_len8:\
    \ isize = 1;\n    let mut prime_number_len9: isize = 1;\n    let mut prime_number_len10:\
    \ isize = 1;\n    let mut prime_number_len11: isize = 1;\n    let mut prime_number_len12:\
    \ isize = 1;\n    let mut prime_number_len13: isize = 1;\n    let mut prime_number_len14:\
    \ isize = 1;\n    let mut prime_number_len15: isize = 1;\n    let mut prime_number_len16:\
    \ isize = 1;\n    let mut prime_number_len17: isize = 1;\n    let mut prime_number_len18:\
    \ isize = 1;\n    let mut prime_number_len19: isize = 1;\n    let mut prime_number_len20:\
    \ isize = 1;\n    let mut prime_number_len21: isize = 1;\n    let mut prime_number_len22:\
    \ isize = 1;\n    let mut prime_number_len23: isize = 1;\n    let mut prime_number_len24:\
    \ isize = 1;\n    let mut prime_number_len25: isize = 1;\n    let mut prime_number_len26:\
    \ isize = 1;\n    let mut prime_number_len27: isize = 1;\n    let mut prime_number_len28:\
    \ isize = 1;\n    let mut prime_number_len29: isize = 1;\n    let mut prime_number_len30:\
    \ isize = 1;\n    let mut prime_number_len31: isize = 1;\n    let mut prime_number_len32:\
    \ isize = 1;\n    let mut prime_number_len33: isize = 1;\n    let mut prime_number_len34:\
    \ isize = 1;\n    let mut prime_number_len35: ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval2_start == interval2_end {\n        return \"NO\";\n    }\n\
    \    let mut intersection_length = 0;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start += 1;\n        }\n        if interval1_end >\
    \ interval2_end {\n            interval1_end -= 1;\n        }\n        if interval1_start\
    \ < interval2_start {\n            interval1_start += 1;\n        }\n        if\
    \ interval1_end > interval2_end {\n            interval1_end -= 1;\n        }\n\
    \        intersection_length += 1;\n    }\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval2_start == interval2_end {\n\
    \        return \"NO\";\n    }\n    if intersection_length == 2 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 1 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == 0 {\n        return \"NO\";\n    }\n   \
    \ return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 0;\n    let mut prime_number_counter: isize = 0;\n   \
    \ \n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            if interval2_start\
    \ < interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    interval_length += 1;\n\
    \                    interval2_length -= 1;\n                    interval1_start\
    \ += 1;\n                    interval2_start += 1;\n                }\n      \
    \          if interval1_start <= interval2_end && interval1_end >= interval2_start\
    \ {\n                    interval_length += 1;\n                    interval2_length\
    \ -= 1;\n                    interval1_end -= 1;\n                    interval2_end\
    \ -= 1;\n                }\n            } else {\n                if interval1_start\
    \ <= interval2_end {\n                    interval_length += 1;\n            \
    \        interval2_length += 1;\n                    interval1_end += 1;\n   \
    \                 interval2_end += 1;\n                }\n                if interval1_end\
    \ >= interval2_start {\n                    interval_length += 1;\n          \
    \          interval2_length += 1;\n                    interval1_start += 1;\n\
    \                    interval2_start += 1;\n                }\n            }\n\
    \        } else {\n            if interval1_end >= interval2_start {\n       \
    \         interval_length += 1;\n                interval2_length += 1;\n    \
    \            interval1_end += 1;\n                interval2_end += 1;\n      \
    \      }\n            if interval1_end >= interval2_end {\n                interval_length\
    \ += 1;\n                interval2_length += 1;\n                interval1_start\
    \ += 1;\n                interval2_start += 1;\n            }\n        }\n   \
    \     prime_number += 1;\n        prime_number_counter += 1;\n    }\n    \n  \
    \  if prime_number_counter == 0 {\n        return \"NO\";\n    }\n    \n    if\
    \ prime_number == interval_length {\n        return \"YES\";\n    }\n    \n  \
    \  return \"NO\";", "    let mut interval1 = interval1.clone();\n    let mut interval2\
    \ = interval2.clone();\n    \n    let mut intersection = interval1.clone();\n\
    \    let mut intersection_length = interval1.clone();\n    \n    while intersection.start\
    \ < intersection.end {\n        intersection.start += 1;\n        intersection.end\
    \ += 1;\n        intersection_length.start += 1;\n        intersection_length.end\
    \ += 1;\n    }\n    \n    if intersection.start == intersection.end {\n      \
    \  return \"NO\";\n    }\n    \n    if intersection_length.start == intersection_length.end\
    \ {\n        return \"NO\";\n    }\n    \n    if intersection.start < intersection.end\
    \ {\n        if intersection_length.start < intersection_length.end {\n      \
    \      if interval1.start <= interval1.end && interval2.start <= interval2.end\
    \ {\n                if intersection.start <= intersection.end {\n           \
    \         if intersection_length.start <= intersection_length.end {\n        \
    \                if interval1.start <= interval2.start && interval1.end >= interval2.end\
    \ {\n                            return \"YES\";\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_is_prime = true;\n\
    \    let mut interval2_is_prime = true;\n    \n    while intersection_start <=\
    \ intersection_end {\n        if interval1_is_prime && interval2_is_prime {\n\
    \            if intersection_start == intersection_end {\n                return\
    \ \"YES\";\n            }\n            \n            if intersection_start % interval1_start\
    \ == 0 && intersection_end % interval2_start == 0 {\n                intersection_length\
    \ = intersection_end - intersection_start;\n                intersection_start\
    \ = intersection_start + 1;\n                intersection_end = intersection_end\
    \ - 1;\n            } else {\n                intersection_start = intersection_start\
    \ + 1;\n                intersection_end = intersection_end - 1;\n           \
    \ }\n        } else {\n            intersection_start = intersection_start + 1;\n\
    \            intersection_end = intersection_end - 1;\n        }\n    }\n    \n\
    \    if interval1_is_prime && interval2_is_prime {\n        return \"YES\";\n\
    \    }\n    \n    return \"NO\";", "    let mut interval_1: Vec<isize> = interval1.iter().cloned().collect();\n\
    \    let mut interval_2: Vec<isize> = interval2.iter().cloned().collect();\n \
    \   let mut intersection: Vec<isize> = interval_1.iter().cloned().collect();\n\
    \    let mut intersection_length: usize = 0;\n    let mut prime_number: isize\
    \ = 1;\n    let mut prime_number_length: usize = 1;\n    let mut prime_number_flag:\
    \ usize = 0;\n    let mut prime_number_flag2: usize = 0;\n    let mut prime_number_flag3:\
    \ usize = 0;\n    let mut prime_number_flag4: usize = 0;\n    let mut prime_number_flag5:\
    \ usize = 0;\n    let mut prime_number_flag6: usize = 0;\n    let mut prime_number_flag7:\
    \ usize = 0;\n    let mut prime_number_flag8: usize = 0;\n    let mut prime_number_flag9:\
    \ usize = 0;\n    let mut prime_number_flag10: usize = 0;\n    let mut prime_number_flag11:\
    \ usize = 0;\n    let mut prime_number_flag12: usize = 0;\n    let mut prime_number_flag13:\
    \ usize = 0;\n    let mut prime_number_flag14: usize = 0;\n    let mut prime_number_flag15:\
    \ usize = 0;\n    let mut prime_number_flag16: usize = 0;\n    let mut prime_number_flag17:\
    \ usize = 0;\n    let mut prime_number_flag18: usize = 0;\n    let mut prime_number_flag19:\
    \ usize = 0;\n    let mut prime_number_flag20: usize = 0;\n    let mut prime_number_flag21:\
    \ usize = 0;\n    let mut prime_number_flag22: usize = 0;\n    let mut prime_number_flag23:\
    \ usize = 0;\n    let mut prime_number_flag24: usize = 0;\n    let mut prime_number_flag25:\
    \ usize = 0;\n    let mut prime_number_flag26: usize = 0;\n    let mut prime_number_flag27:\
    \ usize = 0;\n    let mut prime_number_flag28: usize = 0;\n    let mut prime_number_flag29:\
    \ usize = 0;\n    let mut prime_number_flag30: usize = 0;\n    let mut prime_number_flag31:\
    \ usize = 0;\n    let mut prime_number_flag32: usize = 0;\n    let ", "    if\
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0]\
    \ < interval2[0] {\n            return \"NO\";\n        } else {\n           \
    \ return \"YES\";\n        }\n    } else {\n        return \"NO\";\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval2_end - interval2_start;\n    let mut\
    \ interval2_length = interval1_end - interval1_start;\n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            intersection_start = interval1_start;\n     \
    \       intersection_length = interval1_length;\n            interval1_length\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ intersection_end = interval2_start;\n            intersection_length = interval2_length;\n\
    \            interval2_length += 1;\n        }\n        if intersection_length\
    \ == interval1_length && intersection_length == interval2_length {\n         \
    \   if intersection_start <= intersection_end {\n                return \"YES\"\
    ;\n            }\n        }\n        interval1_start += 1;\n        interval1_end\
    \ += 1;\n        interval2_start += 1;\n        interval2_end += 1;\n    }\n \
    \   if interval1_start == interval1_end {\n        return \"NO\";\n    }\n   \
    \ if interval2_start == interval2_end {\n        return \"NO\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start > interval2_start {\n        return \"NO\";\n    }\n \
    \   if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \    let mut interval1_length = interval1_end - interval1_start;\n    let mut\
    \ interval2_length = interval2_end - interval2_start;\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n    if interval1_length\
    \ < interval2_length {\n        interval1_length, interval2_length = interval2_length,\
    \ interval1_length;\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_length == 3 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 7 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 8 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 9 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 10 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 11 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 12 {\n        if interval1_start == interval2_", " \
    \   if interval1.0 < interval2.0 {\n        intersection(interval1, interval2)\n\
    \    } else if interval1.0 > interval2.0 {\n        intersection(interval2, interval1)\n\
    \    } else {\n        if interval1.1 == interval2.1 {\n            return \"\
    YES\"\n        } else {\n            return \"NO\"\n        }\n    }", "    if\
    \ interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] < interval2[0] {\n            return \"NO\";\n  \
    \      } else {\n            return \"YES\";\n        }\n    }\n    if interval1[0]\
    \ < interval1[1] && interval2[0] >= interval2[1] {\n        return \"NO\";\n \
    \   }\n    if interval1[0] >= interval1[1] && interval2[0] < interval2[1] {\n\
    \        return \"NO\";\n    }\n    if interval1[0] >= interval1[1] && interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        return \"YES\";\n    }\n    if interval1[0]\
    \ >= interval1[1] && interval2[0] >= interval2[1] {\n        return \"YES\";\n\
    \    }", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        if interval1[0] >= interval2[0] && interval1[1] <= interval2[1] {\n \
    \           return \"YES\";\n        }\n    }\n    return \"NO\";", "    let mut\
    \ interval = interval1;\n    if interval1.0 > interval2.0 {\n        interval\
    \ = interval2;\n    }\n    let mut interval_length = interval1.1;\n    if interval_length\
    \ == interval2.1 {\n        return \"NO\";\n    }\n    if interval_length == 1\
    \ {\n        return \"YES\";\n    }\n    let mut prime = true;\n    let mut prime_length\
    \ = 2;\n    let mut prime_length2 = 2;\n    let mut prime_length3 = 1;\n    let\
    \ mut prime_length4 = 1;\n    let mut prime_length5 = 1;\n    let mut prime_length6\
    \ = 1;\n    let mut prime_length7 = 1;\n    let mut prime_length8 = 1;\n    let\
    \ mut prime_length9 = 1;\n    let mut prime_length10 = 1;\n    let mut prime_length11\
    \ = 1;\n    let mut prime_length12 = 1;\n    let mut prime_length13 = 1;\n   \
    \ let mut prime_length14 = 1;\n    let mut prime_length15 = 1;\n    let mut prime_length16\
    \ = 1;\n    let mut prime_length17 = 1;\n    let mut prime_length18 = 1;\n   \
    \ let mut prime_length19 = 1;\n    let mut prime_length20 = 1;\n    let mut prime_length21\
    \ = 1;\n    let mut prime_length22 = 1;\n    let mut prime_length23 = 1;\n   \
    \ let mut prime_length24 = 1;\n    let mut prime_length25 = 1;\n    let mut prime_length26\
    \ = 1;\n    let mut prime_length27 = 1;\n    let mut prime_length28 = 1;\n   \
    \ let mut prime_length29 = 1;\n    let mut prime_length30 = 1;\n    let mut prime_length31\
    \ = 1;\n    let mut prime_length32 = 1;\n    let mut prime_length33 = 1;\n   \
    \ let mut prime_length34 = 1;\n    let mut prime_length35 = 1;\n    let mut prime_length36\
    \ = 1;\n    let mut prime_length37 = 1;\n    let mut prime_length38 = 1;\n   \
    \ let mut prime_length39 = 1;\n    let mut prime_length40 = 1;\n    let mut prime_length41\
    \ = 1;\n    let mut prime_length42 = 1;\n    let mut prime_length43 = 1;\n   \
    \ let mut prime_length44 = 1;\n    let mut prime_length45 = 1;\n    let mut prime_length46\
    \ = 1;\n    let mut prime_length47 = 1;\n    let mut prime_length48 = 1;\n   \
    \ let mut prime_length49 = 1;\n    let mu", "    if interval1.start > interval1.end\
    \ || interval2.start > interval2.end {\n        return \"NO\"\n    }\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut intersection\
    \ = interval1;\n    while interval.start <= interval.end && interval2.start <=\
    \ interval2.end {\n        if interval.start < interval2.start {\n           \
    \ intersection.start = interval.start;\n            interval = interval2;\n  \
    \          interval2 = interval;\n        } else {\n            intersection.end\
    \ = interval.end;\n            interval = interval2;\n            interval2 =\
    \ interval;\n        }\n    }\n    if interval.start > interval.end {\n      \
    \  intersection.start = interval.end;\n        intersection.end = interval.start;\n\
    \    }\n    if interval2.start > interval2.end {\n        intersection.start =\
    \ interval2.end;\n        intersection.end = interval2.start;\n    }\n    if intersection.start\
    \ == intersection.end {\n        return \"NO\"\n    }\n    if intersection.start\
    \ == intersection.end {\n        return \"YES\"\n    }\n    if intersection.start\
    \ % interval2.start == 0 {\n        return \"YES\"\n    }\n    return \"NO\"",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_start < interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval1_end > interval2_start {\n      \
    \  return \"YES\";\n    }", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    \n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start += 1;\n        }\n        if interval1_end >\
    \ interval2_end {\n            interval1_end -= 1;\n        }\n        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n            intersection_length\
    \ += 1;\n        }\n        interval2_start += 1;\n        interval2_end -= 1;\n\
    \    }\n    \n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        intersection_length += 1;\n    }\n    \n    if intersection_length\
    \ == 2 {\n        return \"YES\"\n    }\n    \n    return \"NO\"", "    if interval1.start\
    \ <= interval1.end && interval2.start <= interval2.end {\n        let mut start\
    \ = interval1.start;\n        let mut end = interval1.end;\n        let mut intersection\
    \ = interval1.start;\n        while start <= end {\n            if interval2.start\
    \ <= end {\n                intersection = intersection.max(start);\n        \
    \        start = start.add(interval2.start);\n            } else {\n         \
    \       intersection = intersection.min(end);\n                end = end.add(interval2.end);\n\
    \            }\n        }\n        if intersection == interval1.start {\n    \
    \        return \"NO\";\n        }\n        if intersection == interval1.end {\n\
    \            return \"NO\";\n        }\n        if intersection == interval2.start\
    \ {\n            return \"YES\";\n        }\n        if intersection == interval2.end\
    \ {\n            return \"YES\";\n        }\n        if intersection % 2 == 0\
    \ {\n            return \"NO\";\n        }\n        return \"YES\";\n    }\n \
    \   return \"NO\";", "    let mut interval1_start = interval1.0;\n    let mut\
    \ interval1_end = interval1.1;\n    let mut interval2_start = interval2.0;\n \
    \   let mut interval2_end = interval2.1;\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval_length = interval1_length + interval2_length;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_flag = false;\n    let mut\
    \ prime_number_flag2 = false;\n    let mut prime_number_flag3 = false;\n    let\
    \ mut prime_number_flag4 = false;\n    let mut prime_number_flag5 = false;\n \
    \   let mut prime_number_flag6 = false;\n    let mut prime_number_flag7 = false;\n\
    \    let mut prime_number_flag8 = false;\n    let mut prime_number_flag9 = false;\n\
    \    let mut prime_number_flag10 = false;\n    let mut prime_number_flag11 = false;\n\
    \    let mut prime_number_flag12 = false;\n    let mut prime_number_flag13 = false;\n\
    \    let mut prime_number_flag14 = false;\n    let mut prime_number_flag15 = false;\n\
    \    let mut prime_number_flag16 = false;\n    let mut prime_number_flag17 = false;\n\
    \    let mut prime_number_flag18 = false;\n    let mut prime_number_flag19 = false;\n\
    \    let mut prime_number_flag20 = false;\n    let mut prime_number_flag21 = false;\n\
    \    let mut prime_number_flag22 = false;\n    let mut prime_number_flag23 = false;\n\
    \    let mut prime_number_flag24 = false;\n    let mut prime_number_flag25 = false;\n\
    \    let mut prime_number_flag26 = false;\n    let mut prime_number_flag27 = false;\n\
    \    let mut prime_number_flag28 = false;\n    let mut prime_number_flag29 = false;\n\
    \    let mut prime_number_flag30 = false;\n    let mut prime_number_flag31 = false;\n\
    \    let mut prime_number_flag32 = false;\n    let mut prime_number_flag33 = false;\n\
    \    let mut prime_number_flag34 = false;\n    let mut prime_number_flag35 = false;\n\
    \    let mut prime_number_flag36 = false;\n    let mut prime_number_flag37 = false;\n\
    \    let mut prime_number_flag38 = false;\n    let mut prime_number_flag", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = interval1_end - interval1_start;\n    let mut\
    \ prime_numbers = vec![];\n    let mut prime_numbers_length = prime_numbers.len();\n\
    \    let mut prime_numbers_is_prime = true;\n    let mut prime_numbers_is_prime_length\
    \ = prime_numbers_is_prime.len();\n    let mut prime_numbers_is_prime_is_prime\
    \ = true;\n    let mut prime_numbers_is_prime_is_prime_length = prime_numbers_is_prime_is_prime.len();\n\
    \    let mut prime_numbers_is_prime_is_prime_is_prime = true;\n    let mut prime_numbers_is_prime_is_prime_is_prime_length\
    \ = prime_numbers_is_prime_is_prime_is_prime.len();\n    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_length\
    \ = prime_numbers_is_prime_is_prime_is_prime_is_prime.len();\n    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_length\
    \ = prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime.len();\n    let\
    \ mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime = true;\n\
    \    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_length\
    \ = prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime.len();\n\
    \    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_length\
    \ = prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime.len();\n\
    \    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_length\
    \ = prime_numbers_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime.len();\n\
    \    let mut prime_number", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_found = false;\n    while prime_number_found == false\
    \ {\n        if interval1_start < interval2_start {\n            intersection_start\
    \ = interval1_start;\n            intersection_end = interval1_end;\n        \
    \    intersection_length = intersection_end - intersection_start;\n          \
    \  prime_number = 1;\n            prime_number_found = true;\n        }\n    \
    \    else {\n            intersection_start = interval2_start;\n            intersection_end\
    \ = interval2_end;\n            intersection_length = intersection_end - intersection_start;\n\
    \            prime_number = 2;\n            prime_number_found = true;\n     \
    \   }\n    }\n    if prime_number == 1 {\n        return \"NO\";\n    }\n    else\
    \ {\n        return \"YES\";\n    }", "    if interval1[0] >= interval1[1] ||\
    \ interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n\n    let mut\
    \ intersection = interval1;\n    intersection.0 = interval1[0] < interval1[1]\
    \ ? interval1[0] : interval1[1];\n    intersection.1 = interval1[0] < interval1[1]\
    \ ? interval1[1] : interval1[0];\n\n    let mut intersection2 = interval2;\n \
    \   intersection2.0 = interval2[0] < interval2[1] ? interval2[0] : interval2[1];\n\
    \    intersection2.1 = interval2[0] < interval2[1] ? interval2[1] : interval2[0];\n\
    \n    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection2.0 >= intersection2.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection2.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection2.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection2.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection2.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.1 >= intersection.0 {\n        return \"NO\";\n    }\n\n\
    \    if intersection.0 >= intersection.1 {\n        return \"NO\";\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ >= interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            return \"YES\";\n            } else {\n                return \"\
    NO\";\n            }\n        } else {\n            return \"NO\";\n        }\n\
    \    } else {\n        return \"NO\";\n    }", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_length\
    \ = interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n        interval2_start = interval1_start;\n        interval2_end\
    \ = interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_length\
    \ = interval2_end - interval2_start;\n        interval2_start = interval1_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_length = interval2_end - interval2_start;\n        interval2_start\
    \ = interval1_start;\n        interval2_end = interval1_end;\n    }\n    if interval1_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval2_length == 0 {\n    \
    \    return \"NO\";\n    }\n    if interval1_length == interval2_length {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 1 {\n  \
    \      if interval2_length == 1 {\n            return \"YES\";\n        }\n  \
    \      return \"NO\";\n    }\n    if interval2_length == 1 {\n        return \"\
    NO\";\n    }\n    if interval1_length == 2 {\n        if interval2_length == 2\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval2_length == 2 {\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 3 {\n        if interval2_length == 3 {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    if interval2_length == 3 {\n    \
    \    return \"NO\";\n    }\n    if interval1_length == 4 {\n        if interval2_length\
    \ == 4 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if interval2_length == 4 {\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 5 {\n        if interval2_length == 5 {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    if interval2_length == 5 {\n    \
    \    return \"NO\";\n    }\n    if interval1_length == 6 {\n        if interval2_length\
    \ == 6 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if interval2_length == 6 {\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 7 {\n        if interval2_length == 7 {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    if interval2_length == 7 {\n    \
    \    return \"NO\";\n    }\n    if interval", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval2_start == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_start {\n        return \"NO\";\n    }\n \
    \   if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    let\
    \ mut intersection_start = interval1_start;\n    let mut intersection_end = interval1_end;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_found = false;\n\
    \    while prime_number_found == false {\n        if intersection_start > intersection_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval1_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval2_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == intersection_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == intersection_start\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval1_start\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval2_start\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval1_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval2_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == intersection_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == intersection_start\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval1_start\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval2_start\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval1_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval2_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == intersection_end\
    \ {\n            return \"NO\";\n        }\n        if prime_number == intersection_start\
    \ {\n            return \"NO\";\n        }\n        if prime_number == interval1_",
  "    let mut interval1 = interval1.clone();\n    let mut interval2 = interval2.clone();\n\
    \    let mut intersection = interval1.clone();\n    let mut intersection_length\
    \ = interval1.clone();\n    let mut interval1_length = interval1.clone();\n  \
    \  let mut interval2_length = interval2.clone();\n    let mut prime_numbers =\
    \ vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let ", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        let mut interval = interval1;\n  \
    \      interval[0] = interval1[1];\n        interval[1] = interval2[0];\n    \
    \    interval\n    }\n    let mut interval = interval1;\n    let mut counter =\
    \ 1;\n    let mut prime = true;\n    while prime && counter < interval[0] {\n\
    \        prime = false;\n        for j in 1..interval[1] {\n            if interval[0]\
    \ == j {\n                prime = true;\n            }\n        }\n        counter\
    \ += 1;\n    }\n    if prime {\n        return \"YES\";\n    }\n    return \"\
    NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n\n    if interval1_start > interval2_end {\n      \
    \  interval1_end = interval2_end;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ < interval2_end {\n        if interval1_end % interval1_start != 0 {\n     \
    \       return \"NO\";\n        }\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        if interval1_end % interval1_start != 0 {\n            return \"\
    NO\";\n        }\n    }\n\n    if interval1_start < interval2_end {\n        if\
    \ interval1_end % interval1_start != 0 {\n            return \"NO\";\n       \
    \ }\n    }\n\n    if interval1_start == interval1_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start < interval2_end {\n        if interval1_end\
    \ % interval1_start != 0 {\n            return \"NO\";\n        }\n    }\n\n \
    \   if interval1_start > interval2_end {\n        if interval1_end % interval1_start\
    \ != 0 {\n            return \"NO\";\n        }\n    }\n\n    if interval1_start\
    \ < interval2_end {\n        if interval1_end % interval1_start != 0 {\n     \
    \       return \"NO\";\n        }\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n\
    \        if interval1_end % interval1_start != 0 {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_start > interval2_end {\n        if interval1_end\
    \ % interval1_start != 0 {\n            return \"NO\";\n        }\n    }\n\n \
    \   if interval1_start < interval2_end {\n        if interval1_end % interval1_start\
    \ != 0 {\n            return \"NO\";\n        }\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ < interval2_end {\n        if interval1_end % interval1_start != 0 {\n     \
    \       return \"NO\";\n        }\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        if interval1_end % interval1_start != 0 {\n            return \"\
    NO\";\n        }\n    }\n\n    if interval1_start < interval2_end {", "    if\
    \ interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut result = interval1[0];\n        for &(start, end) in interval2\
    \ {\n            if start < end {\n                result -= end;\n          \
    \  }\n        }\n        if result % 2 == 0 {\n            return \"NO\";\n  \
    \      }\n        return \"YES\";\n    }\n    if interval1[0] < interval1[1] &&\
    \ interval2[0] >= interval2[1] {\n        let mut result = interval1[1];\n   \
    \     for &(start, end) in interval2 {\n            if start < end {\n       \
    \         result += start;\n            }\n        }\n        if result % 2 ==\
    \ 0 {\n            return \"NO\";\n        }\n        return \"YES\";\n    }\n\
    \    if interval1[0] >= interval1[1] && interval2[0] < interval2[1] {\n      \
    \  let mut result = interval1[1];\n        for &(start, end) in interval2 {\n\
    \            if start < end {\n                result += start;\n            }\n\
    \        }\n        if result % 2 == 0 {\n            return \"NO\";\n       \
    \ }\n        return \"YES\";\n    }\n    if interval1[0] >= interval1[1] && interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        let mut interval = interval1;\n  \
    \      interval[0] = interval1[1];\n        interval[1] = interval2[0];\n    \
    \    let mut interval2 = interval2;\n        interval2[0] = interval2[1];\n  \
    \      interval2[1] = interval[0];\n        let mut interval = interval;\n   \
    \     interval[0] = interval1[0];\n        interval[1] = interval2[0];\n     \
    \   let mut interval = interval;\n        interval[0] = interval1[1];\n      \
    \  interval[1] = interval2[1];\n        let mut interval = interval;\n       \
    \ interval[0] = interval1[0];\n        interval[1] = interval2[1];\n        let\
    \ mut interval = interval;\n        interval[0] = interval1[1];\n        interval[1]\
    \ = interval2[0];\n        let mut interval = interval;\n        interval[0] =\
    \ interval1[0];\n        interval[1] = interval2[1];\n        let mut interval\
    \ = interval;\n        interval[0] = interval1[0];\n        interval[1] = interval2[0];\n\
    \        let mut interval = interval;\n        interval[0] = interval1[1];\n \
    \       interval[1] = interval2[1];\n        let mut interval = interval;\n  \
    \      interval[0] = interval1[0];\n        interval[1] = interval2[0];\n    \
    \    let mut interval = interval;\n        interval[0] = interval1[1];\n     \
    \   interval[1] = interval2[1];\n        let mut interval = interval;\n      \
    \  interval[0] = interval1[0];\n        interval[1] = interval2[0];\n        let\
    \ mut interval = interval;\n        interval[0] = interval1[1];\n        interval[1]\
    \ = interval2[1];\n        let mut interval = interval;\n        interval[0] =\
    \ interval1[0];\n        interval[1] = interval2[0];\n        let mut interval\
    \ = interval;\n        interval[0] = interval1[1];\n        interval[1] = interval2[1];\n\
    \        let mut interval = interval;\n        interval[0] = interval1[0];\n \
    \       interval[1] = interval2[1];\n        let mut interval = interval;\n  \
    \      interval[0] = interval1[1];\n        interval[1] = interval2[0];\n    \
    \    let mut interval = interval;\n        interval[0] = interval1[0];\n     \
    \   interval[1] = interval2[0];\n        let mut interval = interval;\n      \
    \  interval[0] = interval1[1];\n        interval[1] = interval2[1];\n        let\
    \ mut interval = interval;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval2[1];\n        let mut interval = interval;\n        interval[0] =\
    \ interval1[1];\n        interval[1] = interval2[0];\n        let mut interval\
    \ = interval;\n        interval[0] = interval1[0];\n        interval[1] = interval2[1];\n\
    \        let mut interval = interval;\n        ", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut start = interval1.0;\n    let mut end = interval1.1;\n\
    \    let mut length = 0;\n    while start <= end {\n        if intervals.iter().any(|&(_,\
    \ end)| end >= start) {\n            length += 1;\n        }\n        start +=\
    \ 1;\n    }\n    if length == 2 {\n        return \"NO\";\n    }\n    if length\
    \ == 1 {\n        return \"YES\";\n    }\n    if length == 0 {\n        return\
    \ \"NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if\
    \ length == 1 {\n        return \"NO\";\n    }\n    if length == 0 {\n       \
    \ return \"NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n\
    \    if length == 1 {\n        return \"NO\";\n    }\n    if length == 0 {\n \
    \       return \"NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n\
    \    }\n    if length == 1 {\n        return \"NO\";\n    }\n    if length ==\
    \ 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n        return \"\
    YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n    if length\
    \ == 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n        return\
    \ \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n    if\
    \ length == 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n       \
    \ return \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n    }\n\
    \    if length == 0 {\n        return \"NO\";\n    }\n    if length == 2 {\n \
    \       return \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n\
    \    }\n    if length == 0 {\n        return \"NO\";\n    }\n    if length ==\
    \ 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n        return \"\
    NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n    if length\
    \ == 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n        return\
    \ \"NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n    if\
    \ length == 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n      \
    \  return \"NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n\
    \    if length == 2 {\n        return \"YES\";\n    }\n    if length == 1 {\n\
    \        return \"NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n\
    \    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if length ==\
    \ 1 {\n        return \"NO\";\n    }\n    if length == 0 {\n        return \"\
    NO\";\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if ",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    if interval1[1] >= interval2[0] {\n        return\
    \ \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut len = 0;\n    while i < interval.len()\
    \ && j < interval2.len() {\n        if interval[i] < interval2[j] {\n        \
    \    i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    if\
    \ i == interval.len() {\n        return \"NO\";\n    }\n    if j == interval2.len()\
    \ {\n        return \"NO\";\n    }\n    if interval[i] < interval2[j] {\n    \
    \    len += 1;\n    } else {\n        len += 1;\n    }\n    if len % 2 == 0 {\n\
    \        return \"NO\";\n    }\n    return \"YES\";", "    if interval1[0] >=\
    \ interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n   \
    \ }\n\n    let mut intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \n    let mut prime_numbers = vec![];\n    let mut prime_numbers_len = vec![];\n\
    \n    for i in 0..intervals.len() {\n        let interval = intervals[i];\n  \
    \      let prime_number = interval[0] % interval[1] != 0;\n        prime_numbers.push(prime_number);\n\
    \        prime_numbers_len.push(prime_number);\n    }\n\n    if prime_numbers_len.len()\
    \ == intervals.len() {\n        return \"NO\";\n    }\n\n    for i in 0..prime_numbers_len.len()\
    \ {\n        if prime_numbers_len[i] == true {\n            prime_numbers_len[i]\
    \ = false;\n        }\n    }\n\n    for i in 0..prime_numbers_len.len() {\n  \
    \      if prime_numbers_len[i] == true {\n            return \"YES\";\n      \
    \  }\n    }\n\n    return \"NO\";", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut count = 0;\n    while interval[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval[0] < interval2[0]\
    \ {\n            interval[0] = interval[0] + 1;\n        } else {\n          \
    \  interval[1] = interval[1] - 1;\n        }\n        count += 1;\n    }\n   \
    \ if interval[0] >= interval1[1] && interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    if count == 2 {\n        if interval[0] % interval2[0] ==\
    \ 0 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    if count == 1 {\n        if interval[0] % interval2[0] == 0 {\n         \
    \   return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval[0]\
    \ % interval2[0] == 0 {\n        return \"NO\";\n    }\n    return \"YES\";",
  "    let mut interval = interval1;\n    if interval1.0 > interval2.0 {\n       \
    \ interval = interval2;\n    }\n    let mut interval_len = interval.1;\n    let\
    \ mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n \
    \   let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval2_start > interval1_end {\n        interval2_start, interval2_end\
    \ = interval1_end, interval2_start;\n    }\n\n    if interval1_start <= interval2_end\
    \ {\n        let mut interval1_len = interval1_end - interval1_start;\n      \
    \  let mut interval2_len = interval2_end - interval2_start;\n\n        if interval1_len\
    \ > interval2_len {\n            interval1_len, interval2_len = interval2_len,\
    \ interval1_len;\n        }\n\n        if interval1_len == interval2_len {\n \
    \           if interval1_start <= interval2_start {\n                return \"\
    NO\";\n            }\n            return \"YES\";\n        }\n    }\n    return\
    \ \"NO\";", "    if interval1.start > interval1.end {\n        interval1.swap();\n\
    \    }\n    if interval2.start > interval2.end {\n        interval2.swap();\n\
    \    }\n    let mut intervals = vec![interval1];\n    intervals.push(interval2);\n\
    \    let mut prime_numbers = vec![];\n    let mut prime_numbers_len = vec![];\n\
    \    let mut prime_numbers_len_len = vec![];\n    let mut prime_numbers_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len = vec![];\n    let mut\
    \ prime_numbers_len_len_len_len_len = vec![];\n    let mut prime_numbers_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len = vec![];\n\
    \    let mut prime_numbers_len_len_len_len_len_len_len_len = vec![];\n    let\
    \ mut prime_numbers_len_len_len_len_len_len_len_len_len = vec![];\n    let mut\
    \ prime_numbers_len_len_len_len_len_len_len_len_len_len = vec![];\n    let mut\
    \ prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len = vec![];\n  \
    \  let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = vec![];\n    let mut prime_numbers_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n\n    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    while interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start += 1;\n        }\n        if interval1_end >=\
    \ interval2_end {\n            interval1_end -= 1;\n        }\n        if interval2_start\
    \ <= interval1_end {\n            interval2_start += 1;\n        }\n        if\
    \ interval2_end >= interval1_end {\n            interval2_end -= 1;\n        }\n\
    \    }\n\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval2_start == interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start == interval2_start {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"YES\";\n\
    \    }\n\n    if interval1_start > interval1_end {\n        let mut interval1_start\
    \ = interval1[0];\n        let mut interval1_end = interval1[1];\n        let\
    \ mut interval2_start = interval2[0];\n        let mut interval2_end = interval2[1];\n\
    \n        while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n            if interval1_start <= interval2_start {\n                interval1_start\
    \ += 1;\n            }\n            if interval1_end >= interval2_end {\n    \
    \            interval1_end -= 1;\n            }\n            if interval2_start\
    \ <= interval1_end {\n                interval2_start += 1;\n            }\n \
    \           if interval2_end >= interval1_end {\n                interval2_end\
    \ -= 1;\n            }\n        }\n\n        if interval1_start == interval1_end\
    \ {\n            if interval2_start == interval2_end {\n                return\
    \ \"YES\";\n            }\n            return \"NO\";\n        }\n\n        if\
    \ interval2_start == interval2_end {\n            return \"NO\";\n        }\n\n\
    \        if interval1_start > interval1_end {\n            let mut interval1_start\
    \ = interval1[0];\n            let mut interval1_end = interval1[1];\n       \
    \     let mut interval2_start = interval2[0];\n            let mut interval2_end\
    \ = interval2[1];\n\n            while interval1_start < interval1_end && interval2_start\
    \ < interval2_end {\n                if interval1_start <= interval2_start {",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    if interval1.start\
    \ > interval2.start {\n        interval = interval2;\n        interval2 = interval1;\n\
    \    }\n    if interval1.end < interval2.end {\n        interval = interval2;\n\
    \        interval2 = interval1;\n    }\n    if interval1.start == interval2.start\
    \ {\n        if interval1.end == interval2.end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    let mut prime_numbers = vec![];\n\
    \    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut prime_numbers = vec![];\n    let\
    \ mut prime_numbers_count = vec![];\n    let mut prime_numbers_count_max = vec![];\n\
    \    let mut prime_numbers_count_min = vec![];\n    let mut prime_numbers_count_max_min\
    \ = vec![];\n    let mut prime_numbers_count_min_max = vec![];\n    let mut prime_numbers_count_max_min_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max = vec![];\n    let mut\
    \ prime_numbers_count_min_max_max_max = vec![];\n    let mut prime_numbers_count_min_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max = vec![];\n\
    \    let mut prime_numbers_count_min_max_max_max_max_max = vec![];\n    let mut\
    \ prime_numbers_count_min_max_max_max_max_max_max = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = vec![];\n    let mut prime_numbers_count_min_max_", "    if interval1[0] >=\
    \ interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n   \
    \ }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n \
    \   let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len\
    \ = interval2[1] - interval2[0] + 1;\n    let mut prime = true;\n    while interval_len\
    \ > 0 && interval2_len > 0 {\n        if interval[0] >= interval2[0] {\n     \
    \       interval[0] -= 1;\n            interval_len -= 1;\n        } else {\n\
    \            interval2[0] -= 1;\n            interval2_len -= 1;\n        }\n\
    \    }\n    if interval_len == 0 && interval2_len == 0 {\n        return \"NO\"\
    ;\n    }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n    if interval2_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval[0] == interval2[0] {\n\
    \        prime = false;\n    }\n    if prime {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    if interval1[0] >= interval1[1] || interval2[0] >=\
    \ interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut count = 0;\n    while count <\
    \ interval1[0] && count < interval2[0] {\n        if interval[count] < interval2[count]\
    \ {\n            interval[count] += 1;\n        } else {\n            interval2[count]\
    \ += 1;\n        }\n        count += 1;\n    }\n    if interval1[0] < interval2[0]\
    \ {\n        interval = interval2;\n    }\n    if interval1[1] > interval2[1]\
    \ {\n        interval = interval1;\n    }\n    if interval[0] == interval[1] {\n\
    \        return \"NO\";\n    }\n    if interval[0] % interval[1] != 0 {\n    \
    \    return \"NO\";\n    }\n    if interval[0] % interval[1] == 0 {\n        return\
    \ \"YES\";\n    }", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n        } else {\n   \
    \         intersection_end = interval1_end;\n        }\n        if interval2_start\
    \ < interval2_end {\n            intersection_end = interval2_end;\n        }\
    \ else {\n            intersection_start = interval2_start;\n        }\n     \
    \   if intersection_start > intersection_end {\n            return \"NO\";\n \
    \       }\n    }\n    if interval1_start > interval1_end {\n        return \"\
    NO\";\n    }\n    if interval2_start > interval2_end {\n        return \"NO\"\
    ;\n    }\n    if intersection_start == intersection_end {\n        return \"YES\"\
    ;\n    }\n    if intersection_start > intersection_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval1_end {\n        return \"NO\";\n \
    \   }\n    if interval2_start < interval2_end {\n        return \"NO\";\n    }\n\
    \    if intersection_start == interval1_start {\n        return \"YES\";\n   \
    \ }\n    if intersection_start == interval2_start {\n        return \"YES\";\n\
    \    }\n    if intersection_start > interval1_end {\n        return \"NO\";\n\
    \    }\n    if intersection_start > interval2_end {\n        return \"NO\";\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval2_start < interval1_end {\n        return \"NO\";\n    }\n\
    \    if intersection_start == interval2_end {\n        return \"YES\";\n    }\n\
    \    if intersection_start == interval1_end {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval1[1];\n        interval = interval2;\n        interval[0]\
    \ = interval2[0];\n        interval[1] = interval2[1];\n        let mut count\
    \ = 0;\n        let mut start = 0;\n        let mut end = interval.len();\n  \
    \      while start < end {\n            if interval[start] < interval[end] {\n\
    \                count += 1;\n                start += 1;\n            } else\
    \ {\n                end -= 1;\n            }\n        }\n        if count % 2\
    \ == 0 {\n            return \"YES\";\n        } else {\n            return \"\
    NO\";\n        }\n    } else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found =\
    \ false;\n    loop {\n        if interval1_start <= interval2_end {\n        \
    \    if interval1_end <= interval2_start {\n                intersection_length\
    \ += 1;\n                interval1_start += 1;\n                interval1_end\
    \ += 1;\n            } else {\n                intersection_length += 1;\n   \
    \             interval1_end += 1;\n            }\n        } else {\n         \
    \   if interval1_start <= interval2_start {\n                intersection_length\
    \ += 1;\n                interval1_start += 1;\n            } else {\n       \
    \         intersection_length += 1;\n                interval1_end += 1;\n   \
    \         }\n        }\n        if intersection_length == prime_number {\n   \
    \         prime_number_found = true;\n            break;\n        }\n        prime_number\
    \ += 1;\n    }\n    if prime_number_found {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n        } else {\n   \
    \         intersection_start = interval2_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            intersection_end = interval1_end;\n        }\
    \ else {\n            intersection_end = interval2_end;\n        }\n        if\
    \ intersection_start <= intersection_end {\n            interval1_start += 1;\n\
    \        } else {\n            interval2_start += 1;\n        }\n    }\n    if\
    \ interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            if interval1_start == 0 {\n                return \"YES\";\n\
    \            } else {\n                return \"NO\";\n            }\n       \
    \ } else {\n            return \"NO\";\n        }\n    } else {\n        if interval2_start\
    \ == interval2_end {\n            return \"NO\";\n        } else {\n         \
    \   return \"YES\";\n        }\n    }", "    let mut interval = interval1;\n \
    \   let mut interval2 = interval2;\n    let mut intersection = interval1;\n  \
    \  let mut intersection2 = interval2;\n    let mut intersection3 = interval1;\n\
    \    let mut intersection4 = interval2;\n    let mut intersection5 = interval1;\n\
    \    let mut intersection6 = interval2;\n    let mut intersection7 = interval1;\n\
    \    let mut intersection8 = interval2;\n    let mut intersection9 = interval1;\n\
    \    let mut intersection10 = interval2;\n    let mut intersection11 = interval1;\n\
    \    let mut intersection12 = interval2;\n    let mut intersection13 = interval1;\n\
    \    let mut intersection14 = interval2;\n    let mut intersection15 = interval1;\n\
    \    let mut intersection16 = interval2;\n    let mut intersection17 = interval1;\n\
    \    let mut intersection18 = interval2;\n    let mut intersection19 = interval1;\n\
    \    let mut intersection20 = interval2;\n    let mut intersection21 = interval1;\n\
    \    let mut intersection22 = interval2;\n    let mut intersection23 = interval1;\n\
    \    let mut intersection24 = interval2;\n    let mut intersection25 = interval1;\n\
    \    let mut intersection26 = interval2;\n    let mut intersection27 = interval1;\n\
    \    let mut intersection28 = interval2;\n    let mut intersection29 = interval1;\n\
    \    let mut intersection30 = interval2;\n    let mut intersection31 = interval1;\n\
    \    let mut intersection32 = interval2;\n    let mut intersection33 = interval1;\n\
    \    let mut intersection34 = interval2;\n    let mut intersection35 = interval1;\n\
    \    let mut intersection36 = interval2;\n    let mut intersection37 = interval1;\n\
    \    let mut intersection38 = interval2;\n    let mut intersection39 = interval1;\n\
    \    let mut intersection40 = interval2;\n    let mut intersection41 = interval1;\n\
    \    let mut intersection42 = interval2;\n    let mut intersection43 = interval1;\n\
    \    let mut intersection44 = interval2;\n    let mut intersection45 = interval1;\n\
    \    let mut intersection46 = interval2;\n    let mut intersection47 = interval1;\n\
    \    let mut intersection48 = interval2;\n    let mut intersection49 = interval1;\n\
    \    let mut intersection50 = interval2;\n    let mut intersection51 = interval1;\n\
    \    let mut intersection52 = interval2;\n    let mut intersection53 = interval1;\n\
    \    let mut intersection54 = interval2;\n    let mut intersection55 = interval1;\n\
    \    let mut intersection56 = interval2;\n    let mut intersection", "    let\
    \ (start, end) = interval1;\n    let (start2, end2) = interval2;\n    if start\
    \ > end {\n        (start, end) = (end, start)\n    }\n    if start2 > end2 {\n\
    \        (start2, end2) = (end2, start2)\n    }\n    if start == start2 && end\
    \ == end2 {\n        return \"NO\"\n    }\n    let mut prime = true;\n    let\
    \ mut i = start;\n    let mut j = end;\n    while i < j {\n        if i % j ==\
    \ 0 {\n            prime = false;\n            break;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    if prime {\n        return \"YES\"\n    }\n\
    \    return \"NO\"", "    let mut interval_len = interval1[1] - interval1[0] +\
    \ 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    if interval_len\
    \ < interval2_len {\n        interval_len = interval2_len;\n    }\n    if interval_len\
    \ == 1 {\n        return \"NO\";\n    }\n    if interval_len == 2 {\n        if\
    \ interval1[0] < interval2[0] {\n            return \"NO\";\n        }\n     \
    \   if interval1[1] > interval2[1] {\n            return \"NO\";\n        }\n\
    \        return \"YES\";\n    }\n    let mut intersection_len = interval_len;\n\
    \    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start + 1;\n    let mut\
    \ interval2_len = interval2_end - interval2_start + 1;\n    while interval1_len\
    \ > 0 && interval2_len > 0 {\n        if interval1_start < interval2_start {\n\
    \            interval1_len -= 1;\n            interval1_start += 1;\n        }\
    \ else {\n            interval2_len -= 1;\n            interval2_start += 1;\n\
    \        }\n    }\n    if interval1_len == 0 && interval2_len == 0 {\n       \
    \ return \"NO\";\n    }\n    if interval1_len == 0 {\n        return \"NO\";\n\
    \    }\n    if interval2_len == 0 {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval2_start {\n        return \"NO\";\n    }\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_start < interval2_start {\n  \
    \      return \"NO\";\n    }\n    if interval1_end > interval2_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_start == interval2_start {\n       \
    \ return \"NO\";\n    }\n    if interval1_start == interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_end == interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_end == interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if interval1_end\
    \ < interval2_end {\n        return \"NO\";\n    }\n    if interval1_end > interval2_",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    while prime_number < interval1_end\
    \ {\n        if interval2_start <= prime_number && prime_number < interval2_end\
    \ {\n            if interval1_start <= prime_number && prime_number < interval1_end\
    \ {\n                intersection_start = prime_number;\n                intersection_end\
    \ = prime_number;\n                intersection_length = prime_number - interval1_start;\n\
    \            }\n        }\n        prime_number += 1;\n    }\n    if intersection_length\
    \ == 1 {\n        if intersection_start == intersection_end {\n            return\
    \ \"NO\";\n        } else {\n            return \"YES\";\n        }\n    } else\
    \ {\n        return \"NO\";\n    }", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut intersection = intervals[0]\n   \
    \     .iter()\n        .filter(|&(_, end)| intervals[1].iter().any(|&(_, start)|\
    \ start <= end))\n        .collect::<Vec<_>>();\n    if intersection.len() ==\
    \ 2 {\n        if intervals[0][0] >= intervals[1][1] {\n            intersection.sort();\n\
    \        }\n        if intersection[0] >= intervals[1][1] {\n            intersection.sort();\n\
    \        }\n        if intersection[0] >= intervals[0][1] {\n            intersection.sort();\n\
    \        }\n        if intersection[1] >= intervals[0][1] {\n            intersection.sort();\n\
    \        }\n        if intersection[1] >= intervals[1][1] {\n            intersection.sort();\n\
    \        }\n        if intersection[0] >= intervals[0][1] && intersection[1] >=\
    \ intervals[1][1] {\n            if intersection[0] % intervals[1][0] == 0 &&\
    \ intersection[1] % intervals[1][1] == 0 {\n                return \"YES\";\n\
    \            }\n        }\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_start <= interval1_end && interval2_start <= interval2_end {\n   \
    \     let mut interval1_length = interval1_end - interval1_start + 1;\n      \
    \  let mut interval2_length = interval2_end - interval2_start + 1;\n        let\
    \ mut intersection_length = interval1_length + interval2_length;\n        if interval1_start\
    \ < interval2_start {\n            intersection_length -= 1;\n        }\n    \
    \    if interval1_end > interval2_end {\n            intersection_length -= 1;\n\
    \        }\n        if intersection_length == 2 {\n            if interval1_start\
    \ == interval1_end {\n                return \"YES\";\n            }\n       \
    \     if interval2_start == interval2_end {\n                return \"YES\";\n\
    \            }\n            if interval1_start < interval2_start {\n         \
    \       interval1_start = interval2_start;\n            }\n            if interval1_end\
    \ > interval2_end {\n                interval1_end = interval2_end;\n        \
    \    }\n            if interval1_start <= interval1_end && interval2_start <=\
    \ interval2_end {\n                return \"YES\";\n            }\n        }\n\
    \        if intersection_length == 1 {\n            return \"NO\";\n        }\n\
    \        if intersection_length == 0 {\n            return \"NO\";\n        }\n\
    \    }\n    return \"NO\";", "    let mut interval1 = interval1.clone();\n   \
    \ let mut interval2 = interval2.clone();\n    let mut interval = interval1.clone();\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut len = 0;\n    let mut flag\
    \ = false;\n    while i < interval1.len() && j < interval2.len() {\n        if\
    \ interval1[i] < interval2[j] {\n            i += 1;\n        } else {\n     \
    \       interval[j] += 1;\n            len += 1;\n            i += 1;\n      \
    \      j += 1;\n        }\n    }\n    if interval1.len() > interval2.len() {\n\
    \        while i < interval1.len() {\n            interval[j] += 1;\n        \
    \    len += 1;\n            i += 1;\n            j += 1;\n        }\n    } else\
    \ {\n        while j < interval2.len() {\n            interval[j] += 1;\n    \
    \        len += 1;\n            j += 1;\n        }\n    }\n    if len == 1 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 2 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 3 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 4 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 5 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 6 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 7 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 8 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 9 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 10 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 11 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 12 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 13 {\n\
    \        if interval[0] == interval[1] {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if len == 14 {\n",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 <= end2 && start2 <= end1 {\n        if start1 <= start2 {\n        \
    \    if end1 <= end2 {\n                if start1 < end1 && start2 < end2 {\n\
    \                    if end1 < end2 {\n                        let mut result\
    \ = String::new();\n                        result.push_str(&format!(\"YES\"));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end1));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end2));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end2));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end1));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end1));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end2));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end2));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end1));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end1));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end2));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end2));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end1));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end1));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end2));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end2));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end1));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", start1, end1));\n                        result.push_str(\"\\n\");\n\
    \                        result.push_str(&format!(\"({}, {})\", start2, end2));\n\
    \                        result.push_str(\"\\n\");\n                        result.push_str(&format!(\"\
    ({}, {})\", ", "    let (mut start, mut end) = interval1;\n    let (mut start2,\
    \ mut end2) = interval2;\n    loop {\n        if start > end {\n            return\
    \ String::from(\"NO\");\n        }\n        if start2 > end2 {\n            return\
    \ String::from(\"NO\");\n        }\n        if start == start2 {\n           \
    \ return String::from(\"NO\");\n        }\n        if start < start2 {\n     \
    \       start = start + 1;\n        }\n        if end < end2 {\n            end\
    \ = end - 1;\n        }\n        if start == end {\n            return String::from(\"\
    NO\");\n        }\n        if start < end2 {\n            start2 = start2 + 1;\n\
    \        }\n        if end < start2 {\n            end2 = end2 - 1;\n        }\n\
    \    }", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut count = 0;\n    while count < interval1[0]\
    \ {\n        interval = (interval[0], interval[1]);\n        count += 1;\n   \
    \ }\n    while count < interval2[0] {\n        interval2 = (interval2[0], interval2[1]);\n\
    \        count += 1;\n    }\n    if interval[0] == interval2[0] {\n        if\
    \ interval[1] == interval2[1] {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";\n    }\n    if interval[0] < interval2[0] {\n        let mut\
    \ count = 0;\n        while count < interval[0] {\n            interval = (interval[1],\
    \ interval[0]);\n            count += 1;\n        }\n        while count < interval2[0]\
    \ {\n            interval2 = (interval2[1], interval2[0]);\n            count\
    \ += 1;\n        }\n    }\n    if interval[0] == interval2[0] {\n        if interval[1]\
    \ < interval2[1] {\n            let mut count = 0;\n            while count <\
    \ interval[0] {\n                interval = (interval[1], interval[0]);\n    \
    \            count += 1;\n            }\n            while count < interval2[1]\
    \ {\n                interval2 = (interval2[1], interval2[0]);\n             \
    \   count += 1;\n            }\n        }\n    }\n    if interval[0] < interval2[0]\
    \ {\n        let mut count = 0;\n        while count < interval[0] {\n       \
    \     interval = (interval[1], interval[0]);\n            count += 1;\n      \
    \  }\n        while count < interval2[0] {\n            interval2 = (interval2[1],\
    \ interval2[0]);\n            count += 1;\n        }\n    }\n    if interval[0]\
    \ == interval2[0] {\n        if interval[1] < interval2[1] {\n            let\
    \ mut count = 0;\n            while count < interval[0] {\n                interval\
    \ = (interval[1], interval[0]);\n                count += 1;\n            }\n\
    \            while count < interval2[1] {\n                interval2 = (interval2[1],\
    \ interval2[0]);\n                count += 1;\n            }\n        }\n    }\n\
    \    if interval[0] == interval2[0] {\n        if interval[1] < interval2[1] {\n\
    \            let mut count = 0;\n            while count < interval[0] {\n   \
    \             interval = (interval[1], interval[0]);\n                count +=\
    \ 1;\n            }\n            while count < interval2[1] {\n              \
    \  interval2 = (interval2[1], interval2[0]);\n                count += 1;\n  \
    \          }\n        }\n    }\n    if interval[0] == interval2[0] {\n       \
    \ if interval[1] < interval2[1] {\n            let mut count = 0;\n          \
    \  while count < interval[0] {\n                interval = (interval[1], interval[0]);\n\
    \                count += 1;\n            }\n            while count ", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_start: isize =\
    \ 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_number_start:\
    \ isize = 1;\n    let mut prime_number_end: isize = 1;\n    let mut prime_", " \
    \   let mut intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut prime = true;\n    let mut prime_length = 0;\n    let mut prime_start\
    \ = interval1[0];\n    let mut prime_end = interval1[1];\n    while prime_start\
    \ < interval1[1] {\n        let mut prime_end = interval2[1];\n        while prime_end\
    \ < interval2[1] {\n            if intervals.iter().any(|&(start, end)| *start\
    \ >= *end && prime_start <= prime_end) {\n                prime = false;\n   \
    \             break;\n            }\n            prime_end += 1;\n        }\n\
    \        prime_start += 1;\n        prime_end = interval2[1];\n        prime_length\
    \ += 1;\n        intervals.push(interval1);\n        intervals.push(interval2);\n\
    \    }\n    if prime {\n        if prime_length == 2 {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";", "    if\
    \ interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut i = 0;\n        let mut j = 0;\n        while i < interval1[0]\
    \ && j < interval2[0] {\n            if interval1[0] > interval1[1] {\n      \
    \          i += 1;\n            } else if interval2[0] > interval2[1] {\n    \
    \            j += 1;\n            } else {\n                if interval1[i] ==\
    \ interval2[j] {\n                    i += 1;\n                    j += 1;\n \
    \               } else if interval1[i] < interval2[j] {\n                    i\
    \ += 1;\n                } else {\n                    j += 1;\n             \
    \   }\n            }\n        }\n        if i == interval1[0] && j == interval2[0]\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";", "   \
    \ let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            interval1_start += 1;\n        } else {\n            interval1_end\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ interval2_start += 1;\n        } else {\n            interval2_end += 1;\n \
    \       }\n        intersection_length += 1;\n    }\n    if interval1_start >\
    \ interval1_end {\n        interval1_start = interval1_end - 1;\n    }\n    if\
    \ interval2_start > interval2_end {\n        interval2_start = interval2_end -\
    \ 1;\n    }\n    if intersection_length == 2 {\n        if interval1_start ==\
    \ interval1_end {\n            return \"YES\";\n        } else {\n           \
    \ return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start = interval1_end;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start =\
    \ interval2_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_start == interval1_end {\n       \
    \ return \"NO\";\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    if interval1_length > interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n    if interval1_length == 1 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 2 {\n        if interval1_start == interval2_start {\n \
    \           return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ interval1_length == 3 {\n        if interval1_start == interval2_start {\n \
    \           return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 1 {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 1 {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 7 {\n        if interval1_start ", "    let mut interval1_start\
    \ = interval1.0;\n    let mut interval1_end = interval1.1;\n    let mut interval2_start\
    \ = interval2.0;\n    let mut interval2_end = interval2.1;\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_found = false;\n    \n    while prime_number_found\
    \ == false {\n        if intersection_start > intersection_end {\n           \
    \ return \"NO\";\n        }\n        if intersection_start == intersection_end\
    \ {\n            if prime_number == 1 {\n                prime_number_found =\
    \ true;\n            }\n            else {\n                return \"NO\";\n \
    \           }\n        }\n        \n        if prime_number == 1 {\n         \
    \   prime_number_found = true;\n        }\n        else {\n            prime_number_found\
    \ = false;\n        }\n        \n        if prime_number_found == false {\n  \
    \          prime_number += 1;\n        }\n        \n        if prime_number_found\
    \ == true {\n            intersection_start += 1;\n            intersection_end\
    \ += 1;\n            intersection_length += 1;\n        }\n    }\n    \n    if\
    \ prime_number_found == true {\n        if intersection_length == prime_number\
    \ {\n            return \"YES\";\n        }\n        else {\n            return\
    \ \"NO\";\n        }\n    }\n    else {\n        return \"NO\";\n    }", "   \
    \ if interval1.0 > interval2.0 {\n        interval1, interval2 = interval2, interval1\n\
    \    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval_len = interval1.0;\n    let mut interval_len_2 = interval2.0;\n\
    \    let mut prime = true;\n    while prime == true {\n        if interval_len\
    \ % interval_len_2 == 0 {\n            prime = false;\n        }\n        interval_len\
    \ += interval_len_2;\n        interval_len_2 += interval_len;\n        interval\
    \ = interval2;\n        interval2 = interval1;\n        interval_len = interval1.0;\n\
    \        interval_len_2 = interval2.0;\n    }\n    if interval_len % interval_len_2\
    \ == 0 {\n        prime = false;\n    }\n    if prime == true {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }", "    if interval1[0] <\
    \ interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            return \"NO\";\n        } else {\n            return \"YES\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n        interval2_start, interval2_end = interval1_start, interval1_end;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_start, interval2_end;\n        interval2_start, interval2_end =\
    \ interval1_start, interval1_end;\n    }\n\n    if interval1_start <= interval2_end\
    \ {\n        let mut interval1_length = interval1_end - interval1_start;\n   \
    \     let mut interval2_length = interval2_end - interval2_start;\n\n        if\
    \ interval1_length == interval2_length {\n            if interval1_start < interval2_start\
    \ {\n                interval1_length = interval1_end - interval2_start;\n   \
    \         } else {\n                interval2_length = interval2_end - interval1_start;\n\
    \            }\n        }\n\n        if interval1_length == interval2_length {\n\
    \            if interval1_start < interval2_start {\n                interval1_length\
    \ = interval1_end - interval2_start;\n            } else {\n                interval2_length\
    \ = interval2_end - interval1_start;\n            }\n        }\n\n        if interval1_length\
    \ == interval2_length {\n            if interval1_start < interval2_start {\n\
    \                interval1_length = interval1_end - interval2_start;\n       \
    \     } else {\n                interval2_length = interval2_end - interval1_start;\n\
    \            }\n        }\n\n        if interval1_length == interval2_length {\n\
    \            if interval1_start < interval2_start {\n                interval1_length\
    \ = interval1_end - interval2_start;\n            } else {\n                interval2_length\
    \ = interval2_end - interval1_start;\n            }\n        }\n\n        if interval1_length\
    \ == interval2_length {\n            if interval1_start < interval2_start {\n\
    \                interval1_length = interval1_end - interval2_start;\n       \
    \     } else {\n                interval2_length = interval2_end - interval1_start;\n\
    \            }\n        }\n\n        if interval1_length == interval2_length {\n\
    \            if interval1_start < interval2_start {\n                interval1_length\
    \ = interval1_end - interval2_start;\n            } else {\n                interval2_length\
    \ = interval2_end - interval1_start;\n            }\n        }\n\n        if interval1_length\
    \ == interval2_length {\n            if interval1_start < interval2_start {\n\
    \                interval1_length = interval1_end - interval2_start;\n       \
    \     } else {\n                interval2_length = interval2_end - interval1_start;\n\
    \            }\n        }\n\n        if interval1_length == interval2_length {\n\
    \            if interval1_start < interval2_start {\n", "    if interval1[0] <\
    \ interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            return \"NO\";\n        }\n        if interval1[1] > interval2[1]\
    \ {\n            return \"NO\";\n        }\n        let mut interval = interval1;\n\
    \        let mut interval2 = interval2;\n        let mut count = 0;\n        while\
    \ interval[0] < interval[1] {\n            if interval[0] < interval2[0] {\n \
    \               interval[0] = interval[0] + 1;\n                count++;\n   \
    \         } else {\n                interval[1] = interval[1] - 1;\n         \
    \       count++;\n            }\n        }\n        if count % 2 == 0 {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut interval1_length = interval2_end - interval2_start;\n\
    \    let mut interval2_length = interval1_end - interval1_start;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_found = false;\n    \n  \
    \  while prime_number_found == false {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_length;\n    \
    \        interval1_length = interval2_length;\n            interval2_length =\
    \ interval1_end - interval1_start;\n            prime_number = 1;\n          \
    \  prime_number_found = true;\n        } else {\n            intersection_start\
    \ = interval2_start;\n            intersection_end = interval2_end;\n        \
    \    intersection_length = interval2_length;\n            interval2_length = interval1_end\
    \ - interval1_start;\n            prime_number = 1;\n            prime_number_found\
    \ = true;\n        }\n    }\n    \n    if prime_number_found == true {\n     \
    \   if interval1_length == interval2_length {\n            if prime_number ==\
    \ 1 {\n                return \"YES\";\n            } else {\n               \
    \ return \"NO\";\n            }\n        } else {\n            return \"NO\";\n\
    \        }\n    } else {\n        return \"NO\";\n    }", "    let mut interval\
    \ = interval1;\n    if interval1.0 > interval2.0 {\n        interval = interval2;\n\
    \    }\n    let mut start = interval.0;\n    let mut end = interval.1;\n    let\
    \ mut found = false;\n    while start < end {\n        if start % interval1.1\
    \ == 0 && end % interval2.1 == 0 {\n            found = true;\n            break;\n\
    \        }\n        start += 1;\n        end += 1;\n    }\n    if found {\n  \
    \      if start % interval1.1 == 0 && end % interval2.1 == 0 {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";", " \
    \   if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n      \
    \  return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut prime = true;\n    while prime && interval[0] < interval[1]\
    \ {\n        if interval[0] >= interval2[0] && interval[0] <= interval2[1] {\n\
    \            interval[0] = interval[0] + 1;\n        }\n        if interval[1]\
    \ >= interval2[0] && interval[1] <= interval2[1] {\n            interval[1] =\
    \ interval[1] - 1;\n        }\n        if interval[0] >= interval2[0] && interval[1]\
    \ <= interval2[1] {\n            interval[0] = interval[0] + 1;\n            interval[1]\
    \ = interval[1] - 1;\n        }\n        if interval[1] >= interval2[0] && interval[0]\
    \ >= interval2[1] {\n            interval[1] = interval[1] - 1;\n        }\n \
    \       if interval[0] >= interval2[0] && interval[1] >= interval2[1] {\n    \
    \        prime = false;\n        }\n    }\n    if prime {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \n    if interval1_length == interval2_length {\n        if interval1_length ==\
    \ 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \        interval2_length = interval1_length;\n    }\n\n    if interval1_length\
    \ == 2 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == 3 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == 4 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n        if interval1_start == interval2_end {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n   \
    \ if interval1_length == 5 {\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n", "    let mut interval = interval1;\n    if interval1.0 > interval2.0 {\n\
    \        interval = interval2;\n    }\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut len = 0;\n    while i < interval.0 && j < interval1.0 {\n       \
    \ if interval[i] < interval[j] {\n            i += 1;\n        } else {\n    \
    \        j += 1;\n        }\n        len += 1;\n    }\n    if len == 0 {\n   \
    \     return \"NO\";\n    }\n    if len == 1 {\n        return \"YES\";\n    }\n\
    \    if len % 2 == 0 {\n        return \"NO\";\n    }\n    let mut i = 1;\n  \
    \  let mut j = 1;\n    let mut len = 1;\n    while i < interval.0 && j < interval1.0\
    \ {\n        if interval[i] < interval[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        len += 1;\n    }\n    if len == 1\
    \ {\n        return \"YES\";\n    }\n    if len % 2 == 0 {\n        return \"\
    NO\";\n    }\n    let mut i = 1;\n    let mut j = 1;\n    let mut len = 2;\n \
    \   while i < interval.0 && j < interval1.0 {\n        if interval[i] < interval[j]\
    \ {\n            i += 1;\n        } else {\n            j += 1;\n        }\n \
    \       len += 2;\n    }\n    if len == 2 {\n        return \"YES\";\n    }\n\
    \    if len % 2 == 0 {\n        return \"NO\";\n    }\n    let mut i = 1;\n  \
    \  let mut j = 1;\n    let mut len = 3;\n    while i < interval.0 && j < interval1.0\
    \ {\n        if interval[i] < interval[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        len += 3;\n    }\n    if len == 3\
    \ {\n        return \"YES\";\n    }\n    if len % 2 == 0 {\n        return \"\
    NO\";\n    }\n    let mut i = 1;\n    let mut j = 1;\n    let mut len = 4;\n \
    \   while i < interval.0 && j < interval1.0 {\n        if interval[i] < interval[j]\
    \ {\n            i += 1;\n        } else {\n            j += 1;\n        }\n \
    \       len += 4;\n    }\n    if len == 4 {\n        return \"YES\";\n    }\n\
    \    if len % 2 == 0 {\n        return \"NO\";\n    }\n    let mut i = 1;\n  \
    \  let mut j = 1;\n    let mut len = 5;\n    while i < interval.0 && j < interval1.0\
    \ {\n        if interval[i] < interval[j] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n        len += 5;\n    }\n    if len == 5\
    \ && len % 2 == 0 {\n        return \"YES\";\n    }\n    if len % 2 == 0 {\n \
    \       return \"NO\";\n    }\n    return \"NO\";", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut intersection\
    \ = interval1;\n        intersection.swap(0, 1);\n        if interval1[0] < interval1[1]\
    \ {\n            intersection.swap(0, 1);\n        }\n        if interval2[0]\
    \ < interval2[1] {\n            intersection.swap(0, 1);\n        }\n        if\
    \ intersection[0] < intersection[1] {\n            return \"NO\";\n        }\n\
    \        if intersection[0] > intersection[1] {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1[0] < interval1[1]\
    \ && interval2[0] > interval2[1] {\n        let mut intersection = interval1;\n\
    \        intersection.swap(0, 1);\n        if interval1[0] < interval1[1] {\n\
    \            intersection.swap(0, 1);\n        }\n        if interval2[0] > interval2[1]\
    \ {\n            intersection.swap(0, 1);\n        }\n        if intersection[0]\
    \ < intersection[1] {\n            return \"NO\";\n        }\n        if intersection[0]\
    \ > intersection[1] {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1[0] > interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut intersection = interval1;\n        intersection.swap(0, 1);\n\
    \        if interval1[0] > interval1[1] {\n            intersection.swap(0, 1);\n\
    \        }\n        if interval2[0] < interval2[1] {\n            intersection.swap(0,\
    \ 1);\n        }\n        if intersection[0] < intersection[1] {\n           \
    \ return \"NO\";\n        }\n        if intersection[0] > intersection[1] {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ interval1[0] > interval1[1] && interval2[0] > interval2[1] {\n        let mut\
    \ intersection = interval1;\n        intersection.swap(0, 1);\n        if interval1[0]\
    \ > interval1[1] {\n            intersection.swap(0, 1);\n        }\n        if\
    \ interval2[0] > interval2[1] {\n            intersection.swap(0, 1);\n      \
    \  }\n        if intersection[0] < intersection[1] {\n            return \"NO\"\
    ;\n        }\n        if intersection[0] > intersection[1] {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval1_end {\n        return \"NO\";\n    }\n  \
    \  if interval1_start < interval1_end {\n        if interval1_start % interval1_end\
    \ == 0 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if interval1_start > interval1_end {\n        if interval2_start % interval2_end\
    \ == 0 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if interval1_start == interval2_start {\n        return \"NO\";\n   \
    \ }\n    if interval1_start < interval2_start {\n        if interval1_start %\
    \ interval2_start == 0 {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_start > interval2_start {\n        if interval1_end\
    \ % interval2_start == 0 {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ >= interval2_start {\n            if interval1_end > interval2_end {\n     \
    \           interval1_end, interval2_end = interval2_end, interval1_end;\n   \
    \         }\n            if interval1_end == interval2_end {\n               \
    \ return \"YES\".to_string();\n            }\n        }\n    }\n    return \"\
    NO\".to_string();", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        let mut i = interval1[0];\n        let mut j = interval2[0];\n\
    \        let mut k = interval1[1];\n        let mut l = interval2[1];\n      \
    \  while i <= k {\n            while j <= l {\n                if i == j {\n \
    \                   return \"YES\";\n                }\n                j += 1;\n\
    \            }\n            i += 1;\n            l += 1;\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1[0] < interval1[1] && interval2[0] >= interval2[1]\
    \ {\n        let mut i = interval1[0];\n        let mut j = interval2[0];\n  \
    \      let mut k = interval1[1];\n        let mut l = interval2[1];\n        while\
    \ i <= k {\n            while j <= l {\n                if i == j {\n        \
    \            return \"YES\";\n                }\n                j += 1;\n   \
    \         }\n            i += 1;\n            l -= 1;\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1[0] >= interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut i = interval1[0];\n        let mut j = interval2[0];\n  \
    \      let mut k = interval1[1];\n        let mut l = interval2[1];\n        while\
    \ i <= k {\n            while j <= l {\n                if i == j {\n        \
    \            return \"YES\";\n                }\n                i += 1;\n   \
    \         }\n            j += 1;\n            l += 1;\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1[0] >= interval1[1] && interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ += 1;\n        } else {\n            interval2_start += 1;\n        }\n    \
    \    intersection_length += 1;\n    }\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end + 1;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end + 1;\n    }\n   \
    \ if intersection_length == 2 {\n        if interval1_start == interval1_end {\n\
    \            if interval2_start == interval2_end {\n                return \"\
    YES\";\n            } else {\n                return \"NO\";\n            }\n\
    \        } else {\n            return \"NO\";\n        }\n    } else {\n     \
    \   return \"NO\";\n    }", "    let (start, end) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start > end {\n        (start, end) = (end, start)\n\
    \    }\n    if start2 > end2 {\n        (start2, end2) = (end2, start2)\n    }\n\
    \    let mut intersection = start;\n    while intersection < end && intersection\
    \ < start2 {\n        intersection += 1;\n    }\n    if intersection == end {\n\
    \        return \"NO\"\n    }\n    if intersection == start2 {\n        return\
    \ \"NO\"\n    }\n    if intersection % 2 == 0 {\n        return \"NO\"\n    }\n\
    \    if intersection == end {\n        return \"YES\"\n    }\n    if intersection\
    \ == start2 {\n        return \"YES\"\n    }\n    if intersection == end {\n \
    \       return \"YES\"\n    }\n    if intersection == start2 {\n        return\
    \ \"YES\"\n    }\n    if intersection == end {\n        return \"YES\"\n    }\n\
    \    if intersection == start2 {\n        return \"YES\"\n    }\n    if intersection\
    \ == end {\n        return \"YES\"\n    }\n    if intersection == start2 {\n \
    \       return \"YES\"\n    }\n    if intersection == end {\n        return \"\
    YES\"\n    }\n    if intersection == start2 {\n        return \"YES\"\n    }\n\
    \    if intersection == end {\n        return \"YES\"\n    }\n    if intersection\
    \ == start2 {\n        return \"YES\"\n    }\n    if intersection == end {\n \
    \       return \"YES\"\n    }\n    if intersection == start2 {\n        return\
    \ \"YES\"\n    }\n    if intersection == end {\n        return \"YES\"\n    }\n\
    \    if intersection == start2 {\n        return \"YES\"\n    }\n    if intersection\
    \ == end {\n        return \"YES\"\n    }\n    if intersection == start2 {\n \
    \       return \"YES\"\n    }\n    if intersection == end {\n        return \"\
    YES\"\n    }\n    if intersection == start2 {\n        return \"YES\"\n    }\n\
    \    if intersection == end {\n        return \"YES\"\n    }\n    if intersection\
    \ == start2 {\n        return \"YES\"\n    }\n    if intersection == end {\n \
    \       return \"YES\"\n    }\n    if intersection == start2 {\n        return\
    \ \"YES\"\n    }\n    if intersection == end {\n        return \"YES\"\n    }\n\
    \    if intersection == start2 {\n        return \"YES\"\n    }\n    if intersection\
    \ == end {\n        return \"YES\"\n    }\n    if intersection == start2 {\n \
    \       return \"YES\"\n    }\n    if intersection == end {\n        return \"\
    YES\"\n    }\n    if intersection == start2 {\n        return \"YES\"\n    }\n\
    \    if intersection == end {\n        return \"YES\"\n    }\n    if intersection\
    \ == start2 {\n        return \"YES\"\n    }\n    if intersection == end {\n \
    \       return \"YES\"\n    }\n    if intersection == start", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end >= interval2_start {\n        \
    \    if interval1_end <= interval2_end {\n                if interval1_end ==\
    \ interval2_end {\n                    return \"YES\";\n                } else\
    \ {\n                    return \"NO\";\n                }\n            } else\
    \ {\n                return \"NO\";\n            }\n        } else {\n       \
    \     return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }",
  "    if interval1.0 < interval2.0 {\n        let (start, end) = interval1;\n   \
    \     let (end1, end2) = interval2;\n        if start > end1 {\n            (end1,\
    \ end) = (end, end1);\n        }\n        if end > end2 {\n            (end2,\
    \ end) = (end, end2);\n        }\n        if start > end2 {\n            (end1,\
    \ end) = (end, end1);\n        }\n        if end > end1 {\n            (end2,\
    \ end) = (end, end2);\n        }\n        let mut result = String::new();\n  \
    \      let mut start1 = start;\n        let mut end1 = end;\n        let mut start2\
    \ = end2;\n        let mut end2 = end;\n        let mut i = 0;\n        while\
    \ i < 2 {\n            if start1 < end1 && start2 < end2 {\n                if\
    \ start1 < end2 {\n                    result.push_str(&format!(\"{}\", start1));\n\
    \                    start1 += 1;\n                }\n                if end1\
    \ < end2 {\n                    result.push_str(&format!(\"{}\", end1));\n   \
    \                 end1 += 1;\n                }\n                if start2 < end1\
    \ {\n                    result.push_str(&format!(\"{}\", start2));\n        \
    \            start2 += 1;\n                }\n                if end2 < end1 {\n\
    \                    result.push_str(&format!(\"{}\", end2));\n              \
    \      end2 += 1;\n                }\n                i += 1;\n            } else\
    \ {\n                if start1 < end1 {\n                    result.push_str(&format!(\"\
    {}\", start1));\n                    start1 += 1;\n                }\n       \
    \         if end1 < end1 {\n                    result.push_str(&format!(\"{}\"\
    , end1));\n                    end1 += 1;\n                }\n               \
    \ i += 1;\n            }\n        }\n        if result.len() == 0 {\n        \
    \    result = \"NO\";\n        } else {\n            result = \"YES\";\n     \
    \   }\n    } else {\n        let (start, end) = interval1;\n        let (end1,\
    \ end2) = interval2;\n        if start > end1 {\n            (end1, end) = (end,\
    \ end1);\n        }\n        if end > end2 {\n            (end2, end) = (end,\
    \ end2);\n        }\n        if start > end2 {\n            (end1, end) = (end,\
    \ end1);\n        }\n        if end > end1 {\n            (end2, end) = (end,\
    \ end2);\n        }\n        let mut result = String::new();\n        let mut\
    \ start1 = start;\n        let mut end1 = end;\n        let mut start2 = end2;\n\
    \        let mut end2 = end;\n        let mut i = 0;\n        while i < 2 {\n\
    \            if start1 < end1 && start2 < end2 {\n                if start1 <\
    \ end2 {\n                    result.push_str(&format!(\"{}\", start1));\n   \
    \                 start1 ", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 0;\n \
    \   let mut prime_number_found = false;\n    let mut prime_number_found2 = false;\n\
    \    let mut prime_number_found3 = false;\n    let mut prime_number_found4 = false;\n\
    \    let mut prime_number_found5 = false;\n    let mut prime_number_found6 = false;\n\
    \    let mut prime_number_found7 = false;\n    let mut prime_number_found8 = false;\n\
    \    let mut prime_number_found9 = false;\n    let mut prime_number_found10 =\
    \ false;\n    let mut prime_number_found11 = false;\n    let mut prime_number_found12\
    \ = false;\n    let mut prime_number_found13 = false;\n    let mut prime_number_found14\
    \ = false;\n    let mut prime_number_found15 = false;\n    let mut prime_number_found16\
    \ = false;\n    let mut prime_number_found17 = false;\n    let mut prime_number_found18\
    \ = false;\n    let mut prime_number_found19 = false;\n    let mut prime_number_found20\
    \ = false;\n    let mut prime_number_found21 = false;\n    let mut prime_number_found22\
    \ = false;\n    let mut prime_number_found23 = false;\n    let mut prime_number_found24\
    \ = false;\n    let mut prime_number_found25 = false;\n    let mut prime_number_found26\
    \ = false;\n    let mut prime_number_found27 = false;\n    let mut prime_number_found28\
    \ = false;\n    let mut prime_number_found29 = false;\n    let mut prime_number_found30\
    \ = false;\n    let mut prime_number_found31 = false;\n    let mut prime_number_found32\
    \ = false;\n    let mut prime_number_found33 = false;\n    let mut prime_number_found34\
    \ = false;\n    let mut prime_number_found35 = false;\n    let mut prime_number_found36\
    \ = false;\n    let mut prime_number_found37 = false;\n    let mut prime_number_found38\
    \ = false;\n    let mut prime_number_found39 = false;\n    let mut prime_number_found40\
    \ = false;\n    let mut prime_number_found41 = false;\n    let mut prime_number_found42\
    \ = false;\n    let mut prime_", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    let mut interval1_prime = true;\n    let mut interval2_prime\
    \ = true;\n    while interval1_len > 0 && interval2_len > 0 {\n        if interval1_start\
    \ > interval2_end {\n            interval1_prime = false;\n            interval1_len\
    \ = interval1_len - 1;\n        } else {\n            interval2_prime = false;\n\
    \            interval2_len = interval2_len - 1;\n        }\n        if interval1_start\
    \ > interval2_start {\n            interval1_start = interval1_start - 1;\n  \
    \          interval1_end = interval1_end - 1;\n        } else {\n            interval2_start\
    \ = interval2_start - 1;\n            interval2_end = interval2_end - 1;\n   \
    \     }\n    }\n    if interval1_len == 0 && interval2_len == 0 {\n        return\
    \ \"NO\";\n    }\n    if interval1_len == 0 {\n        return \"YES\";\n    }\n\
    \    if interval2_len == 0 {\n        return \"YES\";\n    }\n    if interval1_prime\
    \ && interval2_prime {\n        return \"YES\";\n    }\n    if interval1_prime\
    \ && !interval2_prime {\n        return \"NO\";\n    }\n    return \"NO\";"]
stop_tokens:
- "\n}"
