name: HumanEval_49_modp
language: rust
prompt: "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!(candidate(3, 5),\
  \ 3);\n    assert_eq!(candidate(1101, 101), 2);\n    assert_eq!(candidate(0, 101),\
  \ 1);\n    assert_eq!(candidate(3, 11), 8);\n    assert_eq!(candidate(100, 101),\
  \ 1);\n    assert_eq!(candidate(30, 5), 4);\n    assert_eq!(candidate(31, 5), 3);\n\
  }\n"
completions: ['    n & (p - 1)', "    let mut result = n;\n    while result > p {\n\
    \        result -= p;\n    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    n / p",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p != 1);\n    debug_assert!(p != 2);\n    debug_assert!(p\
    \ != 3);\n    debug_assert!(p != 4);\n    debug_assert!(p != 5);\n    debug_assert!(p\
    \ != 6);\n    debug_assert!(p != 7);\n    debug_assert!(p != 8);\n    debug_assert!(p\
    \ != 9);\n    debug_assert!(p != 10);\n    debug_assert!(p != 11);\n    debug_assert!(p\
    \ != 12);\n    debug_assert!(p != 13);\n    debug_assert!(p != 14);\n    debug_assert!(p\
    \ != 15);\n    debug_assert!(p != 16);\n    debug_assert!(p != 17);\n    debug_assert!(p\
    \ != 18);\n    debug_assert!(p != 19);\n    debug_assert!(p != 20);\n    debug_assert!(p\
    \ != 21);\n    debug_assert!(p != 22);\n    debug_assert!(p != 23);\n    debug_assert!(p\
    \ != 24);\n    debug_assert!(p != 25);\n    debug_assert!(p != 26);\n    debug_assert!(p\
    \ != 27);\n    debug_assert!(p != 28);\n    debug_assert!(p != 29);\n    debug_assert!(p\
    \ != 30);\n    debug_assert!(p != 31);\n    debug_assert!(p != 32);\n    debug_assert!(p\
    \ != 33);\n    debug_assert!(p != 34);\n    debug_assert!(p != 35);\n    debug_assert!(p\
    \ != 36);\n    debug_assert!(p != 37);\n    debug_assert!(p != 38);\n    debug_assert!(p\
    \ != 39);\n    debug_assert!(p != 40);\n    debug_assert!(p != 41);\n    debug_assert!(p\
    \ != 42);\n    debug_assert!(p != 43);\n    debug_assert!(p != 44);\n    debug_assert!(p\
    \ != 45);\n    debug_assert!(p != 46);\n    debug_assert!(p != 47);\n    debug_assert!(p\
    \ != 48);\n    debug_assert!(p != 49);\n    debug_assert!(p != 50);\n    debug_assert!(p\
    \ != 51);\n    debug_assert!(p != 52);\n    debug_assert!(p != 53);\n    debug_assert!(p\
    \ != 54);\n    debug_assert!(p != 55);\n    debug_assert!(p != 56);\n    debug_assert",
  '    n & (p - 1)', '    n & (p - 1)', '    n - (n % p)', '    n & (p - 1)', "  \
    \  debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n", '    n & (p - 1)', "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n\n    }", "    if n < 0 {\n     \
    \   n + (p as isize)\n    } else {\n        n % p\n    }", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= 0);\n    debug_assert!(n\
    \ <= 64);\n    debug_assert!(p <= 64);\n    debug_assert", '    n & (p - 1)',
  "    if n < 0 {\n        n + (p as isize)\n    } else {\n        n % p\n    }",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "   \
    \ let mut n1 = n;\n    let mut n2 = n;\n    let mut n3 = n;\n    let mut n4 =\
    \ n;\n    let mut n5 = n;\n    let mut n6 = n;\n    let mut n7 = n;\n    let mut\
    \ n8 = n;\n    let mut n9 = n;\n    let mut n10 = n;\n    let mut n11 = n;\n \
    \   let mut n12 = n;\n    let mut n13 = n;\n    let mut n14 = n;\n    let mut\
    \ n15 = n;\n    let mut n16 = n;\n    let mut n17 = n;\n    let mut n18 = n;\n\
    \    let mut n19 = n;\n    let mut n20 = n;\n    let mut n21 = n;\n    let mut\
    \ n22 = n;\n    let mut n23 = n;\n    let mut n24 = n;\n    let mut n25 = n;\n\
    \    let mut n26 = n;\n    let mut n27 = n;\n    let mut n28 = n;\n    let mut\
    \ n29 = n;\n    let mut n30 = n;\n    let mut n31 = n;\n    let mut n32 = n;\n\
    \    let mut n33 = n;\n    let mut n34 = n;\n    let mut n35 = n;\n    let mut\
    \ n36 = n;\n    let mut n37 = n;\n    let mut n38 = n;\n    let mut n39 = n;\n\
    \    let mut n40 = n;\n    let mut n41 = n;\n    let mut n42 = n;\n    let mut\
    \ n43 = n;\n    let mut n44 = n;\n    let mut n45 = n;\n    let mut n46 = n;\n\
    \    let mut n47 = n;\n    let mut n48 = n;\n    let mut n49 = n;\n    let mut\
    \ n50 = n;\n    let mut n51 = n;\n    let mut n52 = n;\n    let mut n53 = n;\n\
    \    let mut n54 = n;\n    let mut n55 = n;\n    let mut n56 = n;\n    let mut\
    \ n57 = n;\n    let mut n58 = n;\n    let mut n59 = n;\n    let mut n60 = n;\n\
    \    let mut n61 = n;\n    let mut n62 = n;\n    let mut n63 = n;\n    let mut\
    \ n64 = n;\n    let mut n65 = n;\n    let mut n66", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    if n == 0 {\n        return 1;\n    }\n    if n == 1 {\n\
    \        return p;\n    }\n    if n == p {\n        return n;\n    }\n    if n\
    \ % p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n   \
    \     return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == p {\n        return modp(n / p, p);\n    }", '    n & (p - 1)', "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "    let\
    \ mut n1 = n;\n    let mut n2 = n;\n    while n2 > 1 {\n        n1 %= p;\n   \
    \     n2 %= p;\n    }\n    n1", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > 0);\n    debug_assert", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p < n);\n    debug_assert!(p % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p < n);\n    debug_assert!(p % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", "    debug_assert!(n >= 0);\n    debug_assert!(p >=\
    \ 0);\n    debug_assert!(p <= n);\n    debug_assert!((n % p) == 0);\n    n + (n\
    \ - p) % p", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n \
    \   }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n   \
    \ debug_assert!(p < n);\n    let mut res = 0;\n    while n > 0 {\n        if n\
    \ % p == 0 {\n            res += 1;\n        }\n        n /= p;\n    }\n    res",
  '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    let mut\
    \ r = n;\n    while r > p && r != 0 {\n        r = r / p;\n    }\n    r", "  \
    \  if n < 0 {\n        n ^ (p - 1)\n    } else {\n        n & (p - 1)\n    }",
  '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p % n == 0);\n    n - (p % n)", '    n
    & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n\
    \    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", '    n & (p
    - 1)', "    let mut result = n;\n    while result > p {\n        result -= p;\n\
    \    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n &
    (p - 1)', "    let mut result = n;\n    while result > p {\n        result -=\
    \ p;\n    }\n    result", "    if n < 0 {\n        n + (p - 1)\n    } else {\n\
    \        n\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    ", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ < 64);\n    debug_", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p <= n);\n    debug_assert!(n >= p);\n    debug_assert!(n <=\
    \ (p - 1));\n    debug_assert!((p - 1) <= n);\n    debug_assert!(n <= (p - 1));\n\
    \    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p -\
    \ 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n \
    \   debug_assert!(n <= (p - 1));\n    debug_assert!(n <= (p - 1));\n    debug_assert!(n\
    \ <= (p - 1));\n", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n \
    \   debug_assert!(p <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::i64::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::isize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n\
    \    debug_assert!(p <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::i16::MAX as isize);\n    debug_assert!(p <= std::u16::MAX\
    \ as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n\
    \    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::i16::MAX as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n\
    \    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n    ", "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n >\
    \ 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", "    if n < 0 {\n        n + (p - 1)\n    } else {\n\
    \        n\n    }", '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", "    let mut result = n;\n    while result >\
    \ p && result % p != 0 {\n        result -= p;\n    }\n    result", "    let mut\
    \ result = n;\n    while result > p && result % p != 0 {\n        result -= 1;\n\
    \    }\n    result", "    let mut npow = pow2(n);\n    npow %= p;\n    if npow\
    \ == 0 {\n        npow = 1;\n    }\n    npow", "    if n < 0 {\n        n + (p\
    \ - 1)\n    } else {\n        n\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    ", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::i64::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::isize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n\
    \    debug_assert!(p <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::i16::MAX as isize);\n    debug_assert!(p <= std::u16::MAX\
    \ as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n\
    \    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::i16::MAX as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n\
    \    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n    ", '    n &
    (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", '    n & (p - 1)', "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p < 64);\n    let mut result = n;\n    while result\
    \ > p {\n        result -= p;\n    }\n    result", "    if n < 0 {\n        n\
    \ + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', '    n & (p -
    1)', "    let mut res = 0;\n    while n > 0 {\n        if n % p == 0 {\n     \
    \       res += p;\n        }\n        n /= p;\n    }\n    res", '    n & (p -
    1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", " \
    \   let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", "    if n < 0 {\n        n ^ (p - 1)\n    } else {\n        n &\
    \ (p - 1)\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n \
    \   debug_assert!(p <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as i", "    debug_assert!(n > 0);\n    debug_assert!(p > 0);\n\
    \    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p <\
    \ n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p <= n);\n    debug_assert!(p >= 0);\n    ", "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n < 0\
    \ {\n        n + (p - 1)\n    } else {\n        n\n    }", "    let mut result\
    \ = n;\n    while result > p {\n        result -= p;\n    }\n    result", "  \
    \  if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "   \
    \ if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= std::i32::MAX);\n    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::i16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    ", "   \
    \ if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p
    - 1)', "    debug_assert!(n > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n    n / p",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <=\
    \ std::u32::MAX as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n\
    \    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::i16::MAX as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n\
    \    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n    debug_assert!(p\
    \ <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i16::MAX\
    \ as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p\
    \ <= std::usize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX as isize);\n\
    \    debug_assert!(p <= std::u8::MAX as isize);\n    ", '    n & (p - 1)', '    n
    & (p - 1)', '    n - (n % p)', "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n \
    \       n\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n      \
    \  n\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n %\
    \ p\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n \
    \   }", '    n & (p - 1)', '    n & (p - 1)', "    let mut result = n;\n    while\
    \ result > p && result % p != 0 {\n        result -= p;\n    }\n    result", " \
    \   if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n &
    (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p % 2 == 1);\n    debug_assert!(n %\
    \ p == 0);\n    n / p", '    n & (p - 1)', "    if n < 0 {\n        p\n    } else\
    \ {\n        n & (p - 1)\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= p);", "    if n == 0 {\n        return 1;\n    }\n    if\
    \ n == 1 {\n        return p;\n    }\n    if p < 2 {\n        return n;\n    }\n\
    \    if p < n {\n        return modp(n - p, p);\n    }\n    if p > n {\n     \
    \   return modp(n - p, p);\n    }\n    let mut res = n;\n    while res > p {\n\
    \        res -= p;\n    }\n    res", '    n & (p - 1)', '    n & (p - 1)', '    n
    & (p - 1)', '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p <= std::i32::MAX);\n\
    \    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_", '    n & (p - 1)', "    let mut res = 0;\n    while n != 0 {\n \
    \       if n % p == 0 {\n            res += p;\n            n /= p;\n        }\
    \ else {\n            res += 1;\n            n -= 1;\n        }\n    }\n    res",
  "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n\
    \    debug_assert!(n % p == 0);\n    n / p", "    if n < 0 {\n        n + (p -\
    \ 1)\n    } else {\n        n\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p);\n\
    \    debug_assert!(p > 0);\n    debug_assert!(p < 256);\n    debug_assert!(p !=\
    \ 1);\n    debug_assert!(p != 2);\n    debug_assert!(p != 4);\n    debug_assert!(p\
    \ != 8);\n    debug_assert!(p != 16);\n    debug_assert!(p != 32);\n    debug_assert!(p\
    \ != 64);\n    debug_assert!(p != 128);\n    debug_assert!(p != 256);\n    debug_assert!(p\
    \ != 512);\n    debug_assert!(p != 1024);\n    debug_assert!(p != 2048);\n   \
    \ debug_assert!(p != 4096);\n    debug_assert!(p != 8192);\n    debug_assert!(p\
    \ != 16384);\n    debug_assert!(p != 32768);\n    debug_assert!(p != 65536);\n\
    \    debug_assert!(p != 131072);\n    debug_assert!(p != 262144);\n    debug_assert!(p\
    \ != 524288);\n    debug_assert!(p != 1048576);\n    debug_assert!(p != 2097152);\n\
    \    debug_assert!(p != 4194304);\n    debug_assert!(p != 8388608);\n    debug_assert!(p\
    \ != 16777216);\n    debug_assert!(p != 33554432);\n    debug_assert!(p != 67108864);\n\
    \    debug_assert!(p != 134217728);\n    debug_assert!(p != 268435456);\n    debug_assert!(p\
    \ != 536870912);\n    debug_assert!(p != 1073741824);\n    debug_assert!(p !=\
    \ 2147483648);\n    debug_assert!(p != 4294967296);\n    debug_assert!(p != 8589934592);\n\
    \    debug_assert!(p != 17179869184);\n    debug_assert!(p != 34359738368);\n\
    \    debug_assert!(p != 68719476736);\n    debug_assert!(p != 137438953472);\n\
    \    debug_assert!(p != 274877906944);\n    debug_assert!(p != 549755813888);\n\
    \    debug_assert!(p != 1099511627776);\n    debug_assert!(p != 2199023255552);\n\
    \    debug_assert!(p != 4398046511104);\n    debug_assert!(p != 8796093022208);\n\
    \    debug_assert!(p ", "    if n < 0 {\n        n + (p as isize)\n    } else\
    \ {\n        n % p\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n\
    \        n % p\n    }", "    let mut npow = pow2(n);\n    npow %= p;\n    if npow\
    \ == 0 {\n        npow = 1;\n    }\n    npow", '    n & (p - 1)', "    if n <\
    \ 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)',
  '    n & (p - 1)', '    n & (p - 1)', "    let mut res = 0;\n    while n > 0 {\n\
    \        if n % p == 0 {\n            res += p;\n            n /= p;\n       \
    \ } else {\n            res += 1;\n        }\n    }\n    res", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n", '    n & (p - 1)', '    n & (p - 1)', "    if n == 0 {\n        return\
    \ 1;\n    }\n    if n == 1 {\n        return p;\n    }\n    if n == p {\n    \
    \    return n;\n    }\n    if n % p == 0 {\n        return modp(n - 1, p) * p;\n\
    \    }\n    if n % p == p {\n        return modp(n - 1, p);\n    }\n    if n %\
    \ p == 0 {\n        return modp(n - 1, p);\n    }\n    if n % p == p {\n     \
    \   return modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n        return modp(n\
    \ - 1, p) * p;\n    }\n    if n % p == p {\n        return modp(n - 1, p);\n \
    \   }\n    if n % p == 0 {\n        return modp(n - 1, p) * p;\n    }\n    if\
    \ n % p == p {\n        return modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n\
    \        return modp(n - 1, p) * p;\n    }\n    if n % p == p {\n        return\
    \ modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n        return modp(n - 1,\
    \ p) * p;\n    }\n    if n % p == p {\n        return modp(n - 1, p) * p;\n  \
    \  }\n    if n % p == 0 {\n        return modp(n - 1, p) * p;\n    }\n    if n\
    \ % p == p {\n        return modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n\
    \        return modp(n - 1, p) * p;\n    }\n    if n % p == p {\n        return\
    \ modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n        return modp(n - 1,\
    \ p) * p;\n    }\n    if n % p == p {\n        return modp(n - 1, p) * p;\n  \
    \  }\n    if n % p == 0 {\n        return modp(n - 1, p) * p;\n    }\n    if n\
    \ % p == p {\n        return modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n\
    \        return modp(n - 1, p) * p;\n    }\n    if n % p == p {\n        return\
    \ modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n        return modp(n - 1,\
    \ p) * p;\n    }\n    if n % p == p {\n        return modp(n - 1, p) * p;\n  \
    \  }\n    if n % p == 0 {\n        return modp(n - 1, p) * p;\n    }\n    if n\
    \ % p == p {\n        return modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n\
    \        return modp(n - 1, p) * p;\n    }\n    if n % p == p {\n        return\
    \ modp(n - 1, p) * p;\n    }\n    if n % p == 0 {\n        return modp(n - 1,\
    \ p) * p;\n    }\n    if n % p == p {\n        return modp(n - 1, p) * p;\n  \
    \  }\n    if n % p == 0 {\n        return mod", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p %\
    \ 2 == 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != n);\n    debug_assert!(p\
    \ != 0);", '    n & (p - 1)', "    if n < 0 {\n        n ^ (p - 1)\n    } else\
    \ {\n        n & (p - 1)\n    }", '    n & (p - 1)', "    if n < 0 {\n       \
    \ n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    if n <\
    \ 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "    if n < 0\
    \ {\n        n + (p as isize)\n    } else {\n        n % p\n    }", "    let mut\
    \ result = n;\n    if result > p {\n        result = p - 1;\n    }\n    if result\
    \ < 0 {\n        result = 0;\n    }\n    result", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p <=\
    \ std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as usize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u32::MAX\
    \ as usize);\n    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p\
    \ <= std::i64::MAX as usize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as usize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::isize::MAX as usize);\n    debug_assert!(p\
    \ <= std::usize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as usize);\n\
    \    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX\
    \ as usize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::usize::MAX as usize);\n    debug_assert!(p <= std::usize::MAX as isize);\n\
    \    debug_assert!(p <= std::usize::MAX as usize);\n    debug_assert!(p <= std::usize::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as usize);\n    debug_assert!(p\
    \ <= std::usize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as usize);\n\
    \    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX\
    \ as usize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::usize::MAX as usize);\n    debug_assert!(p <= std::usize::MAX as isize);\n\
    \    debug_assert!(p <= std::usize::MAX as usize);\n    debug_assert!(p <= std::usize::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as usize);\n    debug_assert!(p\
    \ <= std::usize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as usize);\n\
    \    debug_assert!(p <= std::usize::MAX as isize);", '    n & (p - 1)', '    n
    & (p - 1)', "    if n >= p {\n        n\n    } else {\n        n % p\n    }",
  '    n - (n % p)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", "    let mut n2 = n * n;\n    while n2 > p {\n        n2 -= p;\n    }\n\
    \    n2", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::u32::MAX as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::i8::MAX as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n\
    \    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::i16::MAX as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n\
    \    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n    debug_assert!(p\
    \ <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i16::MAX\
    \ as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p\
    \ <= std::usize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX as isize);\n\
    \    debug_assert!(p <= std::u8::MAX as isize);\n    ", '    n & (p - 1)', " \
    \   debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    ", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p);\n    debug_assert!(p == 0 || n % p == 0);\n  \
    \  debug_assert!(p > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p <=\
    \ std::i32::MAX as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n\
    \    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p\
    \ <= std::usize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX as isize);\n\
    \    debug_assert!(p <= std::u8::MAX as isize);\n    debug_assert!(p <= std::u16::MAX\
    \ as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p\
    \ <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i16::MAX as isize);\n\
    \    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::i64::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX\
    \ as isize);\n    debug_assert!(p <= std::i8::MAX as isize);\n    debug_assert!(p\
    \ <= std::u8::MAX as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::i16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::i64::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::isize::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n\
    \    debug_assert!(p <= std::i8::", '    n & (p - 1)', "    debug_assert!(n >=\
    \ 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ != 0);\n    debug_assert!(p != 1);\n    debug_assert!(p != 2);\n    debug_assert!(p\
    \ != 3);\n    debug_assert!(p != 4);\n    debug_assert!(p != 5);\n    debug_assert!(p\
    \ != 6);\n    debug_assert!(p != 7);\n    debug_assert!(p != 8);\n    debug_assert!(p\
    \ != 9);\n    debug_assert!(p != 10);\n    debug_assert!(p != 11);\n    debug_assert!(p\
    \ != 12);\n    debug_assert!(p != 13);\n    debug_assert!(p != 14);\n    debug_assert!(p\
    \ != 15);\n    debug_assert!(p != 16);\n    debug_assert!(p != 17);\n    debug_assert!(p\
    \ != 18);\n    debug_assert!(p != 19);\n    debug_assert!(p != 20);\n    debug_assert!(p\
    \ != 21);\n    debug_assert!(p != 22);\n    debug_assert!(p != 23);\n    debug_assert!(p\
    \ != 24);\n    debug_assert!(p != 25);\n    debug_assert!(p != 26);\n    debug_assert!(p\
    \ != 27);\n    debug_assert!(p != 28);\n    debug_assert!(p != 29);\n    debug_assert!(p\
    \ != 30);\n    debug_assert!(p != 31);\n    debug_assert!(p != 32);\n    debug_assert!(p\
    \ != 33);\n    debug_assert!(p != 34);\n    debug_assert!(p != 35);\n    debug_assert!(p\
    \ != 36);\n    debug_assert!(p != 37);\n    debug_assert!(p != 38);\n    debug_assert!(p\
    \ != 39);\n    debug_assert!(p != 40);\n    debug_assert!(p != 41);\n    debug_assert!(p\
    \ != 42);\n    debug_assert!(p != 43);\n    debug_assert!(p != 44);\n    debug_assert!(p\
    \ != 45);\n    debug_assert!(p != 46);\n    debug_assert!(p != 47);\n    debug_assert!(p\
    \ != 48);\n    debug_assert!(p != 49);\n    debug_assert!(p != 50);\n    debug_assert!(p\
    \ != 51);\n    debug_assert!(p != 52);\n    debug_assert!(p != 53);\n    debug_assert!(p\
    \ != 54);\n    debug_assert!(p != 55);\n    debug_assert!(", '    n - (n % p)',
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "   \
    \ debug_assert!(n > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p <= n);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    ", "    debug_assert!(n >= 0);\n   \
    \ debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 ==\
    \ 0);\n    debug_assert!(n % 2 == 0);\n    n + (n - p) / 2", "    debug_assert!(n\
    \ > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    (p - 1) & (n\
    \ - 1)", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    ", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", "    let mut n1 = n;\n    let mut n2 = n;\n\
    \    let mut n3 = n;\n    let mut n4 = n;\n    let mut n5 = n;\n    let mut n6\
    \ = n;\n    let mut n7 = n;\n    let mut n8 = n;\n    let mut n9 = n;\n    let\
    \ mut n10 = n;\n    let mut n11 = n;\n    let mut n12 = n;\n    let mut n13 =\
    \ n;\n    let mut n14 = n;\n    let mut n15 = n;\n    let mut n16 = n;\n    let\
    \ mut n17 = n;\n    let mut n18 = n;\n    let mut n19 = n;\n    let mut n20 =\
    \ n;\n    let mut n21 = n;\n    let mut n22 = n;\n    let mut n23 = n;\n    let\
    \ mut n24 = n;\n    let mut n25 = n;\n    let mut n26 = n;\n    let mut n27 =\
    \ n;\n    let mut n28 = n;\n    let mut n29 = n;\n    let mut n30 = n;\n    let\
    \ mut n31 = n;\n    let mut n32 = n;\n    let mut n33 = n;\n    let mut n34 =\
    \ n;\n    let mut n35 = n;\n    let mut n36 = n;\n    let mut n37 = n;\n    let\
    \ mut n38 = n;\n    let mut n39 = n;\n    let mut n40 = n;\n    let mut n41 =\
    \ n;\n    let mut n42 = n;\n    let mut n43 = n;\n    let mut n44 = n;\n    let\
    \ mut n45 = n;\n    let mut n46 = n;\n    let mut n47 = n;\n    let mut n48 =\
    \ n;\n    let mut n49 = n;\n    let mut n50 = n;\n    let mut n51 = n;\n    let\
    \ mut n52 = n;\n    let mut n53 = n;\n    let mut n54 = n;\n    let mut n55 =\
    \ n;\n    let mut n56 = n;\n    let mut n57 = n;\n    let mut n58 = n;\n    let\
    \ mut n59 = n;\n    let mut n60 = n;\n    let mut n61 = n;\n    let mut n62 =\
    \ n;\n    let mut n63 = n;\n    let mut n64 = n;\n    let mut n65 = n;\n    let\
    \ mut n66", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % p == 0);\n    n\
    \ / p", '    n & (p - 1)', "    let mut result = n;\n    while result > p {\n\
    \        result -= p;\n    }\n    result", "    if n == 0 {\n        return 1;\n\
    \    }\n    if n == 1 {\n        return p;\n    }\n    if n == p {\n        return\
    \ n;\n    }\n    if n < p {\n        return modp(n - 1, p) + p;\n    }\n    if\
    \ n > p {\n        return modp(n, p - 1) + p;\n    }", "    let mut result = n;\n\
    \    while result > p {\n        result -= p;\n    }\n    result", "    if n <\
    \ 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", '    n & (p -
    1)', "    if n < 0 {\n        n + (p as isize)\n    } else {\n        n % p\n\
    \    }", '    n & (p - 1)', "    if n == 0 {\n        return 1;\n    }\n    if\
    \ n == 1 {\n        return p;\n    }\n    if p == 1 {\n        return n;\n   \
    \ }\n    if p < n {\n        return modp(n - 1, p) % p;\n    }\n    modp(n - 1,\
    \ p)", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", '    n & (p - 1)', "    debug_assert!(n\
    \ > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    let mut result\
    \ = n;\n    while result > p {\n        result -= p;\n    }\n    result", "  \
    \  debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < 256);\n\
    \    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    ", '    n & (p - 1)', "    debug_assert!(n > 0);\n    debug_assert!(p\
    \ > 0);\n    let mut result = 1;\n    while n > 0 {\n        if n % p == 0 {\n\
    \            result *= p;\n            n /= p;\n        } else {\n           \
    \ result *= n;\n        }\n    }\n    result", '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(n\
    \ <= 64);\n    let mut result = n;\n    while result > p {\n        result -=\
    \ p;\n    }\n    result", "    let mut npow = pow2(n);\n    npow %= p;\n    if\
    \ npow == 0 {\n        npow = 1;\n    }\n    npow", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(n %\
    \ p == 0);\n    n / p", '    n & (p - 1)', "    debug_assert!(n > 0 && p > 0);\n\
    \    let mut result = 1;\n    while n > 0 {\n        if n % p == 0 {\n       \
    \     result *= p;\n            n /= p;\n        } else {\n            result\
    \ *= p;\n        }\n    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= p);\n    debug_assert!(n % p == 0);\n   \
    \ debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n   \
    \ debug_assert!(n >= ", "    if n < 0 {\n        n + (p - 1)\n    } else {\n \
    \       n\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n \
    \   debug_assert!(p <= n);\n    debug_assert!(p <= std::i32::MAX);\n    debug_assert!(p\
    \ <= std::i64::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p <= n);\n    debug_assert!(p != 1);\n    debug_assert!(p !=\
    \ 2);\n    debug_assert!(p != 4);\n    debug_assert!(p != 8);\n    debug_assert!(p\
    \ != 16);\n    debug_assert!(p != 32);\n    debug_assert!(p != 64);\n    debug_assert!(p\
    \ != 128);\n    debug_assert!(p != 256);\n    debug_assert!(p != 512);\n    debug_assert!(p\
    \ != 1024);\n    debug_assert!(p != 2048);\n    debug_assert!(p != 4096);\n  \
    \  debug_assert!(p != 8192);\n    debug_assert!(p != 16384);\n    debug_assert!(p\
    \ != 32768);\n    debug_assert!(p != 65536);\n    debug_assert!(p != 131072);\n\
    \    debug_assert!(p != 262144);\n    debug_assert!(p != 524288);\n    debug_assert!(p\
    \ != 1048576);\n    debug_assert!(p != 2097152);\n    debug_assert!(p != 4194304);\n\
    \    debug_assert!(p != 8388608);\n    debug_assert!(p != 16777216);\n    debug_assert!(p\
    \ != 33554432);\n    debug_assert!(p != 67108864);\n    debug_assert!(p != 134217728);\n\
    \    debug_assert!(p != 268435456);\n    debug_assert!(p != 536870912);\n    debug_assert!(p\
    \ != 1073741824);\n    debug_assert!(p != -2147483648);\n    debug_assert!(p !=\
    \ -1);\n    debug_assert!(p != 1);\n    debug_assert!(p != 2);\n    debug_assert!(p\
    \ != 4);\n    debug_assert!(p != 8);\n    debug_assert!(p != 16);\n    debug_assert!(p\
    \ != 32);\n    debug_assert!(p != 64);\n    debug_assert!(p != 128);\n    debug_assert!(p\
    \ != 256);\n    debug_assert!(p != 512);\n    debug_assert!(p != 1024);\n    debug_assert!(p\
    \ != 2048);\n    debug_assert!(p != 4096);\n    debug_assert!(p != 8192);\n  \
    \  debug_assert!(p != 16384);\n    debug_assert!(p != 32768);\n    debug_assert!(p\
    \ != 65536);\n    debug_assert!(p != 131072);\n    ", "    let mut res = n;\n\
    \    while res > p {\n        res -= p;\n    }\n    res", '    n - (n % p)', " \
    \   let mut res = 0;\n    while n > 0 {\n        if n % p == 0 {\n           \
    \ res += p;\n        }\n        n /= p;\n    }\n    res", '    n & (p - 1)', " \
    \   debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= n);\n"]
stop_tokens:
- "\n}"
