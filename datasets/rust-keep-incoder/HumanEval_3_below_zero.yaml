name: HumanEval_3_below_zero
language: rust
prompt: "/// You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n/// zero balance. Your task is to detect if at any point the\
  \ balance of account fallls below zero, and\n/// at that point function should return\
  \ True. Otherwise it should return False.\n/// >>> below_zero([1, 2, 3])\n/// False\n\
  /// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
  \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]),\
  \ false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
  \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
completions: ["    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0",
  "    let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, operation| {\n       \
    \ balance + operation\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        match operation {\n            Operation::Deposit(amount) => balance\
    \ + amount,\n            Operation::Withdraw(amount) => balance - amount,\n  \
    \      }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| {\n        match op {\n            Operation::Deposit(amount) => balance\
    \ + amount,\n            Operation::Withdraw(amount) => balance - amount,\n  \
    \      }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    operations.iter().fold(false, |result, balance| {\n        result\
    \ || balance < 0\n    })", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, i| balance + i);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0",
  "    let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", '    operations.iter().all(|&x| x < 0)', "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, i| {\n\
    \        balance + i\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", '    operations.iter().fold(false,
    |b, a| b && a < 0)', "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        match operation {\n            Operation::Deposit(amount)\
    \ => {\n                balance += amount;\n                balance\n        \
    \    }\n            Operation::Withdraw(amount) => {\n                balance\
    \ -= amount;\n                balance\n            }\n        }\n    });\n   \
    \ balance < 0", "    let mut balance = operations.iter().sum();\n    balance <\
    \ 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        match operation {\n            1 => balance - 1,\n   \
    \         -1 => balance + 1,\n            _ => balance,\n        }\n    });\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, i| balance + i);\n   \
    \ balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().sum();\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut acc, x| acc + x);\n    balance < 0", "    let\
    \ mut balance = operations.iter().sum();\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, i| balance + i);\n    balance < 0",
  "    let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut acc,\
    \ x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", '    operations.iter().fold(true, |result, b| result && b <
    0)', '    operations.iter().fold(false, |acc, x| acc && x < 0)', "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, op| balance + op);\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| {\n\
    \        match op {\n            1 => balance + 1,\n            -1 => balance\
    \ - 1,\n            _ => balance,\n        }\n    });\n    balance < 0", "   \
    \ let mut balance = operations.iter().fold(0, |mut balance, operation| {\n   \
    \     balance + operation\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n \
    \   balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, op| {\n        match\
    \ op {\n            Operation::Deposit(amount) => balance + amount,\n        \
    \    Operation::Withdraw(amount) => balance - amount,\n        }\n    });\n  \
    \  balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", '    operations.iter().fold(false,
    |acc, x| acc && x < 0)', "    let mut balance = operations.iter().sum();\n   \
    \ balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ i| balance + i);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0", "    operations.iter().fold(false,\
    \ |result, balance| {\n        if balance < 0 {\n            true\n        } else\
    \ {\n            result\n        }\n    })", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| {\n        acc += x;\n        acc\n    });\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, op| {\n        match\
    \ op {\n            1 => balance + 1,\n            2 => balance - 1,\n       \
    \     _ => balance,\n        }\n    });\n\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut acc, x| {\n        acc += x;\n        acc\n\
    \    });\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut balance, op| balance + op);\n    balance <\
    \ 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| balance + i);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, i| balance\
    \ + i);\n    balance < 0", "    let mut balance = operations.iter().sum();\n \
    \   balance < 0", "    let mut balance = operations.iter().fold(0, |mut acc, x|\
    \ acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", '    operations.iter().fold(false, |b, x| b && x <
    0)', "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().sum();\n    balance < 0", "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, op| balance + op);\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", '    operations.iter().fold(false, |result, b| result && b < 0)', "  \
    \  let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, op| {\n        match op\
    \ {\n            1 => balance + 1,\n            -1 => balance - 1,\n         \
    \   _ => balance,\n        }\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().sum();\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", '    operations.iter().fold(false, |acc, x| acc && x < 0)', "    let mut\
    \ balance = operations.iter().fold(0, |mut balance, op| {\n        match op {\n\
    \            1 => balance + 1,\n            -1 => balance - 1,\n            _\
    \ => balance,\n        }\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, operation| {\n       \
    \ balance + operation\n    });\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, operation|\
    \ {\n        balance + operation\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut acc, x| {\n        if x < 0 {\n           \
    \ acc + x\n        } else {\n            acc\n        }\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().sum();\n    balance < 0", " \
    \   let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            1 => balance + 1,\n   \
    \         -1 => balance - 1,\n            _ => balance,\n        }\n    });\n\
    \    balance < 0", "    let mut balance = operations.iter().sum();\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, i| balance\
    \ + i);\n    balance < 0", "    let mut balance = operations.iter().sum();\n \
    \   balance < 0", "    let mut balance = operations.iter().fold(0, |mut acc, x|\
    \ {\n        acc += x;\n        acc\n    });\n    balance < 0", "    let mut balance\
    \ = operations.iter().fold(0, |mut acc, x| {\n        if x < 0 {\n           \
    \ acc\n        } else {\n            acc + x\n        }\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    operations.iter().fold(false, |result, balance|\
    \ {\n        if balance < 0 {\n            true\n        } else {\n          \
    \  result\n        }\n    })", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", '    operations.iter().fold(false,
    |acc, x| acc && x < 0)', "    operations.iter().fold(false, |mut acc, x| {\n \
    \       if *acc {\n            *acc = false;\n            true\n        } else\
    \ {\n            *acc = true;\n            false\n        }\n    })", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, operation| {\n       \
    \ balance + operation\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, operation| {\n        balance + operation\n    });\n    balance\
    \ < 0", "    let mut balance = operations.iter().fold(0, |mut balance, op| balance\
    \ + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0", '    operations.iter().fold(false,
    |b, x| b && x < 0)', "    let mut balance = operations.iter().fold(0, |mut acc,\
    \ x| {\n        acc += x;\n        acc\n    });\n    balance < 0", "    let mut\
    \ balance = operations.iter().sum();\n    balance < 0", "    let mut balance =\
    \ operations.iter().fold(0, |mut balance, i| balance + i);\n    balance < 0",
  "    let mut balance = operations.iter().fold(0, |mut balance, op| balance + op);\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ operation| {\n        balance + operation\n    });\n    balance < 0", "    let\
    \ mut balance = operations.iter().fold(0, |mut balance, operation| {\n       \
    \ balance + operation\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| {\n        match op {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut acc,\
    \ x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut balance,\
    \ op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0", "    let mut balance = operations.iter().fold(0, |mut acc,\
    \ x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut acc, x| acc + x);\n    balance < 0", "    let mut balance = operations.iter().fold(0,\
    \ |mut balance, op| balance + op);\n    balance < 0", "    let mut balance = operations.iter().sum();\n\
    \    balance < 0"]
stop_tokens:
- "\n}"
