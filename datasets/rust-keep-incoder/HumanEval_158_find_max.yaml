name: HumanEval_158_find_max
language: rust
prompt: "/// Write a function that accepts a list of strings.\n/// The list contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"of\"\
  , \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"]) == \"\
  enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfn find_max(words:\
  \ Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"\
  ), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"\
  aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]),\
  \ String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"),\
  \ String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"\
  footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"\
  we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]),\
  \ String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"),\
  \ String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"\
  nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"\
  this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"\
  this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"\
  b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"\
  ), String::from(\"play\")]), String::from(\"play\"));\n}\n"
completions: ["    let mut counter = HashMap::new();\n    for word in words {\n  \
    \      for c in word.chars() {\n            counter.insert(c, counter.get(c).unwrap()\
    \ + 1);\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.get(&max_key).unwrap();\n    for (_, value) in counter.iter() {\n\
    \        if value > max_value {\n            max_key = String::new();\n      \
    \      max_value = value;\n        }\n    }\n    max_key", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert((c).to_owned());\n\
    \        }\n        if count.len() > max_count.len() {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    if max_count.len()\
    \ == 0 {\n        return String::new();\n    }\n    if max_count.len() == 1 {\n\
    \        return max_word;\n    }\n    if max_count.len() > 1 {\n        let mut\
    \ max_count = std::collections::HashSet::new();\n        for word in words {\n\
    \            let mut count = std::collections::HashSet::new();\n            for\
    \ c in word.chars() {\n                count.insert((c).to_owned());\n       \
    \     }\n            if count.len() > max_count.len() {\n                max_count\
    \ = count;\n                max_word = word;\n            }\n        }\n     \
    \   return max_word;\n    }\n    return String::new();", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for ch in word.chars() {\n\
    \            counters.entry(ch).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_key = String::new();\n    let mut max_value = counters.iter().max().unwrap();\n\
    \    for (_, value) in counters {\n        if value == max_value {\n         \
    \   max_key = String::new();\n            max_value = value;\n        }\n    \
    \    if value == 1 {\n            max_key.push_str(&word);\n        }\n    }\n\
    \    max_key", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.keys() {\n     \
    \   if counters[c] > max_counter {\n            max_counter = counters[c];\n \
    \           max_word = c.to_string();\n        }\n    }\n    max_word", "    let\
    \ mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n  \
    \  let mut max_word = String::new();\n    for w in words {\n        if w.chars().count()\
    \ > max_count {\n            max_count = w.chars().count();\n            max_word\
    \ = w;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|s| s.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i].chars().count()\
    \ > max_count {\n            max_count = words[i].chars().count();\n         \
    \   max_word = words[i];\n        }\n        i += 1;\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut max_count =\
    \ words[0].chars().count();\n    let mut max_word = words[0];\n    for word in\
    \ words.iter().skip(1) {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut unique_chars\
    \ = HashMap::new();\n    for word in words {\n        for char in word.chars()\
    \ {\n            unique_chars.insert(char, 1);\n        }\n    }\n    let mut\
    \ max_chars = unique_chars.iter().max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if unique_chars.get(&max_chars).is_some() {\n\
    \            max_word = word;\n        }\n    }\n    max_chars", "    let mut\
    \ max_count = words[0].len();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().filter(|c| !c.is_whitespace()).count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    for word in words {\n        for char in word.chars() {\n            unique_chars.insert(char,\
    \ 0);\n        }\n    }\n    let mut max_chars = unique_chars.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if unique_chars.get(&max_chars).is_some()\
    \ {\n            max_word = word;\n        }\n    }\n    max_chars", "    let\
    \ mut unique_chars = HashMap::new();\n    let mut max_chars = String::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            if !unique_chars.contains_key(&c)\
    \ {\n                unique_chars.insert(c, 0);\n            }\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.len() > max_chars.len() {\n      \
    \      max_chars = word;\n        }\n    }\n    max_chars", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    if max_count.len() == 0 {\n\
    \        return String::new();\n    }\n    if max_count.len() == 1 {\n       \
    \ return max_word;\n    }\n    if max_count.len() > 1 {\n        return find_max(&[max_word]);\n\
    \    }\n    return String::new();", "    let mut counter = HashMap::new();\n \
    \   for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (_, v) in counter.iter() {\n        if v > max_value.len()\
    \ {\n            max_value = v;\n            max_key = String::new();\n      \
    \  }\n        if v == max_value.len() {\n            max_key += c;\n        }\n\
    \    }\n    if max_value.len() == 0 {\n        return String::new();\n    }\n\
    \    max_key", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count == max_count {\n            max_word = word;\n        }\n        if count\
    \ > max_count {\n            max_count = count;\n        }\n    }\n    max_word",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ == max_counter {\n            max_word = c.to_string();\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for (key, value) in counter.iter() {\n        if value > max_value.len()\
    \ {\n            max_value = key;\n            max_key = key;\n        }\n   \
    \ }\n    if max_value.len() == 0 {\n        return String::new();\n    }\n   \
    \ max_key", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().filter(|c| !c.is_whitespace()).count();\n        if count.is_max(&mut\
    \ max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut i = 0;\n    while i < words.len()\
    \ {\n        if words[i].chars().count() > max_count {\n            max_count\
    \ = words[i].chars().count();\n            max_word = words[i];\n        }\n \
    \       i += 1;\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    if max_count.len() > 0 {\n        max_word\n    } else {\n       \
    \ \"\"\n    }", "    let mut counter = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if *value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    if max_value.len() == 0 {\n        return String::new();\n\
    \    }\n    return max_key;", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut counters =\
    \ HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  let mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n\
    \        if v > max_counters.len() {\n            max_counters = v;\n        \
    \    max_word = word;\n            max_key = v;\n        }\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::i32::MAX;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = 0;\n    \
    \    for c in word.chars() {\n            count += 1;\n        }\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::collections::HashSet::new();\n \
    \   let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = std::collections::HashSet::new();\n        for c in word.chars() {\n     \
    \       count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    if max_count.len() == 0 {\n        return String::new();\n    }\n\
    \    if max_count.len() == 1 {\n        return max_word;\n    }\n    if max_count.len()\
    \ > 1 {\n        return max_word;\n    }\n    return String::new();", "    let\
    \ mut counters = HashMap::new();\n    for word in words {\n        for c in word.chars()\
    \ {\n            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_counter = 0;\n    let mut max_word = String::new();\n    for c in counters.keys()\
    \ {\n        if counters[c] > max_counter {\n            max_counter = counters[c];\n\
    \            max_word = c.to_string();\n        }\n    }\n    max_word", "   \
    \ let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for (_, value) in counter.iter() {\n        if value > max_value.len() {\n\
    \            max_value = value;\n            max_key = String::new();\n      \
    \  }\n        max_key.push_str(&*max_value);\n    }\n    max_key", "    let mut\
    \ max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.iter().rev().next().unwrap() {\n            max_counters.entry(c).or_insert(0)\
    \ += 1;\n            max_word = word;\n        }\n    }\n    max_word", "    let\
    \ mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for counter in counters.iter() {\n      \
    \  if *counter > max_counters.iter().max().unwrap() {\n            max_counters\
    \ = counter;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            if !unique_chars.contains_key(&c)\
    \ {\n                unique_chars.insert(c, 1);\n            } else {\n      \
    \          unique_chars.entry(c).or_insert(0) += 1;\n            }\n        }\n\
    \    }\n    let mut max_chars = unique_chars.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_word = String::new();\n    for c in max_chars {\n        if !max_word.contains(&c)\
    \ {\n            max_word.push_str(&c);\n        }\n    }\n    max_word", "  \
    \  let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    for word in words {\n        for char in word.chars() {\n            if !unique_chars.contains_key(&char)\
    \ {\n                unique_chars.insert(char, 0);\n            }\n          \
    \  unique_chars.entry(char).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_chars = unique_chars.iter().max().unwrap();\n    let mut max_word = String::new();\n\
    \    for (char, count) in unique_chars.iter() {\n        if count > max_chars\
    \ {\n            max_chars = count;\n            max_word = char.to_string();\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = String::new();\n    for (key,\
    \ value) in counter.iter() {\n        if *value > max_value.len() {\n        \
    \    max_value = key;\n            max_key = key;\n        }\n    }\n    max_key",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut i = 0;\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n        if i == words.size() - 1 {\n            break;\n\
    \        }\n        i += 1;\n    }\n    max_word", "    let mut max_chars = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_chars {\n            max_chars = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut unique_chars = HashMap::new();\n    let mut max_chars = String::new();\n\
    \    for word in words {\n        for char in word.chars() {\n            if let\
    \ Some(count) = unique_chars.get(char) {\n                if count > max_chars.len()\
    \ {\n                    max_chars = char.to_string();\n                }\n  \
    \          } else {\n                unique_chars.insert(char, 1);\n         \
    \   }\n        }\n    }\n    max_chars", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = 0;\n    let mut max_word\
    \ = String::new();\n    for c in counters.keys() {\n        if counters[c] > max_counter\
    \ {\n            max_counter = counters[c];\n            max_word = c.to_string();\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (key, val) in counters {\n        if val\
    \ > max_counters.get(&key).unwrap() {\n            max_counters.insert(key, val);\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((*c).to_ascii_lowercase());\n        }\n        if count.len()\
    \ > max_count.len() {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    if max_count.len() == 0 {\n        return String::new();\n\
    \    }\n    if max_count.len() == 1 {\n        return max_word;\n    }\n    if\
    \ max_count.len() > 1 {\n        return find_max(vec![max_word]);\n    }\n   \
    \ return String::new();", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((*c).to_owned());\n        }\n        if count.len()\
    \ > max_count.len() {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    if max_count.len() == 0 {\n        return String::new();\n\
    \    }\n    if max_count.len() == 1 {\n        return max_word;\n    }\n    if\
    \ max_count.len() > 1 {\n        let mut max_index = std::collections::HashSet::new();\n\
    \        for (i, word) in words.iter().enumerate() {\n            if max_count.contains(&(*word).chars().nth(i).unwrap())\
    \ {\n                max_index.insert(i);\n            }\n        }\n        if\
    \ max_index.len() == 1 {\n            return words[max_index[0]];\n        }\n\
    \    }\n    \"\".to_string()", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::collections::HashSet::new();\n \
    \   let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().filter(|c| !c.is_whitespace()).count();\n        if count > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    if max_count.len() == 0 {\n        return String::new();\n    }\n\
    \    if max_count.len() == 1 {\n        return max_word;\n    }\n    if max_count.len()\
    \ > 1 {\n        let mut max_index = std::collections::HashSet::new();\n     \
    \   for word in words {\n            let count = word.chars().filter(|c| !c.is_whitespace()).count();\n\
    \            if count > max_count.len() {\n                max_count = count;\n\
    \                max_word = word;\n            }\n        }\n        if max_count.len()\
    \ == 1 {\n            return max_word;\n        }\n        if max_count.len()\
    \ > 1 {\n            return max_word.to_owned();\n        }\n    }\n    return\
    \ String::new();", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashSet::new();\n\
    \    let mut max_chars = String::new();\n    for word in words {\n        for\
    \ c in word.chars() {\n            if !unique_chars.contains(&c) {\n         \
    \       unique_chars.insert(c);\n            }\n        }\n        if unique_chars.len()\
    \ > max_chars.len() {\n            max_chars = unique_chars;\n        }\n    \
    \    unique_chars.clear();\n    }\n    if unique_chars.len() > max_chars.len()\
    \ {\n        max_chars = unique_chars;\n    }\n    max_chars", "    let mut max_count\
    \ = words.iter().map(|s| s.chars().count()).max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.len() {\n            max_counters = v;\n            max_key\
    \ = String::new();\n        }\n    }\n    if max_counters.len() == 0 {\n     \
    \   return String::new();\n    }\n    for (_, v) in max_counters.iter() {\n  \
    \      if v == max_counters.len() {\n            return max_key;\n        }\n\
    \    }\n    return String::new();", "    let mut counter = HashMap::new();\n \
    \   for word in words {\n        counter.insert(word.chars().distinct().count(),\
    \ 1);\n    }\n    let mut max_key = counter.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_value = counter.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_key = max_key.0;\n    let mut max_value = max_value.0;\n    for\
    \ (key, value) in counter {\n        if value == max_value {\n            max_key\
    \ = key;\n            max_value = value;\n        }\n    }\n    return max_key;",
  "    let mut max_chars = String::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut chars = String::new();\n        for\
    \ c in word.chars() {\n            if chars.contains(&c) {\n                chars.insert(c);\n\
    \            } else {\n                chars.push(c);\n            }\n       \
    \ }\n        if chars.len() > max_chars.len() {\n            max_chars = chars;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    let mut i = 0;\n    while i < words.len() {\n\
    \        if words[i].chars().count() > max_count {\n            max_count = words[i].chars().count();\n\
    \            max_word = words[i];\n        }\n        i += 1;\n    }\n    max_word",
  "    let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for (key, value) in counter.iter() {\n        if value > max_value.len()\
    \ {\n            max_value = key;\n            max_key = key;\n        }\n   \
    \ }\n    max_key", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counters.iter().max_by_key(|&(_,\
    \ count)| count).unwrap();\n    for (_, count) in counters {\n        if count\
    \ > max_value.1 {\n            max_key = String::new();\n            max_value\
    \ = count;\n        }\n        if count == max_value.1 {\n            max_key.push_str(&word);\n\
    \        }\n    }\n    max_key", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    if max_value.len() == 0 {\n        return String::new();\n\
    \    }\n    return max_key;", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i].chars().count()\
    \ > max_count {\n            max_count = words[i].chars().count();\n         \
    \   max_word = words[i];\n        }\n        i += 1;\n    }\n    max_word", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for ((key, value), &mut counter) in counter.iter_mut().zip(words.iter())\
    \ {\n        if *counter > max_value.len() {\n            max_value = key;\n \
    \           max_key = key;\n        }\n        *counter -= 1;\n    }\n    max_key",
  "    let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.insert(c, counter.entry(c).or_insert(0)\
    \ +1);\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = -1;\n    for (_, value) in counter.iter() {\n        if value > max_value\
    \ {\n            max_value = value;\n            max_key = String::new();\n  \
    \      }\n        max_key.push_str(&*max_key);\n        max_key.push_str(&*c);\n\
    \    }\n    max_key", "    let mut max_count = words[0].chars().count();\n   \
    \ let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n     \
    \   let count = word.chars().count();\n        if count > max_count {\n      \
    \      max_count = count;\n            max_word = word;\n        }\n    }\n  \
    \  max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    if max_value.len() > 0 {\n        max_value\n    } else\
    \ {\n        \"\"\n    }", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count == max_count {\n            max_word\
    \ = word;\n        }\n        if count > max_count {\n            max_count =\
    \ count;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        if\
    \ word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for (_, count) in max_counters.iter_mut() {\n        if *count > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_key = String::new();\n\
    \        }\n        *count = *count - 1;\n    }\n    if max_counters.len() ==\
    \ 0 {\n        return String::new();\n    }\n    let mut max_key = String::new();\n\
    \    for (_, count) in max_counters.iter_mut() {\n        if *count > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_key = String::new();\n\
    \        }\n        *count = *count - 1;\n    }\n    if max_counters.len() ==\
    \ 0 {\n        return String::new();\n    }\n    for (_, count) in max_counters.iter_mut()\
    \ {\n        if *count > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = String::new();\n        }\n        *count = *count - 1;\n\
    \    }\n    if max_counters.len() == 0 {\n        return String::new();\n    }\n\
    \    for (_, count) in max_counters.iter_mut() {\n        if *count > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_key = String::new();\n\
    \        }\n        *count = *count - 1;\n    }\n    if max_counters.len() ==\
    \ 0 {\n        return String::new();\n    }\n    for (_, count) in max_counters.iter_mut()\
    \ {\n        if *count > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = String::new();\n        }\n        *count = *count - 1;\n\
    \    }\n    if max_counters.len() == 0 {\n        return String::new();\n    }\n\
    \    for (_, count) in max_counters.iter_mut() {\n        if *count > max_counters.len()\
    \ {\n            max_counters = HashMap::new();\n            max_key = String::new();\n\
    \        }\n        *count = *count - 1;\n    }\n    if max_counters.len() ==\
    \ 0 {\n        return String::new();\n    }\n    for (_, count) in max_counters.iter_mut()\
    \ {\n        if *count > max_counters.len() {\n            max_counters = HashMap::new();\n\
    \            max_key = String::new();\n        }\n        *count = *count - 1;",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for index\
    \ in 0..words.len() {\n        if words[index].chars().count() > max_count {\n\
    \            max_count = words[index].chars().count();\n            max_word =\
    \ words[index];\n            max_index = index;\n        }\n    }\n    max_word",
  "    let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    if max_count.len() == 0 {\n\
    \        return String::new();\n    }\n    return max_word;", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    let mut i = 0;\n    for word in words {\n   \
    \     if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n        if i == words.size() - 1 {\n\
    \            break;\n        }\n        i += 1;\n    }\n    return max_word;",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for (key, value) in counter.iter() {\n        if value > max_value.len()\
    \ {\n            max_value = key;\n            max_key = key;\n        }\n   \
    \ }\n    if max_value.len() == 0 {\n        return String::new();\n    }\n   \
    \ return max_key;", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_index = i;\n        }\n    }\n\
    \    max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = 0;\n    let mut max_word\
    \ = String::new();\n    for c in counters.keys() {\n        if counters[c] > max_counter\
    \ {\n            max_counter = counters[c];\n            max_word = c.to_string();\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|w|\
    \ w.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for w in words {\n        if w.chars().count() > max_count {\n          \
    \  max_count = w.chars().count();\n            max_word = w;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::collections::HashSet::new();\n \
    \   let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((*c).to_ascii_lowercase());\n        }\n        if count.len()\
    \ > max_count.len() {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    if max_count.len() == 0 {\n        return String::new();\n\
    \    }\n    if max_count.len() == 1 {\n        return max_word;\n    }\n    if\
    \ max_count.len() > 1 {\n        return find_max(vec![max_word]);\n    }\n   \
    \ return String::new();", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = std::collections::HashSet::new();\n        for c in word.chars() {\n     \
    \       count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    if max_count.len() == 0 {\n        return String::new();\n    }\n\
    \    if max_count.len() == 1 {\n        return max_word;\n    }\n    let mut max_count\
    \ = max_count.iter().cloned().collect::<Vec<_>>();\n    let mut max_word = max_word.to_owned();\n\
    \    for word in words {\n        let count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut unique_chars\
    \ = HashMap::new();\n    let mut max_chars = String::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            if !unique_chars.contains_key(&c) {\n                unique_chars.insert(c,\
    \ 0);\n            }\n            unique_chars.entry(c).or_insert(0) += 1;\n \
    \       }\n        if unique_chars.len() > max_chars.len() {\n            max_chars\
    \ = unique_chars.clone();\n            max_word = word.clone();\n        }\n \
    \   }\n    max_chars", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter() {\n    \
    \    if v > max_counters.len() {\n            max_counters = v;\n            max_key\
    \ = String::new();\n        }\n    }\n    max_key.push_str(&words[words.index(&max_key)].to_string());\n\
    \    max_key", "    let mut counts = HashMap::new();\n    for word in words {\n\
    \        let mut count = counts.entry(word.clone()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = counts.iter().max().unwrap();\n    let\
    \ mut max_word = String::new();\n    for (_, count) in counts {\n        if *count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut max_count =\
    \ words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        if word.chars().count() >\
    \ max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counts = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counts.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_count = counts.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counts.keys() {\n       \
    \ if counts[c] == max_count {\n            max_word.push(c);\n        }\n    }\n\
    \    if max_word.len() == 0 {\n        return String::new();\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|s| s.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.entry(c).or_insert(0) {\n            max_counters[c]\
    \ = max_counters.entry(c).or_insert(0);\n            max_word = word;\n      \
    \  }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((*c).to_string());\n        }\n        if count.len()\
    \ > max_count.len() {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    if max_count.len() == 0 {\n        return String::new();\n\
    \    }\n    if max_count.len() == 1 {\n        return max_word;\n    }\n    if\
    \ max_count.len() > 1 {\n        let mut max_count = max_count.iter().cloned().collect::<Vec<_>>();\n\
    \        max_count.sort();\n        return max_word;\n    }\n    return String::new();",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (key, value) in max_counters {\n        if value ==\
    \ counters.len() {\n            max_key = key;\n        }\n    }\n    max_key",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut i = 0;\n    while i < words.len()\
    \ {\n        if max_count < words[i].chars().count() {\n            max_count\
    \ = words[i].chars().count();\n            max_word = words[i];\n        }\n \
    \       i += 1;\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for ((key, value) in counter.iter().cloned().sort_by(|a,\
    \ b| b.cmp(&a))) {\n        if value == counter.get(&key).unwrap().cloned() {\n\
    \            max_key.push_str(key);\n            max_value.push_str(key);\n  \
    \      }\n    }\n    if max_key.len() > max_value.len() {\n        max_key\n \
    \   } else {\n        max_value\n    }", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((*c).to_owned());\n        }\n        if count.len()\
    \ > max_count.len() {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    if max_count.len() == 0 {\n        return String::new();\n\
    \    }\n    if max_count.len() == 1 {\n        return max_word;\n    }\n    if\
    \ max_count.len() > 1 {\n        let mut max_index = std::collections::HashSet::new();\n\
    \        for (i, word) in words.iter().enumerate() {\n            if max_count.contains(&(*word).chars())\
    \ {\n                max_index.insert(i);\n            }\n        }\n        if\
    \ max_index.len() == 1 {\n            return words[max_index.iter().next().unwrap()];\n\
    \        }\n    }\n    String::new()", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        counters.insert(word.chars().count(), 1);\n\
    \    }\n    let mut max_counters = counters.clone();\n    let mut max_word = String::new();\n\
    \    for counter in counters {\n        if *counter > max_counters.len() {\n \
    \           max_counters = counter;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|w|\
    \ w.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for w in words {\n        if w.chars().count() > max_count {\n          \
    \  max_count = w.chars().count();\n            max_word = w;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|s| s.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        let count = word.chars().count();\n \
    \       if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for ((key, value), &mut counter) in counter.iter_mut().zip(&mut\
    \ counter) {\n        if *value > max_value.len() {\n            max_value = key;\n\
    \            max_key = key;\n        }\n    }\n    max_key", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for (key, val) in max_counters {\n        if val > max_counters.len() {\n  \
    \          max_counters = HashMap::new();\n            max_key = key;\n      \
    \  }\n    }\n    max_key", "    let mut counters = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_word_len = String::new();\n \
    \   for c in counters.keys() {\n        if counters[c] > max_counters[c] {\n \
    \           max_counters[c] = counters[c];\n            max_word = word;\n   \
    \         max_word_len = c;\n        }\n    }\n    if max_counters[max_word_len]\
    \ > 1 {\n        max_word\n    } else {\n        \"\"\n    }", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().filter(|c| !c.is_whitespace()).count();\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counter = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_chars = String::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ chars = String::new();\n        for char in word.chars() {\n            chars.push_str(char);\n\
    \        }\n        if chars.len() > max_chars.len() {\n            max_chars\
    \ = chars;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = std::cmp::Ordering::Equal;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = counter.iter().max_by_key(|&(_,\
    \ v)| v).unwrap();\n    for (_, v) in counter.iter_mut() {\n        if v == max_value\
    \ {\n            max_key = String::new();\n            max_value = v;\n      \
    \  }\n        max_key.push_str(&*max_key);\n        *v = *v - 1;\n    }\n    max_key",
  "    let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for ((key, value), &mut counter) in counter.iter_mut().zip(words.iter())\
    \ {\n        if *value > max_value.len() {\n            max_value = key;\n   \
    \         max_key = key;\n        }\n        *counter -= 1;\n    }\n    max_key",
  "    let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for (_, value) in counter.iter() {\n        if value > max_value.len() {\n\
    \            max_value = value;\n            max_key = String::new();\n      \
    \  }\n        if value == max_value.len() {\n            max_key.push_str(&*max_key);\n\
    \        }\n    }\n    max_key.push_str(&*max_value);\n    max_key", "    let\
    \ mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().filter(|c| !c.is_whitespace()).count();\n        if count.is_max(&mut\
    \ max_count) {\n            max_count.clear();\n            max_word = word;\n\
    \        } else if count.is_max(&mut max_count) {\n            max_count.clear();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter() {\n        let count = word.chars().count();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        for ch in word.chars() {\n            counters.entry(ch).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counters.iter().max().unwrap();\n    for (_, value) in counters {\n      \
    \  if value == max_value {\n            max_key = String::from(word);\n      \
    \  }\n    }\n    max_key", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().filter(|c| !c.is_whitespace()).count();\n        if count.is_max(&mut\
    \ max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|s|\
    \ s.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_chars = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().rev() {\n    \
    \    let chars = word.chars().count();\n        if chars > max_chars {\n     \
    \       max_chars = chars;\n            max_word = word;\n        }\n    }\n \
    \   max_word", "    let mut max_count = std::collections::HashSet::new();\n  \
    \  let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    if max_count.len() == 0 {\n        return String::new();\n    }\n\
    \    if max_count.len() == 1 {\n        return max_word;\n    }\n    if max_count.len()\
    \ > 1 {\n        let mut max_index = max_count.iter().max_by_key(|&(_, count)|\
    \ count).unwrap();\n        return max_words[max_index];\n    }\n    return String::new();",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (key, val) in counters {\n        if val > max_counters.get(&key).unwrap()\
    \ {\n            max_counters.insert(key, val);\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        counter.insert(word.chars().count(), 1);\n \
    \   }\n    let mut max_key = counter.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_value = counter.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_key = max_key.0;\n    let mut max_value = max_value.0;\n    for\
    \ (_, count) in counter.iter() {\n        if count > max_value {\n           \
    \ max_value = count;\n            max_key = max_key.0;\n        }\n    }\n   \
    \ return max_key;", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    if max_count.len() == 0 {\n        return String::new();\n    }\n\
    \    if max_count.len() == 1 {\n        return max_word;\n    }\n    if max_count.len()\
    \ > 1 {\n        let mut max_word = String::new();\n        for word in words\
    \ {\n            let mut count = std::collections::HashSet::new();\n         \
    \   for c in word.chars() {\n                count.insert(c);\n            }\n\
    \            if count.len() == max_count.len() {\n                if count.iter().any(|&x|\
    \ x == max_count.iter().max()) {\n                    max_word = word;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ max_word;\n    }\n    return String::new();", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counters.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut max_count = words[0].len();\n  \
    \  let mut max_word = words[0];\n    for word in words {\n        if word.len()\
    \ > max_count {\n            max_count = word.len();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut counter = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (key, value) in counter.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = key;\n            max_key = key;\n\
    \        }\n    }\n    if max_value.len() > 0 {\n        max_key\n    } else {\n\
    \        \"\"\n    }", "    let mut max_count = words[0].chars().count();\n  \
    \  let mut max_word = words[0];\n    for word in words.iter() {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().filter(|c| !c.is_whitespace()).count();\n        if count.is_max(&mut\
    \ max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counter.insert(c,\
    \ counter.entry(c).or_insert(0) +1);\n        }\n    }\n    let mut max_key =\
    \ String::new();\n    let mut max_value = counter.iter().max().unwrap();\n   \
    \ for (_, value) in counter {\n        if value == max_value {\n            max_key\
    \ = String::from(word);\n        }\n    }\n    max_key", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = String::new();\n\
    \    let mut max_chars = String::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut unique_chars = String::new();\n    \
    \    for char in word.chars() {\n            if !unique_chars.contains(&char)\
    \ {\n                unique_chars.push_str(&char);\n            }\n        }\n\
    \        if unique_chars.len() > max_chars.len() {\n            max_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    max_chars", "    let mut\
    \ max_count = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let count = word.chars().filter(|c| !c.is_whitespace()).count();\n\
    \        if count.is_max(&mut max_count) {\n            max_count = count;\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert((c, 1));\n        }\n\
    \        if count.len() > max_count.len() {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    if max_count.len() == 0 {\n\
    \        return String::new();\n    }\n    if max_count.len() == 1 {\n       \
    \ return max_word;\n    }\n    if max_count.len() > 1 {\n        let mut max_word\
    \ = String::new();\n        for word in words {\n            let mut count = std::collections::HashSet::new();\n\
    \            for c in word.chars() {\n                count.insert((c, 1));\n\
    \            }\n            if count.len() == max_count.len() {\n            \
    \    if count.iter().min().unwrap().0 as usize < max_count.iter().min().unwrap().0\
    \ as usize {\n                    max_word = word;\n                }\n      \
    \      }\n        }\n        return max_word;\n    }\n    return String::new();",
  "    let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = String::new();\n    let mut max_value = counter.iter().max_by_key(|&(_,\
    \ v)| v);\n    while let Some((key, value)) = max_value.next() {\n        if value\
    \ == 1 {\n            max_key.push_str(key);\n        }\n    }\n    if max_key.len()\
    \ == 0 {\n        \"\"\n    } else {\n        max_key\n    }", "    let mut max_chars\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let mut chars = word.chars().count();\n \
    \       if chars > max_chars {\n            max_chars = chars;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_chars = String::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ chars = String::new();\n        for c in word.chars() {\n            chars.push_str(&c.to_string());\n\
    \        }\n        if chars.len() > max_chars.len() {\n            max_chars\
    \ = chars;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.insert(c, counter.entry(c).or_insert(0)\
    \ +1);\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counter.iter().max().unwrap();\n    for (_, value) in counter {\n        if\
    \ value == max_value {\n            max_key = String::from(word);\n        }\n\
    \    }\n    max_key", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for counter in counters {\n      \
    \  if counters[counter] > max_counter {\n            max_counter = counters[counter];\n\
    \            max_word = words[counters.iter().position(|&(_, count)| count ==\
    \ max_counter).unwrap()];\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = String::new();\n    for (key,\
    \ value) in counter.iter() {\n        if *value > max_value.len() {\n        \
    \    max_value = key;\n            max_key = key;\n        }\n    }\n    max_key",
  "    let mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            if let Some(count) = counters.entry(c).or_insert(0) {\n         \
    \       *count += 1;\n            }\n        }\n    }\n    let mut max_key = String::new();\n\
    \    let mut max_value = String::new();\n    for (key, value) in counters.iter()\
    \ {\n        if *value > max_value.len() {\n            max_value = key;\n   \
    \         max_key = key;\n        }\n    }\n    max_key", "    let mut unique_chars\
    \ = HashSet::new();\n    let mut max_chars = String::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            if !unique_chars.contains(c) {\n                unique_chars.insert(c);\n\
    \            } else {\n                max_chars = max_chars.clone();\n      \
    \          max_word = word.clone();\n            }\n        }\n    }\n    if max_chars.len()\
    \ > unique_chars.len() {\n        max_chars.clone_from_slice(&unique_chars.iter().cloned().collect::<Vec<_>>());\n\
    \        max_word\n    } else {\n        max_word\n    }", "    let mut max_count\
    \ = std::i32::MAX;\n    let mut max_word = String::new();\n    for word in words\
    \ {\n        let mut count = std::i32::MAX;\n        for c in word.chars() {\n\
    \            count += c.chars().count();\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word"]
stop_tokens:
- "\n}"
