name: HumanEval_24_largest_divisor
language: rust
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
  \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n   \
  \ assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
completions: ["    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n \
    \   for divisor in 2..=n {\n        if n % divisor == 0 {\n            if max_divisor_size\
    \ < divisor {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n            } else {\n                max_divisor = max_divisor_size\
    \ as isize;\n                max_divisor_size = divisor as isize;\n          \
    \  }\n        }\n    }\n    max_divisor", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n    let mut\
    \ max_divisor_ind_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..n {\n        if n % i == 0 {\n            if max_divisor_remainder > 0\
    \ {\n                max_divisor = i;\n                max_divisor_remainder =\
    \ max_divisor_remainder - i;\n            } else {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = i;\n            }\n        }\n\
    \    }\n    max_divisor", "    let mut largest = n;\n    let mut i = 1;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            largest = i;\n        }\n   \
    \     i += 1;\n    }\n    largest", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_size = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_size_index\
    \ = 0;\n    let mut max_divisor_size_index2 = 0;\n    let mut max_divisor_size_index3\
    \ = 0;\n    let mut max_divisor_size_index4 = 0;\n    let mut max_divisor_size_index5\
    \ = 0;\n    let mut max_divisor_size_index6 = 0;\n    let mut max_divisor_size_index7\
    \ = 0;\n    let mut max_divisor_size_index8 = 0;\n    let mut max_divisor_size_index9\
    \ = 0;\n    let mut max_divisor_size_index10 = 0;\n    let mut max_divisor_size_index11\
    \ = 0;\n    let mut max_divisor_size_index12 = 0;\n    let mut max_divisor_size_index13\
    \ = 0;\n    let mut max_divisor_size_index14 = 0;\n    let mut max_divisor_size_index15\
    \ = 0;\n    let mut max_divisor_size_index16 = 0;\n    let mut max_divisor_size_index17\
    \ = 0;\n    let mut max_divisor_size_index18 = 0;\n    let mut max_divisor_size_index19\
    \ = 0;\n    let mut max_divisor_size_index20 = 0;\n    let mut max_divisor_size_index21\
    \ = 0;\n    let mut max_divisor_size_index22 = 0;\n    let mut max_divisor_size_index23\
    \ = 0;\n    let mut max_divisor_size_index24 = 0;\n    let mut max_divisor_size_index25\
    \ = 0;\n    let mut max_divisor_size_index26 = 0;\n    let mut max_divisor_size_index27\
    \ = 0;\n    let mut max_divisor_size_index28 = 0;\n    let mut max_divisor_size_index29\
    \ = 0;\n    let mut max_divisor_size_index30 = 0;\n    let mut max_divisor_size_index31\
    \ = 0;\n    let mut max_divisor_size_index32 = 0;\n    let mut max_divisor_size_index33\
    \ = 0;\n    let mut max_divisor_size_index34 = 0;\n    let mut max_divisor_size_index35\
    \ = 0;\n    let mut max_divisor_size_index36 = 0;\n    let mut max_divisor_size_index37\
    \ = 0;\n    let mut max_divisor_size_index38 = 0;\n    let mut max_divisor_size_index39\
    \ = 0;\n    let mut max_divisor_size_index40 = 0;\n    let mut max_divisor_size_index41\
    \ = 0;\n    let mut max_divisor_size_index42 = 0;\n    let mut max_divisor_size_index43\
    \ = 0;\n    let mut max_divisor_size_index44 = 0;\n    let mut max_divisor_size_index45\
    \ = 0;\n    let mut max_divisor_size_index46 = 0;\n    let mut max_divisor_size_index47\
    \ = 0;\n    let mut max_divisor_size_index48 = 0;\n    let mut max_divisor_size_index49\
    \ = 0;\n    let mut max_", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size ==\
    \ 0 {\n            max_divisor = max_divisor_size;\n        }\n        max_divisor_size\
    \ /= 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_size = 0;\n    let\
    \ mut max_divisor_size_divisor_divisor_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor =\
    \ 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut largest = n;\n    let mut divisor = 1;\n    while divisor < n {\n \
    \       if n % divisor == 0 {\n            largest = divisor;\n        }\n   \
    \     divisor += 1;\n    }\n    largest", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n            } else {\n                max_divisor_size = divisor;\n\
    \            }\n        }\n    }\n    if max_divisor_size > max_divisor_value\
    \ {\n        max_divisor_value = max_divisor_size;\n    }\n    max_divisor_value",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for d\
    \ in divisors(n) {\n        if n % d == 0 {\n            if d > max_divisor {\n\
    \                max_divisor = d;\n                max_divisor_remainder = n %\
    \ d;\n            }\n        }\n    }\n    if max_divisor_remainder == 0 {\n \
    \       max_divisor\n    } else {\n        max_divisor + 1\n    }", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as usize;\n                max_divisor_value\
    \ = n / divisor as isize;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n            } else {\n                max_divisor_size = divisor;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    for i in 0..n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_index = i;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count_index\
    \ = 0;\n    let mut max_divisor_remainder_count_index2 = 0;\n    let mut max_divisor_remainder_count_index3\
    \ = 0;\n    let mut max_divisor_remainder_count_index4 = 0;\n    let mut max_divisor_remainder_count_index5\
    \ = 0;\n    let mut max_divisor_remainder_count_index6 = 0;\n    let mut max_divisor_remainder_count_index7\
    \ = 0;\n    let mut max_divisor_remainder_count_index8 = 0;\n    let mut max_divisor_remainder_count_index9\
    \ = 0;\n    let mut max_divisor_remainder_count_index10 = 0;\n    let mut max_divisor_remainder_count_index11\
    \ = 0;\n    let mut max_divisor_remainder_count_index12 = 0;\n    let mut max_divisor_remainder_count_index13\
    \ = 0;\n    let mut max_divisor_remainder_count_index14 = 0;\n    let mut max_divisor_remainder_count_index15\
    \ = 0;\n    let mut max_divisor_remainder_count_index16 = 0;\n    let mut max_divisor_remainder_count_index17\
    \ = 0;\n    let mut max_divisor_remainder_count_index18 = 0;\n    let mut max_divisor_remainder_count_index19\
    \ = 0;\n    let mut max_divisor_remainder_count_index20 = 0;\n    let mut max_divisor_remainder_count_index21\
    \ = 0;\n    let mut max_divisor_remainder_count_index22 = 0;\n    let mut max_divisor_remainder_count_index23\
    \ = 0;\n    let mut max_divisor_remainder_count_index24 = 0;\n    let mut max_divisor_remainder_count_index25\
    \ = 0;\n    let mut max_divisor_remainder_count_index26 = 0;\n    let mut max_divisor_remainder_count_index27\
    \ = 0;\n    let mut max_divisor_remainder_count_index28 = 0;\n    let mut max_divisor_remainder_count_index29\
    \ = 0;\n    let mut max_divisor_remainder_count_index30 = 0;\n    let mut max_divisor_remainder_count_index31\
    \ = 0;\n    let mut max_divisor_remainder_count_index32 = 0;\n    let mut max_divisor_remainder_count_index33\
    \ = 0;\n    let mut max_divisor_remainder_count_index34 = 0;\n    let mut max_divisor_remainder_count_index35\
    \ = 0;\n    let mut max_divisor_remainder_count_index36 = 0;\n    let mut max_divisor_remainder_count_index37\
    \ = 0;\n    let mut max_divisor_remainder_count_", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_ind = 1;\n\
    \    let mut max_divisor_ind_ind2 = 1;\n    let mut max_divisor_ind_ind3 = 1;\n\
    \    let mut max_divisor_ind_ind4 = 1;\n    let mut max_divisor_ind_ind5 = 1;\n\
    \    let mut max_divisor_ind_ind6 = 1;\n    let mut max_divisor_ind_ind7 = 1;\n\
    \    let mut max_divisor_ind_ind8 = 1;\n    let mut max_divisor_ind_ind9 = 1;\n\
    \    let mut max_divisor_ind_ind10 = 1;\n    let mut max_divisor_ind_ind11 = 1;\n\
    \    let mut max_divisor_ind_ind12 = 1;\n    let mut max_divisor_ind_ind13 = 1;\n\
    \    let mut max_divisor_ind_ind14 = 1;\n    let mut max_divisor_ind_ind15 = 1;\n\
    \    let mut max_divisor_ind_ind16 = 1;\n    let mut max_divisor_ind_ind17 = 1;\n\
    \    let mut max_divisor_ind_ind18 = 1;\n    let mut max_divisor_ind_ind19 = 1;\n\
    \    let mut max_divisor_ind_ind20 = 1;\n    let mut max_divisor_ind_ind21 = 1;\n\
    \    let mut max_divisor_ind_ind22 = 1;\n    let mut max_divisor_ind_ind23 = 1;\n\
    \    let mut max_divisor_ind_ind24 = 1;\n    let mut max_divisor_ind_ind25 = 1;\n\
    \    let mut max_divisor_ind_ind26 = 1;\n    let mut max_divisor_ind_ind27 = 1;\n\
    \    let mut max_divisor_ind_ind28 = 1;\n    let mut max_divisor_ind_ind29 = 1;\n\
    \    let mut max_divisor_ind_ind30 = 1;\n    let mut max_divisor_ind_ind31 = 1;\n\
    \    let mut max_divisor_ind_ind32 = 1;\n    let mut max_divisor_ind_ind33 = 1;\n\
    \    let mut max_divisor_ind_ind34 = 1;\n    let mut max_divisor_ind_ind35 = 1;\n\
    \    let mut max_divisor_ind_ind36 = 1;\n    let mut max_divisor_ind_ind37 = 1;\n\
    \    let mut max_divisor_ind_ind38 = 1;\n    let mut max_divisor_ind_ind39 = 1;\n\
    \    let mut max_divisor_ind_ind40 = 1;\n    let mut max_divisor_ind_ind41 = 1;\n\
    \    let mut max_divisor_ind_ind42 = 1;\n    let mut max_divisor_ind_ind43 = 1;\n\
    \    let mut max_divisor_ind_ind44 = 1;\n    let mut max_divisor_ind_ind45 = 1;\n\
    \    let ", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder =\
    \ 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d >\
    \ max_divisor {\n                max_divisor = d;\n                max_divisor_remainder\
    \ = n % d;\n            }\n        }\n    }\n    if max_divisor_remainder == 0\
    \ {\n        max_divisor\n    } else {\n        max_divisor + 1\n    }", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        } else {\n            max_divisor_size += 1;\n        }\n    }\n\
    \    max_divisor", "    let mut largest = n;\n    let mut divisor = 1;\n    while\
    \ divisor < n {\n        largest = divisor;\n        divisor += 1;\n    }\n  \
    \  largest", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count_max\
    \ = 0;\n    let mut max_divisor_remainder_count_min = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_remainder_count_max_index = 0;\n    let mut max_divisor_remainder_count_min_index\
    \ = 0;\n    let mut max_divisor_re", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow = 0;\n\n \
    \   for divisor in 1..=n {\n        let remainder = n % divisor;\n        if remainder\
    \ == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_remainder = remainder;\n           \
    \     max_divisor_remainder_pow = 1;\n            }\n        } else {\n      \
    \      if remainder > max_divisor_remainder {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = remainder;\n                max_divisor_remainder_pow\
    \ = 1;\n            } else {\n                max_divisor_remainder_pow += 1;\n\
    \            }\n        }\n    }\n\n    if max_divisor_remainder_pow > 0 {\n \
    \       max_divisor_remainder /= max_divisor_remainder_pow;\n    }\n\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    let mut\
    \ max_divisor_value_index = 0;\n    let mut max_divisor_value_2 = n;\n    let\
    \ mut max_divisor_value_2_count = 0;\n    let mut max_divisor_value_3 = n;\n \
    \   let mut max_divisor_value_3_count = 0;\n    let mut max_divisor_value_4 =\
    \ n;\n    let mut max_divisor_value_4_count = 0;\n    let mut max_divisor_value_5\
    \ = n;\n    let mut max_divisor_value_5_count = 0;\n    let mut max_divisor_value_6\
    \ = n;\n    let mut max_divisor_value_6_count = 0;\n    let mut max_divisor_value_7\
    \ = n;\n    let mut max_divisor_value_7_count = 0;\n    let mut max_divisor_value_8\
    \ = n;\n    let mut max_divisor_value_8_count = 0;\n    let mut max_divisor_value_9\
    \ = n;\n    let mut max_divisor_value_9_count = 0;\n    let mut max_divisor_value_10\
    \ = n;\n    let mut max_divisor_value_10_count = 0;\n    let mut max_divisor_value_11\
    \ = n;\n    let mut max_divisor_value_11_count = 0;\n    let mut max_divisor_value_12\
    \ = n;\n    let mut max_divisor_value_12_count = 0;\n    let mut max_divisor_value_13\
    \ = n;\n    let mut max_divisor_value_13_count = 0;\n    let mut max_divisor_value_14\
    \ = n;\n    let mut max_divisor_value_14_count = 0;\n    let mut max_divisor_value_15\
    \ = n;\n    let mut max_divisor_value_15_count = 0;\n    let mut max_divisor_value_16\
    \ = n;\n    let mut max_divisor_value_16_count = 0;\n    let mut max_divisor_value_17\
    \ = n;\n    let mut max_divisor_value_17_count = 0;\n    let mut max_divisor_value_18\
    \ = n;\n    let mut max_divisor_value_18_count = 0;\n    let mut max_divisor_value_19\
    \ = n;\n    let mut max_divisor_value_19_count = 0;\n    let mut max_divisor_value_20\
    \ = n;\n    let mut max_divisor_value_20_count = 0;\n    let mut max_divisor_value_21\
    \ = n;\n    let mut max_divisor_value_21_count = 0;\n    let mut max_divisor_value_22\
    \ = n;\n    let mut max_divisor_value_22_count = 0;\n    let mut max_divisor_value_23\
    \ = n;\n    let mut max_divisor_value_23_count = 0;\n    let mut max_divisor_value_24\
    \ = n;\n    let mut max_divisor_value_24_count = 0;\n    let mut max_divisor_value_25\
    \ = n;\n    let mut max_divisor_value_25_count = 0;\n    let mut max_divisor_value_26\
    \ = n;\n    let mut max_divisor_value_26", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = 0;\n    for d in divisors(n) {\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_size = 1;\n       \
    \ }\n        if d > max_divisor_size {\n            max_divisor_size = d;\n  \
    \      }\n    }\n    max_divisor", "    let mut largest = n;\n    let mut max_divisor\
    \ = 1;\n    while largest % max_divisor != 0 {\n        max_divisor *= 2;\n  \
    \  }\n    largest", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = 1;\n        }\n        if d\
    \ > max_divisor_size {\n            max_divisor_size = d;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n\
    \    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut\
    \ max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 =\
    \ 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut\
    \ max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = divisor;\n            } else {\n               \
    \ max_divisor_size = divisor;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n\
    \    let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7] {\n    \
    \    if n % divisor == 0 {\n            if divisor > max_divisor {\n         \
    \       max_divisor = divisor;\n                max_divisor_index = 0;\n     \
    \       }\n            if divisor == max_divisor {\n                max_divisor_index\
    \ += 1;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    let mut max_divisor_value_found = false;\n    for i in 1..=n {\n \
    \       if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_index = i;\n                max_divisor_value\
    \ = i;\n                max_divisor_value_found = true;\n            }\n     \
    \   } else {\n            if max_divisor_value_found {\n                break;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count_index = 0;\n    let mut max_divisor_remainder_count_index2\
    \ = 0;\n    let mut max_divisor_remainder_count_index3 = 0;\n    let mut max_divisor_remainder_count_index4\
    \ = 0;\n    let mut max_divisor_remainder_count_index5 = 0;\n    let mut max_divisor_remainder_count_index6\
    \ = 0;\n    let mut max_divisor_remainder_count_index7 = 0;\n    let mut max_divisor_remainder_count_index8\
    \ = 0;\n    let mut max_divisor_remainder_count_index9 = 0;\n    let mut max_divisor_remainder_count_index10\
    \ = 0;\n    let mut max_divisor_remainder_count_index11 = 0;\n    let mut max_divisor_remainder_count_index12\
    \ = 0;\n    let mut max_divisor_remainder_count_index13 = 0;\n    let mut max_divisor_remainder_count_index14\
    \ = 0;\n    let mut max_divisor_remainder_count_index15 = 0;\n    let mut max_divisor_remainder_count_index16\
    \ = 0;\n    let mut max_divisor_remainder_count_index17 = 0;\n    let mut max_divisor_remainder_count_index18\
    \ = 0;\n    let mut max_divisor_remainder_count_index19 = 0;\n    let mut max_divisor_remainder_count_index20\
    \ = 0;\n    let mut max_divisor_remainder_count_index21 = 0;\n    let mut max_divisor_remainder_count_index22\
    \ = 0;\n    let mut max_divisor_remainder_count_index23 = 0;\n    let mut max_divisor_remainder_count_index24\
    \ = 0;\n    let mut max_divisor_remainder_count_index25 = 0;\n    let mut max_divisor_remainder_count_index26\
    \ = 0;\n    let mut max_divisor_remainder_count_index27 = 0;\n    let mut max_divisor_remainder_count_index28\
    \ = 0;\n    let mut max_divisor_remainder_count_index29 = 0;\n    let mut max_divisor_remainder_count_index30\
    \ = 0;\n    let mut max_divisor_remainder_count_index31 = 0;\n    let mut max_divisor_remainder_count_index32\
    \ = 0;\n    let mut max_divisor_remainder_count_index33 = 0;\n    let mut max_divisor_remainder_count_index34\
    \ = 0;\n    let mut max_divisor_remainder_count_index35 = 0;\n    let mut max_divisor_remainder_count_index36\
    \ = 0;\n    let mut max_divisor_remainder_count_index37 = 0;\n    let mut max_divisor_remainder_count_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n\
    \    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_prev = 1;\n\n \
    \   for i in 2..=max_divisor {\n        if n % i == 0 {\n            if max_divisor\
    \ == i {\n                max_divisor_ind = i;\n            } else {\n       \
    \         max_divisor_ind = max_divisor_ind_prev;\n            }\n        }\n\
    \        max_divisor_ind_prev = max_divisor_ind;\n    }\n    max_divisor_ind",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n            }\n            if divisor\
    \ > max_divisor2 {\n                max_divisor2 = divisor;\n            }\n \
    \       }\n    }\n    if max_divisor > max_divisor2 {\n        max_divisor\n \
    \   } else {\n        max_divisor2\n    }", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_num = -1;\n    let\
    \ mut max_divisor_ind_den = -1;\n    let mut max_divisor_ind_den_num = -1;\n\n\
    \    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor < i\
    \ {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \                max_divisor_ind_num = i;\n                max_divisor_ind_den\
    \ = i;\n                max_divisor_ind_den_num = i;\n            }\n        \
    \    if max_divisor_ind_num < i {\n                max_divisor_ind_num = i;\n\
    \                max_divisor_ind_den_num = i;\n            }\n            if max_divisor_ind_den\
    \ < i {\n                max_divisor_ind_den = i;\n            }\n        }\n\
    \    }\n\n    max_divisor", "    let mut largest = n;\n    let mut i = 1;\n  \
    \  while i <= n {\n        if n % i == 0 {\n            largest = i;\n       \
    \ }\n        i += 1;\n    }\n    largest", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    for\
    \ i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size < i {\n\
    \                max_divisor = i;\n                max_divisor_size = i;\n   \
    \             max_divisor_size_size = 1;\n            } else {\n             \
    \   max_divisor_size = i;\n                max_divisor_size_size = 1;\n      \
    \      }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor == 0 {\n                max_divisor = i;\n\
    \                max_divisor_remainder = n % i;\n            } else {\n      \
    \          if max_divisor_remainder == 0 {\n                    max_divisor =\
    \ i;\n                    max_divisor_remainder = n % i;\n                } else\
    \ {\n                    if max_divisor > i {\n                        max_divisor\
    \ = i;\n                        max_divisor_remainder = n % i;\n             \
    \       }\n                }\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 0..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 0;\n    let mut max_divisor5 = 0;\n    let mut max_divisor6 = 0;\n    let\
    \ mut max_divisor7 = 0;\n    let mut max_divisor8 = 0;\n    let mut max_divisor9\
    \ = 0;\n    let mut max_divisor10 = 0;\n    let mut max_divisor11 = 0;\n    let\
    \ mut max_divisor12 = 0;\n    let mut max_divisor13 = 0;\n    let mut max_divisor14\
    \ = 0;\n    let mut max_divisor15 = 0;\n\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if i % 2 == 0 {\n                max_divisor2 = i;\n \
    \           }\n            if i % 3 == 0 {\n                max_divisor3 = i;\n\
    \            }\n            if i % 4 == 0 {\n                max_divisor4 = i;\n\
    \            }\n            if i % 5 == 0 {\n                max_divisor5 = i;\n\
    \            }\n            if i % 6 == 0 {\n                max_divisor6 = i;\n\
    \            }\n            if i % 7 == 0 {\n                max_divisor7 = i;\n\
    \            }\n            if i % 8 == 0 {\n                max_divisor8 = i;\n\
    \            }\n            if i % 9 == 0 {\n                max_divisor9 = i;\n\
    \            }\n            if i % 10 == 0 {\n                max_divisor10 =\
    \ i;\n            }\n            if i % 11 == 0 {\n                max_divisor11\
    \ = i;\n            }\n            if i % 12 == 0 {\n                max_divisor12\
    \ = i;\n            }\n            if i % 13 == 0 {\n                max_divisor13\
    \ = i;\n            }\n            if i % 14 == 0 {\n                max_divisor14\
    \ = i;\n            }\n            if i % 15 == 0 {\n                max_divisor15\
    \ = i;\n            }\n        }\n    }\n\n    if max_divisor2 > max_divisor {\n\
    \        max_divisor = max_divisor2;\n    }\n    if max_divisor3 > max_divisor\
    \ {\n        max_divisor = max_divisor3;\n    }\n    if max_divisor4 > max_divisor\
    \ {\n        max_divisor = max_divisor4;\n    }\n    if max_divisor5 > max_divisor\
    \ {\n        max_divisor = max_divisor5;\n    }\n    if max_divisor6 > max_divisor\
    \ {\n        max_divisor = max_divisor6;\n    }\n    if max_divisor7 > max_divisor\
    \ {\n        max_divisor = max_divisor7;\n    }\n    if max_divisor8 > max_divisor\
    \ {\n        max_divisor = max_divisor8;\n    }\n    if max_divisor9 > max_divisor\
    \ {\n        max_divisor = max_divisor9;\n    }\n    if max_divisor10 > max_divisor\
    \ {\n        max_divisor = max_divisor10;\n    }\n    if max_divisor11 > max_divisor\
    \ {\n        max_divisor = max_divisor11;\n    }\n    if max_divisor12 > max_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_ind = i;\n            }\n  \
    \      }\n    }\n    max_divisor_ind", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = n;\n    for d in divisors(n) {\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_size = n;\n       \
    \ }\n    }\n    max_divisor_size", "    let mut max_divisor = 1;\n    let mut\
    \ max_divisor2 = 1;\n    for d in 2..=n {\n        if n % d == 0 {\n         \
    \   if d > max_divisor {\n                max_divisor = d;\n            }\n  \
    \          if d > max_divisor2 {\n                max_divisor2 = d;\n        \
    \    }\n        }\n    }\n    if max_divisor > max_divisor2 {\n        max_divisor\n\
    \    } else {\n        max_divisor2\n    }", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n  \
    \  let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_size = n;\n    while max_divisor_size != 1 {\n        max_divisor\
    \ += 1;\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_idx = 1;\n    let mut max_divisor_idx\
    \ = 1;\n    while max_divisor % 2 == 0 {\n        max_divisor /= 2;\n        max_divisor_idx\
    \ += 1;\n    }\n    while max_divisor % 3 == 0 {\n        max_divisor /= 3;\n\
    \        max_divisor_idx += 1;\n    }\n    while max_divisor % 5 == 0 {\n    \
    \    max_divisor /= 5;\n        max_divisor_idx += 1;\n    }\n    while max_divisor\
    \ % 7 == 0 {\n        max_divisor /= 7;\n        max_divisor_idx += 1;\n    }\n\
    \    while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n        max_divisor_idx\
    \ += 1;\n    }\n    while max_divisor % 13 == 0 {\n        max_divisor /= 13;\n\
    \        max_divisor_idx += 1;\n    }\n    while max_divisor % 17 == 0 {\n   \
    \     max_divisor /= 17;\n        max_divisor_idx += 1;\n    }\n    while max_divisor\
    \ % 19 == 0 {\n        max_divisor /= 19;\n        max_divisor_idx += 1;\n   \
    \ }\n    while max_divisor % 23 == 0 {\n        max_divisor /= 23;\n        max_divisor_idx\
    \ += 1;\n    }\n    while max_divisor % 29 == 0 {\n        max_divisor /= 29;\n\
    \        max_divisor_idx += 1;\n    }\n    while max_divisor % 31 == 0 {\n   \
    \     max_divisor /= 31;\n        max_divisor_idx += 1;\n    }\n    while max_divisor\
    \ % 37 == 0 {\n        max_divisor /= 37;\n        max_divisor_idx += 1;\n   \
    \ }\n    while max_divisor % 41 == 0 {\n        max_divisor /= 41;\n        max_divisor_idx\
    \ += 1;\n    }\n    while max_divisor % 43 == 0 {\n        max_divisor /= 43;\n\
    \        max_divisor_idx += 1;\n    }\n    while max_divisor % 47 == 0 {\n   \
    \     max_divisor /= 47;\n        max_divisor_idx += 1;\n    }\n    while max_divisor\
    \ % 53 == 0 {\n        max_divisor /= 53;\n        max_divisor_idx += 1;\n   \
    \ }\n    while max_divisor % 59 == 0 {\n        max_divisor /= 59;\n        max_divisor_idx\
    \ += 1;\n    }\n    while max_divisor % 61 == 0 {\n        max_divisor /= 61;\n\
    \        max_divisor_idx += 1;\n    }\n    while max_divisor % 67 == 0 {\n   \
    \     max_divisor /= 67;\n        max_divisor_idx += 1;\n    }\n    while max_divisor\
    \ % 71 == 0 {\n        max_divisor /= 71;\n        max_divisor_idx += 1;\n   \
    \ }\n    while max_divisor % 73 == 0 {\n        max_divisor /= 73;\n        max_",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    let mut max_divisor_value_found = false;\n    for i in 1..=max_divisor\
    \ {\n        if n % i == 0 {\n            if max_divisor > i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n               \
    \ max_divisor_value = n;\n                max_divisor_value_found = true;\n  \
    \          }\n        }\n    }\n    if max_divisor_value_found {\n        max_divisor\n\
    \    } else {\n        max_divisor_index\n    }", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n      \
    \  if n % max_divisor == 0 {\n            max_divisor = max_divisor + 1;\n   \
    \     }\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 0..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ i in 1..=max_divisor {\n        if n % i == 0 {\n            if max_divisor_value\
    \ < i {\n                max_divisor_value = i;\n                max_divisor_index\
    \ = i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_value", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ == 0 {\n                max_divisor = i;\n                max_divisor_size =\
    \ i;\n                max_divisor_size_size = i;\n            } else {\n     \
    \           if max_divisor_size < i {\n                    max_divisor = i;\n\
    \                    max_divisor_size = i;\n                    max_divisor_size_size\
    \ = i;\n                }\n            }\n        }\n    }\n    if max_divisor_size\
    \ == 0 {\n        max_divisor = 1;\n        max_divisor_size = 1;\n        max_divisor_size_size\
    \ = 1;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d\
    \ > max_divisor {\n                max_divisor = d;\n                max_divisor_size\
    \ = n;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_ind = i;\n            }\n  \
    \      }\n    }\n    max_divisor_ind", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor < divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n                max_divisor_value = n;\n            }\n        }\
    \ else {\n            if max_divisor_value < divisor {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    for d\
    \ in divisors(n) {\n        if d > max_divisor {\n            max_divisor = d;\n\
    \            max_divisor_size = n;\n            max_divisor_size_size = n;\n \
    \       }\n        if n % d == 0 {\n            max_divisor_size = n;\n      \
    \      max_divisor_size_size = d;\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size\
    \ = max_divisor_size / 2;\n    while max_divisor_size != 1 {\n        if n % max_divisor_size\
    \ == 0 {\n            max_divisor = max_divisor_size;\n        }\n        max_divisor_size\
    \ = max_divisor_size / 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_value = 0;\n    let mut max_divisor_value_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_value =\
    \ i;\n                max_divisor_value_index = i;\n            }\n        }\n\
    \    }\n    max_divisor_value_index", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if\
    \ n % divisor == 0 {\n            if divisor > max_divisor {\n               \
    \ max_divisor = divisor;\n                max_divisor_index = divisor as isize;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_idx = -1;\n    for divisor in 1..=n {\n      \
    \  if n % divisor == 0 {\n            if divisor > max_divisor {\n           \
    \     max_divisor = divisor;\n                max_divisor_idx = divisor;\n   \
    \         }\n        }\n    }\n    max_divisor_idx", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n      \
    \  if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n  \
    \  let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    let mut max_divisor_value_found = false;\n\n    for i in 1..=n {\n\
    \        if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_index = i;\n                max_divisor_value\
    \ = i;\n                max_divisor_value_found = true;\n            }\n     \
    \   }\n    }\n\n    if max_divisor_value_found {\n        max_divisor_index\n\
    \    } else {\n        max_divisor\n    }", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_idx = 1;\n    let mut max_divisor_value = n;\n    for i\
    \ in 2..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n    \
    \            max_divisor = i;\n                max_divisor_idx = 1;\n        \
    \    }\n            else {\n                max_divisor = i;\n               \
    \ max_divisor_idx = 2;\n            }\n        }\n    }\n    max_divisor", " \
    \   let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut\
    \ max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes:\
    \ Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize>\
    \ = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n\
    \    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut\
    \ max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes:\
    \ Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize>\
    \ = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n\
    \    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut\
    \ max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes:\
    \ Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize>\
    \ = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n\
    \    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut\
    \ max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes:\
    \ Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize>\
    \ = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n\
    \    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut\
    \ max_divisor_indexes: Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes:\
    \ Vec<isize> = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize>\
    \ = vec![max_divisor];\n    let mut max_divisor_indexes: Vec<isize> = vec![max_divisor];\n\
    \    let mut max_divisor_indexes: Vec<isize> = vec![", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder\
    \ == 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            } else {\n                if max_divisor_remainder > max_divisor\
    \ {\n                    max_divisor = max_divisor_remainder;\n              \
    \      max_divisor_remainder = n % i;\n                }\n            }\n    \
    \    }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n   \
    \ let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in\
    \ 1..=n {\n        if n % divisor == 0 {\n            let divisor_remainder =\
    \ n % divisor;\n            if divisor_remainder > max_divisor_remainder {\n \
    \               max_divisor = divisor;\n                max_divisor_remainder\
    \ = divisor_remainder;\n            }\n        }\n    }\n    max_divisor", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n        let mut\
    \ divisor = i;\n        while divisor % 2 == 0 {\n            divisor /= 2;\n\
    \        }\n        if divisor > max_divisor {\n            max_divisor = divisor;\n\
    \            max_divisor_remainder = i;\n        }\n    }\n    max_divisor_remainder",
  "    let mut max_divisor = 0;\n    let mut max_divisor = n;\n    while max_divisor\
    \ % 2 == 0 {\n        max_divisor /= 2;\n    }\n    while max_divisor % 3 == 0\
    \ {\n        max_divisor /= 3;\n    }\n    while max_divisor % 5 == 0 {\n    \
    \    max_divisor /= 5;\n    }\n    while max_divisor % 7 == 0 {\n        max_divisor\
    \ /= 7;\n    }\n    while max_divisor % 11 == 0 {\n        max_divisor /= 11;\n\
    \    }\n    while max_divisor % 13 == 0 {\n        max_divisor /= 13;\n    }\n\
    \    while max_divisor % 17 == 0 {\n        max_divisor /= 17;\n    }\n    while\
    \ max_divisor % 19 == 0 {\n        max_divisor /= 19;\n    }\n    while max_divisor\
    \ % 23 == 0 {\n        max_divisor /= 23;\n    }\n    while max_divisor % 29 ==\
    \ 0 {\n        max_divisor /= 29;\n    }\n    while max_divisor % 31 == 0 {\n\
    \        max_divisor /= 31;\n    }\n    while max_divisor % 37 == 0 {\n      \
    \  max_divisor /= 37;\n    }\n    while max_divisor % 41 == 0 {\n        max_divisor\
    \ /= 41;\n    }\n    while max_divisor % 43 == 0 {\n        max_divisor /= 43;\n\
    \    }\n    while max_divisor % 47 == 0 {\n        max_divisor /= 47;\n    }\n\
    \    while max_divisor % 53 == 0 {\n        max_divisor /= 53;\n    }\n    while\
    \ max_divisor % 59 == 0 {\n        max_divisor /= 59;\n    }\n    while max_divisor\
    \ % 61 == 0 {\n        max_divisor /= 61;\n    }\n    while max_divisor % 67 ==\
    \ 0 {\n        max_divisor /= 67;\n    }\n    while max_divisor % 71 == 0 {\n\
    \        max_divisor /= 71;\n    }\n    while max_divisor % 73 == 0 {\n      \
    \  max_divisor /= 73;\n    }\n    while max_divisor % 79 == 0 {\n        max_divisor\
    \ /= 79;\n    }\n    while max_divisor % 83 == 0 {\n        max_divisor /= 83;\n\
    \    }\n    while max_divisor % 89 == 0 {\n        max_divisor /= 89;\n    }\n\
    \    while max_divisor % 97 == 0 {\n        max_divisor /= 97;\n    }\n    while\
    \ max_divisor % 101 == 0 {\n        max_divisor /= 101;\n    }\n    while max_divisor\
    \ % 103 == 0 {\n        max_divisor /= 103;\n    }\n    while max_divisor % 107\
    \ == 0 {\n        max_divisor /= 107;\n    }\n    while max_", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7] {\n\
    \        if n % divisor == 0 {\n            if max_divisor % divisor == 0 {\n\
    \                max_divisor = divisor;\n                max_divisor_index = 0;\n\
    \            } else {\n                max_divisor = max_divisor / divisor;\n\
    \                max_divisor_index += 1;\n            }\n        }\n    }\n  \
    \  max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n\n    for i in 1..=n {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_index = i;\n            }\n        }\n   \
    \ }\n\n    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size = 0;\n    let mut\
    \ max_divisor_size_divisor_size_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size =\
    \ 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_divisor_size_divisor_size_divisor\
    \ = 0;", "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n \
    \   for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n     \
    \       if max_divisor % divisor == 0 {\n                max_divisor = divisor;\n\
    \                max_divisor_index += 1;\n            }\n        }\n    }\n  \
    \  max_divisor_index", "    let mut largest = n;\n    let mut max_divisor = 1;\n\
    \    while max_divisor < n {\n        max_divisor *= 2;\n        if max_divisor\
    \ > n {\n            max_divisor = n;\n        }\n        if max_divisor % 2 ==\
    \ 0 {\n            largest = max_divisor;\n        }\n    }\n    largest", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    if max_divisor_remainder\
    \ == 0 {\n        max_divisor\n    } else {\n        max_divisor\n    }", "  \
    \  let mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \                max_divisor_ind_ind = i;\n            }\n            if max_divisor_ind\
    \ != i {\n                max_divisor_ind = i;\n                max_divisor_ind_ind\
    \ = i;\n            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor += max_divisor_size\
    \ % 2;\n        max_divisor_size /= 2;\n    }\n    max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \                max_divisor_ind_ind = i;\n            }\n            if max_divisor\
    \ == i {\n                max_divisor_ind_ind = i;\n            }\n        }\n\
    \    }\n    if max_divisor == 0 {\n        max_divisor_ind_ind = -1;\n    }\n\
    \    max_divisor_ind_ind", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let mut max_divisor_ind_ind\
    \ = -1;\n    let mut max_divisor_ind_ind = -1;\n    let ", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ < i {\n                max_divisor_size = i;\n                max_divisor_size_index\
    \ = i;\n                max_divisor_index = i;\n            }\n            if\
    \ max_divisor_size == i {\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor = n;\n    while max_divisor % 2 == 0 {\n        max_divisor\
    \ /= 2;\n    }\n    while max_divisor % 3 == 0 {\n        max_divisor /= 3;\n\
    \    }\n    while max_divisor % 5 == 0 {\n        max_divisor /= 5;\n    }\n \
    \   while max_divisor % 7 == 0 {\n        max_divisor /= 7;\n    }\n    while\
    \ max_divisor % 11 == 0 {\n        max_divisor /= 11;\n    }\n    while max_divisor\
    \ % 13 == 0 {\n        max_divisor /= 13;\n    }\n    while max_divisor % 17 ==\
    \ 0 {\n        max_divisor /= 17;\n    }\n    while max_divisor % 19 == 0 {\n\
    \        max_divisor /= 19;\n    }\n    while max_divisor % 23 == 0 {\n      \
    \  max_divisor /= 23;\n    }\n    while max_divisor % 29 == 0 {\n        max_divisor\
    \ /= 29;\n    }\n    while max_divisor % 31 == 0 {\n        max_divisor /= 31;\n\
    \    }\n    while max_divisor % 37 == 0 {\n        max_divisor /= 37;\n    }\n\
    \    while max_divisor % 41 == 0 {\n        max_divisor /= 41;\n    }\n    while\
    \ max_divisor % 43 == 0 {\n        max_divisor /= 43;\n    }\n    while max_divisor\
    \ % 47 == 0 {\n        max_divisor /= 47;\n    }\n    while max_divisor % 53 ==\
    \ 0 {\n        max_divisor /= 53;\n    }\n    while max_divisor % 59 == 0 {\n\
    \        max_divisor /= 59;\n    }\n    while max_divisor % 61 == 0 {\n      \
    \  max_divisor /= 61;\n    }\n    while max_divisor % 67 == 0 {\n        max_divisor\
    \ /= 67;\n    }\n    while max_divisor % 71 == 0 {\n        max_divisor /= 71;\n\
    \    }\n    while max_divisor % 73 == 0 {\n        max_divisor /= 73;\n    }\n\
    \    while max_divisor % 79 == 0 {\n        max_divisor /= 79;\n    }\n    while\
    \ max_divisor % 83 == 0 {\n        max_divisor /= 83;\n    }\n    while max_divisor\
    \ % 89 == 0 {\n        max_divisor /= 89;\n    }\n    while max_divisor % 97 ==\
    \ 0 {\n        max_divisor /= 97;\n    }\n    while max_divisor % 103 == 0 {\n\
    \        max_divisor /= 103;\n    }\n    while max_divisor % 109 == 0 {\n    \
    \    max_divisor /= 109;\n    }\n    while max_divisor % 113 == 0 {\n        max_divisor\
    \ /= 113;\n    }\n    while max_", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_remainder = 0;\n    for i in 1..=n {\n        let mut divisor =\
    \ i;\n        let mut divisor_remainder = 0;\n        while divisor % 2 == 0 {\n\
    \            divisor /= 2;\n            divisor_remainder++;\n        }\n    \
    \    if divisor_remainder > max_divisor_remainder {\n            max_divisor =\
    \ i;\n            max_divisor_remainder = divisor_remainder;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n\n    for i in 1..=n {\n\
    \        if n % i == 0 {\n            if max_divisor_remainder == 0 {\n      \
    \          max_divisor = i;\n                max_divisor_remainder = n;\n    \
    \            max_divisor_remainder_count = 1;\n            } else {\n        \
    \        if max_divisor_remainder > i {\n                    max_divisor = i;\n\
    \                    max_divisor_remainder = n;\n                    max_divisor_remainder_count\
    \ = 1;\n                } else {\n                    max_divisor_remainder =\
    \ max_divisor_remainder - i;\n                    max_divisor_remainder_count\
    \ += 1;\n                }\n            }\n        }\n    }\n\n    if max_divisor_remainder_count\
    \ == 0 {\n        max_divisor_remainder_count = 1;\n    }\n\n    max_divisor_remainder",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = 0;\n            }\n        } else {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d == max_divisor {\n            max_divisor_size\
    \ += 1;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n \
    \   let mut max_divisor_index = 0;\n    for divisor in 1..=n {\n        if n %\
    \ divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      } else {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n        let divisor\
    \ = max_divisor_size % 2 == 0 ? max_divisor_size / 2 : (max_divisor_size + 1);\n\
    \        if divisor > max_divisor {\n            max_divisor = divisor;\n    \
    \    }\n        max_divisor_size /= 2;\n    }\n    max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n\
    \        if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_index = i;\n            }\n        }\n   \
    \ }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d\
    \ > max_divisor {\n                max_divisor = d;\n                max_divisor_size\
    \ = 1;\n            } else {\n                max_divisor += d;\n            \
    \    max_divisor_size++;\n            }\n        }\n    }\n    max_divisor", " \
    \   let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=max_divisor {\n        if n % i == 0 {\n            max_divisor = i;\n \
    \           max_divisor_index = i;\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size = 0;\n    let mut\
    \ max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor_size_divisor_size_size = 0;\n   \
    \ let mut max_divisor_size_divisor", "    let mut max_divisor = 1;\n    let mut\
    \ max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 =\
    \ 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut\
    \ max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 =\
    \ 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = 0;\n            }\n            if divisor == max_divisor {\n             \
    \   max_divisor_index += 1;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        } else {\n            max_divisor_size += 1;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in 1..=max_divisor {\n        if n % divisor == 0 {\n\
    \            max_divisor = divisor;\n            max_divisor_index = divisor as\
    \ isize;\n        }\n    }\n    max_divisor_index", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut\
    \ max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 =\
    \ 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut\
    \ max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_size = 0;\n    let\
    \ mut max_divisor_size_divisor_divisor_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor =\
    \ 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..n {\n        if n % i == 0 {\n            if max_divisor_remainder ==\
    \ 0 {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            } else {\n                if max_divisor_remainder > max_divisor\
    \ {\n                    max_divisor = max_divisor_remainder;\n              \
    \      max_divisor_remainder = n % max_divisor;\n                }\n         \
    \   }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor = n;\n    for d in 2..=max_divisor {\n        if n % d ==\
    \ 0 {\n            max_divisor = d;\n        }\n    }\n    max_divisor", "   \
    \ let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_index2\
    \ = 0;\n    let mut max_divisor_index3 = 0;\n    let mut max_divisor_index4 =\
    \ 0;\n    let mut max_divisor_index5 = 0;\n    let mut max_divisor_index6 = 0;\n\
    \    let mut max_divisor_index7 = 0;\n    let mut max_divisor_index8 = 0;\n  \
    \  let mut max_divisor_index9 = 0;\n    let mut max_divisor_index10 = 0;\n   \
    \ let mut max_divisor_index11 = 0;\n    let mut max_divisor_index12 = 0;\n   \
    \ let mut max_divisor_index13 = 0;\n    let mut max_divisor_index14 = 0;\n   \
    \ let mut max_divisor_index15 = 0;\n    let mut max_divisor_index16 = 0;\n   \
    \ let mut max_divisor_index17 = 0;\n    let mut max_divisor_index18 = 0;\n   \
    \ let mut max_divisor_index19 = 0;\n    let mut max_divisor_index20 = 0;\n   \
    \ let mut max_divisor_index21 = 0;\n    let mut max_divisor_index22 = 0;\n   \
    \ let mut max_divisor_index23 = 0;\n    let mut max_divisor_index24 = 0;\n   \
    \ let mut max_divisor_index25 = 0;\n    let mut max_divisor_index26 = 0;\n   \
    \ let mut max_divisor_index27 = 0;\n    let mut max_divisor_index28 = 0;\n   \
    \ let mut max_divisor_index29 = 0;\n    let mut max_divisor_index30 = 0;\n   \
    \ let mut max_divisor_index31 = 0;\n    let mut max_divisor_index32 = 0;\n   \
    \ let mut max_divisor_index33 = 0;\n    let mut max_divisor_index34 = 0;\n   \
    \ let mut max_divisor_index35 = 0;\n    let mut max_divisor_index36 = 0;\n   \
    \ let mut max_divisor_index37 = 0;\n    let mut max_divisor_index38 = 0;\n   \
    \ let mut max_divisor_index39 = 0;\n    let mut max_divisor_index40 = 0;\n   \
    \ let mut max_divisor_index41 = 0;\n    let mut max_divisor_index42 = 0;\n   \
    \ let mut max_divisor_index43 = 0;\n    let mut max_divisor_index44 = 0;\n   \
    \ let mut max_divisor_index45 = 0;\n    let mut max_divisor_index46 = 0;\n   \
    \ let mut max_divisor_index47 = 0;\n    let mut max_divisor_index48 = 0;\n   \
    \ let mut max_divisor_index49 = 0;\n    let mut max_divisor_index50 = 0;\n   \
    \ let mut max_divisor_index51 = 0;\n    let mut max_divisor_index52 = 0;\n   \
    \ let mut max_divisor_index53 = 0;\n    let mut max_divisor_index54 = 0;\n   \
    \ let mut max_divisor_index55 = 0;\n    let mut max_divisor_index56 = 0;\n   \
    \ let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        let remainder = n % divisor;\n   \
    \     if remainder == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_remainder = remainder;\n\
    \            }\n        }\n    }\n    max_divisor_remainder", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    for divisor in 1..=n {\n        if n % divisor\
    \ == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_size = divisor;\n            } else\
    \ {\n                max_divisor = max_divisor;\n                max_divisor_size\
    \ = max_divisor_size;\n            }\n        }\n    }\n    max_divisor", "  \
    \  let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n\
    \    let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\
    \ {\n        if n % divisor == 0 {\n            if max_divisor % divisor == 0\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor as usize;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 1 {\n        max_divisor += 1;\n        max_divisor_size = max_divisor_size\
    \ / 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = 1;\n        }\n        if d\
    \ > max_divisor_size {\n            max_divisor_size = d;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n            if max_divisor_value\
    \ < i {\n                max_divisor_value = i;\n            }\n        }\n  \
    \  }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if max_divisor_remainder > 0 {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = 0;\n            } else {\n          \
    \      max_divisor = divisor;\n                max_divisor_remainder = n % divisor;\n\
    \            }\n        }\n    }\n    if max_divisor_remainder > 0 {\n       \
    \ max_divisor = max_divisor + 1;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n            max_divisor\
    \ = i;\n            max_divisor_index = i;\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_index = 0;\n    let mut max_divisor_value = 1;\n    for\
    \ i in 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n  \
    \              max_divisor = i;\n                max_divisor_index = i;\n    \
    \            max_divisor_value = i;\n            }\n            if max_divisor_value\
    \ < i {\n                max_divisor_value = i;\n            }\n        }\n  \
    \  }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if max_divisor_size\
    \ < d {\n                max_divisor = d;\n                max_divisor_size =\
    \ d;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_remainder = n % i;\n            }\n      \
    \  }\n    }\n    max_divisor_remainder", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n    let mut\
    \ max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divis", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor < i\
    \ {\n                max_divisor = i;\n                max_divisor_index = i;\n\
    \            }\n        }\n    }\n    max_divisor_value", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_idx = 1;\n    let mut max_divisor_value = n;\n\
    \n    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_idx\
    \ = 1;\n            } else {\n                max_divisor_idx = max_divisor_idx\
    \ + 1;\n            }\n        }\n    }\n\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n \
    \       let remainder = n % divisor;\n        if remainder == 0 {\n          \
    \  max_divisor = divisor;\n            max_divisor_remainder = remainder;\n  \
    \      }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_value", "    let mut max_divisor = 1;\n   \
    \ let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ < i {\n                max_divisor = i;\n                max_divisor_size =\
    \ i;\n                max_divisor_size_size = 1;\n            }\n            else\n\
    \            {\n                max_divisor_size = i;\n                max_divisor_size_size\
    \ = 1;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor {\n   \
    \             max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_index = 0;\n    for divisor in 1..=max_divisor\
    \ {\n        if n % divisor == 0 {\n            max_divisor = divisor;\n     \
    \       max_divisor_index = divisor;\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    let mut max_divisor_ind_n = -1;\n    let mut max_divisor_ind_n2 =\
    \ -1;\n    let mut max_divisor_ind_n3 = -1;\n    let mut max_divisor_ind_n4 =\
    \ -1;\n    let mut max_divisor_ind_n5 = -1;\n    let mut max_divisor_ind_n6 =\
    \ -1;\n    let mut max_divisor_ind_n7 = -1;\n    let mut max_divisor_ind_n8 =\
    \ -1;\n    let mut max_divisor_ind_n9 = -1;\n    let mut max_divisor_ind_n10 =\
    \ -1;\n    let mut max_divisor_ind_n11 = -1;\n    let mut max_divisor_ind_n12\
    \ = -1;\n    let mut max_divisor_ind_n13 = -1;\n    let mut max_divisor_ind_n14\
    \ = -1;\n    let mut max_divisor_ind_n15 = -1;\n    let mut max_divisor_ind_n16\
    \ = -1;\n    let mut max_divisor_ind_n17 = -1;\n    let mut max_divisor_ind_n18\
    \ = -1;\n    let mut max_divisor_ind_n19 = -1;\n    let mut max_divisor_ind_n20\
    \ = -1;\n    let mut max_divisor_ind_n21 = -1;\n    let mut max_divisor_ind_n22\
    \ = -1;\n    let mut max_divisor_ind_n23 = -1;\n    let mut max_divisor_ind_n24\
    \ = -1;\n    let mut max_divisor_ind_n25 = -1;\n    let mut max_divisor_ind_n26\
    \ = -1;\n    let mut max_divisor_ind_n27 = -1;\n    let mut max_divisor_ind_n28\
    \ = -1;\n    let mut max_divisor_ind_n29 = -1;\n    let mut max_divisor_ind_n30\
    \ = -1;\n    let mut max_divisor_ind_n31 = -1;\n    let mut max_divisor_ind_n32\
    \ = -1;\n    let mut max_divisor_ind_n33 = -1;\n    let mut max_divisor_ind_n34\
    \ = -1;\n    let mut max_divisor_ind_n35 = -1;\n    let mut max_divisor_ind_n36\
    \ = -1;\n    let mut max_divisor_ind_n37 = -1;\n    let mut max_divisor_ind_n38\
    \ = -1;\n    let mut max_divisor_ind_n39 = -1;\n    let mut max_divisor_ind_n40\
    \ = -1;\n    let mut max_divisor_ind_n41 = -1;\n    let mut max_divisor_ind_n42\
    \ = -1;\n    let mut max_divisor_in", "    let mut max_divisor = n;\n    let mut\
    \ max_divisor_index = 0;\n    let mut max_divisor_index2 = 0;\n    let mut max_divisor_index3\
    \ = 0;\n    let mut max_divisor_index4 = 0;\n    let mut max_divisor_index5 =\
    \ 0;\n    let mut max_divisor_index6 = 0;\n    let mut max_divisor_index7 = 0;\n\
    \    let mut max_divisor_index8 = 0;\n    let mut max_divisor_index9 = 0;\n  \
    \  let mut max_divisor_index10 = 0;\n    let mut max_divisor_index11 = 0;\n  \
    \  let mut max_divisor_index12 = 0;\n    let mut max_divisor_index13 = 0;\n  \
    \  let mut max_divisor_index14 = 0;\n    let mut max_divisor_index15 = 0;\n  \
    \  let mut max_divisor_index16 = 0;\n    let mut max_divisor_index17 = 0;\n  \
    \  let mut max_divisor_index18 = 0;\n    let mut max_divisor_index19 = 0;\n  \
    \  let mut max_divisor_index20 = 0;\n    let mut max_divisor_index21 = 0;\n  \
    \  let mut max_divisor_index22 = 0;\n    let mut max_divisor_index23 = 0;\n  \
    \  let mut max_divisor_index24 = 0;\n    let mut max_divisor_index25 = 0;\n  \
    \  let mut max_divisor_index26 = 0;\n    let mut max_divisor_index27 = 0;\n  \
    \  let mut max_divisor_index28 = 0;\n    let mut max_divisor_index29 = 0;\n  \
    \  let mut max_divisor_index30 = 0;\n    let mut max_divisor_index31 = 0;\n  \
    \  let mut max_divisor_index32 = 0;\n    let mut max_divisor_index33 = 0;\n  \
    \  let mut max_divisor_index34 = 0;\n    let mut max_divisor_index35 = 0;\n  \
    \  let mut max_divisor_index36 = 0;\n    let mut max_divisor_index37 = 0;\n  \
    \  let mut max_divisor_index38 = 0;\n    let mut max_divisor_index39 = 0;\n  \
    \  let mut max_divisor_index40 = 0;\n    let mut max_divisor_index41 = 0;\n  \
    \  let mut max_divisor_index42 = 0;\n    let mut max_divisor_index43 = 0;\n  \
    \  let mut max_divisor_index44 = 0;\n    let mut max_divisor_index45 = 0;\n  \
    \  let mut max_divisor_index46 = 0;\n    let mut max_divisor_index47 = 0;\n  \
    \  let mut max_divisor_index48 = 0;\n    let mut max_divisor_index49 = 0;\n  \
    \  let mut max_divisor_index50 = 0;\n    let mut max_divisor_index51 = 0;\n  \
    \  let mut max_divisor_index52 = 0;\n    let mut max_divisor_index53 = 0;\n  \
    \  let mut max_divisor_index54 = 0;\n    let mut max_divisor_index55 = 0;\n  \
    \  let mut max_divisor_index56 = 0;\n    let mut max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n \
    \       if n % divisor == 0 {\n            let remainder = n % divisor;\n    \
    \        if remainder > max_divisor_remainder {\n                max_divisor =\
    \ divisor;\n                max_divisor_remainder = remainder;\n            }\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut\
    \ max_divisor_size = n;\n    for divisor in 2..=max_divisor_size {\n        if\
    \ n % divisor == 0 {\n            max_divisor = divisor;\n            max_divisor_size\
    \ = n;\n        }\n    }\n    max_divisor", "    let mut max_divisor = n;\n  \
    \  let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 1;\n    let mut\
    \ max_divisor_ind_3 = 1;\n    let mut max_divisor_ind_4 = 1;\n\n    while max_divisor_ind\
    \ <= max_divisor {\n        max_divisor_ind_2 += 1;\n        max_divisor_ind_3\
    \ += 1;\n        max_divisor_ind_4 += 1;\n        max_divisor_ind *= 2;\n    }\n\
    \n    if max_divisor_ind > max_divisor {\n        max_divisor_ind_2 += 1;\n  \
    \      max_divisor_ind_3 += 1;\n        max_divisor_ind_4 += 1;\n    }\n\n   \
    \ if max_divisor_ind_2 > max_divisor {\n        max_divisor_ind_3 += 1;\n    \
    \    max_divisor_ind_4 += 1;\n    }\n\n    if max_divisor_ind_3 > max_divisor\
    \ {\n        max_divisor_ind_4 += 1;\n    }\n\n    if max_divisor_ind_4 > max_divisor\
    \ {\n        max_divisor_ind += 1;\n    }\n\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n      \
    \  if n % d == 0 {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisor_size = 1;\n            } else {\n        \
    \        max_divisor += d;\n                max_divisor_size++;\n            }\n\
    \        }\n    }\n    max_divisor", "    let mut largest = n;\n    let mut divisor\
    \ = 1;\n    while divisor < n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor;\n        }\n        divisor += 1;\n    }\n    largest", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 0..n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n   \
    \ let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut largest = n;\n    let mut divisor = 1;\n    while divisor < n {\n \
    \       if n % divisor == 0 {\n            largest = divisor;\n        }\n   \
    \     divisor += 1;\n    }\n    largest", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n    \
    \    if n % divisor == 0 {\n            if max_divisor % divisor == 0 {\n    \
    \            max_divisor = divisor;\n                max_divisor_index = divisor\
    \ as usize;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 1 {\n        max_divisor += 1;\n        max_divisor_size = max_divisor_size\
    \ / 2;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for divisor in\
    \ &[isize::MIN..=isize::MAX] {\n        if n % divisor == 0 {\n            if\
    \ divisor > max_divisor {\n                max_divisor = divisor;\n          \
    \      max_divisor_size = 1;\n            } else {\n                max_divisor_size\
    \ += 1;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size = max_divisor_size\
    \ / 2;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size ==\
    \ 0 {\n            max_divisor = max_divisor_size;\n        }\n        max_divisor_size\
    \ = max_divisor_size / 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_index = i;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ > divisor {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = max_divisor_remainder - divisor;\n            }\n        } else {\n      \
    \      max_divisor_remainder += divisor;\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = n;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = max_divisor_value / divisor;\n            }\n        }\n    }\n    max_divisor_value",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = n % divisor;\n            }\n       \
    \ }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_ind\
    \ = -1;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_ind = i;\n\
    \            }\n        }\n    }\n    max_divisor_ind", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for d in divisors(n) {\n \
    \       if n % d == 0 {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisor_remainder = n % d;\n            }\n      \
    \  }\n    }\n    if max_divisor_remainder == 0 {\n        max_divisor\n    } else\
    \ {\n        max_divisor + 1\n    }", "    let mut max_divisor = 1;\n    let mut\
    \ max_divisor_size = n;\n    while max_divisor_size % 2 == 0 {\n        max_divisor\
    \ += 1;\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = 0;\n    let\
    \ mut max_divisor_value_index = 0;\n    let mut max_divisor_value_value = 0;\n\
    \    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let mut max_divisor_value_value_value\
    \ = 0;\n    let mut max_divisor_value_value_index = 0;\n    let ", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_ind\
    \ = divisors.iter().position(|&x| x == max_divisor).unwrap();\n        }\n   \
    \ }\n    max_divisor_ind", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor_size\
    \ < i {\n                max_divisor = i;\n                max_divisor_size =\
    \ i;\n                max_divisor_size_size = 1;\n            } else {\n     \
    \           max_divisor_size = i;\n                max_divisor_size_size = 1;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_ind = i;\n            }\n        }\n    }\n    max_divisor_ind",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in &[isize::MIN..=isize::MAX] {\n        let divisor_remainder = n % divisor;\n\
    \        if divisor_remainder == 0 {\n            max_divisor = divisor;\n   \
    \         max_divisor_remainder = divisor_remainder;\n        }\n    }\n    if\
    \ max_divisor_remainder == 0 {\n        max_divisor\n    } else {\n        max_divisor\n\
    \    }", "    let mut max_divisor = 0;\n    let mut max_divisor_value = 0;\n \
    \   let mut max_divisor_value_index = 0;\n    let mut max_divisor_value_index2\
    \ = 0;\n    let mut max_divisor_value_index3 = 0;\n    let mut max_divisor_value_index4\
    \ = 0;\n    let mut max_divisor_value_index5 = 0;\n    let mut max_divisor_value_index6\
    \ = 0;\n    let mut max_divisor_value_index7 = 0;\n    let mut max_divisor_value_index8\
    \ = 0;\n    let mut max_divisor_value_index9 = 0;\n    let mut max_divisor_value_index10\
    \ = 0;\n    let mut max_divisor_value_index11 = 0;\n    let mut max_divisor_value_index12\
    \ = 0;\n    let mut max_divisor_value_index13 = 0;\n    let mut max_divisor_value_index14\
    \ = 0;\n    let mut max_divisor_value_index15 = 0;\n    let mut max_divisor_value_index16\
    \ = 0;\n    let mut max_divisor_value_index17 = 0;\n    let mut max_divisor_value_index18\
    \ = 0;\n    let mut max_divisor_value_index19 = 0;\n    let mut max_divisor_value_index20\
    \ = 0;\n    let mut max_divisor_value_index21 = 0;\n    let mut max_divisor_value_index22\
    \ = 0;\n    let mut max_divisor_value_index23 = 0;\n    let mut max_divisor_value_index24\
    \ = 0;\n    let mut max_divisor_value_index25 = 0;\n    let mut max_divisor_value_index26\
    \ = 0;\n    let mut max_divisor_value_index27 = 0;\n    let mut max_divisor_value_index28\
    \ = 0;\n    let mut max_divisor_value_index29 = 0;\n    let mut max_divisor_value_index30\
    \ = 0;\n    let mut max_divisor_value_index31 = 0;\n    let mut max_divisor_value_index32\
    \ = 0;\n    let mut max_divisor_value_index33 = 0;\n    let mut max_divisor_value_index34\
    \ = 0;\n    let mut max_divisor_value_index35 = 0;\n    let mut max_divisor_value_index36\
    \ = 0;\n    let mut max_divisor_value_index37 = 0;\n    let mut max_divisor_value_index38\
    \ = 0;\n    let mut max_divisor_value_index39 = 0;\n    let mut max_divisor_value_index40\
    \ = 0;\n    let mut max_divisor_value_index41 = 0;\n    let mut max_divisor_value_index42\
    \ = 0;\n    let mut max_divisor_value_index43 = 0;\n    let mut max_divisor_value_index44\
    \ = 0;\n    let mut max_divisor_value_index45 = 0;\n    let mut max_divisor_value_index46\
    \ = 0;\n    let mut max_divisor_value_index47 = 0;\n    let mut max_divisor_value_index48\
    \ = 0;\n    let mut max_divisor_value_index49 = 0;\n    let mut max_divisor_value_index50\
    \ = 0;\n    let mu", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count2\
    \ = 0;\n    let mut max_divisor_remainder_count3 = 0;\n    let mut max_divisor_remainder_count4\
    \ = 0;\n    let mut max_divisor_remainder_count5 = 0;\n    let mut max_divisor_remainder_count6\
    \ = 0;\n    let mut max_divisor_remainder_count7 = 0;\n    let mut max_divisor_remainder_count8\
    \ = 0;\n    let mut max_divisor_remainder_count9 = 0;\n    let mut max_divisor_remainder_count10\
    \ = 0;\n    let mut max_divisor_remainder_count11 = 0;\n    let mut max_divisor_remainder_count12\
    \ = 0;\n    let mut max_divisor_remainder_count13 = 0;\n    let mut max_divisor_remainder_count14\
    \ = 0;\n    let mut max_divisor_remainder_count15 = 0;\n    let mut max_divisor_remainder_count16\
    \ = 0;\n    let mut max_divisor_remainder_count17 = 0;\n    let mut max_divisor_remainder_count18\
    \ = 0;\n    let mut max_divisor_remainder_count19 = 0;\n    let mut max_divisor_remainder_count20\
    \ = 0;\n    let mut max_divisor_remainder_count21 = 0;\n    let mut max_divisor_remainder_count22\
    \ = 0;\n    let mut max_divisor_remainder_count23 = 0;\n    let mut max_divisor_remainder_count24\
    \ = 0;\n    let mut max_divisor_remainder_count25 = 0;\n    let mut max_divisor_remainder_count26\
    \ = 0;\n    let mut max_divisor_remainder_count27 = 0;\n    let mut max_divisor_remainder_count28\
    \ = 0;\n    let mut max_divisor_remainder_count29 = 0;\n    let mut max_divisor_remainder_count30\
    \ = 0;\n    let mut max_divisor_remainder_count31 = 0;\n    let mut max_divisor_remainder_count32\
    \ = 0;\n    let mut max_divisor_remainder_count33 = 0;\n    let mut max_divisor_remainder_count34\
    \ = 0;\n    let mut max_divisor_remainder_count35 = 0;\n    let mut max_divisor_remainder_count36\
    \ = 0;\n    let mut max_divisor_remainder_count37 = 0;\n    let mut max_divisor_remainder_count38\
    \ = 0;\n    let mut max_divisor_remainder_count39 = 0;\n    let mut max_divisor_remainder_count40\
    \ = 0;\n    let mut max_divisor_remainder_count41 = 0;\n    let mut max_divisor_remainder_count",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        } else {\n            max_divisor_size += 1;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_index = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_size = n;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor_size < i {\n                max_divisor_size\
    \ = i;\n                max_divisor_size_index = i;\n                max_divisor_index\
    \ = i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ largest = n;\n    let mut max_divisor = 1;\n    while max_divisor < n {\n  \
    \      max_divisor *= 2;\n        if max_divisor > n {\n            max_divisor\
    \ = n;\n        }\n        if max_divisor % 2 == 0 {\n            largest = max_divisor;\n\
    \        }\n    }\n    largest", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        let remainder = i % i;\n        if remainder\
    \ > max_divisor_remainder {\n            max_divisor = i;\n            max_divisor_remainder\
    \ = remainder;\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    let mut max_divisor_value_found = false;\n    for i in 1..=n {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_index = i;\n                max_divisor_value\
    \ = i;\n                max_divisor_value_found = true;\n            }\n     \
    \   }\n    }\n    if max_divisor_value_found {\n        max_divisor_index\n  \
    \  } else {\n        max_divisor\n    }", "    let mut largest = n;\n    let mut\
    \ i = 1;\n    while i <= n {\n        if n % i == 0 {\n            largest = i;\n\
    \        }\n        i += 1;\n    }\n    largest", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n         \
    \   if max_divisor < divisor {\n                max_divisor = divisor;\n     \
    \           max_divisor_index = divisor as isize;\n                max_divisor_value\
    \ = n / divisor;\n            }\n        }\n    }\n    max_divisor_index", " \
    \   let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = n;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = n;\n        }\n        if d\
    \ > max_divisor_value {\n            max_divisor_value = d;\n        }\n    }\n\
    \    max_divisor_value", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            }\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size % 2 == 0\
    \ {\n        max_divisor += 1;\n        max_divisor_size = max_divisor_size /\
    \ 2;\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 0;\n    let\
    \ mut max_divisor5 = 0;\n    let mut max_divisor6 = 0;\n    let mut max_divisor7\
    \ = 0;\n    let mut max_divisor8 = 0;\n    let mut max_divisor9 = 0;\n    let\
    \ mut max_divisor10 = 0;\n    let mut max_divisor11 = 0;\n    let mut max_divisor12\
    \ = 0;\n    let mut max_divisor13 = 0;\n    let mut max_divisor14 = 0;\n    let\
    \ mut max_divisor15 = 0;\n    let mut max_divisor16 = 0;\n    let mut max_divisor17\
    \ = 0;\n    let mut max_divisor18 = 0;\n    let mut max_divisor19 = 0;\n    let\
    \ mut max_divisor20 = 0;\n    let mut max_divisor21 = 0;\n    let mut max_divisor22\
    \ = 0;\n    let mut max_divisor23 = 0;\n    let mut max_divisor24 = 0;\n    let\
    \ mut max_divisor25 = 0;\n    let mut max_divisor26 = 0;\n    let mut max_divisor27\
    \ = 0;\n    let mut max_divisor28 = 0;\n    let mut max_divisor29 = 0;\n    let\
    \ mut max_divisor30 = 0;\n    let mut max_divisor31 = 0;\n    let mut max_divisor32\
    \ = 0;\n    let mut max_divisor33 = 0;\n    let mut max_divisor34 = 0;\n    let\
    \ mut max_divisor35 = 0;\n    let mut max_divisor36 = 0;\n    let mut max_divisor37\
    \ = 0;\n    let mut max_divisor38 = 0;\n    let mut max_divisor39 = 0;\n    let\
    \ mut max_divisor40 = 0;\n    let mut max_divisor41 = 0;\n    let mut max_divisor42\
    \ = 0;\n    let mut max_divisor43 = 0;\n    let mut max_divisor44 = 0;\n    let\
    \ mut max_divisor45 = 0;\n    let mut max_divisor46 = 0;\n    let mut max_divisor47\
    \ = 0;\n    let mut max_divisor48 = 0;\n    let mut max_divisor49 = 0;\n    let\
    \ mut max_divisor50 = 0;\n    let mut max_divisor51 = 0;\n    let mut max_divisor52\
    \ = 0;\n    let mut max_divisor53 = 0;\n    let mut max_divisor54 = 0;\n    let\
    \ mut max_divisor55 = 0;\n    let mut max_divisor56 = 0;\n    let mut max_divisor57\
    \ = 0;\n    let mut max_divisor58 = 0;\n    let mut max_divisor59 = 0;\n    let\
    \ mut max_divisor60 = 0;\n    let mut max_divisor61 = 0;\n    let mut max_divisor62\
    \ = 0;\n    let mut max_divisor63 = 0;\n    let mut max_divisor64 = 0;\n    let\
    \ mut max_", "    let mut largest = n;\n    let mut divisor = 1;\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor;\n     \
    \   }\n        divisor += 1;\n    }\n    largest", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n) {\n        if\
    \ d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        } else {\n            max_divisor_size += 1;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_size = 0;\n    let\
    \ mut max_divisor_size_divisor_divisor_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor =\
    \ 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<isize> = Vec::new();\n    while max_divisor % 2 == 0 {\n        max_divisor\
    \ /= 2;\n        max_divisor_indexes.push(max_divisor);\n    }\n    for i in max_divisor_indexes.iter()\
    \ {\n        if max_divisor % i == 0 {\n            max_divisor = i;\n       \
    \     max_divisor_index = i;\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_remainder = 0;\n    while max_divisor_remainder\
    \ != 0 {\n        max_divisor_remainder = max_divisor % max_divisor_remainder;\n\
    \        max_divisor /= max_divisor_remainder;\n    }\n    max_divisor", "   \
    \ let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_n = 0;\n    let mut max_divisor_remainder_n_n = 0;\n \
    \   let mut max_divisor_remainder_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_remainder_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n \
    \   let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n =\
    \ 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n =\
    \ 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n =\
    \ 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_remainder_n_n_n_", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value = 0;\n\
    \    let mut max_divisor_value_found = false;\n\n    for i in 1..=n {\n      \
    \  if n % i == 0 {\n            let divisor = i as isize;\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = i;\n                max_divisor_value = divisor;\n                max_divisor_value_found\
    \ = true;\n            }\n        }\n    }\n\n    if max_divisor_value_found {\n\
    \        max_divisor\n    } else {\n        max_divisor\n    }", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..=n {\n\
    \        if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i;\n                max_divisor_ind = i;\n            }\n        }\n    }\n\
    \    max_divisor_ind", "    let mut max_divisor = 1;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = n % divisor;\n            }\n       \
    \ }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ let mut divisor = i;\n        while divisor % 2 == 0 {\n            divisor\
    \ /= 2;\n        }\n        if divisor > max_divisor {\n            max_divisor\
    \ = divisor;\n            max_divisor_remainder = i;\n        }\n    }\n    max_divisor_remainder",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_value"]
stop_tokens:
- "\n}"
