name: HumanEval_44_change_base
language: rust
prompt: "/// Change numerical base of input number x to base.\n/// return string representation\
  \ after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8,\
  \ 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n/// >>> change_base(7, 2)\n\
  /// '111'\nfn change_base(x: isize, base: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
  \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
  ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
  \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
  1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
  \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
  ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
  \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
  ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
completions: ["    let mut s = String::new();\n    let mut digits = vec![0i32; base];\n\
    \    let mut carry = 0;\n    for digit in x.to_digits().iter() {\n        if digit\
    \ > base {\n            digits.insert(0, 0);\n            carry = 1;\n       \
    \ } else {\n            digits.insert(0, digit);\n            carry = 0;\n   \
    \     }\n    }\n    while carry != 0 {\n        digits.insert(0, 0);\n       \
    \ carry = digits.iter().filter(|&x| x != 0).count();\n    }\n    for digit in\
    \ digits.iter() {\n        s += char::from_u32(digit as u32).unwrap();\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x / base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    s += digits.into_owned();\n   \
    \ s", "    let mut s = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        x /= base;\n        s.push((remainder\
    \ + '0') as char);\n    }\n    s.push((x as char + '0') as char);\n    s", " \
    \   let mut s = String::new();\n    let mut x = x as i32;\n    let mut base =\
    \ base as i32;\n    while x >= base {\n        s +=\n            format!(\"{:0{}b}\"\
    , x % base, base).to_string()\n                .replace_all(\" \", \"0\");\n \
    \       x /= base;\n    }\n    s += format!(\"{:0{}b}\", x, base).to_string()\n\
    \        .replace_all(\" \", \"0\");\n    s", "    let mut result = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        let mut digit = digits[i];\n        if base\
    \ == 10 {\n            digit = digit.to_string().chars().collect::<Vec<_>>()[0];\n\
    \        }\n        if digit < '0' || digit > '9' {\n            break;\n    \
    \    }\n        let mut new_digit = digit.to_string().chars().collect::<Vec<_>>()[0];\n\
    \        let mut j = i;\n        while j > 0 && digits[j - 1] < '0' {\n      \
    \      new_digit += '0';\n            j -= 1;\n        }\n        new_digit +=\
    \ &base[i - j];\n        result.push(new_digit);\n        i += 1;\n    }\n   \
    \ result", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let mut digit = quotient\
    \ % base;\n        remainder = quotient / base;\n        if digit < 10 {\n   \
    \         s.push_str(&format!(\"{}\", digit));\n        } else {\n           \
    \ s.push_str(&format!(\"{}\", digit - 10));\n        }\n        quotient = remainder;\n\
    \    }\n    s + &format!(\"{}\", remainder)", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder *= base;\n        remainder %= base;\n        quotient\
    \ /= base;\n        s.push((remainder % base) as char);\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n        let mut\
    \ digit = digits[i];\n        if digit == '0' {\n            digit = &mut base[base[digit].len()..digit.len()];\n\
    \            digits.remove(&i);\n            i += 1;\n        }\n        let mut\
    \ digit = digit.to_digit(base);\n        if digit == 0 {\n            digit =\
    \ &mut carry;\n            digits.remove(&i);\n            i += 1;\n        }\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();\n        digit = digit.into();\n        digit =\
    \ digit.into();\n        digit = digit.into();\n        digit = digit.into();\n\
    \        digit = digit.into();", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    let mut base = base;\n    while remainder > 0 {\n      \
    \  let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n    }\n    if base > 10 {\n       \
    \ s = format!(\"{}\", s);\n    }\n    s", "    let mut s = String::new();\n  \
    \  let mut digits = x.to_string();\n    let mut base = base.to_string();\n   \
    \ let mut digits_len = digits.length();\n    let mut base_len = base.len();\n\
    \    while digits_len > base_len {\n        digits = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \        base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ -= 1;\n        base_len -= 1;\n    }\n    while base_len > digits_len {\n  \
    \      base = base.chars().nth(base_len).unwrap().to_string();\n        base_len\
    \ -= 1;\n    }\n    while digits_len > 0 {\n        if digits_len < base_len {\n\
    \            s.push_str(&base[digits_len..]);\n            digits_len -= 1;\n\
    \        } else {\n            s.push_str(&digits[digits_len..]);\n          \
    \  digits_len -= 1;\n            base = base.chars().nth(base_len).unwrap().to_string();\n\
    \            base_len -= 1;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ match c {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n       \
    \ '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n       \
    \ '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        _ => panic!(\"Invalid\
    \ base!\"),\n    }).collect::<Vec<_>>();\n    basedigits[base] = 1;\n    while\
    \ basedigits.len() > 0 {\n        let mut i = 0;\n        for &d in basedigits\
    \ {\n            i += d;\n        }\n        s = format!(\"{}{}\", s, i);\n  \
    \      basedigits = basedigits.iter().filter(|&d| d != 0).collect::<Vec<_>>();\n\
    \    }\n    s", "    let mut result = String::new();\n    let mut remainder =\
    \ 0;\n    while x >= base {\n        remainder = x % base;\n        result +=\
    \ '0' + remainder;\n        x /= base;\n    }\n    result += '0' + x;\n    result",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push_str(&format!(\"\
    {}\", remainder));\n        x = x / base;\n    }\n    digits.push_str(&format!(\"\
    {}\", x));\n    s += &digits;\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base =\
    \ base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n    let\
    \ mut i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i];\n\
    \        if digit == '0' {\n            digit = base.len() - i;\n        }\n \
    \       let mut new_digit = digit;\n        if carry > 0 {\n            new_digit\
    \ += 1;\n        }\n        carry = new_digit as isize;\n        s[i] = new_digit\
    \ as char;\n        i += 1;\n    }\n    if carry > 0 {\n        s.push('1');\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] > base\
    \ {\n            s.push_str(&digits[i .. (i + 1)]);\n            i += 1;\n   \
    \     } else {\n            s.push_str(&base[digits[i] - base]);\n           \
    \ i += 1;\n        }\n    }\n    s.push_str(&digits[digits.len() - i ..]);\n \
    \   s", "    let mut s = String::new();\n    let mut remainder = 0;\n    let mut\
    \ digits = vec![0isize; base];\n    let mut digit = 0;\n    while x >= base {\n\
    \        remainder = x % base;\n        digits[digit] = remainder;\n        x\
    \ /= base;\n        digit += 1;\n    }\n    digits[digit] = x;\n    for digit\
    \ in digits.iter_mut() {\n        *digit = *digit + 1;\n    }\n    for digit in\
    \ digits.iter() {\n        *digit = *digit + 1;\n    }\n    for digit in digits.iter_mut()\
    \ {\n        *digit = *digit + 1;\n    }\n    for digit in digits.iter() {\n \
    \       *digit = *digit + 1;\n    }\n    for digit in digits.iter_mut() {\n  \
    \      *digit = *digit + 1;\n    }\n    for digit in digits.iter() {\n       \
    \ *digit = *digit + 1;\n    }\n    for digit in digits.iter_mut() {\n        *digit\
    \ = *digit + 1;\n    }\n    for digit in digits.iter() {\n        *digit = *digit\
    \ + 1;\n    }\n    for digit in digits.iter_mut() {\n        *digit = *digit +\
    \ 1;\n    }\n    for digit in digits.iter() {\n        *digit = *digit + 1;\n\
    \    }\n    for digit in digits.iter_mut() {\n        *digit = *digit + 1;\n \
    \   }\n    for digit in digits.iter() {\n        *digit = *digit + 1;\n    }\n\
    \    for digit in digits.iter_mut() {\n        *digit = *digit + 1;\n    }\n \
    \   for digit in digits.iter() {\n        *digit = *digit + 1;\n    }\n    for\
    \ digit in digits.iter_mut() {\n        *digit = *digit + 1;\n    }\n    for digit\
    \ in digits.iter() {\n        *digit = *digit + 1;\n    }\n    for digit in digits.iter_mut()\
    \ {\n        *digit = *digit + 1;\n    }\n    for digit in digits.iter() {\n \
    \       *digit = *digit + 1;\n    }\n    for digit in digits.iter_mut() {\n  \
    \      *digit = *digit + 1;\n    }\n    for digit in digits.iter() {\n       \
    \ *digit = *digit + 1;\n    }\n    for digit in digits.iter_mut() {\n        *digit\
    \ = *digit + 1;\n    }\n    for digit in digits.iter() {\n        *digit = *digit\
    \ + 1;\n    }\n    for digit in digits.iter_mut() {\n        *digit = *digit +\
    \ 1;\n    }\n    for digit in digits.iter() {\n        *digit = *digit + 1;\n\
    \    }\n    for digit ", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut base = base;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    while digits.len() > 0 {\n        let mut digit =\
    \ digits.remove(0).unwrap();\n        let mut new_digit = base.iter().position(|&b|\
    \ digit == b).unwrap();\n        if new_digit == base.len() {\n            new_digit\
    \ = 0;\n            carry = 0;\n        }\n        digit += carry;\n        carry\
    \ = digit / base.len();\n        digit %= base.len();\n        base.insert(new_digit,\
    \ digit);\n    }\n    if carry > 0 {\n        base.insert(0, carry);\n    }\n\
    \    base.into_iter().map(|&b| b.to_string()).collect()", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder += x / base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x % base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    s += &digits[..digits.len() - 1];\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut carry = 0;\n    while x >=\
    \ base {\n        digits[base] = x % base;\n        x /= base;\n        carry\
    \ = (digits[base] + carry) as u8;\n    }\n    if carry > 0 {\n        digits[base]\
    \ = carry;\n    }\n    for &d in &digits[..] {\n        s += char::from_u32(d\
    \ as u32).unwrap();\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1).unwrap();\n\
    \        let digit = match digit {\n            '0' => 0,\n            '1' =>\
    \ 1,\n            '2' => 2,\n            '3' => 3,\n            '4' => 4,\n  \
    \          '5' => 5,\n            '6' => 6,\n            '7' => 7,\n         \
    \   '8' => 8,\n            '9' => 9,\n            _ => panic!(\"Invalid base\"\
    ),\n        };\n        let digit = digit * base;\n        s = format!(\"{}{}\"\
    , s, digit);\n        digits = digits.chars().nth(digits.len() - 1).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.size()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[..i]);\n        \
    \    break;\n        }\n        let mut digit = digits[..i].parse::<usize>().unwrap();\n\
    \        if digit < base {\n            s.push_str(&digits[..i]);\n          \
    \  break;\n        }\n        digit /= base;\n        i += digit;\n    }\n   \
    \ s", "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits[base] = remainder;\n        x /= base;\n    }\n    digits[base]\
    \ = x;\n    for digit in digits {\n        s += char::from_u32(digit).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] >= base[0] {\n  \
    \          s.push_str(&base[digits[i] - base[0]]);\n            i += 1;\n    \
    \    } else {\n            s.push_str(&digits[i]);\n            i += 1;\n    \
    \    }\n    }\n    s", "    let mut s = String::new();\n    let mut digits = vec![0u8;\
    \ base];\n    let mut carry = 0;\n    while x >= base {\n        digits[base -\
    \ 1] += x;\n        carry = digits[base - 1];\n        digits[base - 1] -= x;\n\
    \        x /= base;\n    }\n    if carry > 0 {\n        digits[base - 1] += carry;\n\
    \    }\n    for &d in &digits[..] {\n        s += char::from_u32(d as u32).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits = base - digits;\n    }\n    while digits > 0 {\n        s.push((digits\
    \ % base) as char);\n        digits /= base;\n    }\n    s + &x[..]", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut base\
    \ = base.to_string();\n    while digits.len() > 0 {\n        let mut digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if base == 10 {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '0' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '1' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '2' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '3' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '4' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '5' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '6' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '7' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '8' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == '9' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'A' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'B' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'C' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'D' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'E' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'F' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'G' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'H' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n        }\n        if digit == 'I' {\n            digit = digit.", " \
    \   let mut s = String::new();\n    let mut digits = vec![0u8; base];\n    let\
    \ mut carry = 0;\n    while x >= base {\n        digits[base - 1] += 1;\n    \
    \    x -= base;\n    }\n    while x >= 10 {\n        digits[base - 1] += 1;\n\
    \        x -= 10;\n    }\n    while x > 0 {\n        digits[base - 1] += 1;\n\
    \        x -= 1;\n    }\n    for &d in digits {\n        if carry > 0 {\n    \
    \        s += &format!(\"{}{}\", d, carry);\n        } else {\n            s +=\
    \ &format!(\"{}\", d);\n        }\n        carry = 0;\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits {\n        s.push(digit);\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let\
    \ mut carry = 0;\n    while basedigits.len() > 0 {\n        let mut nextdigit\
    \ = basedigits.pop().unwrap();\n        if carry > 0 {\n            nextdigit\
    \ += 1;\n        }\n        carry = nextdigit as isize;\n        if nextdigit\
    \ > 9 {\n            nextdigit -= 10;\n        }\n        s += digits[digits.len()\
    \ - 1] + &nextdigit.to_string();\n    }\n    if carry > 0 {\n        s += &carry;\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut quotient = x;\n    while quotient > 0 {\n        remainder /= base;\n\
    \        quotient /= base;\n        s.push((remainder % base) as char);\n    }\n\
    \    s.push((quotient % base) as char);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i..]);\n            break;\n        }\n        let\
    \ mut digit = digits[i..].chars().nth(base).unwrap();\n        if digit == '0'\
    \ {\n            s.push_str(&digits[0..i]);\n            i += 1;\n        } else\
    \ {\n            s.push_str(&digit);\n        }\n        i += 1;\n        base\
    \ /= 10;\n    }\n    s", "    let mut s = String::new();\n    let mut base = base;\n\
    \    while x >= base {\n        s += &format!(\"{:0{}b}\", x % base, base);\n\
    \        x /= base;\n    }\n    s += &format!(\"{:0{}b}\", x, base);\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ power = 1;\n    while digits.len() > 0 {\n        if digits.len() > base {\n\
    \            digits = &digits[..(digits.len() - base)];\n        } else {\n  \
    \          digits = &digits[..digits.len() - 1];\n        }\n        power = power\
    \ + 1;\n    }\n    s += &format!(\"{}\", power);\n    s += &digits;\n    s", " \
    \   let mut result = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        result = format!(\"{}{}\", result,\
    \ remainder);\n    }\n    result", "    let mut res = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        res.push_str(&digits[..]);\n        remainder -= base;\n \
    \   }\n    res.push_str(&digits[..]);\n    res.push_str(&format!(\"{}\", remainder).to_string());\n\
    \    res", "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n\
    \    let mut carry = 0;\n    while x >= base {\n        digits[base - 1] += 1;\n\
    \        x -= base;\n    }\n    while x != 0 {\n        digits[base - 1] += 1;\n\
    \        x /= base;\n    }\n    for &d in digits {\n        if carry != 0 {\n\
    \            s += '1';\n            carry = 0;\n        } else {\n           \
    \ s += '0';\n        }\n        if d > 0 {\n            s += '0';\n        }\n\
    \        s += '0';\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = vec![0u8; base];\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits[digit] += 1;\n    }\n    for digit in digits {\n        s += char::from_u32(digit\
    \ as u32).unwrap();\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    let mut base_size\
    \ = base.len();\n    while base_size.abs() > 1 {\n        base_size = base_size.saturating_sub(1);\n\
    \    }\n    let mut base_size = base_size.saturating_sub(1);\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.abs()\
    \ > 1 {\n        base_size = base_size.saturating_sub(1);\n    }\n    while base_size.",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    while digits.len() > 0 {\n        let mut digit\
    \ = digits.chars().nth(digits.len() - 1);\n        if digit == '0' {\n       \
    \     digit = base.chars().nth(base.len() - 1);\n        }\n        s.push(*digit);\n\
    \        digits = digits.chars().nth(digits.len() - 1);\n        base = base.chars().nth(base.len()\
    \ - 1);\n    }\n    String::from(s)", "    let mut res = String::new();\n    let\
    \ mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut power =\
    \ 1;\n    let mut digit = digits.iter().nth(base).unwrap();\n    while digit !=\
    \ 0 {\n        res.push_str(&digit % base);\n        digit /= base;\n        power\
    \ += 1;\n    }\n    res.push_str(&power.to_string());\n    res", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut base =\
    \ base.to_string();\n    while base.len() > 0 {\n        if base % 10 == 0 {\n\
    \            s.push_str(&digits);\n            digits.clear();\n        }\n  \
    \      base = base.to_string();\n    }\n    if digits.len() > 0 {\n        s.push_str(&digits);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = String::new();\n    while remainder > 0 {\n        let mut\
    \ digit = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits.iter().rev() {\n        s.push(digit);\n    }\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    digits.reverse();\n    for digit in digits {\n        s += digit;\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut i = 0;\n    while i < digits.size() {\n        let mut\
    \ digit = digits[i];\n        let mut base = base[i];\n        if digit == '0'\
    \ {\n            digit = &mut carry;\n            base = &mut base;\n        \
    \    carry = 0;\n        }\n        let mut new_digit = digit + base;\n      \
    \  if new_digit > '9' {\n            new_digit -= 10;\n            carry = 1;\n\
    \        }\n        i += 1;\n        s += new_digit.to_string();\n    }\n    if\
    \ carry != 0 {\n        s += &mut carry.to_string();\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let\
    \ mut carry = 0;\n    while basedigits.len() > 0 {\n        let mut digit = basedigits.pop().unwrap();\n\
    \        if carry > 0 {\n            digit += 1;\n        }\n        digit = digit.to_string().chars().collect::<Vec<_>>().iter().fold(0,\
    \ |acc, x| {\n            acc + (x.to_digit(10).unwrap() as isize) * x;\n    \
    \        acc\n        });\n        digits.push(digit);\n        carry = digit\
    \ as isize;\n    }\n    while digits.len() > 0 {\n        let mut digit = digits.pop().unwrap();\n\
    \        if carry > 0 {\n            digit += 1;\n        }\n        digit = digit.to_string().chars().collect::<Vec<_>>().iter().fold(0,\
    \ |acc, x| {\n            acc + (x.to_digit(10).unwrap() as isize) * x;\n    \
    \        acc\n        });\n        digits.push(digit);\n        carry = digit\
    \ as isize;\n    }\n    s += digits.iter().fold(\"\".to_string(), |mut acc, x|\
    \ {\n        acc + &x.to_string()[..];\n        acc\n    });\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        digits.push_str(&format!(\"{}\",\
    \ digit));\n    }\n    digits.push_str(&format!(\"{}\", remainder));\n    s +=\
    \ &digits;\n    s", "    let mut s = String::new();\n    let mut x = x.to_digits();\n\
    \    let mut base = base.to_digits();\n    while x.len() > 0 {\n        let mut\
    \ digit = x.pop().unwrap();\n        if digit < base {\n            s.push_str(&format!(\"\
    {}\", digit));\n        } else {\n            s.push_str(&format!(\"{}\", digit\
    \ - base));\n            s.push_str(&format!(\"{}\", base));\n        }\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let remainder = quotient\
    \ % base;\n        quotient = quotient / base;\n        s = format!(\"{}{}\",\
    \ s, remainder);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    for &d in &mut digits {\n        let mut new_digit\
    \ = d.to_digit(base);\n        if carry > 0 {\n            new_digit += carry;\n\
    \        }\n        carry = new_digit / 10;\n        s = s.push_str(&new_digit);\n\
    \    }\n    if carry > 0 {\n        s = s.push_str(&carry);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = vec![0; base];\n    let mut\
    \ carry = 0;\n    while x >= base {\n        let digit = x % base;\n        digits[digit]\
    \ += 1;\n        x /= base;\n    }\n    for digit in digits {\n        if digit\
    \ > 0 {\n            s.push_str(&format!(\"{}\", digit));\n        } else {\n\
    \            s.push_str(&format!(\"0\"));\n        }\n    }\n    if carry > 0\
    \ {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s", "    let mut\
    \ res = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i];\n \
    \       let mut basedigit = base[i];\n        if basedigit == '0' {\n        \
    \    digits.remove(&i);\n            digits.insert(0, digit);\n            base.remove(&i);\n\
    \            base.insert(0, basedigit);\n            i += 1;\n        } else {\n\
    \            digit *= basedigit;\n        }\n    }\n    res.push_str(&digits.join(\"\
    \"));\n    res.push_str(&base.join(\"\"));\n    res", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c as char).collect::<Vec<_>>();\n    basedigits.reverse();\n    basedigits.insert(0,\
    \ base);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0,\
    \ 0);\n    basedigits.insert(0, 0);\n    basedigits.insert(0, ", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s", "    let mut res = String::new();\n    let\
    \ mut digits = vec![0u8; base];\n    let mut x = x;\n    while x >= base {\n \
    \       digits[x - base] += 1;\n        x /= base;\n    }\n    while x != 0 {\n\
    \        res.insert(0, digits[x % base].to_string());\n        x /= base;\n  \
    \  }\n    res", "    let mut s = String::new();\n    let mut digits = vec![0u8;\
    \ base];\n    let mut carry = 0;\n    while x >= base {\n        let digit = x\
    \ % base;\n        digits[digit] += 1;\n        x /= base;\n        carry = 1;\n\
    \    }\n    while carry != 0 {\n        digits[digits.len() - 1] += 1;\n     \
    \   carry /= 10;\n    }\n    for digit in digits[0..digits.len() - 1] {\n    \
    \    s += char::from_u32(digit as u32).unwrap();\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n\
    \    while quotient > 0 {\n        let digit = quotient % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n        quotient\
    \ = quotient / base;\n    }\n    if remainder > 0 {\n        s = format!(\"{}\"\
    , s);\n    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits {\n        s.push(digit);\n    }\n    s", "  \
    \  let mut s = String::new();\n    let mut digits = vec![0i32; base];\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits[digit] += 1;\n\
    \    }\n    for digit in digits {\n        if digit == 0 {\n            continue;\n\
    \        }\n        let mut digit = digit;\n        let mut carry = 0;\n     \
    \   while digit > 0 {\n            let digit = digit % base;\n            digit\
    \ /= base;\n            carry = carry + digit;\n        }\n        if carry >\
    \ 0 {\n            s.push_str(&format!(\"{}{}\", digit, carry));\n        } else\
    \ {\n            s.push_str(&format!(\"{}\", digit));\n        }\n    }\n    s",
  "    let mut res = String::new();\n    let mut digits = x.to_string();\n    let\
    \ mut base = base.to_string();\n    let mut digits_len = digits.length();\n  \
    \  let mut base_len = base.length();\n    while digits_len > base_len {\n    \
    \    res.push_str(&base[base_len..]);\n        base_len -= 1;\n    }\n    while\
    \ digits_len < base_len {\n        res.push_str(&digits[digits_len..]);\n    \
    \    digits_len += 1;\n    }\n    res.push_str(&digits[digits_len..]);\n    res",
  "    let mut s = String::new();\n    let mut base = base;\n    while x >= base {\n\
    \        s += &format!(\"{}\", x / base);\n        x %= base;\n        base /=\
    \ 10;\n    }\n    s += &format!(\"{}\", x);\n    s", "    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = vec![0u8; base];\n    while\
    \ remainder > 0 {\n        let digit = remainder % base;\n        remainder =\
    \ remainder / base;\n        digits[digit] = 1;\n    }\n    for digit in digits.iter().rev()\
    \ {\n        if digit == 0 {\n            continue;\n        }\n        result.push((digit\
    \ as char).to_string());\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = 1;\n    while remainder > 0\
    \ {\n        let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n        digits += 1;\n    }\n    if\
    \ digits > 0 {\n        s = format!(\"{}\", s);\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] == base[0] {\n  \
    \          s.push_str(&base[1..]);\n            i += 1;\n        } else {\n  \
    \          s.push_str(&digits[i]);\n        }\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] > base {\n      \
    \      digits[i] -= base;\n        } else {\n            digits[i] += base;\n\
    \        }\n        i += 1;\n    }\n    for d in digits {\n        s += d.to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = vec![0u8;\
    \ base];\n    let mut x = x;\n    while x >= base {\n        digits.insert(0,\
    \ x % base);\n        x /= base;\n    }\n    digits.insert(0, x);\n    for i in\
    \ &digits {\n        s += char::from_u32(*i).unwrap().to_string();\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut res = String::new();\n    let mut digits = vec![0u8; base];\n    let\
    \ mut carry = 0;\n    while x >= base {\n        let digit = x % base;\n     \
    \   digits[digit] += 1;\n        x /= base;\n        carry += 1;\n    }\n    if\
    \ carry > 0 {\n        digits[digit] += 1;\n    }\n    for digit in digits.iter().rev()\
    \ {\n        res.insert(0, digit.to_string());\n    }\n    res", "    let mut\
    \ result = String::new();\n    let mut remainder = x;\n    let mut digits = String::new();\n\
    \    while remainder > 0 {\n        let digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        digits.push(digit.to_string());\n    }\n    for\
    \ digit in digits.chars() {\n        result.push(digit);\n    }\n    result",
  "    let mut s = String::new();\n    let mut remain = x;\n    while remain > 0 {\n\
    \        let mut digit = remain;\n        remain %= base;\n        digit += base;\n\
    \        s.push((digit as char).to_string());\n    }\n    String::from(s)", " \
    \   let mut result = String::new();\n    let mut x = x as usize;\n    let mut\
    \ base = base as usize;\n    while x >= base {\n        result += '0';\n     \
    \   x -= base;\n    }\n    result += '1';\n    result += &x[..];\n    result",
  "    let mut res = String::new();\n    let mut digits = vec![0u8; base];\n    let\
    \ mut x = x;\n    while x >= base {\n        digits.insert(0, x % base);\n   \
    \     x /= base;\n    }\n    res.push_str(&digits);\n    res", "    let mut s\
    \ = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder = x % base;\n        digits.push(format!(\"\
    {}\", remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\"\
    , x));\n    s += &digits;\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = 0;\n    while x >= base {\n\
    \        remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n\
    \        x /= base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += digits.into_owned();\n\
    \    s", "    let mut result = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x / base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    result = digits.join(\"\");\n \
    \   result", "    let mut s = String::new();\n    let mut base = base;\n    while\
    \ x >= base {\n        s += &format!(\"{}\", x / base);\n        x %= base;\n\
    \        base /= 10;\n    }\n    s += &format!(\"{}\", x);\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        digits.insert(0, digit.to_string());\n\
    \    }\n    digits.insert(0, remainder.to_string());\n    s.push_str(&digits);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      if digits.len() - i < base {\n            power = 1;\n            i +=\
    \ 1;\n        } else {\n            power = power * base;\n            i += base;\n\
    \        }\n        if power > 10 {\n            power = 1;\n            i +=\
    \ 1;\n        }\n        s += digits.chars().nth(i).to_string();\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] >= base[0] {\n  \
    \          s.push_str(&base[digits[i] - base[0]]);\n            i += 1;\n    \
    \    } else {\n            s.push_str(&digits[i]);\n        }\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut i = 0;\n    while i < digits.len() {\n\
    \        let mut digit = digits[i..].parse::<usize>().unwrap();\n        digit\
    \ = digit * base.parse::<usize>().unwrap();\n        digit = digit.to_string();\n\
    \        i += digit.len();\n        s = s.push_str(&digit);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient /= base;\n        s.push(remainder);\n    }\n    s.push(remainder);\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut digits = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits += 1;\n    }\n    while digits > 0 {\n        s.push((digits).to_string());\n\
    \        digits -= 1;\n    }\n    String::from(s)", "    let mut res = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut x = x;\n    while x >= base\
    \ {\n        digits[x - base] += 1;\n        x /= base;\n    }\n    while x >\
    \ 0 {\n        res.push_str(&format!(\"{}\", digits[x % base]));\n        x /=\
    \ base;\n    }\n    res", "    let mut res = String::new();\n    let mut x = x\
    \ as usize;\n    let mut base = base as usize;\n    while x >= base {\n      \
    \  res.push_str(&format!(\"{}\", x / base));\n        x %= base;\n    }\n    res.push_str(&format!(\"\
    {}\", x));\n    res", "    let mut s = String::new();\n    let mut remainder =\
    \ 0;\n    let mut digits = x.to_string();\n    while !digits.is_empty() {\n  \
    \      let digit = digits.chars().nth(base).unwrap();\n        remainder += digit\
    \ as isize;\n        s = format!(\"{}{}\", s, digit);\n        digits = digits.chars().skip_while(|c|\
    \ c != digit).collect();\n    }\n    if remainder > 0 {\n        s = format!(\"\
    {}{}\", s, remainder);\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n  \
    \      let digit = quotient % base;\n        remainder = remainder / base;\n \
    \       s = format!(\"{}{}\", digit, s);\n        quotient = quotient / base;\n\
    \    }\n    if remainder > 0 {\n        s = format!(\"{}\", s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n\
    \    }\n    if quotient > 0 {\n        s = format!(\"{}\", quotient);\n    }\n\
    \    s", "    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        result.push((&mut digits[..]).to_ascii_lowercase()[base]);\n\
    \    }\n    result.push((&mut digits[..]).to_ascii_lowercase()[remainder]);\n\
    \    result", "    let mut s = String::new();\n    let mut remainder = x;\n  \
    \  while remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    s += digits.into_owned();\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        remainder /= base;\n  \
    \      quotient /= base;\n        s.push((remainder % base) as char);\n    }\n\
    \    s.push((quotient % base) as char);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut carry = 0;\n    while x >=\
    \ base {\n        let digit = x % base;\n        digits[digit] += 1;\n       \
    \ x /= base;\n        carry = 1;\n    }\n    while carry != 0 {\n        digits[digits.len()\
    \ - 1] += 1;\n        carry /= 10;\n    }\n    for digit in digits.iter() {\n\
    \        s += char::from_u32(digit as u32).unwrap();\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = 0;\n    let mut power = 1;\n    let mut digits_len = base;\n    let mut remainder_len\
    \ = base;\n    let mut digit_len = base;\n    let mut remainder_len = base;\n\
    \    let mut digit_len = base;\n    let mut remainder_len = base;\n    let mut\
    \ digit_len = base;\n    let mut remainder_len = base;\n    let mut digit_len\
    \ = base;\n    let mut remainder_len = base;\n    let mut digit_len = base;\n\
    \    let mut remainder_len = base;\n    let mut digit_len = base;\n    let mut\
    \ remainder_len = base;\n    let mut digit_len = base;\n    let mut remainder_len\
    \ = base;\n    let mut digit_len = base;\n    let mut remainder_len = base;\n\
    \    let mut digit_len = base;\n    let mut remainder_len = base;\n    let mut\
    \ digit_len = base;\n    let mut remainder_len = base;\n    let mut digit_len\
    \ = base;\n    let mut remainder_len = base;\n    let mut digit_len = base;\n\
    \    let mut remainder_len = base;\n    let mut digit_len = base;\n    let mut\
    \ remainder_len = base;\n    let mut digit_len = base;\n    let mut remainder_len\
    \ = base;\n    let mut digit_len = base;\n    let mut remainder_len = base;\n\
    \    let mut digit_len = base;\n    let mut remainder_len = base;\n    let mut\
    \ digit_len = base;\n    let mut remainder_len = base;\n    let mut digit_len\
    \ = base;\n    let mut remainder_len = base;\n    let mut digit_len = base;\n\
    \    let mut remainder_len = base;\n    let mut digit_len = base;\n    let mut\
    \ remainder_len = base;\n    let mut digit_len = base;\n    let mut remainder_len\
    \ = base;\n    let mut digit_len = base;\n    let mut remainder_len = base;\n\
    \    let mut digit_len = base;\n    let mut remainder_len = base;\n    let mut\
    \ digit_len = base;\n    let mut remainder_len = base;\n    let mut digit_len\
    \ = base;\n    let mut remainder_len = base;\n    let mut digit_len = base;\n\
    \    let mut remainder_len = base;\n    let mut digit_len = base;\n    let mut\
    \ remainder_len = base;\n    let mu", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut bases = base.to_string();\n    while\
    \ bases.len() > 0 {\n        let mut digit = digits.chars().nth(bases.len() -\
    \ 1).unwrap();\n        if digit == '0' {\n            digits.remove(bases.len()\
    \ - 1);\n            bases.remove(bases.len() - 1);\n        } else {\n      \
    \      s.insert(0, digit);\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    s += &digits;\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] > base\
    \ {\n            digits[i] -= base;\n        } else {\n            digits[i] +=\
    \ base;\n        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n \
    \       s += digits[i].to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    let mut digits = x.to_string();\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(base).unwrap();\n        remainder\
    \ += digit as isize;\n        digits = digits.chars().nth(base - 1).unwrap();\n\
    \    }\n    if remainder > 0 {\n        remainder -= 1;\n        s.push('0');\n\
    \    }\n    s.push(remainder);\n    s", "    let mut result = String::new();\n\
    \    let mut x = x as usize;\n    let mut base = base as usize;\n    while x >=\
    \ base {\n        result += '0';\n        x /= base;\n    }\n    result += '0';\n\
    \    result += x.to_string();\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    while x > 0 {\n        remainder += x;\n     \
    \   x /= base;\n    }\n    s += format!(\"{}\", remainder);\n    s", "    let\
    \ mut result = String::new();\n    let mut x = x;\n    while x >= base {\n   \
    \     let mut y = x / base;\n        result = format!(\"{}{}\", result, y);\n\
    \        x = x - y * base;\n    }\n    result = format!(\"{}\", result);\n   \
    \ result", "    let mut s = String::new();\n    let mut remainder = 0;\n    while\
    \ x >= base {\n        remainder += x % base;\n        x /= base;\n    }\n   \
    \ if x > 0 {\n        remainder += x;\n    }\n    while remainder > 0 {\n    \
    \    s += char::from_u32(remainder as u32).unwrap();\n        remainder -= char::from_u32(base).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = vec![0;\
    \ base];\n    let mut carry = 0;\n    while x >= base {\n        let digit = x\
    \ % base;\n        digits[digit] += 1;\n        x /= base;\n    }\n    for digit\
    \ in digits {\n        if digit > 0 {\n            s.push_str(&format!(\"{}\"\
    , digit));\n        } else {\n            s.push_str(&format!(\"0\"));\n     \
    \   }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\", carry));\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        s += digits[remainder];\n        remainder /= base;\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if base == 0 {\n            s.push('0');\n\
    \            i += 1;\n            continue;\n        }\n        let mut digit\
    \ = digits[i];\n        if digit >= '0' && digit <= '9' {\n            digit =\
    \ digit - '0';\n        }\n        if digit >= base {\n            digit = digit\
    \ - base;\n            s.push('0');\n            i += 1;\n        }\n        s.push((digit\
    \ as char).to_string());\n        i += 1;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n        x = x / base;\n    }\n\
    \    s = format!(\"{}\", s);\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = String::new();\n    let mut remainder = 0;\n    while x >= base\
    \ {\n        remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n\
    \        x /= base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += &digits[..digits.len()\
    \ - 1];\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while digits.len() > 0 {\n        let\
    \ digit = digits.chars().nth(digits.len() - 1);\n        let mut new_digit = digit;\n\
    \        if base == 2 {\n            if digit == '0' {\n                new_digit\
    \ = '1';\n            }\n            else if digit == '1' {\n                new_digit\
    \ = '0';\n            }\n        }\n        if base == 8 {\n            if digit\
    \ == '0' {\n                new_digit = '7';\n            }\n            else\
    \ if digit == '7' {\n                new_digit = '0';\n            }\n       \
    \ }\n        if base == 10 {\n            if digit == '0' {\n                new_digit\
    \ = '9';\n            }\n            else if digit == '9' {\n                new_digit\
    \ = '0';\n            }\n        }\n        s += new_digit;\n        digits =\
    \ digits.chars().nth(digits.len() - 1);\n        base /= 10;\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut x = x.to_digits();\n    let mut base\
    \ = base.to_digits();\n    while x.len() > 0 {\n        let mut digit = x.remove(0);\n\
    \        if digit >= base {\n            digit -= base;\n        }\n        s\
    \ += digit.to_string();\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = 0;\n    while x >= base {\n        remainder += x / base;\n\
    \        x = x % base;\n    }\n    s += x.to_string();\n    if remainder > 0 {\n\
    \        s += &format!(\"{}\", remainder).to_string();\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = vec![0u8; base];\n    let mut carry\
    \ = 0;\n    while x >= base {\n        digits[base - 1] += x;\n        x -= base;\n\
    \        carry = 0;\n        for &d in &digits[base..] {\n            carry +=\
    \ d;\n            if carry > 0 {\n                s += '0';\n            }\n \
    \           s += '1';\n            carry = 0;\n        }\n    }\n    if carry\
    \ > 0 {\n        s += '0';\n    }\n    s += '1';\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let digit = remainder % base;\n        remainder =\
    \ remainder / base;\n        digits[digit] = 1;\n    }\n    for digit in digits\
    \ {\n        if digit == 0 {\n            continue;\n        }\n        s.push('0');\n\
    \    }\n    s.push((x as i8).to_string());\n    s", "    let mut result = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        result += '0';\n        x\
    \ -= base;\n    }\n    result += &format!(\"{}\", x);\n    result", "    let mut\
    \ result = String::new();\n    let mut remainder = x;\n    let mut digits = base;\n\
    \    while remainder > 0 {\n        remainder %= base;\n        remainder += digits;\n\
    \        digits *= base;\n    }\n    result.push_str(&format!(\"{}\", remainder));\n\
    \    result", "    let mut result = String::new();\n    let mut digits = vec![0u8;\
    \ base];\n    let mut remainder = x;\n    while remainder > 0 {\n        remainder\
    \ %= base;\n        digits[base] = remainder;\n        result += &digits[base].to_string();\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.size()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[..i]);\n        \
    \    break;\n        }\n        let mut digit = digits[..i].parse::<usize>().unwrap();\n\
    \        digit *= base.parse::<usize>().unwrap();\n        digit %= base;\n  \
    \      i += 1;\n        s.push_str(&digit.to_string());\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = vec![0u8; base];\n    let mut carry\
    \ = 0;\n    while x >= base {\n        digits[base - 1] += x;\n        carry =\
    \ digits[base - 1];\n        x -= base;\n    }\n    if carry > 0 {\n        digits[base\
    \ - 1] += carry;\n    }\n    for &d in &digits[..] {\n        s += char::from_u32(d\
    \ as u32).unwrap();\n    }\n    s", "    let mut result = String::new();\n   \
    \ let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        result = format!(\"\
    {}{}\", digit, result);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut x = x as usize;\n    let\
    \ mut base = base as usize;\n    while x >= base {\n        s += &format!(\"{:0{}b}\"\
    , x % base, base);\n        x /= base;\n    }\n    s += &format!(\"{:0{}b}\",\
    \ x, base);\n    s", "    let mut result = String::new();\n    let mut digits\
    \ = vec![0; base];\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits[digit] = 1;\n    }\n    for digit in digits {\n        if digit\
    \ == 0 {\n            continue;\n        }\n        result.push((digit as char).to_string());\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      let mut digit = digits[i];\n        let mut base = base[i];\n        if\
    \ digit == 0 {\n            digit = carry;\n            base = base - 1;\n   \
    \     }\n        let mut new_digit = digit + base;\n        if new_digit > 9 {\n\
    \            new_digit -= 10;\n            carry = 1;\n        } else {\n    \
    \        carry = 0;\n        }\n        result = result.push_str(&new_digit.to_string());\n\
    \        i += 1;\n    }\n    if carry != 0 {\n        result = result.push_str(&carry.to_string());\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut remainder =\
    \ 0;\n    while x >= base {\n        remainder += x % base;\n        x = x / base;\n\
    \    }\n    s += &format!(\"{}\", remainder);\n    s += &format!(\"{}\", x);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n\
    \    let mut carry = 0;\n    for digit in x.to_digits().iter().cloned() {\n  \
    \      if digit > base {\n            digits.insert(0, 0);\n            carry\
    \ = 1;\n        } else {\n            digits.insert(0, digit);\n            carry\
    \ = 0;\n        }\n    }\n    while carry != 0 {\n        digits.insert(0, 0);\n\
    \        carry = digits.iter().cloned().next().unwrap();\n    }\n    for digit\
    \ in digits.iter().cloned() {\n        s += char::from_u32(digit as u32).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut quotient = x;\n    while quotient > 0 {\n        let digit = quotient\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digit, s);\n        quotient = quotient / base;\n    }\n    if remainder > 0\
    \ {\n        s = format!(\"{}\", remainder) + s;\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = vec![0u8; base];\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        digits[digit] += 1;\n    }\n    for\
    \ digit in digits {\n        s += char::from_u32(digit as u32).unwrap();\n   \
    \ }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n   \
    \ let mut base = base;\n    while remainder > 0 {\n        if remainder >= base\
    \ {\n            s.push((remainder % base).to_string());\n            remainder\
    \ /= base;\n        } else {\n            s.push((remainder % base).to_string());\n\
    \            break;\n        }\n    }\n    s.push((remainder).to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n    let\
    \ mut carry = 0;\n    while x >= base {\n        digits[base] = x % base;\n  \
    \      x /= base;\n        carry += 1;\n    }\n    while carry > 0 {\n       \
    \ digits[base] = carry % base;\n        carry /= base;\n    }\n    for &d in digits\
    \ {\n        s += char::from_u32(d as u32).unwrap();\n    }\n    s", "    let\
    \ mut res = String::new();\n    let mut x = x;\n    let mut base = base;\n   \
    \ while x >= base {\n        res.push_str(&x.to_string().rjust(base, '0'));\n\
    \        x /= base;\n    }\n    res.push_str(&x.to_string().rjust(base, '0'));\n\
    \    res", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, base.to_string());\n    }\n    while remainder\
    \ > 0 {\n        remainder -= 1;\n        digits.insert(0, remainder.to_string());\n\
    \    }\n    s += digits;\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = vec![0u8; base];\n    let mut remainder = x;\n    while remainder >\
    \ 0 {\n        let digit = remainder % base;\n        remainder = remainder /\
    \ base;\n        digits[digit] += 1;\n    }\n    for digit in digits {\n     \
    \   s += char::from_u32(digit as u32).unwrap();\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut remainder = x;\n    let mut base = base;\n   \
    \ while remainder > 0 {\n        remainder %= base;\n        s += char::from_u32(base).unwrap();\n\
    \        base /= base;\n    }\n    s += char::from_u32(base).unwrap();\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        remainder /= base;\n        quotient\
    \ /= base;\n        s.push((remainder % base) as char);\n    }\n    s.push((quotient\
    \ % base) as char);\n    s", "    let mut s = String::new();\n    let mut base\
    \ = base;\n    while x > 0 {\n        let digit = x % base;\n        s += digit.to_string();\n\
    \        x /= base;\n    }\n    if base == 10 {\n        s += '0';\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut power = 1;\n    let mut digit = digits.get(0);\n    while digit !=\
    \ 0 {\n        if digit % base == 0 {\n            power = power * base;\n   \
    \     }\n        digit = digit / base;\n    }\n    power = power + 1;\n    while\
    \ power > 0 {\n        digit = digits.get(0);\n        if digit != 0 {\n     \
    \       digit = digit / base;\n        }\n        s = s.chars().collect::<Vec<_>>().join(\"\
    \") + &*s.chars().collect::<Vec<_>>().join(\"\");\n        power = power - 1;\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = vec![0u8;\
    \ base];\n    let mut remainder = x;\n    while remainder > 0 {\n        let digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits[digit]\
    \ += 1;\n    }\n    for digit in digits.iter_mut() {\n        *digit = *digit\
    \ + 1;\n    }\n    for digit in digits.iter() {\n        *digit = *digit as char;\n\
    \    }\n    s += digits.iter().map(|x| x as char).collect();\n    s", "    let\
    \ mut res = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] >= base[0] {\n  \
    \          res.push_str(&base[digits[i] - base[0]]);\n            i += 1;\n  \
    \      } else {\n            res.push_str(&digits[i]);\n            i += 1;\n\
    \        }\n    }\n    res.push_str(&digits[digits.len() - 1]);\n    res", " \
    \   let mut result = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] > base {\n      \
    \      result.push_str(&base[digits[i] - base]);\n            i += 1;\n      \
    \  } else {\n            result.push_str(&digits[i]);\n            i += 1;\n \
    \       }\n    }\n    result", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut quotient = x;\n    while quotient > 0 {\n        let remainder\
    \ = quotient % base;\n        quotient = quotient / base;\n        s = format!(\"\
    {}{}\", s, remainder);\n    }\n    if quotient > 0 {\n        s = format!(\"{}\"\
    , quotient) + s;\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ x = x as usize;\n    let mut base = base as usize;\n    while x >= base {\n\
    \        x /= base;\n        s += &format!(\"{}\", x);\n    }\n    s += &format!(\"\
    {}\", x);\n    s", "    let mut result = String::new();\n    let mut digits =\
    \ vec![0; base];\n    let mut remainder = x;\n    while remainder > 0 {\n    \
    \    let digit = remainder % base;\n        remainder = remainder / base;\n  \
    \      digits[digit] += 1;\n    }\n    for digit in digits {\n        result =\
    \ format!(\"{}{}\", result, digit);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    if quotient > 0 {\n\
    \        s = format!(\"{}\", s);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = vec![0u8; base];\n    let mut carry = 0;\n\
    \    while x >= base {\n        digits[base - 1] += 1;\n        x -= base;\n \
    \   }\n    while x >= 1 {\n        digits[base - 1] += 1;\n        x -= 1;\n \
    \   }\n    for &d in &digits[..] {\n        s += char::from_u32(d as u32).unwrap();\n\
    \    }\n    if carry > 0 {\n        s += char::from_u32(base).unwrap();\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut remain = x;\n    let mut\
    \ base = base;\n    while remain > 0 {\n        if remain % base == 0 {\n    \
    \        s += &format!(\"{}\", base);\n            remain /= base;\n        }\
    \ else {\n            s += &format!(\"{}\", remain);\n        }\n    }\n    s",
  "    let mut result = String::new();\n    let mut digits = vec![0; base];\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits[digit] += 1;\n\
    \    }\n    for digit in 0..digits.len() {\n        if digits[digit] == 0 {\n\
    \            result.push('_');\n        } else {\n            result.push(digits[digit].to_string());\n\
    \        }\n    }\n    result", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut base_size\
    \ = base.len();\n    let mut digits_size = digits.len();\n    let mut i = 0;\n\
    \    while i < digits_size {\n        if digits[i] >= base_size\n            ||\
    \ (digits[i] < 0 && digits[i] > base_size)\n        {\n            break;\n  \
    \      }\n        let mut j = i;\n        while j < digits_size && digits[j] ==\
    \ 0 {\n            j += 1; // skip leading zeros\n        }\n        let mut digit\
    \ = digits[j];\n        if digit < 0 {\n            digit = digit + base_size;\n\
    \        }\n        if digit > base_size {\n            digit = digit - base_size;\n\
    \        }\n        digit = digit as usize;\n        digits[i] = digit;\n    \
    \    i += 1;\n    }\n    digits.truncate(digits_size);\n    s = digits.to_string();\n\
    \    if base < 2 {\n        s = \"0\" + s;\n    }\n    if base < 10 {\n      \
    \  s = &s[..1] + &s[1..];\n    }\n    s", "    let mut s = String::new();\n  \
    \  let mut digits = vec![0; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        let digit = x % base;\n        digits[digit] += 1;\n        x /=\
    \ base;\n    }\n    while x != 0 {\n        let digit = x % base;\n        digits[digit]\
    \ += 1;\n        x /= base;\n    }\n    for &digit in &digits {\n        if digit\
    \ > 0 {\n            s.push_str(&format!(\"{}\", digit));\n        } else {\n\
    \            s.push_str(&format!(\"{}\", digit as char));\n        }\n    }\n\
    \    if carry > 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n   \
    \ s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n \
    \   let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, remainder);\n    }\n    while remainder < base\
    \ {\n        remainder += base;\n        digits.insert(0, remainder);\n    }\n\
    \    s += digits;\n    s", "    let mut res = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i];\n\
    \        if base > 10 {\n            digit *= base;\n            digits.remove(&i);\n\
    \            i += 1;\n        }\n        res.push_str(&digit);\n        i += 1;\n\
    \    }\n    res", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.length();\n    while digits_len > base_len {\n  \
    \      digits.insert(0, base.chars().nth(digits_len - base_len).unwrap());\n \
    \       digits_len -= base_len;\n        base_len += 1;\n    }\n    while digits_len\
    \ < base_len {\n        digits.insert(0, base.chars().nth(digits_len).unwrap());\n\
    \        digits_len += 1;\n    }\n    digits.insert(0, base.chars().nth(digits_len).unwrap());\n\
    \    s.append(&digits);\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    let mut base = base;\n    while remainder > 0 {\n      \
    \  let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = base;\n    while remainder >\
    \ 0 {\n        if remainder >= base {\n            digits = base - digits;\n \
    \           remainder -= base;\n        }\n        remainder /= base;\n      \
    \  s.push((digits as char).to_string());\n    }\n    s.push((digits as char).to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let digit = quotient %\
    \ base;\n        remainder = remainder - digit as isize;\n        s = format!(\"\
    {}{}\", s, digit);\n        quotient = quotient / base;\n    }\n    if remainder\
    \ > 0 {\n        s = format!(\"{}\", remainder);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0isize; base];\n    let mut carry = 0;\n    for digit\
    \ in &digits {\n        match x {\n            0 => s.push_str(&format!(\"{}\"\
    , digit)),\n            n => {\n                let mut new_digit = digit + carry\
    \ + 1;\n                carry = new_digit / base;\n                new_digit %=\
    \ base;\n                s.push_str(&format!(\"{}\", new_digit));\n          \
    \  }\n        }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\"\
    , carry));\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    let mut i = base.len();\n    while i >= 0 {\n   \
    \     if carry > 0 {\n            digits[i] = '0';\n        }\n        digits[i]\
    \ = digits[i] - base + carry;\n        carry = 0;\n        if digits[i] >= 10\
    \ {\n            digits[i] -= 10;\n            carry++;\n        }\n        i--;\n\
    \    }\n    for i in 0..digits.len() {\n        if digits[i] >= 10 {\n       \
    \     digits[i] += '0';\n            carry++;\n        }\n    }\n    for i in\
    \ 0..digits.len() {\n        if digits[i] < 10 {\n            digits[i] += '0';\n\
    \            carry++;\n        }\n    }\n    for i in 0..digits.len() {\n    \
    \    if digits[i] == 0 {\n            digits[i] = '0';\n        }\n    }\n   \
    \ for i in 0..digits.len() {\n        s += digits[i].to_string();\n    }\n   \
    \ if carry > 0 {\n        s += &format!(\"{}\", carry);\n    }\n    s", "    let\
    \ mut result = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        result = format!(\"{}{}\", digit, result);\n    }\n    result",
  "    let mut res = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut bases = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut i = 1;\n    while i < digits.len() {\n        let mut\
    \ digit = digits[i];\n        if digit == '0' {\n            digit = bases[i -\
    \ 1];\n            carry = 0;\n        } else {\n            carry = (digit as\
    \ i32 + carry) as u8;\n            digit = digit as u8;\n        }\n        res.push_str(&format!(\"\
    {}{}\", digit, carry));\n        i += 1;\n    }\n    res", "    let mut s = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        let digit = x % base;\n        digits[digit] += 1;\n        x /=\
    \ base;\n    }\n    for digit in digits {\n        if digit > 0 {\n          \
    \  s.push_str(&format!(\"{}\", digit));\n        }\n    }\n    if carry > 0 {\n\
    \        s.push_str(&format!(\"{}\", carry));\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n    while\
    \ quotient > 0 {\n        let remainder = quotient % base;\n        quotient =\
    \ quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let\
    \ mut carry = 0;\n    while basedigits.len() > 0 {\n        let mut digit = digits.remove(0);\n\
    \        let mut basedigit = basedigits.remove(0);\n        if digit < basedigit\
    \ {\n            carry = 1;\n            digit += basedigit as isize;\n      \
    \  }\n        s += digit.to_string();\n        if carry != 0 {\n            s\
    \ += '1';\n            carry = 0;\n        }\n    }\n    if carry != 0 {\n   \
    \     s += '1';\n    }\n    s", "    let mut result = String::new();\n    let\
    \ mut remainder = x;\n    let mut digits = String::new();\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits.drain(..)\
    \ {\n        result.push_str(digit);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut base = base;\n    while x >= base {\n        s +=\n            format!(\"\
    {:0{}b}\", x % base, base).to_string();\n        x /= base;\n    }\n    s +=\n\
    \        format!(\"{:0{}b}\", x, base).to_string();\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] == base[0] {\n  \
    \          s.push_str(&base[1..]);\n            i += 1;\n        } else {\n  \
    \          s.push_str(&digits[i..]);\n            i += 1;\n        }\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base10 = base.to_string();\n    let mut base10_digits = base10.to_string();\n\
    \    let mut base10_digits_len = base10_digits.length();\n    let mut base10_digits_power\
    \ = base10_digits_len as isize;\n    let mut base10_digits_power = base10_digits_power\
    \ as isize;\n    let mut base10_digits_power = base10_digits_power as isize;\n\
    \    let mut base10_digits_power = base10_digits_power as isize;\n    let mut\
    \ base10_digits_power = base10_digits_power as isize;\n    let mut base10_digits_power\
    \ = base10_digits_power as isize;\n    let mut base10_digits_power = base10_digits_power\
    \ as isize;\n    let mut base10_digits_power = base10_digits_power as isize;\n\
    \    let mut base10_digits_power = base10_digits_power as isize;\n    let mut\
    \ base10_digits_power = base10_digits_power as isize;\n    let mut base10_digits_power\
    \ = base10_digits_power as isize;\n    let mut base10_digits_power = base10_digits_power\
    \ as isize;\n    let mut base10_digits_power = base10_digits_power as isize;\n\
    \    let mut base10_digits_power = base10_digits_power as isize;\n    let mut\
    \ base10_digits_power = base10_digits_power as isize;\n    let mut base10_digits_power\
    \ = base10_digits_power as isize;\n    let mut base10_digits_power = base10_digits_power\
    \ as isize;\n    let mut base10_digits_power = base10_digits_power as isize;\n\
    \    let mut base10_digits_power = base10_digits_power as isize;\n    let mut\
    \ base10_digits_power = base10_digits_power as isize;\n    let mut base10_digits_power\
    \ = base10_digits_power as isize;\n    let mut base10_digits_power = base10_digits_power\
    \ as isize;\n    let mut base10_digits_power = base10_digits_power as isize;\n\
    \    let mut base10_digits_power = base10_digits_power as isize;\n    let mut\
    \ base10_digits_power = base10_digits_power as isize;\n    let mut base10_digits_power\
    \ = ", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n    let\
    \ mut carry = 0;\n    while x >= base {\n        digits[base - 1] += 1;\n    \
    \    x -= base;\n    }\n    while x != 0 {\n        digits[base - 1] += 1;\n \
    \       x /= base;\n    }\n    for i in 0..digits.len() {\n        if digits[i]\
    \ > 0 {\n            s.push_str(&format!(\"{}\", digits[i]));\n        } else\
    \ {\n            s.push_str(&format!(\"0\"));\n        }\n    }\n    if carry\
    \ != 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut basedigits\
    \ = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n    basedigits.reverse();\n\
    \    let mut i = 0;\n    while i < basedigits.len() {\n        if basedigits[i]\
    \ == base {\n            basedigits[i] = '0';\n        } else {\n            basedigits[i]\
    \ = '1';\n        }\n        i += 1;\n    }\n    s += &basedigits.join(\"\");\n\
    \    s", "    let mut result = String::new();\n    let mut digits = vec![0u8;\
    \ base];\n    let mut remainder = x;\n    while remainder > 0 {\n        let digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits[digit]\
    \ += 1;\n    }\n    for digit in digits.iter_mut() {\n        *digit = *digit\
    \ + 1;\n    }\n    for i in 0..digits.len() {\n        if digits[i] < 10 {\n \
    \           result.push_str(&format!(\"{}\", digits[i]));\n        } else {\n\
    \            result.push_str(&format!(\"{}\", digits[i] - 10));\n        }\n \
    \   }\n    result", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.len();\n    while digits_len > base_len {\n     \
    \   digits = digits.chars().nth(digits_len).unwrap().to_string();\n        base\
    \ = base.chars().nth(base_len).unwrap().to_string();\n        digits_len -= 1;\n\
    \        base_len -= 1;\n    }\n    while digits_len < base_len {\n        digits\
    \ = digits.chars().nth(digits_len).unwrap().to_string();\n        base = base.chars().nth(base_len).unwrap().to_string();\n\
    \        digits_len += 1;\n        base_len += 1;\n    }\n    digits = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \    base = base.chars().nth(base_len).unwrap().to_string();\n    s += digits;\n\
    \    s += base;\n    s", "    let mut result = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      let mut digit = digits[i];\n        if digit == '0' {\n            digit\
    \ = base.len() - i;\n            carry = 0;\n        } else {\n            digit\
    \ = digit.to_digit(base.len());\n            carry = (digit as i32 + carry) as\
    \ i32;\n        }\n        result += digit.to_string();\n        i += 1;\n   \
    \ }\n    if carry > 0 {\n        result += '1';\n    }\n    result", "    let\
    \ mut s = String::new();\n    let mut digits = vec![0u8; base];\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        digits[digit] += 1;\n    }\n    for\
    \ digit in digits.iter_mut() {\n        *digit = *digit + 1;\n    }\n    for digit\
    \ in digits.iter() {\n        if *digit == 0 {\n            *digit = base;\n \
    \       }\n    }\n    for digit in digits.iter() {\n        if *digit > base {\n\
    \            *digit = *digit - base;\n        }\n    }\n    s += digits.iter().cloned().collect();\n\
    \    s", "    let mut res = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if base == 0 {\n            res.push_str(&digits[i]);\n\
    \            i += 1;\n        } else {\n            let mut carry = 0;\n     \
    \       let mut j = i;\n            while j < digits.len() && digits[j] == base[j]\
    \ {\n                j += 1;\n            }\n            if j == digits.len()\
    \ {\n                res.push_str(&digits[i]);\n                i += 1;\n    \
    \        } else {\n                while j < digits.len() {\n                \
    \    let mut tmp = digits[j];\n                    digits[j] = digits[j] + carry;\n\
    \                    carry = tmp % base;\n                    j += 1;\n      \
    \          }\n                if carry != 0 {\n                    res.push_str(&digits[i]);\n\
    \                    i += 1;\n                }\n            }\n        }\n  \
    \  }\n    res", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        remainder *= base;\n        s += char::from_u32(x\
    \ as u32).unwrap();\n    }\n    s + char::from_u32(x as u32).unwrap()", "    let\
    \ mut s = String::new();\n    let mut remainder = x;\n    let mut digits = 1;\n\
    \    while remainder > 0 {\n        if remainder >= base {\n            digits\
    \ = digits * base + remainder - base;\n            remainder = 0;\n        } else\
    \ {\n            remainder = remainder / base;\n        }\n    }\n    if remainder\
    \ > 0 {\n        digits = digits * base + remainder;\n    }\n    for _ in 0..digits\
    \ {\n        s.push('0');\n    }\n    s.push((x as u32).to_string());\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if base == 0 {\n            s.push_str(&digits[i\
    \ as usize]);\n            i += 1;\n        } else {\n            let mut j =\
    \ i;\n            while j < digits.len() && base != 0 {\n                let mut\
    \ c = digits[j as usize];\n                let mut k = j;\n                while\
    \ k < digits.len() && digits[k as usize] == c {\n                    k += 1;\n\
    \                }\n                let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \                base[k] = c;\n                s.push_str(&base);\n          \
    \      i += 1;\n                j += 1;\n            }\n        }\n    }\n   \
    \ s", "    let mut s = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        x /= base;\n        s += char::from_u32(x\
    \ as u32 + remainder).unwrap();\n    }\n    s += char::from_u32(x as u32 + remainder).unwrap();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let mut digit = digits.remove(0);\n\
    \        if base == 2 {\n            if carry > 0 {\n                digit +=\
    \ &'0' + &'1';\n            }\n            digit += &'0';\n            carry =\
    \ 0;\n        } else {\n            if carry > 0 {\n                digit += &'0'\
    \ + &'1';\n            }\n            digit += &'0';\n            carry = 0;\n\
    \        }\n        s += digit;\n    }\n    if carry > 0 {\n        s += &'1';\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit == '0' {\n            power = 1;\n        } else {\n\
    \            power = base;\n        }\n        s += digit.to_string();\n     \
    \   digits -= digit;\n    }\n    power.to_string()", "    let mut res = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        let digit = x % base;\n        digits[digit] += 1;\n        x /=\
    \ base;\n    }\n    for digit in digits {\n        if digit > 0 {\n          \
    \  res.push_str(&format!(\"{}\", digit));\n        } else {\n            res.push_str(&format!(\"\
    0\"));\n        }\n    }\n    if carry > 0 {\n        res.push_str(&format!(\"\
    {}\", carry));\n    }\n    res", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut quotient = x;\n    while quotient > 0 {\n        let remainder\
    \ = quotient % base;\n        quotient = quotient / base;\n        s = format!(\"\
    {}{}\", s, remainder);\n    }\n    if quotient == 0 {\n        s = format!(\"\
    {}\", remainder);\n    }\n    s", "    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        result = format!(\"{}{}\", digits, digit);\n    }\n    result",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut base =\
    \ base;\n    while remainder > 0 {\n        remainder %= base;\n        s += char::from_u32(base).unwrap();\n\
    \        base /= base;\n    }\n    s += char::from_u32(base).unwrap();\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut base =\
    \ base;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        let mut digit = remainder % base;\n      \
    \  remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n \
    \   }\n    s", "    let mut result = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = vec![0u8; base];\n    while remainder > 0 {\n        let\
    \ digit = remainder % base;\n        remainder = remainder / base;\n        digits[digit]\
    \ = 1;\n    }\n    for digit in digits {\n        if digit == 0 {\n          \
    \  result.push('-');\n        } else {\n            result.push((digit as char).to_string());\n\
    \        }\n    }\n    result", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    for digit in digits {\n \
    \       s.push(digit);\n    }\n    s", "    let mut result = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits[digit] = 1;\n    }\n    for digit in digits {\n    \
    \    if digit == 0 {\n            result.push('-');\n        } else {\n      \
    \      result.push((digit as char).to_string());\n        }\n    }\n    result",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut base = base;\n  \
    \  while x >= base {\n        s +=\n            format!(\"{}\", x / base).to_string().chars().collect::<String>().to_string();\n\
    \        x %= base;\n        base /= base;\n    }\n    s +=\n        format!(\"\
    {}\", x).to_string().chars().collect::<String>().to_string();\n    s", "    let\
    \ mut s = String::new();\n    let mut x = x.to_digits();\n    let mut base = base.to_digits();\n\
    \    while x.len() > 0 {\n        if x.len() > base {\n            s.push_str(&x[..base]);\n\
    \            x = &x[base..];\n        } else {\n            s.push_str(&x[..]);\n\
    \            break;\n        }\n    }\n    s.push_str(&x[..]);\n    s", "    let\
    \ mut s = String::new();\n    let mut remainder = x;\n    let mut digits = vec![];\n\
    \    while remainder > 0 {\n        let digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        digits.push(digit);\n    }\n    for digit in digits\
    \ {\n        s.push((digit as char).to_string());\n    }\n    String::from(s)"]
stop_tokens:
- "\n}"
