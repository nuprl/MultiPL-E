name: HumanEval_43_pairs_sum_to_zero
language: rust
prompt: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
  \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
  \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
  /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>) ->\
  \ bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
  \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 4, 2, 31]), false);\n}\n"
completions: ["    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n    for &x in\
    \ l {\n        pairs.push((x, sum));\n        sum += x;\n    }\n    pairs.iter().all(|&(_,\
    \ y)| y == 0)", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n \
    \   }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "   \
    \ let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return true;\n        }\n        seen.insert(x);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = Vec::new();\n    for i in l {\n        for j in\
    \ l {\n            if i + j == 0 {\n                pairs.push((i, j));\n    \
    \        }\n        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&(_, v)|\
    \ v == 0)", "    let mut seen = HashSet::new();\n    for &i in l {\n        if\
    \ seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n   \
    \ for &x in l {\n        if seen.contains(&x) {\n            return false;\n \
    \       }\n        seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    for i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == 2", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n \
    \   sum == 0 && l.len() == 2", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    let mut\
    \ seen = HashSet::new();\n    for x in l {\n        if seen.insert(x).is_some()\
    \ {\n            sum += x;\n        }\n    }\n    sum == 0", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 || sum == l.len() - l.iter().rev().fold(0, |sum, i| sum + i)", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for &i in\
    \ l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        return true;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < pairs.len() && j < pairs.len() {\n\
    \        if pairs[i] + pairs[j] == 0 {\n            i += 1;\n            j +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    i == pairs.len()",
  "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == l.iter().map(|x| x as isize).filter(|x| x == 0).count() == l.len()\
    \ / 2", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n \
    \   sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count() ==\
    \ l.len() / 2", "    let mut seen = HashSet::new();\n    for &i in l {\n     \
    \   if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count()", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut pairs = Vec::new();\n    for &i in l {\n        if i != 0 {\n   \
    \         sum += i;\n        } else {\n            if sum == 0 {\n           \
    \     pairs.push((sum, i));\n            }\n            sum = 0;\n        }\n\
    \    }\n    pairs.len() == 1 && pairs.iter().all(|&(_, i)| i == 0)", "    let\
    \ mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().map(|x| x).filter(|&x| x == 0).count() == l.len()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return true;\n        }\n        seen.insert(i);\n    }\n    false",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen\
    \ = HashSet::new();\n    for i in l {\n        if seen.contains(&i) {\n      \
    \      return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return true;\n        }\n   \
    \     seen.insert(i);\n    }\n    false", "    let mut pairs = Vec::new();\n \
    \   for &i in l {\n        for &j in l {\n            if i == j && i != 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == 2 && pairs.iter().all(|&(i, j)| i == j && i != 0)", "    let mut sum = 0;\n\
    \    for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut seen = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i != 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().map(|x| x as isize).count() == l.len()",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return true;\n        }\n   \
    \     seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut pairs = Vec::new();\n    let mut sum = 0;\n    for &x in\
    \ l {\n        pairs.push((x, sum));\n        sum += x;\n    }\n    let mut seen\
    \ = HashSet::new();\n    for &(x, y) in pairs {\n        if seen.contains(&y)\
    \ {\n            return false;\n        }\n        seen.insert(y);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 || sum == l.len() - l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut\
    \ pairs = vec![];\n    let mut sum = 0;\n    for &x in l {\n        pairs.push((x,\
    \ sum));\n        sum += x;\n    }\n    let mut seen = vec![];\n    for &(x, y)\
    \ in pairs {\n        if seen.is_empty() || seen.pop().unwrap() != x {\n     \
    \       return false;\n        }\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n   \
    \ for &i in l {\n        if seen.contains(&i) {\n            return false;\n \
    \       }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n\
    \    let mut pairs = Vec::new();\n    for x in l {\n        if x == 0 {\n    \
    \        pairs.push((x, sum));\n        } else {\n            sum += x;\n    \
    \    }\n    }\n    for (x, y) in pairs.iter().skip(1) {\n        if sum == y {\n\
    \            return true;\n        }\n    }\n    false", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        sum += x;\n        seen.insert(x);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut pairs\
    \ = Vec::new();\n    let mut sum = 0;\n    for x in l {\n        if pairs.iter().any(|&y|\
    \ y == x) {\n            return false;\n        }\n        pairs.push(x);\n  \
    \      sum += x;\n    }\n    pairs.iter().all(|&x| x == sum)", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum ==\
    \ 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == 2", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n\
    \    }\n    sum == 0 && l.len() == 2", "    let mut seen = HashSet::new();\n \
    \   for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut pairs = Vec::new();\n    for &i in l {\n        if i != 0 {\n   \
    \         sum += i;\n            pairs.push(i);\n        }\n    }\n    if sum\
    \ == 0 {\n        return true;\n    }\n    for &i in pairs {\n        if sum ==\
    \ i {\n            return true;\n        }\n    }\n    false", "    let mut sum\
    \ = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count()", "    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return true;\n        }\n        seen.insert(x);\n    }\n   \
    \ false", "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l\
    \ {\n        if seen.contains(&i) {\n            return false;\n        }\n  \
    \      seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        sum += i;\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &x in l {\n  \
    \      if seen.contains(&x) {\n            return false;\n        }\n        seen.insert(x);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &x in l {\n  \
    \      if seen.contains(&x) {\n            return false;\n        }\n        seen.insert(x);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n  \
    \      if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut pairs = HashMap::new();\n    for &i in l {\n \
    \       let mut pair = pairs.entry(i);\n        if pair.has() {\n            return\
    \ false;\n        }\n        pair.insert(i);\n    }\n    true", "    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n    }\n    true", " \
    \   let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == 2", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut seen = HashSet::new();\n    for &x in l {\n \
    \       if seen.contains(&x) {\n            return false;\n        }\n       \
    \ seen.insert(x);\n    }\n    true", "    let mut sum = 0;\n    for &i in l {\n\
    \        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i ==\
    \ 0).count() == 2"]
stop_tokens:
- "\n}"
