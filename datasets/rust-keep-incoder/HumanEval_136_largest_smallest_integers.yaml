name: HumanEval_136_largest_smallest_integers
language: rust
prompt: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\n/// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n\
  /// largest_smallest_integers([]) == (None, None)\n/// largest_smallest_integers([0])\
  \ == (None, None)\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>,\
  \ Option<isize>) {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
  \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
  \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
  \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
  \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
  \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
  \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
  \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6,\
  \ 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3),\
  \ Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3),\
  \ Some(1)));\n}\n"
completions: ["    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n\
    \    for x in lst {\n        if x < min_val {\n            min_val = x;\n    \
    \    }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut smallest = Some(0);\n    let mut largest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            smallest = Some(x);\n        } else {\n \
    \           largest = Some(x);\n        }\n    }\n    (smallest, largest)", " \
    \   let mut max_val = std::i32::MAX;\n    let mut min_val = std::i32::MIN;\n \
    \   for v in lst {\n        if v < min_val {\n            min_val = v;\n     \
    \   }\n        if v > max_val {\n            max_val = v;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            max_val = Some(x);\n        } else if x >\
    \ 0 {\n            min_val = Some(x);\n        }\n    }\n    (max_val, min_val)",
  "    let mut smallest = Some(0);\n    let mut largest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            smallest = Some(x);\n        } else {\n \
    \           largest = Some(x);\n        }\n    }\n    (smallest, largest)", " \
    \   let mut max_negative = None;\n    let mut min_positive = None;\n    for x\
    \ in lst {\n        if x < 0 {\n            if max_negative.is_none() {\n    \
    \            max_negative = Some(x);\n            } else {\n                max_negative\
    \ = Some(std::cmp::max(max_negative.unwrap(), x));\n            }\n        } else\
    \ {\n            if min_positive.is_none() {\n                min_positive = Some(x);\n\
    \            } else {\n                min_positive = Some(std::cmp::min(min_positive.unwrap(),\
    \ x));\n            }\n        }\n    }\n    (max_negative, min_positive)", " \
    \   let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n \
    \   for x in lst {\n        if x < min_val {\n            min_val = x;\n     \
    \   }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut max_negative = None;\n    let\
    \ mut min_positive = None;\n    for x in lst {\n        if x < 0 {\n         \
    \   if max_negative.is_none() {\n                max_negative = Some(x);\n   \
    \         } else {\n                max_negative = Some(max_negative.max());\n\
    \            }\n        } else {\n            if min_positive.is_none() {\n  \
    \              min_positive = Some(x);\n            } else {\n               \
    \ min_positive = Some(min_positive.min());\n            }\n        }\n    }\n\
    \    (max_negative, min_positive)", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            max_val = Some(max_val.unwrap());\n     \
    \   } else {\n            min_val = Some(min_val.unwrap());\n        }\n    }\n\
    \    (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut max_negative\
    \ = None;\n    let mut min_positive = None;\n    for x in lst {\n        if x\
    \ < 0 {\n            if max_negative.is_none() {\n                max_negative\
    \ = Some(x);\n            } else {\n                max_negative = Some(std::cmp::max(max_negative.unwrap(),\
    \ x));\n            }\n        } else {\n            if min_positive.is_none()\
    \ {\n                min_positive = Some(x);\n            } else {\n         \
    \       min_positive = Some(std::cmp::min(min_positive.unwrap(), x));\n      \
    \      }\n        }\n    }\n    (max_negative, min_positive)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut smallest = isize::MAX;\n    let mut largest = isize::MIN;\n    for\
    \ x in lst {\n        if x < smallest {\n            smallest = x;\n        }\n\
    \        if x > largest {\n            largest = x;\n        }\n    }\n    (Some(largest),\
    \ Some(smallest))", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut min_val =\
    \ std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for v in lst {\n \
    \       if v < min_val {\n            min_val = v;\n        }\n        if v >\
    \ max_val {\n            max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut largest = Some(0);\n    let\
    \ mut smallest = Some(0);\n    for x in lst {\n        if x < 0 {\n          \
    \  largest = Some(x);\n        } else {\n            smallest = Some(x);\n   \
    \     }\n    }\n    (largest, smallest)", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut max_val = Some(0);\n    let mut\
    \ min_val = Some(0);\n    for v in lst {\n        if v < 0 {\n            max_val\
    \ = Some(max_val.unwrap());\n            min_val = Some(min_val.unwrap());\n \
    \       } else if v > 0 {\n            max_val = Some(max_val.unwrap());\n   \
    \         min_val = Some(min_val.unwrap());\n        } else {\n            max_val\
    \ = Some(max_val.unwrap());\n            min_val = Some(min_val.unwrap());\n \
    \       }\n    }\n    (max_val, min_val)", "    let mut largest = Some(0);\n \
    \   let mut smallest = Some(0);\n    for x in lst {\n        if x < 0 {\n    \
    \        largest = Some(x);\n        } else {\n            smallest = Some(x);\n\
    \        }\n    }\n    (largest, smallest)", "    let mut min_val = i32::MAX;\n\
    \    let mut max_val = i32::MIN;\n    for x in lst {\n        if x < min_val {\n\
    \            min_val = x;\n        }\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut max_val\
    \ = Some(0);\n    let mut min_val = Some(0);\n    for x in lst {\n        if x\
    \ < 0 {\n            max_val = Some(x);\n        } else if x > 0 {\n         \
    \   min_val = Some(x);\n        } else {\n            continue;\n        }\n \
    \   }\n    (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n    let\
    \ mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n\
    \            min_val = x;\n        }\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut largest\
    \ = None;\n    let mut smallest = None;\n    for x in lst {\n        if x < 0\
    \ {\n            if smallest == None {\n                smallest = Some(x);\n\
    \            } else {\n                largest = Some(x);\n            }\n   \
    \     } else {\n            if largest == None {\n                largest = Some(x);\n\
    \            } else {\n                if x > largest {\n                    largest\
    \ = Some(x);\n                }\n            }\n        }\n    }\n    (largest,\
    \ smallest)", "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n\
    \    for x in lst {\n        if x < min_val {\n            min_val = x;\n    \
    \    }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut max_negative = None;\n    let\
    \ mut min_positive = None;\n    for x in lst {\n        if x < 0 {\n         \
    \   if max_negative.is_none() {\n                max_negative = Some(x);\n   \
    \         } else {\n                max_negative = Some(std::cmp::max(max_negative.unwrap(),\
    \ x));\n            }\n        } else {\n            if min_positive.is_none()\
    \ {\n                min_positive = Some(x);\n            } else {\n         \
    \       min_positive = Some(std::cmp::min(min_positive.unwrap(), x));\n      \
    \      }\n        }\n    }\n    (max_negative, min_positive)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut max_val = Some(0);\n    let\
    \ mut min_val = Some(0);\n    for v in lst {\n        if v < 0 {\n           \
    \ max_val = Some(max_val.unwrap());\n            min_val = Some(min_val.unwrap());\n\
    \        } else if v > 0 {\n            max_val = Some(max_val.unwrap());\n  \
    \          min_val = Some(min_val.unwrap());\n        } else {\n            max_val\
    \ = Some(max_val.unwrap());\n            min_val = Some(min_val.unwrap());\n \
    \       }\n    }\n    (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for elt in lst {\n        if elt <\
    \ min_val {\n            min_val = elt;\n        }\n        if elt > max_val {\n\
    \            max_val = elt;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in\
    \ lst {\n        if x < min_val {\n            min_val = x;\n        }\n     \
    \   if x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut min_val =\
    \ i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in lst {\n        if x\
    \ < min_val {\n            min_val = x;\n        }\n        if x > max_val {\n\
    \            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for v in lst {\n        if v < min_val {\n            min_val = v;\n      \
    \  }\n        if v > max_val {\n            max_val = v;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n \
    \   let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for elt in lst {\n        if elt < min_val {\n            min_val = elt;\n \
    \       }\n        if elt > max_val {\n            max_val = elt;\n        }\n\
    \    }\n    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut max_negative = None;\n    let mut min_positive = None;\n    for x in\
    \ lst {\n        if x < 0 {\n            if max_negative.is_none() {\n       \
    \         max_negative = Some(x);\n            } else {\n                max_negative\
    \ = Some(std::cmp::max(max_negative.unwrap(), x));\n            }\n        } else\
    \ {\n            if min_positive.is_none() {\n                min_positive = Some(x);\n\
    \            } else {\n                min_positive = Some(std::cmp::min(min_positive.unwrap(),\
    \ x));\n            }\n        }\n    }\n    (max_negative, min_positive)", " \
    \   let mut max_negative = None;\n    let mut min_positive = None;\n    for x\
    \ in lst {\n        if x < 0 {\n            if max_negative.is_none() {\n    \
    \            max_negative = Some(x);\n            } else {\n                max_negative\
    \ = Some(std::cmp::max(max_negative.unwrap(), x));\n            }\n        } else\
    \ {\n            if min_positive.is_none() {\n                min_positive = Some(x);\n\
    \            } else {\n                min_positive = Some(std::cmp::min(min_positive.unwrap(),\
    \ x));\n            }\n        }\n    }\n    (max_negative, min_positive)", " \
    \   let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n \
    \   for x in lst {\n        if x < min_val {\n            min_val = x;\n     \
    \   }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut largest = None;\n    let mut smallest = None;\n    for x in lst {\n\
    \        if x < 0 {\n            largest = Some(x);\n        } else if x > 0 {\n\
    \            smallest = Some(x);\n        }\n    }\n    (largest, smallest)",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut smallest = isize::MAX;\n   \
    \ let mut largest = isize::MIN;\n    for x in lst {\n        if x < smallest {\n\
    \            smallest = x;\n        }\n        if x > largest {\n            largest\
    \ = x;\n        }\n    }\n    (Some(largest), Some(smallest))", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for elt in lst {\n        if elt < min_val {\n            min_val = elt;\n\
    \        }\n        if elt > max_val {\n            max_val = elt;\n        }\n\
    \    }\n    (Some(min_val), Some(max_val))", "    let mut max_negative = None;\n\
    \    let mut min_positive = None;\n    for x in lst {\n        if x < 0 {\n  \
    \          if max_negative.is_none() {\n                max_negative = Some(x);\n\
    \            } else {\n                max_negative = Some(std::cmp::max(max_negative.unwrap(),\
    \ x));\n            }\n        } else {\n            if min_positive.is_none()\
    \ {\n                min_positive = Some(x);\n            } else {\n         \
    \       min_positive = Some(std::cmp::min(min_positive.unwrap(), x));\n      \
    \      }\n        }\n    }\n    (max_negative, min_positive)", "    let mut largest\
    \ = Some(0);\n    let mut smallest = Some(0);\n    for x in lst {\n        if\
    \ x < 0 {\n            largest = Some(x);\n        } else if x > 0 {\n       \
    \     smallest = Some(x);\n        }\n    }\n    (largest, smallest)", "    let\
    \ mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for\
    \ x in lst {\n        if x < min_val {\n            min_val = x;\n        }\n\
    \        if x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut min_val =\
    \ std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n \
    \       if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut max_val = lst.iter().max().unwrap();\n    let mut min_val = lst.iter().min().unwrap();\n\
    \    (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut max_val =\
    \ Some(0);\n    let mut min_val = Some(0);\n    for x in lst {\n        if x <\
    \ 0 {\n            max_val = Some(x);\n        } else {\n            min_val =\
    \ Some(x);\n        }\n    }\n    (max_val, min_val)", "    let mut largest =\
    \ None;\n    let mut smallest = None;\n    for x in lst {\n        if x < 0 {\n\
    \            if smallest == None {\n                smallest = Some(x);\n    \
    \        } else {\n                largest = Some(x);\n            }\n       \
    \ } else {\n            if largest == None {\n                largest = Some(x);\n\
    \            } else {\n                if x > largest {\n                    largest\
    \ = Some(x);\n                }\n            }\n        }\n    }\n    (largest,\
    \ smallest)", "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n\
    \    for v in lst {\n        if v < min_val {\n            min_val = v;\n    \
    \    }\n        if v > max_val {\n            max_val = v;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for v in lst {\n        if v < min_val\
    \ {\n            min_val = v;\n        }\n        if v > max_val {\n         \
    \   max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for x in lst\
    \ {\n        if x > max_val {\n            max_val = Some(x);\n        } else\
    \ if x < min_val {\n            min_val = Some(x);\n        }\n    }\n    (max_val,\
    \ min_val)", "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n\
    \    for elt in lst {\n        if elt < min_val {\n            min_val = elt;\n\
    \        }\n        if elt > max_val {\n            max_val = elt;\n        }\n\
    \    }\n    (Some(min_val), Some(max_val))", "    let mut largest = None;\n  \
    \  let mut smallest = None;\n    for x in lst {\n        if x < 0 {\n        \
    \    if smallest == None {\n                smallest = Some(x);\n            }\
    \ else {\n                smallest = Some(std::cmp::min(smallest, x));\n     \
    \       }\n        } else {\n            if largest == None {\n              \
    \  largest = Some(x);\n            } else {\n                largest = Some(std::cmp::max(largest,\
    \ x));\n            }\n        }\n    }\n    (largest, smallest)", "    let mut\
    \ min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in lst {\n \
    \       if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = Some(std::i32::MAX);\n    let mut max_val = Some(std::i32::MIN);\n\
    \    for x in lst {\n        if x < min_val.unwrap() {\n            min_val =\
    \ Some(x);\n        }\n        if x > max_val.unwrap() {\n            max_val\
    \ = Some(x);\n        }\n    }\n    (min_val, max_val)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut largest = Some(0);\n    let mut smallest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            largest = Some(x);\n        } else {\n  \
    \          smallest = Some(x);\n        }\n    }\n    (largest, smallest)", " \
    \   let mut largest = None;\n    let mut smallest = None;\n    for x in lst {\n\
    \        if x < 0 {\n            if smallest == None {\n                smallest\
    \ = Some(x);\n            } else {\n                smallest = Some(std::cmp::min(smallest,\
    \ x));\n            }\n        } else {\n            if largest == None {\n  \
    \              largest = Some(x);\n            } else {\n                largest\
    \ = Some(std::cmp::max(largest, x));\n            }\n        }\n    }\n    (largest,\
    \ smallest)", "    let mut max_val = Some(0);\n    let mut min_val = Some(0);\n\
    \    for x in lst {\n        if x < 0 {\n            max_val = Some(max_val.unwrap());\n\
    \        } else {\n            min_val = Some(min_val.unwrap());\n        }\n\
    \    }\n    (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n    let\
    \ mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n\
    \            min_val = x;\n        }\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut max_negative\
    \ = None;\n    let mut min_positive = None;\n    for x in lst {\n        if x\
    \ < 0 {\n            if max_negative.is_none() {\n                max_negative\
    \ = Some(x);\n            } else {\n                max_negative = Some(std::cmp::max(max_negative.unwrap(),\
    \ x));\n            }\n        } else {\n            if min_positive.is_none()\
    \ {\n                min_positive = Some(x);\n            } else {\n         \
    \       min_positive = Some(std::cmp::min(min_positive.unwrap(), x));\n      \
    \      }\n        }\n    }\n    (max_negative, min_positive)", "    let mut smallest\
    \ = Some(std::i32::MAX);\n    let mut largest = Some(std::i32::MIN);\n    for\
    \ x in lst {\n        if x < smallest {\n            smallest = Some(x);\n   \
    \     }\n        if x > largest {\n            largest = Some(x);\n        }\n\
    \    }\n    (smallest, largest)", "    let mut min_val = std::i32::MAX;\n    let\
    \ mut max_val = std::i32::MIN;\n    for elt in lst {\n        if elt < min_val\
    \ {\n            min_val = elt;\n        }\n        if elt > max_val {\n     \
    \       max_val = elt;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut smallest = Some(std::i32::MAX);\n    let mut largest = Some(std::i32::MIN);\n\
    \    for x in lst {\n        if x < smallest {\n            smallest = Some(x);\n\
    \        }\n        if x > largest {\n            largest = Some(x);\n       \
    \ }\n    }\n    (smallest, largest)", "    let mut max_negative = None;\n    let\
    \ mut min_positive = None;\n    for x in lst {\n        if x < 0 {\n         \
    \   if max_negative.is_none() {\n                max_negative = Some(x);\n   \
    \         } else {\n                max_negative = Some(std::cmp::max(max_negative.unwrap(),\
    \ x));\n            }\n        } else {\n            if min_positive.is_none()\
    \ {\n                min_positive = Some(x);\n            } else {\n         \
    \       min_positive = Some(std::cmp::min(min_positive.unwrap(), x));\n      \
    \      }\n        }\n    }\n    (max_negative, min_positive)", "    let mut min_val\
    \ = i32::MAX;\n    let mut max_val = i32::MIN;\n    for v in lst {\n        if\
    \ v < min_val {\n            min_val = v;\n        }\n        if v > max_val {\n\
    \            max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n \
    \   let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut max_negative = None;\n    let\
    \ mut min_positive = None;\n    for x in lst {\n        if x < 0 {\n         \
    \   if max_negative.is_none() {\n                max_negative = Some(x);\n   \
    \         } else {\n                max_negative = Some(std::cmp::max(max_negative.unwrap(),\
    \ x));\n            }\n        } else {\n            if min_positive.is_none()\
    \ {\n                min_positive = Some(x);\n            } else {\n         \
    \       min_positive = Some(std::cmp::min(min_positive.unwrap(), x));\n      \
    \      }\n        }\n    }\n    (max_negative, min_positive)", "    let mut max_val\
    \ = Some(0);\n    let mut min_val = Some(0);\n    for v in lst {\n        if v\
    \ < 0 {\n            max_val = Some(std::cmp::max(v, max_val));\n        } else\
    \ {\n            min_val = Some(std::cmp::min(v, min_val));\n        }\n    }\n\
    \    (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut largest =\
    \ Some(0);\n    let mut smallest = Some(0);\n    for x in lst {\n        if x\
    \ < 0 {\n            largest = Some(x);\n        } else {\n            smallest\
    \ = Some(x);\n        }\n    }\n    (largest, smallest)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n \
    \   let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut largest = Some(0);\n    let mut smallest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            largest = Some(x);\n        } else {\n  \
    \          smallest = Some(x);\n        }\n    }\n    (largest, smallest)", " \
    \   let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for v in lst\
    \ {\n        if v < 0 {\n            max_val = Some(max_val.unwrap());\n     \
    \       min_val = Some(min_val.unwrap());\n        } else if v > 0 {\n       \
    \     max_val = Some(max_val.unwrap());\n        } else {\n            min_val\
    \ = Some(min_val.unwrap());\n        }\n    }\n    (max_val, min_val)", "    let\
    \ mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for x in lst {\n\
    \        if x < 0 {\n            max_val = Some(x);\n        } else if x > 0 {\n\
    \            min_val = Some(x);\n        }\n    }\n    (max_val, min_val)", " \
    \   let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n \
    \   for elt in lst {\n        if elt < min_val {\n            min_val = elt;\n\
    \        }\n        if elt > max_val {\n            max_val = elt;\n        }\n\
    \    }\n    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for v in lst {\n        if v < min_val\
    \ {\n            min_val = v;\n        }\n        if v > max_val {\n         \
    \   max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut largest = Some(0);\n    let mut\
    \ smallest = Some(0);\n    for x in lst {\n        if x < 0 {\n            largest\
    \ = Some(x);\n        } else {\n            smallest = Some(x);\n        }\n \
    \   }\n    (largest, smallest)", "    let mut min_val = std::i32::MAX;\n    let\
    \ mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n\
    \            min_val = x;\n        }\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut largest = Some(0);\n    let mut smallest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            largest = Some(x);\n        } else {\n  \
    \          smallest = Some(x);\n        }\n    }\n    (largest, smallest)", " \
    \   let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n \
    \   for x in lst {\n        if x < min_val {\n            min_val = x;\n     \
    \   }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for elt in lst {\n        if elt < min_val {\n            min_val = elt;\n \
    \       }\n        if elt > max_val {\n            max_val = elt;\n        }\n\
    \    }\n    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            max_val = Some(x);\n        } else if x >\
    \ 0 {\n            min_val = Some(x);\n        } else {\n            continue;\n\
    \        }\n    }\n    (max_val, min_val)", "    let mut max_val = Some(0);\n\
    \    let mut min_val = Some(0);\n    for v in lst {\n        if v < 0 {\n    \
    \        max_val = Some(max_val.unwrap());\n            min_val = Some(min_val.unwrap());\n\
    \        } else if v > 0 {\n            max_val = Some(max_val.unwrap());\n  \
    \      } else {\n            min_val = Some(min_val.unwrap());\n        }\n  \
    \  }\n    (max_val, min_val)", "    let mut largest = None;\n    let mut smallest\
    \ = None;\n    for x in lst {\n        if x < 0 {\n            if smallest ==\
    \ None {\n                smallest = Some(x);\n            } else {\n        \
    \        largest = Some(x);\n            }\n        } else {\n            if largest\
    \ == None {\n                largest = Some(x);\n            } else {\n      \
    \          if x > largest {\n                    largest = Some(x);\n        \
    \        }\n            }\n        }\n    }\n    (largest, smallest)", "    let\
    \ mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for\
    \ x in lst {\n        if x < min_val {\n            min_val = x;\n        }\n\
    \        if x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut max_val = Some(0);\n    let mut min_val = Some(0);\n\
    \    for x in lst {\n        if x > max_val {\n            max_val = Some(x);\n\
    \        } else if x < min_val {\n            min_val = Some(x);\n        }\n\
    \    }\n    (max_val, min_val)", "    let mut max_val = lst.iter().max().unwrap();\n\
    \    let mut min_val = lst.iter().min().unwrap();\n    if max_val < min_val {\n\
    \        (None, Some(min_val))\n    } else {\n        (Some(max_val), None)\n\
    \    }", "    let mut max_val = Some(0);\n    let mut min_val = Some(0);\n   \
    \ for x in lst {\n        if x < 0 {\n            max_val = Some(x);\n       \
    \ } else {\n            min_val = Some(x);\n        }\n    }\n    (max_val, min_val)",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n \
    \   let mut max_val = std::i32::MIN;\n    for v in lst {\n        if v < min_val\
    \ {\n            min_val = v;\n        }\n        if v > max_val {\n         \
    \   max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut smallest = Some(std::i32::MAX);\n\
    \    let mut largest = Some(std::i32::MIN);\n    for x in lst {\n        if x\
    \ < smallest {\n            smallest = Some(x);\n        }\n        if x > largest\
    \ {\n            largest = Some(x);\n        }\n    }\n    (smallest, largest)",
  "    let mut max_negative = None;\n    let mut min_positive = None;\n    for x in\
    \ lst {\n        if x < 0 {\n            if max_negative.is_none() {\n       \
    \         max_negative = Some(x);\n            } else {\n                max_negative\
    \ = Some(std::cmp::max(max_negative.unwrap(), x));\n            }\n        } else\
    \ {\n            if min_positive.is_none() {\n                min_positive = Some(x);\n\
    \            } else {\n                min_positive = Some(std::cmp::min(min_positive.unwrap(),\
    \ x));\n            }\n        }\n    }\n    (max_negative, min_positive)", " \
    \   let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n \
    \   for x in lst {\n        if x < min_val {\n            min_val = x;\n     \
    \   }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut smallest = Some(std::i32::MAX);\n\
    \    let mut largest = Some(std::i32::MIN);\n    for x in lst {\n        if x\
    \ < 0 {\n            smallest = Some(x);\n        } else if x > 0 {\n        \
    \    largest = Some(x);\n        }\n    }\n    (smallest, largest)", "    let\
    \ mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for\
    \ elt in lst {\n        if elt < min_val {\n            min_val = elt;\n     \
    \   }\n        if elt > max_val {\n            max_val = elt;\n        }\n   \
    \ }\n    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in lst\
    \ {\n        if x < min_val {\n            min_val = x;\n        }\n        if\
    \ x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n\
    \    for x in lst {\n        if x < min_val {\n            min_val = x;\n    \
    \    }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut max_negative = None;\n    let\
    \ mut min_positive = None;\n    for x in lst {\n        if x < 0 {\n         \
    \   if max_negative.is_none() {\n                max_negative = Some(x);\n   \
    \         } else {\n                max_negative = Some(std::cmp::max(max_negative.unwrap(),\
    \ x));\n            }\n        } else {\n            if min_positive.is_none()\
    \ {\n                min_positive = Some(x);\n            } else {\n         \
    \       min_positive = Some(std::cmp::min(min_positive.unwrap(), x));\n      \
    \      }\n        }\n    }\n    (max_negative, min_positive)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut max_negative = None;\n    let\
    \ mut min_positive = None;\n    for x in lst {\n        if x < 0 {\n         \
    \   if max_negative.is_none() {\n                max_negative = Some(x);\n   \
    \         } else {\n                max_negative = Some(max_negative.max());\n\
    \            }\n        } else {\n            if min_positive.is_none() {\n  \
    \              min_positive = Some(x);\n            } else {\n               \
    \ min_positive = Some(min_positive.min());\n            }\n        }\n    }\n\
    \    (max_negative, min_positive)", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut largest = None;\n    let mut smallest = None;\n    for x in lst {\n\
    \        if x < 0 {\n            if smallest == None {\n                smallest\
    \ = Some(x);\n            } else {\n                smallest = Some(std::cmp::min(smallest,\
    \ x));\n            }\n        } else {\n            if largest == None {\n  \
    \              largest = Some(x);\n            } else {\n                largest\
    \ = Some(std::cmp::max(largest, x));\n            }\n        }\n    }\n    (largest,\
    \ smallest)", "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n\
    \    for x in lst {\n        if x < min_val {\n            min_val = x;\n    \
    \    }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut largest = Some(0);\n    let mut smallest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            largest = Some(std::cmp::max(largest, Some(x)));\n\
    \        } else {\n            smallest = Some(std::cmp::min(smallest, Some(x)));\n\
    \        }\n    }\n    (largest, smallest)", "    let mut largest = Some(0);\n\
    \    let mut smallest = Some(0);\n    for x in lst {\n        if x < 0 {\n   \
    \         largest = Some(x);\n        } else {\n            smallest = Some(x);\n\
    \        }\n    }\n    (largest, smallest)", "    let mut smallest = Some(std::i32::MAX);\n\
    \    let mut largest = Some(std::i32::MIN);\n    for x in lst {\n        if x\
    \ < smallest {\n            smallest = Some(x);\n        }\n        if x > largest\
    \ {\n            largest = Some(x);\n        }\n    }\n    (smallest, largest)",
  "    let mut largest = Some(0);\n    let mut smallest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            largest = Some(x);\n        } else {\n  \
    \          smallest = Some(x);\n        }\n    }\n    (largest, smallest)", " \
    \   let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n \
    \   for x in lst {\n        if x < min_val {\n            min_val = x;\n     \
    \   }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut max_negative = None;\n    let mut min_positive = None;\n    for x in\
    \ lst {\n        if x < 0 {\n            if max_negative.is_none() {\n       \
    \         max_negative = Some(x);\n            } else {\n                max_negative\
    \ = Some(std::cmp::max(max_negative.unwrap(), x));\n            }\n        } else\
    \ {\n            if min_positive.is_none() {\n                min_positive = Some(x);\n\
    \            } else {\n                min_positive = Some(std::cmp::min(min_positive.unwrap(),\
    \ x));\n            }\n        }\n    }\n    (max_negative, min_positive)", " \
    \   let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in\
    \ lst {\n        if x < min_val {\n            min_val = x;\n        }\n     \
    \   if x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut min_val =\
    \ i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in lst {\n        if x\
    \ < min_val {\n            min_val = x;\n        }\n        if x > max_val {\n\
    \            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut largest = None;\n    let mut\
    \ smallest = None;\n    for x in lst {\n        if x < 0 {\n            if smallest\
    \ == None {\n                smallest = Some(x);\n            } else {\n     \
    \           smallest = Some(std::cmp::min(smallest, x));\n            }\n    \
    \    } else {\n            if largest == None {\n                largest = Some(x);\n\
    \            } else {\n                largest = Some(std::cmp::max(largest, x));\n\
    \            }\n        }\n    }\n    (largest, smallest)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for v in lst\
    \ {\n        if v < 0 {\n            max_val = Some(v);\n        } else if v >\
    \ 0 {\n            min_val = Some(v);\n        }\n    }\n    (max_val, min_val)",
  "    let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for v in lst\
    \ {\n        if v < 0 {\n            max_val = Some(std::cmp::max(v, max_val));\n\
    \        } else {\n            min_val = Some(std::cmp::min(v, min_val));\n  \
    \      }\n    }\n    (max_val, min_val)", "    let mut largest = Some(0);\n  \
    \  let mut smallest = Some(0);\n    for x in lst {\n        if x < 0 {\n     \
    \       largest = Some(x);\n        } else {\n            smallest = Some(x);\n\
    \        }\n    }\n    (largest, smallest)", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for elt in lst {\n        if elt <\
    \ min_val {\n            min_val = elt;\n        }\n        if elt > max_val {\n\
    \            max_val = elt;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut largest = None;\n    let mut smallest = None;\n    for x in lst {\n\
    \        if x < 0 {\n            if smallest == None {\n                smallest\
    \ = Some(x);\n            } else {\n                largest = Some(x);\n     \
    \       }\n        } else {\n            if largest == None {\n              \
    \  largest = Some(x);\n            } else {\n                if x > largest {\n\
    \                    largest = Some(x);\n                }\n            }\n  \
    \      }\n    }\n    (largest, smallest)", "    let mut max_val = Some(0);\n \
    \   let mut min_val = Some(0);\n    for x in lst {\n        if x < 0 {\n     \
    \       max_val = Some(x);\n        } else if x > 0 {\n            min_val = Some(x);\n\
    \        } else {\n            continue;\n        }\n    }\n    (max_val, min_val)",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut max_val = Some(0);\n    let\
    \ mut min_val = Some(0);\n    for x in lst {\n        if x < 0 {\n           \
    \ max_val = Some(x);\n        } else {\n            min_val = Some(x);\n     \
    \   }\n    }\n    (max_val, min_val)", "    let mut largest = None;\n    let mut\
    \ smallest = None;\n    for x in lst {\n        if x < 0 {\n            if smallest\
    \ == None {\n                smallest = Some(x);\n            } else {\n     \
    \           smallest = Some(std::cmp::min(smallest, x));\n            }\n    \
    \    } else {\n            if largest == None {\n                largest = Some(x);\n\
    \            } else {\n                largest = Some(std::cmp::max(largest, x));\n\
    \            }\n        }\n    }\n    (largest, smallest)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut largest = Some(0);\n    let mut smallest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            largest = Some(x);\n        } else {\n  \
    \          smallest = Some(x);\n        }\n    }\n    (largest, smallest)", " \
    \   let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n \
    \   for x in lst {\n        if x < min_val {\n            min_val = x;\n     \
    \   }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut max_val = std::i32::MAX;\n\
    \    let mut min_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(max_val), Some(min_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = i32::MAX;\n    let\
    \ mut max_val = i32::MIN;\n    for x in lst {\n        if x < min_val {\n    \
    \        min_val = x;\n        }\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut smallest\
    \ = Some(0);\n    let mut largest = Some(0);\n    for x in lst {\n        if x\
    \ < 0 {\n            smallest = Some(std::cmp::min(smallest, x));\n        } else\
    \ {\n            largest = Some(std::cmp::max(largest, x));\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_val = std::i32::MAX;\n    let mut\
    \ max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n   \
    \         min_val = x;\n        }\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut largest\
    \ = None;\n    let mut smallest = None;\n    for x in lst {\n        if x < 0\
    \ {\n            largest = Some(x);\n        } else {\n            smallest =\
    \ Some(x);\n        }\n    }\n    (largest, smallest)", "    let mut min_val =\
    \ std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n \
    \       if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut smallest = Some(0);\n    let\
    \ mut largest = Some(0);\n    for x in lst {\n        if x < 0 {\n           \
    \ smallest = Some(std::cmp::min(smallest, x));\n        } else {\n           \
    \ largest = Some(std::cmp::max(largest, x));\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut max_negative = None;\n    let mut min_positive = None;\n\
    \    for x in lst {\n        if x < 0 {\n            if max_negative.is_none()\
    \ {\n                max_negative = Some(x);\n            } else {\n         \
    \       max_negative = Some(std::cmp::max(max_negative.unwrap(), x));\n      \
    \      }\n        } else {\n            if min_positive.is_none() {\n        \
    \        min_positive = Some(x);\n            } else {\n                min_positive\
    \ = Some(std::cmp::min(min_positive.unwrap(), x));\n            }\n        }\n\
    \    }\n    (max_negative, min_positive)", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for elt in\
    \ lst {\n        if elt < min_val {\n            min_val = elt;\n        }\n \
    \       if elt > max_val {\n            max_val = elt;\n        }\n    }\n   \
    \ (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n   \
    \ let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in lst\
    \ {\n        if x < min_val {\n            min_val = x;\n        }\n        if\
    \ x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut max_val = Some(0);\n    let mut min_val = Some(0);\n\
    \    for x in lst {\n        if x < 0 {\n            max_val = Some(x);\n    \
    \    } else if x > 0 {\n            min_val = Some(x);\n        }\n    }\n   \
    \ (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for v in lst {\n        if v < min_val {\n           \
    \ min_val = v;\n        }\n        if v > max_val {\n            max_val = v;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut min_val =\
    \ std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n \
    \       if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut max_val = Some(0);\n    let\
    \ mut min_val = Some(0);\n    for x in lst {\n        if x < 0 {\n           \
    \ max_val = Some(max_val.unwrap());\n        } else {\n            min_val = Some(min_val.unwrap());\n\
    \        }\n    }\n    (max_val, min_val)", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for i in lst\
    \ {\n        if i < min_val {\n            min_val = i;\n        }\n        if\
    \ i > max_val {\n            max_val = i;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut max_val = Some(0);\n    let mut min_val = Some(0);\n\
    \    for x in lst {\n        if x < 0 {\n            max_val = Some(x);\n    \
    \    } else if x > 0 {\n            min_val = Some(x);\n        } else {\n   \
    \         continue;\n        }\n    }\n    (max_val, min_val)", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for v in lst {\n\
    \        if v < min_val {\n            min_val = v;\n        }\n        if v >\
    \ max_val {\n            max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut largest = Some(0);\n    let mut smallest = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            largest = Some(x);\n        } else {\n  \
    \          smallest = Some(x);\n        }\n    }\n    (largest, smallest)", " \
    \   let mut max_negative = None;\n    let mut min_positive = None;\n    for x\
    \ in lst {\n        if x < 0 {\n            if max_negative.is_none() {\n    \
    \            max_negative = Some(x);\n            } else {\n                max_negative\
    \ = Some(std::cmp::max(max_negative.unwrap(), x));\n            }\n        } else\
    \ {\n            if min_positive.is_none() {\n                min_positive = Some(x);\n\
    \            } else {\n                min_positive = Some(std::cmp::min(min_positive.unwrap(),\
    \ x));\n            }\n        }\n    }\n    (max_negative, min_positive)", " \
    \   let mut max_val = Some(0);\n    let mut min_val = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            max_val = Some(x);\n        } else {\n  \
    \          min_val = Some(x);\n        }\n    }\n    (max_val, min_val)", "  \
    \  let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut largest = None;\n    let mut\
    \ smallest = None;\n    for x in lst {\n        if x < 0 {\n            largest\
    \ = Some(x);\n        } else if x > 0 {\n            smallest = Some(x);\n   \
    \     }\n    }\n    (largest, smallest)", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for elt in lst {\n        if elt < min_val\
    \ {\n            min_val = elt;\n        }\n        if elt > max_val {\n     \
    \       max_val = elt;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = Some(0);\n    let mut max_val = Some(0);\n    for x in lst\
    \ {\n        if x < 0 {\n            min_val = Some(x);\n        } else {\n  \
    \          max_val = Some(x);\n        }\n    }\n    (min_val, max_val)"]
stop_tokens:
- "\n}"
