name: HumanEval_68_pluck
language: rust
prompt: "/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// Input: [4,2,3]\n/// Output: [2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// Input: [1,2,3]\n/// Output: [2, 1]\n/// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index. \n/// Example 3:\n/// Input: []\n/// Output:\
  \ []\n/// Example 4:\n/// Input: [5, 0, 3, 0, 4, 2]\n/// Output: [0, 1]\n/// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
  \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
  \ <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4,\
  \ 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n\
  \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
  \ 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]),\
  \ vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n  \
  \  assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7,\
  \ 9, 7, 1]), Vec::<isize>::new());\n}\n"
completions: ["    let mut even_values = Vec::new();\n    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    even_values.remove(&smallest_even_value);\n    even_values.remove(&smallest_even_index);\n\
    \    even_values.sort();\n    let mut result = vec![];\n    for &i in even_values\
    \ {\n        result.push(i);\n    }\n    result.push(smallest_value);\n    result.push(smallest_index);\n\
    \    result", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n   \
    \ let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n\
    \    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 =\
    \ 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n            if i < smallest_value {\n         \
    \       smallest_value = i;\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    even_values.remove(&mut smallest_even_index);\n    even_values.sort();\n\
    \    even_values.insert(0, smallest_even_value);\n    even_values", "    let mut\
    \ min_even = std::i32::MAX;\n    let mut min_even_index = 0;\n    let mut min_even_value\
    \ = std::i32::MAX;\n    for &i in arr {\n        if i % 2 == 0 {\n           \
    \ if min_even_value < i {\n                min_even_value = i;\n             \
    \   min_even_index = i;\n            }\n        }\n    }\n    let mut result =\
    \ vec![];\n    if min_even_value == std::i32::MAX {\n        return result;\n\
    \    }\n    for i in arr {\n        if i % 2 == 0 {\n            if min_even_value\
    \ == i {\n                result.push(min_even_index);\n            }\n      \
    \  }\n    }\n    result", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in even_values.iter() {\n        if i %\
    \ 2 == 0 {\n            if i < smallest_even_value {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \   }\n    let mut result = vec![];\n    for i in arr.iter() {\n        if i ==\
    \ smallest_value {\n            result.push(smallest_even_index);\n        }\n\
    \    }\n    result", "    let mut even_values = vec![0; arr.len()];\n    let mut\
    \ min_value = arr[0];\n    let mut min_value_index = -1;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values[i] = arr[i];\n    \
    \        if arr[i] < min_value {\n                min_value = arr[i];\n      \
    \          min_value_index = i;\n            }\n        }\n    }\n    if min_value_index\
    \ == -1 {\n        return vec![];\n    }\n    let mut result = vec![];\n    for\
    \ i in 0..arr.len() {\n        if even_values[i] == min_value {\n            result.push(i);\n\
    \        }\n    }\n    result", "    let mut even_values = vec![];\n    let mut\
    \ min_value = arr[0];\n    let mut min_index = -1;\n    for &i in arr {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_index = i;\n        \
    \    }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_value = even_values[0];\n    let mut smallest_index\
    \ = -1;\n    for &i in even_values {\n        if i < smallest_value {\n      \
    \      smallest_value = i;\n            smallest_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    if min_index == -1 {\n        return vec![];\n\
    \    }\n    for i in 0..arr.len() {\n        if i != min_index {\n           \
    \ result.push(i);\n        }\n    }\n    result", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i % 2 == 0 {\n            if i < smallest_even_value {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \        }\n        }\n    }\n    vec![smallest_value, smallest_even_index]",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx = i;\n            }\n        } else {\n            if min_value < i\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \  }\n        }\n    }\n    if min_idx == -1 {\n        return vec![];\n    }\n\
    \    let mut result = vec![];\n    for i in 0..arr.len() {\n        if i == min_idx\
    \ {\n            result.push(min_value);\n        } else {\n            result.push(i);\n\
    \        }\n    }\n    result", "    let mut even_values = vec![0; arr.len()];\n\
    \    let mut min_value = arr[0];\n    let mut min_value_index = 0;\n    let mut\
    \ min_value_even_value = 0;\n    let mut min_value_even_value_index = 0;\n   \
    \ for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values[i]\
    \ = arr[i];\n            if even_values[i] < min_value {\n                min_value\
    \ = even_values[i];\n                min_value_index = i;\n                min_value_even_value\
    \ = even_values[i];\n                min_value_even_value_index = i;\n       \
    \     }\n        } else {\n            if even_values[min_value_even_value_index]\
    \ < min_value {\n                min_value = even_values[min_value_even_value_index];\n\
    \                min_value_index = min_value_even_value_index;\n             \
    \   min_value_even_value = even_values[min_value_even_value_index];\n        \
    \        min_value_even_value_index = min_value_even_value_index;\n          \
    \  }\n        }\n    }\n    if min_value_even_value_index == min_value_index {\n\
    \        return vec![];\n    }\n    let mut result = vec![min_value];\n    for\
    \ i in 0..min_value_index {\n        result.push(i);\n    }\n    for i in min_value_index..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            result.push(i);\n        }\n  \
    \  }\n    result", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n\
    \    for i in 0..arr.len() {\n        if arr[i] < min_value {\n            min_value\
    \ = arr[i];\n            min_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![min_value, min_idx];\n    for i in 1..arr.len() {\n        if arr[i] <\
    \ min_value {\n            result.swap(0, i);\n        }\n    }\n    result",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut even_values = false;\n    for &i in arr {\n        if i % 2 == 0 {\n   \
    \         even_values = true;\n        }\n        if i == smallest_value {\n \
    \           smallest_index = i;\n        }\n        if even_values {\n       \
    \     if i < smallest_value {\n                smallest_value = i;\n         \
    \       smallest_index = i;\n            }\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    let mut result = vec![min_value, min_idx];\n    for &i\
    \ in arr {\n        if i % 2 == 0 {\n            if min_value == i {\n       \
    \         result.push(min_idx);\n            }\n        }\n    }\n    result",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    let mut smallest_even_value = 0;\n    for\
    \ &value in arr {\n        if value % 2 == 0 {\n            even_values.push(value);\n\
    \        }\n        if value < smallest_value {\n            smallest_value =\
    \ value;\n            smallest_index = arr.iter().position(|&x| x == smallest_value);\n\
    \        }\n        if value == smallest_value {\n            smallest_even_value\
    \ = value;\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_values.len() == 2 {\n        if even_values[0] < even_values[1]\
    \ {\n            return vec![smallest_even_value];\n        }\n        return\
    \ vec![smallest_even_value];\n    }\n    if even_values.len() == 3 {\n       \
    \ if even_values[0] < even_values[1] {\n            if even_values[0] < even_values[2]\
    \ {\n                return vec![smallest_even_value];\n            }\n      \
    \      return vec![smallest_even_value];\n        }\n        if even_values[1]\
    \ < even_values[2] {\n            return vec![smallest_even_value];\n        }\n\
    \        return vec![smallest_even_value];\n    }\n    if even_values.len() ==\
    \ 4 {\n        if even_values[0] < even_values[1] {\n            if even_values[0]\
    \ < even_values[2] {\n                if even_values[0] < even_values[3] {\n \
    \                   return vec![smallest_even_value];\n                }\n   \
    \             return vec![smallest_even_value];\n            }\n            if\
    \ even_values[1] < even_values[3] {\n                return vec![smallest_even_value];\n\
    \            }\n            return vec![smallest_even_value];\n        }\n   \
    \     if even_values[1] < even_values[2] {\n            if even_values[1] < even_values[3]\
    \ {\n                return vec![smallest_even_value];\n            }\n      \
    \      return vec![smallest_even_value];\n        }\n        if even_values[2]\
    \ < even_values[3] {\n            return vec![smallest_even_value];\n        }\n\
    \        return vec![smallest_even_value];\n    }\n    if even_values.len() ==\
    \ 5 {\n        if even_values[0] < even_values[1] {\n            if even_values[0]\
    \ < even_values[2] {\n                if even_values[0] < even_values[3] {\n \
    \                   if even_values[0] < even_values[4] {\n                   \
    \     return vec![smallest_even_value];\n                    }\n             \
    \       return vec![smallest_even_value];\n                }\n               \
    \ if even_values[1] < ", "    let mut even_values = vec![0; arr.len()];\n    let\
    \ mut smallest_value = vec![0; arr.len()];\n    let mut smallest_index = vec![0;\
    \ arr.len()];\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n   \
    \         even_values[i] = arr[i];\n            smallest_value[i] = arr[i];\n\
    \            smallest_index[i] = i;\n        } else {\n            if even_values[i]\
    \ < arr[i] {\n                even_values[i] = arr[i];\n                smallest_value[i]\
    \ = arr[i];\n                smallest_index[i] = i;\n            }\n        }\n\
    \    }\n    if even_values.iter().any(|&x| x == 0) {\n        return vec![];\n\
    \    }\n    let mut smallest_value_iter = smallest_value.iter();\n    let mut\
    \ smallest_index_iter = smallest_index.iter();\n    let mut even_values_iter =\
    \ even_values.iter();\n    let mut even_values_iter = even_values.iter();\n  \
    \  let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values.push(i);\n            if arr[i] < smallest_value {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    even_values.sort();\n    let mut result = vec![];\n\
    \    for i in even_values {\n        let mut index = i;\n        while index >\
    \ 0 {\n            if arr[index] % 2 == 0 {\n                result.push(i);\n\
    \                break;\n            }\n            index -= 1;\n        }\n \
    \   }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    if smallest_even_index ==\
    \ 0 {\n        result.push(smallest_value);\n        result.push(smallest_index);\n\
    \    } else {\n        result.push(smallest_even_value);\n        result.push(smallest_even_index);\n\
    \    }\n    return result;", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_index2\
    \ = 0;\n    let mut smallest_index3 = 0;\n    let mut smallest_index4 = 0;\n \
    \   let mut smallest_index5 = 0;\n    let mut smallest_index6 = 0;\n    let mut\
    \ smallest_index7 = 0;\n    let mut smallest_index8 = 0;\n    let mut smallest_index9\
    \ = 0;\n    let mut smallest_index10 = 0;\n    let mut smallest_index11 = 0;\n\
    \    let mut smallest_index12 = 0;\n    let mut smallest_index13 = 0;\n    let\
    \ mut smallest_index14 = 0;\n    let mut smallest_index15 = 0;\n    let mut smallest_index16\
    \ = 0;\n    let mut smallest_index17 = 0;\n    let mut smallest_index18 = 0;\n\
    \    let mut smallest_index19 = 0;\n    let mut smallest_index20 = 0;\n    let\
    \ mut smallest_index21 = 0;\n    let mut smallest_index22 = 0;\n    let mut smallest_index23\
    \ = 0;\n    let mut smallest_index24 = 0;\n    let mut smallest_index25 = 0;\n\
    \    let mut smallest_index26 = 0;\n    let mut smallest_index27 = 0;\n    let\
    \ mut smallest_index28 = 0;\n    let mut smallest_index29 = 0;\n    let mut smallest_index30\
    \ = 0;\n    let mut smallest_index31 = 0;\n    let mut smallest_index32 = 0;\n\
    \    let mut smallest_index33 = 0;\n    let mut smallest_index34 = 0;\n    let\
    \ mut smallest_index35 = 0;\n    let mut smallest_index36 = 0;\n    let mut smallest_index37\
    \ = 0;\n    let mut smallest_index38 = 0;\n    let mut smallest_index39 = 0;\n\
    \    let mut smallest_index40 = 0;\n    let mut smallest_index41 = 0;\n    let\
    \ mut smallest_index42 = 0;\n    let mut smallest_index43 = 0;\n    let mut smallest_index44\
    \ = 0;\n    let mut smallest_index45 = 0;\n    let mut smallest_index46 = 0;\n\
    \    let mut smallest_index47 = 0;\n    let mut smallest_index48 = 0;\n    let\
    \ mut smallest_index49 = 0;\n    let mut smallest_index50 = 0;\n    let mut smallest_index51\
    \ = 0;\n    let mut smallest_index52 = 0;\n    let mut smallest_index53 = 0;\n\
    \    let mut smallest_index54 = 0;\n    let mut smallest_index55 = 0;\n    let\
    \ mu", "    let mut min_val = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2\
    \ = 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n    let mut min_idx5\
    \ = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n    let mut min_idx8\
    \ = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11\
    \ = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14\
    \ = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17\
    \ = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20\
    \ = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23\
    \ = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26\
    \ = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29\
    \ = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32\
    \ = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35\
    \ = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38\
    \ = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41\
    \ = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44\
    \ = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47\
    \ = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50\
    \ = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53\
    \ = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56\
    \ = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59\
    \ = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61 = 1;\n    let mut min_idx62\
    \ = 1;\n    let mut min_idx", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    let mut min_idx2 = -1;\n    let mut min_idx3 = -1;\n    let mut min_idx4\
    \ = -1;\n    let mut min_idx5 = -1;\n    let mut min_idx6 = -1;\n    let mut min_idx7\
    \ = -1;\n    let mut min_idx8 = -1;\n    let mut min_idx9 = -1;\n    let mut min_idx10\
    \ = -1;\n    let mut min_idx11 = -1;\n    let mut min_idx12 = -1;\n    let mut\
    \ min_idx13 = -1;\n    let mut min_idx14 = -1;\n    let mut min_idx15 = -1;\n\
    \    let mut min_idx16 = -1;\n    let mut min_idx17 = -1;\n    let mut min_idx18\
    \ = -1;\n    let mut min_idx19 = -1;\n    let mut min_idx20 = -1;\n    let mut\
    \ min_idx21 = -1;\n    let mut min_idx22 = -1;\n    let mut min_idx23 = -1;\n\
    \    let mut min_idx24 = -1;\n    let mut min_idx25 = -1;\n    let mut min_idx26\
    \ = -1;\n    let mut min_idx27 = -1;\n    let mut min_idx28 = -1;\n    let mut\
    \ min_idx29 = -1;\n    let mut min_idx30 = -1;\n    let mut min_idx31 = -1;\n\
    \    let mut min_idx32 = -1;\n    let mut min_idx33 = -1;\n    let mut min_idx34\
    \ = -1;\n    let mut min_idx35 = -1;\n    let mut min_idx36 = -1;\n    let mut\
    \ min_idx37 = -1;\n    let mut min_idx38 = -1;\n    let mut min_idx39 = -1;\n\
    \    let mut min_idx40 = -1;\n    let mut min_idx41 = -1;\n    let mut min_idx42\
    \ = -1;\n    let mut min_idx43 = -1;\n    let mut min_idx44 = -1;\n    let mut\
    \ min_idx45 = -1;\n    let mut min_idx46 = -1;\n    let mut min_idx47 = -1;\n\
    \    let mut min_idx48 = -1;\n    let mut min_idx49 = -1;\n    let mut min_idx50\
    \ = -1;\n    let mut min_idx51 = -1;\n    let mut min_idx52 = -1;\n    let mut\
    \ min_idx53 = -1;\n    let mut min_idx54 = -1;\n    let mut min_idx55 = -1;\n\
    \    let mut min_idx56 = -1;\n    let mut min_idx57 = -1;\n    let mut min_",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx\
    \ = arr.iter().min_by_key(|x| {\n        if x % 2 == 0 {\n            min_value\
    \ = x;\n            min_idx = x;\n            true\n        } else {\n       \
    \     false\n        }\n    });\n    min_idx", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_even_indexes\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            if\
    \ smallest_even_value == i {\n                smallest_even_indexes.push(smallest_even_index);\n\
    \                smallest_even_index = i;\n            } else {\n            \
    \    smallest_even_index = i;\n            }\n        }\n    }\n    smallest_even_indexes.push(smallest_even_index);\n\
    \    smallest_even_indexes", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n   \
    \         if arr[i] < smallest_value {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = 0;\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in 0..even_values.len() {\n        if\
    \ i == smallest_even_index {\n            result.push(smallest_value);\n     \
    \   } else {\n            result.push(even_values[i]);\n        }\n    }\n   \
    \ result", "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n    let\
    \ mut min_idx2 = 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n  \
    \  let mut min_idx5 = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n\
    \    let mut min_idx8 = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10 =\
    \ 1;\n    let mut min_idx11 = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13\
    \ = 1;\n    let mut min_idx14 = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16\
    \ = 1;\n    let mut min_idx17 = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19\
    \ = 1;\n    let mut min_idx20 = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22\
    \ = 1;\n    let mut min_idx23 = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25\
    \ = 1;\n    let mut min_idx26 = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28\
    \ = 1;\n    let mut min_idx29 = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31\
    \ = 1;\n    let mut min_idx32 = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34\
    \ = 1;\n    let mut min_idx35 = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37\
    \ = 1;\n    let mut min_idx38 = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40\
    \ = 1;\n    let mut min_idx41 = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43\
    \ = 1;\n    let mut min_idx44 = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46\
    \ = 1;\n    let mut min_idx47 = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49\
    \ = 1;\n    let mut min_idx50 = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52\
    \ = 1;\n    let mut min_idx53 = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55\
    \ = 1;\n    let mut min_idx56 = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58\
    \ = 1;\n    let mut min_idx59 = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61\
    \ = 1;\n    let mut min_idx62 = 1;\n    let mut min_idx", "    let mut even_values\
    \ = vec![];\n    let mut min_value = arr[0];\n    let mut min_index = -1;\n  \
    \  for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = -1;\n    for i in even_values {\n        if i <\
    \ smallest_value {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = -1;\n\
    \    let mut min_idx3 = -1;\n    let mut min_idx4 = -1;\n    let mut min_idx5\
    \ = -1;\n    let mut min_idx6 = -1;\n    let mut min_idx7 = -1;\n    let mut min_idx8\
    \ = -1;\n    let mut min_idx9 = -1;\n    let mut min_idx10 = -1;\n    let mut\
    \ min_idx11 = -1;\n    let mut min_idx12 = -1;\n    let mut min_idx13 = -1;\n\
    \    let mut min_idx14 = -1;\n    let mut min_idx15 = -1;\n    let mut min_idx16\
    \ = -1;\n    let mut min_idx17 = -1;\n    let mut min_idx18 = -1;\n    let mut\
    \ min_idx19 = -1;\n    let mut min_idx20 = -1;\n    let mut min_idx21 = -1;\n\
    \    let mut min_idx22 = -1;\n    let mut min_idx23 = -1;\n    let mut min_idx24\
    \ = -1;\n    let mut min_idx25 = -1;\n    let mut min_idx26 = -1;\n    let mut\
    \ min_idx27 = -1;\n    let mut min_idx28 = -1;\n    let mut min_idx29 = -1;\n\
    \    let mut min_idx30 = -1;\n    let mut min_idx31 = -1;\n    let mut min_idx32\
    \ = -1;\n    let mut min_idx33 = -1;\n    let mut min_idx34 = -1;\n    let mut\
    \ min_idx35 = -1;\n    let mut min_idx36 = -1;\n    let mut min_idx37 = -1;\n\
    \    let mut min_idx38 = -1;\n    let mut min_idx39 = -1;\n    let mut min_idx40\
    \ = -1;\n    let mut min_idx41 = -1;\n    let mut min_idx42 = -1;\n    let mut\
    \ min_idx43 = -1;\n    let mut min_idx44 = -1;\n    let mut min_idx45 = -1;\n\
    \    let mut min_idx46 = -1;\n    let mut min_idx47 = -1;\n    let mut min_idx48\
    \ = -1;\n    let mut min_idx49 = -1;\n    let mut min_idx50 = -1;\n    let mut\
    \ min_idx51 = -1;\n    let mut min_idx52 = -1;\n    let mut min_idx53 = -1;\n\
    \    let mut min_idx54 = -1;\n    let mut min_idx55 = -1;\n    let mut min_idx56\
    \ = -1;\n    let mut min_idx57 = -1;\n    let mut min_", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_index\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n            }\n        } else {\n            if smallest_index == -1 ||\
    \ smallest_even_value < i {\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    smallest_even_value += smallest_index;\n    smallest_even_value\
    \ += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n \
    \   smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value += smallest_even_index;\n\
    \    smallest_even_value += smallest_even_index;\n    smallest_even_value ", " \
    \   let mut even_values = vec![0; arr.len()];\n    let mut min_value = arr[0];\n\
    \    let mut min_value_index = 0;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            even_values[i] = 1;\n            if arr[i] < min_value\
    \ {\n                min_value = arr[i];\n                min_value_index = i;\n\
    \            }\n        } else {\n            even_values[i] = 0;\n        }\n\
    \    }\n    let mut result = vec![0; arr.len()];\n    for i in 0..arr.len() {\n\
    \        if even_values[i] == 1 {\n            result[min_value_index] = i;\n\
    \        }\n    }\n    result", "    let mut even_values = vec![];\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for &x in arr\
    \ {\n        if x % 2 == 0 {\n            even_values.push(x);\n            if\
    \ x < smallest_value {\n                smallest_value = x;\n                smallest_index\
    \ = even_values.len() - 1;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[smallest_index];\n\
    \    let mut smallest_even_index = smallest_index;\n    for &x in even_values\
    \ {\n        if x < smallest_even_value {\n            smallest_even_value = x;\n\
    \            smallest_even_index = even_values.len() - 1;\n        }\n    }\n\
    \    even_values.remove(&smallest_even_value);\n    even_values.sort();\n    let\
    \ mut result = vec![];\n    for &x in even_values {\n        result.push(x);\n\
    \    }\n    result", "    let mut even_values = vec![];\n    let mut min_value\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            even_values.push(i);\n            if i < min_value {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut min_even_value = even_values[even_values.len() - 1];\n    let\
    \ mut min_idx = -1;\n    for i in 0..even_values.len() {\n        if even_values[i]\
    \ < min_even_value {\n            min_even_value = even_values[i];\n         \
    \   min_idx = i;\n        }\n    }\n    let mut result = vec![];\n    for i in\
    \ 0..even_values.len() {\n        if even_values[i] == min_even_value {\n    \
    \        result.push(i);\n        }\n    }\n    if min_idx != -1 {\n        result.push(min_idx);\n\
    \    }\n    result", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_index_value\
    \ = arr[0];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_index_value < i {\n                smallest_index_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n      \
    \  if smallest_value < i {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    even_values.sort();\n    let mut even_values_index\
    \ = even_values.iter().enumerate().filter(|&(_, v)| v % 2 == 0).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index.sort();\n    let mut even_values_index_value\
    \ = even_values_index.iter().enumerate().filter(|&(_, v)| v == smallest_index).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index_value.sort();\n    let mut even_values_index_value\
    \ = even_values_index_value.iter().enumerate().filter(|&(_, v)| v == smallest_index_value).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index_value.sort();\n    let mut even_values_index_value\
    \ = even_values_index_value.iter().enumerate().filter(|&(_, v)| v == smallest_index_value).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index_value.sort();\n    let mut even_values_index_value\
    \ = even_values_index_value.iter().enumerate().filter(|&(_, v)| v == smallest_index_value).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index_value.sort();\n    let mut even_values_index_value\
    \ = even_values_index_value.iter().enumerate().filter(|&(_, v)| v == smallest_index_value).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index_value.sort();\n    let mut even_values_index_value\
    \ = even_values_index_value.iter().enumerate().filter(|&(_, v)| v == smallest_index_value).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index_value.sort();\n    let mut even_values_index_value\
    \ = even_values_index_value.iter().enumerate().filter(|&(_, v)| v == smallest_index_value).collect::<Vec<(isize,\
    \ isize)>>();\n    even_values_index_value.", "    let mut min_even_value = arr[0];\n\
    \    let mut min_even_index = -1;\n    let mut min_even_index_in_arr = 0;\n  \
    \  let mut min_even_index_in_arr2 = 0;\n    let mut even_values = Vec::new();\n\
    \    let mut even_values2 = Vec::new();\n    let mut even_values3 = Vec::new();\n\
    \    let mut even_values4 = Vec::new();\n    let mut even_values5 = Vec::new();\n\
    \    let mut even_values6 = Vec::new();\n    let mut even_values7 = Vec::new();\n\
    \    let mut even_values8 = Vec::new();\n    let mut even_values9 = Vec::new();\n\
    \    let mut even_values10 = Vec::new();\n    let mut even_values11 = Vec::new();\n\
    \    let mut even_values12 = Vec::new();\n    let mut even_values13 = Vec::new();\n\
    \    let mut even_values14 = Vec::new();\n    let mut even_values15 = Vec::new();\n\
    \    let mut even_values16 = Vec::new();\n    let mut even_values17 = Vec::new();\n\
    \    let mut even_values18 = Vec::new();\n    let mut even_values19 = Vec::new();\n\
    \    let mut even_values20 = Vec::new();\n    let mut even_values21 = Vec::new();\n\
    \    let mut even_values22 = Vec::new();\n    let mut even_values23 = Vec::new();\n\
    \    let mut even_values24 = Vec::new();\n    let mut even_values25 = Vec::new();\n\
    \    let mut even_values26 = Vec::new();\n    let mut even_values27 = Vec::new();\n\
    \    let mut even_values28 = Vec::new();\n    let mut even_values29 = Vec::new();\n\
    \    let mut even_values30 = Vec::new();\n    let mut even_values31 = Vec::new();\n\
    \    let mut even_values32 = Vec::new();\n    let mut even_values33 = Vec::new();\n\
    \    let mut even_values34 = Vec::new();\n    let mut even_values35 = Vec::new();\n\
    \    let mut even_values36 = Vec::new();\n    let mut even_values37 = Vec::new();\n\
    \    let mut even_values38 = Vec::", "    let mut min_value = arr[0];\n    let\
    \ mut min_idx = 1;\n    let mut min_idx2 = 1;\n    let mut min_idx3 = 1;\n   \
    \ let mut min_idx4 = 1;\n    let mut min_idx5 = 1;\n    let mut min_idx6 = 1;\n\
    \    let mut min_idx7 = 1;\n    let mut min_idx8 = 1;\n    let mut min_idx9 =\
    \ 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11 = 1;\n    let mut min_idx12\
    \ = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14 = 1;\n    let mut min_idx15\
    \ = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17 = 1;\n    let mut min_idx18\
    \ = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20 = 1;\n    let mut min_idx21\
    \ = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23 = 1;\n    let mut min_idx24\
    \ = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26 = 1;\n    let mut min_idx27\
    \ = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29 = 1;\n    let mut min_idx30\
    \ = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32 = 1;\n    let mut min_idx33\
    \ = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35 = 1;\n    let mut min_idx36\
    \ = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38 = 1;\n    let mut min_idx39\
    \ = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41 = 1;\n    let mut min_idx42\
    \ = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44 = 1;\n    let mut min_idx45\
    \ = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47 = 1;\n    let mut min_idx48\
    \ = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50 = 1;\n    let mut min_idx51\
    \ = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53 = 1;\n    let mut min_idx54\
    \ = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56 = 1;\n    let mut min_idx57\
    \ = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59 = 1;\n    let mut min_idx60\
    \ = 1;\n    let mut min_idx61 = 1;\n    let mut min_idx62 = 1;\n    let mut min_idx",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    if smallest_even_index <\
    \ smallest_index {\n        result.push(smallest_even_value);\n        result.push(smallest_even_index);\n\
    \    } else {\n        result.push(smallest_value);\n        result.push(smallest_index);\n\
    \    }\n    result", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    for &i in even_values {\n\
    \        if i == smallest_even_value {\n            result.push(i);\n        }\n\
    \    }\n    result.push(smallest_even_index);\n    result", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    if smallest_even_index == smallest_index {\n        result.push(smallest_even_value);\n\
    \        result.push(smallest_index);\n    } else {\n        result.push(smallest_even_value);\n\
    \        result.push(smallest_index);\n        result.push(smallest_even_index);\n\
    \    }\n    result", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    even_values.sort_unstable();\n    let mut\
    \ even_values_index = even_values.iter().cloned().enumerate().filter(|&(_, v)|\
    \ v % 2 == 0).collect::<Vec<_>>();\n    if even_values_index.len() == 0 {\n  \
    \      return vec![];\n    }\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    for i in arr.iter() {\n \
    \       if i == smallest_value {\n            result.push(i);\n        }\n   \
    \ }\n    if smallest_even_index == smallest_index {\n        result.push(smallest_even_value);\n\
    \    }\n    return result;", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4\
    \ = 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7\
    \ = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10\
    \ = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            even_values.push(i);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in 1..even_values.len()\
    \ {\n        if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = even_values[i];\n     \
    \   }\n    }\n    let mut result = vec![];\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] == smallest_even_value {\n            result.push(i);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_index = result.iter().min().unwrap();\n    for i in 0..result.len()\
    \ {\n        if result[i] == smallest_index {\n            result.swap(i, smallest_index);\n\
    \        }\n    }\n    result", "    let mut min_value = i32::MAX;\n    let mut\
    \ min_index = -1;\n    let mut min_node = None;\n    for &i in arr {\n       \
    \ if i % 2 == 0 {\n            if min_value == i32::MAX {\n                min_value\
    \ = i;\n                min_index = i;\n                min_node = Some(i);\n\
    \            } else {\n                if i < min_value {\n                  \
    \  min_value = i;\n                    min_index = i;\n                    min_node\
    \ = Some(i);\n                }\n            }\n        }\n    }\n    if min_value\
    \ == i32::MAX {\n        return vec![];\n    }\n    if min_node == None {\n  \
    \      return vec![min_value];\n    }\n    let mut result = vec![min_value];\n\
    \    result.push(min_index);\n    result.push(min_node.unwrap());\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2\
    \ == 0 {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_and_index = vec![];\n\
    \    for i in 0..even_values.len() {\n        if even_values[i] < smallest_value\
    \ {\n            smallest_value_and_index.push((even_values[i], i));\n       \
    \ }\n    }\n    if smallest_value_and_index.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_value_and_index_sorted = vec![];\n    for i in 0..smallest_value_and_index.len()\
    \ {\n        smallest_value_and_index_sorted.push((smallest_value_and_index[i][0],\
    \ smallest_value_and_index[i][1]));\n    }\n    smallest_value_and_index_sorted.sort();\n\
    \    smallest_value_and_index_sorted.reverse();\n    return smallest_value_and_index_sorted;",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n            if i < smallest_value {\n         \
    \       smallest_value = i;\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    let mut result = vec![];\n    if smallest_even_value == smallest_value\
    \ {\n        result.push(smallest_even_index);\n    } else {\n        result.push(smallest_value);\n\
    \        result.push(smallest_even_index);\n    }\n    result", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = 0;\n    let mut min_even_index_in_arr\
    \ = 0;\n    let mut even_values_found = false;\n    let mut even_values_found_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_values_found_in_arr_index_in_arr\
    \ = 0;\n    let mut even_values_found_in_arr_index_in_arr = 0;\n    let mut even_value",
  "    let mut min_val = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2 =\
    \ 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n    let mut min_idx5\
    \ = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n    let mut min_idx8\
    \ = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11\
    \ = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14\
    \ = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17\
    \ = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20\
    \ = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23\
    \ = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26\
    \ = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29\
    \ = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32\
    \ = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35\
    \ = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38\
    \ = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41\
    \ = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44\
    \ = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47\
    \ = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50\
    \ = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53\
    \ = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56\
    \ = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59\
    \ = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61 = 1;\n    let mut min_idx62\
    \ = 1;\n    let mut min_idx", "    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] < smallest_value\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    let mut result = vec![smallest_value, smallest_index];\n\
    \    for i in 1..arr.len() {\n        if arr[i] != smallest_value {\n        \
    \    result.push(i);\n        }\n    }\n    result", "    let mut min_value =\
    \ arr[0];\n    let mut min_idx = 0;\n    for i in 1..arr.len() {\n        if arr[i]\
    \ < min_value {\n            min_value = arr[i];\n            min_idx = i;\n \
    \       }\n    }\n    let mut even_values = Vec::new();\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n   \
    \     }\n    }\n    if even_values.len() == 0 {\n        return Vec::new();\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![min_value];\n   \
    \ }\n    let mut min_even_value = even_values[0];\n    let mut min_even_idx =\
    \ 0;\n    for i in 1..even_values.len() {\n        if even_values[i] < min_even_value\
    \ {\n            min_even_value = even_values[i];\n            min_even_idx =\
    \ i;\n        }\n    }\n    let mut even_values_copy = even_values.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.remove(min_even_idx);\n    let mut even_values_copy = even_values_copy.",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5\
    \ = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut even_values\
    \ = vec![];\n    let mut min_value = arr[0];\n    let mut min_index = -1;\n  \
    \  for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut even_values_set = HashSet::new();\n\
    \    for &i in even_values {\n        even_values_set.insert(i);\n    }\n    let\
    \ mut smallest_value = min_value;\n    let mut smallest_index = min_index;\n \
    \   for &i in even_values {\n        if !even_values_set.contains(&i) {\n    \
    \        if i < smallest_value {\n                smallest_value = i;\n      \
    \          smallest_index = i;\n            }\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.is_empty() {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values.iter().position(|&i| i == smallest_even_value).unwrap();\n   \
    \ for &i in even_values {\n        if i == smallest_value {\n            smallest_even_value\
    \ = i;\n            smallest_even_index = even_values.iter().position(|&i| i ==\
    \ smallest_even_value).unwrap();\n        }\n    }\n    even_values.iter().position(|&i|\
    \ i == smallest_even_value).unwrap()", "    let mut even_values = vec![0; arr.len()];\n\
    \    let mut min_value = arr[0];\n    let mut min_value_index = -1;\n    for i\
    \ in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values[i]\
    \ = arr[i];\n            if arr[i] < min_value {\n                min_value =\
    \ arr[i];\n                min_value_index = i;\n            }\n        }\n  \
    \  }\n    let mut even_values_sorted = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_sorted.sort();\n    let mut min_value_index = -1;\n    for i\
    \ in 0..even_values_sorted.len() {\n        if even_values_sorted[i] == min_value\
    \ {\n            min_value_index = i;\n        }\n    }\n    if min_value_index\
    \ == -1 {\n        return vec![];\n    }\n    let mut result = vec![min_value_index];\n\
    \    for i in 0..min_value_index {\n        result.push(arr[i]);\n    }\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value == i {\n                min_idx\
    \ = i;\n            }\n        } else {\n            min_value = i;\n        \
    \    min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n \
    \   let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n\
    \    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 =\
    \ 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values.push(arr[i]);\n            if arr[i] < smallest_value {\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in 0..even_values.len() {\n        if even_values[i]\
    \ < smallest_even_value {\n            smallest_even_value = even_values[i];\n\
    \            smallest_even_index = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_even_index]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i % 2 == 0 {\n            if smallest_even_value < i {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \        }\n        }\n    }\n    let mut result = vec![];\n    for i in even_values.iter()\
    \ {\n        if i == smallest_even_value {\n            result.push(i);\n    \
    \    }\n    }\n    if result.len() == 0 {\n        return vec![];\n    }\n   \
    \ let mut smallest_value = result[0];\n    let mut smallest_index = 0;\n    for\
    \ i in result.iter() {\n        if i % 2 == 0 {\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    if smallest_index == 0 {\n        return\
    \ vec![];\n    }\n    vec![smallest_value, smallest_index]", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == smallest_value).unwrap();\n        }\n        if i == smallest_value {\n\
    \            smallest_value = i;\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&i| i == smallest_even_value).unwrap();\n\
    \    for &i in even_values {\n        if i == smallest_value {\n            smallest_even_value\
    \ = i;\n            smallest_even_index = even_values.iter().position(|&i| i ==\
    \ smallest_even_value).unwrap();\n        }\n    }\n    return vec![smallest_value,\
    \ smallest_index];", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_count = 0;\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_index = i;\n                smallest_even_index_count\
    \ = 1;\n            } else {\n                smallest_even_index_count += 1;\n\
    \            }\n        }\n    }\n    if smallest_even_index_count == 0 {\n  \
    \      return vec![];\n    }\n    let mut smallest_even_index_value = smallest_even_index;\n\
    \    let mut smallest_even_index_value_count = 0;\n    for &i in arr {\n     \
    \   if i % 2 == 0 {\n            if smallest_even_index_value == i {\n       \
    \         smallest_even_index_value_count += 1;\n            } else {\n      \
    \          if smallest_even_index_value_count > smallest_even_index_count {\n\
    \                    smallest_even_index_value = i;\n                    smallest_even_index_value_count\
    \ = smallest_even_index_count;\n                }\n            }\n        }\n\
    \    }\n    vec![smallest_even_index_value, smallest_even_index_count]", "   \
    \ let mut min_val = arr[0];\n    let mut min_idx = 1;\n    let mut min_even_val\
    \ = false;\n    for &v in arr {\n        if v % 2 == 0 {\n            if min_even_val\
    \ {\n                if v < min_val {\n                    min_val = v;\n    \
    \                min_idx = min_idx;\n                }\n            } else {\n\
    \                min_even_val = true;\n                min_val = v;\n        \
    \        min_idx = v;\n            }\n        } else {\n            min_even_val\
    \ = false;\n        }\n    }\n    vec![min_val, min_idx]", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut smallest_even_value = 0;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if smallest_value\
    \ == i {\n                smallest_even_value = i;\n            }\n          \
    \  if smallest_value < i {\n                smallest_value = i;\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value_index\
    \ = 0;\n    for i in even_values.iter() {\n        if smallest_even_value == i\
    \ {\n            smallest_even_value_index = i;\n        }\n    }\n    even_values.remove(smallest_even_value_index);\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.iter().cloned().collect()",
  "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2\
    \ = 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n    let mut min_idx5\
    \ = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n    let mut min_idx8\
    \ = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11\
    \ = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14\
    \ = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17\
    \ = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20\
    \ = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23\
    \ = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26\
    \ = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29\
    \ = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32\
    \ = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35\
    \ = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38\
    \ = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41\
    \ = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44\
    \ = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47\
    \ = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50\
    \ = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53\
    \ = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56\
    \ = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59\
    \ = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61 = 1;\n    let mut min_idx62\
    \ = 1;\n    let mut min_idx", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for &value\
    \ in arr {\n        if value % 2 == 0 {\n            even_values.push(value);\n\
    \        }\n        if value < smallest_value {\n            smallest_value =\
    \ value;\n            smallest_index = even_values.len();\n        }\n    }\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.retain(|&x|\
    \ x < smallest_value);\n    even_values.retain(|&x| x < smallest_index);\n   \
    \ even_values", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values.iter().position(|x| x < smallest_value);\n\
    \    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if i < smallest_value {\n                smallest_value = i;\n            \
    \    smallest_index = i;\n            }\n        } else {\n            if i <\
    \ smallest_even_value {\n                smallest_even_value = i;\n          \
    \      smallest_even_index = i;\n            }\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &x in arr {\n        if\
    \ x % 2 == 0 {\n            even_values.push(x);\n            if x < smallest_value\
    \ {\n                smallest_value = x;\n                smallest_index = even_values.len()\
    \ - 1;\n            }\n        }\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    let mut result = Vec::new();\n    for &x in even_values {\n        result.push(x);\n\
    \    }\n    if even_values.len() == 0 {\n        return result;\n    }\n    let\
    \ mut smallest_value = even_values[0];\n    let mut smallest_index = 0;\n    for\
    \ &x in even_values {\n        if x < smallest_value {\n            smallest_value\
    \ = x;\n            smallest_index = even_values.len() - 1;\n        }\n    }\n\
    \    result.push(smallest_value);\n    result.push(smallest_index);\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = -1;\n    let mut min_idx3 = -1;\n    let mut min_idx4 = -1;\n    let mut min_idx5\
    \ = -1;\n    let mut min_idx6 = -1;\n    let mut min_idx7 = -1;\n    let mut min_idx8\
    \ = -1;\n    let mut min_idx9 = -1;\n    let mut min_idx10 = -1;\n    let mut\
    \ min_idx11 = -1;\n    let mut min_idx12 = -1;\n    let mut min_idx13 = -1;\n\
    \    let mut min_idx14 = -1;\n    let mut min_idx15 = -1;\n    let mut min_idx16\
    \ = -1;\n    let mut min_idx17 = -1;\n    let mut min_idx18 = -1;\n    let mut\
    \ min_idx19 = -1;\n    let mut min_idx20 = -1;\n    let mut min_idx21 = -1;\n\
    \    let mut min_idx22 = -1;\n    let mut min_idx23 = -1;\n    let mut min_idx24\
    \ = -1;\n    let mut min_idx25 = -1;\n    let mut min_idx26 = -1;\n    let mut\
    \ min_idx27 = -1;\n    let mut min_idx28 = -1;\n    let mut min_idx29 = -1;\n\
    \    let mut min_idx30 = -1;\n    let mut min_idx31 = -1;\n    let mut min_idx32\
    \ = -1;\n    let mut min_idx33 = -1;\n    let mut min_idx34 = -1;\n    let mut\
    \ min_idx35 = -1;\n    let mut min_idx36 = -1;\n    let mut min_idx37 = -1;\n\
    \    let mut min_idx38 = -1;\n    let mut min_idx39 = -1;\n    let mut min_idx40\
    \ = -1;\n    let mut min_idx41 = -1;\n    let mut min_idx42 = -1;\n    let mut\
    \ min_idx43 = -1;\n    let mut min_idx44 = -1;\n    let mut min_idx45 = -1;\n\
    \    let mut min_idx46 = -1;\n    let mut min_idx47 = -1;\n    let mut min_idx48\
    \ = -1;\n    let mut min_idx49 = -1;\n    let mut min_idx50 = -1;\n    let mut\
    \ min_idx51 = -1;\n    let mut min_idx52 = -1;\n    let mut min_idx53 = -1;\n\
    \    let mut min_idx54 = -1;\n    let mut min_idx55 = -1;\n    let mut min_idx56\
    \ = -1;\n    let mut min_idx57 = -1;\n    let mut min_", "    let mut even_values\
    \ = vec![0; arr.len()];\n    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values[i] = 1;\n            if arr[i] < min_value {\n                min_value\
    \ = arr[i];\n                min_idx = i;\n            }\n        } else {\n \
    \           even_values[i] = 0;\n        }\n    }\n    let mut result = vec![min_value;\
    \ arr.len()];\n    for i in 0..arr.len() {\n        if even_values[i] == 1 {\n\
    \            result[i] = min_idx;\n        }\n    }\n    result", "    let mut\
    \ even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0\
    \ {\n            even_values.push(i);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_even = even_values[0];\n\
    \    let mut smallest_index_even = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_value_even {\n            smallest_value_even\
    \ = even_values[i];\n            smallest_index_even = i;\n        }\n    }\n\
    \    smallest_value_even\n        .clone()\n        .unwrap()\n        .clone()\n\
    \        .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n  \
    \      .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n    \
    \    .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n      \
    \  .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n\
    \        .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n  \
    \      .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n    \
    \    .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n      \
    \  .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n\
    \        .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n  \
    \      .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n    \
    \    .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n      \
    \  .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n\
    \        .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n  \
    \      .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n    \
    \    .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n      \
    \  .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n\
    \        .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n  \
    \      .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n    \
    \    .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n      \
    \  .unwrap()\n        .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n\
    \        .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n  \
    \      .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n    \
    \    .clone()\n        .unwrap()\n        .clone()\n        .unwrap()\n      \
    \  .clone()", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    even_values.sort_unstable();\n    let mut\
    \ even_values_iter = even_values.iter();\n    if even_values_iter.next().unwrap()\
    \ == smallest_value {\n        even_values_iter.next();\n    }\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut even_values_iter = even_values.iter();\n    let mut even_values_iter\
    \ = even_value", "    let mut even_values = Vec::new();\n    let mut min_value\
    \ = isize::MAX;\n    let mut min_index = isize::MAX;\n    for &i in arr {\n  \
    \      if i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_index = i;\n        \
    \    }\n        }\n    }\n    if even_values.is_empty() {\n        return vec![];\n\
    \    }\n    let mut even_values_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even_values_iter = even_values_iter.in", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values.push(arr[i]);\n            if arr[i] < smallest_value {\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for i in 0..even_values.len() {\n        if even_values[i]\
    \ < smallest_even_value {\n            smallest_even_value = even_values[i];\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in 0..even_values.len() {\n        if even_values[i] == smallest_even_value\
    \ {\n            result.push(i);\n        }\n    }\n    if result.len() == 0 {\n\
    \        return vec![];\n    }\n    let mut smallest_index = result.len();\n \
    \   for i in 0..result.len() {\n        if result[i] < smallest_index {\n    \
    \        smallest_index = result[i];\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in 0..result.len() {\n        if result[i] == smallest_index {\n  \
    \          result.push(i);\n        }\n    }\n    if result.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value = even_values[smallest_even_index];\n\
    \    for i in 0..result.len() {\n        if result[i] == smallest_index {\n  \
    \          result.push(i);\n        }\n    }\n    if result.len() == 0 {\n   \
    \     return vec![];\n    }\n    for i in 0..result.len() {\n        if result[i]\
    \ == smallest_index {\n            result.push(i);\n        }\n    }\n    if result.len()\
    \ == 0 {\n        return vec![];\n    }\n    for i in 0..result.len() {\n    \
    \    if result[i] == smallest_index {\n            result.push(i);\n        }\n\
    \    }\n    if result.len() == 0 {\n        return vec![];\n    }\n    for i in\
    \ 0..result.len() {\n        if result[i] == smallest_index {\n            result.push(i);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return vec![];\n    }\n\
    \    for i in 0..result.len() {\n        if result[i] == smallest_index {\n  \
    \          result.push(i);\n        }\n    }\n    if result.len() == 0 {\n   \
    \     return vec![];\n    }\n    for i in 0..result.len() {\n        if result[i]\
    \ == smallest_index {\n            result.push(i);\n        }\n    }\n    if result.len()\
    \ == 0 {\n        return vec![];\n", "    let mut even_values = vec![];\n    let\
    \ mut min_value = arr[0];\n    let mut min_index = -1;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n   \
    \         if arr[i] < min_value {\n                min_value = arr[i];\n     \
    \           min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = -1;\n    for i in 0..even_values.len() {\n     \
    \   if even_values[i] < smallest_value {\n            smallest_value = even_values[i];\n\
    \            smallest_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in 0..even_values.len() {\n        if even_values[i] == smallest_value\
    \ {\n            result.push(i);\n        }\n    }\n    if result.len() == 0 {\n\
    \        return vec![];\n    }\n    result.push(smallest_index);\n    result",
  "    let mut even_values = vec![0; arr.len()];\n    let mut smallest_value = vec![0;\
    \ arr.len()];\n    let mut smallest_index = vec![0; arr.len()];\n    for i in\
    \ 0..arr.len() {\n        even_values[i] = arr[i] % 2 == 0;\n        if even_values[i]\
    \ {\n            smallest_value[i] = arr[i];\n            smallest_index[i] =\
    \ i;\n        }\n    }\n    if even_values.iter().any(|&x| x == false) {\n   \
    \     return vec![];\n    }\n    if smallest_value.iter().any(|&x| x == 0) {\n\
    \        return vec![];\n    }\n    if smallest_value.iter().any(|&x| x == 1)\
    \ {\n        return vec![];\n    }\n    for i in 0..arr.len() {\n        if smallest_value[i]\
    \ == 0 {\n            smallest_value[i] = smallest_value[smallest_index[i]];\n\
    \            smallest_index[i] = smallest_index[smallest_index[i]];\n        }\n\
    \    }\n    for i in 0..arr.len() {\n        if smallest_value[i] == 1 {\n   \
    \         smallest_value[i] = smallest_value[smallest_index[i]];\n           \
    \ smallest_index[i] = smallest_index[smallest_index[i]];\n        }\n    }\n \
    \   for i in 0..arr.len() {\n        if smallest_value[i] == 2 {\n           \
    \ smallest_value[i] = smallest_value[smallest_index[i]];\n            smallest_index[i]\
    \ = smallest_index[smallest_index[i]];\n        }\n    }\n    for i in 0..arr.len()\
    \ {\n        if smallest_value[i] == 3 {\n            smallest_value[i] = smallest_value[smallest_index[i]];\n\
    \            smallest_index[i] = smallest_index[smallest_index[i]];\n        }\n\
    \    }\n    for i in 0..arr.len() {\n        if smallest_value[i] == 4 {\n   \
    \         smallest_value[i] = smallest_value[smallest_index[i]];\n           \
    \ smallest_index[i] = smallest_index[smallest_index[i]];\n        }\n    }\n \
    \   for i in 0..arr.len() {\n        if smallest_value[i] == 5 {\n           \
    \ smallest_value[i] = smallest_value[smallest_index[i]];\n            smallest_index[i]\
    \ = smallest_index[smallest_index[i]];\n        }\n    }\n    for i in 0..arr.len()\
    \ {\n        if smallest_value[i] == 6 {\n            smallest_value[i] = smallest_value[smallest_index[i]];\n\
    \            smallest_index[i] = smallest_index[smallest_index[i]];\n        }\n\
    \    }\n    for i in 0..arr.len() {\n        if smallest_value[i] == 7 {\n   \
    \         smallest_value[i] = smallest_value[smallest_index[i]];\n", "    let\
    \ mut even_values = vec![];\n    let mut min_value = arr[0];\n    let mut min_value_index\
    \ = -1;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n         \
    \   even_values.push(arr[i]);\n            if arr[i] < min_value {\n         \
    \       min_value = arr[i];\n                min_value_index = i;\n          \
    \  }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_value = min_value;\n    let mut smallest_value_index\
    \ = min_value_index;\n    for i in 0..even_values.len() {\n        if even_values[i]\
    \ < smallest_value {\n            smallest_value = even_values[i];\n         \
    \   smallest_value_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in 0..even_values.len() {\n        if i == smallest_value_index {\n\
    \            result.push(smallest_value);\n        } else {\n            result.push(even_values[i]);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_index_value\
    \ = arr[0];\n    for i in arr.iter_mut() {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if smallest_index_value % 2 == 0 {\n  \
    \              smallest_index_value = i;\n            }\n        } else {\n  \
    \          if smallest_value < i {\n                smallest_value = i;\n    \
    \            smallest_index = i;\n            }\n        }\n    }\n    even_values.sort_unstable();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n        if i % 2 ==\
    \ 0 {\n            if min_value < i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    let mut result:\
    \ Vec<isize> = vec![];\n    if min_idx != 0 {\n        result.push(min_value);\n\
    \        result.push(min_idx);\n    }\n    result", "    let mut even_values =\
    \ Vec::new();\n    let mut min_value = arr[0];\n    let mut min_value_index =\
    \ -1;\n    let mut min_value_index2 = -1;\n    for i in 0..arr.len() {\n     \
    \   if arr[i] % 2 == 0 {\n            even_values.push(i);\n            if arr[i]\
    \ < min_value {\n                min_value = arr[i];\n                min_value_index\
    \ = i;\n            }\n            if arr[i] == min_value {\n                min_value_index2\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    if min_value_index2 == min_value_index {\n  \
    \      return vec![min_value_index];\n    }\n    if min_value_index2 < min_value_index\
    \ {\n        return vec![min_value_index2];\n    }\n    return vec![min_value_index,\
    \ min_value_index2];", "    let mut min_value = arr[0];\n    let mut min_index\
    \ = 0;\n    let mut min_even_value = false;\n    for i in arr.iter() {\n     \
    \   if i % 2 == 0 {\n            if min_even_value{\n                min_value\
    \ = i;\n                min_even_value = false;\n            }\n            else{\n\
    \                min_even_value = true;\n            }\n        }\n        else{\n\
    \            if min_value == i {\n                min_index += 1;\n          \
    \  }\n        }\n    }\n    if min_even_value{\n        min_value = min_value\
    \ + 1;\n    }\n    let mut result = vec![min_value, min_index];\n    return result;",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if smallest_value < i {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values.iter().next().unwrap();\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if smallest_even_value < i {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![];\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n\
    \    result.push(smallest_even_index);\n    result", "    let mut min_value =\
    \ arr[0];\n    let mut min_idx = -1;\n    for &i in arr {\n        if i % 2 ==\
    \ 0 {\n            if min_value == i {\n                min_idx = i;\n       \
    \     } else {\n                min_value = i;\n                min_idx = i;\n\
    \            }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut\
    \ min_even_value: isize = 0;\n    let mut min_even_index: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_", "    let mut even_values = vec![];\n    let mut min_value = i32::MAX;\n\
    \    let mut min_index = -1;\n    for i in arr {\n        if i % 2 == 0 {\n  \
    \          even_values.push(i);\n            if i < min_value {\n            \
    \    min_value = i;\n                min_index = i;\n            }\n        }\n\
    \    }\n    if even_values.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut even_values_iter = even_values.iter();\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| v % 2 == 0);\n    let mut even_values_iter = even_values_iter.enumerate().filter(|&(_,\
    \ v)| ", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i\
    \ in 1..arr.len() {\n        if arr[i] < min_value {\n            min_value =\
    \ arr[i];\n            min_idx = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    for i in 0..arr.len() {\n        if arr[i] == min_value {\n            result.push(min_idx);\n\
    \        }\n    }\n    result", "    let mut even_values = vec![];\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in arr.iter() {\n        if i == smallest_value {\n     \
    \       result.push(smallest_even_index);\n        }\n    }\n    return result;",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5\
    \ = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut even_values\
    \ = Vec::new();\n    let mut min_value = i32::MAX;\n    let mut min_index = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < min_value {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = -1;\n    for i in even_values {\n        if i ==\
    \ smallest_value {\n            smallest_index = i;\n        }\n    }\n    let\
    \ mut result = vec![];\n    for i in even_values {\n        if i == smallest_value\
    \ {\n            result.push(smallest_index);\n        }\n    }\n    result",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    even_values.sort();\n    let mut result =\
    \ Vec::new();\n    for i in even_values {\n        if i == smallest_value {\n\
    \            result.push(smallest_index);\n        }\n    }\n    result", "  \
    \  let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    for &x in arr {\n        if x % 2 == 0 {\n\
    \            even_values.push(x);\n        }\n        if x < smallest_value {\n\
    \            smallest_value = x;\n            smallest_index = even_values.len();\n\
    \        }\n    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.reverse();\n\
    \    even_values.iter().cloned().collect()", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_index\
    \ = -1;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if smallest_even_value < i {\n                smallest_even_value = i;\n  \
    \              smallest_even_index = i;\n            }\n        } else {\n   \
    \         if smallest_index == -1 || smallest_even_value < i {\n             \
    \   smallest_index = i;\n            }\n        }\n    }\n    smallest_even_index.into()",
  "    let mut even_values = vec![];\n    let mut min_value = arr[0];\n    let mut\
    \ min_value_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] % 2 ==\
    \ 0 {\n            even_values.push(arr[i]);\n            if arr[i] < min_value\
    \ {\n                min_value = arr[i];\n                min_value_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut min_even_value = even_values[0];\n    let mut min_even_value_index\
    \ = -1;\n    for i in 0..even_values.len() {\n        if even_values[i] < min_even_value\
    \ {\n            min_even_value = even_values[i];\n            min_even_value_index\
    \ = i;\n        }\n    }\n    let mut result = vec![];\n    for i in 0..arr.len()\
    \ {\n        if arr[i] == min_even_value_index {\n            result.push(min_even_value);\n\
    \        }\n    }\n    result", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_index_in_list = -1;\n    let\
    \ mut even_values_found = false;\n    for &mut x in arr {\n        if x % 2 ==\
    \ 0 {\n            min_even_value = x;\n            even_values_found = true;\n\
    \        }\n        if even_values_found {\n            if x < min_even_value{\n\
    \                min_even_value = x;\n                min_even_index = x;\n  \
    \              min_even_index_in_list = x;\n            }\n        }\n    }\n\
    \    if min_even_index == -1 {\n        return vec![];\n    }\n    let mut even_values_found\
    \ = false;\n    let mut even_values_index = -1;\n    let mut even_values_index_in_list\
    \ = -1;\n    for &mut x in arr {\n        if x % 2 == 0 {\n            even_values_found\
    \ = true;\n            if x < min_even_value{\n                min_even_value\
    \ = x;\n                even_values_index = x;\n                even_values_index_in_list\
    \ = x;\n            }\n        }\n        if even_values_found {\n           \
    \ if x < min_even_value{\n                min_even_value = x;\n              \
    \  even_values_index = x;\n                even_values_index_in_list = x;\n  \
    \          }\n        }\n    }\n    if even_values_found {\n        return vec![min_even_value,even_values_index,even_values_index_in_list];\n\
    \    }\n    return vec![];", "    let mut smallest_even_value = arr[0];\n    let\
    \ mut smallest_even_index = -1;\n    let mut smallest_index = -1;\n    let mut\
    \ even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n  \
    \          even_values.push(i);\n        }\n        if i == smallest_even_value\
    \ {\n            smallest_even_index = arr.iter().position(|&i| i == smallest_even_value).unwrap();\n\
    \            smallest_even_value = i;\n        }\n        if i == smallest_index\
    \ {\n            smallest_index = arr.iter().position(|&i| i == smallest_index).unwrap();\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_index = -1;\n    for &i in even_values {\n     \
    \   if i == smallest_even_value {\n            smallest_even_index = even_values.iter().position(|&i|\
    \ i == smallest_even_value).unwrap();\n            smallest_even_value = i;\n\
    \        }\n        if i == smallest_index {\n            smallest_index = even_values.iter().position(|&i|\
    \ i == smallest_index).unwrap();\n        }\n    }\n    let mut result = vec![];\n\
    \    if smallest_even_index == -1 {\n        return result;\n    }\n    for i\
    \ in 0..arr.len() {\n        if i == smallest_even_index {\n            result.push(smallest_even_value);\n\
    \            break;\n        }\n    }\n    if result.len() == 0 {\n        return\
    \ result;\n    }\n    for i in 0..result.len() {\n        if i == smallest_index\
    \ {\n            result.push(smallest_index);\n            break;\n        }\n\
    \    }\n    result", "    let mut min_value = arr[0];\n    let mut min_index =\
    \ 0;\n    let mut min_even_value = false;\n    for i in 0..arr.len() {\n     \
    \   if arr[i] < min_value {\n            min_value = arr[i];\n            min_index\
    \ = i;\n            min_even_value = true;\n        }\n        if arr[i] == min_value\
    \ {\n            if min_even_value {\n                min_even_value = false;\n\
    \            }\n        }\n    }\n    if min_even_value {\n        vec![min_value,\
    \ min_index]\n    } else {\n        vec![]\n    }", "    let mut even_values =\
    \ vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index =\
    \ 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n\
    \            if arr[i] < smallest_value {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = 0;\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in 0..even_values.len() {\n        if\
    \ i == smallest_even_index {\n            result.push(i);\n        }\n    }\n\
    \    result", "    let mut min_even_value: isize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut even_value: isize = 0;\n    let mut index: usize = 0;\n\
    \    let mut even_values: Vec<isize> = vec![];\n    let mut even_values_index:\
    \ Vec<usize> = vec![];\n    let mut even_values_index: Vec<usize> = vec![];\n\
    \    for value in arr {\n        if value % 2 == 0 {\n            even_values.push(value);\n\
    \            even_values_index.push(value);\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n   \
    \     }\n        if value == min_even_value {\n            min_even_value = value;\n\
    \            min_index = index;\n        }\n        if value == min_even_value\
    \ {\n            min_even_value = value;\n            min_index = index;\n", " \
    \   let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n        }\n        if i == smallest_value {\n\
    \            smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    even_values.sort_unstable();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ even_values.push(i);\n            if i < smallest_value {\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values.iter().next().unwrap();\n\
    \    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if i < smallest_even_value {\n                smallest_even_value = i;\n  \
    \              smallest_even_index = i;\n            }\n        }\n    }\n   \
    \ let mut result = vec![];\n    for i in even_values.iter().rev() {\n        if\
    \ i == smallest_even_index {\n            result.push(smallest_even_value);\n\
    \        }\n    }\n    result", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_index_in_arr = -1;\n    let mut\
    \ even_values = Vec::new();\n    let mut even_values_index = Vec::new();\n   \
    \ let mut even_values_index_in_arr = Vec::new();\n    for i in 0..arr.len() {\n\
    \        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n       \
    \     even_values_index.push(i);\n            even_values_index_in_arr.push(i);\n\
    \            if arr[i] < min_even_value {\n                min_even_value = arr[i];\n\
    \                min_even_index = i;\n                min_even_index_in_arr =\
    \ i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return even_values_index;\n    }\n    if min_even_value == 0 {\n        return\
    \ even_values_index;\n    }\n    if min_even_index == -1 || min_even_index ==\
    \ even_values_index_in_arr.len() - 1 {\n        return even_values_index;\n  \
    \  }\n    for i in 0..even_values_index_in_arr.len() {\n        if even_values_index_in_arr[i]\
    \ == min_even_index {\n            even_values_index_in_arr[i] = even_values_index_in_arr[i]\
    \ + 1;\n        }\n    }\n    for i in 0..even_values_index_in_arr.len() {\n \
    \       if even_values_index_in_arr[i] == min_even_index_in_arr {\n          \
    \  even_values_index_in_arr[i] = even_values_index_in_arr[i] + 1;\n        }\n\
    \    }\n    for i in 0..even_values_index_in_arr.len() {\n        if even_values_index_in_arr[i]\
    \ == min_even_index_in_arr {\n            even_values_index_in_arr[i] = even_values_index_in_arr[i]\
    \ + 1;\n        }\n    }\n    for i in 0..even_values_index_in_arr.len() {\n \
    \       if even_values_index_in_arr[i] == min_even_index_in_arr {\n          \
    \  even_values_index_in_arr[i] = even_values_index_in_arr[i] + 1;\n        }\n\
    \    }\n    for i in 0..even_values_index_in_arr.len() {\n        if even_values_index_in_arr[i]\
    \ == min_even_index_in_arr {\n            even_values_index_in_arr[i] = even_values_index_in_arr[i]\
    \ + 1;\n        }\n    }\n    for i in 0..even_values_index_in_arr.len() {\n \
    \       if even_values_index_in_arr[i] == min_even_index_in_arr {\n          \
    \  even_values_index_in_arr[i] = even_values_index_in_arr[i] + 1;\n        }\n\
    \    }\n    for i in 0..even_values_index_in_arr.len() {\n        if even_values_index_in_arr[i]\
    \ == min_even_index_in_arr {", "    let mut min_value = i32::MAX;\n    let mut\
    \ min_idx = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n         \
    \   if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut even_values\
    \ = false;\n    for &x in arr {\n        if x % 2 == 0 {\n            even_values\
    \ = true;\n        }\n        if x < smallest_value {\n            smallest_value\
    \ = x;\n            smallest_index = x;\n        }\n    }\n    if even_values\
    \ {\n        smallest_index\n    } else {\n        smallest_index + 1\n    }",
  "    let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n \
    \   let mut smallest_index = 0;\n    let mut smallest_even_value = 0;\n    let\
    \ mut even_values_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0\
    \ {\n            even_values.push(i as isize);\n            if even_values_index\
    \ == 0 {\n                smallest_even_value = i as isize;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else {\n          \
    \      if i < smallest_even_value{\n                    smallest_even_value =\
    \ i as isize;\n                    smallest_value = i;\n                    smallest_index\
    \ = i;\n                }\n            }\n            even_values_index += 1;\n\
    \        }\n    }\n    even_values.sort();\n    even_values.dedup();\n    let\
    \ mut even_values_index = even_values.iter().position(|&x| *x == smallest_even_value);\n\
    \    even_values_index += 1;\n    even_values.retain(|&x| *x == smallest_even_value);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_value);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even_values.dedup();\n    even_values.retain(|&x| *x == smallest_index);\n\
    \    even", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    let\
    \ mut min_idx = -1;\n    for i in arr.iter().cloned() {\n        if i % 2 == 0\
    \ {\n            if min_value == i {\n                min_idx = i;\n         \
    \   } else {\n                min_value = i;\n                min_idx = i;\n \
    \           }\n        }\n    }\n    if min_idx == -1 {\n        return vec![];\n\
    \    }\n    let mut result = vec![];\n    for i in arr.iter().cloned() {\n   \
    \     if i == min_idx {\n            result.push(min_value);\n        } else {\n\
    \            result.push(i);\n        }\n    }\n    result", "    let mut even_values\
    \ = vec![];\n    let mut min_value = arr[0];\n    let mut min_value_index = -1;\n\
    \    let mut min_value_index = -1;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n            if min_value == i {\n     \
    \           min_value_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if min_value_index == -1 {\n    \
    \    return vec![];\n    }\n    let mut even_values_set = HashSet::new();\n  \
    \  for i in even_values {\n        even_values_set.insert(i);\n    }\n    let\
    \ mut even_values_index = even_values_set.iter().map(|&i| i).collect::<Vec<_>>();\n\
    \    even_values_index.sort();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.into_iter().map(|&i| ",
  "    let mut even_values = Vec::new();\n    let mut min_value = arr[0];\n    let\
    \ mut min_index = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if min_value == i {\n                min_index\
    \ = even_values.len() - 1;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if min_index == -1 {\n        return\
    \ vec![min_value];\n    }\n    let mut result = vec![min_value];\n    let mut\
    \ current_index = min_index;\n    while current_index != -1 {\n        if even_values[current_index]\
    \ % 2 == 0 {\n            result.push(even_values[current_index]);\n         \
    \   current_index += 1;\n        } else {\n            current_index -= 1;\n \
    \       }\n    }\n    result", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = -1;\n    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n       \
    \     if min_value == i {\n                min_idx = i;\n            } else {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    let mut result: Vec<isize> = vec![];\n    if min_idx !=\
    \ -1 {\n        result.push(min_value);\n        result.push(min_idx);\n    }\n\
    \    result", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n  \
    \  for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_idx = i;\n            } else {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    let mut result = vec![min_value, min_idx];\n    if min_idx == -1 {\n\
    \        return result;\n    }\n    for i in arr.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            if min_idx == i {\n                result.push(min_idx);\n\
    \            } else {\n                result.push(i);\n            }\n      \
    \  }\n    }\n    result", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 1..arr.len() {\n        if arr[i] < smallest_value {\n  \
    \          smallest_value = arr[i];\n            smallest_index = i;\n       \
    \ }\n    }\n    let mut result: Vec<isize> = vec![];\n    for i in 0..arr.len()\
    \ {\n        if arr[i] == smallest_value {\n            result.push(smallest_index);\n\
    \        }\n    }\n    result", "    let mut even_values = vec![0; arr.len()];\n\
    \    let mut min_value = arr[0];\n    let mut min_index = 0;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values[i] = arr[i];\n    \
    \        if arr[i] < min_value {\n                min_value = arr[i];\n      \
    \          min_index = i;\n            }\n        }\n    }\n    let mut result\
    \ = vec![min_value; arr.len()];\n    for i in 0..arr.len() {\n        if even_values[i]\
    \ == min_value {\n            result[i] = min_index;\n        }\n    }\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values.iter().position(|&x| x < smallest_value);\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_value {\n          \
    \      smallest_even_value = i;\n                smallest_even_index = i;\n  \
    \          }\n        }\n    }\n    let mut result = vec![];\n    for i in even_values.iter().rev()\
    \ {\n        if i == smallest_value {\n            result.push(smallest_even_index);\n\
    \        }\n    }\n    result", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_index_in_list = -1;\n    let\
    \ mut min_even_index_in_list_in_list = -1;\n    let mut min_even_index_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list = -1;\n  \
    \  let mut min_even_index_in_list_in_list_in_list_in_list_in_list = -1;\n    let\
    \ mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list = -1;\n \
    \   let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_", "  \
    \  let mut even_values = vec![0; arr.len()];\n    let mut min_value = arr[0];\n\
    \    let mut min_value_index = 0;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            even_values[i] = 1;\n            if arr[i] < min_value\
    \ {\n                min_value = arr[i];\n                min_value_index = i;\n\
    \            }\n        } else {\n            even_values[i] = 0;\n        }\n\
    \    }\n    if even_values.iter().any(|&x| x == 0) {\n        return vec![];\n\
    \    }\n    even_values.iter().cloned().enumerate().filter(|&(i, _)| {\n     \
    \   if even_values[i] == 0 {\n            true\n        } else {\n           \
    \ false\n        }\n    }).collect::<Vec<_>>()", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n   \
    \         if i < smallest_value {\n                smallest_value = i;\n     \
    \           smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    if smallest_even_index == 0 {\n        result.push(smallest_value, smallest_index);\n\
    \    } else {\n        result.push(smallest_even_value);\n        result.push(smallest_even_index);\n\
    \    }\n    return result;", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for &x in arr\
    \ {\n        if x % 2 == 0 {\n            even_values.push(x);\n            if\
    \ x < smallest_value {\n                smallest_value = x;\n                smallest_index\
    \ = even_values.len() - 1;\n            }\n        }\n    }\n    even_values.sort();\n\
    \    even_values.dedup();\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < even_values.len() {\n        if even_values[i] != smallest_value\
    \ {\n            result.push((smallest_value, smallest_index));\n            i\
    \ += 1;\n        } else {\n            i += 1;\n        }\n    }\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx = i;\n            } else {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value <\
    \ i {\n                min_value = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut even_values\
    \ = vec![0; arr.len()];\n    let mut min_value = arr[0];\n    let mut min_value_index\
    \ = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n          \
    \  even_values[i] = 1;\n            if arr[i] < min_value {\n                min_value\
    \ = arr[i];\n                min_value_index = i;\n            }\n        } else\
    \ {\n            even_values[i] = 0;\n        }\n    }\n    let mut result = vec![min_value;\
    \ min_value_index + 1];\n    for i in 0..arr.len() {\n        if even_values[i]\
    \ == 1 {\n            result[min_value_index] = arr[i];\n            min_value_index\
    \ += 1;\n        }\n    }\n    result", "    let mut even_values = vec![];\n \
    \   let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_list = -1;\n    let mut min_even_index_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list = -1;\n    let mut\
    \ min_even_index_in_list_in_list_in_list_in_list = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_", "    let mut\
    \ even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0\
    \ {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = smallest_index;\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    vec![smallest_value, smallest_even_index]", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if i < smallest_even_value {\n         \
    \       smallest_even_value = i;\n                smallest_even_index = i;\n \
    \           }\n        }\n    }\n    vec![smallest_value, smallest_even_index]",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] < min_value {\n            min_value = arr[i];\n      \
    \      min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2\
    \ == 0 {\n            even_values.push(i);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    even_values.sort_unstable();\n  \
    \  even_values.dedup();\n    let mut result = Vec::new();\n    for i in even_values\
    \ {\n        result.push(i);\n    }\n    if result.len() == 0 {\n        return\
    \ result;\n    }\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in 0..result.len() {\n        if result[i] < smallest_value\
    \ {\n            smallest_value = result[i];\n            smallest_index = i;\n\
    \        }\n    }\n    result.push(smallest_value);\n    result.push(smallest_index);\n\
    \    result", "    let mut even_values = vec![];\n    let mut min_value = arr[0];\n\
    \    let mut min_value_index = 0;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < min_value\
    \ {\n                min_value = i;\n                min_value_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_value = min_value;\n    let mut smallest_value_index\
    \ = min_value_index;\n    for i in even_values.iter().rev() {\n        if i <\
    \ smallest_value {\n            smallest_value = i;\n            smallest_value_index\
    \ = i;\n        }\n    }\n    let mut result = vec![];\n    for i in even_values.iter().rev()\
    \ {\n        if i == smallest_value {\n            result.push(i);\n        }\n\
    \    }\n    if result.len() == 0 {\n        return vec![];\n    }\n    result.push(smallest_value);\n\
    \    result.push(smallest_value_index);\n    result", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&x| x < smallest_value);\n\
    \    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if i < smallest_value {\n                smallest_even_value = i;\n       \
    \         smallest_even_index = i;\n            }\n        }\n    }\n    let mut\
    \ result = vec![];\n    for i in even_values.iter().rev() {\n        if i == smallest_value\
    \ {\n            result.push(smallest_even_index);\n        }\n    }\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n            if i < smallest_value {\n         \
    \       smallest_value = i;\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    let mut result = vec![];\n    for &i in even_values {\n \
    \       if i == smallest_even_value {\n            result.push(i);\n         \
    \   result.push(smallest_even_index);\n        }\n    }\n    result", "    let\
    \ mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let mut\
    \ min_even_index_in_list = -1;\n    let mut even_values = vec![];\n    for i in\
    \ arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n  \
    \          if min_even_index == -1 || min_even_index > i {\n                min_even_index\
    \ = i;\n                min_even_index_in_list = i;\n            }\n        }\n\
    \    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    let\
    \ mut smallest_even_value = even_values[0];\n    let mut smallest_even_index =\
    \ -1;\n    for i in even_values.iter() {\n        if i < smallest_even_value.clone()\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    if smallest_even_index == -1 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_index_in_list = -1;\n    for i in even_values.iter()\
    \ {\n        if i == smallest_even_index {\n            smallest_even_index_in_list\
    \ = i;\n        }\n    }\n    if smallest_even_index_in_list == -1 {\n       \
    \ return vec![];\n    }\n    let mut result = vec![];\n    for i in even_values.iter()\
    \ {\n        if i == smallest_even_index {\n            result.push(smallest_even_index_in_list);\n\
    \        }\n    }\n    if result.len() == 0 {\n        return vec![];\n    }\n\
    \    return result;", "    let mut min_value = arr[0];\n    let mut min_idx =\
    \ 0;\n    let mut min_idx = arr.iter().min_by_key(|&x| {\n        if x % 2 ==\
    \ 0 {\n            min_value = x;\n            min_idx = 0;\n            true\n\
    \        } else {\n            min_value = x;\n            min_idx = 1;\n    \
    \        false\n        }\n    });\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n   \
    \ min_idx += 1;\n    min_idx += 1;\n    min_idx += 1;\n    min_", "    let mut\
    \ even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n  \
    \          even_values.push(i);\n            if i < smallest_value {\n       \
    \         smallest_value = i;\n                smallest_index = i;\n         \
    \   }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    for i in even_values.iter()\
    \ {\n        if i == smallest_even_value {\n            result.push(smallest_even_index);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n        }\n\
    \        if i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == smallest_value).unwrap();\n        }\n        if i == smallest_value {\n\
    \            smallest_value = i;\n        }\n    }\n    even_values.sort();\n\
    \    even_values.dedup();\n    let mut even_values_index = even_values.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    even_values_index.sort();\n    even_values_index.dedup();\n\
    \    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().filter(|&(_,\
    \ v)| v % 2 == 0).collect::<Vec<_>>();\n    let mut even_values_index = even_values_index.iter().cloned().enumerate().",
  "    let mut min_even = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index\
    \ = -1;\n    for &x in arr {\n        if x % 2 == 0 {\n            if min_even\
    \ < x {\n                min_even = x;\n                min_even_index = x;\n\
    \            }\n        }\n    }\n    if min_even_index == -1 {\n        return\
    \ vec![];\n    }\n    let mut even_index = -1;\n    let mut even_value = -1;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if even_index == -1\
    \ {\n                even_index = x;\n                even_value = x;\n      \
    \      } else {\n                if x < even_value{\n                    even_value\
    \ = x;\n                    even_index = x;\n                }\n            }\n\
    \        }\n    }\n    let mut even_index = -1;\n    let mut even_value = -1;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if even_index == -1\
    \ {\n                even_index = x;\n                even_value = x;\n      \
    \      } else {\n                if x < even_value{\n                    even_value\
    \ = x;\n                    even_index = x;\n                }\n            }\n\
    \        }\n    }\n    let mut even_index = -1;\n    let mut even_value = -1;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if even_index == -1\
    \ {\n                even_index = x;\n                even_value = x;\n      \
    \      } else {\n                if x < even_value{\n                    even_value\
    \ = x;\n                    even_index = x;\n                }\n            }\n\
    \        }\n    }\n    let mut even_index = -1;\n    let mut even_value = -1;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if even_index == -1\
    \ {\n                even_index = x;\n                even_value = x;\n      \
    \      } else {\n                if x < even_value{\n                    even_value\
    \ = x;\n                    even_index = x;\n                }\n            }\n\
    \        }\n    }\n    let mut even_index = -1;\n    let mut even_value = -1;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if even_index == -1\
    \ {\n                even_index = x;\n                even_value = x;\n      \
    \      } else {\n                if x < even_value{\n                    even_value\
    \ = x;\n                    even_index = x;\n                }\n            }\n\
    \        }\n    }\n    let mut even_index = -1;\n    let mut even_value = -1;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if even_index == -1\
    \ {\n                even_index = x;\n                even_value = x;\n      \
    \      } else {\n                if x < even_value{\n                    even_value\
    \ = x;\n                    even_index = x;\n                }\n            }\n\
    \        }\n    }\n    let mut even_index = -1;\n    let mut even_value = -1;\n\
    \    for &x in arr {\n        if x % 2 == 0 {\n            if even", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0\
    \ {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    vec![smallest_value, smallest_index]", "    let mut min_even_value = arr[0];\n\
    \    let mut min_even_index = -1;\n    let mut min_even_index_count = 0;\n   \
    \ let mut min_even_index_value = arr[0];\n    for i in 1..arr.len() {\n      \
    \  if arr[i] % 2 == 0 {\n            if min_even_index == -1 || arr[i] < min_even_index_value\
    \ {\n                min_even_index_value = arr[i];\n                min_even_index\
    \ = i;\n                min_even_index_count = 1;\n            } else {\n    \
    \            min_even_index_count++;\n            }\n        } else {\n      \
    \      if min_even_index == -1 || arr[i] < min_even_index_value {\n          \
    \      min_even_index_value = arr[i];\n                min_even_index = i;\n \
    \               min_even_index_count = 1;\n            } else {\n            \
    \    min_even_index_count++;\n            }\n        }\n    }\n    if min_even_index_count\
    \ == arr.len() {\n        return vec![min_even_index_value, min_even_index];\n\
    \    } else {\n        return vec![min_even_index_value, min_even_index];\n  \
    \  }", "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values.iter().next().unwrap();\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![];\n    for i in even_values.iter().rev()\
    \ {\n        if i == smallest_even_index {\n            result.push(smallest_even_value);\n\
    \        }\n    }\n    result", "    let mut even_values = vec![0; arr.len()];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values[i]\
    \ = arr[i];\n            if even_values[i] < smallest_value {\n              \
    \  smallest_value = even_values[i];\n                smallest_index = i;\n   \
    \         }\n        }\n    }\n    even_values.sort();\n    even_values.dedup();\n\
    \    let mut result = vec![smallest_value, smallest_index];\n    for i in 0..even_values.len()\
    \ {\n        if even_values[i] != smallest_value {\n            result.push(even_values[i]);\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for i in\
    \ arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n  \
    \      }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_value", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values.iter().position(|&i| i < smallest_value);\n\
    \    if smallest_even_index == even_values.len() - 1 {\n        smallest_even_index\
    \ = even_values.len() - 1;\n    }\n    even_values.remove(&mut smallest_even_index);\n\
    \    even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(&mut smallest_even_index);\n    even_values.remove(&mut\
    \ smallest_even_index);\n    even_values.remove(&mut smallest_even_index);\n \
    \   even_values.remove(", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n  \
    \      if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n         \
    \   if arr[i] < smallest_value {\n                smallest_value = arr[i];\n \
    \               smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in 0..even_values.len() {\n        if\
    \ i == smallest_even_index {\n            result.push(i);\n        }\n    }\n\
    \    result", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    for &i in arr {\n       \
    \ if i == smallest_value {\n            result.push(i);\n        } else if i ==\
    \ smallest_even_value {\n            result.push(smallest_even_index);\n     \
    \   } else {\n            result.push(i);\n        }\n    }\n    result", "  \
    \  let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n            if i < smallest_value {\n         \
    \       smallest_value = i;\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &i in even_values {\n        if i < smallest_even_value {\n  \
    \          smallest_even_value = i;\n            smallest_even_index = i;\n  \
    \      }\n    }\n    vec![smallest_value, smallest_even_index]", "    let mut\
    \ min_even_value: isize = 0;\n    let mut min_even_index: usize = 0;\n    let\
    \ mut min_even_index_in_arr: usize = 0;\n    let mut min_even_index_in_arr2: usize\
    \ = 0;\n    let mut min_even_index_in_arr3: usize = 0;\n    let mut min_even_index_in_arr4:\
    \ usize = 0;\n    let mut min_even_index_in_arr5: usize = 0;\n    let mut min_even_index_in_arr6:\
    \ usize = 0;\n    let mut min_even_index_in_arr7: usize = 0;\n    let mut min_even_index_in_arr8:\
    \ usize = 0;\n    let mut min_even_index_in_arr9: usize = 0;\n    let mut min_even_index_in_arr10:\
    \ usize = 0;\n    let mut min_even_index_in_arr11: usize = 0;\n    let mut min_even_index_in_arr12:\
    \ usize = 0;\n    let mut min_even_index_in_arr13: usize = 0;\n    let mut min_even_index_in_arr14:\
    \ usize = 0;\n    let mut min_even_index_in_arr15: usize = 0;\n    let mut min_even_index_in_arr16:\
    \ usize = 0;\n    let mut min_even_index_in_arr17: usize = 0;\n    let mut min_even_index_in_arr18:\
    \ usize = 0;\n    let mut min_even_index_in_arr19: usize = 0;\n    let mut min_even_index_in_arr20:\
    \ usize = 0;\n    let mut min_even_index_in_arr21: usize = 0;\n    let mut min_even_index_in_arr22:\
    \ usize = 0;\n    let mut min_even_index_in_arr23: usize = 0;\n    let mut min_even_index_in_arr24:\
    \ usize = 0;\n    let mut min_even_index_in_arr25: usize = 0;\n    let mut min_even_index_in_arr26:\
    \ usize = 0;\n    let mut min_even_index_in_arr27: usize = 0;\n    let mut min_even_index_in_arr28:\
    \ usize = 0;\n    let mut min_even_index_in_arr29: usize = 0;\n    let mut min_even_index_in_arr30:\
    \ usize = 0;\n    let mut min_even_index_in_arr31: usize = 0;\n    let mut min_even_index_in_arr32:\
    \ usize = 0;\n    let mut min_even_index_in_arr33: usize = 0;\n    let mut min_even_index_in_arr34:\
    \ usize = 0;\n    let mut min_even_index_in_arr35: usize = 0;\n    let mut min_even",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5\
    \ = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &x in arr {\n        if x % 2 == 0 {\n            even_values.push(x);\n\
    \            if x < smallest_value {\n                smallest_value = x;\n  \
    \              smallest_index = even_values.len() - 1;\n            }\n      \
    \  }\n    }\n    even_values.sort();\n    let mut even_values_index = even_values.len();\n\
    \    if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values[even_values_index\
    \ - 1] % 2 == 0 {\n        even_values_index -= 1;\n    }\n    let mut even_values_index\
    \ = even_values.len();\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values[even_values_index - 1] % 2 == 0 {\n        even_values_index\
    \ -= 1;\n    }\n    let mut even_values_index = even_values.len();\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values[even_values_index\
    \ - 1] % 2 == 0 {\n        even_values_index -= 1;\n    }\n    let mut even_values_index\
    \ = even_values.len();\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values[even_values_index - 1] % 2 == 0 {\n        even_values_index\
    \ -= 1;\n    }\n    let mut even_values_index = even_values.len();\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values[even_values_index\
    \ - 1] % 2 == 0 {\n        even_values_index -= 1;\n    }\n    let mut even_values_index\
    \ = even_values.len();\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values[even_values_index - 1] % 2 == 0 {\n        even_values_index\
    \ -= 1;\n    }\n    let mut even_values_index = even_values.len();\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values[even_values_index\
    \ - 1] % 2 == 0 {\n        even_values_index -= 1;\n    }\n    let mut even_values_index\
    \ = even_values.len();\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values[even_values_index - 1] % 2 == 0 {\n        even_values_index\
    \ -= 1;\n    }\n    let mut even_values_index = even_values.len();\n    if even_values.len()\
    \ == 0 {\n        return ", "    let mut smallest_even_value = arr[0];\n    let\
    \ mut smallest_even_index = -1;\n    let mut smallest_index = -1;\n    let mut\
    \ even_values = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n  \
    \          even_values.push(i);\n        }\n        if i == smallest_even_value\
    \ {\n            smallest_even_index = even_values.iter().position(|&x| x == i).unwrap();\n\
    \        }\n        if i == smallest_even_value {\n            smallest_even_value\
    \ = i;\n        }\n        if i == smallest_index {\n            smallest_index\
    \ = i;\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if smallest_even_index == -1 {\n        return vec![smallest_even_value];\n\
    \    }\n    if smallest_index == -1 {\n        return vec![smallest_even_index,\
    \ smallest_even_value];\n    }\n    return vec![smallest_index, smallest_even_value];",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2 = 0;\n  \
    \  let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4 = 0;\n\
    \    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6 =\
    \ 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n  \
    \  let mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value_even = even_values[0];\n\
    \    let mut smallest_index_even = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_value_even {\n            smallest_value_even\
    \ = even_values[i];\n            smallest_index_even = i;\n        }\n    }\n\
    \    vec![smallest_value, smallest_index_even]", "    let mut even_values = Vec::new();\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_value < i {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    let mut smallest_even_value =\
    \ even_values[0];\n    let mut smallest_even_index = 0;\n    for i in even_values.iter()\
    \ {\n        if i % 2 == 0 {\n            if smallest_even_value < i {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    let mut result = Vec::new();\n    for i\
    \ in arr.iter() {\n        if i == smallest_value {\n            result.push(smallest_value);\n\
    \            result.push(smallest_index);\n        } else if i == smallest_even_value\
    \ {\n            result.push(smallest_even_value);\n            result.push(smallest_even_index);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx\
    \ = arr.iter().min_by_key(|&x| {\n        if x.is_even() {\n            min_value\
    \ = x;\n            min_idx = x;\n            true\n        } else {\n       \
    \     false\n        }\n    });\n    min_idx.unwrap()", "    let mut min_value\
    \ = arr[0];\n    let mut min_index = 0;\n    let mut even_values = Vec::new();\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if min_value > i {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_index = 0;\n    for i in even_values.iter() {\n        if\
    \ i < smallest_value {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let\
    \ mut even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n            if smallest_value < i {\n         \
    \       smallest_value = i;\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_value_with_even_value = even_values[even_values.len()\
    \ - 1];\n    let mut smallest_index_with_even_value = even_values.len() - 1;\n\
    \    for &i in even_values {\n        if i < smallest_value_with_even_value {\n\
    \            smallest_value_with_even_value = i;\n            smallest_index_with_even_value\
    \ = i;\n        }\n    }\n    let mut even_values_without_smallest_value = even_values.clone();\n\
    \    even_values_without_smallest_value.remove(0);\n    let mut smallest_value_without_even_value\
    \ = even_values_without_smallest_value[0];\n    let mut smallest_index_without_even_value\
    \ = even_values_without_smallest_value.len() - 1;\n    for &i in even_values_without_smallest_value\
    \ {\n        if i < smallest_value_without_even_value {\n            smallest_value_without_even_value\
    \ = i;\n            smallest_index_without_even_value = i;\n        }\n    }\n\
    \    let mut even_values_without_smallest_value_with_even_value = even_values_without_smallest_value.clone();\n\
    \    even_values_without_smallest_value_with_even_value.remove(0);\n    let mut\
    \ smallest_value_without_even_value_with_even_value = even_values_without_smallest_value_with_even_value[0];\n\
    \    let mut smallest_index_without_even_value_with_even_value = even_values_without_smallest_value_with_even_value.len()\
    \ - 1;\n    for &i in even_values_without_smallest_value_with_even_value {\n \
    \       if i < smallest_value_without_even_value_with_even_value {\n         \
    \   smallest_value_without_even_value_with_even_value = i;\n            smallest_index_without_even_value_with_even_value\
    \ = i;\n        }\n    }\n    let mut even_values_without_smallest_value_without_even_value\
    \ = even_values_without_smallest_value_with_even_value.clone();\n    even_values_without_smallest_value_without_even_value.remove(0);\n\
    \    let mut smallest_value_without_even_value_without_even_value = even_values_without_smallest_value_without_even_value[0];\n\
    \    let mut smallest_index_without_even_value_without_even_value = even_values_without_smallest_value_without_even_value.len()\
    \ - 1;\n    for &i in even_values_without_", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_value < i {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i % 2 == 0 {\n            if smallest_even_value < i {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \        }\n        }\n    }\n    vec![smallest_value, smallest_index]", "   \
    \ let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if i < smallest_value {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut even_values_copy = even_values.clone();\n    even_values_copy.remove(smallest_even_index);\n\
    \    even_values_copy.sort();\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.pop();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.pop();\n\
    \    even_values_copy.sort();\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.pop();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.pop();\n\
    \    even_values_copy.sort();\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.pop();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.pop();\n\
    \    even_values_copy.sort();\n    let mut even_values_copy = even_values_copy.clone();\n\
    \    even_values_copy.pop();\n    even_values_copy.sort();\n    let mut even_values_copy\
    \ = even_values_copy.clone();\n    even_values_copy.pop();\n    even_values_copy.sort();\n\
    \    let mut even_values_copy = even_values_copy.clone();\n    even_values_copy.pop();\n\
    \    even_value", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_list = -1;\n    let mut min_even_index_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list = -1;\n    let mut\
    \ min_even_index_in_list_in_list_in_list_in_list = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = -1;\n    let mut min_even_index_in_list_in_list_in_list_in_", "    let mut\
    \ min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_found\
    \ = false;\n    let mut even_values = Vec::new();\n    for i in 0..arr.len() {\n\
    \        if arr[i] % 2 == 0 {\n            if min_even_index == -1 || arr[i] <\
    \ min_even_value{\n                min_even_value = arr[i];\n                min_even_index\
    \ = i;\n                min_even_index_found = true;\n            }\n        \
    \    even_values.push(arr[i]);\n        }\n    }\n    if !min_even_index_found\
    \ {\n        return Vec::new();\n    }\n    let mut even_values_sorted = even_values.clone();\n\
    \    even_values_sorted.sort();\n    let mut min_even_value_sorted = min_even_value;\n\
    \    let mut min_even_index_sorted = min_even_index;\n    for i in 0..even_values_sorted.len()\
    \ {\n        if even_values_sorted[i] == min_even_value_sorted {\n           \
    \ min_even_index_sorted = i;\n        }\n    }\n    let mut even_values_sorted_copy\
    \ = even_values_sorted.clone();\n    even_values_sorted_copy.remove(&min_even_index_sorted);\n\
    \    even_values_sorted_copy.sort();\n    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n\
    \    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n    even_values_sorted_copy.remove(&min_even_index_sorted);\n\
    \    even_values_sorted_copy.sort();\n    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n\
    \    even_values_sorted_copy.remove(&min_even_index_sorted);\n    even_values_sorted_copy.sort();\n\
    \    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n    even_values_sorted_copy.remove(&min_even_index_sorted);\n\
    \    even_values_sorted_copy.sort();\n    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n\
    \    even_values_sorted_copy.remove(&min_even_index_sorted);\n    even_values_sorted_copy.sort();\n\
    \    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n    even_values_sorted_copy.remove(&min_even_index_sorted);\n\
    \    even_values_sorted_copy.sort();\n    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n\
    \    even_values_sorted_copy.remove(&min_even_index_sorted);\n    even_values_sorted_copy.sort();\n\
    \    let mut even_values_sorted_copy = even_values_sorted_copy.clone();\n    even_values_sorted_copy.remove(&min_even_index_sorted);\n\
    \    even_values_sorted_", "    let mut even_values = Vec::new();\n    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    if smallest_even_value == smallest_value {\n        result.push(smallest_even_index);\n\
    \    } else {\n        result.push(smallest_value);\n        result.push(smallest_even_index);\n\
    \    }\n    result", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value\
    \ = 0;\n    for &x in arr {\n        if x % 2 == 0 {\n            even_values.push(x);\n\
    \            if x < smallest_value {\n                smallest_value = x;\n  \
    \              smallest_index = even_values.len() - 1;\n            }\n      \
    \      if x == smallest_value {\n                smallest_even_value = x;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut even_values_sorted = even_values.iter().cloned().collect::<Vec<isize>>();\n\
    \    even_values_sorted.sort();\n    let mut smallest_even_value_sorted = even_values_sorted[0];\n\
    \    let mut smallest_index_sorted = even_values_sorted.len() - 1;\n    for &x\
    \ in even_values_sorted {\n        if x < smallest_even_value_sorted {\n     \
    \       smallest_even_value_sorted = x;\n            smallest_index_sorted = even_values_sorted.len()\
    \ - 1;\n        }\n        if x == smallest_even_value_sorted {\n            smallest_index_sorted\
    \ = even_values_sorted.len() - 1;\n        }\n    }\n    let mut even_values_sorted_sorted\
    \ = even_values_sorted.iter().cloned().collect::<Vec<isize>>();\n    even_values_sorted_sorted.sort();\n\
    \    let mut smallest_even_value_sorted_sorted = even_values_sorted_sorted[0];\n\
    \    let mut smallest_index_sorted_sorted = even_values_sorted_sorted.len() -\
    \ 1;\n    for &x in even_values_sorted_sorted {\n        if x < smallest_even_value_sorted_sorted\
    \ {\n            smallest_even_value_sorted_sorted = x;\n            smallest_index_sorted_sorted\
    \ = even_values_sorted_sorted.len() - 1;\n        }\n        if x == smallest_even_value_sorted_sorted\
    \ {\n            smallest_index_sorted_sorted = even_values_sorted_sorted.len()\
    \ - 1;\n        }\n    }\n    let mut even_values_sorted_sorted_sorted = even_values_sorted_sorted.iter().cloned().collect::<Vec<isize>>();\n\
    \    even_values_sorted_sorted_sorted.sort();\n    let mut smallest_even_value_sorted_sorted_sorted\
    \ = even_values_sorted_sorted_sorted[0];\n    let mut smallest_index_sorted_sorted_sorted\
    \ = even_values_sorted_sorted_sorted.len() - 1;\n    for &x in even_values_sorted_sorted_sorted\
    \ {\n        if x < smallest_even_value_sorted_sorted_sorted {", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx = 1;\n  \
    \  for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = min_idx;\n\
    \            }\n        } else {\n            if min_value == i {\n          \
    \      min_idx++;\n            }\n        }\n    }\n    if min_value == arr[0]\
    \ {\n        min_idx++;\n    }\n    vec![min_value, min_idx]", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_list\
    \ = -1;\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n         \
    \   if min_even_index == -1 || arr[i] < min_even_value{\n                min_even_value\
    \ = arr[i];\n                min_even_index = i;\n                min_even_index_in_list\
    \ = i;\n            }\n        }\n    }\n    let mut result = vec![];\n    if\
    \ min_even_index != -1 {\n        result.push(min_even_value);\n        result.push(min_even_index);\n\
    \        result.push(min_even_index_in_list);\n    }\n    result", "    let mut\
    \ even_values = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    let mut smallest_even_value = 0;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ smallest_value < i {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n                smallest_even_value = i;\n            }\n        } else\
    \ {\n            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even", "    let mut even_values\
    \ = vec![];\n    let mut min_value = arr[0];\n    let mut min_value_index = -1;\n\
    \    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n\
    \            if arr[i] < min_value {\n                min_value = arr[i];\n  \
    \              min_value_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_value = even_values[0];\n\
    \    let mut smallest_value_index = -1;\n    for i in 0..even_values.len() {\n\
    \        if even_values[i] < smallest_value {\n            smallest_value = even_values[i];\n\
    \            smallest_value_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in 0..even_values.len() {\n        if even_values[i] == smallest_value\
    \ {\n            result.push(i);\n        }\n    }\n    if result.len() == 0 {\n\
    \        return vec![];\n    }\n    result.push(smallest_value_index);\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2\
    \ == 0 {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in 0..even_values.len() {\n        if\
    \ i == smallest_even_index {\n            result.push(i);\n        }\n    }\n\
    \    return result;", "    let mut even_values = Vec::new();\n    let mut min_value\
    \ = arr[0];\n    let mut min_index = -1;\n    let mut min_even_value = 0;\n  \
    \  for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values.push(arr[i]);\n\
    \            if arr[i] < min_value {\n                min_value = arr[i];\n  \
    \              min_index = i;\n            }\n            if arr[i] < min_even_value\
    \ {\n                min_even_value = arr[i];\n            }\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut even_values_iter\
    \ = even_values.iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.into_iter().cloned().collect::<Vec<_>>();\n    let mut even_values_iter\
    \ = even_values_iter.", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut mut_smallest_value = smallest_value;\n    let mut mut_smallest_index\
    \ = smallest_index;\n    let mut mut_mut_smallest_value = mut_smallest_value;\n\
    \    let mut mut_mut_smallest_index = mut_smallest_index;\n    let mut mut_mut_mut_smallest_value\
    \ = mut_mut_smallest_value;\n    let mut mut_mut_mut_smallest_index = mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_smallest_value = mut_mut_mut_smallest_value;\n  \
    \  let mut mut_mut_mut_mut_smallest_index = mut_mut_mut_smallest_index;\n    let\
    \ mut mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_smallest_value;\n \
    \   let mut mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mu",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in 0..arr.len() {\n        if arr[i] % 2\
    \ == 0 {\n            even_values.push(arr[i]);\n            if arr[i] < smallest_value\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in 0..even_values.len() {\n \
    \       if even_values[i] < smallest_even_value {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_index = i;\n        }\n    }\n\
    \    vec![smallest_value, smallest_even_index]", "    let mut min_even_value =\
    \ arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = 0;\n    let mut even_values = vec![];\n    for i in arr.iter().cloned() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if min_even_index\
    \ == -1 || min_even_index > i {\n                min_even_index = i;\n       \
    \         min_even_index_in_arr = min_even_index_in_arr + 1;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if min_even_index == -1 {\n        return vec![];\n    }\n    let mut\
    \ min_even_value = even_values[0];\n    let mut min_even_index = min_even_index_in_arr;\n\
    \    for i in even_values.iter().cloned() {\n        if i % 2 == 0 {\n       \
    \     if min_even_index == -1 || min_even_index > i {\n                min_even_index\
    \ = i;\n                min_even_value = i;\n            }\n        }\n    }\n\
    \    let mut even_values = vec![];\n    for i in arr.iter().cloned() {\n     \
    \   if i % 2 == 0 {\n            even_values.push(i);\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    if min_even_index\
    \ == -1 {\n        return vec![];\n    }\n    let mut even_values = vec![];\n\
    \    for i in even_values.iter().cloned() {\n        if i % 2 == 0 {\n       \
    \     if min_even_index == -1 || min_even_index > i {\n                min_even_index\
    \ = i;\n                min_even_value = i;\n            }\n        }\n    }\n\
    \    if min_even_index == -1 {\n        return vec![];\n    }\n    let mut even_values\
    \ = vec![];\n    for i in even_values.iter().cloned() {\n        if i % 2 == 0\
    \ {\n            if min_even_index == -1 || min_even_index > i {\n           \
    \     min_even_index = i;\n                min_even_value = i;\n            }\n\
    \        }\n    }\n    if min_even_index == -1 {\n        return vec![];\n   \
    \ }\n    let mut even_values = vec![];\n    for i in even_values.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_even_index == -1 || min_even_index\
    \ > i {\n                min_even_index = i;\n                min_even_value =\
    \ i;\n            }\n        }\n    }\n    if min_even_index == -1 {\n       \
    \ return vec![];\n    }\n    let mut even_values = vec![];\n    for i in even_values.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_even_index == -1 || min_even_index\
    \ > i {\n                min_even_index = ", "    let mut min_value = arr[0];\n\
    \    let mut min_index = 0;\n    let mut min_even_value = false;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            if min_even_value{\n           \
    \     min_value = i;\n                min_index = i;\n            }\n        \
    \    else{\n                min_even_value = true;\n            }\n        }\n\
    \    }\n    vec![min_value, min_index]", "    let mut min_value = arr[0];\n  \
    \  let mut min_index = 0;\n    for &x in arr {\n        if x % 2 == 0 {\n    \
    \        if min_value < x {\n                min_value = x;\n                min_index\
    \ = x;\n            }\n        }\n    }\n    let mut result: Vec<isize> = vec![];\n\
    \    if min_value == arr[0] {\n        result.push(min_value);\n        result.push(min_index);\n\
    \    } else {\n        let mut current_index = 0;\n        let mut current_value\
    \ = min_value;\n        while current_value != arr[0] {\n            if current_index\
    \ == min_index {\n                result.push(current_value);\n              \
    \  result.push(current_index);\n                break;\n            }\n      \
    \      current_index += 1;\n            current_value = arr[current_index];\n\
    \        }\n    }\n    result", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for i in\
    \ 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values.push(i);\n\
    \            if arr[i] < smallest_value {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ even_values.is_empty() {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ i in even_values.iter().rev() {\n        if i / 2 == smallest_even_value {\n\
    \            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    even_values.remove(smallest_even_index);\n    even_values.sort();\n\
    \    even_values.reverse();\n    even_values.insert(0, smallest_even_value);\n\
    \    even_values", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n     \
    \   return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for &i in even_values\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut even_values_index\
    \ = even_values.iter().enumerate().filter(|&(_, v)| v == smallest_even_value).map(|(_,\
    \ v)| v).collect::<Vec<_>>();\n    even_values_index.sort_by_key(|&i| i.0);\n\
    \    even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i.1).collect::<Vec<_>>();\n    even_values_index.sort_by_key(|&i| i.0);\n  \
    \  even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i.1).collect::<Vec<_>>();\n    even_values_index.sort_by_key(|&i| i.0);\n  \
    \  even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i.1).collect::<Vec<_>>();\n    even_values_index.sort_by_key(|&i| i.0);\n  \
    \  even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i.1).collect::<Vec<_>>();\n    even_values_index.sort_by_key(|&i| i.0);\n  \
    \  even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i.1).collect::<Vec<_>>();\n    even_values_index.sort_by_key(|&i| i.0);\n  \
    \  even_values_index.dedup();\n    let mut even_values_index = even_values_index.into_iter().map(|&i|\
    \ i.1).collect::<Vec<_>>();\n    even_value", "    let mut min_even_value = arr[0];\n\
    \    let mut min_even_index = -1;\n    let mut min_even_index_in_arr = 0;\n  \
    \  let mut min_even_index_in_arr2 = 0;\n    let mut min_even_index_in_arr3 = 0;\n\
    \    let mut min_even_index_in_arr4 = 0;\n    let mut min_even_index_in_arr5 =\
    \ 0;\n    let mut min_even_index_in_arr6 = 0;\n    let mut min_even_index_in_arr7\
    \ = 0;\n    let mut min_even_index_in_arr8 = 0;\n    let mut min_even_index_in_arr9\
    \ = 0;\n    let mut min_even_index_in_arr10 = 0;\n    let mut min_even_index_in_arr11\
    \ = 0;\n    let mut min_even_index_in_arr12 = 0;\n    let mut min_even_index_in_arr13\
    \ = 0;\n    let mut min_even_index_in_arr14 = 0;\n    let mut min_even_index_in_arr15\
    \ = 0;\n    let mut min_even_index_in_arr16 = 0;\n    let mut min_even_index_in_arr17\
    \ = 0;\n    let mut min_even_index_in_arr18 = 0;\n    let mut min_even_index_in_arr19\
    \ = 0;\n    let mut min_even_index_in_arr20 = 0;\n    let mut min_even_index_in_arr21\
    \ = 0;\n    let mut min_even_index_in_arr22 = 0;\n    let mut min_even_index_in_arr23\
    \ = 0;\n    let mut min_even_index_in_arr24 = 0;\n    let mut min_even_index_in_arr25\
    \ = 0;\n    let mut min_even_index_in_arr26 = 0;\n    let mut min_even_index_in_arr27\
    \ = 0;\n    let mut min_even_index_in_arr28 = 0;\n    let mut min_even_index_in_arr29\
    \ = 0;\n    let mut min_even_index_in_arr30 = 0;\n    let mut min_even_index_in_arr31\
    \ = 0;\n    let mut min_even_index_in_arr32 = 0;\n    let mut min_even_index_in_arr33\
    \ = 0;\n    let mut min_even_index_in_arr34 = 0;\n    let mut min_even_index_in_arr35\
    \ = 0;\n    let mut min_even_index_in_arr36 = 0;\n    let mut min_even_index_in_arr37\
    \ = 0;\n    let mut min_even_index_in_arr38 = 0;\n    let mut min_even_index_in_arr39\
    \ = 0;\n    let mut min_even_index_in_arr40 = 0;\n    let mut min_even_index_in_arr41\
    \ = 0;\n    let mut min_even_index_in_arr42 = 0;\n    let mut min_even_index_in_arr43\
    \ = 0;\n    let mut min_even_index_in_arr44 = 0;\n    let mut min_even_index_in_arr45\
    \ = 0;\n    let mut min_even", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ % 2 == 0 {\n                min_value = i;\n                min_idx = i;\n \
    \           }\n        } else {\n            if min_value % 2 != 0 {\n       \
    \         min_value = i;\n                min_idx = i;\n            }\n      \
    \  }\n    }\n    let mut result = vec![min_value, min_idx];\n    if min_value\
    \ == arr[0] {\n        result = vec![min_value, min_idx];\n    }\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = even_values.iter().next().unwrap();\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    let mut even_values_iter = even_values.iter().rev();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peekable();\n    let mut even_values_iter = even_values_iter.peekable();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peekable();\n    let mut even_values_iter = even_values_iter.peekable();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peekable();\n    let mut even_values_iter = even_values_iter.peekable();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peekable();\n    let mut even_values_iter = even_values_iter.peekable();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peekable();\n    let mut even_values_iter = even_values_iter.peekable();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peekable();\n    let mut even_values_iter = even_values_iter.peekable();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peekable();\n    let mut even_values_iter = even_values_iter.peekable();\n\
    \    let mut even_values_iter = even_values_iter.peekable();\n    let mut even_values_iter\
    \ = even_values_iter.peek", "    let mut min_val = arr[0];\n    let mut min_idx\
    \ = 0;\n    let mut min_idx = arr.iter().min_by_key(|&x| {\n        if x % 2 ==\
    \ 0 {\n            x.to_isize() < min_val\n        } else {\n            x.to_isize()\
    \ == min_val\n        }\n    });\n    min_idx\n        .to_vec()\n        .iter()\n\
    \        .map(|&x| x.to_isize())\n        .collect()", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &x in arr {\n        if x % 2 == 0 {\n            even_values.push(x);\n\
    \            if x < smallest_value {\n                smallest_value = x;\n  \
    \              smallest_index = even_values.len() - 1;\n            }\n      \
    \  }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_value_with_even_value = even_values[smallest_index];\n \
    \   let mut smallest_index_with_even_value = smallest_index;\n    for &x in even_values\
    \ {\n        if x < smallest_value_with_even_value {\n            smallest_value_with_even_value\
    \ = x;\n            smallest_index_with_even_value = even_values.len() - 1;\n\
    \        }\n    }\n    let mut even_values_without_smallest_value = even_values.clone();\n\
    \    even_values_without_smallest_value.remove(&smallest_index_with_even_value);\n\
    \    even_values_without_smallest_value.remove(0);\n    return even_values_without_smallest_value;",
  "    let mut even_values = vec![];\n    let mut min_value = i32::MAX;\n    let mut\
    \ min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if i < min_value {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut smallest_value = even_values_iter.next().unwrap();\n\
    \    let mut smallest_idx = -1;\n    for i in even_values_iter {\n        if i\
    \ < smallest_value {\n            smallest_value = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut smallest_value = even_values_iter.next().unwrap();\n    let mut smallest_idx\
    \ = -1;\n    for i in even_values_iter {\n        if i < smallest_value {\n  \
    \          smallest_value = i;\n            smallest_idx = i;\n        }\n   \
    \ }\n    let mut even_values_iter = even_values.iter();\n    let mut smallest_value\
    \ = even_values_iter.next().unwrap();\n    let mut smallest_idx = -1;\n    for\
    \ i in even_values_iter {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_idx = i;\n        }\n    }\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut smallest_value = even_values_iter.next().unwrap();\n\
    \    let mut smallest_idx = -1;\n    for i in even_values_iter {\n        if i\
    \ < smallest_value {\n            smallest_value = i;\n            smallest_idx\
    \ = i;\n        }\n    }\n    let mut even_values_iter = even_values.iter();\n\
    \    let mut smallest_value = even_values_iter.next().unwrap();\n    let mut smallest_idx\
    \ = -1;\n    for i in even_values_iter {\n        if i < smallest_value {\n  \
    \          smallest_value = i;\n            smallest_idx = i;\n        }\n   \
    \ }\n    let mut even_values_iter = even_values.iter();\n    let mut smallest_value\
    \ = even_values_iter.next().unwrap();\n    let mut smallest_idx = -1;\n    for\
    \ i in even_values_iter {\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_idx = i;\n        }\n    }\n    let mut even_values_iter\
    \ = even_values.iter();\n    let mut smallest_value = even_values_iter.next().unwrap();\n\
    \    let mut smallest_idx = -1;\n    for i in even_values_iter {\n", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n        \
    \    even_values.push(i);\n            if i < smallest_value {\n             \
    \   smallest_value = i;\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    even_values.sort();\n    even_values.dedup();\n    let\
    \ mut even_values_index = 0;\n    let mut even_values_value = even_values[even_values_index];\n\
    \    let mut even_values_index = even_values_index + 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ + 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index + 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ + 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index + 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ + 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index + 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ + 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index + 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ + 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index + 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ + 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index + 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ + 1;\n    let mut even_values_value = even_values[even_values_", "    let mut\
    \ even_values = vec![];\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = -1;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    if smallest_even_index == -1 {\n        result.push(smallest_value, smallest_index);\n\
    \    } else {\n        result.push(smallest_even_value);\n        result.push(smallest_even_index);\n\
    \    }\n    return result;", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    if smallest_even_value ==\
    \ smallest_value {\n        result.push(smallest_even_index, smallest_value);\n\
    \    } else {\n        result.push(smallest_even_index);\n    }\n    result",
  "    let mut min_val = arr[0];\n    let mut min_idx = -1;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == arr[0] {\n        return vec![];\n    }\n    let mut ans = vec![];\n\
    \    for i in 0..arr.len() {\n        if i % 2 == 0 {\n            if min_val\
    \ == i {\n                ans.push(min_idx);\n            }\n        }\n    }\n\
    \    ans", "    let mut even_values = Vec::new();\n    let mut min_value = arr[0];\n\
    \    let mut min_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n            if i < min_value {\n      \
    \          min_value = i;\n                min_index = i;\n            }\n   \
    \     }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut smallest_value = even_values[0];\n    let mut smallest_index = 0;\n\
    \    for i in even_values.iter() {\n        if i < smallest_value {\n        \
    \    smallest_value = i;\n            smallest_index = i;\n        }\n    }\n\
    \    let mut result = vec![];\n    for i in even_values.iter() {\n        if i\
    \ == smallest_value {\n            result.push(smallest_index, i);\n        }\n\
    \    }\n    result", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_node_index = even_values.iter().position(|&i| i % 2 == 0).unwrap();\n\
    \    for &i in even_values {\n        if i < smallest_even_value {\n         \
    \   smallest_even_value = i;\n            smallest_even_node_index = i;\n    \
    \    }\n    }\n    even_values.remove(&mut smallest_even_node_index);\n    even_values.sort_unstable();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n  \
    \          even_values.push(i);\n            if i < smallest_value {\n       \
    \         smallest_value = i;\n                smallest_index = i;\n         \
    \   }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values.iter().position(|x| x == smallest_value);\n    for i in even_values.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if i < smallest_even_value {\n     \
    \           smallest_even_value = i;\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    let mut result = vec![];\n    for i in even_values.iter()\
    \ {\n        if i == smallest_value {\n            result.push(i);\n        }\n\
    \    }\n    if result.len() == 0 {\n        return vec![];\n    }\n    result.push(smallest_value);\n\
    \    result.push(smallest_index);\n    result", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n   \
    \         if i < smallest_value {\n                smallest_value = i;\n     \
    \           smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for &i in even_values {\n        if\
    \ i < smallest_even_value {\n            smallest_even_value = i;\n          \
    \  smallest_even_index = i;\n        }\n    }\n    let mut result = vec![];\n\
    \    if smallest_even_index == 0 {\n        result.push(smallest_value);\n   \
    \     result.push(smallest_index);\n    } else {\n        result.push(smallest_value);\n\
    \        result.push(smallest_even_index);\n    }\n    result", "    let mut smallest_even_value\
    \ = arr[0];\n    let mut smallest_even_index = -1;\n    let mut smallest_even_index_in_list\
    \ = -1;\n    let mut smallest_even_index_in_list_in_list = -1;\n    let mut smallest_even_index_in_list_in_list_in_list\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ == -1 || smallest_even_value < i {\n                smallest_even_value = i;\n\
    \                smallest_even_index = i;\n            }\n        } else {\n \
    \           if smallest_even_index_in_list == -1 || smallest_even_value < i {\n\
    \                smallest_even_index_in_list = i;\n                smallest_even_index_in_list_in_list\
    \ = i;\n            }\n        }\n    }\n    if smallest_even_index != -1 {\n\
    \        let mut smallest_even_index_in_list_in_list_in_list_in_list = smallest_even_index_in_list_in_list;\n\
    \        for &i in arr {\n            if i % 2 == 0 {\n                if smallest_even_index_in_list_in_list\
    \ == -1 || smallest_even_value < i {\n                    smallest_even_index_in_list_in_list\
    \ = i;\n                    smallest_even_index_in_list_in_list_in_list = i;\n\
    \                }\n            } else {\n                if smallest_even_index_in_list_in_list_in_list\
    \ == -1 || smallest_even_value < i {\n                    smallest_even_index_in_list_in_list_in_list\
    \ = i;\n                    smallest_even_index_in_list_in_list_in_list_in_list\
    \ = i;\n                }\n            }\n        }\n        if smallest_even_index_in_list_in_list_in_list\
    \ != -1 {\n            let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = smallest_even_index_in_list_in_list_in_list_in_list;\n            for &i in\
    \ arr {\n                if i % 2 == 0 {\n                    if smallest_even_index_in_list_in_list_in_list_in_list\
    \ == -1 || smallest_even_value < i {\n                        smallest_even_index_in_list_in_list_in_list_in_list\
    \ = i;\n                        smallest_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = i;\n                    }\n                } else {\n                    if\
    \ smallest_even_index_in_list_in_list_in_list_in_list == -1 || smallest_even_value\
    \ < i {\n                        smallest_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = i;\n                        smallest_even_index_in_list_in_list_in_list_in_list_in_list\
    \ = i;\n                    }\n                }\n            }\n            if\
    \ smallest_even_index_in_list_in_list_in_list_in_list != -1 {\n              \
    \  let mut smallest_even_index_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = smalle", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().rev().next().unwrap();\n\
    \    for i in even_values.iter().rev() {\n        if i % 2 == 0 {\n          \
    \  if i < smallest_even_value {\n                smallest_even_value = i;\n  \
    \              smallest_even_index = i;\n            }\n        }\n    }\n   \
    \ even_values.remove(smallest_even_index);\n    even_values.insert(0, smallest_even_value);\n\
    \    even_values.insert(0, smallest_index);\n    return even_values;", "    let\
    \ mut min_even_value: isize = 0;\n    let mut min_even_index: usize = 0;\n   \
    \ let mut min_value: isize = 0;\n    let mut min_index: usize = 0;\n    let mut\
    \ min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    let mut min_idx2 = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_value % 2 == 0 {\n                if min_idx == i {\n    \
    \                min_idx2 = i;\n                }\n            } else {\n    \
    \            if min_idx2 == i {\n                    min_idx = i;\n          \
    \      }\n            }\n        } else {\n            if min_value % 2 != 0 {\n\
    \                if min_idx2 == i {\n                    min_idx = i;\n      \
    \          }\n            }\n        }\n        min_value = i;\n    }\n    let\
    \ mut ret: Vec<isize> = vec![];\n    if min_idx2 == min_idx {\n        ret.push(min_idx);\n\
    \    } else {\n        ret.push(min_idx2);\n    }\n    ret", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut smallest_even_value = 0;\n    let mut even_values_index =\
    \ 0;\n    for &x in arr {\n        if x % 2 == 0 {\n            even_values.push(x);\n\
    \            if smallest_value == x {\n                smallest_even_value = x;\n\
    \                smallest_index = even_values_index;\n            }\n        \
    \    even_values_index += 1;\n        }\n    }\n    if even_values_index == 0\
    \ {\n        return vec![];\n    }\n    if even_values_index == even_values.len()\
    \ {\n        return vec![smallest_even_value];\n    }\n    if even_values_index\
    \ > even_values.len() {\n        return vec![];\n    }\n    if even_values_index\
    \ == even_values.len() - 1 {\n        if even_values[even_values_index] % 2 ==\
    \ 0 {\n            return vec![smallest_even_value];\n        }\n    }\n    let\
    \ mut even_values_index = even_values_index - 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index - 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index - 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index - 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index - 1;\n    let mut even_values_value\
    \ = even_values[even_values_index];\n    let mut even_values_index = even_values_index\
    \ - 1;\n    let mut even_values_value = even_values[even_values_index];\n    let\
    \ mut even_values_index = even_values_index - 1;\n    let ", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i % 2 == 0 {\n            if i < smallest_even_value {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \        }\n        }\n    }\n    let mut smallest_even_index_in_list = smallest_index;\n\
    \    for i in even_values.iter() {\n        if i == smallest_even_value {\n  \
    \          smallest_even_index_in_list = i;\n        }\n    }\n    let mut result\
    \ = vec![];\n    for i in even_values.iter() {\n        if i == smallest_even_value\
    \ {\n            result.push(i);\n        }\n    }\n    result.push(smallest_even_value);\n\
    \    result.push(smallest_even_index_in_list);\n    result", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value {\n                smallest_value = i;\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = 0;\n    for i in even_values.iter() {\n   \
    \     if i % 2 == 0 {\n            if i < smallest_even_value {\n            \
    \    smallest_even_value = i;\n                smallest_even_index = i;\n    \
    \        }\n        }\n    }\n    let mut result = vec![];\n    for i in 0..arr.len()\
    \ {\n        if arr[i] == smallest_even_value {\n            result.push(smallest_even_index);\n\
    \        }\n    }\n    result", "    let mut even_values = vec![0; arr.len()];\n\
    \    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            even_values[i]\
    \ = 1;\n            if arr[i] < smallest_value {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        } else\
    \ {\n            even_values[i] = 0;\n        }\n    }\n    if even_values.iter().any(|&x|\
    \ x == 0) {\n        return vec![];\n    }\n    even_values.iter().cloned().filter(|&x|\
    \ x == 1).cloned().collect()", "    let mut even_values = vec![];\n    let mut\
    \ min_value = arr[0];\n    let mut min_index = -1;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ i < min_value {\n                min_value = i;\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if even_values.is_empty() {\n     \
    \   return vec![];\n    }\n    let mut smallest_value = even_values[0];\n    let\
    \ mut smallest_index = -1;\n    for i in even_values.iter().cloned() {\n     \
    \   if i < smallest_value {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let\
    \ mut min_value = arr[0];\n    let mut min_idx = -1;\n    let mut min_idx2 = -1;\n\
    \    for i in 0..arr.len() {\n        if arr[i] < min_value {\n            min_value\
    \ = arr[i];\n            min_idx = i;\n        }\n        if arr[i] < min_value\
    \ {\n            min_idx2 = i;\n        }\n    }\n    let mut ret: Vec<isize>\
    \ = vec![];\n    if min_idx2 == min_idx {\n        ret.push(min_value);\n    }\
    \ else {\n        ret.push(min_value);\n        ret.push(min_idx2);\n    }\n \
    \   ret", "    let mut even_values = vec![0; arr.len()];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in 0..arr.len() {\n  \
    \      if arr[i] % 2 == 0 {\n            even_values[i] = arr[i];\n          \
    \  if even_values[i] < smallest_value {\n                smallest_value = even_values[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    even_values.sort_unstable();\n\
    \    even_values.dedup();\n    let mut result: Vec<isize> = vec![smallest_value,\
    \ smallest_index];\n    for i in 0..arr.len() {\n        if even_values[i] !=\
    \ arr[i] {\n            result.push(arr[i]);\n        }\n    }\n    result", " \
    \   let mut min_value = arr[0];\n    let mut min_index = 0;\n    for &x in arr\
    \ {\n        if x % 2 == 0 {\n            min_value = x;\n            min_index\
    \ = arr.iter().position(|&x| x == min_value).unwrap();\n        }\n    }\n   \
    \ vec![min_value, min_index]", "    let mut even_values = Vec::new();\n    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_value <= i {\n                smallest_value = i;\n \
    \               smallest_index = i;\n            }\n            if smallest_even_value\
    \ <= i {\n                smallest_even_value = i;\n            }\n        }\n\
    \    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    let\
    \ mut even_values_sorted = even_values.clone();\n    even_values_sorted.sort();\n\
    \    let mut smallest_even_value_sorted = even_values_sorted[0];\n    let mut\
    \ smallest_index_sorted = even_values_sorted.len();\n    for i in even_values_sorted.iter()\
    \ {\n        if smallest_even_value_sorted > i {\n            smallest_even_value_sorted\
    \ = i;\n            smallest_index_sorted = i;\n        }\n    }\n    let mut\
    \ even_values_sorted_copy = even_values_sorted.clone();\n    even_values_sorted_copy.sort();\n\
    \    let mut smallest_even_value_sorted_copy = even_values_sorted_copy[0];\n \
    \   let mut smallest_index_sorted_copy = even_values_sorted_copy.len();\n    for\
    \ i in even_values_sorted_copy.iter() {\n        if smallest_even_value_sorted_copy\
    \ > i {\n            smallest_even_value_sorted_copy = i;\n            smallest_index_sorted_copy\
    \ = i;\n        }\n    }\n    let mut even_values_sorted_copy = even_values_sorted.clone();\n\
    \    even_values_sorted_copy.sort();\n    let mut smallest_even_value_sorted_copy\
    \ = even_values_sorted_copy[0];\n    let mut smallest_index_sorted_copy = even_values_sorted_copy.len();\n\
    \    for i in even_values_sorted_copy.iter() {\n        if smallest_even_value_sorted_copy\
    \ > i {\n            smallest_even_value_sorted_copy = i;\n            smallest_index_sorted_copy\
    \ = i;\n        }\n    }\n    let mut even_values_sorted_copy = even_values_sorted.clone();\n\
    \    even_values_sorted_copy.sort();\n    let mut smallest_even_value_sorted_copy\
    \ = even_values_sorted_copy[0];\n    let mut smallest_index_sorted_copy = even_values_sorted_copy.len();\n\
    \    for i in even_values_sorted_copy.iter() {\n        if smallest_even_value_sorted_copy\
    \ > i {\n            smallest_even_value_sorted_copy = i;\n            smallest_index_sorted_copy\
    \ = i;\n        }\n    }\n    let mut even_values_sorted_copy = even_values_sorted.clone();",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n        }\n        if i == smallest_value {\n \
    \           smallest_index = arr.iter().position(|&i| i == smallest_value).unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.is_empty() {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values.iter().position(|&i| i == smallest_even_value).unwrap();\n   \
    \ if smallest_even_index == 0 {\n        return vec![];\n    }\n    let mut even_values_copy\
    \ = even_values.clone();\n    even_values_copy.remove(even_values_copy.len() -\
    \ 1);\n    even_values_copy.sort();\n    even_values_copy.push(smallest_even_value);\n\
    \    even_values_copy.sort();\n    even_values_copy.push(smallest_even_index);\n\
    \    even_values_copy", "    let mut even_values = vec![];\n    let mut min_value\
    \ = arr[0];\n    let mut min_value_index = -1;\n    for i in 0..arr.len() {\n\
    \        if arr[i] % 2 == 0 {\n            even_values.push(i);\n            if\
    \ arr[i] < min_value {\n                min_value = arr[i];\n                min_value_index\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_value = min_value;\n    let\
    \ mut smallest_value_index = min_value_index;\n    for i in even_values.iter()\
    \ {\n        if arr[i] < smallest_value {\n            smallest_value = arr[i];\n\
    \            smallest_value_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in even_values.iter() {\n        if i == smallest_value_index\
    \ {\n            result.push(smallest_value);\n        }\n    }\n    result",
  "    let mut even_values = vec![];\n    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if smallest_value < i {\n     \
    \           smallest_value = i;\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for i in even_values.iter() {\n        if i % 2 == 0 {\n         \
    \   if smallest_even_value < i {\n                smallest_even_value = i;\n \
    \               smallest_even_index = i;\n            }\n        }\n    }\n  \
    \  let mut result = vec![];\n    for i in arr.iter() {\n        if i == smallest_value\
    \ {\n            result.push(smallest_even_index);\n        }\n    }\n    return\
    \ result;", "    let mut even_values = Vec::new();\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    if smallest_even_value ==\
    \ smallest_value {\n        result.push(smallest_even_index);\n    } else {\n\
    \        result.push(smallest_value);\n        result.push(smallest_even_index);\n\
    \    }\n    result", "    let mut even_values = vec![0; arr.len()];\n    let mut\
    \ min_value = arr[0];\n    let mut min_index = -1;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] % 2 == 0 {\n            even_values[i] = arr[i];\n    \
    \        if arr[i] < min_value {\n                min_value = arr[i];\n      \
    \          min_index = i;\n            }\n        }\n    }\n    if min_index ==\
    \ -1 {\n        return vec![];\n    }\n    let mut even_values_sorted = vec![0;\
    \ arr.len()];\n    for i in 0..arr.len() {\n        if even_values[i] < min_value\
    \ {\n            even_values_sorted[i] = even_values[i];\n        }\n    }\n \
    \   let mut min_value_sorted = min_value;\n    let mut min_index_sorted = min_index;\n\
    \    for i in 0..arr.len() {\n        if even_values_sorted[i] < min_value_sorted\
    \ {\n            min_value_sorted = even_values_sorted[i];\n            min_index_sorted\
    \ = i;\n        }\n    }\n    let mut even_values_sorted_sorted = even_values_sorted;\n\
    \    for i in 0..arr.len() {\n        if even_values_sorted_sorted[i] < min_value_sorted\
    \ {\n            even_values_sorted_sorted[i] = even_values_sorted[i];\n     \
    \   }\n    }\n    let mut min_value_sorted_sorted = min_value_sorted;\n    let\
    \ mut min_index_sorted_sorted = min_index_sorted;\n    for i in 0..arr.len() {\n\
    \        if even_values_sorted_sorted[i] < min_value_sorted_sorted {\n       \
    \     min_value_sorted_sorted = even_values_sorted_sorted[i];\n            min_index_sorted_sorted\
    \ = i;\n        }\n    }\n    let mut even_values_sorted_sorted_sorted = even_values_sorted_sorted;\n\
    \    for i in 0..arr.len() {\n        if even_values_sorted_sorted_sorted[i] <\
    \ min_value_sorted_sorted {\n            even_values_sorted_sorted_sorted[i] =\
    \ even_values_sorted_sorted[i];\n        }\n    }\n    let mut min_value_sorted_sorted_sorted\
    \ = min_value_sorted_sorted;\n    let mut min_index_sorted_sorted_sorted = min_index_sorted_sorted;\n\
    \    for i in 0..arr.len() {\n        if even_values_sorted_sorted_sorted[i] <\
    \ min_value_sorted_sorted_sorted {\n            min_value_sorted_sorted_sorted\
    \ = even_values_sorted_sorted_sorted[i];\n            min_index_sorted_sorted_sorted\
    \ = i;\n        }\n    }\n    let mut even_values_sorted_sorted_sorted_sorted\
    \ = even_values_sorted_sorted_sorted;\n    for i in 0..arr.len() {\n        if\
    \ even_values_sorted_sorted_sorted_sorted[i] < min_value_sorted_sorted_sorted\
    \ {\n            even_values_sorted_sorted_sorted_sorted[i] = even_values_sorted_sorted_sorted[i];\n\
    \        }\n", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values.push(i);\n            if i < smallest_value\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n    let mut\
    \ smallest_even_index = 0;\n    for &i in even_values {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    let mut result = vec![];\n    if smallest_even_index ==\
    \ smallest_index {\n        result.push(smallest_even_value);\n    } else {\n\
    \        result.push(smallest_even_index, smallest_index);\n    }\n    result"]
stop_tokens:
- "\n}"
