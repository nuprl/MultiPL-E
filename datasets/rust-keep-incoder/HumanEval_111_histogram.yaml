name: HumanEval_111_histogram
language: rust
prompt: "use std::collections::HashMap;\n\n/// Given a string representing a space\
  \ separated lowercase letters, return a dictionary\n/// of the letter with the most\
  \ repetition and containing the corresponding count.\n/// If several letters have\
  \ the same occurrence, return all of them.\n/// Example:\n/// histogram('a b c')\
  \ == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n///\
  \ histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b':\
  \ 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String, isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
  a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
  \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
  a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
  a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 1),\
  \ (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"), 1)]));\n\
  \    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
  r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
  b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
  r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1), (String::from(\"\
  g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")), HashMap::from([]));\n\
  \    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
  a\"), 1)]));\n}\n"
completions: []
stop_tokens:
- "\n}"
