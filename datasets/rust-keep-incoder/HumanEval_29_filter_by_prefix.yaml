name: HumanEval_29_filter_by_prefix
language: rust
prompt: "/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfn filter_by_prefix(strings:\
  \ Vec<String>, prefix: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    let mut strings = strings.clone();\n    strings.retain(|s| s.starts_with(prefix));\n\
    \    strings", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    let mut\
    \ result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    let mut prefix = prefix.to_owned();\n    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    result", "    strings\n  \
    \      .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    let mut prefix = prefix.to_owned();\n    let mut strings\
    \ = strings.to_owned();\n    while strings.len() > 0 {\n        let mut index\
    \ = strings.len() - 1;\n        while index >= 0 && strings[index] == prefix {\n\
    \            index -= 1;\n        }\n        if index >= 0 {\n            strings.remove(0,\
    \ index + 1);\n        } else {\n            break;\n        }\n    }\n    strings",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ prefix = prefix.to_string();\n    prefix.push('/');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    let mut strings = strings.clone();\n\
    \    strings.retain(|s| s.starts_with(prefix));\n    strings", "    let mut prefix\
    \ = prefix.to_owned();\n    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ filtered = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    let mut strings\
    \ = strings.to_vec();\n    while strings.len() > 0 {\n        if strings.len()\
    \ < prefix.len() {\n            break;\n        }\n        if strings.first().starts_with(prefix)\
    \ {\n            strings.remove(0);\n        } else {\n            break;\n  \
    \      }\n    }\n    strings", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    let mut\
    \ prefix = prefix.to_string();\n    prefix.push('/');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    let\
    \ mut prefix = prefix.to_string();\n    prefix.push('/');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    let mut strings = strings.clone();\n\
    \    strings.retain(|s| s.starts_with(prefix));\n    strings", "    let mut prefix\
    \ = prefix.to_owned();\n    let mut strings = strings.to_owned();\n    while strings.len()\
    \ > 0 {\n        if strings.len() < prefix.len() {\n            break;\n     \
    \   }\n        if strings.starts_with(prefix) {\n            strings.remove(prefix.to_owned());\n\
    \        } else {\n            break;\n        }\n    }\n    strings", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('/');\n\
    \    let mut prefix = prefix.into_bytes();\n    prefix.pop();\n    let mut prefix\
    \ = prefix.to_vec();\n    prefix.push(0);\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_iter().collect::<Vec<_>>();\n\
    \    prefix.reverse();\n    let mut prefix = prefix.into_", "    strings\n   \
    \     .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().contains(prefix.to_lowercase()))\n        .collect()", "  \
    \  strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('/');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut prefix = prefix.to_string();\n    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut prefix = prefix.to_string();\n  \
    \  let mut strings = strings.to_vec();\n    while strings.len() > 0 {\n      \
    \  let mut index = strings.len() - 1;\n        while index >= 0 && strings[index].starts_with(prefix)\
    \ {\n            index -= 1;\n        }\n        if index >= 0 {\n           \
    \ strings.remove_index(index);\n        } else {\n            break;\n       \
    \ }\n    }\n    strings", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_owned();\n    let mut strings\
    \ = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n    let mut\
    \ prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n    let\
    \ mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n \
    \   let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut prefix = prefix.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let ", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n\
    \    result", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('/');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ prefix = prefix.to_owned();\n    prefix.push(b'*');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    let mut prefix = prefix.to_string();\n\
    \    prefix.push('_');\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()",
  "    let mut prefix = prefix.to_string();\n    prefix.push('/');\n    prefix.push('*');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ prefix = prefix.to_string();\n    prefix.push('_');\n    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ prefix = prefix.to_string();\n    prefix.push('_');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    let mut prefix = prefix.to_owned();\n\
    \    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut prefix = prefix.to_string();\n    if prefix.len() == 0 {\n        return\
    \ strings;\n    }\n    let mut strings = strings.clone();\n    strings.retain(|s|\
    \ s.starts_with(prefix));\n    strings", "    strings\n        .iter()\n     \
    \   .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('/');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ prefix = prefix.to_string();\n    if prefix.len() > 0 {\n        prefix.push('_');\n\
    \    }\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ prefix = prefix.to_string();\n    prefix.push('_');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    let mut prefix = prefix.to_string();\n\
    \    prefix.push('_');\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()",
  "    let mut prefix = prefix.to_owned();\n    let mut result = Vec::new();\n   \
    \ for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    let mut prefix = prefix.to_owned();\n    let mut strings\
    \ = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n    let mut\
    \ strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n   \
    \ let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned();\n\
    \    let mut strings = strings.to_owned();\n    let mut prefix = prefix.to_owned",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ prefix = prefix.to_string();\n    prefix.push('_');\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n \
    \       .collect()", "    let mut prefix = prefix.to_owned();\n    prefix.push('/');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_owned();\n    prefix.push(0);\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()"]
stop_tokens:
- "\n}"
