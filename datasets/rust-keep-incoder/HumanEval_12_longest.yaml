name: HumanEval_12_longest
language: rust
prompt: "/// Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n/// strings of the same length. Return None in case the input\
  \ list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n/// 'a'\n\
  /// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
  \ -> Option<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
  \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
  ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
  x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
  kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
completions: ["    strings.iter().fold(None, |max, s| match s.len() {\n        0 =>\
    \ Some(s),\n        max if max == s.len() => Some(s),\n        _ => max,\n   \
    \ })", "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut\
    \ max_len = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n    Some(max_len.to_string())", "    let mut max_len = String::new();\n\
    \    let mut max_index = -1;\n    for s in strings {\n        let len = s.len();\n\
    \        if max_len.len() < len {\n            max_len = s;\n            max_index\
    \ = len;\n        }\n    }\n    if max_len.len() == 0 {\n        return None;\n\
    \    }\n    Some(max_len.to_string())", "    if strings.is_empty() {\n       \
    \ return None;\n    }\n    let mut max_len = String::new();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    for s in strings {\n\
    \        if s.len() > max_len {\n            max_len = s.len();\n        }\n \
    \   }\n    Some(max_len)", "    if strings.is_empty() {\n        return None;\n\
    \    }\n\n    let mut max_len = String::new();\n    let mut max_index = String::new();\n\
    \    for &s in strings {\n        let len = s.len();\n        if len > max_len.len()\
    \ {\n            max_len = len;\n            max_index = s;\n        }\n    }\n\
    \n    Some(max_index)", '    strings.iter().max_by_key(|s| s.len())', "    if\
    \ strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n    let mut longest_idx\
    \ = String::new();\n\n    for &s in strings {\n        let len = s.len();\n  \
    \      if len > longest_len.len() {\n            longest_len = len;\n        \
    \    longest_str = s;\n            longest_idx = s;\n        }\n    }\n\n    Some(longest_str)",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n\n    if max_len.len()\
    \ == 0 {\n        return None;\n    }\n\n    Some(max_len.to_string())", "   \
    \ if strings.is_empty() {\n        return None;\n    }\n    let mut max_len =\
    \ String::new();\n    let mut max_index = -1;\n    for &s in strings {\n     \
    \   let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n    Some(max_len.to_string())",
  "    let mut longest_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n            longest_str = s;\n        }\n    }\n    Some(longest_str)",
  "    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()",
  "    strings.iter().fold(None, |max, s| {\n        if let Some(len) = s.len() {\n\
    \            if len > max {\n                Some(s)\n            } else {\n \
    \               None\n            }\n        } else {\n            None\n    \
    \    }\n    })", "    if strings.is_empty() {\n        return None;\n    }\n\n\
    \    let mut longest = strings[0];\n    let mut longestlen = longest.len();\n\
    \    for s in strings.iter().rev() {\n        if s.len() > longestlen {\n    \
    \        longest = s;\n            longestlen = s.len();\n        }\n    }\n\n\
    \    Some(longest)", "    strings.iter().fold(None, |mut acc, s| {\n        let\
    \ mut len = s.len();\n        match acc {\n            None => Some(s),\n    \
    \        Some(mut acc) => if len > acc.len() {\n                Some(s.clone())\n\
    \            } else {\n                None\n            }\n        }\n    })",
  '    strings.iter().max_by_key(|s| s.len()).cloned()', "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest = strings[0];\n    let\
    \ mut longest_len = strings[0].len();\n\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest_len {\n            longest = s;\n            longest_len\
    \ = s.len();\n        }\n    }\n\n    Some(longest)", '    strings.iter().max_by(|a,
    b| a.len() < b.len()).unwrap_or(None)', "    strings\n        .iter()\n      \
    \  .map(|s| s.len())\n        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len =\
    \ String::new();\n    let mut max_index = -1;\n    for s in strings {\n      \
    \  let len = s.len();\n        if max_len.len() < len {\n            max_len =\
    \ s;\n            max_index = len;\n        }\n    }\n    Some(max_len.clone())",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n\n    Some(longest_str)", " \
    \   if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)", "    let\
    \ mut longest = String::new();\n    for s in strings {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    longest.cloned()", '    strings.iter().max_by_key(|s|
    s.len()).ok()', "    let mut longest = String::new();\n    for s in strings {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    longest.cloned()", "    if strings.is_empty() {\n        return None;\n\
    \    }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\n    for s in\
    \ strings {\n        if s.len() > max_len {\n            max_len = s.len();\n\
    \        }\n    }\n\n    if max_len == strings.len() {\n        return None;\n\
    \    }\n\n    Some(strings[strings.iter().position(|s| s.len() == max_len).unwrap()])",
  "    strings.iter().fold(\n        None,\n        |mut acc, s| {\n            if\
    \ acc.is_none() {\n                acc = Some(s);\n            } else {\n    \
    \            let len = s.len();\n                if len > acc.unwrap().len() {\n\
    \                    acc = Some(s);\n                }\n            }\n      \
    \      acc\n        },\n    )", "    strings\n        .iter()\n        .map(|s|\
    \ s.len())\n        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())",
  "    strings.iter().fold(None, |max, s| {\n        if let Some(len) = s.len() {\n\
    \            if len > max {\n                Some(s)\n            } else {\n \
    \               None\n            }\n        } else {\n            None\n    \
    \    }\n    })", "    strings.iter().fold(None, |mut acc, s| {\n        if let\
    \ Some(mut len) = acc.len() {\n            if len > s.len() {\n              \
    \  acc = Some(s);\n            }\n        }\n        acc\n    })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest = strings[0];\n    for\
    \ s in strings.iter().rev() {\n        if s.len() > longest.len() {\n        \
    \    longest = s;\n        }\n    }\n\n    Some(longest)", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_index = -1;\n    for index in 0..strings.len() {\n        let len\
    \ = strings[index].len();\n        if max_len.len() < len {\n            max_len\
    \ = strings[index];\n            max_index = index;\n        }\n    }\n\n    if\
    \ max_len.len() == 0 {\n        return None;\n    }\n\n    Some(strings[max_index])",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n    Some(strings[max_index])", "    if strings.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut max_len = String::new();\n    let mut\
    \ max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    for s in strings {\n\
    \        if s.len() > max_len {\n            max_len = s.len();\n        }\n \
    \   }\n    Some(max_len)", "    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(Error::EmptyInput)", "    strings\n\
    \        .iter()\n        .map(|s| s.len())\n        .max()\n        .cloned()\n\
    \        .or_else(|| strings.iter().max().cloned())", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n        }\n    }\n\n    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(strings[0])",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len =\
    \ String::new();\n    let mut max_index = -1;\n    for (i, s) in strings.iter().enumerate()\
    \ {\n        let len = s.len();\n        if max_len.len() < len {\n          \
    \  max_len = s;\n            max_index = i;\n        }\n    }\n    Some(max_len.to_string())",
  '    strings.iter().fold(None, |max, s| if s.len() > max.len() { max } else { None
    })', "    let mut longest_len = std::cmp::min::<usize>(\n        strings.len(),\n\
    \        strings.iter().map(|s| s.len()).max(),\n    );\n    let mut longest_str\
    \ = String::new();\n    for s in strings {\n        if s.len() > longest_len {\n\
    \            longest_len = s.len();\n            longest_str = s;\n        }\n\
    \    }\n    Some(longest_str)", '    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)',
  "    let mut max_len = String::new();\n    let mut max_index = -1;\n    for s in\
    \ strings {\n        let len = s.len();\n        if max_len.len() < len {\n  \
    \          max_len = s;\n            max_index = len;\n        }\n    }\n    if\
    \ max_len.len() == 0 {\n        return None;\n    }\n    Some(strings[max_index])",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = strings[0].len();\n    let mut longest_string = strings[0];\n\n    for string\
    \ in strings.iter().rev() {\n        if string.len() > longest_len {\n       \
    \     longest_len = string.len();\n            longest_string = string;\n    \
    \    }\n    }\n\n    Some(longest_string)", "    strings\n        .iter()\n  \
    \      .fold(None, |mut acc, s| {\n            let len = s.len();\n          \
    \  if len > acc.len() {\n                Some(s.clone())\n            } else {\n\
    \                Some(acc.clone())\n            }\n        })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_index = -1;\n    for &s in strings {\n        let len = s.len();\n\
    \        if max_len.len() < len {\n            max_len = s;\n            max_index\
    \ = len;\n        }\n    }\n\n    Some(max_len.to_string())", "    strings\n \
    \       .iter()\n        .fold(String::new(), |mut acc, s| {\n            if acc.len()\
    \ < s.len() {\n                acc = s;\n            }\n            acc\n    \
    \    })\n        .ok()", "    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())",
  "    strings\n        .iter()\n        .fold(String::new(), |mut acc, s| {\n   \
    \         if acc.len() < s.len() {\n                acc = s\n            } else\
    \ {\n                acc\n            }\n        })\n        .ok()", "    strings\n\
    \        .iter()\n        .map(|s| s.len())\n        .max()\n        .cloned()\n\
    \        .ok_or(Error::LongestEmpty)", "    strings.iter().fold(None, |max, s|\
    \ {\n        if let Some(len) = s.len() {\n            if len > max {\n      \
    \          Some(s)\n            } else {\n                None\n            }\n\
    \        } else {\n            None\n        }\n    })", '    strings.iter().max_by_key(|s|
    s.len())', "    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n        .ok()", "    strings.iter().fold(None, |max,\
    \ s| {\n        if let Some(len) = s.len() {\n            if len > max {\n   \
    \             Some(s)\n            } else {\n                None\n          \
    \  }\n        } else {\n            None\n        }\n    })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    for s\
    \ in strings {\n        if s.len() > max_len {\n            max_len = s.len();\n\
    \        }\n    }\n\n    if max_len == 0 {\n        return None;\n    }\n\n  \
    \  Some(strings[strings.iter().position(|s| s.len() == max_len).unwrap()])", " \
    \   strings.iter().fold(None, |mut acc, s| {\n        if acc.is_none() {\n   \
    \         Some(s.len())\n        } else {\n            if s.len() > acc.unwrap().unwrap()\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        }\n    })", "    if strings.is_empty() {\n        return\
    \ None;\n    }\n    let mut longest = strings[0];\n    for s in strings.iter().rev()\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    Some(longest)", "    let mut longest = String::new();\n    for s in\
    \ strings {\n        if s.len() > longest.len() {\n            longest = s;\n\
    \        }\n    }\n    longest.cloned()", "    if strings.is_empty() {\n     \
    \   return None;\n    }\n\n    let mut max_len = String::new();\n    let mut max_index\
    \ = -1;\n    for &s in strings {\n        if s.len() > max_len.len() {\n     \
    \       max_len = s;\n            max_index = strings.iter().position(|&s| s ==\
    \ max_len).unwrap();\n        }\n    }\n\n    Some(max_len.to_string())", "  \
    \  strings.iter().fold(None, |mut acc, x| {\n        let mut len = x.len();\n\
    \        if len > acc.len() {\n            acc = Some(x);\n        }\n       \
    \ Some(acc)\n    })", "    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)", "    strings.iter().fold(None, |mut acc, s| {\n   \
    \     if acc.is_none() {\n            Some(s.len())\n        } else {\n      \
    \      match acc.as_ref().unwrap().cmp(&s.len()) {\n                Ordering::Less\
    \ => Some(s),\n                Ordering::Greater => Some(acc),\n             \
    \   Ordering::Equal => None,\n            }\n        }\n    })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut max_len = String::new();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    for s in\
    \ strings {\n        if s.len() > max_len {\n            max_len = s.len();\n\
    \        }\n    }\n    Some(max_len)", "    if strings.is_empty() {\n        return\
    \ None;\n    }\n\n    let mut max_len = String::new();\n    let mut max_len =\
    \ strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_index = -1;\n\
    \    for index in strings.iter().rev().skip(1) {\n        let len = strings.iter().skip(index).map(|s|\
    \ s.len()).max().unwrap();\n        if len > max_len {\n            max_len =\
    \ len;\n            max_index = index;\n        }\n    }\n    Some(strings[max_index])",
  '    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)', "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_index = -1;\n\n    for &s in strings {\n        let len = s.len();\n\
    \        if max_len.len() < len {\n            max_len = s;\n            max_index\
    \ = len;\n        }\n    }\n\n    Some(max_len.to_string())", "    strings\n \
    \       .iter()\n        .map(|s| s.len())\n        .max()\n        .cloned()\n\
    \        .ok_or(ErrorKind::EmptyInput)", "    strings\n        .iter()\n     \
    \   .map(|s| s.len())\n        .max()\n        .cloned()\n        .or_else(||\
    \ strings.first().cloned())", "    if strings.is_empty() {\n        return None;\n\
    \    }\n    let mut longest = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest.len() {\n            longest = s;\n        }\n \
    \   }\n    Some(longest)", "    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)", " \
    \   if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n\n    Some(longest_str)", " \
    \   if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|s| s == max_len).unwrap();\n        }\n    }\n\n\
    \    Some(max_len.to_string())", "    strings\n        .iter()\n        .map(|s|\
    \ s.len())\n        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_len = strings[0].len();\n    for s in strings\
    \ {\n        if s.len() > max_len {\n            max_len = s.len();\n        }\n\
    \    }\n\n    for s in strings {\n        if s.len() == max_len {\n          \
    \  return Some(s);\n        }\n    }\n\n    None", "    strings.iter().fold(None,\
    \ |mut acc, s| {\n        if let Some(mut len) = acc.len() {\n            if len\
    \ < s.len() {\n                acc = Some(s);\n            }\n        }\n    \
    \    acc\n    })", "    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest.len() < s.len() {\n            longest = s;\n        }\n\
    \    }\n    longest.cloned()", "    if strings.is_empty() {\n        return None;\n\
    \    }\n\n    let mut max_len = String::new();\n    let mut max_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n\n    for s in strings {\n        if s.len() ==\
    \ max_len {\n            return Some(s);\n        }\n    }\n\n    None", "   \
    \ if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = strings[0];\n    for s\
    \ in strings.iter().rev() {\n        if s.len() > longest.len() {\n          \
    \  longest = s;\n        }\n    }\n    Some(longest)", "    strings.iter().fold(None,\
    \ |mut acc, s| {\n        let mut len = s.len();\n        if len > acc.len() {\n\
    \            acc = Some(s);\n        }\n        Some(acc)\n    })", "    let mut\
    \ longest = String::new();\n    for s in strings {\n        if longest != s.len()\
    \ {\n            longest = s;\n        }\n    }\n    longest.cloned()", '    strings.iter().fold(None,
    |max, s| if max.len() < s.len() { max } else { Some(s) })', "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut\
    \ max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let\
    \ mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s", "  \
    \  strings\n        .iter()\n        .fold(String::new(), |mut acc, s| {\n   \
    \         acc.push_str(s);\n            acc\n        })\n        .chars()\n  \
    \      .max()\n        .map(|c| c.to_string())", "    strings\n        .iter()\n\
    \        .map(|s| s.len())\n        .max()\n        .cloned()\n        .or_else(||\
    \ strings.first().cloned())", "    let mut longest = String::new();\n    for s\
    \ in strings {\n        if longest.len() < s.len() {\n            longest = s;\n\
    \        }\n    }\n    longest.cloned()", "    if strings.is_empty() {\n     \
    \   return None;\n    }\n    let mut longest = strings[0];\n    for s in strings.iter().rev()\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    Some(longest)", '    strings.iter().max_by_key(|s| s.len()).or(None)',
  "    strings.iter().fold(\n        None,\n        |mut acc, s| {\n            if\
    \ acc.is_none() {\n                acc = Some(s);\n            } else {\n    \
    \            let mut len = s.len();\n                let mut max_len = acc.unwrap().len();\n\
    \                if len > max_len {\n                    max_len = len;\n    \
    \            }\n                if max_len > len {\n                    acc =\
    \ Some(s);\n                }\n            }\n            acc\n        },\n  \
    \  )", "    if strings.is_empty() {\n        return None;\n    }\n    let mut\
    \ max_len = String::new();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n    Some(max_len)", "    strings\n        .iter()\n\
    \        .map(|s| s.len())\n        .max()\n        .cloned()\n        .or_else(||\
    \ strings.first().cloned())", "    strings.iter().fold(None, |mut acc, s| {\n\
    \        if let Some(mut len) = acc.len() {\n            if len < s.len() {\n\
    \                len = s.len();\n            }\n        }\n        Some(s.clone());\n\
    \    })", "    if strings.is_empty() {\n        return None;\n    }\n    let mut\
    \ longest = strings[0];\n    for s in strings.iter().rev() {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    Some(longest)",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|&s| s.len() == max_len.len()).unwrap();\n       \
    \ }\n    }\n\n    Some(strings[max_index])", "    if strings.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut max_len = String::new();\n    let mut\
    \ max_index = -1;\n    for index in 0..strings.len() {\n        let string = strings[index];\n\
    \        let len = string.len();\n        if max_len.len() < len {\n         \
    \   max_len = string;\n            max_index = index;\n        }\n    }\n    Some(max_len.to_string())",
  "    strings\n        .iter()\n        .map(|s| s.chars().count())\n        .max()\n\
    \        .cloned()\n        .unwrap_or(0)\n        .to_string()", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest = strings[0].len();\n\
    \    for s in strings.iter().rev() {\n        if s.len() > longest {\n       \
    \     longest = s.len();\n        }\n    }\n\n    Some(strings[strings.iter().rindex().rev().next().unwrap().clone()])",
  "    let mut longest = String::new();\n    for s in strings {\n        if longest\
    \ == s.len() {\n            longest = s;\n        } else if longest != s.len()\
    \ {\n            longest = Some(s);\n            break;\n        }\n    }\n  \
    \  longest", "    if strings.is_empty() {\n        return None;\n    }\n    let\
    \ mut longest = strings[0];\n    for s in strings.iter().rev() {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    Some(longest)",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len =\
    \ String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n    Some(max_len.to_string())", "    strings.iter().fold(None, |mut\
    \ acc, s| {\n        if let Some(mut len) = acc.len() {\n            if len <\
    \ s.len() {\n                len = s.len();\n            }\n        }\n      \
    \  Some(s.clone());\n    })", "    strings.iter().fold(None, |max, s| {\n    \
    \    if let Some(len) = s.len() {\n            if len > max {\n              \
    \  Some(s)\n            } else {\n                None\n            }\n      \
    \  } else {\n            None\n        }\n    })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_index = -1;\n    for &s in strings {\n        if s.len() > max_len.len()\
    \ {\n            max_len = s;\n            max_index = strings.iter().position(|&s|\
    \ s == max_len).unwrap();\n        }\n    }\n\n    if max_index >= 0 {\n     \
    \   Some(max_len.clone())\n    } else {\n        None\n    }", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest = strings[0];\n    for\
    \ s in strings.iter().rev() {\n        if s.len() > longest.len() {\n        \
    \    longest = s;\n        }\n    }\n    Some(longest)", "    strings\n      \
    \  .iter()\n        .map(|s| s.len())\n        .max()\n        .cloned()\n   \
    \     .or_else(|| strings.first().cloned())", "    if strings.is_empty() {\n \
    \       return None;\n    }\n\n    let mut max_len = String::new();\n    let mut\
    \ max_index = -1;\n    for index in 0..strings.len() {\n        let string = strings[index];\n\
    \        let len = string.len();\n        if max_len.len() < len {\n         \
    \   max_len = string;\n            max_index = index;\n        }\n    }\n\n  \
    \  Some(max_len.to_string())", "    strings\n        .iter()\n        .map(|s|\
    \ s.len())\n        .max()\n        .cloned()\n        .ok_or(Error::BadInput)",
  "    strings.iter().fold(None, |max, s| match s.len() {\n        0 => Some(s),\n\
    \        1 => Some(s),\n        _ => max,\n    })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut max_len = String::new();\n    let\
    \ mut max_len = String::new();\n    for s in strings {\n        if s.len() > max_len.len()\
    \ {\n            max_len = s;\n        }\n    }\n    Some(max_len)", "    let\
    \ mut max_len = String::new();\n    let mut max_index = String::new();\n    for\
    \ s in strings {\n        if s.len() > max_len.len() {\n            max_len =\
    \ s;\n            max_index = s;\n        }\n    }\n    Some(max_index)", "  \
    \  if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0].len();\n    for s in strings.iter().rev() {\n        if s.len()\
    \ > longest {\n            longest = s.len();\n        }\n    }\n\n    Some(strings[strings.iter().rindex().rev().next().unwrap()])",
  "    strings\n        .iter()\n        .fold(\n            None,\n            |mut\
    \ acc, s| {\n                let len = s.len();\n                if len > acc.len()\
    \ {\n                    Some(s.clone())\n                } else if len == acc.len()\
    \ {\n                    Some(acc.clone())\n                } else {\n       \
    \             None\n                }\n            },\n        )", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_index = -1;\n    for index in 0..strings.len() {\n        let len\
    \ = strings[index].len();\n        if max_len.len() < len {\n            max_len\
    \ = strings[index];\n            max_index = index;\n        }\n    }\n\n    if\
    \ max_len.len() == 0 {\n        return None;\n    }\n\n    Some(strings[max_index])",
  '    strings.iter().max_by(|a, b| a.len() as usize - b.len() as usize)', "    if\
    \ strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len = String::new();\n\
    \    let mut max_index = -1;\n    for &s in strings {\n        let len = s.len();\n\
    \        if max_len.len() < len {\n            max_len = s;\n            max_index\
    \ = len;\n        }\n    }\n\n    if max_len.len() == 0 {\n        return None;\n\
    \    }\n\n    Some(max_len.to_string())", "    if strings.is_empty() {\n     \
    \   return None;\n    }\n\n    let mut longest_len = strings[0].len();\n    let\
    \ mut longest_string = strings[0];\n    for s in strings.iter().skip(1) {\n  \
    \      if s.len() > longest_len {\n            longest_len = s.len();\n      \
    \      longest_string = s;\n        }\n    }\n\n    Some(longest_string)", " \
    \   strings.iter().fold(None, |max, s| if s.len() > max.len() {\n        Some(s)\n\
    \    } else {\n        max\n    })", "    if strings.is_empty() {\n        return\
    \ None;\n    }\n    let mut max_len = String::new();\n    let mut max_index =\
    \ -1;\n    for s in strings {\n        let len = s.len();\n        if max_len.len()\
    \ < len {\n            max_len = s;\n            max_index = len;\n        }\n\
    \    }\n    Some(max_len.clone())", "    strings\n        .iter()\n        .map(|s|\
    \ s.len())\n        .max()\n        .cloned()\n        .ok_or(ErrorKind::EmptyInput)",
  "    strings\n        .iter()\n        .fold(String::new(), |mut acc, s| {\n   \
    \         if acc.len() < s.len() {\n                acc = s;\n            }\n\
    \            acc\n        })", "    strings\n        .iter()\n        .map(|s|\
    \ s.len())\n        .max()\n        .cloned()\n        .ok_or(Error::BadInput)",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut longest =\
    \ strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)", "    let\
    \ mut longest_len = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest_len.len() {\n            longest_len = s;\n        }\n    }\n    longest_len.cloned()",
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len =\
    \ String::new();\n    let mut max_index = -1;\n    for &s in strings {\n     \
    \   let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n    if max_len.len() ==\
    \ 0 {\n        return None;\n    }\n    Some(max_len.to_string())", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest = strings[0];\n    let\
    \ mut current_longest = strings[0];\n\n    for s in strings.iter().rev() {\n \
    \       if s.len() > longest {\n            longest = s.len();\n            current_longest\
    \ = s;\n        }\n    }\n\n    Some(current_longest)", '    strings.iter().max_by_key(|s|
    s.len())', '    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)', "   \
    \ let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > longest_len.len()\
    \ {\n            longest_len = len;\n            longest_str = s;\n        }\n\
    \    }\n    Some(longest_str)", "    if strings.is_empty() {\n        return None;\n\
    \    }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    for s in strings {\n        if s.len() > max_len\
    \ {\n            max_len = s.len();\n        }\n    }\n\n    Some(max_len.clone())",
  "    strings.iter().fold(None, |mut acc, s| {\n        if let Some(mut len) = acc.len()\
    \ {\n            if len < s.len() {\n                len = s.len();\n        \
    \    }\n        }\n        Some(s.clone());\n    })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest_len = strings[0].len();\n\
    \    let mut longest_string = strings[0];\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest_len {\n            longest_len = s.len();\n    \
    \        longest_string = s;\n        }\n    }\n    Some(longest_string)", '    strings.iter().max_by_key(|s|
    s.len()).cloned()', "    let mut max_len = std::cmp::max::<usize>(strings.len(),\
    \ 1);\n    let mut longest = String::new();\n    for s in strings {\n        if\
    \ s.len() > max_len {\n            max_len = s.len();\n            longest = s;\n\
    \        }\n    }\n    Some(longest)", "    if strings.is_empty() {\n        return\
    \ None;\n    }\n    let mut longest = strings[0];\n    for s in strings.iter().rev()\
    \ {\n        if s.len() > longest.len() {\n            longest = s;\n        }\n\
    \    }\n    Some(longest)", "    if strings.is_empty() {\n        return None;\n\
    \    }\n\n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\n   \
    \ for s in strings {\n        if s.len() > max_len {\n            max_len = s.len();\n\
    \        }\n    }\n\n    Some(max_len)", "    let mut longest = String::new();\n\
    \    for s in strings {\n        if s.len() > longest.len() {\n            longest\
    \ = s;\n        }\n    }\n    longest.cloned()", "    if strings.is_empty() {\n\
    \        return None;\n    }\n    let mut max_len = String::new();\n    let mut\
    \ max_index = -1;\n    for &s in strings {\n        let len = s.len();\n     \
    \   if max_len.len() < len {\n            max_len = s;\n            max_index\
    \ = len;\n        }\n    }\n    if max_len.len() == 0 {\n        return None;\n\
    \    }\n    Some(max_len.to_string())", "    let mut max_len = String::new();\n\
    \    let mut max_index = String::new();\n    for s in strings {\n        let len\
    \ = s.len();\n        if max_len.len() < len {\n            max_len = s;\n   \
    \         max_index = s;\n        }\n    }\n    Some(max_index)", "    strings\n\
    \        .iter()\n        .fold(String::new(), |mut acc, s| {\n            if\
    \ acc.len() < s.len() {\n                acc = s\n            } else {\n     \
    \           acc\n            }\n        })\n        .ok()", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest = strings[0];\n    let\
    \ mut longest_len = strings[0].len();\n\n    for s in strings.iter().rev() {\n\
    \        if s.len() > longest_len {\n            longest = s;\n            longest_len\
    \ = s.len();\n        }\n    }\n\n    Some(longest)", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut longest_len = String::new();\n\
    \    let mut longest_len = strings.iter().map(|s| s.len()).max().unwrap();\n \
    \   let mut longest_str = String::new();\n    let mut longest_str = strings.iter().map(|s|\
    \ s.to_string()).max().unwrap();\n\n    for s in strings {\n        if longest_len\
    \ < s.len() {\n            longest_len = s.len();\n            longest_str = s;\n\
    \        }\n    }\n\n    Some(longest_str)", "    strings.iter().fold(None, |mut\
    \ acc, s| {\n        if acc.is_none() {\n            Some(s.to_string().len())\n\
    \        } else {\n            match s.to_string().len() {\n                acc\
    \ if acc > s.to_string().len() => Some(s.to_string().len()),\n               \
    \ _ => acc,\n            }\n        }\n    })", "    strings.iter().fold(None,\
    \ |max, s| {\n        if let Some(len) = s.len() {\n            if len > max {\n\
    \                Some(s)\n            } else {\n                None\n       \
    \     }\n        } else {\n            None\n        }\n    })", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut max_len = String::new();\n   \
    \ let mut max_index = -1;\n    for &s in strings {\n        if s.len() > max_len.len()\
    \ {\n            max_len = s;\n            max_index = strings.iter().position(|s|\
    \ s == max_len).unwrap();\n        }\n    }\n    Some(max_len.to_string())", " \
    \   strings.iter().fold(None, |max, s| if s.len() > max.len() {\n        Some(s)\n\
    \    } else {\n        max\n    })", '    strings.iter().max_by_key(|s| s.len())',
  "    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.ok()",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n\n    if max_len.len() == 0 {\n        return None;\n    }\n\n \
    \   Some(strings[max_index])", "    let mut max_len = String::new();\n    let\
    \ mut max_index = -1;\n    for s in strings {\n        if s.len() > max_len.len()\
    \ {\n            max_len = s;\n            max_index = strings.iter().position(|s|\
    \ s == max_len).unwrap();\n        }\n    }\n    if max_index >= 0 {\n       \
    \ Some(max_len.clone())\n    } else {\n        None\n    }", "    strings.iter().fold(None,\
    \ |max, s| {\n        if let Some(len) = s.len() {\n            if len > max {\n\
    \                Some(s)\n            } else {\n                None\n       \
    \     }\n        } else {\n            None\n        }\n    })", "    strings.iter().fold(None,\
    \ |max, s| match s.len() {\n        0 => Some(s),\n        max => Some(s),\n \
    \       _ => max,\n    })", "    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or(Error::LongestEmpty)", "  \
    \  if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n\n    Some(max_len.to_string())", "    if strings.is_empty() {\n\
    \        return None;\n    }\n\n    let mut max_len = String::new();\n    let\
    \ mut max_len = strings[0].len();\n    for s in strings {\n        if s.len()\
    \ > max_len {\n            max_len = s.len();\n        }\n    }\n\n    for s in\
    \ strings {\n        if s.len() == max_len {\n            return Some(s);\n  \
    \      }\n    }\n\n    None", "    if strings.is_empty() {\n        return None;\n\
    \    }\n\n    let mut max_len = String::new();\n    let mut max_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n    Some(max_len)", '    strings.iter().max_by_key(|s|
    s.len()).or(None)', "    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ acc.is_none() {\n            Some(s.len())\n        } else {\n            if\
    \ s.len() > acc.unwrap().unwrap() {\n                Some(s)\n            } else\
    \ {\n                None\n            }\n        }\n    })", "    let mut longest_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        0,\n    );\n    let mut longest_str = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest_len {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n    Some(longest_str)", "   \
    \ strings.iter().fold(None, |mut acc, s| {\n        if acc.is_none() {\n     \
    \       acc = Some(s);\n        } else if acc.as_ref().unwrap().len() < s.len()\
    \ {\n            acc = Some(s);\n        }\n        acc\n    })", "    strings.iter().fold(None,\
    \ |mut acc, s| {\n        let len = s.len();\n        if len > acc.len() {\n \
    \           acc = Some(s);\n        }\n        acc\n    })", '    strings.iter().max_by_key(|s|
    s.len()).unwrap_or(None)', "    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            if acc.len() < s.len() {\n                acc =\
    \ s\n            } else {\n                acc\n            }\n        })", " \
    \   let mut max_len = std::cmp::max::<usize>(strings.len(), 1);\n    let mut longest\
    \ = strings[0];\n    for s in strings {\n        if s.len() > max_len {\n    \
    \        max_len = s.len();\n            longest = s;\n        }\n    }\n    Some(longest)",
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n\n    for s in strings.iter() {\n        if s.len()\
    \ > longest_len {\n            longest_len = s.len();\n        }\n    }\n\n  \
    \  strings.iter().find(|s| s.len() == longest_len)", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = strings[0];\n    for s\
    \ in strings.iter().rev() {\n        if s.len() > longest.len() {\n          \
    \  longest = s;\n        }\n    }\n    Some(longest)", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut max_len = String::new();\n    let\
    \ mut max_index = -1;\n    for &s in strings {\n        let len = s.len();\n \
    \       if max_len.len() < len {\n            max_len = s;\n            max_index\
    \ = len;\n        }\n    }\n    Some(max_len.clone())", "    strings.iter().fold(None,\
    \ |mut acc, s| {\n        if acc.is_none() {\n            acc = Some(s);\n   \
    \     } else {\n            let mut len = s.len();\n            if len > acc.unwrap().len()\
    \ {\n                acc = Some(s);\n            }\n        }\n        acc\n \
    \   })", '    strings.iter().max_by_key(|s| s.len()).cloned()', "    strings\n\
    \        .iter()\n        .map(|s| s.len())\n        .max()\n        .cloned()\n\
    \        .unwrap_or(0)", '    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)',
  "    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|&s| s.len() == max_len.len()).unwrap();\n       \
    \ }\n    }\n\n    Some(max_len)", '    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)',
  "    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len =\
    \ String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n    Some(max_len.to_string())", "    let mut longest = String::new();\n\
    \    for s in strings {\n        if s.len() > longest.len() {\n            longest\
    \ = s;\n        }\n    }\n    longest.cloned()", "    if strings.is_empty() {\n\
    \        return None;\n    }\n    let mut longest = strings[0];\n    for s in\
    \ strings.iter().rev() {\n        if s.len() > longest.len() {\n            longest\
    \ = s;\n        }\n    }\n    Some(longest)", '    strings.iter().max_by_key(|s|
    s.len())', '    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)',
  "    strings.iter().fold(None, |max, s| {\n        if let Some(len) = s.len() {\n\
    \            if len > max {\n                Some(s)\n            } else {\n \
    \               None\n            }\n        } else {\n            None\n    \
    \    }\n    })", "    let mut longest = String::new();\n    for s in strings {\n\
    \        if longest == s.len() {\n            longest = s;\n        }\n    }\n\
    \    longest.cloned()", '    strings.iter().max_by_key(|s| s.len())', "    if\
    \ strings.is_empty() {\n        return None;\n    }\n    let mut longest = strings[0];\n\
    \    for s in strings.iter().rev() {\n        if s.len() > longest.len() {\n \
    \           longest = s;\n        }\n    }\n    Some(longest)", '    strings.iter().max_by_key(|s|
    s.len())', "    if strings.is_empty() {\n        return None;\n    }\n    let\
    \ mut max_len = String::new();\n    let mut max_index = -1;\n    for &s in strings\
    \ {\n        if s.len() > max_len.len() {\n            max_len = s;\n        \
    \    max_index = strings.iter().position(|s| s == max_len).unwrap();\n       \
    \ }\n    }\n    Some(max_len.clone())", '    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)',
  "    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n     \
    \   .cloned()\n        .ok_or(ErrorKind::EmptyInput)", "    strings.iter().fold(None,\
    \ |mut acc, s| {\n        if acc.is_none() {\n            acc = Some(s);\n   \
    \     } else if acc.unwrap().len() < s.len() {\n            acc = Some(s);\n \
    \       }\n        acc\n    })", "    strings\n        .iter()\n        .map(|s|\
    \ s.len())\n        .max()\n        .cloned()\n        .or_else(|| strings.first().cloned())",
  "    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()",
  "    strings.iter().fold(None, |mut acc, s| {\n        let len = s.len();\n    \
    \    if len > acc.len() {\n            Some(s.clone())\n        } else {\n   \
    \         acc.replace(len, len, s);\n            None\n        }\n    })", " \
    \   if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_len = strings[0].len();\n    for s in strings\
    \ {\n        if s.len() > max_len {\n            max_len = s.len();\n        }\n\
    \    }\n\n    for s in strings {\n        if s.len() == max_len {\n          \
    \  return Some(s);\n        }\n    }\n\n    None", "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest = strings[0];\n    for s\
    \ in strings.iter().rev() {\n        if s.len() > longest.len() {\n          \
    \  longest = s;\n        }\n    }\n    Some(longest)", "    strings.iter().fold(None,\
    \ |max, &str| {\n        match str.length() {\n            0 => Some(max),\n \
    \           max if max > str.length() => Some(str),\n            _ => max,\n \
    \       }\n    })", "    strings.iter().fold(None, |mut acc, s| {\n        if\
    \ let Some(mut len) = acc.len() {\n            if len < s.len() {\n          \
    \      len = s.len();\n            }\n        }\n        Some(s.clone());\n  \
    \  })", "    let mut max_len = String::new();\n    for s in strings {\n      \
    \  if s.len() > max_len.len() {\n            max_len = s;\n        }\n    }\n\
    \    Some(max_len)", "    if strings.is_empty() {\n        return None;\n    }\n\
    \n    let mut longest_len = strings[0].len();\n    let mut longest_string = strings[0];\n\
    \n    for s in strings.iter().rev() {\n        if s.len() > longest_len {\n  \
    \          longest_len = s.len();\n            longest_string = s;\n        }\n\
    \    }\n\n    Some(longest_string)", "    let mut max_len = std::cmp::max::<usize>(strings.len(),\
    \ 0);\n    let mut max_string = None;\n    for s in strings {\n        let len\
    \ = s.len();\n        if max_len < len {\n            max_len = len;\n       \
    \     max_string = Some(s);\n        }\n    }\n    max_string", '    strings.iter().max_by_key(|s|
    s.len()).cloned()', "    if strings.is_empty() {\n        return None;\n    }\n\
    \n    let mut max_len = String::new();\n    let mut max_len = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n    Some(max_len)", "    let mut max_len = String::new();\n\
    \    let mut max_len = String::new();\n    for s in strings {\n        if s.len()\
    \ > max_len.len() {\n            max_len = s;\n        }\n    }\n    Some(max_len)",
  '    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()', "    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n        }\n    }\n    strings.iter().max_by(|a, b| a.len() < b.len()).map(|s|\
    \ s.to_string()).unwrap_or(None)", "    strings.iter().fold(None, |mut acc, s|\
    \ {\n        if let Some(mut len) = acc.as_mut().map(|s| s.len()) {\n        \
    \    if len > s.len() {\n                acc = Some(s);\n            }\n     \
    \   }\n        acc\n    })"]
stop_tokens:
- "\n}"
