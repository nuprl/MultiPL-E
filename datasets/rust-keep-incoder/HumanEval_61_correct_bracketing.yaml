name: HumanEval_61_correct_bracketing
language: rust
prompt: "/// brackets is a string of \"(\" and \")\".\n/// return True if every opening\
  \ bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"(\"\
  )\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
  (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfn correct_bracketing(brackets:\
  \ String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"\
  ()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n   \
  \ assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"\
  ()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"\
  ((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n\
  \    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"\
  ((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"\
  (()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")),\
  \ false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n\
  }\n"
completions: []
stop_tokens:
- "\n}"
