name: HumanEval_91_is_bored
language: rust
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words\
    \ = S.split_whitespace();\n    let mut i = 0;\n    while i < words.len() {\n \
    \       if words[i] == \"I\" {\n            boredoms += 1;\n        }\n      \
    \  i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut\
    \ words = S.split_whitespace();\n    let mut i = 0;\n    while i < words.len()\
    \ {\n        if words[i] == \"I\" {\n            boredoms += 1;\n        }\n \
    \       i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n   \
    \ let mut words = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = Vec::new();\n    let mut boredom_counter = 0;\n    let mut boredom_words\
    \ = Vec::new();\n    let mut boredom_sentences = Vec::new();\n    let mut boredom_sentence\
    \ = Vec::new();\n    let mut boredom_word = Vec::new();\n    let mut boredom_sentences\
    \ = Vec::new();\n    let mut boredom_sentence = Vec::new();\n    let mut boredom_word\
    \ = Vec::new();\n    let mut boredom_sentences = Vec::new();\n    let mut boredom_sentence\
    \ = Vec::new();\n    let mut boredom_word = Vec::new();\n    let mut boredom_sentences\
    \ = Vec::new();\n    let mut boredom_sentence = Vec::new();\n    let mut boredom_word\
    \ = Vec::new();\n    let mut boredom_sentences = Vec::new();\n    let mut boredom_sentence\
    \ = Vec::new();\n    let mut boredom_word = Vec::new();\n    let mut boredom_sentences\
    \ = Vec::new();\n    let mut boredom_sentence = Vec::new();\n    let mut boredom_word\
    \ = Vec::new();\n    let mut boredom_sentences = Vec::new();\n    let mut boredom_sentence\
    \ = Vec::new();\n    let mut boredom_word = Vec::new();\n    let mut boredom_sentences\
    \ = Vec::new();\n    let mut boredom_sentence = Vec::new();\n    let mut boredom_word\
    \ = Vec::new();\n    let mut boredom_sentences = Vec::new();\n    let mut boredom_sentence\
    \ = Vec::new();\n    let mut boredom_word = Vec::new();\n    let mut boredom_sentences\
    \ = Vec::new();\n    let mut boredom_sentence = Vec::new();\n    let mut boredom_word\
    \ = Vec::new();\n    let mut boredom_sentences = Vec::new();\n    let mut boredom_sentence\
    \ = Vec::new();\n    let mut boredom_word = Vec::new();\n    let mut boredom_sentences\
    \ = Vec::new();\n    let mut boredom_sentence = Vec::new();\n    let mut boredom_word\
    \ = Vec::new();\n    let mut boredom_sentences = Vec::new();\n    let mut boredom_sentence\
    \ = Vec::", "    let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<&str>\
    \ = vec![];\n    let mut boredom_word_count: Vec<usize> = vec![];\n    let mut\
    \ boredom_word_length: Vec<usize> = vec![];\n    let mut boredom_word_length_count:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_total: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_total_count: Vec<usize> = vec![];\n    let mut\
    \ boredom_word_length_total_sum: Vec<usize> = vec![];\n    let mut boredom_word_length_total_sum_count:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_total_sum_sum: Vec<usize>\
    \ = vec![];\n    let mut boredom_word_length_total_sum_sum_count: Vec<usize> =\
    \ vec![];\n    let mut boredom_word_length_total_sum_sum_sum: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_total_sum_sum_sum_count: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_total_sum_sum_sum_sum: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_total_sum_sum_sum_sum_count: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_total_sum_sum_sum_sum_sum: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_total_sum_sum_sum_sum_sum_count: Vec<usize> =\
    \ vec![];\n    let mut boredom_word_length_total_sum_sum_sum_sum_sum_sum: Vec<usize>\
    \ = vec![];\n    let mut boredom_word_length_total_sum_sum_sum_sum_sum_sum_count:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_total_sum_sum_sum_sum_sum_sum_sum:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_total_sum_sum_sum_sum_sum_sum_sum_count:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_total_sum_sum_sum_sum_sum_sum_sum_sum:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_total_sum_sum_sum_sum_sum_sum_sum_sum_count:\
    \ Vec<usize", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    for word in words {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut bored = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            i += 1;\n            bored += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    bored", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    for word in words {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    let mut i = 0;\n    while\
    \ i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n    \
    \        i += 1;\n        } else {\n            boredoms += 1;\n        }\n  \
    \      i += 1;\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n  \
    \  let mut boredom_counter = 0;\n    let mut boredom_counter2 = 0;\n    let mut\
    \ boredom_counter3 = 0;\n    let mut boredom_counter4 = 0;\n    let mut boredom_counter5\
    \ = 0;\n    let mut boredom_counter6 = 0;\n    let mut boredom_counter7 = 0;\n\
    \    let mut boredom_counter8 = 0;\n    let mut boredom_counter9 = 0;\n    let\
    \ mut boredom_counter10 = 0;\n    let mut boredom_counter11 = 0;\n    let mut\
    \ boredom_counter12 = 0;\n    let mut boredom_counter13 = 0;\n    let mut boredom_counter14\
    \ = 0;\n    let mut boredom_counter15 = 0;\n    let mut boredom_counter16 = 0;\n\
    \    let mut boredom_counter17 = 0;\n    let mut boredom_counter18 = 0;\n    let\
    \ mut boredom_counter19 = 0;\n    let mut boredom_counter20 = 0;\n    let mut\
    \ boredom_counter21 = 0;\n    let mut boredom_counter22 = 0;\n    let mut boredom_counter23\
    \ = 0;\n    let mut boredom_counter24 = 0;\n    let mut boredom_counter25 = 0;\n\
    \    let mut boredom_counter26 = 0;\n    let mut boredom_counter27 = 0;\n    let\
    \ mut boredom_counter28 = 0;\n    let mut boredom_counter29 = 0;\n    let mut\
    \ boredom_counter30 = 0;\n    let mut boredom_counter31 = 0;\n    let mut boredom_counter32\
    \ = 0;\n    let mut boredom_counter33 = 0;\n    let mut boredom_counter34 = 0;\n\
    \    let mut boredom_counter35 = 0;\n    let mut boredom_counter36 = 0;\n    let\
    \ mut boredom_counter37 = 0;\n    let mut boredom_counter38 = 0;\n    let mut\
    \ boredom_counter39 = 0;\n    let mut boredom_counter40 = 0;\n    let mut boredom_counter41\
    \ = 0;\n    let mut boredom_counter42 = 0;\n    let mut boredom_counter43 = 0;\n\
    \    let mut boredom_counter44 = 0;\n    let mut boredom_counter45 = 0;\n    let\
    \ mut boredom_counter46 = 0;\n    let mut boredom_counter47 = 0;\n    let mut\
    \ boredom_counter48 = 0;\n    let mut boredom_counter49 = 0;\n    let mut boredom_counter50\
    \ = 0;\n    let mut bore", "    let mut boredoms: isize = 0;\n    let mut words\
    \ = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n  \
    \      i += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let\
    \ mut boredom_counter = 0;\n    let mut boredom_words = vec![];\n    let mut boredom_word_counter\
    \ = 0;\n    let mut boredom_sentences = vec![];\n    let mut boredom_sentence_counter\
    \ = 0;\n    let mut boredom_sentence = String::new();\n    let mut boredom_sentence_words\
    \ = vec![];\n    let mut boredom_sentence_word_counter = 0;\n    let mut boredom_sentence_boredoms\
    \ = vec![];\n    let mut boredom_sentence_boredom_counter = 0;\n    let mut boredom_sentence_boredom_words\
    \ = vec![];\n    let mut boredom_sentence_boredom_word_counter = 0;\n    let mut\
    \ boredom_sentence_boredom_boredoms = vec![];\n    let mut boredom_sentence_boredom_boredom_counter\
    \ = 0;\n    let mut boredom_sentence_boredom_boredom_words = vec![];\n    let\
    \ mut boredom_sentence_boredom_boredom_word_counter = 0;\n    let mut boredom_sentence_boredom_boredom_boredoms\
    \ = vec![];\n    let mut boredom_sentence_boredom_boredom_boredom_counter = 0;\n\
    \    let mut boredom_sentence_boredom_boredom_boredom_words = vec![];\n    let\
    \ mut boredom_sentence_boredom_boredom_boredom_word_counter = 0;\n    let mut\
    \ boredom_sentence_boredom_boredom_boredom_boredoms = vec![];\n    let mut boredom_sentence_boredom_boredom_boredom_boredom_counter\
    \ = 0;\n    let mut boredom_sentence_boredom_boredom_boredom_boredom_words = vec![];\n\
    \    let mut boredom_sentence_boredom_boredom_boredom_boredom_word_counter = 0;\n\
    \    let mut boredom_sentence_boredom_boredom_boredom_boredom_boredoms = vec![];\n\
    \    let mut boredom_sentence_boredom_boredom_boredom_boredom_boredom_counter\
    \ = 0;\n    let mut boredom_sentence_boredom_boredom_boredom_boredom_boredom_words\
    \ = vec![];\n    let mut boredom_sentence_boredom_boredom_boredom_boredom_boredom_word_counter\
    \ = 0;\n    let mut boredom_sentence_bo", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        let c = s[i];\n        if c == '.' || c == '?' || c == '!' {\n      \
    \      i += 1;\n        } else {\n            if c == 'I' {\n                i\
    \ += 1;\n                boredoms += 1;\n            }\n            i += 1;\n\
    \        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word\
    \ in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n          \
    \  boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    while !s.is_empty() {\n        let\
    \ mut i = s.find('i');\n        if i == s.len() {\n            break;\n      \
    \  }\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \        s = &s[i..];\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while\
    \ i < words.len() {\n        if words[i] == \"I\" {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    let mut i\
    \ = 0;\n    while i < sentence.len() {\n        if sentence[i].starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii_lowercase()\
    \ {\n            if sentence[i] == \"i\" {\n                boredoms += 1;\n \
    \           }\n            i += 1;\n        } else {\n            i += 1;\n  \
    \      }\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut words\
    \ = S.split_whitespace();\n    let mut i = 0;\n    while i < words.len() {\n \
    \       if words[i] == \"I\" {\n            boredoms.push(words[i + 1]);\n   \
    \         i += 2;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut boredom_words:\
    \ Vec<&str> = vec![];\n    let mut sentence: Vec<&str> = vec![];\n    let mut\
    \ sentence_words: Vec<&str> = vec![];\n    let mut sentence_length: usize = 0;\n\
    \    let mut sentence_length2: usize = 0;\n    let mut sentence_length3: usize\
    \ = 0;\n    let mut sentence_length4: usize = 0;\n    let mut sentence_length5:\
    \ usize = 0;\n    let mut sentence_length6: usize = 0;\n    let mut sentence_length7:\
    \ usize = 0;\n    let mut sentence_length8: usize = 0;\n    let mut sentence_length9:\
    \ usize = 0;\n    let mut sentence_length10: usize = 0;\n    let mut sentence_length11:\
    \ usize = 0;\n    let mut sentence_length12: usize = 0;\n    let mut sentence_length13:\
    \ usize = 0;\n    let mut sentence_length14: usize = 0;\n    let mut sentence_length15:\
    \ usize = 0;\n    let mut sentence_length16: usize = 0;\n    let mut sentence_length17:\
    \ usize = 0;\n    let mut sentence_length18: usize = 0;\n    let mut sentence_length19:\
    \ usize = 0;\n    let mut sentence_length20: usize = 0;\n    let mut sentence_length21:\
    \ usize = 0;\n    let mut sentence_length22: usize = 0;\n    let mut sentence_length23:\
    \ usize = 0;\n    let mut sentence_length24: usize = 0;\n    let mut sentence_length25:\
    \ usize = 0;\n    let mut sentence_length26: usize = 0;\n    let mut sentence_length27:\
    \ usize = 0;\n    let mut sentence_length28: usize = 0;\n    let mut sentence_length29:\
    \ usize = 0;\n    let mut sentence_length30: usize = 0;\n    let mut sentence_length31:\
    \ usize = 0;\n    let mut sentence_length32: usize = 0;\n    let mut sentence_length33:\
    \ usize = 0;\n    let mut sentence_length34: usize = 0;\n    let mut sentence_length35:\
    \ usize = 0;\n    let mut sentence_length36: usize = 0;\n    let mut sentence_length37:\
    \ usize = 0;\n    let mut sentence_length38: usize = 0;\n    let mut sentence_length39:\
    \ usize = 0;\n    let mut sentence_length40: usize = 0;\n    let mut sentence_length41:\
    \ usize = 0;\n    let mut sentence_length42", "    let mut boredoms = vec![];\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i..i\
    \ + 1]);\n            i += 1;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    boredoms.iter().filter(|&s| s.len() > 1).count()", "    let mut\
    \ boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for word\
    \ in words {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut\
    \ boredom_words: Vec<&str> = vec![];\n    let mut boredom_sentence: Vec<&str>\
    \ = vec![];\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_sentence_index:\
    \ usize = 0;\n    let mut boredom_word_length: usize = 0;\n    let mut boredom_sentence_length:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_sentence_start_index:\
    \ usize = 0;\n    let mut boredom_word_end_index: usize = 0;\n    let mut boredom_sentence_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_char: usize = 0;\n    let mut boredom_sentence_start_char:\
    \ usize = 0;\n    let mut boredom_word_end_char: usize = 0;\n    let mut boredom_sentence_end_char:\
    \ usize = 0;\n    let mut boredom_word_start_char_index: usize = 0;\n    let mut\
    \ boredom_sentence_start_char_index: usize = 0;\n    let mut boredom_word_end_char_index:\
    \ usize = 0;\n    let mut boredom_sentence_end_char_index: usize = 0;\n    let\
    \ mut boredom_word_start_char_index: usize = 0;\n    let mut boredom_sentence_start_char_index:\
    \ usize = 0;\n    let mut boredom_word_end_char_index: usize = 0;\n    let mut\
    \ boredom_sentence_end_char_index: usize = 0;\n    let mut boredom_word_start_char_index:\
    \ usize = 0;\n    let mut boredom_sentence_start_char_index: usize = 0;\n    let\
    \ mut boredom_word_end_char_index: usize = 0;\n    let mut boredom_sentence_end_char_index:\
    \ usize = 0;\n    let mut boredom_word_start_char_index: usize = 0;\n    let mut\
    \ boredom_sentence_start_char_index: usize = 0;\n    let mut boredom_word_end_char_index:\
    \ usize = 0;\n    let mut boredom_sentence_end_char_index: usize = 0;\n    let\
    \ mut boredom_word_start_char_index: usize = 0;\n    let mut boredom_sentence_start_char_index:\
    \ usize = 0;\n    let mut boredom_word_end_char_index: usize = 0;\n    let mut\
    \ boredom_sentence_end_char_index: usize = 0;\n    let mut boredom_", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut boredom_words: Vec<&str> = Vec::new();\n    let mut sentence: Vec<&str>\
    \ = Vec::new();\n    let mut sentence_words: Vec<&str> = Vec::new();\n    let\
    \ mut sentence_length: usize = 0;\n    let mut sentence_length2: usize = 0;\n\
    \    let mut sentence_length3: usize = 0;\n    let mut sentence_length4: usize\
    \ = 0;\n    let mut sentence_length5: usize = 0;\n    let mut sentence_length6:\
    \ usize = 0;\n    let mut sentence_length7: usize = 0;\n    let mut sentence_length8:\
    \ usize = 0;\n    let mut sentence_length9: usize = 0;\n    let mut sentence_length10:\
    \ usize = 0;\n    let mut sentence_length11: usize = 0;\n    let mut sentence_length12:\
    \ usize = 0;\n    let mut sentence_length13: usize = 0;\n    let mut sentence_length14:\
    \ usize = 0;\n    let mut sentence_length15: usize = 0;\n    let mut sentence_length16:\
    \ usize = 0;\n    let mut sentence_length17: usize = 0;\n    let mut sentence_length18:\
    \ usize = 0;\n    let mut sentence_length19: usize = 0;\n    let mut sentence_length20:\
    \ usize = 0;\n    let mut sentence_length21: usize = 0;\n    let mut sentence_length22:\
    \ usize = 0;\n    let mut sentence_length23: usize = 0;\n    let mut sentence_length24:\
    \ usize = 0;\n    let mut sentence_length25: usize = 0;\n    let mut sentence_length26:\
    \ usize = 0;\n    let mut sentence_length27: usize = 0;\n    let mut sentence_length28:\
    \ usize = 0;\n    let mut sentence_length29: usize = 0;\n    let mut sentence_length30:\
    \ usize = 0;\n    let mut sentence_length31: usize = 0;\n    let mut sentence_length32:\
    \ usize = 0;\n    let mut sentence_length33: usize = 0;\n    let mut sentence_length34:\
    \ usize = 0;\n    let mut sentence_length35: usize = 0;\n    let mut sentence_length36:\
    \ usize = 0;\n    let mut sentence_length37: usize = 0;\n    let mut sentence_length38:\
    \ usize = 0;\n    let mut sentence_length39: usize = 0;\n    let mut sentence_length40:\
    \ usize = 0;\n    let mut sentence_length41: usize = 0;\n    let mut ", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ w in words {\n        if w == \"I\" {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut bored = 0;\n    let mut bored_chars = S.chars();\n\
    \    let mut bored_chars_iter = bored_chars.iter();\n    let mut bored_chars_next\
    \ = bored_chars_iter.next();\n    while let Some(bored_char) = bored_chars_next\
    \ {\n        if bored_char == ' ' || bored_char == '.' || bored_char == '?' ||\
    \ bored_char == '!' {\n            bored += 1;\n        }\n        bored_chars_next\
    \ = bored_chars_iter.next();\n    }\n    bored", "    let mut boredoms: isize\
    \ = 0;\n    let mut words = S.split_whitespace();\n    for w in words {\n    \
    \    if w == \"I\" {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n \
    \   for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.len()", "    let mut bored = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            i += 1;\n        } else {\n            i += 1;\n            bored\
    \ += 1;\n        }\n    }\n    bored", "    let mut boredoms: isize = 0;\n   \
    \ let mut words = S.split_whitespace();\n    for w in words {\n        if w ==\
    \ \"I\" {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = vec![];\n    let mut words = S.split_whitespace();\n    for word\
    \ in words {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \        }\n    }\n    boredoms.len()", "    let mut boredoms = vec![];\n    let\
    \ mut boredom_count = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredom_count += 1;\n        }\n        if word.ends_with(\"\
    .\") || word.ends_with(\"?\") || word.ends_with(\"!\") {\n            boredoms.push(word);\n\
    \        }\n    }\n    boredom_count", "    let mut boredoms = vec![];\n    let\
    \ mut i = 0;\n    while i < S.len() {\n        let mut j = i;\n        while j\
    \ < S.len() {\n            if S[j] == S[i] {\n                boredoms.push(S[j..]);\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  i += 1;\n    }\n    boredoms.iter().filter(|&s| s.starts_with(\"I\")).count()",
  "    let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n\
    \    let mut boredom_sentence: Vec<&str> = vec![];\n    let mut boredom_sentence_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_length:\
    \ usize = 0;\n    let mut boredom_word_is_boredom: usize = 0;\n    let mut boredom_word_is_boredom_word:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence: usize = 0;\n    let\
    \ mut boredom_word_is_boredom_sentence_index: usize = 0;\n    let mut boredom_word_is_boredom_sentence_length:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom: usize =\
    \ 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_word: usize = 0;\n\
    \    let mut boredom_word_is_boredom_sentence_is_boredom_sentence: usize = 0;\n\
    \    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_index: usize\
    \ = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_length:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom_word:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom_sentence:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom_sentence_index:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom_sentence_length:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom_sentence_is_boredom:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom_sentence_is_boredom_word:\
    \ usize = 0;\n    let mut boredom_word_is_boredom_sentence_is_boredom_sentence_is_boredom_sentence_is_boredom_sentence:\
    \ usize = 0;", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words\
    \ = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence = S.split_whitespace();\n    let mut i = 0;\n    while i\
    \ < sentence.len() {\n        if sentence[i].is_ascii_lowercase() {\n        \
    \    i += 1;\n            continue;\n        }\n        if sentence[i] == 'i'\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i]\
    \ == '.' || sentence[i] == '?' || sentence[i] == '!' {\n            i += 1;\n\
    \            continue;\n        }\n        boredoms += 1;\n        i += 1;\n \
    \   }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence\
    \ = S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len() {\n\
    \        if sentence[i].is_ascii(\"I\") {\n            boredoms += 1;\n      \
    \  }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms.push(1);\n        } else {\n            boredoms.push(0);\n\
    \        }\n    }\n    boredoms.iter().sum()", "    let mut boredoms: isize =\
    \ 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    for s in sentence\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence\
    \ = S.to_string();\n    let mut i = 0;\n    while i < sentence.len() {\n     \
    \   if sentence[i] == '.' || sentence[i] == '?' || sentence[i] == '!' {\n    \
    \        boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", " \
    \   let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] ==\
    \ \"I\" {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n   \
    \ boredoms", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n \
    \   for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    for word in words {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words\
    \ = S.split_whitespace();\n    let mut i = 0;\n    while i < words.len() {\n \
    \       if words[i] == \"I\" {\n            boredoms += 1;\n        }\n      \
    \  i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut\
    \ sentence: Vec<&str> = S.split_whitespace();\n    for word in sentence {\n  \
    \      if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut boredoms = vec![];\n    let mut boredom_counter\
    \ = 0;\n    let mut boredom_words = vec![];\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredom_counter = boredom_counter\
    \ + 1;\n            boredoms.push(boredom_counter);\n            boredom_counter\
    \ = 0;\n            boredom_words.push(word);\n        } else {\n            boredom_counter\
    \ = boredom_counter + 1;\n            boredom_words.push(word);\n        }\n \
    \   }\n    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut i =\
    \ 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n \
    \       }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut words = S.split_whitespace();\n    for word in words {\n \
    \       if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words =\
    \ S.split_whitespace();\n    let mut i = 0;\n    while i < words.len() {\n   \
    \     if words[i] == \"I\" {\n            boredoms += 1;\n        }\n        i\
    \ += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut i\
    \ = 0;\n    while i < S.len() {\n        let j = i;\n        while j < S.len()\
    \ && S[j] != '.' && S[j] != '?' && S[j] != '!' {\n            j += 1\n       \
    \ }\n        boredoms.push(S.split_whitespace()[j].to_string());\n        i =\
    \ j + 1\n    }\n    boredoms.iter().filter(|x| x.starts_with(\"I\")).count()",
  "    let mut boredoms = vec![];\n    for word in S.split_whitespace() {\n      \
    \  if word.starts_with(\"I\") {\n            boredoms.push(1);\n        } else\
    \ {\n            boredoms.push(0);\n        }\n    }\n    boredoms.iter().sum()",
  "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<String> = S.split_whitespace();\n\
    \    for s in sentence {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut bored = 0;\n    let mut\
    \ words = S.split_whitespace();\n    let mut i = 0;\n    while i < words.len()\
    \ {\n        if words[i] == \"I\" {\n            i += 1;\n            bored +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    bored", " \
    \   let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n            boredom_words.push(word);\n        }\n\
    \    }\n    boredoms += boredom_words.iter().filter(|w| w.starts_with(\"I\")).count();\n\
    \    boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut boredom_words:\
    \ Vec<&str> = vec![];\n    let mut boredom_word_len: usize = 0;\n    let mut boredom_word_start:\
    \ usize = 0;\n    let mut boredom_word_end: usize = 0;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found = false;\n    let mut boredom_", " \
    \   let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n   \
    \     if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n  \
    \  }\n    boredoms", "    let mut bored = 0;\n    let mut bored_words: Vec<&str>\
    \ = vec![];\n    let mut bored_sentences: Vec<&str> = vec![];\n    let mut bored_sentences_words:\
    \ Vec<&str> = vec![];\n    let mut bored_sentences_words_count: Vec<usize> = vec![];\n\
    \    let mut bored_sentences_words_count_bored: Vec<usize> = vec![];\n    let\
    \ mut bored_sentences_words_count_not_bored: Vec<usize> = vec![];\n    let mut\
    \ bored_sentences_words_count_not_bored_bored: Vec<usize> = vec![];\n    let mut\
    \ bored_sentences_words_count_not_bored_not_bored: Vec<usize> = vec![];\n    let\
    \ mut bored_sentences_words_count_not_bored_not_bored_bored: Vec<usize> = vec![];\n\
    \    let mut bored_sentences_words_count_not_bored_not_bored_not_bored: Vec<usize>\
    \ = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_bored:\
    \ Vec<usize> = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_not_bored:\
    \ Vec<usize> = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_not_bored_bored:\
    \ Vec<usize> = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_not_bored_not_bored:\
    \ Vec<usize> = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_not_bored_not_bored_bored:\
    \ Vec<usize> = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_not_bored_not_bored_not_bored:\
    \ Vec<usize> = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_not_bored_not_bored_not_bored_bored:\
    \ Vec<usize> = vec![];\n    let mut bored_sentences_words_count_not_bored_not_bored_not_bored_not_bored_not_bored_not_bored_not_bored:\
    \ Vec<", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n \
    \   let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut boredom_words: Vec<&str> = Vec::new();\n    let mut\
    \ boredom_sentences: Vec<&str> = Vec::new();\n    let mut boredom_sentence: Vec<&str>\
    \ = Vec::new();\n    let mut boredom_word: Vec<&str> = Vec::new();\n    let mut\
    \ boredom_word_count: Vec<usize> = Vec::new();\n    let mut boredom_word_index:\
    \ Vec<usize> = Vec::new();\n    let mut boredom_word_index: Vec<usize> = Vec::new();\n\
    \    let mut boredom_word_index: Vec<usize> = Vec::new();\n    let mut boredom_word_index:\
    \ Vec<usize> = Vec::new();\n    let mut boredom_word_index: Vec<usize> = Vec::new();\n\
    \    let mut boredom_word_index: Vec<usize> = Vec::new();\n    let mut boredom_word_index:\
    \ Vec<usize> = Vec::new();\n    let mut boredom_word_index: Vec<usize> = Vec::new();\n\
    \    let mut boredom_word_index: Vec<usize> = Vec::new();\n    let mut boredom_word_index:\
    \ Vec<usize> = Vec::new();\n    let mut boredom_word_index: Vec<usize> = Vec::new();\n\
    \    let mut boredom_word_index: Vec<usize> = Vec::new();\n    let mut boredom_word_index:\
    \ Vec<usize> = Vec::new();\n    let mut boredom_word_index: Vec<usize> = Vec::new();\n\
    \    let mut boredom_word_index: Vec<usize> = Vec::new();\n    let mut boredom_word_index:\
    \ Vec<usize> = Vec::new();\n    let mut boredom_word_index: Vec<usize> = Vec::new();\n\
    \    let mut boredom_word_index: Vec<usize> = Vec::new();\n    let mut boredom_word_index:\
    \ Vec<usize> = Vec::new();\n    let mut boredom_word_index: Vec<usize> = Vec::new();\n\
    \    let mut boredom_word_index: Vec<usize> = Vec::new();\n    let mut boredom_word_",
  "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii_lowercase()\
    \ {\n            if sentence[i].as_str() == \"i\" {\n                boredoms\
    \ += 1;\n            }\n            i += 1;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n   \
    \ let mut words = S.split_whitespace();\n    loop {\n        let mut word = words.next().unwrap();\n\
    \        if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \        if !words.next().unwrap().is_empty() {\n            break;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut i = 0;\n\
    \    while i < S.len() {\n        if S[i] == \".\" || S[i] == \"?\" || S[i] ==\
    \ \"!\" {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    let mut i\
    \ = 0;\n    while i < sentence.len() {\n        if sentence[i].starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n\
    \        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n        i += 1;\n  \
    \  }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms = vec![];\n  \
    \  let mut boredom_count = 0;\n    let mut boredom_word = \"\";\n    for word\
    \ in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n          \
    \  boredom_count += 1;\n            boredom_word = word;\n        } else {\n \
    \           boredoms.push(boredom_word);\n            boredom_count = 0;\n   \
    \         boredom_word = word;\n        }\n    }\n    boredoms.push(boredom_word);\n\
    \    boredoms.iter().filter(|&b| b.starts_with(\"I\")).count()", "    let mut\
    \ boredoms: isize = 0;\n    let mut sentence = S.to_string();\n    let mut i =\
    \ 0;\n    while i < sentence.len() {\n        if sentence[i] == '.' || sentence[i]\
    \ == '?' || sentence[i] == '!' {\n            boredoms += 1;\n        }\n    \
    \    i += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut\
    \ i = 0;\n    while i < S.len() {\n        let mut j = i;\n        while j < S.len()\
    \ {\n            if S[j] == S[i] {\n                boredoms.push(S[j..]);\n \
    \               j = j + 1;\n            } else {\n                break;\n   \
    \         }\n        }\n        i = i + 1;\n    }\n    boredoms.iter().filter(|s|\
    \ s.starts_with(\"I\")).count()", "    let mut boredoms: isize = 0;\n    let mut\
    \ sentence: Vec<String> = S.split_whitespace();\n    let mut i = 0;\n    while\
    \ i < sentence.len() {\n        if sentence[i].starts_with(\"I\") {\n        \
    \    boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n   \
    \ let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut bored = 0;\n    let mut words = S.split_whitespace();\n    let mut\
    \ i = 0;\n    while i < words.len() {\n        if words[i] == \"I\" {\n      \
    \      i += 1;\n            bored += 1;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    bored", "    let mut boredoms: isize = 0;\n    let mut\
    \ words = S.split_whitespace();\n    loop {\n        if let Some(word) = words.next()\
    \ {\n            if word == \"I\" {\n                boredoms += 1;\n        \
    \    } else {\n                break;\n            }\n        } else {\n     \
    \       break;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut words = S.split_whitespace();\n    for word in words {\n \
    \       if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut boredom_counter\
    \ = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms.push(word);\n            boredom_counter += 1;\n\
    \        }\n    }\n    boredom_counter", "    let mut boredoms: isize = 0;\n \
    \   let mut words = S.split_whitespace();\n    loop {\n        if words.next().unwrap().is_none()\
    \ {\n            break;\n        }\n        let word = words.next().unwrap().unwrap();\n\
    \        if word == \"I\" {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str>\
    \ = S.split_whitespace();\n    for word in sentence {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] ==\
    \ \"I\" {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n   \
    \ boredoms", "    let mut boredoms: isize = 0;\n    let mut i = 0;\n    while\
    \ i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n    \
    \        boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", " \
    \   let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut sentence_index: usize = 0;\n    let mut sentence_length: usize =\
    \ 0;\n    let mut sentence_word: &str;\n    while sentence_index < sentence.len()\
    \ {\n        sentence_word = sentence[sentence_index];\n        if sentence_word\
    \ == \"I\" {\n            boredoms += 1;\n        }\n        sentence_index +=\
    \ 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words\
    \ = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!'\
    \ {\n            i += 1;\n        } else {\n            boredoms += 1;\n     \
    \   }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence: Vec<&str> = S.split_whitespace();\n    for word in sentence\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s =\
    \ S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n        if s[i]\
    \ == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n        } else\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    while s.len()\
    \ > 0 {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n     \
    \   }\n        s = s.trim_end().to_string();\n    }\n    boredoms", "    let mut\
    \ boredoms = vec![];\n    let mut i = 0;\n    while i < S.len() {\n        if\
    \ S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \        }\n        i += 1;\n    }\n    boredoms.len()", "    let mut boredoms:\
    \ isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else {\n\
    \            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut bored = 0;\n    let mut words = S.split_whitespace();\n    let mut\
    \ i = 0;\n    while i < words.len() {\n        if words[i] == \"I\" {\n      \
    \      i += 1;\n            bored += 1;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    bored", "    let mut boredoms: isize = 0;\n    let mut\
    \ sentence: Vec<&str> = S.split_whitespace();\n    for word in sentence {\n  \
    \      if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n \
    \   }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence:\
    \ Vec<&str> = S.split_whitespace();\n    let mut sentence_index = 0;\n    let\
    \ mut sentence_length: usize = 0;\n    while sentence_index < sentence.len() {\n\
    \        let mut sentence_word: &str = sentence[sentence_index];\n        if sentence_word\
    \ == \"I\" {\n            boredoms += 1;\n        }\n        sentence_index +=\
    \ 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words\
    \ = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms = vec![];\n    let mut words = S.split_whitespace();\n    let mut\
    \ i = 0;\n    while i < words.len() {\n        if words[i] == \"I\" {\n      \
    \      boredoms.push(words[i..i + 1]);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    boredoms.iter().filter(|&b| b.starts_with(\"\
    I\")).count()", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    while s.len() > 0 {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        s = s.trim_end().to_string();\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace().collect();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] ==\
    \ \"I\" {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n   \
    \ boredoms", "    let mut boredoms: isize = 0;\n    let mut i = 0;\n    while\
    \ i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n    \
    \        i += 1;\n        } else {\n            boredoms += 1;\n        }\n  \
    \      i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut words = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms = vec![];\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms.push(words[i + 1]);\n            i += 2;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    boredoms.len()", "    let\
    \ mut boredoms: isize = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n \
    \   let mut boredom_sentence: Vec<&str> = vec![];\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_sentence_index: usize = 0;\n    let mut boredom_word_length:\
    \ usize = 0;\n    let mut boredom_sentence_length: usize = 0;\n    let mut boredom_word_start:\
    \ usize = 0;\n    let mut boredom_sentence_start: usize = 0;\n    let mut boredom_word_end:\
    \ usize = 0;\n    let mut boredom_sentence_end: usize = 0;\n    let mut boredom_word_word_start:\
    \ usize = 0;\n    let mut boredom_sentence_word_start: usize = 0;\n    let mut\
    \ boredom_word_word_end: usize = 0;\n    let mut boredom_sentence_word_end: usize\
    \ = 0;\n    let mut boredom_word_word_word_start: usize = 0;\n    let mut boredom_sentence_word_word_start:\
    \ usize = 0;\n    let mut boredom_word_word_word_end: usize = 0;\n    let mut\
    \ boredom_sentence_word_word_end: usize = 0;\n    let mut boredom_word_word_word_word_start:\
    \ usize = 0;\n    let mut boredom_sentence_word_word_word_start: usize = 0;\n\
    \    let mut boredom_word_word_word_word_end: usize = 0;\n    let mut boredom_sentence_word_word_word_end:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_start: usize = 0;\n\
    \    let mut boredom_sentence_word_word_word_word_start: usize = 0;\n    let mut\
    \ boredom_word_word_word_word_word_end: usize = 0;\n    let mut boredom_sentence_word_word_word_word_end:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_word_start: usize =\
    \ 0;\n    let mut boredom_sentence_word_word_word_word_word_start: usize = 0;\n\
    \    let mut boredom_word_word_word_word_word_word_end: usize = 0;\n    let mut\
    \ boredom_sentence_word_word_word_word_word_end: usize = 0;\n    let mut boredom_word_word_word_word_word_word_word_start:\
    \ usize = 0;\n    let mut boredom_sentence_word_word_word_word_word_word_start:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_word_word_end: usize\
    \ = 0;\n    let mut boredom_sentence_word_word_word_word_word_", "    let mut\
    \ boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    for word in sentence {\n        if word.starts_with(\"I\") {\n          \
    \  boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else {\n      \
    \      boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "   \
    \ let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n  \
    \  for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    for word in words {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms = Vec::new();\n    let mut boredom_counter\
    \ = 0;\n    let mut boredom_counter2 = 0;\n    let mut boredom_counter3 = 0;\n\
    \    let mut boredom_counter4 = 0;\n    let mut boredom_counter5 = 0;\n    let\
    \ mut boredom_counter6 = 0;\n    let mut boredom_counter7 = 0;\n    let mut boredom_counter8\
    \ = 0;\n    let mut boredom_counter9 = 0;\n    let mut boredom_counter10 = 0;\n\
    \    let mut boredom_counter11 = 0;\n    let mut boredom_counter12 = 0;\n    let\
    \ mut boredom_counter13 = 0;\n    let mut boredom_counter14 = 0;\n    let mut\
    \ boredom_counter15 = 0;\n    let mut boredom_counter16 = 0;\n    let mut boredom_counter17\
    \ = 0;\n    let mut boredom_counter18 = 0;\n    let mut boredom_counter19 = 0;\n\
    \    let mut boredom_counter20 = 0;\n    let mut boredom_counter21 = 0;\n    let\
    \ mut boredom_counter22 = 0;\n    let mut boredom_counter23 = 0;\n    let mut\
    \ boredom_counter24 = 0;\n    let mut boredom_counter25 = 0;\n    let mut boredom_counter26\
    \ = 0;\n    let mut boredom_counter27 = 0;\n    let mut boredom_counter28 = 0;\n\
    \    let mut boredom_counter29 = 0;\n    let mut boredom_counter30 = 0;\n    let\
    \ mut boredom_counter31 = 0;\n    let mut boredom_counter32 = 0;\n    let mut\
    \ boredom_counter33 = 0;\n    let mut boredom_counter34 = 0;\n    let mut boredom_counter35\
    \ = 0;\n    let mut boredom_counter36 = 0;\n    let mut boredom_counter37 = 0;\n\
    \    let mut boredom_counter38 = 0;\n    let mut boredom_counter39 = 0;\n    let\
    \ mut boredom_counter40 = 0;\n    let mut boredom_counter41 = 0;\n    let mut\
    \ boredom_counter42 = 0;\n    let mut boredom_counter43 = 0;\n    let mut boredom_counter44\
    \ = 0;\n    let mut boredom_counter45 = 0;\n    let mut boredom_counter46 = 0;\n\
    \    let mut boredom_counter47 = 0;\n    let mut boredom_counter48 = 0;\n    let\
    \ mut boredom_counter49 = 0;\n    let mut boredom_counter50 = 0;\n    let mut\
    \ bore", "    let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<&str>\
    \ = vec![];\n    let mut boredom_sentence: Vec<&str> = vec![];\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_sentence_index: usize = 0;\n    let mut boredom_word_length:\
    \ usize = 0;\n    let mut boredom_sentence_length: usize = 0;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_sentence_found = false;\n    let mut boredom_word_found\
    \ = false;\n    let mut bo", "    let mut boredoms: isize = 0;\n    let mut sentence:\
    \ Vec<&str> = S.split_whitespace();\n    let mut sentence_index: usize = 0;\n\
    \    let mut sentence_length: usize = 0;\n    let mut sentence_word: &str;\n \
    \   let mut sentence_word_index: usize = 0;\n    let mut sentence_word_length:\
    \ usize = 0;\n    let mut sentence_word_is_bored: &str;\n\n    while sentence_index\
    \ < sentence.len() {\n        sentence_word = &sentence[sentence_index];\n   \
    \     sentence_word_index = sentence_index;\n        sentence_word_length = sentence_word.len();\n\
    \        sentence_word_is_bored = &sentence[sentence_index];\n\n        while\
    \ sentence_word_index < sentence_word_length {\n            if sentence_word_is_bored\
    \ == \"I\" {\n                boredoms += 1;\n            }\n            sentence_word_index\
    \ += 1;\n        }\n        sentence_index += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str>\
    \ = S.split_whitespace();\n    let mut i: usize = 0;\n    while i < sentence.len()\
    \ {\n        if sentence[i] == \"I\" {\n            boredoms += 1;\n        }\n\
    \        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n  \
    \  for s in S.split_whitespace() {\n        if s.starts_with(\"I\") {\n      \
    \      boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    loop {\n        let\
    \ mut word = words.next().unwrap();\n        if word == \"I\" {\n            boredoms\
    \ += 1;\n        }\n        if word == \".\" || word == \"?\" || word == \"!\"\
    \ {\n            break;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence: Vec<&str> = S.split_whitespace();\n    let mut i: usize\
    \ = 0;\n    while i < sentence.len() {\n        if sentence[i].starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    let\
    \ mut sentence_index = 0;\n    let mut word_index = 0;\n    while word_index <\
    \ sentence.len() {\n        if sentence[word_index].starts_with(\"I\") {\n   \
    \         boredoms += 1;\n        }\n        word_index += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence = S.to_string();\n    let\
    \ mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] == '.' ||\
    \ sentence[i] == '?' || sentence[i] == '!' {\n            boredoms += 1;\n   \
    \         i += 1;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n      \
    \      i += 1;\n        } else {\n            boredoms += 1;\n        }\n    \
    \    i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut sentence: Vec<&str> = S.split_whitespace().collect();\n    let mut i = 0;\n\
    \    while i < sentence.len() {\n        if sentence[i] == \"I\" {\n         \
    \   boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut bored = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else\
    \ {\n            bored += 1;\n        }\n        i += 1;\n    }\n    bored", " \
    \   let mut boredoms = vec![];\n    let mut i = 0;\n    while i < S.len() {\n\
    \        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut i = 0;\n\
    \    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ {\n            i += 1;\n        } else {\n            boredoms += 1;\n     \
    \   }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n        i += 1;\n  \
    \  }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence =\
    \ S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len() {\n\
    \        if sentence[i] == \"I\" {\n            boredoms += 1;\n        }\n  \
    \      i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut words = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut boredoms_cnt = 0;\n    for word in S.split_whitespace() {\n     \
    \   if word.starts_with(\"I\") {\n            boredoms.push(word);\n         \
    \   boredoms_cnt += 1;\n        }\n    }\n    boredoms_cnt", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut i = 0;\n\
    \    while i < S.len() {\n        let c = S[i];\n        if c == '.' || c == '?'\
    \ || c == '!' {\n            boredoms.push(i);\n        }\n        i += 1;\n \
    \   }\n    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut sentence\
    \ = S.to_string();\n    let mut i = 0;\n    while i < sentence.len() {\n     \
    \   if sentence[i] == '.' || sentence[i] == '?' || sentence[i] == '!' {\n    \
    \        boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", " \
    \   let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence = S.to_string();\n    let\
    \ mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] == '.' ||\
    \ sentence[i] == '?' || sentence[i] == '!' {\n            i += 1;\n        } else\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n \
    \   let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n \
    \   for w in words {\n        if w == \"I\" {\n            boredoms += 1;\n  \
    \      }\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut i\
    \ = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!' {\n            boredoms.push(S[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    boredoms.len()", "    let mut\
    \ boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] ==\
    \ \"I\" {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n   \
    \ boredoms", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    for w in words {\n        if w == \"I\" {\n            boredoms += 1;\n \
    \       }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut\
    \ sentence: Vec<&str> = S.split_whitespace();\n    let mut i = 0;\n    while i\
    \ < sentence.len() {\n        if sentence[i].starts_with(\"I\") {\n          \
    \  boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for s in S.split_whitespace() {\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i\
    \ + 1]);\n            i += 2;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut\
    \ s = S.to_string();\n    while s.len() > 0 {\n        let mut i = s.find('i');\n\
    \        if i == s.len() {\n            break;\n        }\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        s = &s[i..];\n    }\n \
    \   boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words\
    \ = S.split_whitespace();\n    for w in words {\n        if w == \"I\" {\n   \
    \         boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence = S.split_whitespace();\n    let mut i = 0;\n\
    \    while i < sentence.len() {\n        if sentence[i].is_ascii_lowercase() {\n\
    \            if sentence[i] == \"i\" {\n                boredoms += 1;\n     \
    \       }\n            i += 1;\n        } else {\n            i += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut i =\
    \ 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!' {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n \
    \   for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence = String::new();\n    let mut words = S.split_whitespace();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        sentence += &word + &\".\";\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n \
    \   for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut bored = 0;\n \
    \   let mut words = S.split_whitespace();\n    loop {\n        if words.next().unwrap().is_empty()\
    \ {\n            break;\n        }\n        if words.next().unwrap().starts_with(\"\
    I\") {\n            bored += 1;\n        }\n    }\n    bored", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    let mut i = 0;\n\
    \    while i < words.len() {\n        if words[i] == \"I\" {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut i = 0;\n\
    \    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ {\n            boredoms.push(S[i]);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    boredoms.len()", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    let\
    \ mut sentence_index: usize = 0;\n    let mut sentence_length: usize = 0;\n  \
    \  let mut sentence_words: Vec<&str> = Vec::new();\n    let mut sentence_word_index:\
    \ usize = 0;\n    let mut sentence_word_length: usize = 0;\n    let mut sentence_word_length2:\
    \ usize = 0;\n    let mut sentence_word_length3: usize = 0;\n    let mut sentence_word_length4:\
    \ usize = 0;\n    let mut sentence_word_length5: usize = 0;\n    let mut sentence_word_length6:\
    \ usize = 0;\n    let mut sentence_word_length7: usize = 0;\n    let mut sentence_word_length8:\
    \ usize = 0;\n    let mut sentence_word_length9: usize = 0;\n    let mut sentence_word_length10:\
    \ usize = 0;\n    let mut sentence_word_length11: usize = 0;\n    let mut sentence_word_length12:\
    \ usize = 0;\n    let mut sentence_word_length13: usize = 0;\n    let mut sentence_word_length14:\
    \ usize = 0;\n    let mut sentence_word_length15: usize = 0;\n    let mut sentence_word_length16:\
    \ usize = 0;\n    let mut sentence_word_length17: usize = 0;\n    let mut sentence_word_length18:\
    \ usize = 0;\n    let mut sentence_word_length19: usize = 0;\n    let mut sentence_word_length20:\
    \ usize = 0;\n    let mut sentence_word_length21: usize = 0;\n    let mut sentence_word_length22:\
    \ usize = 0;\n    let mut sentence_word_length23: usize = 0;\n    let mut sentence_word_length24:\
    \ usize = 0;\n    let mut sentence_word_length25: usize = 0;\n    let mut sentence_word_length26:\
    \ usize = 0;\n    let mut sentence_word_length27: usize = 0;\n    let mut sentence_word_length28:\
    \ usize = 0;\n    let mut sentence_word_length29: usize = 0;\n    let mut sentence_word_length30:\
    \ usize = 0;\n    let mut sentence_word_length31: usize = 0;\n    let mut sentence_word_length32:\
    \ usize = 0;\n    let mut sentence_word_length33: usize = 0;\n    let mut sentence_word_length34:\
    \ usize = 0;\n    let mut sentence_word_length35: usize = 0;\n    let mut sentence_word_length36:\
    \ usize = 0;\n    let mut sentence_word_length37: usize = 0;", "    let mut boredoms:\
    \ isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n        let mut j =\
    \ i;\n        while j < S.len() {\n            if S[j] == ' ' {\n            \
    \    break;\n            }\n            j += 1\n        }\n        if j == i {\n\
    \            boredoms += 1;\n        }\n        i = j;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut sentence_index: usize = 0;\n    for word in sentence {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n        sentence_index\
    \ += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let mut i\
    \ = 0;\n    while i < S.len() {\n        if S[i] == \".\" || S[i] == \"?\" ||\
    \ S[i] == \"!\" {\n            boredoms.push(S[i]);\n            i += 1;\n   \
    \     } else {\n            i += 1;\n        }\n    }\n    boredoms.len()", " \
    \   let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n\
    \    let mut word: &str = sentence.first().unwrap();\n    while let Some(word)\
    \ = sentence.next() {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n        i += 1;\n  \
    \  }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n \
    \   for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms = vec![];\n  \
    \  let mut i = 0;\n    while i < S.len() {\n        if S[i] == \".\" || S[i] ==\
    \ \"?\" || S[i] == \"!\" {\n            boredoms.push(S[i]);\n        }\n    \
    \    i += 1;\n    }\n    boredoms.len()", "    let mut boredoms = vec![];\n  \
    \  let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i < words.len()\
    \ {\n        if words[i] == \"I\" {\n            boredoms.push(words[i..].iter().cloned().collect::<Vec<_>>());\n\
    \            i += 3;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.iter().filter(|x| x.len() == 1).count()", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    let mut i = 0;\n\
    \    while i < words.len() {\n        if words[i] == \"I\" {\n            boredoms\
    \ += 1;\n            i += 1;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words =\
    \ S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n        if\
    \ word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n  \
    \  boredoms", "    let mut boredoms = vec![];\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms.push(words[i + 1]);\n            i += 2;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    boredoms.len()", "    let\
    \ mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    while s.len()\
    \ > 0 {\n        let mut i = s.find('i');\n        if i == s.len() {\n       \
    \     break;\n        }\n        if s.starts_with(\"i\") {\n            boredoms\
    \ += 1;\n        }\n        s = &s[i..];\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence = S.split_whitespace();\n    let mut i = 0;\n\
    \    while i < sentence.len() {\n        if sentence[i].is_ascii_lowercase() {\n\
    \            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_uppercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_digit()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_lowercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_uppercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_digit()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_lowercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_uppercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_digit()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_lowercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_uppercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_digit()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_symbol()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_punctuation()\
    \ {\n            i += 1;\n            continue;\n        }\n        if sentence[i].is_ascii_",
  "    let mut boredoms: isize = 0;\n    let mut sentence = S.to_string();\n    let\
    \ mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] == '.' ||\
    \ sentence[i] == '?' || sentence[i] == '!' {\n            i += 1;\n        } else\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n    let mut boredom_word_count:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_count: Vec<usize> = vec![];\n    let mut boredom_word_length_count2:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_count3: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_count4: Vec<usize> = vec![];\n    let mut boredom_word_length_count5:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_count6: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_count7: Vec<usize> = vec![];\n    let mut boredom_word_length_count8:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_count9: Vec<usize> = vec![];\n\
    \    let mut boredom_word_length_count10: Vec<usize> = vec![];\n    let mut boredom_word_length_count11:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_count12: Vec<usize> =\
    \ vec![];\n    let mut boredom_word_length_count13: Vec<usize> = vec![];\n   \
    \ let mut boredom_word_length_count14: Vec<usize> = vec![];\n    let mut boredom_word_length_count15:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_count16: Vec<usize> =\
    \ vec![];\n    let mut boredom_word_length_count17: Vec<usize> = vec![];\n   \
    \ let mut boredom_word_length_count18: Vec<usize> = vec![];\n    let mut boredom_word_length_count19:\
    \ Vec<usize> = vec![];\n    let mut boredom_word_length_count20: Vec<usize> =\
    \ vec![];\n    let mut boredom_word_length_count21: Vec<usize> = vec![];\n   \
    \ let mut boredom_word_length_count22", "    let mut bored = 0;\n    let mut words\
    \ = S.split_whitespace();\n    for w in words {\n        if w == \"I\" {\n   \
    \         bored += 1;\n        }\n    }\n    bored", "    let mut boredoms: isize\
    \ = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else {\n      \
    \      boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "   \
    \ let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n  \
    \  let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\" {\n\
    \            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii_lowercase()\
    \ {\n            if sentence[i] == \"i\" {\n                boredoms += 1;\n \
    \           }\n            i += 1;\n        } else {\n            i += 1;\n  \
    \      }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut\
    \ sentence = S.to_string();\n    let mut i = 0;\n    while i < sentence.len()\
    \ {\n        if sentence[i] == '.' || sentence[i] == '?' || sentence[i] == '!'\
    \ {\n            i += 1;\n        } else {\n            boredoms += 1;\n     \
    \   }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    for s in S.split_whitespace() {\n        if s.starts_with(\"I\") {\n    \
    \        boredoms += 1;\n        }\n    }\n    boredoms", "    let mut boredoms\
    \ = Vec::new();\n    let mut words = S.split_whitespace();\n    let mut i = 0;\n\
    \    while i < words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i]);\n\
    \        }\n        i += 1;\n    }\n    boredoms.len()", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    for\
    \ s in sentence {\n        if s.starts_with(\"I\") {\n            boredoms +=\
    \ 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n   \
    \ let mut words = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n    \
    \    if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n   \
    \     } else {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n\
    \    boredoms"]
stop_tokens:
- "\n}"
