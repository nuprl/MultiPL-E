name: HumanEval_87_get_row
language: rust
prompt: "/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// get_row([\n/// [1,2,3,4,5,6],\n/// [1,2,3,4,1,6],\n\
  /// [1,2,3,4,5,1]\n/// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// get_row([],\
  \ 1) == []\n/// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>,\
  \ x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1,\
  \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0,\
  \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2,\
  \ 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4,\
  \ 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1),\
  \ (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3,\
  \ 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5,\
  \ 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1),\
  \ vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\
  \ 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1),\
  \ Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize,\
  \ isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]],\
  \ 3), vec![(2, 2)]);\n}\n"
completions: ["    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n \
    \   let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorter: Vec<(isize, isize)> = vec![];\n    let mut col_sorter:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_sorter_index = 0;\n    let mut\
    \ col_sorter_index = 0;\n    let mut row = 0;\n    let mut col = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < rows {\n        row_sorter.clear();\n\
    \        col_sorter.clear();\n        row_sorter_index = 0;\n        col_sorter_index\
    \ = 0;\n        row_sorter.push((i, 0));\n        col_sorter.push((0, 0));\n \
    \       i += 1;\n        while j < cols {\n            if lst[i][j] == x {\n \
    \               row_sorter.push((i, j));\n                col_sorter.push((j,\
    \ 0));\n                row_sorter_index += 1;\n                col_sorter_index\
    \ += 1;\n                i += 1;\n                j += 1;\n            } else\
    \ {\n                j += 1;\n            }\n        }\n        row_sorted.push(row_sorter);\n\
    \        col_sorted.push(col_sorter);\n    }\n    sort_rows(row_sorted, row_sorter_index);\n\
    \    sort_cols(col_sorted, col_sorter_index);\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut row = 0;\n    let\
    \ mut col = 0;\n    let mut coord = vec![];\n    while i < rows {\n        row\
    \ += 1;\n        coord.clear();\n        coord.push((row, 0));\n        i += 1;\n\
    \        while j < cols {\n            if row_sorted[i][j] == row_sorted[i][k]\
    \ {\n                coord.push((row_sorted[i][j], col_sorted[k][0]));\n     \
    \           j += 1;\n                k += 1;\n            } else {\n         \
    \       k += 1;\n            }\n        }\n        coords.push(coord);\n    }\n\
    \    coords", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    while rows > 0 || cols > 0 {\n        let mut\
    \ row = 0;\n        let mut col = 0;\n        while row < rows && col < cols {\n\
    \            if row == rows && col == cols {\n                if lst[row][col]\
    \ == x {\n                    coords.push((row, col));\n                }\n  \
    \          } else {\n                if lst[row][col] > lst[row][col + 1] {\n\
    \                    row++;\n                } else {\n                    col++;\n\
    \                }\n            }\n        }\n        cols = col;\n        rows\
    \ = row;\n    }\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.sort_by(|a,\
    \ b| b.2.cmp(&a.2));\n    coords", "    let mut coords = vec![];\n    let mut\
    \ rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        let\
    \ mut row_coords = vec![];\n        let mut col_coords = vec![];\n        for\
    \ col in row {\n            if col == x {\n                row_coords.push((row,\
    \ col));\n                col_coords.push((row, col));\n            }\n      \
    \  }\n        rows.push(row_coords);\n        cols.push(col_coords);\n    }\n\
    \    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    rows.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    cols.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.iter().map(|c| c.1).collect()",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx2 = vec![];\n\
    \    let mut col_sort_idx2 = vec![];\n    let mut row_sort_idx3 = vec![];\n  \
    \  let mut col_sort_idx3 = vec![];\n    let mut row_sort_idx4 = vec![];\n    let\
    \ mut col_sort_idx4 = vec![];\n    let mut row_sort_idx5 = vec![];\n    let mut\
    \ col_sort_idx5 = vec![];\n    let mut row_sort_idx6 = vec![];\n    let mut col_sort_idx6\
    \ = vec![];\n    let mut row_sort_idx7 = vec![];\n    let mut col_sort_idx7 =\
    \ vec![];\n    let mut row_sort_idx8 = vec![];\n    let mut col_sort_idx8 = vec![];\n\
    \    let mut row_sort_idx9 = vec![];\n    let mut col_sort_idx9 = vec![];\n  \
    \  let mut row_sort_idx10 = vec![];\n    let mut col_sort_idx10 = vec![];\n  \
    \  let mut row_sort_idx11 = vec![];\n    let mut col_sort_idx11 = vec![];\n  \
    \  let mut row_sort_idx12 = vec![];\n    let mut col_sort_idx12 = vec![];\n  \
    \  let mut row_sort_idx13 = vec![];\n    let mut col_sort_idx13 = vec![];\n  \
    \  let mut row_sort_idx14 = vec![];\n    let mut col_sort_idx14 = vec![];\n  \
    \  let mut row_sort_idx15 = vec![];\n    let mut col_sort_idx15 = vec![];\n  \
    \  let mut row_sort_idx16 = vec![];\n    let mut col_sort_idx16 = vec![];\n  \
    \  let mut row_sort_idx17 = vec![];\n    let mut col_sort_idx17 = vec![];\n  \
    \  let mut row_sort_idx18 = vec![];\n    let mut col_sort_idx18 = vec![];\n  \
    \  let mut row_sort_idx19 = vec![];\n    let mut col_sort_idx19 = vec![];\n  \
    \  let mut row_sort_idx20 = vec![];\n    let mut ", "    let mut rows: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n  \
    \      row_len += row.len();\n        if row_len == x {\n            rows.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            row_len -= 1;\n         \
    \   col_idx = 0;\n        }\n        for col in row {\n            col_len +=\
    \ 1;\n            if col_len == x {\n                rows.push((row_idx, col_idx));\n\
    \                row_idx += 1;\n                row_len -= 1;\n              \
    \  col_idx = 0;\n            }\n            col_idx += 1;\n        }\n    }\n\
    \    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    rows", "    let mut result = Vec::new();\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_result = Vec::new();\n\
    \        while col_idx < cols {\n            if row_idx == 0 {\n             \
    \   row_result.push((row_idx, col_idx));\n            }\n            if row_idx\
    \ == rows - 1 {\n                row_result.push((row_idx, col_idx - cols));\n\
    \            }\n            if col_idx == cols - 1 {\n                row_result.push((row_idx\
    \ - 1, col_idx));\n            }\n            if col_idx == cols {\n         \
    \       row_result.push((row_idx - 1, col_idx - cols));\n            }\n     \
    \       col_idx += 1;\n        }\n        result.push(row_result);\n        row_idx\
    \ += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut rows: Vec<(isize, isize)> = vec![];\n \
    \   let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx_by_col: Vec<isize>\
    \ = vec![];\n    let mut col_idx: Vec<isize> = vec![];\n    let mut col_idx_by_row:\
    \ Vec<isize> = vec![];\n    let mut row_idxs: Vec<isize> = vec![];\n    let mut\
    \ col_idxs: Vec<isize> = vec![];\n    let mut row_idx_by_cols: Vec<isize> = vec![];\n\
    \    let mut col_idx_by_rows: Vec<isize> = vec![];\n    let mut row_idxs_by_col:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_by_row: Vec<isize> = vec![];\n  \
    \  let mut row_idxs_by_cols: Vec<isize> = vec![];\n    let mut col_idxs_by_rows:\
    \ Vec<isize> = vec![];\n    let mut row_idxs_by_cols_by_row: Vec<isize> = vec![];\n\
    \    let mut col_idxs_by_rows_by_col: Vec<isize> = vec![];\n    let mut row_idxs_by_cols_by_rows:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_by_rows_by_cols: Vec<isize> = vec![];\n\
    \    let mut row_idxs_by_cols_by_rows_by_col: Vec<isize> = vec![];\n    let mut\
    \ col_idxs_by_rows_by_cols_by_row: Vec<isize> = vec![];\n    let mut row_idxs_by_cols_by_rows_by_cols:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_by_rows_by_cols_by_rows: Vec<isize>\
    \ = vec![];\n    let mut row_idxs_by_cols_by_rows_by_cols_by_row: Vec<isize> =\
    \ vec![];\n    let mut col_idxs_by_rows_by_cols_by_rows_by_col: Vec<isize> = vec![];\n\
    \    let mut row_idxs_by_cols_by_rows_by_cols_by_rows: Vec<isize> = vec![];\n\
    \    let mut col_idxs_by_rows_by_cols_by_rows_by_cols: Vec<isize> = vec![];\n\
    \    let mut row_idxs_by_cols_by_rows_by_cols_by_rows_by_col: Vec<isize> = vec",
  "    let mut result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_start = 0;\n    let mut col_start = 0;\n    while row_idx < row_len\
    \ {\n        let mut row_end = row_idx;\n        while row_end < row_len && row_idx\
    \ == row_end {\n            row_end++;\n        }\n        let mut col_end = col_idx;\n\
    \        while col_end < col_len && col_idx == col_end {\n            col_end++;\n\
    \        }\n        if row_end == row_idx {\n            result.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            col_idx = 1;\n          \
    \  row_start = row_idx;\n            col_start = col_idx;\n        } else {\n\
    \            let mut row_end = row_idx;\n            while row_end < row_len &&\
    \ row_idx == row_end {\n                row_end++;\n            }\n          \
    \  let mut col_end = col_idx;\n            while col_end < col_len && col_idx\
    \ == col_end {\n                col_end++;\n            }\n            if col_end\
    \ == col_idx {\n                let mut row_start = row_idx;\n               \
    \ while row_start < row_len && row_idx == row_start {\n                    row_start++;\n\
    \                }\n                let mut col_start = col_idx;\n           \
    \     while col_start < col_len && col_idx == col_start {\n                  \
    \  col_start++;\n                }\n                result.push((row_start, col_start));\n\
    \                row_idx += 1;\n                col_idx = 1;\n            } else\
    \ {\n                let mut row_start = row_idx;\n                while row_start\
    \ < row_len && row_idx == row_start {\n                    row_start++;\n    \
    \            }\n                let mut col_start = col_idx;\n               \
    \ while col_start < col_len && col_idx == col_start {\n                    col_start++;\n\
    \                }\n                result.push((row_start, col_start));\n   \
    \             row_idx += 1;\n                col_idx = 1;\n            }\n   \
    \     }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut col_max_idx = 0;\n    let mut col_max_len = 0;\n    let mut col_max_idx2\
    \ = 0;\n    let mut col_max_len2 = 0;\n    for row in lst {\n        row_len +=\
    \ 1;\n        if row_len == x {\n            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n\
    \            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a,\
    \ b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n\
    \            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a,\
    \ b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n\
    \            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a,\
    \ b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n\
    \            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a,\
    \ b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\
    \            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n            row.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n            row.sort_by(|a, b| b.partial_cmp(a).unwrap());\n\
    \            row.sort_by(|a, b| a.partial_cmp(b).unwrap());\n            row.",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_num = 0;\n    let mut row_len = 0;\n    for row in lst {\n        row_len\
    \ += row.len();\n    }\n    for row in lst {\n        if row_idx >= row_len {\n\
    \            break;\n        }\n        let mut col_num = 0;\n        for col\
    \ in row {\n            if col == x {\n                row.insert(col_num, x);\n\
    \                col_num += 1;\n            }\n        }\n        row_idx += 1;\n\
    \    }\n    row.sort_by_key(|&x| x.1);\n    row.sort_by_key(|&x| x.2, |&x| x.1);\n\
    \    row", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor", "    let mut result = vec![];\n    let mut rows = lst.len();\n   \
    \ let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_max = rows;\n    let mut col_max = cols;\n    while row_idx\
    \ < rows && col_idx < cols {\n        if row_idx < rows && col_idx < cols {\n\
    \            if lst[row_idx][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n                row_idx += 1;\n                col_idx += 1;\n \
    \           }\n            row_max = row_idx if row_idx < rows else rows;\n  \
    \          col_max = col_idx + 1;\n        }\n        row_idx += 1;\n        col_idx\
    \ += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut result = vec![];\n    let mut row_idx =\
    \ 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len {\n        let mut row_idx\
    \ = 1;\n        let mut col_idx = 1;\n        while col_idx < col_len {\n    \
    \        if row_idx == row_len {\n                row_idx = 0;\n             \
    \   col_idx = 0;\n            }\n            if col_idx == col_len {\n       \
    \         col_idx = 0;\n            }\n            if lst[row_idx][col_idx] ==\
    \ x {\n                result.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            } else {\n               \
    \ col_idx += 1;\n            }\n        }\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ result = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_sorted =\
    \ vec![];\n    let mut col_sorted = vec![];\n    while row_idx < rows {\n    \
    \    let mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n    \
    \    while col_idx < cols {\n            if row_idx < rows && col_idx < cols {\n\
    \                if lst[row_idx][col_idx] == x {\n                    row_sorted.push((row_idx,\
    \ col_idx));\n                    col_sorted.push((row_idx, col_idx));\n     \
    \           }\n                col_idx += 1;\n            }\n            col_idx\
    \ += 1;\n        }\n        row_idx += 1;\n        result.push(row_sorted);\n\
    \    }\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result.sort_by(|a, b| b.2.cmp(&a.2));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx:\
    \ usize = 0;\n    let mut col: usize = 0;\n    let mut col_idx: usize = 0;\n \
    \   for row in lst {\n        row_idx += 1;\n        for col in row {\n      \
    \      col_idx += 1;\n            if col == x {\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx);\n                row.swap(row_idx,\
    \ col_idx);\n                row.swap(col_idx, row_idx", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row\
    \ = 0;\n    let mut col = 0;\n    while row < rows {\n        let mut found =\
    \ false;\n        while !found && col < cols {\n            if lst[row][col] ==\
    \ x {\n                found = true;\n                coords.push((row, col));\n\
    \            }\n            col += 1\n        }\n        row += 1;\n        col\
    \ = 0;\n    }\n    coords.sort_by_key(|&(x, y)| x.0);\n    coords.sort_by_key(|&(x,\
    \ y)| y.0);\n    coords.reverse();\n    coords", "    let mut coords = vec![];\n\
    \    let mut rows = vec![];\n    for row in lst {\n        let mut cols = vec![];\n\
    \        for col in row.iter() {\n            cols.push(col);\n        }\n   \
    \     rows.push(cols);\n    }\n    for row in rows {\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                coords.push((row, col));\n   \
    \         }\n        }\n    }\n    coords.sort_by_key(|(_, col)| col.iter().rev().cloned());\n\
    \    coords.sort_by_key(|(_, col)| col.iter().cloned());\n    coords.iter().map(|(_,\
    \ col)| {\n        (col.iter().cloned().collect::<Vec<_>>(), col.iter().cloned().collect::<Vec<_>>())\n\
    \    }).collect()", "    let mut coords = vec![];\n    let mut rows = vec![];\n\
    \    for row in lst {\n        let mut cols = vec![];\n        for col in row\
    \ {\n            if col == x {\n                coords.push((row, col));\n   \
    \         }\n            cols.push(col);\n        }\n        rows.push(cols);\n\
    \    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.reverse();\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.reverse();\n\
    \    coords", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n    }\n    for row\
    \ in lst {\n        col_len += row.len();\n    }\n    for row in lst {\n     \
    \   if row_idx < row.len() {\n            for col in row.iter().rev() {\n    \
    \            if col_idx < col.len() {\n                    if col[col_idx] ==\
    \ x {\n                        row.swap(row_idx, col_idx);\n                 \
    \       row_idx += 1;\n                        col_idx += 1;\n               \
    \     }\n                }\n            }\n        }\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    row.sort_by_key(|&(_, y)| y.cmp(&x));\n    row.iter().map(|&(_,\
    \ y)| {\n        (y, (row_idx, col_idx))\n    }).collect()", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coords_sorted = vec![];\n    let mut col_coords_sorted = vec![];\n    let\
    \ mut row_coords_sorted_by_cols = vec![];\n    let mut col_coords_sorted_by_cols\
    \ = vec![];\n    let mut row_coords_sorted_by_rows_sorted = vec![];\n    let mut\
    \ col_coords_sorted_by_rows_sorted = vec![];\n    let mut row_coords_sorted_by_rows_sorted_by_cols\
    \ = vec![];\n    let mut col_coords_sorted_by_rows_sorted_by_cols = vec![];\n\
    \    let mut row_coords_sorted_by_rows_sorted_by_cols_by_rows = vec![];\n    let\
    \ mut col_coords_sorted_by_rows_sorted_by_cols_by_rows = vec![];\n    let mut\
    \ row_coords_sorted_by_cols_by_rows = vec![];\n    let mut col_coords_sorted_by_cols_by_rows\
    \ = vec![];\n    let mut row_coords_sorted_by_cols_by_cols_by_rows = vec![];\n\
    \    let mut row_coords_sorted_by_cols_by_cols_by_rows_sorted = vec![];\n    let\
    \ mut col_coords_sorted_by_cols_by_cols_by_rows_sorted = vec![];\n    let mut\
    \ row_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols = vec![];\n    let\
    \ mut col_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols = vec![];\n   \
    \ let mut row_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_rows = vec![];\n\
    \    let mut col_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_rows\
    \ = vec![];\n    let mut row_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_cols_by_rows\
    \ = vec![];\n    let mut col_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_cols_by_rows\
    \ = vec![];\n    let mut row_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_cols_by_cols_by_rows\
    \ = vec![];\n    let mut col_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_cols_by_cols_by_rows\
    \ = vec![];\n    let mut row_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_cols_by_cols_by_cols_by_rows\
    \ = vec![];\n    let mut col_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_cols_by_cols_by_cols_by_rows\
    \ = vec![];\n    let mut row_coords_sorted_by_cols_by_cols_by_rows_sorted_by_cols_by_col",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    while\
    \ row_idx < rows {\n        let mut row_result = vec![];\n        while col_idx\
    \ < cols {\n            if row_idx == rows {\n                row_result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            if col_idx ==\
    \ cols {\n                row_result.push((row_idx, col_idx));\n             \
    \   break;\n            }\n            if lst[row_idx][col_idx] == x {\n     \
    \           row_result.push((row_idx, col_idx));\n                break;\n   \
    \         }\n            col_idx += 1;\n        }\n        result.push(row_result);\n\
    \        col_idx += 1;\n        row_idx += 1;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&y));\n    result.sort_by_key(|&(_, y)| y.cmp(&y));\n    result",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len = 0;\n", "    let\
    \ mut result = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted_idx = vec![];\n    let mut col_sorted_idx\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_len = vec![];\n    let mut col_len = vec![];\n    let mut row_len_idx\
    \ = vec![];\n    let mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n\
    \    let mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n    let\
    \ mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n    let mut col_len_idx\
    \ = vec![];\n    let mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n\
    \    let mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n    let\
    \ mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n    let mut row_len_idx\
    \ = vec![];\n    let mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n\
    \    let mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n    let\
    \ mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n    let mut col_len_idx\
    \ = vec![];\n    let mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n\
    \    let mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n    let\
    \ mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n    let mut row_len_idx\
    \ = vec![];\n    let mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n\
    \    let mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n    let\
    \ mut col_len_idx = vec![];\n    let mut row_len_idx = vec![];\n    let mut col_len_idx\
    \ = vec![];\n    let mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n\
    \    let mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n    let\
    \ mut row_len_idx = vec![];\n    let mut col_len_idx = vec![];\n    let mut row_len_idx\
    \ = vec!", "    let mut rows = vec![];\n    let mut cols = vec![];\n    for row\
    \ in lst {\n        let mut row_cols = vec![];\n        for col in row {\n   \
    \         if col == x {\n                row_cols.push((col, row.len()));\n  \
    \          }\n        }\n        rows.push(row_cols);\n    }\n    rows.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    rows", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut\
    \ row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n\
    \    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize>\
    \ = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8:\
    \ Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut\
    \ row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n\
    \    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize>\
    \ = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15:\
    \ Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut\
    \ row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n\
    \    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize>\
    \ = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22:\
    \ Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut\
    \ row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n\
    \    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize>\
    \ = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29:\
    \ Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row\
    \ = 0;\n    let mut col = 0;\n    while row < rows {\n        while col < cols\
    \ {\n            if lst[row][col] == x {\n                coords.push((row, col));\n\
    \                break;\n            }\n            col += 1;\n        }\n   \
    \     row += 1;\n        col = 0;\n    }\n    coords.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \    coords.sort_by_key(|&(_, y)| y.cmp(&-x));\n    coords", "    let mut result\
    \ = vec![];\n    let mut row = 0;\n    let mut col = 0;\n    while row < lst.len()\
    \ {\n        let mut found = false;\n        for (i, v) in lst.iter().enumerate()\
    \ {\n            if v == x {\n                found = true;\n                break;\n\
    \            }\n        }\n        if found {\n            result.push((row, col));\n\
    \            row++;\n            col = 0;\n        } else {\n            col++;\n\
    \        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| -x.1);\n    result", "    let mut rows: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        row_idx += 1;\n        if row_len > x {\n            break;\n       \
    \ }\n        for col in row.iter().rev() {\n            col_idx -= 1;\n      \
    \      if col_idx < 0 {\n                break;\n            }\n            row_idx\
    \ -= 1;\n            row_len -= 1;\n            col_idx -= 1;\n            col_idx\
    \ -= 1;\n            row_len -= 1;\n            row_len -= 1;\n            rows.push((row_idx,\
    \ col_idx));\n        }\n    }\n    rows\n        .iter()\n        .sort_by(|a,\
    \ b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0));", "    let mut result\
    \ = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while col_idx < cols\
    \ {\n        if row_idx < rows {\n            if lst[row_idx][col_idx] == x {\n\
    \                result.push((row_idx, col_idx));\n                row_idx +=\
    \ 1;\n                col_idx += 1;\n            }\n        } else {\n       \
    \     break;\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| -y.0);\n    result", "    let mut coords = vec![];\n    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    for row in lst {\n        let mut row_coord = vec![];\n     \
    \   let mut col_coord = vec![];\n        for col in row {\n            if col\
    \ == x {\n                row_coord.push((row, col));\n                col_coord.push((row,\
    \ col));\n            }\n        }\n        row_coords.push(row_coord);\n    \
    \    cols.push(col_coord);\n    }\n    for row in row_coords {\n        for col\
    \ in cols {\n            if row[0] == col[0] {\n                coords.push((row[0],\
    \ col[0]));\n            }\n        }\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.iter().map(|&(x, y)| vec![(y, x)]).collect()", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    for row in lst {\n        let mut row_idx = 0;\n        let mut col_idx =\
    \ 0;\n        for col in row {\n            if col == x {\n                row.swap(row_idx,\
    \ col_idx);\n                row_idx += 1;\n                col_idx += 1;\n  \
    \          }\n        }\n    }\n    row.sort_by_key(|&(_, y)| y.cmp(&x));\n  \
    \  row.sort_by_key(|&(_, y)| y.cmp(&x));\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx =\
    \ 0;\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n    for row in\
    \ lst {\n        row_len += 1;\n        col_pos_idx = 0;\n        for col in row\
    \ {\n            col_len += 1;\n            if col_pos == col_pos_idx {\n    \
    \            col_pos_idx += 1;\n                col_pos += 1;\n            }\n\
    \            if col_pos == col_pos_idx {\n                col_pos_idx += 1;\n\
    \                col_pos += 1;\n            }\n            if col_pos == col_pos_idx\
    \ {\n                col_pos_idx += 1;\n                col_pos += 1;\n      \
    \      }\n            if col_pos == col_pos_idx {\n                col_pos_idx\
    \ += 1;\n                col_pos += 1;\n            }\n            if col_pos\
    \ == col_pos_idx {\n                col_pos_idx += 1;\n                col_pos\
    \ += 1;\n            }\n            if col_pos == col_pos_idx {\n            \
    \    col_pos_idx += 1;\n                col_pos += 1;\n            }\n       \
    \     if col_pos == col_pos_idx {\n                col_pos_idx += 1;\n       \
    \         col_pos += 1;\n            }\n            if col_pos == col_pos_idx\
    \ {\n                col_pos_idx += 1;\n                col_pos += 1;\n      \
    \      }\n            if col_pos == col_pos_idx {\n                col_pos_idx\
    \ += 1;\n                col_pos += 1;\n            }\n            if col_pos\
    \ == col_pos_idx {\n                col_pos_idx += 1;\n                col_pos\
    \ += 1;\n            }\n            if col_pos == col_pos_idx {\n            \
    \    col_pos_idx += 1;\n                col_pos += 1;\n            }\n       \
    \     if col_pos == col_pos_idx {\n                col_pos_idx += 1;\n       \
    \         col_pos += 1;\n            }\n            if col_pos == col_pos_idx\
    \ {\n                col_pos_idx += 1;\n                col_pos += 1;\n      \
    \      }\n            if col_pos == col_pos_idx {\n                col_pos_idx\
    \ += 1;\n                col_pos += 1;\n            }\n            if col_pos\
    \ == col_pos_idx {\n                col_pos_idx += 1;\n                col_pos\
    \ += 1;\n            }\n            if col_pos == col_pos_idx {\n            \
    \    col_pos_idx += 1;\n                col_pos += 1;\n            }\n       \
    \     if col_pos == col_pos_idx {\n", "    let mut coords = vec![];\n    let mut\
    \ rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        let\
    \ mut row_coords = vec![];\n        let mut row_cols = vec![];\n        for coord\
    \ in row.iter() {\n            row_coords.push(coord);\n            row_cols.push(coord.clone());\n\
    \        }\n        rows.push(row_coords);\n        cols.push(row_cols);\n   \
    \ }\n    coords.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n    rows.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n    cols.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    let mut coord = vec![];\n    let mut row = vec![];\n    let mut col = vec![];\n\
    \    for coord in coords.iter() {\n        row.push(coord);\n        col.push(coord.clone());\n\
    \    }\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n   \
    \ for row in rows.iter() {\n        row_coord.push(row);\n        col_coord.push(row.clone());\n\
    \    }\n    let mut row_col = vec![];\n    let mut col_row = vec![];\n    for\
    \ col in cols.iter() {\n        row_col.push(col);\n        col_row.push(col.clone());\n\
    \    }\n    let mut row_col_coord = vec![];\n    let mut col_row_coord = vec![];\n\
    \    for row_coord in row_coord.iter() {\n        for col_coord in col_coord.iter()\
    \ {\n            row_col_coord.push((row_coord, col_coord));\n        }\n    }\n\
    \    for row_col in row_col.iter() {\n        for col_row in col_row.iter() {\n\
    \            col_row_coord.push((col_row, row_col));\n        }\n    }\n    let\
    \ mut row_col_coord = vec![];\n    let mut col_row_coord = vec![];\n    for row_col_coord\
    \ in row_col_coord.iter() {\n        for col_row_coord in col_row_coord.iter()\
    \ {\n            row_col_coord.push((row_col_coord.0, col_row_coord.0));\n   \
    \         row_col_coord.push((row_col_coord.0, col_row_coord.1));\n        }\n\
    \    }\n    let mut row_col_coord = vec![];\n    let mut col_row_coord = vec![];\n\
    \    for row_col_coord in row_col_coord.iter() {\n        for col_row_coord in\
    \ col_row_coord.iter() {\n            row_col_coord.push((row_col_coord.0, col_row_coord",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows {\n        let mut row_start = row_idx;\n        let mut row_end\
    \ = row_idx;\n        while row_end < rows && col_idx < cols {\n            if\
    \ lst[row_end][col_idx] == x {\n                row_end = row_end + 1;\n     \
    \           col_idx = col_idx + 1;\n            } else {\n                break;\n\
    \            }\n        }\n        result.push((row_start, col_idx));\n      \
    \  row_idx = row_end;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y);\n    result.sort_by_key(|&(_, y)| y, |&(_, y)| -y);\n    result", " \
    \   let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n   \
    \ let mut col_idx = 0;\n    let mut row_idx2 = 0;\n    let mut col_idx2 = 0;\n\
    \    let mut row_idx3 = 0;\n    let mut col_idx3 = 0;\n    let mut row_idx4 =\
    \ 0;\n    let mut col_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut col_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut col_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut col_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut col_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut col_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut col_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut col_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut col_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut col_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut col_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut col_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut col_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut col_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut col_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut col_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut col_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut col_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut col_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut col_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut col_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut col_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut col_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut col_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut col_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut col_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut col_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut col_idx31 = 0;\n    let mut row_idx32 = 0;\n    let ", " \
    \   let mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_idx =\
    \ 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len {\n        let mut row_idx\
    \ = row_idx;\n        while col_idx < col_len {\n            if row_idx == row_len\
    \ {\n                row_idx = 0;\n                col_idx = col_idx + 1;\n  \
    \          }\n            if col_idx == col_len {\n                row_idx = row_idx\
    \ + 1;\n                col_idx = 0;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                let row_idx = row_idx + 1;\n                let col_idx\
    \ = col_idx + 1;\n                let row = row_idx - row_idx;\n             \
    \   let col = col_idx - col_idx;\n                rows.push(row);\n          \
    \      cols.push(col);\n            }\n            col_idx = col_idx + 1;\n  \
    \      }\n    }\n    rows\n        .iter()\n        .cloned()\n        .sort_by(|a,\
    \ b| a.cmp(b));\n    cols\n        .iter()\n        .cloned()\n        .sort_by(|a,\
    \ b| b.cmp(a));\n    rows\n        .iter()\n        .cloned()\n        .sort_by(|a,\
    \ b| a.cmp(b));\n    rows\n        .iter()\n        .cloned()\n        .map(|row|\
    \ {\n            (row, cols.iter().cloned().map(|col| col + row).collect::<Vec<_>>())\n\
    \        })\n        .collect()", "    let mut coords = vec![];\n    let mut rows\
    \ = vec![];\n    for row in lst {\n        let mut cols = vec![];\n        for\
    \ col in row {\n            if col == x {\n                coords.push((row, col));\n\
    \            }\n            cols.push(col);\n        }\n        rows.push((row,\
    \ cols));\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    coords.iter().map(|&(_, c)| c).collect()", "    let\
    \ mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3: Vec<isize>\
    \ = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut row_idx5:\
    \ Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n    let mut\
    \ row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize> = vec![];\n\
    \    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10: Vec<isize>\
    \ = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut row_idx12:\
    \ Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n    let mut\
    \ row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize> = vec![];\n\
    \    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17: Vec<isize>\
    \ = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut row_idx19:\
    \ Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n    let mut\
    \ row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize> = vec![];\n\
    \    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24: Vec<isize>\
    \ = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut row_idx26:\
    \ Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n    let mut\
    \ row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize> = vec![];\n\
    \    let mut row_idx30: ", "    let mut rows: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut row_start = 0;\n    let mut col_start =\
    \ 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_start2\
    \ = 0;\n    let mut col_start2 = 0;\n    let mut row_end2 = 0;\n    let mut col_end2\
    \ = 0;\n    let mut row_start3 = 0;\n    let mut col_start3 = 0;\n    let mut\
    \ row_end3 = 0;\n    let mut col_end3 = 0;\n    let mut row_start4 = 0;\n    let\
    \ mut col_start4 = 0;\n    let mut row_end4 = 0;\n    let mut col_end4 = 0;\n\
    \    let mut row_start5 = 0;\n    let mut col_start5 = 0;\n    let mut row_end5\
    \ = 0;\n    let mut col_end5 = 0;\n    let mut row_start6 = 0;\n    let mut col_start6\
    \ = 0;\n    let mut row_end6 = 0;\n    let mut col_end6 = 0;\n    let mut row_start7\
    \ = 0;\n    let mut col_start7 = 0;\n    let mut row_end7 = 0;\n    let mut col_end7\
    \ = 0;\n    let mut row_start8 = 0;\n    let mut col_start8 = 0;\n    let mut\
    \ row_end8 = 0;\n    let mut col_end8 = 0;\n    let mut row_start9 = 0;\n    let\
    \ mut col_start9 = 0;\n    let mut row_end9 = 0;\n    let mut col_end9 = 0;\n\
    \    let mut row_start10 = 0;\n    let mut col_start10 = 0;\n    let mut row_end10\
    \ = 0;\n    let mut col_end10 = 0;\n    let mut row_start11 = 0;\n    let mut\
    \ col_start11 = 0;\n    let mut row_end11 = 0;\n    let mut col_end11 = 0;\n \
    \   let mut row_start12 = 0;\n    let mut col_start12 = 0;\n    let mut row_end12\
    \ = 0;\n    let mut col_end12 = 0;\n    let mut row_start13 = 0;\n    let mut\
    \ col_start13 = 0;\n    let mut row_end13 = 0;\n    let mut col_end13 = 0;\n \
    \   let mut row_start14 = 0;\n    let mut col_start14 = 0;\n    let mut row_end14\
    \ = 0;\n    let mut col_end14 = 0;\n    let mut row_start15 = 0;\n    let mut\
    \ col_start15 = 0;\n    let mut row_end15 = 0;\n    let mut col_end15 = 0;\n \
    \   let mut row_start16 = 0;", "    let mut result = vec![];\n    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n \
    \   let mut col_idx = 0;\n    while row_idx < rows {\n        let mut row_sorted\
    \ = vec![];\n        let mut col_sorted = vec![];\n        while col_idx < cols\
    \ {\n            if row_idx == rows {\n                row_sorted.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            if col_idx ==\
    \ cols {\n                col_sorted.push((row_idx, col_idx));\n             \
    \   break;\n            }\n            if lst[row_idx][col_idx] == x {\n     \
    \           row_sorted.push((row_idx, col_idx));\n                col_sorted.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx += 1;\n\
    \        }\n        result.push((row_sorted.len(), col_sorted.len()));\n     \
    \   row_idx += 1;\n        col_idx += 1;\n    }\n    result.sort_by_key(|(_, y)|\
    \ y.0);\n    result.sort_by_key(|(_, y)| y.1, |(_, y)| y.0);\n    result", " \
    \   let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n\
    \        cols.push(row.iter().cloned().collect::<Vec<_>>());\n    }\n    cols.sort_by_key(|&x|\
    \ x.iter().cloned().collect::<Vec<_>>());\n    rows.sort_by_key(|&x| x.iter().cloned().collect::<Vec<_>>());\n\
    \    let mut result = vec![];\n    for row in rows {\n        let mut cols = vec![];\n\
    \        for col in cols {\n            if col == x {\n                result.push((row,\
    \ col));\n            }\n        }\n    }\n    result.sort_by_key(|&x| x.1);\n\
    \    result", "    let mut rows = vec![];\n    let mut cols = vec![];\n    for\
    \ row in lst {\n        cols.push(row.len());\n        rows.push(row);\n    }\n\
    \    sort_rows(&mut rows);\n    sort_cols(&mut cols);\n    let mut result = vec![];\n\
    \    for (i, row) in rows.iter().enumerate() {\n        let mut j = x;\n     \
    \   let mut k = x;\n        while j >= 0 && k < row.len() {\n            if row[j]\
    \ < row[k] {\n                result.push((i, j));\n                j -= 1;\n\
    \            } else {\n                result.push((k, j));\n                k\
    \ -= 1;\n            }\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n\
    \    result", "    let mut rows = vec![];\n    let mut cols = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n \
    \   let mut row_end = 0;\n    let mut col_end = 0;\n    for row in lst {\n   \
    \     row_len = row.len();\n        row_start = row_idx;\n        row_end = row_start\
    \ + row_len;\n        col_idx = row_len;\n        col_end = col_idx + row_len;\n\
    \        cols = cols.iter().map(|&x| x).collect();\n        for col in row.iter().rev()\
    \ {\n            col_len = col.len();\n            col_start = col_idx;\n    \
    \        col_end = col_start + col_len;\n            if col == x {\n         \
    \       rows.push(vec![row_start, row_end]);\n                cols.push(col_start,\
    \ col_end);\n            }\n            col_idx += col_len;\n        }\n     \
    \   row_idx += row_len;\n        col_idx = row_len;\n        col_end = col_idx\
    \ + row_len;\n    }\n    rows.sort_by(|a, b| a.0.cmp(&b.0));\n    cols.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n    rows\n        .iter()\n        .map(|&(a, b)| vec![(b.0,\
    \ b.1), (a.0, a.1)])\n        .collect()", "    let mut result = vec![];\n   \
    \ let mut row = 0;\n    let mut col = 0;\n    while row < lst.len() {\n      \
    \  let mut found = false;\n        for y in 0..lst[row].len() {\n            if\
    \ lst[row][y] == x {\n                found = true;\n                break;\n\
    \            }\n        }\n        if found {\n            result.push((row, col));\n\
    \            row += 1;\n            col = 0;\n        } else {\n            col\
    \ += 1;\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| -x.1);\n    result", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx +=\
    \ 1;\n            col_idx += 1;\n        } else {\n            col_idx += 1;\n\
    \        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \        rows.push(row.iter().cloned().collect::<Vec<_>>());\n    }\n    sort_rows(&mut\
    \ rows, &mut cols);\n    let mut ret: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row = 0;\n    let mut col = 0;\n    while row < rows.len() {\n        let mut\
    \ found = false;\n        for row in 0..row {\n            for col in 0..col {\n\
    \                if cols[col].contains(&x[row]) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if found {\n                break;\n            }\n        }\n        if\
    \ found {\n            ret.push((row, col));\n        }\n        row += 1;\n \
    \   }\n    ret.sort_by_key(|&(x, y)| x.0);\n    ret", "    let mut result = vec![];\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut\
    \ col_start = 0;\n    while row_idx < row_len && col_idx < col_len {\n       \
    \ if row_idx == row_start {\n            if col_idx >= col_len {\n           \
    \     break;\n            }\n            result.push((row_idx, col_idx));\n  \
    \          col_idx += 1;\n        } else {\n            if col_idx >= col_len\
    \ {\n                break;\n            }\n            row_idx += 1;\n      \
    \      col_idx = 1;\n        }\n    }\n    result", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx: Vec<isize> = Vec::new();\n    let\
    \ mut row_idx_idx: Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx_idx_idx_idx: Vec<isize> = Vec::new();\n \
    \   let mut row_idx_idx_idx_idx_idx: Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<", "    let mut rows = vec![];\n    let mut cols = vec![];\n    for row\
    \ in lst {\n        let mut row_cols = vec![];\n        for col in row {\n   \
    \         if col == x {\n                row_cols.push((col, row.len()));\n  \
    \          }\n        }\n        rows.push(row_cols);\n    }\n    rows.sort_by_key(|row|\
    \ row[0].0);\n    rows.sort_by_key(|row| row[0].1, |a, b| b.1 - a.1);\n    return\
    \ rows", "    let mut rows = Vec::new();\n    let mut cols = Vec::new();\n   \
    \ let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n \
    \   let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        col_idx += row.iter().map(|x| *x).sum();\n        cols.push(col_idx.clone());\n\
    \        if row_idx == x {\n            rows.push((row_idx, cols.clone()));\n\
    \            row_idx = 0;\n            col_idx = 0;\n            row_len = 0;\n\
    \            col_len = 0;\n        }\n    }\n    rows.push((row_idx, cols.clone()));\n\
    \    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.reverse();\n    rows", "  \
    \  let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n  \
    \      row_len += row.len();\n        col_len = row.len();\n        if row_len\
    \ > x {\n            break;\n        }\n        let mut col_pos = 0;\n       \
    \ for col in row {\n            if col_pos == col_len {\n                break;\n\
    \            }\n            if col == x {\n                let row_pos = row_idx;\n\
    \                let col_pos = col_pos;\n                rows.push((row_pos, col_pos));\n\
    \            }\n            col_pos += 1;\n        }\n        row_idx += 1;\n\
    \    }\n    rows", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let\
    \ mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    for\
    \ row in lst {\n        row_len += 1;\n        if row_len == x {\n           \
    \ row_idx = 0;\n            col_len = 0;\n        }\n        for col in row {\n\
    \            col_len += 1;\n            if col_len == x {\n                row.push((row_idx,\
    \ col_len));\n            }\n        }\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n\
    \    row.sort_by_key(|&(x, y)| y.0);\n    row.iter().map(|&(x, y)| x).collect()",
  "    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        let mut row_coords = vec![];\n        for col in\
    \ row {\n            if col == x {\n                row_coords.push((row, col));\n\
    \            }\n        }\n        coords.push(row_coords);\n    }\n    for coord\
    \ in coords {\n        let mut row_coords = vec![];\n        for coord in coord\
    \ {\n            let mut col_coords = vec![];\n            for coord in coord\
    \ {\n                col_coords.push((coord.0, coord.1));\n            }\n   \
    \         row_coords.push(col_coords);\n        }\n        rows.push(row_coords);\n\
    \    }\n    rows.sort_by(|a, b| a.iter().rev().zip(b).map(|a| a[0]).cmp(&a[1]));\n\
    \    cols.sort_by(|a, b| b.iter().rev().zip(a).map(|a| a[0]).cmp(&a[1]));\n  \
    \  coords.sort_by(|a, b| a.iter().rev().zip(b).map(|a| a[0]).cmp(&a[1]));\n  \
    \  coords.iter().map(|a| a.iter().rev().zip(a).map(|a| a[0]).collect::<Vec<_>>()).collect()",
  "    let mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    while row_idx < row_len {\n        let mut row_idx = row_idx;\n\
    \        let mut col_idx = col_idx;\n        while col_idx < col_len {\n     \
    \       if lst[row_idx][col_idx] == x {\n                rows.push(row_idx);\n\
    \                cols.push(col_idx);\n                break;\n            }\n\
    \            col_idx += 1;\n        }\n        row_idx += 1;\n    }\n    sort_rows(rows);\n\
    \    sort_cols(cols);\n    rows", "    let mut result = vec![];\n    let mut row\
    \ = 0;\n    let mut col = 0;\n    while row < lst.len() {\n        if row == x\
    \ {\n            result.push((row, col));\n        }\n        if col == 0 {\n\
    \            col += 1;\n        } else {\n            col -= 1;\n        }\n \
    \       row += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| -y.1);\n    result", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_result = vec![];\n   \
    \     while col_idx < cols {\n            if row_idx == row_idx {\n          \
    \      row_result.push((row_idx, col_idx));\n            }\n            if col_idx\
    \ == col_idx {\n                row_result.push((row_idx, col_idx));\n       \
    \     }\n            col_idx += 1;\n        }\n        result.push(row_result);\n\
    \        row_idx += 1;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&-x));\n    result",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx: usize\
    \ = 0;\n    let mut row_len: usize = 0;\n    for row in lst {\n        row_len\
    \ += row.len();\n        if row_idx >= row_len {\n            break;\n       \
    \ }\n        let mut row_idx: usize = 0;\n        for col in row {\n         \
    \   if col == x {\n                row.swap(row_idx, row_idx);\n             \
    \   row_idx += 1;\n            }\n        }\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    row.sort_by_key(|&(_, y)| y.cmp(&x));\n    row", "    let\
    \ mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ col_idx < cols {\n        if row_idx < rows {\n            let row = lst[row_idx];\n\
    \            let mut row_idx = 0;\n            while row_idx < row.len() {\n \
    \               if row[row_idx] == x {\n                    result.push((row_idx,\
    \ col_idx));\n                    break;\n                }\n                row_idx\
    \ += 1;\n            }\n        }\n        col_idx += 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3: Vec<isize>\
    \ = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut row_idx5:\
    \ Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n    let mut\
    \ row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize> = vec![];\n\
    \    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10: Vec<isize>\
    \ = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut row_idx12:\
    \ Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n    let mut\
    \ row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize> = vec![];\n\
    \    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17: Vec<isize>\
    \ = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut row_idx19:\
    \ Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n    let mut\
    \ row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize> = vec![];\n\
    \    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24: Vec<isize>\
    \ = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut row_idx26:\
    \ Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n    let mut\
    \ row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize> = vec![];\n\
    \    let mut row_idx30: ", "    let mut result = Vec::new();\n    let mut row_idx\
    \ = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len {\n        let mut row_coord\
    \ = vec![];\n        let mut col_coord = vec![];\n        for _ in 0..col_len\
    \ {\n            row_coord.push((row_idx, col_idx));\n            col_coord.push((row_idx,\
    \ col_idx));\n        }\n        result.push((row_coord, col_coord));\n      \
    \  col_idx++;\n        if col_idx > col_len {\n            col_idx = 1;\n    \
    \        row_idx++;\n        }\n    }\n    result.sort_by_key(|(_, y)| y.0);\n\
    \    result.sort_by_key(|(_, y)| y.1, |(_, y)| y.0);\n    result", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_num\
    \ = 0;\n    let mut col_num_idx = 0;\n    let mut row_idxs: Vec<isize> = vec![];\n\
    \    let mut col_nums: Vec<isize> = vec![];\n    let mut row_idxs_idx = 0;\n \
    \   let mut col_nums_idx = 0;\n    for row in lst {\n        row_idxs.push(row_idx);\n\
    \        col_nums.push(col_num);\n        row_idxs_idx += 1;\n        col_nums_idx\
    \ += 1;\n        row_idx += 1;\n        col_num += 1;\n    }\n    row_idxs.sort_unstable();\n\
    \    col_nums.sort_unstable();\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx\
    \ = 0;\n    let mut row_idxs_idx2 = 0;\n    let mut col_nums_idx2 = 0;\n    let\
    \ mut row_idxs_idx3 = 0;\n    let mut col_nums_idx3 = 0;\n    for row in lst {\n\
    \        row_idxs_idx3 += 1;\n        col_nums_idx3 += 1;\n        if row_idxs_idx\
    \ == row_idxs_idx3 {\n            row_idxs_idx += 1;\n            col_nums_idx\
    \ += 1;\n        }\n        if col_nums_idx == col_nums_idx3 {\n            row_idxs_idx2\
    \ += 1;\n            col_nums_idx2 += 1;\n        }\n        if row_idxs_idx2\
    \ == row_idxs_idx3 {\n            row_idxs_idx2 += 1;\n            col_nums_idx2\
    \ += 1;\n        }\n        if col_nums_idx2 == col_nums_idx3 {\n            row_idxs_idx3\
    \ += 1;\n            col_nums_idx3 += 1;\n        }\n        if row_idxs_idx ==\
    \ row_idxs_idx3 {\n            row_idxs_idx += 1;\n            col_nums_idx +=\
    \ 1;\n        }\n        if col_nums_idx == col_nums_idx3 {\n            row_idxs_idx2\
    \ += 1;\n            col_nums_idx2 += 1;\n        }\n        if row_idxs_idx2\
    \ == row_idxs_idx3 {\n            row_idxs_idx2 += 1;\n            col_nums_idx2\
    \ += 1;\n        }\n        if col_nums_idx2 == col_nums_idx3 {\n            row_idxs_idx3\
    \ += 1;\n            col_nums_idx3 += 1;\n        }\n        if row_idxs_idx ==\
    \ row_idxs_idx3 {\n            row_idxs_idx += 1;\n            col_nums_", " \
    \   let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n\
    \    for row in lst {\n        row_len += row.len();\n        col_len = row.len();\n\
    \        if row_len == x {\n            row_idx += 1;\n            col_pos = 0;\n\
    \        }\n        if col_len > x {\n            col_pos = col_len - x;\n   \
    \     }\n        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n\
    \        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n       \
    \ row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x|\
    \ x);\n        row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x| x);\n \
    \       row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x|\
    \ -x);\n        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n\
    \        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n       \
    \ row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x|\
    \ x);\n        row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x| x);\n \
    \       row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x|\
    \ -x);\n        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n\
    \        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n       \
    \ row.sort_by_key(|&x| x);\n        row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x|\
    \ x);\n        row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x| x);\n \
    \       row.sort_by_key(|&x| -x);\n        row.sort_by_key(|&x| x);\n        row.sort_by_key(|&",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    for row in lst {\n \
    \       row_len += 1;\n        if row_len == x {\n            row_idx += 1;\n\
    \            row_len = 0;\n        }\n        for col in row {\n            col_len\
    \ += 1;\n            if col_len == x {\n                col_pos_idx += 1;\n  \
    \              col_pos_len = 0;\n            }\n            if col_pos_len ==\
    \ x {\n                col_pos += 1;\n                col_pos_len = 0;\n     \
    \       }\n            if col_pos_len > col_len {\n                col_pos_len\
    \ -= 1;\n                col_pos_idx -= 1;\n            }\n            if col_pos_len\
    \ > col_len {\n                col_pos_len -= 1;\n                col_pos_idx\
    \ -= 1;\n            }\n            if col_pos_len == col_len {\n            \
    \    row.swap(col_pos_idx, col_pos);\n                col_pos_len -= 1;\n    \
    \            col_pos_idx -= 1;\n            }\n        }\n    }\n    row.sort_by_key(|&x|\
    \ x.0);\n    row.sort_by_key(|&x| x.1);\n    row", "    let mut coords = vec![];\n\
    \    for row in lst {\n        let mut coord = vec![];\n        for el in row\
    \ {\n            if el == x {\n                coord.push((row, el));\n      \
    \      }\n        }\n        coords.push_back(coord);\n    }\n    coords.sort_by_key(|x|\
    \ x.0);\n    coords.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n    coords",
  "    let mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_idx = vec![];\n\
    \    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mu", "    let mut coords = vec![];\n    for row in lst {\n\
    \        let mut coord = vec![];\n        for el in row {\n            if el ==\
    \ x {\n                coord.push((row, el));\n            }\n        }\n    \
    \    coords.push_back(coord);\n    }\n    coords.sort_by_key(|x| x.0);\n    coords.sort_by_key(|x|\
    \ x.1, |a, b| b.1.cmp(&a.1));\n    coords", "    let mut result = vec![];\n  \
    \  let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_max = rows;\n    let mut col_max\
    \ = cols;\n    while row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx++;\n\
    \            col_idx++;\n        } else if row_idx < rows {\n            row_idx++;\n\
    \            row_max = row_idx;\n        } else {\n            col_idx++;\n  \
    \          col_max = col_idx;\n        }\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ coords = vec![];\n    for row in lst {\n        let mut coord = vec![];\n  \
    \      for col in row.iter().rev() {\n            if col == x {\n            \
    \    coord.push((row, col));\n            }\n        }\n        coords.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n        coords.sort_by(|a, b| b.0.cmp(&a.0));\n        coords.reverse();\n\
    \    }\n    coords", "    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut\
    \ col_start = 0;\n    let mut row_end = row_len;\n    let mut col_end = col_len;\n\
    \    let mut row_mid = row_len;\n    let mut col_mid = col_len;\n    let mut row_mid_idx\
    \ = 0;\n    let mut col_mid_idx = 0;\n    let mut row_mid_len = row_len;\n   \
    \ let mut col_mid_len = col_len;\n    let mut row_mid_start = 0;\n    let mut\
    \ col_mid_start = 0;\n    let mut row_mid_end = row_len;\n    let mut col_mid_end\
    \ = col_len;\n    let mut row_mid_mid = row_len;\n    let mut col_mid_mid = col_len;\n\
    \    let mut row_mid_mid_idx = 0;\n    let mut col_mid_mid_idx = 0;\n    let mut\
    \ row_mid_mid_len = row_len;\n    let mut col_mid_mid_len = col_len;\n    let\
    \ mut row_mid_mid_start = 0;\n    let mut col_mid_mid_start = 0;\n    let mut\
    \ row_mid_mid_end = row_len;\n    let mut col_mid_mid_end = col_len;\n    let\
    \ mut row_mid_mid_mid = row_len;\n    let mut col_mid_mid_mid = col_len;\n   \
    \ let mut row_mid_mid_idx = 0;\n    let mut col_mid_mid_idx = 0;\n    let mut\
    \ row_mid_mid_len = row_len;\n    let mut col_mid_mid_len = col_len;\n    let\
    \ mut row_mid_mid_start = 0;\n    let mut col_mid_mid_start = 0;\n    let mut\
    \ row_mid_mid_end = row_len;\n    let mut col_mid_mid_end = col_len;\n    let\
    \ mut row_mid_mid_mid = row_len;\n    let mut col_mid_mid_mid = col_len;\n   \
    \ let mut row_mid_mid_idx = 0;\n    let mut col_mid_mid_idx = 0;\n    let mut\
    \ row_mid_mid_len = row_len;\n    let mut col_mid_mid_len = col_len;\n    let\
    \ mut row_mid_mid_start = 0;\n    let mut col_mid_mid_start = 0;\n    let mut\
    \ row_mid_mid_end = row_len;\n    let mut col_mid_mid_end = col_len;\n    let\
    \ mut row_mid_mid_mid = row_len;\n    let mut col_mid_mid_mid = col_len;\n   \
    \ let mut row_mid_mid_idx = 0;\n    let mut col_mid_mid_idx = 0;\n    let mut\
    \ row_mid_mid_len = row_len;\n    let mut col_", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_end = 0;\n\
    \    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut col_len = 0;\n\
    \    let mut row_len = 0;\n    let mut col_start = 0;\n    let mut col_", "  \
    \  let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ 0;\n    let mut col_end = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        row_end = row_start + row.len();\n        row_start = row_end;\n    \
    \    col_idx = 0;\n        for col in row {\n            col_len += 1;\n     \
    \       col_end = col_start + 1;\n            col_start = col_end;\n         \
    \   if col == x {\n                let row = row_idx;\n                let col\
    \ = col_idx;\n                let coord = (row, col);\n                rows.push(coord);\n\
    \                row_idx += 1;\n                col_idx += 1;\n            }\n\
    \        }\n    }\n    rows.sort_by_key(|&(_, y)| y);\n    rows.sort_by_key(|&(_,\
    \ y)| -y);\n    rows", "    let mut row: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start_idx = 0;\n    let\
    \ mut col_start_idx = 0;\n    let mut row_end_idx = 0;\n    let mut col_end_idx\
    \ = 0;\n    let mut row_start_idx2 = 0;\n    let mut col_start_idx2 = 0;\n   \
    \ let mut row_end_idx2 = 0;\n    let mut col_end_idx2 = 0;\n    let mut row_start_idx3\
    \ = 0;\n    let mut col_start_idx3 = 0;\n    let mut row_end_idx3 = 0;\n    let\
    \ mut col_end_idx3 = 0;\n    let mut row_start_idx4 = 0;\n    let mut col_start_idx4\
    \ = 0;\n    let mut row_end_idx4 = 0;\n    let mut col_end_idx4 = 0;\n    let\
    \ mut row_start_idx5 = 0;\n    let mut col_start_idx5 = 0;\n    let mut row_end_idx5\
    \ = 0;\n    let mut col_end_idx5 = 0;\n    let mut row_start_idx6 = 0;\n    let\
    \ mut col_start_idx6 = 0;\n    let mut row_end_idx6 = 0;\n    let mut col_end_idx6\
    \ = 0;\n    let mut row_start_idx7 = 0;\n    let mut col_start_idx7 = 0;\n   \
    \ let mut row_end_idx7 = 0;\n    let mut col_end_idx7 = 0;\n    let mut row_start_idx8\
    \ = 0;\n    let mut col_start_idx8 = 0;\n    let mut row_end_idx8 = 0;\n    let\
    \ mut col_end_idx8 = 0;\n    let mut row_start_idx9 = 0;\n    let mut col_start_idx9\
    \ = 0;\n    let mut row_end_idx9 = 0;\n    let mut col_end_idx9 = 0;\n    let\
    \ mut row_start_idx10 = 0;\n    let mut col_start_idx10 = 0;\n    let mut row_end_idx10\
    \ = 0;\n    let mut col_end_idx10 = 0;\n    let mut row_start_idx11 = 0;\n   \
    \ let mut col_start_idx11 = 0;\n    let mut row_end_idx11 = 0;\n    let mut col_end_idx11\
    \ = 0;\n    let mut row_start_idx12 = 0;\n    let mut col_start_idx12 = 0;\n \
    \   let mut row_end_idx12 = 0;\n    let mut col_end_idx12 = 0;\n    let mut row_start_idx13\
    \ = 0;\n    let mut col_start_idx13 = 0;\n    let mut row_end_idx13 = 0;\n   \
    \ let mut col_end_idx13 = 0;\n    let mut row_start_idx14 = 0;\n    let mut col_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3:\
    \ Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut\
    \ row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n\
    \    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize>\
    \ = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10:\
    \ Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut\
    \ row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n\
    \    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize>\
    \ = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17:\
    \ Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut\
    \ row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n\
    \    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize>\
    \ = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24:\
    \ Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut\
    \ row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n\
    \    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize>\
    \ = vec![];\n    let mut row_idx30: ", "    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < rows && j < cols {\n        if lst[i][j] == x {\n            coords.push((i,\
    \ j));\n            i += 1;\n            j += 1;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n   \
    \ coords.sort_by(|a, b| b.1.cmp(&a.1));\n    for coord in coords {\n        row_sorted.push((coord.0,\
    \ coord.1 - 1));\n        col_sorted.push((coord.1 - 1, coord.0));\n    }\n  \
    \  row_sorted.sort_by(|a, b| b.0.cmp(&a.0));\n    col_sorted.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    for coord in row_sorted {\n        row_coords.push((coord.0, coord.1));\n\
    \    }\n    for coord in col_sorted {\n        col_coords.push((coord.1, coord.0));\n\
    \    }\n    row_coords.sort_by(|a, b| b.1.cmp(&a.1));\n    col_coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    for coord in row_coords {\n        for coord in col_coords\
    \ {\n            coords.push((coord.0, coord.1));\n        }\n    }\n    coords",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while col_idx\
    \ < cols {\n        if col_idx < x {\n            col_idx += 1;\n            continue;\n\
    \        }\n        if col_idx > x {\n            col_idx += 1;\n            continue;\n\
    \        }\n        let row = row_idx;\n        result.push((row, col_idx));\n\
    \        col_idx += 1;\n        row_idx += 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| -y.0);\n    result", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut i = 0;\n \
    \   let mut j = 0;\n    while i < rows && j < cols {\n        if lst[i][j] ==\
    \ x {\n            row_coord.push((i, j));\n            col_coord.push((i, j));\n\
    \            i += 1;\n            j += 1;\n        } else {\n            if row_coord.is_empty()\
    \ {\n                row_coord.push((i, j));\n            } else {\n         \
    \       let mut row_coord = row_coord.clone();\n                row_coord.push((i,\
    \ j));\n                row_coords.push(row_coord);\n            }\n         \
    \   if col_coord.is_empty() {\n                col_coord.push((i, j));\n     \
    \       } else {\n                let mut col_coord = col_coord.clone();\n   \
    \             col_coord.push((i, j));\n                col_coords.push(col_coord);\n\
    \            }\n        }\n    }\n    row_coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    col_coords.sort_by(|a, b| a.0.cmp(&b.0));\n    row_coords.reverse();\n  \
    \  col_coords.reverse();\n    for i in row_coords.iter() {\n        let mut row_coord\
    \ = i.0;\n        let mut row_coords = i.1;\n        let mut row_coord = row_coord.clone();\n\
    \        let mut row_coords = row_coords.clone();\n        let mut j = 0;\n  \
    \      while j < cols {\n            let mut col_coord = col_coords[j].clone();\n\
    \            let mut col_coords = col_coords[j].clone();\n            let mut\
    \ col_coord = col_coord.clone();\n            let mut col_coords = col_coords.clone();\n\
    \            let mut i = 0;\n            while i < rows {\n                if\
    \ row_coords[i] == col_coord {\n                    coords.push((row_coords[i],\
    \ j));\n                    i += 1;\n                } else {\n              \
    \      i += 1;\n                }\n            }\n            j += 1;\n      \
    \  }\n    }\n    coords", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_start = row_idx;\n        let mut row_end = row_idx;\n        let mut\
    \ col_start = col_idx;\n        let mut col_end = col_idx;\n        while col_start\
    \ < col_end {\n            if row_end == row_start {\n                row_end\
    \ = row_start + 1;\n                col_end = col_start + 1;\n            } else\
    \ {\n                row_end = row_end;\n                col_end = col_end;\n\
    \            }\n            if row_end == row_start {\n                row_end\
    \ = row_start + 1;\n                col_end = col_start + 1;\n            }\n\
    \            if col_end == col_start {\n                col_end = col_start +\
    \ 1;\n            }\n            if row_end == row_start {\n                row_end\
    \ = row_start + 1;\n            }\n            if col_end == col_start {\n   \
    \             col_end = col_start + 1;\n            }\n            if row_end\
    \ == row_idx {\n                row_end = row_idx;\n            }\n          \
    \  if col_end == col_idx {\n                col_end = col_idx;\n            }\n\
    \            if row_end == row_idx {\n                row_end = row_idx;\n   \
    \         }\n            if col_end == col_idx {\n                col_end = col_idx;\n\
    \            }\n            if row_end == row_idx {\n                row_end =\
    \ row_idx;\n            }\n            if col_end == col_idx {\n             \
    \   col_end = col_idx;\n            }\n            if row_end == row_idx {\n \
    \               row_end = row_idx;\n            }\n            if col_end == col_idx\
    \ {\n                col_end = col_idx;\n            }\n            if row_end\
    \ == row_idx {\n                row_end = row_idx;\n            }\n          \
    \  if col_end == col_idx {\n                col_end = col_idx;\n            }\n\
    \            if row_end == row_idx {\n                row_end = row_idx;\n   \
    \         }\n            if col_end == col_idx {\n                col_end = col_idx;\n\
    \            }\n            if row_end == row_idx {\n                row_end =\
    \ row_idx;\n            }\n            if col_end == col_idx {\n             \
    \   col_end = col_idx;\n            }\n            if row_end == row_idx {\n \
    \               row_end = row_idx;\n            }\n            if col_end == col_idx\
    \ {\n                col_end = col_idx;\n            }\n            if row_end\
    \ == row_idx {\n                row_end = row_idx;\n            }\n          \
    \  if col_end == col_idx ", "    let mut result = vec![];\n    let mut rows =\
    \ lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n   \
    \ let mut col_idx = 0;\n    while row_idx < rows {\n        let mut row_result\
    \ = vec![];\n        while col_idx < cols {\n            if row_idx == row_idx\
    \ {\n                row_result.push((row_idx, col_idx));\n            }\n   \
    \         if col_idx < cols {\n                if row_idx < rows && col_idx <\
    \ cols && lst[row_idx][col_idx] == x {\n                    col_idx++;\n     \
    \           }\n                else {\n                    col_idx = 0;\n    \
    \            }\n            }\n            else {\n                col_idx = 0;\n\
    \            }\n        }\n        result.push(row_result);\n        row_idx++;\n\
    \    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a,\
    \ b| b.0 - a.0);\n    result", "    let mut rows = vec![];\n    let mut cols =\
    \ vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let\
    \ mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx\
    \ = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mu",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ col_idx < cols {\n        if row_idx == rows {\n            break;\n       \
    \ }\n        let mut row_start = row_idx;\n        let mut row_end = row_idx;\n\
    \        let mut col_start = col_idx;\n        let mut col_end = col_idx;\n  \
    \      let mut row_max = row_idx;\n        let mut col_max = col_idx;\n      \
    \  while row_end < rows && col_end < cols {\n            if row_end == row_max\
    \ {\n                row_end += 1;\n                row_max = row_end;\n     \
    \       }\n            if col_end == col_max {\n                col_end += 1;\n\
    \                col_max = col_end;\n            }\n            if row_end ==\
    \ row_start {\n                row_end += 1;\n                row_max = row_end;\n\
    \            }\n            if col_end == col_start {\n                col_end\
    \ += 1;\n                col_max = col_end;\n            }\n            if row_end\
    \ < rows && col_end < cols {\n                if row_end == row_max {\n      \
    \              row_end += 1;\n                    row_max = row_end;\n       \
    \         }\n                if col_end == col_max {\n                    col_end\
    \ += 1;\n                    col_max = col_end;\n                }\n         \
    \   }\n        }\n        if row_end == row_max {\n            row_end += 1;\n\
    \            row_max = row_end;\n        }\n        if col_end == col_max {\n\
    \            col_end += 1;\n            col_max = col_end;\n        }\n      \
    \  if row_end == row_start {\n            row_end += 1;\n            row_max =\
    \ row_end;\n        }\n        if col_end == col_start {\n            col_end\
    \ += 1;\n            col_max = col_end;\n        }\n        result.push((row_start,\
    \ col_start));\n        result.push((row_max, col_end));\n        row_idx += 1;\n\
    \        col_idx += 1;\n    }\n    result.sort_by_key(|&(_, y)| y);\n    result.sort_by_key(|&(_,\
    \ y)| -y);\n    result", "    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_idx = row_idx;\n        while col_idx < col_len {\n            if lst[row_idx][col_idx]\
    \ == x {\n                rows.push(row_idx);\n                cols.push(col_idx);\n\
    \                break;\n            }\n            col_idx += 1;\n        }\n\
    \        row_idx += 1;\n    }\n    sort_rows(rows);\n    sort_cols(cols);\n  \
    \  rows", "    let mut result = vec![];\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    while row_idx < rows && col_idx < cols {\n        if row_idx == rows {\n\
    \            result.push((row_idx, col_idx));\n            break;\n        }\n\
    \        if col_idx == cols {\n            result.push((row_idx, col_idx));\n\
    \            break;\n        }\n        if lst[row_idx][col_idx] == x {\n    \
    \        result.push((row_idx, col_idx));\n            row_idx += 1;\n       \
    \     col_idx += 1;\n        } else {\n            row_idx += 1;\n        }\n\
    \    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ -y.0);\n    result", "    let mut rows = Vec::new();\n    let mut cols = Vec::new();\n\
    \    for row in lst {\n        cols.clear();\n        for col in row.iter().cloned()\
    \ {\n            if col == x {\n                cols.push((row, col));\n     \
    \       }\n        }\n        rows.push((row, cols.reverse()));\n    }\n    rows.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n    rows.sort_by(|a, b| b.1.cmp(&a.1));\n    let mut res\
    \ = Vec::new();\n    for row in rows {\n        let mut cols = Vec::new();\n \
    \       for col in row.1.iter().cloned() {\n            cols.push((row.0, col));\n\
    \        }\n        res.push(cols);\n    }\n    res", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 1;\n    let mut col_idx = 1;\n    while row_idx < rows {\n       \
    \ let mut row_result = vec![];\n        while col_idx < cols {\n            if\
    \ row_idx == rows {\n                row_result.push((row_idx, col_idx));\n  \
    \              break;\n            }\n            if col_idx == cols {\n     \
    \           row_result.push((row_idx, col_idx));\n                break;\n   \
    \         }\n            if lst[row_idx][col_idx] == x {\n                row_result.push((row_idx,\
    \ col_idx));\n                col_idx++;\n                break;\n           \
    \ }\n            col_idx++;\n        }\n        result.push(row_result);\n   \
    \     row_idx++;\n    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result", "    let mut coords = vec![];\n    for row in\
    \ lst {\n        let mut coord = vec![];\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                coord.push((row, col));\n    \
    \        }\n        }\n        coords.sort_by(|a, b| a.0.cmp(&b.0));\n       \
    \ coords.sort_by(|a, b| b.1.cmp(&a.1));\n    }\n    coords.reverse();\n    coords",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: usize = 0;\n\
    \    let mut col_count: usize = 0;\n    let mut col_max_idx: usize = 0;\n    let\
    \ mut row_max_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let mut\
    \ col_min_idx: usize = 0;\n    let mut row_idxs: Vec<usize> = vec![];\n    let\
    \ mut col_counts: Vec<usize> = vec![];\n    let mut row_counts: Vec<usize> = vec![];\n\
    \    let mut col_max_idxs: Vec<usize> = vec![];\n    let mut row_max_idxs: Vec<usize>\
    \ = vec![];\n    let mut col_min_idxs: Vec<usize> = vec![];\n    let mut row_min_idxs:\
    \ Vec<usize> = vec![];\n    let mut col_max_idxs_sorted: Vec<usize> = vec![];\n\
    \    let mut row_max_idxs_sorted: Vec<usize> = vec![];\n    let mut col_min_idxs_sorted:\
    \ Vec<usize> = vec![];\n    let mut row_min_idxs_sorted: Vec<usize> = vec![];\n\
    \    let mut col_max_idxs_sorted_idx: usize = 0;\n    let mut row_max_idxs_sorted_idx:\
    \ usize = 0;\n    let mut col_min_idxs_sorted_idx: usize = 0;\n    let mut row_min_idxs_sorted_idx:\
    \ usize = 0;\n    let mut col_max_idxs_sorted_idxs: Vec<usize> = vec![];\n   \
    \ let mut row_max_idxs_sorted_idxs: Vec<usize> = vec![];\n    let mut col_min_idxs_sorted_idxs:\
    \ Vec<usize> = vec![];\n    let mut row_min_idxs_sorted_idxs: Vec<usize> = vec![];\n\
    \    let mut col_max_idxs_sorted_idxs_idx: usize = 0;\n    let mut row_max_idxs_sorted_idxs_idx:\
    \ usize = 0;\n    let mut col_min_idxs_sorted_idxs_idx: usize = 0;\n    let mut\
    \ row_min_idxs_sorted_idxs_idx: usize = 0;\n    for row in lst {\n        row_idxs.push(row_idx);\n\
    \        col_counts.push(col_count);\n        row_counts.push(row_count);\n  \
    \      col_max_idxs.push(col_max_idx);\n        row_", "    let mut coords = vec![];\n\
    \    let mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted_idx = vec![];\n    let\
    \ mut col_sorted_idx = vec![];\n    let mut row_sorted_idx_idx = vec![];\n   \
    \ let mut col_sorted_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n  \
    \  let mut col_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_", "    let\
    \ mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row_start = row_idx;\n       \
    \ let mut row_end = row_idx;\n        let mut col_start = col_idx;\n        let\
    \ mut col_end = col_idx;\n        while col_end < col_len {\n            if row_end\
    \ == row_start {\n                row_end++;\n                col_end++;\n   \
    \             continue;\n            }\n            if col_end == col_start {\n\
    \                col_end++;\n                continue;\n            }\n      \
    \      if row_end == row_start {\n                row_end++;\n               \
    \ col_end++;\n                continue;\n            }\n            if col_end\
    \ == col_start {\n                col_end++;\n                continue;\n    \
    \        }\n            if row_end == row_start {\n                row_end++;\n\
    \                col_end++;\n                continue;\n            }\n      \
    \      if col_end == col_start {\n                col_end++;\n               \
    \ continue;\n            }\n            if row_end == row_start {\n          \
    \      row_end++;\n                col_end++;\n                continue;\n   \
    \         }\n            if col_end == col_start {\n                col_end++;\n\
    \                continue;\n            }\n            if row_end == row_start\
    \ {\n                row_end++;\n                col_end++;\n                continue;\n\
    \            }\n            if col_end == col_start {\n                col_end++;\n\
    \                continue;\n            }\n            if row_end == row_start\
    \ {\n                row_end++;\n                col_end++;\n                continue;\n\
    \            }\n            if col_end == col_start {\n                col_end++;\n\
    \                continue;\n            }\n            if row_end == row_start\
    \ {\n                row_end++;\n                col_end++;\n                continue;\n\
    \            }\n            if col_end == col_start {\n                col_end++;\n\
    \                continue;\n            }\n            if row_end == row_start\
    \ {\n                row_end++;\n                col_end++;\n                continue;\n\
    \            }\n            if col_end == col_start {\n                col_end++;\n\
    \                continue;\n            }\n            if row_end == row_start\
    \ {\n                row_end++;\n                col_end++;\n                continue;\n\
    \            }\n            if col_end == col_start {\n                col_end++;\n\
    \                continue;\n            }\n            if row_end == row_start\
    \ {\n                row_end++;\n                col_end++;\n                continue;\n\
    \            }\n            if col_end == col_start {\n                col_end++;\n\
    \                continue;\n", "    let mut coords = vec![];\n    let mut rows\
    \ = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        let mut\
    \ row_coords = vec![];\n        let mut row_cols = vec![];\n        for col in\
    \ row {\n            if col == x {\n                row_coords.push((row, col));\n\
    \                row_cols.push((col, col));\n            }\n        }\n      \
    \  coords.push(row_coords);\n        rows.push(row_cols);\n        cols.push(row_cols);\n\
    \    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    rows.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    cols.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.iter().map(|x| x.1).collect()",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    while\
    \ row_idx < rows {\n        while col_idx < cols {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n            }\n  \
    \          col_idx += 1;\n        }\n        col_idx = 1;\n        row_idx +=\
    \ 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3:\
    \ Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut\
    \ row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n\
    \    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize>\
    \ = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10:\
    \ Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut\
    \ row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n\
    \    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize>\
    \ = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17:\
    \ Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut\
    \ row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n\
    \    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize>\
    \ = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24:\
    \ Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut\
    \ row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n\
    \    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize>\
    \ = vec![];\n    let mut row_idx30: ", "    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows {\n       \
    \ let mut row_result = vec![];\n        while col_idx < cols {\n            if\
    \ row_idx == rows {\n                break;\n            }\n            if col_idx\
    \ == cols {\n                break;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                row_result.push((row_idx, col_idx));\n             \
    \   col_idx++;\n            }\n            col_idx++;\n        }\n        result.push(row_result.into_iter().cloned());\n\
    \        row_idx++;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n\
    \    let mut col_max_idx = 0;\n    let mut col_max_len = 0;\n    let mut col_max_idx2\
    \ = 0;\n    let mut col_max_len2 = 0;\n    let mut row_len2 = 1;\n    let mut\
    \ col_len2 = 1;\n    let mut row_idx2 = 0;\n    let mut col_max_idx2 = 0;\n  \
    \  let mut col_max_len2 = 0;\n    let mut row_idx3 = 0;\n    let mut col_max_idx3\
    \ = 0;\n    let mut col_max_len3 = 0;\n    let mut row_idx4 = 0;\n    let mut\
    \ col_max_idx4 = 0;\n    let mut col_max_len4 = 0;\n    let mut row_idx5 = 0;\n\
    \    let mut col_max_idx5 = 0;\n    let mut col_max_len5 = 0;\n    let mut row_idx6\
    \ = 0;\n    let mut col_max_idx6 = 0;\n    let mut col_max_len6 = 0;\n    let\
    \ mut row_idx7 = 0;\n    let mut col_max_idx7 = 0;\n    let mut col_max_len7 =\
    \ 0;\n    let mut row_idx8 = 0;\n    let mut col_max_idx8 = 0;\n    let mut col_max_len8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut col_max_idx9 = 0;\n    let mut\
    \ col_max_len9 = 0;\n    let mut row_idx10 = 0;\n    let mut col_max_idx10 = 0;\n\
    \    let mut col_max_len10 = 0;\n    let mut row_idx11 = 0;\n    let mut col_max_idx11\
    \ = 0;\n    let mut col_max_len11 = 0;\n    let mut row_idx12 = 0;\n    let mut\
    \ col_max_idx12 = 0;\n    let mut col_max_len12 = 0;\n    let mut row_idx13 =\
    \ 0;\n    let mut col_max_idx13 = 0;\n    let mut col_max_len13 = 0;\n    let\
    \ mut row_idx14 = 0;\n    let mut col_max_idx14 = 0;\n    let mut col_max_len14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut col_max_idx15 = 0;\n    let mut\
    \ col_max_len15 = 0;\n    let mut row_idx16 = 0;\n    let mut col_max_idx16 =\
    \ 0;\n    let mut col_max_len16 = 0;\n    let mut row_idx17 = 0;\n    let mut\
    \ col_max_idx17 = 0;\n    let mut col_max_len17 = 0;\n    let mut row_idx18 =\
    \ 0;\n    let mut col_max_idx18 = 0;\n    let mut col_", "    let mut rows: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx: usize = 0;\n    let mut col_idx:\
    \ usize = 0;\n    let mut row_size: usize = lst.len();\n    let mut col_size:\
    \ usize = lst[0].len();\n    let mut row_idx: usize = 0;\n    let mut col_idx:\
    \ usize = 0;\n    let mut row_size: usize = lst.len();\n    let mut col_size:\
    \ usize = lst[0].len();\n    while row_idx < row_size {\n        let mut row_idx:\
    \ usize = 0;\n        while col_idx < col_size {\n            if lst[row_idx][col_idx]\
    \ == x {\n                let mut row: (isize, isize) = (row_idx, col_idx);\n\
    \                rows.push(row);\n                row_idx += 1;\n            \
    \    col_idx += 1;\n            } else {\n                col_idx += 1;\n    \
    \        }\n        }\n    }\n    rows", "    let mut rows: Vec<(isize, isize)>\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n        row_len\
    \ += row.len();\n        row_idx += 1;\n        if row_idx > x {\n           \
    \ break;\n        }\n        for col in row {\n            col_len += 1;\n   \
    \         col_idx += 1;\n            if col_idx > x {\n                break;\n\
    \            }\n            rows.push((row_idx, col_idx));\n        }\n    }\n\
    \    rows\n        .into_iter()\n        .sort_by(|a, b| a.1.cmp(&b.1))\n    \
    \    .sort_by(|a, b| b.0.cmp(&a.0))\n        .collect()", "    let mut rows: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    while row_idx < row_len {\n        row_end = row_start + row_len;\n\
    \        col_end = col_start + col_len;\n        if row_idx < row_end && col_idx\
    \ < col_end {\n            if lst[row_idx][col_idx] == x {\n                let\
    \ row = row_idx - row_start;\n                let col = col_idx - col_start;\n\
    \                let row_end = row_start + row_len;\n                let col_end\
    \ = col_start + col_len;\n                let row_start = row_idx;\n         \
    \       let col_start = col_idx;\n                rows.push( (row, col) );\n \
    \           }\n        }\n        row_idx += 1;\n        col_idx += 1;\n    }\n\
    \    rows", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n    let mut\
    \ row_idx: usize = 0;\n    let mut col_idx: usize = 0;\n    let mut row_size:\
    \ usize = lst.len();\n    let mut col_count: usize = 0;\n    while row_idx < row_size\
    \ {\n        let mut row_cols: Vec<(isize, isize)> = Vec::new();\n        for\
    \ _ in 0..col_count {\n            row_cols.push(vec![0; lst.len() + 1]);\n  \
    \      }\n        for row_idx in 0..row_size {\n            for col_idx in 0..col_count\
    \ {\n                row_cols[row_idx][col_idx] = lst[row_idx][col_idx];\n   \
    \         }\n            row_cols.sort_by_key(|&(_, y)| y.cmp(&x));\n        \
    \    row_cols.sort_by_key(|&(_, y)| -y.cmp(&x));\n            rows.push(row_cols.iter().cloned().collect::<Vec<_>>());\n\
    \        }\n        row_idx += 1;\n        col_count += 1;\n    }\n    rows",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows {\n        let mut row_sorted = vec![];\n        let mut col_sorted\
    \ = vec![];\n        while col_idx < cols {\n            if row_idx == row_idx\
    \ {\n                row_sorted.push((row_idx, col_idx));\n                col_idx\
    \ = 0;\n            } else {\n                let mut row_idx = row_idx;\n   \
    \             let mut col_idx = col_idx;\n                while row_idx < rows\
    \ && col_idx < cols {\n                    if row_idx == row_idx {\n         \
    \               row_sorted.push((row_idx, col_idx));\n                       \
    \ col_idx = 0;\n                    } else {\n                        row_idx\
    \ += 1;\n                        col_idx += 1;\n                    }\n      \
    \          }\n            }\n        }\n        result.push(row_sorted.reverse());\n\
    \    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a,\
    \ b| b.1.cmp(&a.1));\n    result", "    let mut rows = vec![];\n    let mut cols\
    \ = vec![];\n    for row in lst {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    for col in cols.iter_mut() {\n        col.sort_by_key(|&x| x.0);\n\
    \        col.sort_by_key(|&x| x.1);\n    }\n    for col in cols.iter_mut() {\n\
    \        col.sort_by_key(|&x| x.0);\n        col.sort_by_key(|&x| x.1);\n    }\n\
    \    let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n\
    \        cols.push(row.iter().cloned().collect::<Vec<_>>());\n    }\n    for col\
    \ in cols.iter_mut() {\n        col.sort_by_key(|&x| x.0);\n        col.sort_by_key(|&x|\
    \ x.1);\n    }\n    for col in cols.iter_mut() {\n        col.sort_by_key(|&x|\
    \ x.0);\n        col.sort_by_key(|&x| x.1);\n    }\n    for col in cols.iter_mut()\
    \ {\n        col.sort_by_key(|&x| x.0);\n        col.sort_by_key(|&x| x.1);\n\
    \    }\n    for col in cols.iter_mut() {\n        col.sort_by_key(|&x| x.0);\n\
    \        col.sort_by_key(|&x| x.1);\n    }\n    for col in cols.iter_mut() {\n\
    \        col.sort_by_key(|&x| x.0);\n        col.sort_by_key(|&x| x.1);\n    }\n\
    \    for col in cols.iter_mut() {\n        col.sort_by_key(|&x| x.0);\n      \
    \  col.sort_by_key(|&x| x.1);\n    }\n    for col in cols.iter_mut() {\n     \
    \   col.sort_by_key(|&x| x.0);\n        col.sort_by_key(|&x| x.1);\n    }\n  \
    \  for col in cols.iter_mut() {\n        col.sort_by_key(|&x| x.0);\n        col.sort_by_key(|&x|\
    \ x.1);\n    }\n    for col in cols.iter_mut() {\n        col.sort_by_key(|&x|\
    \ x.0);\n        col.sort_by_key(|&x| x.1);\n    }\n    for col in cols.iter_mut()\
    \ {\n        col.sort_by_key(|&x| x.0);\n        col.sort_by_key(|&x| x.1);\n\
    \    }\n    for col in cols.iter_mut() {\n        col.sort_", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_len = 0;\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_len = 0;\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_len = 0;\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_len = 0;\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_pos_len = 0;\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx = 0;\n \
    \   let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    let mut col_pos_idx = 0;\n    let mut\
    \ col_", "    let mut rows = vec![];\n    let mut cols = vec![];\n    for row\
    \ in lst {\n        cols.push(row.len());\n        rows.push(row);\n    }\n  \
    \  sort_rows(&mut rows);\n    sort_cols(&mut cols);\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < rows[0].len() {\n        let mut j = i;\n \
    \       while j < rows[0].len() && rows[0][j] == x {\n            j += 1\n   \
    \     }\n        result.push((i, j));\n        i += j - i;\n    }\n    result",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: usize = 0;\n\
    \    let mut row_size: usize = 0;\n    let mut row_idx2: usize = 0;\n    let mut\
    \ row_size2: usize = 0;\n    let mut row_idx3: usize = 0;\n    let mut row_size3:\
    \ usize = 0;\n    let mut row_idx4: usize = 0;\n    let mut row_size4: usize =\
    \ 0;\n    let mut row_idx5: usize = 0;\n    let mut row_size5: usize = 0;\n  \
    \  let mut row_idx6: usize = 0;\n    let mut row_size6: usize = 0;\n    let mut\
    \ row_idx7: usize = 0;\n    let mut row_size7: usize = 0;\n    let mut row_idx8:\
    \ usize = 0;\n    let mut row_size8: usize = 0;\n    let mut row_idx9: usize =\
    \ 0;\n    let mut row_size9: usize = 0;\n    let mut row_idx10: usize = 0;\n \
    \   let mut row_size10: usize = 0;\n    let mut row_idx11: usize = 0;\n    let\
    \ mut row_size11: usize = 0;\n    let mut row_idx12: usize = 0;\n    let mut row_size12:\
    \ usize = 0;\n    let mut row_idx13: usize = 0;\n    let mut row_size13: usize\
    \ = 0;\n    let mut row_idx14: usize = 0;\n    let mut row_size14: usize = 0;\n\
    \    let mut row_idx15: usize = 0;\n    let mut row_size15: usize = 0;\n    let\
    \ mut row_idx16: usize = 0;\n    let mut row_size16: usize = 0;\n    let mut row_idx17:\
    \ usize = 0;\n    let mut row_size17: usize = 0;\n    let mut row_idx18: usize\
    \ = 0;\n    let mut row_size18: usize = 0;\n    let mut row_idx19: usize = 0;\n\
    \    let mut row_size19: usize = 0;\n    let mut row_idx20: usize = 0;\n    let\
    \ mut row_size20: usize = 0;\n    let mut row_idx21: usize = 0;\n    let mut row_size21:\
    \ usize = 0;\n    let mut row_idx22: usize = 0;\n    let mut row_size22: usize\
    \ = 0;\n    let mut row_idx23: usize = 0;\n    let mut row_size23: usize = 0;\n",
  "    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx] == x {\n\
    \            result.push((row_idx, col_idx));\n            row_idx += 1;\n   \
    \         col_idx += 1;\n        } else {\n            col_idx += 1;\n       \
    \ }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut coords = vec![];\n    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_count = vec![];\n    let mut col_count = vec![];\n\
    \    let mut row_max = vec![];\n    let mut col_max = vec![];\n    let mut row_min\
    \ = vec![];\n    let mut col_min = vec![];\n    let mut row_sums = vec![];\n \
    \   let mut col_sums = vec![];\n    let mut row_avg = vec![];\n    let mut col_avg\
    \ = vec![];\n    let mut row_min = vec![];\n    let mut col_min = vec![];\n  \
    \  let mut row_max = vec![];\n    let mut col_max = vec![];\n    let mut row_sum\
    \ = vec![];\n    let mut col_sum = vec![];\n    let mut row_count = vec![];\n\
    \    let mut col_count = vec![];\n    let mut row_sum = vec![];\n    let mut col_sum\
    \ = vec![];\n    let mut row_avg = vec![];\n    let mut col_avg = vec![];\n  \
    \  let mut row_min = vec![];\n    let mut col_min = vec![];\n    let mut row_max\
    \ = vec![];\n    let mut col_max = vec![];\n    let mut row_sum = vec![];\n  \
    \  let mut col_sum = vec![];\n    let mut row_count = vec![];\n    let mut col_count\
    \ = vec![];\n    let mut row_sum = vec![];\n    let mut col_sum = vec![];\n  \
    \  let mut row_avg = vec![];\n    let mut col_avg = vec![];\n    let mut row_min\
    \ = vec![];\n    let mut col_min = vec![];\n    let mut row_max = vec![];\n  \
    \  let mut col_max = vec![];\n    let mut row_sum = vec![];\n    let mut col_sum\
    \ = vec![];\n    let mut row_count = vec![];\n    let mut col_count = vec![];\n\
    \    let mut row_sum = vec![];\n    let mut col_sum = vec![];\n    let mut row_avg\
    \ = vec![];\n    let mut col_avg = vec![];\n    let mut row_min = vec![];\n  \
    \  let mut col_min = vec![];\n    let mut row_max = vec![];\n    let mut col_max\
    \ = vec![];\n    let mut row_sum = vec!", "    let mut rows = lst.len();\n   \
    \ let mut cols = lst[0].len();\n    let mut coords = Vec::new();\n    let mut\
    \ row_coords = Vec::new();\n    let mut col_coords = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n    let mut\
    \ row_sorted = Vec::new();\n    let mut col_sorted = Vec::new();\n", "    let\
    \ mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx: usize = 0;\n \
    \   let mut col_idx: usize = 0;\n    let mut row_size: usize = lst.len();\n  \
    \  let mut col_size: usize = lst[0].len();\n    while row_idx < row_size {\n \
    \       let mut row_idx: usize = 0;\n        while col_idx < col_size {\n    \
    \        if lst[row_idx][col_idx] == x {\n                rows.push((row_idx,\
    \ col_idx));\n                row_idx += 1;\n                break;\n        \
    \    }\n            col_idx += 1;\n        }\n    }\n    rows\n        .into_iter()\n\
    \        .sort_by(|a, b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0))\n\
    \        .collect()", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n \
    \   let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        row_idx += 1;\n        if row_idx == x {\n            rows.push((row_idx,\
    \ col_idx));\n            row_idx -= 1;\n            col_idx = 0;\n          \
    \  row_len = 0;\n        }\n        for col in row {\n            col_idx += 1;\n\
    \            if col_idx == x {\n                rows.push((row_idx, col_idx));\n\
    \                row_idx -= 1;\n                col_idx = 0;\n               \
    \ row_len = 0;\n            }\n        }\n    }\n    rows\n        .iter()\n \
    \       .sort_by(|a, b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0));",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end =\
    \ row_len;\n    let mut col_end = col_len;\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = 0;\n    let mut col_start = 0;", "    let mut rows =\
    \ vec![];\n    let mut cols = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_max = lst[0].len();\n    let mut col_max = lst[0].len();\n\
    \    for row in lst {\n        row_idx += 1;\n        let row_len = row.len();\n\
    \        if row_len > row_max {\n            row_max = row_len;\n        }\n \
    \       cols.clear();\n        for col in row {\n            col_idx += 1;\n \
    \           cols.push(col);\n            if col_idx > col_max {\n            \
    \    col_max = col_idx;\n            }\n        }\n        rows.push((row_idx,\
    \ row_len, cols, col_idx));\n    }\n    rows.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    rows.reverse();\n    let mut res = vec![];\n    for row in rows {\n     \
    \   let mut cols = row.2.clone();\n        cols.sort_by(|a, b| a.cmp(&b));\n \
    \       res.push((row.0, cols, row.3));\n    }\n    res", "    let mut result\
    \ = Vec::new();\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        let mut row_result = Vec::new();\n        while col_idx < cols {\n\
    \            if row_idx == rows {\n                row_result.push((row_idx, col_idx));\n\
    \                break;\n            }\n            if col_idx == cols {\n   \
    \             row_result.push((row_idx, col_idx));\n                break;\n \
    \           }\n            if lst[row_idx][col_idx] == x {\n                row_result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx++;\n\
    \        }\n        result.push(row_result.iter().cloned().collect::<Vec<_>>());\n\
    \        row_idx++;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n \
    \   for row in lst {\n        cols.clear();\n        for col in row.iter().cloned()\
    \ {\n            cols.push(col);\n        }\n        rows.push(row);\n       \
    \ coords.push((row, cols));\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    let mut coord = vec![];\n    for\
    \ coord in coords.iter().cloned() {\n        let mut row = vec![];\n        let\
    \ mut col = vec![];\n        for coord in coord.1.iter().cloned() {\n        \
    \    row.push(coord);\n        }\n        for coord in coord.1.iter().cloned()\
    \ {\n            col.push(coord);\n        }\n        coord.push((row, col));\n\
    \    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    let mut coord = vec![];\n\
    \    for coord in coords.iter().cloned() {\n        let mut row = vec![];\n  \
    \      let mut col = vec![];\n        for coord in coord.1.iter().cloned() {\n\
    \            row.push(coord);\n        }\n        for coord in coord.1.iter().cloned()\
    \ {\n            col.push(coord);\n        }\n        coord.push((row, col));\n\
    \    }\n    let mut coord = vec![];\n    for coord in coords.iter().cloned() {\n\
    \        let mut row = vec![];\n        let mut col = vec![];\n        for coord\
    \ in coord.1.iter().cloned() {\n            row.push(coord);\n        }\n    \
    \    for coord in coord.1.iter().cloned() {\n            col.push(coord);\n  \
    \      }\n        coord.push((row, col));\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    let mut coord = vec![];\n    for coord in coords.iter().cloned() {\n    \
    \    let mut row = vec![];\n        let mut col = vec![];\n        for coord in\
    \ coord.1.iter().cloned() {\n            row.push(coord);\n        }\n       \
    \ for coord in coord.1.iter().cloned() {\n            col.push(coord);\n     \
    \   }\n        coord.push((row, col));\n    }\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    let mut coord = vec![];\n    for coord in coords.iter().cloned() {\n    \
    \    let mut row = vec![];\n        let mut col = vec", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    while rows\
    \ > 0 || cols > 0 {\n        if rows > 0 {\n            coords.push(vec![(rows\
    \ - 1, cols - 1)]);\n            rows -= 1;\n        }\n        if cols > 0 {\n\
    \            coords.push(vec![(rows - 1, cols - 1)]);\n            cols -= 1;\n\
    \        }\n    }\n    coords.sort_by_key(|&(_, y)| y.0);\n    coords.sort_by_key(|&(_,\
    \ y)| y.1);\n    let mut ret: Vec<(isize, isize)> = vec![];\n    for coord in\
    \ coords {\n        let mut row = vec![];\n        for (x, y) in coord {\n   \
    \         row.push((x, y));\n        }\n        ret.push(row);\n    }\n    ret",
  "    let mut result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    let mut row_max = lst[0].len();\n    let mut col_max = lst[0].len();\n  \
    \  for row in lst {\n        let row_len = row.len();\n        if row_len > row_max\
    \ {\n            row_max = row_len;\n        }\n        if row_len > col_idx {\n\
    \            col_idx = row_len;\n        }\n    }\n    for row in lst {\n    \
    \    let row_len = row.len();\n        if row_len > row_idx {\n            result.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            col_idx = 1;\n        }\n\
    \        for col in row.iter().rev() {\n            if col == x {\n          \
    \      result.push((row_idx, col_idx));\n            }\n            col_idx -=\
    \ 1;\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut coords = vec![];\n    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    for row in lst {\n        let mut row_coords\
    \ = vec![];\n        for col in row {\n            if col == x {\n           \
    \     row_coords.push((row, col));\n            }\n        }\n        rows.push(row_coords);\n\
    \    }\n    for row in rows {\n        let mut row_coords = vec![];\n        for\
    \ col in row {\n            row_coords.push((col[1], col[0]));\n        }\n  \
    \      cols.push(row_coords);\n    }\n    coords.sort_by(|a, b| a[0].cmp(&b[0]));\n\
    \    coords.sort_by(|a, b| b[0].cmp(&a[0]));\n    coords.reverse();\n    cols.reverse();\n\
    \    coords", "    let mut coords = vec![];\n    let mut rows = vec![];\n    let\
    \ mut cols = vec![];\n    for row in lst {\n        let mut row_coords = vec![];\n\
    \        let mut row_cols = vec![];\n        for col in row {\n            if\
    \ col == x {\n                row_coords.push((row, col));\n            }\n  \
    \          row_cols.push((col, row));\n        }\n        rows.push(row_coords);\n\
    \        cols.push(row_cols);\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    rows.sort_by(|a, b| b.0.cmp(&a.0));\n    cols.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.iter().map(|&(_, c)| c).collect()", "    let mut result = Vec::new();\n\
    \    for row in lst {\n        let mut row_result = Vec::new();\n        for (i,\
    \ v) in row.iter().enumerate() {\n            if i == x {\n                row_result.push((i,\
    \ v));\n            }\n        }\n        result.push(row_result);\n    }\n  \
    \  result.sort_by_key(|&(_, v)| v.iter().rev().collect::<Vec<_>>());\n    result.sort_by_key(|&(_,\
    \ v)| v.iter().collect::<Vec<_>>().rev());\n    result", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted_idx = vec![];\n    let\
    \ mut col_sorted_idx = vec![];\n    let mut row_sorted_idx_idx = vec![];\n   \
    \ let mut col_sorted_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n  \
    \  let mut col_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_", "    let mut rows = vec![];\n \
    \   let mut cols = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while\
    \ row_idx < row_len {\n        let mut row_idx = row_idx;\n        while col_idx\
    \ < col_len {\n            if lst[row_idx][col_idx] == x {\n                rows.push(row_idx,\
    \ col_idx);\n                row_idx += 1;\n                col_idx += 1;\n  \
    \          } else {\n                col_idx += 1;\n            }\n        }\n\
    \        col_idx = col_len;\n        row_idx += 1;\n    }\n    rows.sort_by_key(|&(x,\
    \ y)| x.0);\n    rows.sort_by_key(|&(x, y)| y.0);\n    rows.iter().map(|&(x, y)|\
    \ {\n        (y, x)\n    }).collect()", "    let mut result = vec![];\n    let\
    \ mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_start = row_idx;\n        let mut row_end = row_idx;\n        let mut\
    \ col_start = col_idx;\n        let mut col_end = col_idx;\n        while col_start\
    \ < col_end {\n            if row_start == row_end {\n                row_end\
    \ = row_start + 1;\n                col_end = col_start + 1;\n            } else\
    \ {\n                row_end = row_start;\n                col_end = col_start;\n\
    \            }\n            let mut row_idx = row_start;\n            let mut\
    \ col_idx = col_start;\n            let mut row_len = row_end - row_start;\n \
    \           let mut col_len = col_end - col_start;\n            while row_idx\
    \ < row_len && col_idx < col_len {\n                if lst[row_idx][col_idx] ==\
    \ x {\n                    result.push((row_idx, col_idx));\n                \
    \    row_idx = row_idx + 1;\n                    col_idx = col_idx + 1;\n    \
    \            } else {\n                    row_idx = row_idx + 1;\n          \
    \      }\n            }\n        }\n        row_idx = row_end;\n        col_idx\
    \ = col_end;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut result = vec![];\n    for row in lst {\n\
    \        let mut row_result = vec![];\n        for element in row {\n        \
    \    if element == x {\n                row_result.push((element, 0));\n     \
    \       }\n        }\n        result.push(row_result);\n    }\n    result.sort_by_key(|row|\
    \ row[0].0);\n    result.sort_by_key(|row| row[0].1, |a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut result = Vec::new();\n    let mut row_idx = 1;\n  \
    \  let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    let mut row_start = 0;\n    let mut col_start = 0;\n  \
    \  while row_idx < row_len {\n        let mut row_end = row_start;\n        while\
    \ col_idx < col_len {\n            if lst[row_idx][col_idx] == x {\n         \
    \       result.push((row_idx, col_idx));\n                break;\n           \
    \ }\n            col_idx += 1;\n        }\n        row_end += 1;\n        row_idx\
    \ = row_end;\n        col_idx = 1;\n        col_len = lst[row_idx].len();\n  \
    \      col_start = col_idx;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n \
    \   result.sort_by_key(|&(x, y)| -y.0);\n    result", "    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_start = 0;\n    let mut col_start = 0;\n    while row_idx < row_len\
    \ {\n        let row_end = row_start + lst[row_idx].len();\n        while col_idx\
    \ < col_len {\n            let col_end = col_start + lst[row_idx][col_idx].len();\n\
    \            if row_start < col_end && col_start < row_end {\n               \
    \ let mut row = vec![];\n                let mut col = vec![];\n             \
    \   for i in row_start..row_end {\n                    for j in col_start..col_end\
    \ {\n                        row.push((i, j));\n                        col.push((i,\
    \ j));\n                    }\n                }\n                rows.push(row);\n\
    \                cols.push(col);\n                row_start = row_end;\n     \
    \           col_start = col_end;\n            }\n            col_idx++;\n    \
    \    }\n        row_idx++;\n        col_idx = 0;\n        row_start = row_end;\n\
    \        col_start = col_end;\n    }\n    rows\n        .iter()\n        .cloned()\n\
    \        .sort_by(|a, b| a.iter().cmp(b.iter()).reverse())\n        .sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse())", "    let mut row: Vec<(isize, isize)>\
    \ = vec![];\n    let mut row_idx: usize = 0;\n    let mut row_len: usize = 0;\n\
    \    let mut col_len: usize = 0;\n    let mut col_len2: usize = 0;\n    let mut\
    \ col_len3: usize = 0;\n    let mut col_len4: usize = 0;\n    let mut col_len5:\
    \ usize = 0;\n    let mut col_len6: usize = 0;\n    let mut col_len7: usize =\
    \ 0;\n    let mut col_len8: usize = 0;\n    let mut col_len9: usize = 0;\n   \
    \ let mut col_len10: usize = 0;\n    let mut col_len11: usize = 0;\n    let mut\
    \ col_len12: usize = 0;\n    let mut col_len13: usize = 0;\n    let mut col_len14:\
    \ usize = 0;\n    let mut col_len15: usize = 0;\n    let mut col_len16: usize\
    \ = 0;\n    let mut col_len17: usize = 0;\n    let mut col_len18: usize = 0;\n\
    \    let mut col_len19: usize = 0;\n    let mut col_len20: usize = 0;\n    let\
    \ mut col_len21: usize = 0;\n    let mut col_len22: usize = 0;\n    let mut col_len23:\
    \ usize = 0;\n    let mut col_len24: usize = 0;\n    let mut col_len25: usize\
    \ = 0;\n    let mut col_len26: usize = 0;\n    let mut col_len27: usize = 0;\n\
    \    let mut col_len28: usize = 0;\n    let mut col_len29: usize = 0;\n    let\
    \ mut col_len30: usize = 0;\n    let mut col_len31: usize = 0;\n    let mut col_len32:\
    \ usize = 0;\n    let mut col_len33: usize = 0;\n    let mut col_len34: usize\
    \ = 0;\n    let mut col_len35: usize = 0;\n    let mut col_len36: usize = 0;\n\
    \    let mut col_len37: usize = 0;\n    let mut col_len38: usize = 0;\n    let\
    \ mut col_len39: usize = 0;\n    let mut col_len40: usize = 0;\n    let mut col_len41:\
    \ usize = 0;\n    let mut col_len42: usize = 0;\n    let mut col_len43: usize\
    \ = 0;\n    let mut col_len44: ", "    let mut result = Vec::new();\n    let mut\
    \ row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_max = lst[0].len();\n\
    \    let mut col_max = lst[0].len();\n    let mut row_min = row_max;\n    let\
    \ mut col_min = col_max;\n    for row in lst {\n        let row_len = row.len();\n\
    \        if row_len > row_max {\n            row_max = row_len;\n        }\n \
    \       if row_len < row_min {\n            row_min = row_len;\n        }\n  \
    \      if col_idx > col_max {\n            col_max = col_len;\n        }\n   \
    \     if col_idx < col_min {\n            col_min = col_len;\n        }\n    }\n\
    \    for row in lst {\n        let row_len = row.len();\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                result.push((row_idx, col_idx));\n\
    \            }\n            col_idx--;\n        }\n        row_idx++;\n    }\n\
    \    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result.sort_by(|a, b| b.2.cmp(&a.2));\n\
    \    result", "    let mut result = Vec::new();\n    for row in lst {\n      \
    \  let mut row_result = Vec::new();\n        for cell in row.iter().cloned() {\n\
    \            if cell == x {\n                row_result.push((cell, cell));\n\
    \            }\n        }\n        result.push(row_result.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    result.sort_by_key(|row| row.iter().cloned().collect::<Vec<_>>());\n\
    \    result.sort_by_key(|row| row.iter().cloned().reverse().collect::<Vec<_>>());\n\
    \    result", "    let mut result = vec![];\n    let mut row_idx = 1;\n    let\
    \ mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    let mut row_start = row_idx;\n    let mut col_start = col_idx;\n    while\
    \ row_idx < row_len {\n        let mut row_end = row_idx;\n        while row_end\
    \ < row_len && row_idx < row_end {\n            if row_idx == row_end {\n    \
    \            row_idx += 1;\n                continue;\n            }\n       \
    \     if row_idx == row_start {\n                row_idx += 1;\n             \
    \   row_start = row_idx;\n                col_start = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += 1;\n        \
    \        row_end = row_idx;\n                col_end = col_idx;\n            }\n\
    \            if row_idx == row_end {\n                row_idx += ", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: usize = 0;\n    let\
    \ mut row_len: usize = 0;\n    let mut col_len: usize = 0;\n    for row in lst\
    \ {\n        row_len += 1;\n        if row_len == x {\n            return row;\n\
    \        }\n    }\n    for row in lst {\n        col_len += 1;\n        if col_len\
    \ == x {\n            return row;\n        }\n    }\n    for row in lst {\n  \
    \      row_idx += 1;\n        if row_idx == x {\n            return row;\n   \
    \     }\n    }\n    for row in lst {\n        row_idx -= 1;\n        if row_idx\
    \ == x {\n            return row;\n        }\n    }\n    for row in lst {\n  \
    \      row_idx += 1;\n        row_len -= 1;\n        if row_idx == x {\n     \
    \       return row;\n        }\n    }\n    for row in lst {\n        row_idx -=\
    \ 1;\n        row_len -= 1;\n        if row_idx == x {\n            return row;\n\
    \        }\n    }\n    for row in lst {\n        row_idx += 1;\n        col_len\
    \ -= 1;\n        if row_idx == x {\n            return row;\n        }\n    }\n\
    \    for row in lst {\n        row_idx -= 1;\n        col_len -= 1;\n        if\
    \ row_idx == x {\n            return row;\n        }\n    }\n    for row in lst\
    \ {\n        row_idx += 1;\n        col_len -= 1;\n        row_len -= 1;\n   \
    \     if row_idx == x {\n            return row;\n        }\n    }\n    for row\
    \ in lst {\n        row_idx -= 1;\n        col_len -= 1;\n        row_len -= 1;\n\
    \        if row_idx == x {\n            return row;\n        }\n    }\n    for\
    \ row in lst {\n        row_idx += 1;\n        col_len -= 1;\n        col_len\
    \ -= 1;\n        if row_idx == x {\n            return row;\n        }\n    }\n\
    \    for row in lst {\n        row_idx -= 1;\n        col_len -= 1;\n        col_len\
    \ -= 1;\n        if row_idx == x {\n            return row;\n        }\n    }\n\
    \    for row in lst {\n        row_idx += 1;\n        col_len -= 1;\n        col_len\
    \ -= 1;\n        row_len -= 1;\n        if row_idx == x {\n            return\
    \ row;\n        }\n    }\n    for row in lst {\n        row_idx -= 1;\n      \
    \  col_len -= 1;\n        col_len -= 1;\n", "    let mut row: Vec<(isize, isize)>\
    \ = vec![];\n    let mut row_idx: usize = 0;\n    let mut row_len: usize = 0;\n\
    \    let mut col_len: usize = 0;\n    let mut col_len2: usize = 0;\n    let mut\
    \ col_len3: usize = 0;\n    let mut col_len4: usize = 0;\n    let mut col_len5:\
    \ usize = 0;\n    let mut col_len6: usize = 0;\n    let mut col_len7: usize =\
    \ 0;\n    let mut col_len8: usize = 0;\n    let mut col_len9: usize = 0;\n   \
    \ let mut col_len10: usize = 0;\n    let mut col_len11: usize = 0;\n    let mut\
    \ col_len12: usize = 0;\n    let mut col_len13: usize = 0;\n    let mut col_len14:\
    \ usize = 0;\n    let mut col_len15: usize = 0;\n    let mut col_len16: usize\
    \ = 0;\n    let mut col_len17: usize = 0;\n    let mut col_len18: usize = 0;\n\
    \    let mut col_len19: usize = 0;\n    let mut col_len20: usize = 0;\n    let\
    \ mut col_len21: usize = 0;\n    let mut col_len22: usize = 0;\n    let mut col_len23:\
    \ usize = 0;\n    let mut col_len24: usize = 0;\n    let mut col_len25: usize\
    \ = 0;\n    let mut col_len26: usize = 0;\n    let mut col_len27: usize = 0;\n\
    \    let mut col_len28: usize = 0;\n    let mut col_len29: usize = 0;\n    let\
    \ mut col_len30: usize = 0;\n    let mut col_len31: usize = 0;\n    let mut col_len32:\
    \ usize = 0;\n    let mut col_len33: usize = 0;\n    let mut col_len34: usize\
    \ = 0;\n    let mut col_len35: usize = 0;\n    let mut col_len36: usize = 0;\n\
    \    let mut col_len37: usize = 0;\n    let mut col_len38: usize = 0;\n    let\
    \ mut col_len39: usize = 0;\n    let mut col_len40: usize = 0;\n    let mut col_len41:\
    \ usize = 0;\n    let mut col_len42: usize = 0;\n    let mut col_len43: usize\
    \ = 0;\n    let mut col_len44: ", "    let mut rows: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx: usize = 0;\n    let mut col_idx: usize = 0;\n    let mut\
    \ row_size: usize = 0;\n    let mut col_count: usize = 0;\n    let mut row_idxs:\
    \ Vec<usize> = vec![];\n    let mut col_idxs: Vec<usize> = vec![];\n    let mut\
    \ row_sizes: Vec<usize> = vec![];\n    let mut col_counts: Vec<usize> = vec![];\n\
    \    for row in lst {\n        row_idx += 1;\n        row_size += 1;\n       \
    \ row_idxs.push(row_idx);\n        row_sizes.push(row_size);\n        col_count\
    \ += 1;\n        col_counts.push(col_count);\n        for col in row {\n     \
    \       col_idx += 1;\n            col_count += 1;\n            col_idxs.push(col_idx);\n\
    \        }\n    }\n    row_idxs.sort_by_key(|&x| x);\n    row_sizes.sort_by_key(|&x|\
    \ x);\n    col_idxs.sort_by_key(|&x| x);\n    col_counts.sort_by_key(|&x| x);\n\
    \    let mut row_idxs_idx: usize = 0;\n    let mut col_idxs_idx: usize = 0;\n\
    \    let mut row_sizes_idx: usize = 0;\n    let mut col_counts_idx: usize = 0;\n\
    \    let mut row_idxs_idxs: Vec<usize> = vec![];\n    let mut col_idxs_idxs: Vec<usize>\
    \ = vec![];\n    let mut row_sizes_idxs: Vec<usize> = vec![];\n    let mut col_counts_idxs:\
    \ Vec<usize> = vec![];\n    for row_idx in row_idxs {\n        for col_idx in\
    \ col_idxs {\n            if row_idx == row_idx {\n                row_idxs_idx\
    \ += 1;\n                row_sizes_idx += 1;\n                row_idxs_idxs.push(row_idxs_idx);\n\
    \                row_sizes_idxs.push(row_sizes_idx);\n                col_counts_idx\
    \ += 1;\n                col_counts_idxs.push(col_counts_idx);\n             \
    \   for col_idx2 in col_idxs {\n                    if col_idx2 == col_idx {\n\
    \                        col_idxs_idx += 1;\n                        col_counts_idx\
    \ += 1;\n                        col_idxs_idxs.push(col_idxs_idx);\n         \
    \               col_counts_idxs.push(col_counts_idx);\n                    }\n\
    \                }\n            }\n        }\n    }\n    row_", "    let mut coords\
    \ = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n    for row\
    \ in lst {\n        cols.clear();\n        for col in row.iter().cloned() {\n\
    \            cols.push(col);\n        }\n        rows.push(row);\n        coords.extend((row,\
    \ cols));\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    let mut res = vec![];\n    for coord in coords.iter()\
    \ {\n        if coord.0.cmp(&x) == 0 {\n            res.push((coord.0, coord.1));\n\
    \        }\n    }\n    res", "    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut row_start = 0;\n    let mut col_start =\
    \ 0;\n    let mut row_end = 0;\n    let mut col_end = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut col_idx2 = 0;\n    let mut row_len2 = 0;\n    let mut col_len2\
    \ = 0;\n    let mut row_start2 = 0;\n    let mut col_start2 = 0;\n    let mut\
    \ row_end2 = 0;\n    let mut col_end2 = 0;\n    let mut row_idx3 = 0;\n    let\
    \ mut col_idx3 = 0;\n    let mut row_len3 = 0;\n    let mut col_len3 = 0;\n  \
    \  let mut row_start3 = 0;\n    let mut col_start3 = 0;\n    let mut row_end3\
    \ = 0;\n    let mut col_end3 = 0;\n    let mut row_idx4 = 0;\n    let mut col_idx4\
    \ = 0;\n    let mut row_len4 = 0;\n    let mut col_len4 = 0;\n    let mut row_start4\
    \ = 0;\n    let mut col_start4 = 0;\n    let mut row_end4 = 0;\n    let mut col_end4\
    \ = 0;\n    let mut row_idx5 = 0;\n    let mut col_idx5 = 0;\n    let mut row_len5\
    \ = 0;\n    let mut col_len5 = 0;\n    let mut row_start5 = 0;\n    let mut col_start5\
    \ = 0;\n    let mut row_end5 = 0;\n    let mut col_end5 = 0;\n    let mut row_idx6\
    \ = 0;\n    let mut col_idx6 = 0;\n    let mut row_len6 = 0;\n    let mut col_len6\
    \ = 0;\n    let mut row_start6 = 0;\n    let mut col_start6 = 0;\n    let mut\
    \ row_end6 = 0;\n    let mut col_end6 = 0;\n    let mut row_idx7 = 0;\n    let\
    \ mut col_idx7 = 0;\n    let mut row_len7 = 0;\n    let mut col_len7 = 0;\n  \
    \  let mut row_start7 = 0;\n    let mut col_start7 = 0;\n    let mut row_end7\
    \ = 0;\n    let mut col_end7 = 0;\n    let mut row_idx8 = 0;\n    let mut col_idx8\
    \ = 0;\n    let mut row_len8 = 0;\n    let mut col_len8 = 0;\n    let mut row_start8\
    \ = 0;\n    let mut col_start8 = 0;\n    let mut row_end8 = 0;\n    let mut col_end8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut col_idx9 = 0;\n    let mut row_len9\
    \ = 0;\n", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_start\
    \ = 0;\n    let mut col_end = 0;\n    let mut col_start2 = 0;\n    let mut col_end2\
    \ = 0;\n    let mut row_start = 0;\n    let mut row_end = 0;\n    let mut row_start2\
    \ = 0;\n    let mut row_end2 = 0;\n    let mut row_start3 = 0;\n    let mut row_end3\
    \ = 0;\n    let mut col_start3 = 0;\n    let mut col_end3 = 0;\n    let mut col_start4\
    \ = 0;\n    let mut col_end4 = 0;\n    let mut col_start5 = 0;\n    let mut col_end5\
    \ = 0;\n    let mut col_start6 = 0;\n    let mut col_end6 = 0;\n    let mut col_start7\
    \ = 0;\n    let mut col_end7 = 0;\n    let mut col_start8 = 0;\n    let mut col_end8\
    \ = 0;\n    let mut col_start9 = 0;\n    let mut col_end9 = 0;\n    let mut col_start10\
    \ = 0;\n    let mut col_end10 = 0;\n    let mut col_start11 = 0;\n    let mut\
    \ col_end11 = 0;\n    let mut col_start12 = 0;\n    let mut col_end12 = 0;\n \
    \   let mut col_start13 = 0;\n    let mut col_end13 = 0;\n    let mut col_start14\
    \ = 0;\n    let mut col_end14 = 0;\n    let mut col_start15 = 0;\n    let mut\
    \ col_end15 = 0;\n    let mut col_start16 = 0;\n    let mut col_end16 = 0;\n \
    \   let mut col_start17 = 0;\n    let mut col_end17 = 0;\n    let mut col_start18\
    \ = 0;\n    let mut col_end18 = 0;\n    let mut col_start19 = 0;\n    let mut\
    \ col_end19 = 0;\n    let mut col_start20 = 0;\n    let mut col_end20 = 0;\n \
    \   let mut col_start21 = 0;\n    let mut col_end21 = 0;\n    let mut col_start22\
    \ = 0;\n    let mut col_end22 = 0;\n    let mut col_start23 = 0;\n    let mut\
    \ col_end23 = 0;\n    let mut col_start24 = 0;\n    let mut col_end24 = 0;\n \
    \   let mut col_start25 = 0;\n    let mut col_end25 = 0;\n    let mut col_start26\
    \ = 0;\n    let mut col_end26 = 0;\n    let mut col_start27 = 0;\n    let mut\
    \ col_end27 = 0;\n    let mut col_start28 = 0;\n    let mu", "    let mut rows\
    \ = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        let mut\
    \ row_cols = vec![];\n        for col in row {\n            if col == x {\n  \
    \              row_cols.push((col, row.len()));\n            }\n        }\n  \
    \      rows.push(row_cols);\n    }\n    rows.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    rows.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n    return rows",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n        row_len\
    \ += row.len();\n        if row_idx < row.len() {\n            col_len = row[row_idx].len();\n\
    \        }\n        if row_idx == 0 {\n            row_idx += 1;\n        }\n\
    \        if row_idx == row.len() {\n            row_idx = 0;\n            row_len\
    \ += 1;\n        }\n        if col_len > x {\n            break;\n        }\n\
    \    }\n    let mut col_len = 0;\n    let mut col_len2 = 0;\n    for row in lst\
    \ {\n        col_len += row.len();\n        if col_len2 < col_len {\n        \
    \    col_len2 = col_len;\n        }\n    }\n    let mut col_len2 = 0;\n    let\
    \ mut col_len3 = 0;\n    for row in lst {\n        col_len += row.len();\n   \
    \     if col_len2 < col_len {\n            col_len2 = col_len;\n        }\n  \
    \      if col_len2 < col_len3 {\n            col_len3 = col_len2;\n        }\n\
    \    }\n    let mut col_len2 = 0;\n    let mut col_len3 = 0;\n    for row in lst\
    \ {\n        col_len += row.len();\n        if col_len2 < col_len {\n        \
    \    col_len2 = col_len;\n        }\n        if col_len2 < col_len3 {\n      \
    \      col_len3 = col_len2;\n        }\n        if col_len3 == col_len2 {\n  \
    \          row_idx += 1;\n        }\n    }\n    let mut col_len2 = 0;\n    let\
    \ mut col_len3 = 0;\n    for row in lst {\n        col_len += row.len();\n   \
    \     if col_len2 < col_len {\n            col_len2 = col_len;\n        }\n  \
    \      if col_len2 < col_len3 {\n            col_len3 = col_len2;\n        }\n\
    \        if col_len3 == col_len2 {\n            row_idx += 1;\n        }\n   \
    \     if row_idx == row.len() {\n            row_idx = 0;\n            row_len\
    \ += 1;\n        }\n    }\n    let mut col_len2 = 0;\n    let mut col_len3 = 0;\n\
    \    for row in lst {\n        col_len += row.len();\n        if col_len2 < col_len\
    \ {\n            col_len2 = col_len;\n        }\n        if col_len2 < col_len3\
    \ {\n            col_len3 = col_len2;\n        }\n        if col_len3 == col_len2\
    \ {\n            row_idx += 1;\n        }\n        if row_idx == row.len() {\n\
    \            row_idx = 0;\n            row_len += 1;", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        col_len += row.iter().map(|x| x.len()).sum();\n    }\n    let mut col_pos\
    \ = col_len;\n    let mut row_pos = row_len;\n    let mut col_end = 0;\n    let\
    \ mut row_end = 0;\n    let mut col_start = 0;\n    let mut row_start = 0;\n \
    \   for row in lst {\n        row_end += row.len();\n        col_end = col_len;\n\
    \        row_end = row_len;\n        col_start = col_pos;\n        row_start =\
    \ row_pos;\n        for col in row.iter() {\n            if col == x {\n     \
    \           row_pos += 1;\n                col_pos += 1;\n            }\n    \
    \        row_end = row_pos;\n            col_end = col_pos;\n        }\n     \
    \   row.sort_by_key(|x| x.0);\n        row.sort_by_key(|x| -x.1);\n        row.sort_by_key(|x|\
    \ x.1);\n        row.sort_by_key(|x| -x.0);\n        row.sort_by_key(|x| x.0);\n\
    \        row.sort_by_key(|x| -x.0);\n        row.sort_by_key(|x| x.0);\n     \
    \   row.sort_by_key(|x| -x.0);\n        row.sort_by_key(|x| x.0);\n        row.sort_by_key(|x|\
    \ -x.0);\n        row.sort_by_key(|x| x.0);\n        row.sort_by_key(|x| -x.0);\n\
    \        row.sort_by_key(|x| x.0);\n        row.sort_by_key(|x| -x.0);\n     \
    \   row.sort_by_key(|x| x.0);\n        row.sort_by_key(|x| -x.0);\n        row.sort_by_key(|x|\
    \ x.0);\n        row.sort_by_key(|x| -x.0);\n        row.sort_by_key(|x| x.0);\n\
    \        row.sort_by_key(|x| -x.0);\n        row.sort_by_key(|x| x.0);\n     \
    \   row.sort_by_key(|x| -x.0);\n        row.sort_by_key(|x| x.0);\n        row.sort_by_key(|x|\
    \ -x.0);\n        row.sort_by_key(|x| x.0);\n        row.sort_by_key(|x| -x.0);\n\
    \        row.sort_by_key(|x| x.0);\n        row.sort_by_", "    let mut result\
    \ = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        let mut row_result = vec![];\n        while col_idx < cols {\n  \
    \          if row_idx == row_idx {\n                if col_idx < cols {\n    \
    \                row_result.push((row_idx, col_idx));\n                }\n   \
    \         }\n            col_idx += 1;\n        }\n        result.push(row_result);\n\
    \        row_idx += 1;\n    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \    result.sort_by_key(|&(_, y)| y.cmp(&-x));\n    result", "    let mut row:\
    \ Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    for row in lst {\n        let mut row_idx = row.iter().enumerate().filter(|&(i,\
    \ _)| i == x).count();\n        let mut col_idx = row.iter().enumerate().filter(|&(_,\
    \ j)| j == x).count();\n        if row_idx > 0 {\n            row_idx -= 1;\n\
    \        }\n        if col_idx > 0 {\n            col_idx -= 1;\n        }\n \
    \       row.swap(row_idx, col_idx);\n        row.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        row.sort_by_key(|&(_, y)| -y.cmp(&x));\n        row.sort_by_key(|&",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n        row_len\
    \ += row.len();\n        col_len = row.iter().map(|x| x.len()).sum();\n      \
    \  if row_len == x {\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \            row.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n         \
    \   row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n            row.sort_by(|a,\
    \ b| b.iter().cmp(a.iter()).reverse());\n            row.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());",
  "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_sorted = Vec::new();\n\
    \    let mut row_sorted_reversed = Vec::new();\n    let mut row_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed = Vec::new();\n\
    \    let mut row_sorted_reversed_sorted_reversed_sorted = Vec::new();\n    let\
    \ mut row_sorted_reversed_sorted_reversed_sorted_reversed = Vec::new();\n    let\
    \ mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted = Vec::new();\n\
    \    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut row_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut ", "    let mut coords = vec![];\n    let mut rows\
    \ = vec![];\n    let mut cols = vec![];\n    let mut row_coords = vec![];\n  \
    \  let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec", "    let mut rows = vec![];\n    let\
    \ mut cols = vec![];\n    for row in lst {\n        cols.clear();\n        for\
    \ col in row.iter().cloned() {\n            if col == x {\n                cols.push((col,\
    \ row.len()));\n            }\n        }\n        rows.push((row.len(), cols.len()));\n\
    \    }\n    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.sort_by(|a, b| b.2.cmp(&a.2));\n\
    \    rows", "    let mut row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx2: Vec<isize> = Vec::new();\n \
    \   let mut row_idx3: Vec<isize> = Vec::new();\n    let mut row_idx4: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx5: Vec<isize> = Vec::new();\n    let mut row_idx6:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx7: Vec<isize> = Vec::new();\n \
    \   let mut row_idx8: Vec<isize> = Vec::new();\n    let mut row_idx9: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx10: Vec<isize> = Vec::new();\n    let mut\
    \ row_idx11: Vec<isize> = Vec::new();\n    let mut row_idx12: Vec<isize> = Vec::new();\n\
    \    let mut row_idx13: Vec<isize> = Vec::new();\n    let mut row_idx14: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx15: Vec<isize> = Vec::new();\n    let mut\
    \ row_idx16: Vec<isize> = Vec::new();\n    let mut row_idx17: Vec<isize> = Vec::new();\n\
    \    let mut row_idx18: Vec<isize> = Vec::new();\n    let mut row_idx19: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx20: Vec<isize> = Vec::new();\n    let mut\
    \ row_idx21: Vec<isize> = Vec::new();\n    let mut row_idx22: Vec<isize> = Vec::new();\n\
    \    let mut row_idx23: Vec<isize> = Vec::new();\n    let mut row_idx24: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx25: Vec<isize> = Vec::new();\n    let mut\
    \ row_idx26: Vec<isize> = Vec::new();\n    let mut row_idx27: Vec<isize> = Vec::new();\n\
    \    let mut row_idx28: Vec<isize> = ", "    let mut rows = vec![];\n    let mut\
    \ cols = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx\
    \ < row_len {\n        let mut row_idx = row_idx;\n        let mut col_idx = col_idx;\n\
    \        while col_idx < col_len {\n            if lst[row_idx][col_idx] == x\
    \ {\n                rows.push(row_idx);\n                cols.push(col_idx);\n\
    \                break;\n            }\n            col_idx += 1;\n        }\n\
    \        row_idx += 1;\n    }\n    sort_rows(rows);\n    sort_cols(cols);\n  \
    \  rows", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_idx2 = 0;\n    let mut col_idx2\
    \ = 0;\n    let mut row_idx3 = 0;\n    let mut col_idx3 = 0;\n    let mut row_idx4\
    \ = 0;\n    let mut col_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut col_idx5\
    \ = 0;\n    let mut row_idx6 = 0;\n    let mut col_idx6 = 0;\n    let mut row_idx7\
    \ = 0;\n    let mut col_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut col_idx8\
    \ = 0;\n    let mut row_idx9 = 0;\n    let mut col_idx9 = 0;\n    let mut row_idx10\
    \ = 0;\n    let mut col_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut col_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut col_idx12 = 0;\n    let mut row_idx13\
    \ = 0;\n    let mut col_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut col_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut col_idx15 = 0;\n    let mut row_idx16\
    \ = 0;\n    let mut col_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut col_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut col_idx18 = 0;\n    let mut row_idx19\
    \ = 0;\n    let mut col_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut col_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut col_idx21 = 0;\n    let mut row_idx22\
    \ = 0;\n    let mut col_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut col_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut col_idx24 = 0;\n    let mut row_idx25\
    \ = 0;\n    let mut col_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut col_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut col_idx27 = 0;\n    let mut row_idx28\
    \ = 0;\n    let mut col_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut col_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut col_idx30 = 0;\n    let mut row_idx31\
    \ = 0;\n    let mut col_idx31 = 0;\n    let mut row_idx32 = 0;\n    let ", " \
    \   let mut result = vec![];\n    let mut row = 0;\n    let mut col = 0;\n   \
    \ while row < lst.len() {\n        let mut found = false;\n        for y in 0..lst[row].len()\
    \ {\n            if lst[row][y] == x {\n                found = true;\n      \
    \          break;\n            }\n        }\n        if found {\n            result.push((row,\
    \ col));\n            row += 1;\n            col += 1;\n        } else {\n   \
    \         row += 1;\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n\
    \    result.sort_by_key(|&(x, y)| -x.1);\n    result", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows {\n       \
    \ let mut row_result = vec![];\n        while col_idx < cols {\n            if\
    \ row_idx == row_idx {\n                row_result.push((row_idx, col_idx));\n\
    \            }\n            if col_idx < cols && col_idx < cols + x {\n      \
    \          col_idx++;\n            } else {\n                row_result.push((row_idx,\
    \ col_idx));\n                col_idx = 0;\n            }\n        }\n       \
    \ result.push(row_result);\n        row_idx++;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ rows: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx: usize = 0;\n \
    \   let mut col_idx: usize = 0;\n    for row in lst {\n        if row_idx == x\
    \ {\n            rows.push((row_idx, col_idx));\n            row_idx = 0;\n  \
    \          col_idx = 0;\n        }\n        for col in row {\n            col_idx\
    \ += 1;\n        }\n        row_idx += 1;\n    }\n    rows.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    rows.sort_by(|a, b| b.1.cmp(&a.1));\n    rows", "    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    for row in lst {\n        cols.clear();\n   \
    \     for col in row {\n            if col == x {\n                cols.push((col,\
    \ row.len()));\n            }\n        }\n        rows.push((row.len(), cols.len()));\n\
    \    }\n    rows.sort_by_key(|(_, y)| y.reverse());\n    rows.sort_by_key(|(_,\
    \ y)| y.reverse());\n    rows", "    let mut row: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx: Vec<isize> = Vec::new();\n    let mut row_idx_idx: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx_idx_idx: Vec<isize> = Vec::new();\n    let\
    \ mut row_idx_idx_idx_idx: Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = Vec::new();\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = Vec::new();\n \
    \   let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = Vec::new();\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = Vec::new();\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = Vec::new();\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = Vec::new();\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize>", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_result = vec![];\n   \
    \     while col_idx < cols {\n            if row_idx == rows {\n             \
    \   row_result.push((row_idx, col_idx));\n                break;\n           \
    \ }\n            if col_idx == cols {\n                row_result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                row_result.push((row_idx, col_idx));\n             \
    \   break;\n            }\n            col_idx++;\n        }\n        result.push(row_result);\n\
    \        col_idx = 0;\n        row_idx++;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ result = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        let mut row_result = vec![];\n        while col_idx < cols {\n  \
    \          if row_idx == 0 {\n                row_result.push((row_idx, col_idx));\n\
    \            }\n            if row_idx == rows {\n                break;\n   \
    \         }\n            if col_idx == cols {\n                break;\n      \
    \      }\n            if lst[row_idx][col_idx] == x {\n                row_result.push((row_idx,\
    \ col_idx));\n                col_idx++;\n            } else {\n             \
    \   col_idx++;\n            }\n        }\n        result.push(row_result);\n \
    \       row_idx++;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    while\
    \ row_idx < rows {\n        let mut row_result = vec![];\n        while col_idx\
    \ < cols {\n            if lst[row_idx][col_idx] == x {\n                row_result.push((row_idx,\
    \ col_idx));\n            }\n            col_idx += 1;\n        }\n        result.push(row_result.into_iter().cloned());\n\
    \        row_idx += 1;\n        col_idx = 1;\n    }\n    result.sort_by_key(|x|\
    \ x.1);\n    result.sort_by_key(|x| x.2, |a, b| b.1.cmp(&a.1));\n    result",
  "    let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((col, row.len()));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by_key(|x| x.0);\n \
    \   result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n    result", "    let\
    \ mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ && col_idx < cols {\n        if row_idx == rows {\n            result.push((row_idx,\
    \ col_idx));\n            break;\n        }\n        if col_idx == cols {\n  \
    \          result.push((row_idx, col_idx));\n            break;\n        }\n \
    \       if lst[row_idx][col_idx] == x {\n            result.push((row_idx, col_idx));\n\
    \            row_idx += 1;\n            col_idx += 1;\n        } else {\n    \
    \        row_idx += 1;\n        }\n    }\n    result.sort_by_key(|&(_, y)| y);\n\
    \    result.sort_by_key(|&(_, y)| -y);\n    result", "    let mut result = vec![];\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_max = lst[0].len();\n\
    \    let mut col_max = lst[0].len();\n    let mut row_min = row_max - 1;\n   \
    \ let mut col_min = col_max - 1;\n    let mut row_idx2 = 1;\n    let mut col_idx2\
    \ = 1;\n    let mut row_max2 = lst[0].len();\n    let mut col_max2 = lst[0].len();\n\
    \    let mut row_min2 = row_max2 - 1;\n    let mut col_min2 = col_max2 - 1;\n\
    \    let mut row_idx3 = 1;\n    let mut col_idx3 = 1;\n    let mut row_max3 =\
    \ lst[0].len();\n    let mut col_max3 = lst[0].len();\n    let mut row_min3 =\
    \ row_max3 - 1;\n    let mut col_min3 = col_max3 - 1;\n    let mut row_idx4 =\
    \ 1;\n    let mut col_idx4 = 1;\n    let mut row_max4 = lst[0].len();\n    let\
    \ mut col_max4 = lst[0].len();\n    let mut row_min4 = row_max4 - 1;\n    let\
    \ mut col_min4 = col_max4 - 1;\n    let mut row_idx5 = 1;\n    let mut col_idx5\
    \ = 1;\n    let mut row_max5 = lst[0].len();\n    let mut col_max5 = lst[0].len();\n\
    \    let mut row_min5 = row_max5 - 1;\n    let mut col_min5 = col_max5 - 1;\n\
    \    let mut row_idx6 = 1;\n    let mut col_idx6 = 1;\n    let mut row_max6 =\
    \ lst[0].len();\n    let mut col_max6 = lst[0].len();\n    let mut row_min6 =\
    \ row_max6 - 1;\n    let mut col_min6 = col_max6 - 1;\n    let mut row_idx7 =\
    \ 1;\n    let mut col_idx7 = 1;\n    let mut row_max7 = lst[0].len();\n    let\
    \ mut col_max7 = lst[0].len();\n    let mut row_min7 = row_max7 - 1;\n    let\
    \ mut col_min7 = col_max7 - 1;\n    let mut row_idx8 = 1;\n    let mut col_idx8\
    \ = 1;\n    let mut row_max8 = lst[0].len();\n    let mut col_max8 = lst[0].len();\n\
    \    let mut row_min8 = row_max8 - 1;\n    let mut col_min8 = col_max8 - 1;\n\
    \    let mut row_idx9 = 1;\n    let mut col_idx9 = 1;\n    let mut row_max9 =\
    \ lst[0].len", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_result = vec![];\n   \
    \     while col_idx < cols {\n            if row_idx == row_idx {\n          \
    \      row_result.push((row_idx, col_idx));\n            }\n            if col_idx\
    \ == col_idx {\n                row_result.push((row_idx, col_idx));\n       \
    \     }\n            col_idx += 1;\n        }\n        row_idx += 1;\n       \
    \ result.push(row_result);\n    }\n    result.sort_by_key(|&(_, y)| y.0);\n  \
    \  result.sort_by_key(|&(_, y)| y.1);\n    result", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![(0, 0)];\n    let\
    \ mut row_coords = vec![(0, 0)];\n    let mut col_coords = vec![(0, 0)];\n   \
    \ let mut row_sorted = vec![false; rows];\n    let mut col_sorted = vec![false;\
    \ cols];\n\n    for row in 0..rows {\n        for col in 0..cols {\n         \
    \   if row == 0 || col == 0 || row == rows || col == cols {\n                continue;\n\
    \            }\n            let coord = (row, col);\n            if row_sorted[row]\
    \ || col_sorted[col] {\n                continue;\n            }\n           \
    \ row_sorted[row] = true;\n            col_sorted[col] = true;\n            row_coords[row]\
    \ = coord;\n            col_coords[col] = coord;\n            coords.push(coord);\n\
    \        }\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    let mut coords = coords.into_iter().map(|coord| {\n\
    \        let (row, col) = coord;\n        (row_coords[row], col_coords[col])\n\
    \    }).collect::<Vec<_>>();\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    coords", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut coords = vec![(0, 0)];\n    let mut sorted_rows\
    \ = vec![];\n    let mut sorted_cols = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coords = vec![];\n    let mut row_coord = vec![];\n    let mut col_coord\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coord = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut row_coords = vec![];\n    let mut\
    \ col_coord = vec![];\n    let mut row_coords = ", "    let mut row: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut row_len = 0;\n\
    \    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx =\
    \ 0;\n    let mut col_pos_len = 0;\n    let mut row_pos = 0;\n    let mut row_pos_idx\
    \ = 0;\n    let mut row_pos_len = 0;\n    for row in lst {\n        row_len +=\
    \ 1;\n        col_pos_len += 1;\n        if col_pos_len == col_len {\n       \
    \     col_pos_idx = 0;\n            col_pos_len = 0;\n            col_pos += 1;\n\
    \        }\n        if row_pos_len == row_len {\n            row_pos_idx = 0;\n\
    \            row_pos_len = 0;\n            row_pos += 1;\n        }\n        if\
    \ col_pos_len > col_len {\n            col_pos_idx = 0;\n            col_pos_len\
    \ = 0;\n            col_pos += 1;\n        }\n        if row_pos_len > row_len\
    \ {\n            row_pos_idx = 0;\n            row_pos_len = 0;\n            row_pos\
    \ += 1;\n        }\n        if row_pos_len == row_len && col_pos_len == col_len\
    \ {\n            if row_pos == row_pos_idx {\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_by_key(|&x|\
    \ x.0);\n                row.sort_by_key(|&x| x.1);\n                row.sort_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: usize = 0;\n\
    \    let mut row_len: usize = 0;\n    let mut col_len: usize = 0;\n    let mut\
    \ col_num: usize = 0;\n    let mut col_num2: usize = 0;\n    let mut col_num3:\
    \ usize = 0;\n    let mut col_num4: usize = 0;\n    let mut col_num5: usize =\
    \ 0;\n    let mut col_num6: usize = 0;\n    let mut col_num7: usize = 0;\n   \
    \ let mut col_num8: usize = 0;\n    let mut col_num9: usize = 0;\n    let mut\
    \ col_num10: usize = 0;\n    let mut col_num11: usize = 0;\n    let mut col_num12:\
    \ usize = 0;\n    let mut col_num13: usize = 0;\n    let mut col_num14: usize\
    \ = 0;\n    let mut col_num15: usize = 0;\n    let mut col_num16: usize = 0;\n\
    \    let mut col_num17: usize = 0;\n    let mut col_num18: usize = 0;\n    let\
    \ mut col_num19: usize = 0;\n    let mut col_num20: usize = 0;\n    let mut col_num21:\
    \ usize = 0;\n    let mut col_num22: usize = 0;\n    let mut col_num23: usize\
    \ = 0;\n    let mut col_num24: usize = 0;\n    let mut col_num25: usize = 0;\n\
    \    let mut col_num26: usize = 0;\n    let mut col_num27: usize = 0;\n    let\
    \ mut col_num28: usize = 0;\n    let mut col_num29: usize = 0;\n    let mut col_num30:\
    \ usize = 0;\n    let mut col_num31: usize = 0;\n    let mut col_num32: usize\
    \ = 0;\n    let mut col_num33: usize = 0;\n    let mut col_num34: usize = 0;\n\
    \    let mut col_num35: usize = 0;\n    let mut col_num36: usize = 0;\n    let\
    \ mut col_num37: usize = 0;\n    let mut col_num38: usize = 0;\n    let mut col_num39:\
    \ usize = 0;\n    let mut col_num40: usize = 0;\n    let mut col_num41: usize\
    \ = 0;\n    let mut col_num42: usize = 0;\n    let mut col_num43: u", "    let\
    \ mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        let mut row_coords = vec![];\n        let mut row_cols\
    \ = vec![];\n        for col in row {\n            if col == x {\n           \
    \     row_coords.push((row, col));\n            }\n            row_cols.push((col,\
    \ row));\n        }\n        coords.push(row_coords);\n        rows.push(row_cols);\n\
    \        cols.push(row_cols);\n    }\n    coords.sort_by_key(|x| x.0);\n    rows.sort_by_key(|x|\
    \ x.1);\n    cols.sort_by_key(|x| x.1);\n    coords.iter().map(|x| x.1).collect()",
  "    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        cols.clear();\n        for col in row.iter().cloned()\
    \ {\n            cols.push(col);\n        }\n        rows.push(row);\n       \
    \ coords.extend((row, cols));\n    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    let mut res = vec![];\n    for\
    \ coord in coords.iter() {\n        let row = coord.0.0;\n        let col = coord.0.1;\n\
    \        let mut found = false;\n        for (i, row) in rows.iter().enumerate()\
    \ {\n            if row == coord {\n                found = true;\n          \
    \      res.push((i, col));\n                break;\n            }\n        }\n\
    \        if !found {\n            res.push((row, col));\n        }\n    }\n  \
    \  res", "    let mut result = vec![];\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n\
    \    while row_idx < rows {\n        let mut row_result = vec![];\n        while\
    \ col_idx < cols {\n            if row_idx == rows {\n                row_result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            if col_idx ==\
    \ cols {\n                row_result.push((row_idx, col_idx));\n             \
    \   break;\n            }\n            if lst[row_idx][col_idx] == x {\n     \
    \           row_result.push((row_idx, col_idx));\n                break;\n   \
    \         }\n            col_idx += 1;\n        }\n        result.push(row_result);\n\
    \        row_idx += 1;\n        col_idx = 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ row: Vec<(isize, isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut\
    \ row_len = 0;\n    let mut col_len = 0;\n    let mut col_start = 0;\n    let\
    \ mut col_end = 0;\n    let mut col_start2 = 0;\n    let mut col_end2 = 0;\n \
    \   let mut col_start3 = 0;\n    let mut col_end3 = 0;\n    let mut col_start4\
    \ = 0;\n    let mut col_end4 = 0;\n    let mut col_start5 = 0;\n    let mut col_end5\
    \ = 0;\n    let mut col_start6 = 0;\n    let mut col_end6 = 0;\n    let mut col_start7\
    \ = 0;\n    let mut col_end7 = 0;\n    let mut col_start8 = 0;\n    let mut col_end8\
    \ = 0;\n    let mut col_start9 = 0;\n    let mut col_end9 = 0;\n    let mut col_start10\
    \ = 0;\n    let mut col_end10 = 0;\n    let mut col_start11 = 0;\n    let mut\
    \ col_end11 = 0;\n    let mut col_start12 = 0;\n    let mut col_end12 = 0;\n \
    \   let mut col_start13 = 0;\n    let mut col_end13 = 0;\n    let mut col_start14\
    \ = 0;\n    let mut col_end14 = 0;\n    let mut col_start15 = 0;\n    let mut\
    \ col_end15 = 0;\n    let mut col_start16 = 0;\n    let mut col_end16 = 0;\n \
    \   let mut col_start17 = 0;\n    let mut col_end17 = 0;\n    let mut col_start18\
    \ = 0;\n    let mut col_end18 = 0;\n    let mut col_start19 = 0;\n    let mut\
    \ col_end19 = 0;\n    let mut col_start20 = 0;\n    let mut col_end20 = 0;\n \
    \   let mut col_start21 = 0;\n    let mut col_end21 = 0;\n    let mut col_start22\
    \ = 0;\n    let mut col_end22 = 0;\n    let mut col_start23 = 0;\n    let mut\
    \ col_end23 = 0;\n    let mut col_start24 = 0;\n    let mut col_end24 = 0;\n \
    \   let mut col_start25 = 0;\n    let mut col_end25 = 0;\n    let mut col_start26\
    \ = 0;\n    let mut col_end26 = 0;\n    let mut col_start27 = 0;\n    let mut\
    \ col_end27 = 0;\n    let mut col_start28 = 0;\n    let mut col_end28 = 0;\n \
    \   let mut col_start29 = 0;\n    let mut col_end29 = 0;\n    let mut col_start30\
    \ = 0;\n    let mut col_end30 = 0;\n    let mut ", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_num = 0;\n    for\
    \ row in lst {\n        let mut col_num = 0;\n        for col in row {\n     \
    \       if col == x {\n                row.swap(row_idx, col_num);\n         \
    \       row_idx += 1;\n                col_num += 1;\n            }\n        }\n\
    \    }\n    row.sort_by_key(|&x| x.0);\n    row.sort_by_key(|&x| x.1);\n    row",
  "    let mut coords = vec![];\n    let mut row = 0;\n    let mut col = 0;\n    while\
    \ row < lst.len() {\n        let mut found = false;\n        for coord in coords.iter()\
    \ {\n            if coord.0 == row {\n                if coord.1 == col {\n  \
    \                  found = true;\n                    break;\n               \
    \ }\n                else {\n                    coord.1 += 1;\n             \
    \   }\n            }\n        }\n        if found {\n            break;\n    \
    \    }\n        coords.push((row, col));\n        row += 1;\n        col += 1;\n\
    \    }\n    coords.sort_by_key(|&(_, y)| y.0);\n    coords.sort_by_key(|&(_, y)|\
    \ y.1, |&(_, y)| y.0);\n    coords.iter().map(|&(_, y)| y).collect()", "    let\
    \ mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3: Vec<isize>\
    \ = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut row_idx5:\
    \ Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n    let mut\
    \ row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize> = vec![];\n\
    \    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10: Vec<isize>\
    \ = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut row_idx12:\
    \ Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n    let mut\
    \ row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize> = vec![];\n\
    \    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17: Vec<isize>\
    \ = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut row_idx19:\
    \ Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n    let mut\
    \ row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize> = vec![];\n\
    \    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24: Vec<isize>\
    \ = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut row_idx26:\
    \ Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n    let mut\
    \ row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize> = vec![];\n\
    \    let mut row_idx30: ", "    let mut coords = vec![];\n    let mut rows = vec![];\n\
    \    let mut cols = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n\
    \    let mut row_sorted_idx_idx = vec![];\n    let mut col_sorted_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n  \
    \  let mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_", "    let\
    \ mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_idx = 0;\n \
    \   let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    while row_idx < row_len {\n        let mut row_idx = row_idx;\n\
    \        while col_idx < col_len {\n            if row_idx == row_len {\n    \
    \            row_idx = 0;\n                col_idx += 1;\n            }\n    \
    \        if col_idx == col_len {\n                row_idx += 1;\n            \
    \    col_idx = 0;\n            }\n            if lst[row_idx][col_idx] == x {\n\
    \                let row_idx = row_idx;\n                let col_idx = col_idx;\n\
    \                let row = row_idx;\n                let col = col_idx;\n    \
    \            let row_len = row_len;\n                let col_len = col_len;\n\
    \                let mut row_idx = row_idx;\n                let mut col_idx =\
    \ col_idx;\n                let mut row_len = row_len;\n                let mut\
    \ col_len = col_len;\n                rows.push(row);\n                cols.push(col);\n\
    \            }\n            col_idx += 1;\n        }\n        row_idx += 1;\n\
    \    }\n    rows\n        .iter()\n        .cloned()\n        .sort_by(|a, b|\
    \ a.cmp(b));\n    rows\n        .iter()\n        .cloned()\n        .sort_by(|a,\
    \ b| b.cmp(a));\n    rows\n        .iter()\n        .cloned()\n        .sort_by(|a,\
    \ b| a.cmp(b));\n    rows\n        .iter()\n        .cloned()\n        .map(|row|\
    \ {\n            (\n                row,\n                cols.iter()\n      \
    \              .cloned()\n                    .map(|col| {\n                 \
    \       (\n                            col,\n                            row_idx\n\
    \                                .clone()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                .cloned()\n\
    \                                .cloned()\n                                ",
  "    let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n\
    \        cols.clear();\n        for col in row.iter().cloned() {\n           \
    \ if col == x {\n                cols.push((col, row.len()));\n            }\n\
    \        }\n        rows.push((row.len(), cols.len()));\n    }\n    rows.sort_by_key(|(row,\
    \ _)| row);\n    rows.sort_by_key(|(_, col)| -col);\n    rows", "    let mut coords\
    \ = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n  \
    \  let mut col_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_", "    let\
    \ mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        let mut row_result = vec![];\n        while col_idx < cols {\n  \
    \          if row_idx == row_idx {\n                row_result.push((row_idx,\
    \ col_idx));\n            }\n            if row_idx == row_idx - 1 {\n       \
    \         row_result.push((row_idx, col_idx - 1));\n            }\n          \
    \  if col_idx == cols - 1 {\n                row_result.push((row_idx - 1, col_idx));\n\
    \            }\n            if col_idx == cols - 2 {\n                row_result.push((row_idx\
    \ - 1, col_idx - 1));\n            }\n            col_idx += 1;\n        }\n \
    \       result.push(row_result);\n        row_idx += 1;\n        col_idx = 0;\n\
    \    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&-x));\n    result", "    let mut rows = vec![];\n    let mut cols\
    \ = vec![];\n    for row in lst {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    for col in cols {\n        let mut i = col.iter().cloned().collect::<Vec<_>>();\n\
    \        i.sort_by_key(|&x| x.cmp(&x));\n        i.sort_by_key(|&x| x.cmp(&x));\n\
    \        rows.push((i.iter().cloned().collect::<Vec<_>>(), col.iter().cloned().collect::<Vec<_>>()));\n\
    \    }\n    rows.sort_by_key(|&x| x.1.iter().cloned().collect::<Vec<_>>());\n\
    \    rows.sort_by_key(|&x| x.0.iter().cloned().collect::<Vec<_>>());\n    rows.iter().cloned().collect::<Vec<_>>()\n\
    \        .iter()\n        .filter_map(|&(x, y)| {\n            if x.1.iter().any(|&x|\
    \ x == y) {\n                Some((x.0.iter().cloned().collect::<Vec<_>>(), y.iter().cloned().collect::<Vec<_>>()))\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect()", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    while rows > 0 || cols > 0 {\n        if rows\
    \ > 0 {\n            rows -= 1;\n            coords.push(vec![(rows - 1, cols\
    \ - 1)]);\n        }\n        if cols > 0 {\n            cols -= 1;\n        \
    \    coords.push(vec![(rows - 1, cols - 1)]);\n        }\n    }\n    coords.sort_by_key(|&(_,\
    \ y)| y.0);\n    coords.sort_by_key(|&(_, y)| y.1);\n    let mut coords = coords.iter().map(|&(_,\
    \ y)| y).collect::<Vec<_>>();\n    coords.sort_by_key(|&(_, y)| y.0);\n    coords.sort_by_key(|&(_,\
    \ y)| y.1);\n    coords.iter().map(|&(_, y)| y).collect()", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut\
    \ row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "    let mut result = Vec::new();\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows && col_idx < cols {\n        if lst[row_idx][col_idx] == x {\n\
    \            result.push((row_idx, col_idx));\n            row_idx += 1;\n   \
    \         col_idx += 1;\n        } else {\n            row_idx += 1;\n       \
    \     col_idx += 1;\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n\
    \    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut rows: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n  \
    \      row_len += row.len();\n        row_idx += 1;\n        if row_len == x {\n\
    \            rows.push((row_idx, col_idx));\n            row_len = 0;\n      \
    \      row_idx = 0;\n            col_idx = 0;\n        }\n        for col in row\
    \ {\n            col_len += 1;\n            col_idx += 1;\n            if col_len\
    \ == x {\n                rows.push((row_idx, col_idx));\n                row_len\
    \ = 0;\n                row_idx = 0;\n                col_idx = 0;\n         \
    \   }\n        }\n    }\n    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    rows", "    let mut result = vec![];\n    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n \
    \   let mut col_idx = 0;\n    while row_idx < rows {\n        let mut row_result\
    \ = vec![];\n        while col_idx < cols {\n            if row_idx == rows {\n\
    \                break;\n            }\n            if col_idx == cols {\n   \
    \             break;\n            }\n            if lst[row_idx][col_idx] == x\
    \ {\n                row_result.push((row_idx, col_idx));\n                col_idx++;\n\
    \            }\n            col_idx++;\n        }\n        result.push(row_result);\n\
    \        row_idx++;\n    }\n    result.sort_by_key(|&(_, y)| y);\n    result.sort_by_key(|&(_,\
    \ y)| y, |&(_, y)| -y);\n    result", "    let mut row: Vec<(isize, isize)> =\
    \ vec![];\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut\
    \ col_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n \
    \   let mut row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;\n    let mut\
    \ row_len_idx_min = 0;\n    let mut col_len_idx_max = 0;", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx\
    \ < row_len && col_idx < col_len {\n        if lst[row_idx][col_idx] == x {\n\
    \            row.push((row_idx, col_idx));\n            row_idx += 1;\n      \
    \      col_idx += 1;\n        }\n        if row_idx == row_len - 1 {\n       \
    \     break;\n        }\n        if col_idx == col_len - 1 {\n            break;\n\
    \        }\n        if lst[row_idx][col_idx] > x {\n            row_idx += 1;\n\
    \            col_idx += 1;\n        } else {\n            col_idx += 1;\n    \
    \    }\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| -y.0);\n    row", "    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        cols.push(row.iter().cloned().collect::<Vec<_>>());\n\
    \        rows.push(row.iter().cloned().collect::<Vec<_>>());\n    }\n    sort_rows(&mut\
    \ rows);\n    sort_cols(&mut cols);\n    let mut result = vec![];\n    for row\
    \ in rows {\n        let mut cols = row.iter().cloned().collect::<Vec<_>>();\n\
    \        sort_cols(&mut cols);\n        let mut row_result = vec![];\n       \
    \ for col in cols {\n            if col == x {\n                row_result.push((row,\
    \ col));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result", "    let mut result = vec![];\n    let mut rows = lst.len();\n \
    \   let mut cols = lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    while row_idx < rows {\n        let mut row_result = vec![];\n   \
    \     while col_idx < cols {\n            if row_idx == rows {\n             \
    \   break;\n            }\n            if col_idx == cols {\n                break;\n\
    \            }\n            if lst[row_idx][col_idx] == x {\n                row_result.push((row_idx,\
    \ col_idx));\n                col_idx++;\n            }\n            col_idx++;\n\
    \        }\n        result.push(row_result);\n        row_idx++;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result",
  "    let mut rows = Vec::new();\n    let mut cols = Vec::new();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len {\n        let mut row_start\
    \ = row_idx;\n        let mut row_end = row_idx;\n        while row_end < row_len\
    \ && row_end - row_start < col_len {\n            row_end = row_end + 1;\n   \
    \     }\n        let mut col_start = col_idx;\n        let mut col_end = col_idx;\n\
    \        while col_end < col_len && col_end - col_start < row_len {\n        \
    \    col_end = col_end + 1;\n        }\n        if row_end == row_len {\n    \
    \        rows.push((row_start, row_start));\n            cols.push((col_start,\
    \ col_start));\n            row_idx = row_start + 1;\n            col_idx = col_start\
    \ + 1;\n        } else {\n            rows.push((row_start, row_end));\n     \
    \       cols.push((col_start, col_end));\n            row_idx = row_end + 1;\n\
    \            col_idx = col_end + 1;\n        }\n    }\n    rows\n        .iter()\n\
    \        .sort_by(|a, b| a.0 as isize - b.0 as isize)\n        .sort_by(|a, b|\
    \ b.1 as isize - a.1 as isize);\n    rows\n        .iter()\n        .map(|a| a.1.clone())\n\
    \        .collect()", "    let mut row: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx: Vec<isize> = vec![];\n    let mut row_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_",
  "    let mut coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n\
    \    for row in lst {\n        cols.clear();\n        for col in row.iter().cloned()\
    \ {\n            if col == x {\n                coords.push((row, col));\n   \
    \             cols.push(col);\n            }\n        }\n        rows.push(coords);\n\
    \        coords.clear();\n    }\n    rows.sort_by(|a, b| a.iter().cmp(b.iter()).reverse());\n\
    \    rows.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n    rows", "    let\
    \ mut coords = vec![];\n    let mut rows = vec![];\n    for row in lst {\n   \
    \     let mut cols = vec![];\n        for col in row {\n            if col ==\
    \ x {\n                coords.push((row, col));\n            }\n            cols.push(col);\n\
    \        }\n        rows.push(cols);\n    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.reverse();\n    rows",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_num = 0;\n    for row in lst {\n        let mut col_num = 0;\n     \
    \   for col in row {\n            if col == x {\n                row.swap(0, col_num);\n\
    \                row.swap(col_num, row.len());\n                row_idx += 1;\n\
    \            }\n            col_num += 1;\n        }\n    }\n    row.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    row.sort_by_key(|&(_, y)| y.cmp(&x));\n    row", "    let\
    \ mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_idx = 0;\n \
    \   let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    while row_idx < row_len {\n        let mut row_idx = row_idx;\n\
    \        while col_idx < col_len {\n            if row_idx == row_len {\n    \
    \            row_idx = 0;\n                col_idx = 0;\n            }\n     \
    \       if col_idx == col_len {\n                col_idx = 0;\n            }\n\
    \            if lst[row_idx][col_idx] == x {\n                rows.push(row_idx);\n\
    \                cols.push(col_idx);\n                break;\n            }\n\
    \            col_idx += 1;\n        }\n        row_idx += 1;\n    }\n    rows.sort_by_key(|x|\
    \ x.0);\n    cols.sort_by_key(|x| x.0);\n    rows.reverse();\n    cols.reverse();\n\
    \    rows.iter().map(|x| (x, cols[x])).collect()", "    let mut rows: Vec<(isize,\
    \ isize)> = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut row_len = 0;\n    let mut col_len = 0;\n    for row in lst {\n  \
    \      row_len += row.len();\n        if row_idx >= row_len {\n            break;\n\
    \        }\n        for col in row {\n            col_len += 1;\n            if\
    \ col_idx >= col_len {\n                break;\n            }\n            if\
    \ col == x {\n                rows.push((row_idx, col_idx));\n               \
    \ row_idx += 1;\n                col_idx = 0;\n            } else {\n        \
    \        col_idx += 1;\n            }\n        }\n    }\n    rows\n        .into_iter()\n\
    \        .sort_by(|a, b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0));",
  "    let mut rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n\
    \        cols.clear();\n        for col in row {\n            if col == x {\n\
    \                cols.push((col, row.len()));\n            }\n        }\n    \
    \    rows.push((row.len(), cols.len()));\n    }\n    sort_rows(&mut rows);\n \
    \   sort_cols(&mut cols);\n    rows", "    let mut row: Vec<(isize, isize)> =\
    \ Vec::new();\n    let mut row_sorted = Vec::new();\n    let mut col_sorted =\
    \ Vec::new();\n    let mut row_sorted_idx = Vec::new();\n    let mut col_sorted_idx\
    \ = Vec::new();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut\
    \ row_idx2 = 0;\n    let mut col_idx2 = 0;\n    let mut row_idx3 = 0;\n    let\
    \ mut col_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut col_idx4 = 0;\n  \
    \  let mut row_idx5 = 0;\n    let mut col_idx5 = 0;\n    let mut row_idx6 = 0;\n\
    \    let mut col_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut col_idx7 =\
    \ 0;\n    let mut row_idx8 = 0;\n    let mut col_idx8 = 0;\n    let mut row_idx9\
    \ = 0;\n    let mut col_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut col_idx10\
    \ = 0;\n    let mut row_idx11 = 0;\n    let mut col_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut col_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut col_idx13\
    \ = 0;\n    let mut row_idx14 = 0;\n    let mut col_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut col_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut col_idx16\
    \ = 0;\n    let mut row_idx17 = 0;\n    let mut col_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut col_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut col_idx19\
    \ = 0;\n    let mut row_idx20 = 0;\n    let mut col_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut col_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut col_idx22\
    \ = 0;\n    let mut row_idx23 = 0;\n    let mut col_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut col_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut col_idx25\
    \ = 0;\n    let mut row_idx26 = 0;\n    let mut col_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut col_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut col_idx28\
    \ = 0;\n    let mut row_idx29 = 0;\n    let mut col", "    let mut result = Vec::new();\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_max = rows;\n    let\
    \ mut col_max = cols;\n    while row_idx < rows && col_idx < cols {\n        if\
    \ row_idx == rows {\n            result.push((row_idx, col_idx));\n          \
    \  break;\n        }\n        if col_idx == cols {\n            result.push((row_idx,\
    \ col_idx));\n            break;\n        }\n        if lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx++;\n\
    \            col_idx++;\n        } else if lst[row_idx][col_idx] > x {\n     \
    \       row_idx++;\n        } else {\n            col_idx++;\n        }\n    }\n\
    \    if row_idx == rows {\n        result.push((row_idx, col_idx));\n    }\n \
    \   if col_idx == cols {\n        result.push((row_idx, col_idx));\n    }\n  \
    \  result.sort_by(|a, b| a.1.cmp(&b.1));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut result = vec![];\n    for row in lst {\n        let\
    \ mut row_result = vec![];\n        for el in row {\n            if el == x {\n\
    \                row_result.push((row, el));\n            }\n        }\n     \
    \   result.push(row_result);\n    }\n    result.sort_by_key(|el| el.0);\n    result.sort_by_key(|el|\
    \ -el.1);\n    result", "    let mut rows: Vec<(isize, isize)> = Vec::new();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start = 0;\n    let mut\
    \ col_start = 0;\n    while row_idx < row_len {\n        let mut row_end = row_start;\n\
    \        while col_idx < col_len {\n            if row_end == row_idx {\n    \
    \            row_end = 0;\n            }\n            if row_end == row_idx {\n\
    \                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_end == row_idx\
    \ {\n                row_end = 0;\n            }\n            if row_", "    let\
    \ mut result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n \
    \   let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    let\
    \ mut row_start = 0;\n    let mut col_start = 0;\n    while row_idx < row_len\
    \ {\n        let mut row_end = row_idx;\n        while row_end < row_len && row_idx\
    \ == row_end {\n            row_end++;\n        }\n        let mut col_end = col_idx;\n\
    \        while col_end < col_len && col_idx == col_end {\n            col_end++;\n\
    \        }\n        if row_end == row_idx {\n            result.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            col_idx = 1;\n          \
    \  row_start = row_idx;\n            col_start = col_idx;\n        } else {\n\
    \            let mut row_end = row_idx;\n            while row_end < row_len &&\
    \ row_idx == row_end {\n                row_end++;\n            }\n          \
    \  let mut col_end = col_idx;\n            while col_end < col_len && col_idx\
    \ == col_end {\n                col_end++;\n            }\n            let mut\
    \ row_start = row_idx;\n            let mut col_start = col_idx;\n           \
    \ while row_start < row_end && col_idx == col_start {\n                row_start++;\n\
    \                col_start++;\n            }\n            let mut row_end = row_idx;\n\
    \            while row_end < row_len && row_idx == row_end {\n               \
    \ row_end++;\n            }\n            let mut col_end = col_idx;\n        \
    \    while col_end < col_len && col_idx == col_end {\n                col_end++;\n\
    \            }\n            let mut row_start = row_idx;\n            let mut\
    \ col_start = col_idx;\n            while row_start < row_end && col_start ==\
    \ col_end {\n                row_start++;\n                col_start++;\n    \
    \        }\n            result.push((row_start, col_start));\n            row_idx\
    \ += 1;\n            col_idx = 1;\n        }\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ rows = vec![];\n    let mut cols = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row = vec![];\n        while col_idx\
    \ < col_len {\n            if lst[row_idx][col_idx] == x {\n                row.push((row_idx,\
    \ col_idx));\n                col_idx += 1;\n            } else {\n          \
    \      col_idx += 1;\n            }\n        }\n        rows.push(row);\n    \
    \    row_idx += 1;\n        col_idx = 0;\n        col_len = lst[0].len();\n  \
    \  }\n    rows", "    let mut result = vec![];\n    let mut row_idx = 1;\n   \
    \ let mut col_idx = 1;\n    let mut row_len = lst.len();\n    let mut col_len\
    \ = lst[0].len();\n    while row_idx < row_len {\n        let mut row_result =\
    \ vec![];\n        let mut col_result = vec![];\n        while col_idx < col_len\
    \ {\n            if row_idx == row_len {\n                row_result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            if col_idx ==\
    \ col_len {\n                col_result.push((row_idx, col_idx));\n          \
    \      break;\n            }\n            if lst[row_idx][col_idx] == x {\n  \
    \              row_result.push((row_idx, col_idx));\n                col_result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx += 1;\n\
    \        }\n        result.push(row_result);\n        col_idx = 1;\n        row_idx\
    \ += 1;\n    }\n    result.sort_by_key(|&(_, y)| y);\n    result.sort_by_key(|&(_,\
    \ y)| y, |&(_, y)| -y);\n    result", "    let mut coords = vec![];\n    let mut\
    \ rows = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        cols.clear();\n\
    \        for col in row.iter().cloned() {\n            if col == x {\n       \
    \         coords.push((row, col));\n                cols.push(col);\n        \
    \    }\n        }\n        rows.push(coords.iter().cloned().collect::<Vec<_>>());\n\
    \        coords.clear();\n    }\n    rows.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    rows.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n    rows"]
stop_tokens:
- "\n}"
