HumanEval_160_do_algebra: 24
==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ((operator operator)
             (operand operand)
             (result (car operand)))
    (if (null? operator)
        result
        (loop (cdr operator)
              (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp6y9l5t5w.rkt:41:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp6y9l5t5w.rkt:42:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp6y9l5t5w.rkt:43:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (match operator
      [(list) result]
      [(list op rest ...)
       (loop rest (cdr operand)
             (match op
               ['+ (+ result (cadr operand))]
               ['* (* result (cadr operand))]
               ['- (- result (cadr operand))]
               ['// (quotient result (cadr operand))]
               ['** (expt result (cadr operand))]))])))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp9gyzwn6g.rkt:39:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp9gyzwn6g.rkt:40:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp9gyzwn6g.rkt:41:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (cond [(null? operator) result]
          [else (loop (cdr operator) (cdr operand)
                      (match (car operator)
                             ['+ (+ result (car operand))]
                             ['* (* result (car operand))]
                             ['- (- result (car operand))]
                             ['// (quotient result (car operand))]
                             ['** (expt result (car operand))]))])))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp9qswclz_.rkt:37:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp9qswclz_.rkt:38:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp9qswclz_.rkt:39:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (cond [(null? operator) result]
          [else (loop (cdr operator) (cdr operand)
                      (match (car operator)
                        ['+ (+ result (car operand))]
                        ['* (* result (car operand))]
                        ['- (- result (car operand))]
                        ['// (quotient result (car operand))]
                        ['** (expt result (car operand))]))])))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd74dv5le.rkt:37:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd74dv5le.rkt:38:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd74dv5le.rkt:39:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator)
              (cdr operand)
              (match (car operator)
                     ['+ (+ result (car operand))]
                     ['* (* result (car operand))]
                     ['- (- result (car operand))]
                     ['// (quotient result (car operand))]
                     ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmphja13_72.rkt:39:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmphja13_72.rkt:40:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmphja13_72.rkt:41:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator)
              (cdr operand)
              (match (car operator)
                     ['+ (+ result (car operand))]
                     ['* (* result (car operand))]
                     ['- (- result (car operand))]
                     ['// (quotient result (car operand))]
                     ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmphja13_72.rkt:39:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmphja13_72.rkt:40:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmphja13_72.rkt:41:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [acc (car operand)])
    (if (null? operator)
        acc
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ acc (car operand))]
                ['* (* acc (car operand))]
                ['- (- acc (car operand))]
                ['// (floor (/ acc (car operand))) ]
                ['** (expt acc (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpkaiyf0av.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpkaiyf0av.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpkaiyf0av.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (if (null? operator)
        result
        (loop (cdr operator) (cdr operand)
              (match (car operator)
                ['+ (+ result (car operand))]
                ['* (* result (car operand))]
                ['- (- result (car operand))]
                ['// (quotient result (car operand))]
                ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:38:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:39:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqpxvkkn8.rkt:40:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (cond [(empty? operator) result]
          [else (loop (cdr operator) (cdr operand)
                      (match (car operator)
                             ['+ (+ result (car operand))]
                             ['* (* result (car operand))]
                             ['- (- result (car operand))]
                             ['// (quotient result (car operand))]
                             ['** (expt result (car operand))]))])))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqvrgyaf9.rkt:37:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqvrgyaf9.rkt:38:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpqvrgyaf9.rkt:39:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ((operator operator)
             (operand operand)
             (result (car operand)))
    (if (null? operator)
        result
        (loop (cdr operator)
              (cdr operand)
              (match (car operator)
                     ['+ (+ result (car operand))]
                     ['* (* result (car operand))]
                     ['- (- result (car operand))]
                     ['// (quotient result (car operand))]
                     ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpt1tlvhy8.rkt:41:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpt1tlvhy8.rkt:42:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpt1tlvhy8.rkt:43:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ((operator operator)
             (operand operand)
             (result (car operand)))
    (if (null? operator)
        result
        (loop (cdr operator)
              (cdr operand)
              (match (car operator)
                     ['+ (+ result (car operand))]
                     ['* (* result (car operand))]
                     ['- (- result (car operand))]
                     ['// (quotient result (car operand))]
                     ['** (expt result (car operand))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpt1tlvhy8.rkt:41:4

match: no matching clause for "**"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpt1tlvhy8.rkt:42:4

match: no matching clause for "+"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpt1tlvhy8.rkt:43:4

match: no matching clause for "//"
--------------------

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (define (do_algebra_helper operator operand result)
    (if (null? operator)
        result
        (do_algebra_helper (cdr operator) (cdr operand)
                           (match (car operator)
                                  [('+ (car operand) result)]
                                  [('- (car operand) result)]
                                  [('* (car operand) result)]
                                  [('// (car operand) result)]
                                  [('** (car operand) result)]))))
  (do_algebra_helper operator operand (car operand)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp4uoxw456.rkt:27:34: match: expected at least one expression on the right-hand side
  in: ((((quote +) (car operand) result)))
  location...:
   /tmp/tmp4uoxw456.rkt:27:34
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:23:0: go

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (define (do_algebra_iter operator operand acc)
    (if (empty? operator)
        acc
        (do_algebra_iter (rest operator) (rest operand)
                         (match (first operator)
                                [('+ (first operand) (second operand))]
                                [('- (first operand) (second operand))]
                                [('* (first operand) (second operand))]
                                [('// (first operand) (second operand))]
                                [('** (first operand) (second operand))]))))
  (do_algebra_iter operator operand (first operand)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp6vyxgqgr.rkt:27:32: match: expected at least one expression on the right-hand side
  in: ((((quote +) (first operand) (second operand))))
  location...:
   /tmp/tmp6vyxgqgr.rkt:27:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:23:0: go

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (cond [(null? operator) result]
          [else (loop (cdr operator) (cdr operand)
                      (match (car operator)
                             [('+ ) (+ result (car operand))]
                             [('- ) (- result (car operand))]
                             [('* ) (* result (car operand))]
                             [('// ) (quotient result (car operand))]
                             [('** ) (expt result (car operand))]))])))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpbyiwg_mc.rkt:26:30: match: syntax error in pattern
  in: ((quote +))
  location...:
   /tmp/tmpbyiwg_mc.rkt:26:30
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:53:11: mk
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:23:0: go

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (cond [(null? operator) result]
          [else (loop (cdr operator) (cdr operand)
                      (match (car operator)
                             [('+ ) (+ result (car operand))]
                             [('- ) (- result (car operand))]
                             [('* ) (* result (car operand))]
                             [('// ) (quotient result (car operand))]
                             [('** ) (expt result (car operand))]))])))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpbyiwg_mc.rkt:26:30: match: syntax error in pattern
  in: ((quote +))
  location...:
   /tmp/tmpbyiwg_mc.rkt:26:30
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:53:11: mk
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:23:0: go

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([operator operator] [operand operand] [result (car operand)])
    (cond [(null? operator) result]
          [else (loop (cdr operator) (cdr operand)
                      (match (car operator)
                             [('+ ) (+ result (car operand))]
                             [('- ) (- result (car operand))]
                             [('* ) (* result (car operand))]
                             [('// ) (quotient result (car operand))]
                             [('** ) (expt result (car operand))]))])))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpbyiwg_mc.rkt:26:30: match: syntax error in pattern
  in: ((quote +))
  location...:
   /tmp/tmpbyiwg_mc.rkt:26:30
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:53:11: mk
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:23:0: go

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (define (do_algebra_iter operator operand result)
    (if (null? operator)
        result
        (do_algebra_iter (cdr operator) (cdr operand)
                         (match (car operator)
                                [("+") (+ result (car operand))]
                                [("-") (- result (car operand))]
                                [("*") (* result (car operand))]
                                [("//") (quotient result (car operand))]
                                [("**") (expt result (car operand))]))))
  (do_algebra_iter operator operand (car operand)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpfdg_0g7_.rkt:27:33: match: syntax error in pattern
  in: ("+")
  location...:
   /tmp/tmpfdg_0g7_.rkt:27:33
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:53:11: mk
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:23:0: go

==========================
------- Program HumanEval_160_do_algebra --------
#lang racket

;; Given two lists operator, and operand. The first list has basic algebra operations, and 
;; the second list is a list of integers. Use the two given lists to build the algebric 
;; expression and return the evaluation of this expression.
;; The basic algebra operations:
;; Addition ( + ) 
;; Subtraction ( - ) 
;; Multiplication ( * ) 
;; Floor division ( // ) 
;; Exponentiation ( ** ) 
;; Example:
;; operator['+', '*', '-']
;; list = [2, 3, 4, 5]
;; result = 2 + 3 * 4 - 5
;; => result = 9
;; Note:
;; The length of operator list is equal to the length of operand list minus one.
;; Operand is a list of of non-negative integers.
;; Operator list has at least one operator, and operand list has at least two operands.
(define (do_algebra operator operand)
  (let loop ([op operator] [opd operand] [result (car opd)])
    (if (null? op)
        result
        (loop (cdr op) (cdr opd) (match (car op)
                                        [('+) (+ result (car opd))]
                                        [('-) (- result (car opd))]
                                        [('*) (* result (car opd))]
                                        [('//) (quotient result (car opd))]
                                        [('**) (expt result (car opd))])))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate do_algebra))
    (check-equal? (candidate (list "**" "*" "+") (list 2 3 4 5)) 37)
    (check-equal? (candidate (list "+" "*" "-") (list 2 3 4 5)) 9)
    (check-equal? (candidate (list "//" "*") (list 7 3 4)) 8)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpk2zdwp5s.rkt:26:41: match: syntax error in pattern
  in: ((quote +))
  location...:
   /tmp/tmpk2zdwp5s.rkt:26:41
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:53:11: mk
   /work/arjunguha-research-group/software/racket/collects/racket/match/gen-match.rkt:23:0: go

