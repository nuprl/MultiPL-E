HumanEval_162_string_to_md5: 3
HumanEval_111_histogram: 4
==========================
------- Program HumanEval_162_string_to_md5 --------
#lang racket

;; Given a string 'text', return its md5 hash equivalent string.
;; If 'text' is an empty string, return #f.
;; >>> (string_to_md5 "Hello world")
;; "3e25960a79dbc69b674cd4ec67a72c62"
(define (string_to_md5 text)
  (if (string=? text "")
      #f
      (hash-ref (hash "md5" text) 'digest)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate string_to_md5))
    (check-equal? (candidate "Hello world") "3e25960a79dbc69b674cd4ec67a72c62")
    (check-equal? (candidate "") #f)
    (check-equal? (candidate "A B C") "0ef78513b0cb8cef12743f5aeb35f888")
    (check-equal? (candidate "password") "5f4dcc3b5aa765d61d8327deb882cf99")
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:17:4

hash-ref: no value found for key
  key: 'digest
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:19:4

hash-ref: no value found for key
  key: 'digest
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:20:4

hash-ref: no value found for key
  key: 'digest
--------------------

==========================
------- Program HumanEval_162_string_to_md5 --------
#lang racket

;; Given a string 'text', return its md5 hash equivalent string.
;; If 'text' is an empty string, return #f.
;; >>> (string_to_md5 "Hello world")
;; "3e25960a79dbc69b674cd4ec67a72c62"
(define (string_to_md5 text)
  (if (string=? text "")
      #f
      (hash-ref (hash "md5" text) 'digest)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate string_to_md5))
    (check-equal? (candidate "Hello world") "3e25960a79dbc69b674cd4ec67a72c62")
    (check-equal? (candidate "") #f)
    (check-equal? (candidate "A B C") "0ef78513b0cb8cef12743f5aeb35f888")
    (check-equal? (candidate "password") "5f4dcc3b5aa765d61d8327deb882cf99")
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:17:4

hash-ref: no value found for key
  key: 'digest
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:19:4

hash-ref: no value found for key
  key: 'digest
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:20:4

hash-ref: no value found for key
  key: 'digest
--------------------

==========================
------- Program HumanEval_162_string_to_md5 --------
#lang racket

;; Given a string 'text', return its md5 hash equivalent string.
;; If 'text' is an empty string, return #f.
;; >>> (string_to_md5 "Hello world")
;; "3e25960a79dbc69b674cd4ec67a72c62"
(define (string_to_md5 text)
  (if (string=? text "")
      #f
      (hash-ref (hash "md5" text) 'digest)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate string_to_md5))
    (check-equal? (candidate "Hello world") "3e25960a79dbc69b674cd4ec67a72c62")
    (check-equal? (candidate "") #f)
    (check-equal? (candidate "A B C") "0ef78513b0cb8cef12743f5aeb35f888")
    (check-equal? (candidate "password") "5f4dcc3b5aa765d61d8327deb882cf99")
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:17:4

hash-ref: no value found for key
  key: 'digest
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:19:4

hash-ref: no value found for key
  key: 'digest
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0cjcm8mu.rkt:20:4

hash-ref: no value found for key
  key: 'digest
--------------------

==========================
------- Program HumanEval_111_histogram --------
#lang racket

;; Given a string representing a space separated lowercase letters, return a hash
;; of the letter with the most repetition and containing the corresponding count.
;; If several letters have the same occurrence, return all of them.
;; Example:
;; >>> (histogram "a b c")
;; #hash(("a" .  1) ("b" .  1) ("c" .  1))
;; >>> (histogram "a b b a")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "a b c a b")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "b b b b a")
;; #hash(("b" .  4))
;; >>> (histogram "")
;; #hash()
(define (histogram test)
  (define (histogram-helper test result)
    (cond
      [(empty? test) result]
      [else
       (define (update-result letter)
         (define (update-result-helper result)
           (cond
             [(empty? result) (hash letter 1)]
             [(equal? (hash-ref result letter) #f) (hash-set result letter 1)]
             [else (hash-set result letter (+ 1 (hash-ref result letter)))]))
         (update-result-helper result))
       (histogram-helper (rest test) (update-result (first test)))]))
  (histogram-helper (string->list test) (hash)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate histogram))
    (check-equal? (candidate "a b b a") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c a b") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c d g") #hash(("a" .  1) ("b" .  1) ("c" .  1) ("d" .  1) ("g" .  1)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "b b b b a") #hash(("b" .  4)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "") #hash())
    (check-equal? (candidate "a") #hash(("a" .  1)))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0k7dy6hb.rkt:37:4

hash-ref: no value found for key
  key: #\a
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0k7dy6hb.rkt:38:4

hash-ref: no value found for key
  key: #\a
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0k7dy6hb.rkt:39:4

hash-ref: no value found for key
  key: #\a
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0k7dy6hb.rkt:40:4

hash-ref: no value found for key
  key: #\r
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0k7dy6hb.rkt:41:4

hash-ref: no value found for key
  key: #\b
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0k7dy6hb.rkt:42:4

hash-ref: no value found for key
  key: #\r
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp0k7dy6hb.rkt:44:4

hash-ref: no value found for key
  key: #\a
--------------------

==========================
------- Program HumanEval_111_histogram --------
#lang racket

;; Given a string representing a space separated lowercase letters, return a hash
;; of the letter with the most repetition and containing the corresponding count.
;; If several letters have the same occurrence, return all of them.
;; Example:
;; >>> (histogram "a b c")
;; #hash(("a" .  1) ("b" .  1) ("c" .  1))
;; >>> (histogram "a b b a")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "a b c a b")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "b b b b a")
;; #hash(("b" .  4))
;; >>> (histogram "")
;; #hash()
(define (histogram test)
  (define (histogram-helper test count)
    (cond
      [(empty? test) count]
      [(hash-ref count (first test) (lambda () 0))
       (histogram-helper (rest test) (hash-set count (first test) (+ 1 (hash-ref count (first test)))))]
      [else (histogram-helper (rest test) (hash-set count (first test) 1))]))
  (histogram-helper (string-split test) (make-hash)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate histogram))
    (check-equal? (candidate "a b b a") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c a b") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c d g") #hash(("a" .  1) ("b" .  1) ("c" .  1) ("d" .  1) ("g" .  1)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "b b b b a") #hash(("b" .  4)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "") #hash())
    (check-equal? (candidate "a") #hash(("a" .  1)))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:31:4

hash-ref: no value found for key
  key: "a"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:32:4

hash-ref: no value found for key
  key: "a"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:33:4

hash-ref: no value found for key
  key: "a"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:34:4

hash-ref: no value found for key
  key: "r"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:35:4

hash-ref: no value found for key
  key: "b"
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:36:4

hash-ref: no value found for key
  key: "r"
--------------------
--------------------
FAILURE
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:37:4
actual:     '#hash()
expected:   '#hash()
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp7gjzx6x1.rkt:38:4

hash-ref: no value found for key
  key: "a"
--------------------

==========================
------- Program HumanEval_111_histogram --------
#lang racket

;; Given a string representing a space separated lowercase letters, return a hash
;; of the letter with the most repetition and containing the corresponding count.
;; If several letters have the same occurrence, return all of them.
;; Example:
;; >>> (histogram "a b c")
;; #hash(("a" .  1) ("b" .  1) ("c" .  1))
;; >>> (histogram "a b b a")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "a b c a b")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "b b b b a")
;; #hash(("b" .  4))
;; >>> (histogram "")
;; #hash()
(define (histogram test)
  (define (histogram-helper test max-count)
    (cond
      [(empty? test) (hash)]
      [(>= (hash-ref (histogram-helper (rest test) max-count) (first test) 0) max-count)
       (hash-update (histogram-helper (rest test) max-count) (first test) add1)]
      [else (hash-update (histogram-helper (rest test) max-count) (first test) add1)]))
  (histogram-helper (string->list test) 0))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate histogram))
    (check-equal? (candidate "a b b a") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c a b") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c d g") #hash(("a" .  1) ("b" .  1) ("c" .  1) ("d" .  1) ("g" .  1)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "b b b b a") #hash(("b" .  4)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "") #hash())
    (check-equal? (candidate "a") #hash(("a" .  1)))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd8_9evn5.rkt:31:4

hash-update: no value found for key: #\a
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd8_9evn5.rkt:32:4

hash-update: no value found for key: #\b
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd8_9evn5.rkt:33:4

hash-update: no value found for key: #\g
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd8_9evn5.rkt:34:4

hash-update: no value found for key: #\g
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd8_9evn5.rkt:35:4

hash-update: no value found for key: #\a
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd8_9evn5.rkt:36:4

hash-update: no value found for key: #\g
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd8_9evn5.rkt:38:4

hash-update: no value found for key: #\a
--------------------

==========================
------- Program HumanEval_111_histogram --------
#lang racket

;; Given a string representing a space separated lowercase letters, return a hash
;; of the letter with the most repetition and containing the corresponding count.
;; If several letters have the same occurrence, return all of them.
;; Example:
;; >>> (histogram "a b c")
;; #hash(("a" .  1) ("b" .  1) ("c" .  1))
;; >>> (histogram "a b b a")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "a b c a b")
;; #hash(("a" .  2) ("b" .  2))
;; >>> (histogram "b b b b a")
;; #hash(("b" .  4))
;; >>> (histogram "")
;; #hash()
(define (histogram test)
  (define (histogram-helper test max-count)
    (cond [(empty? test) (hash)]
          [(hash-has-key? (histogram-helper (rest test) max-count) (first test))
           (hash-update (histogram-helper (rest test) max-count) (first test) add1)]
          [else (hash-update (histogram-helper (rest test) max-count) (first test) add1)]))
  (histogram-helper (string->list test) 0))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate histogram))
    (check-equal? (candidate "a b b a") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c a b") #hash(("a" .  2) ("b" .  2)))
    (check-equal? (candidate "a b c d g") #hash(("a" .  1) ("b" .  1) ("c" .  1) ("d" .  1) ("g" .  1)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "b b b b a") #hash(("b" .  4)))
    (check-equal? (candidate "r t g") #hash(("r" .  1) ("t" .  1) ("g" .  1)))
    (check-equal? (candidate "") #hash())
    (check-equal? (candidate "a") #hash(("a" .  1)))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpstcsxzdt.rkt:30:4

hash-update: no value found for key: #\a
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpstcsxzdt.rkt:31:4

hash-update: no value found for key: #\b
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpstcsxzdt.rkt:32:4

hash-update: no value found for key: #\g
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpstcsxzdt.rkt:33:4

hash-update: no value found for key: #\g
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpstcsxzdt.rkt:34:4

hash-update: no value found for key: #\a
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpstcsxzdt.rkt:35:4

hash-update: no value found for key: #\g
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpstcsxzdt.rkt:37:4

hash-update: no value found for key: #\a
--------------------

