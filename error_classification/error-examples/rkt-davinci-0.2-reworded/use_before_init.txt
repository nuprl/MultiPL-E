HumanEval_4_mean_absolute_deviation: 10
HumanEval_21_rescale_to_unit: 1
HumanEval_9_rolling_max: 1
==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define abs-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean abs-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp_mj7viua.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp_mj7viua.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmp_mj7viua.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))
  (mean absolute-differences))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpccl74ikt.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_21_rescale_to_unit --------
#lang racket

;; Given list of numbers (of at least two elements), apply a linear transform to that list,
;; such that the smallest number will become 0 and the largest will become 1
;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))
;; (list 0.0 0.25 0.5 0.75 1.0)
(define (rescale_to_unit numbers)
  (define min (apply min numbers))
  (define max (apply max numbers))
  (define range (- max min))
  (map (lambda (x) (/ (- x min) range)) numbers))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate rescale_to_unit))
    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))
    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))
    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))
    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd34l7f4r.rkt:18:4

min: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd34l7f4r.rkt:19:4

min: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd34l7f4r.rkt:20:4

min: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd34l7f4r.rkt:21:4

min: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpd34l7f4r.rkt:22:4

min: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_9_rolling_max --------
#lang racket

;; From a given list of integers, generate a list of rolling maximum element found until given moment
;; in the sequence.
;; >>> (rolling_max (list 1 2 3 2 3 4 2))
;; (list 1 2 3 3 3 4 4)
(define (rolling_max numbers)
  (define (rolling_max_iter numbers maxes)
    (cond
      [(empty? numbers) (reverse maxes)]
      [else
       (define current (first numbers))
       (define max (if (empty? maxes) current (max current (first maxes))))
       (rolling_max_iter (rest numbers) (cons max maxes))]))
  (rolling_max_iter numbers (list)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate rolling_max))
    (check-equal? (candidate (list )) (list ))
    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))
    (check-equal? (candidate (list 4 3 2 1)) (list 4 4 4 4))
    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpun76y2l6.rkt:23:4

max: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpun76y2l6.rkt:24:4

max: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpun76y2l6.rkt:25:4

max: undefined;
 cannot use before initialization
--------------------

==========================
------- Program HumanEval_4_mean_absolute_deviation --------
#lang racket

;; For a given list of input numbers, calculate Mean Absolute Deviation
;; around the mean of this dataset.
;; Mean Absolute Deviation is the average absolute difference between each
;; element and a centerpoint (mean in this case):
;; MAD = average | x - x_mean |
;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))
;; 1.0
(define (mean_absolute_deviation numbers)
  (define mean (mean numbers))
  (define deviations (map (lambda (x) (abs (- x mean))) numbers))
  (mean deviations))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate mean_absolute_deviation))
    (check-equal? (candidate (list 1.0 2.0)) 0.5)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)
    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpur_vk6gw.rkt:20:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpur_vk6gw.rkt:21:4

mean: undefined;
 cannot use before initialization
--------------------
--------------------
ERROR
name:       check-equal?
location:   /tmp/tmpur_vk6gw.rkt:22:4

mean: undefined;
 cannot use before initialization
--------------------

