HumanEval_114_minSubArraySum: 55
HumanEval_129_minPath: 2
==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) 0) (minSubArraySum' (rest nums) (min min-sum (first nums))) ]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp0w2u813t.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) 0) (minSubArraySum (quote (rest nums)) (min min-sum (first nums)))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmp0w2u813t.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(null? nums) min-sum]
          [(< (car nums) 0) (minSubArraySum' (cdr nums) min-sum)]
          [else (minSubArraySum' (cdr nums) (min min-sum (car nums)))]))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp1ezgjnps.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((< (car nums) 0) (minSubArraySum (quote (cdr nums)) min-sum)) (else (minSubArraySum (quote (cdr nums)) (min min-sum (car nums))))))
  location...:
   /tmp/tmp1ezgjnps.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSum)
    (cond
      [(empty? nums) minSum]
      [(< (car nums) 0) (minSubArraySum' (cdr nums) (min minSum (car nums)))
       (minSubArraySum' (cdr nums) minSum)]))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp30uxtlvn.rkt:11:32: define: default-value expression missing
  at: minSum
  in: (define (minSubArraySum (quote nums) minSum) (cond ((empty? nums) minSum) ((< (car nums) 0) (minSubArraySum (quote (cdr nums)) (min minSum (car nums))) (minSubArraySum (quote (cdr nums)) minSum))))
  location...:
   /tmp/tmp30uxtlvn.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(null? nums) min-sum]
      [(< (car nums) 0) (minSubArraySum' (cdr nums) min-sum)]
      [else (minSubArraySum' (cdr nums) (min min-sum (car nums)))]))
  (minSubArraySum' nums (min (car nums) 0)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp3ylr3_l2.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((< (car nums) 0) (minSubArraySum (quote (cdr nums)) min-sum)) (else (minSubArraySum (quote (cdr nums)) (min min-sum (car nums))))))
  location...:
   /tmp/tmp3ylr3_l2.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(null? nums) min-sum]
      [(< (car nums) 0) (minSubArraySum' (cdr nums) min-sum)]
      [else (minSubArraySum' (cdr nums) (min min-sum (car nums)))]))
  (minSubArraySum' nums (min (car nums) 0)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp3ylr3_l2.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((< (car nums) 0) (minSubArraySum (quote (cdr nums)) min-sum)) (else (minSubArraySum (quote (cdr nums)) (min min-sum (car nums))))))
  location...:
   /tmp/tmp3ylr3_l2.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(empty? nums) min-sum]
          [(< (car nums) 0) (minSubArraySum' (cdr nums) (min min-sum (car nums))) ]
          [else (minSubArraySum' (cdr nums) min-sum)]))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp5wxg4aix.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (car nums) 0) (minSubArraySum (quote (cdr nums)) (min min-sum (car nums)))) (else (minSubArraySum (quote (cdr nums)) min-sum))))
  location...:
   /tmp/tmp5wxg4aix.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-so-far)
    (cond [(empty? nums) min-so-far]
          [(< (first nums) min-so-far) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-so-far)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp6i7o1vgv.rkt:11:32: define: default-value expression missing
  at: min-so-far
  in: (define (minSubArraySum (quote nums) min-so-far) (cond ((empty? nums) min-so-far) ((< (first nums) min-so-far) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-so-far))))
  location...:
   /tmp/tmp6i7o1vgv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-so-far)
    (cond [(empty? nums) min-so-far]
          [(< (first nums) min-so-far) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-so-far)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp6i7o1vgv.rkt:11:32: define: default-value expression missing
  at: min-so-far
  in: (define (minSubArraySum (quote nums) min-so-far) (cond ((empty? nums) min-so-far) ((< (first nums) min-so-far) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-so-far))))
  location...:
   /tmp/tmp6i7o1vgv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-so-far)
    (if (null? nums)
        min-so-far
        (let ((min-so-far (min min-so-far (apply + nums))))
          (minSubArraySum' (cdr nums) min-so-far))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp7gbeoiou.rkt:11:32: define: default-value expression missing
  at: min-so-far
  in: (define (minSubArraySum (quote nums) min-so-far) (if (null? nums) min-so-far (let ((min-so-far (min min-so-far (apply + nums)))) (minSubArraySum (quote (cdr nums)) min-so-far))))
  location...:
   /tmp/tmp7gbeoiou.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(null? nums) min-sum]
      [(< (car nums) 0) (minSubArraySum' (cdr nums) min-sum)]
      [else (minSubArraySum' (cdr nums) (min min-sum (car nums)))]))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp_4l5jp4k.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((< (car nums) 0) (minSubArraySum (quote (cdr nums)) min-sum)) (else (minSubArraySum (quote (cdr nums)) (min min-sum (car nums))))))
  location...:
   /tmp/tmp_4l5jp4k.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) 0)
       (minSubArraySum' (rest nums) (min min-sum (first nums)))]
      [else
       (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmp_u5cvydv.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) 0) (minSubArraySum (quote (rest nums)) (min min-sum (first nums)))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmp_u5cvydv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-so-far)
    (if (null? nums)
        min-so-far
        (let ([num (car nums)])
          (minSubArraySum' (cdr nums) (min min-so-far num)))))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpa3x7858f.rkt:11:32: define: default-value expression missing
  at: min-so-far
  in: (define (minSubArraySum (quote nums) min-so-far) (if (null? nums) min-so-far (let ((num (car nums))) (minSubArraySum (quote (cdr nums)) (min min-so-far num)))))
  location...:
   /tmp/tmpa3x7858f.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(<= (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpbjwcrbsl.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((<= (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpbjwcrbsl.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(<= (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpbjwcrbsl.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((<= (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpbjwcrbsl.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSum)
    (cond [(empty? nums) minSum]
          [(< (first nums) 0)
           (minSubArraySum' (rest nums) (min minSum (first nums)))]
          [else (minSubArraySum' (rest nums) minSum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpd03nl3t8.rkt:11:32: define: default-value expression missing
  at: minSum
  in: (define (minSubArraySum (quote nums) minSum) (cond ((empty? nums) minSum) ((< (first nums) 0) (minSubArraySum (quote (rest nums)) (min minSum (first nums)))) (else (minSubArraySum (quote (rest nums)) minSum))))
  location...:
   /tmp/tmpd03nl3t8.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums sum min)
    (if (null? nums)
        min
        (let ([newSum (+ sum (car nums))])
          (minSubArraySum' (cdr nums) newSum (min newSum min)))))
  (minSubArraySum' nums 0 (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpdondpnwa.rkt:11:32: define: default-value expression missing
  at: sum
  in: (define (minSubArraySum (quote nums) sum min) (if (null? nums) min (let ((newSum (+ sum (car nums)))) (minSubArraySum (quote (cdr nums)) newSum (min newSum min)))))
  location...:
   /tmp/tmpdondpnwa.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let* ([num (car nums)]
               [sum (+ num (car (cdr nums)))]
               [min-sum (min min-sum sum)])
          (minSubArraySum' (cdr nums) min-sum))))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmphwu41kpj.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let* ((num (car nums)) (sum (+ num (car (cdr nums)))) (min-sum (min min-sum sum))) (minSubArraySum (quote (cdr nums)) min-sum))))
  location...:
   /tmp/tmphwu41kpj.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpie3jzyra.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpie3jzyra.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpie3jzyra.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpie3jzyra.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpie3jzyra.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpie3jzyra.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpie3jzyra.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpie3jzyra.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpie3jzyra.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpie3jzyra.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpie3jzyra.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpie3jzyra.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(empty? nums) min-sum]
      [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpie3jzyra.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpie3jzyra.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let ([sum (apply + nums)])
          (minSubArraySum' (cdr nums) (min sum min-sum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpiqkmvk_i.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let ((sum (apply + nums))) (minSubArraySum (quote (cdr nums)) (min sum min-sum)))))
  location...:
   /tmp/tmpiqkmvk_i.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let ([sum (apply + nums)])
          (minSubArraySum' (cdr nums) (min sum min-sum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpiqkmvk_i.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let ((sum (apply + nums))) (minSubArraySum (quote (cdr nums)) (min sum min-sum)))))
  location...:
   /tmp/tmpiqkmvk_i.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (empty? nums)
        min-sum
        (let* ([sum (apply + nums)]
               [new-min-sum (if (< sum min-sum) sum min-sum)])
          (minSubArraySum' (rest nums) new-min-sum))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpkbrgmp8c.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (empty? nums) min-sum (let* ((sum (apply + nums)) (new-min-sum (if (< sum min-sum) sum min-sum))) (minSubArraySum (quote (rest nums)) new-min-sum))))
  location...:
   /tmp/tmpkbrgmp8c.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSum)
    (if (null? nums)
        minSum
        (let ([sum (apply + nums)])
          (if (< sum minSum)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) minSum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmplg47wuan.rkt:11:32: define: default-value expression missing
  at: minSum
  in: (define (minSubArraySum (quote nums) minSum) (if (null? nums) minSum (let ((sum (apply + nums))) (if (< sum minSum) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) minSum)))))
  location...:
   /tmp/tmplg47wuan.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-so-far)
    (cond
      [(empty? nums) min-so-far]
      [(< (first nums) min-so-far) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-so-far)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmplrr17cx7.rkt:11:32: define: default-value expression missing
  at: min-so-far
  in: (define (minSubArraySum (quote nums) min-so-far) (cond ((empty? nums) min-so-far) ((< (first nums) min-so-far) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-so-far))))
  location...:
   /tmp/tmplrr17cx7.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-so-far)
    (cond
      [(empty? nums) min-so-far]
      [(< (first nums) min-so-far) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) min-so-far)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmplrr17cx7.rkt:11:32: define: default-value expression missing
  at: min-so-far
  in: (define (minSubArraySum (quote nums) min-so-far) (cond ((empty? nums) min-so-far) ((< (first nums) min-so-far) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-so-far))))
  location...:
   /tmp/tmplrr17cx7.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_129_minPath --------
#lang racket

;; Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
;; each cell of the grid contains a value. Every integer in the range [1, N * N]
;; inclusive appears exactly once on the cells of the grid.
;; You have to find the minimum path of length k in the grid. You can start
;; from any cell, and in each step you can move to any of the neighbor cells,
;; in other words, you can go to cells which share an edge with you current
;; cell.
;; Please note that a path of length k means visiting exactly k cells (not
;; necessarily distinct).
;; You CANNOT go off the grid.
;; A path A (of length k) is considered less than a path B (of length k) if
;; after making the ordered lists of the values on the cells that A and B go
;; through (let's call them lst_A and lst_B), lst_A is lexicographically less
;; than lst_B, in other words, there exist an integer index i (1 <= i <= k)
;; such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
;; lst_A[j] = lst_B[j].
;; It is guaranteed that the answer is unique.
;; Return an ordered list of the values on the cells that the minimum path go through.
;; Examples:    
;; >>> (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)
;; (list 1 2 1)
;; >>> (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)
;; (list 1)
(define (minPath grid k)
  (define (minPath' grid k)
    (cond [(empty? grid) empty]
          [(empty? (first grid)) empty]
          [(= k 1) (list (first (first grid)))]
          [(= k 2) (list (first (first grid)) (first (first (rest grid))))]
          [else (minPath' (rest grid) (- k 1))]))
  (minPath' grid k))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minPath))
    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1))
    (check-equal? (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1))
    (check-equal? (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2))
    (check-equal? (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1))
    (check-equal? (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1))
    (check-equal? (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1))
    (check-equal? (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6))
    (check-equal? (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3))
    (check-equal? (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5))
    (check-equal? (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2))
    (check-equal? (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpmhymq0hp.rkt:27:25: define: default-value expression missing
  at: k
  in: (define (minPath (quote grid) k) (cond ((empty? grid) empty) ((empty? (first grid)) empty) ((= k 1) (list (first (first grid)))) ((= k 2) (list (first (first grid)) (first (first (rest grid))))) (else (minPath (quote (rest grid)) (- k 1)))))
  location...:
   /tmp/tmpmhymq0hp.rkt:27:25
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSoFar)
    (cond
      [(empty? nums) minSoFar]
      [(< (first nums) minSoFar) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) minSoFar)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpncnn_h2k.rkt:11:32: define: default-value expression missing
  at: minSoFar
  in: (define (minSubArraySum (quote nums) minSoFar) (cond ((empty? nums) minSoFar) ((< (first nums) minSoFar) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) minSoFar))))
  location...:
   /tmp/tmpncnn_h2k.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSoFar)
    (cond
      [(empty? nums) minSoFar]
      [(< (first nums) minSoFar) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) minSoFar)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpncnn_h2k.rkt:11:32: define: default-value expression missing
  at: minSoFar
  in: (define (minSubArraySum (quote nums) minSoFar) (cond ((empty? nums) minSoFar) ((< (first nums) minSoFar) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) minSoFar))))
  location...:
   /tmp/tmpncnn_h2k.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSum)
    (cond
      [(empty? nums) minSum]
      [(< (first nums) minSum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) minSum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpodss5m81.rkt:11:32: define: default-value expression missing
  at: minSum
  in: (define (minSubArraySum (quote nums) minSum) (cond ((empty? nums) minSum) ((< (first nums) minSum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) minSum))))
  location...:
   /tmp/tmpodss5m81.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSum)
    (cond
      [(empty? nums) minSum]
      [(< (first nums) minSum) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) minSum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpodss5m81.rkt:11:32: define: default-value expression missing
  at: minSum
  in: (define (minSubArraySum (quote nums) minSum) (cond ((empty? nums) minSum) ((< (first nums) minSum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) minSum))))
  location...:
   /tmp/tmpodss5m81.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(empty? nums) min-sum]
          [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpq75pnjhu.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpq75pnjhu.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(empty? nums) min-sum]
          [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpq75pnjhu.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpq75pnjhu.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(empty? nums) min-sum]
          [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpq75pnjhu.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpq75pnjhu.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(empty? nums) min-sum]
          [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpq75pnjhu.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpq75pnjhu.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(empty? nums) min-sum]
          [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpq75pnjhu.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpq75pnjhu.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(empty? nums) min-sum]
          [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]
          [else (minSubArraySum' (rest nums) min-sum)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpq75pnjhu.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((empty? nums) min-sum) ((< (first nums) min-sum) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) min-sum))))
  location...:
   /tmp/tmpq75pnjhu.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(null? nums) min-sum]
          [(null? (cdr nums)) (min min-sum (car nums))]
          [else (minSubArraySum' (cdr nums) (min min-sum (+ (car nums) (cadr nums))))]))
  (minSubArraySum' nums (min (car nums) (cadr nums))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpqdhv554p.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((null? (cdr nums)) (min min-sum (car nums))) (else (minSubArraySum (quote (cdr nums)) (min min-sum (+ (car nums) (cadr nums)))))))
  location...:
   /tmp/tmpqdhv554p.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond
      [(null? nums) min-sum]
      [(<= (car nums) min-sum) (minSubArraySum' (cdr nums) (car nums))]
      [else (minSubArraySum' (cdr nums) min-sum)]))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmprxcoch4p.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((<= (car nums) min-sum) (minSubArraySum (quote (cdr nums)) (car nums))) (else (minSubArraySum (quote (cdr nums)) min-sum))))
  location...:
   /tmp/tmprxcoch4p.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSum)
    (if (null? nums)
        minSum
        (let ((sum (apply + nums)))
          (if (< sum minSum)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) minSum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmps6zraf6x.rkt:11:32: define: default-value expression missing
  at: minSum
  in: (define (minSubArraySum (quote nums) minSum) (if (null? nums) minSum (let ((sum (apply + nums))) (if (< sum minSum) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) minSum)))))
  location...:
   /tmp/tmps6zraf6x.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let ([sum (apply + nums)])
          (if (< sum min-sum)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) min-sum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmps82mfvcv.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let ((sum (apply + nums))) (if (< sum min-sum) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) min-sum)))))
  location...:
   /tmp/tmps82mfvcv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let ([sum (apply + nums)])
          (if (< sum min-sum)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) min-sum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmps82mfvcv.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let ((sum (apply + nums))) (if (< sum min-sum) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) min-sum)))))
  location...:
   /tmp/tmps82mfvcv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let ([sum (apply + nums)])
          (if (< sum min-sum)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) min-sum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmps82mfvcv.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let ((sum (apply + nums))) (if (< sum min-sum) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) min-sum)))))
  location...:
   /tmp/tmps82mfvcv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let ([sum (apply + nums)])
          (if (< sum min-sum)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) min-sum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmps82mfvcv.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let ((sum (apply + nums))) (if (< sum min-sum) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) min-sum)))))
  location...:
   /tmp/tmps82mfvcv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let ([sum (apply + nums)])
          (if (< sum min-sum)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) min-sum)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmps82mfvcv.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let ((sum (apply + nums))) (if (< sum min-sum) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) min-sum)))))
  location...:
   /tmp/tmps82mfvcv.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_129_minPath --------
#lang racket

;; Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
;; each cell of the grid contains a value. Every integer in the range [1, N * N]
;; inclusive appears exactly once on the cells of the grid.
;; You have to find the minimum path of length k in the grid. You can start
;; from any cell, and in each step you can move to any of the neighbor cells,
;; in other words, you can go to cells which share an edge with you current
;; cell.
;; Please note that a path of length k means visiting exactly k cells (not
;; necessarily distinct).
;; You CANNOT go off the grid.
;; A path A (of length k) is considered less than a path B (of length k) if
;; after making the ordered lists of the values on the cells that A and B go
;; through (let's call them lst_A and lst_B), lst_A is lexicographically less
;; than lst_B, in other words, there exist an integer index i (1 <= i <= k)
;; such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
;; lst_A[j] = lst_B[j].
;; It is guaranteed that the answer is unique.
;; Return an ordered list of the values on the cells that the minimum path go through.
;; Examples:    
;; >>> (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)
;; (list 1 2 1)
;; >>> (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)
;; (list 1)
(define (minPath grid k)
  (define (minPath' grid k)
    (cond
      [(= k 1) (list (car (car grid)))]
      [(= k 2) (minPath2 grid)]
      [else (minPath3 grid k)]))
  (minPath' grid k))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minPath))
    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1))
    (check-equal? (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1))
    (check-equal? (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2))
    (check-equal? (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1))
    (check-equal? (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1))
    (check-equal? (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1))
    (check-equal? (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6))
    (check-equal? (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3))
    (check-equal? (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5))
    (check-equal? (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1 2 1 2))
    (check-equal? (candidate (list (list 1 3) (list 3 2)) 10) (list 1 3 1 3 1 3 1 3 1 3))
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpteka1bve.rkt:27:25: define: default-value expression missing
  at: k
  in: (define (minPath (quote grid) k) (cond ((= k 1) (list (car (car grid)))) ((= k 2) (minPath2 grid)) (else (minPath3 grid k))))
  location...:
   /tmp/tmpteka1bve.rkt:27:25
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSoFar)
    (cond
      [(empty? nums) minSoFar]
      [(<= (first nums) minSoFar) (minSubArraySum' (rest nums) (first nums))]
      [else (minSubArraySum' (rest nums) minSoFar)]))
  (minSubArraySum' nums (first nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpugw39qv9.rkt:11:32: define: default-value expression missing
  at: minSoFar
  in: (define (minSubArraySum (quote nums) minSoFar) (cond ((empty? nums) minSoFar) ((<= (first nums) minSoFar) (minSubArraySum (quote (rest nums)) (first nums))) (else (minSubArraySum (quote (rest nums)) minSoFar))))
  location...:
   /tmp/tmpugw39qv9.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(null? nums) min-sum]
          [(< (car nums) min-sum) (minSubArraySum' (cdr nums) (car nums))]
          [else (minSubArraySum' (cdr nums) min-sum)]))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpy1yd2ay4.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((< (car nums) min-sum) (minSubArraySum (quote (cdr nums)) (car nums))) (else (minSubArraySum (quote (cdr nums)) min-sum))))
  location...:
   /tmp/tmpy1yd2ay4.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums minSoFar)
    (if (null? nums)
        minSoFar
        (let* ([n (car nums)]
               [minSoFar (if (< n minSoFar) n minSoFar)])
          (minSubArraySum' (cdr nums) minSoFar))))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpy9jqdbat.rkt:11:32: define: default-value expression missing
  at: minSoFar
  in: (define (minSubArraySum (quote nums) minSoFar) (if (null? nums) minSoFar (let* ((n (car nums)) (minSoFar (if (< n minSoFar) n minSoFar))) (minSubArraySum (quote (cdr nums)) minSoFar))))
  location...:
   /tmp/tmpy9jqdbat.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (if (null? nums)
        min-sum
        (let* ([sum (apply + nums)]
               [new-min-sum (if (< sum min-sum) sum min-sum)])
          (minSubArraySum' (cdr nums) new-min-sum))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpyiup5ehz.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (if (null? nums) min-sum (let* ((sum (apply + nums)) (new-min-sum (if (< sum min-sum) sum min-sum))) (minSubArraySum (quote (cdr nums)) new-min-sum))))
  location...:
   /tmp/tmpyiup5ehz.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-so-far)
    (if (null? nums)
        min-so-far
        (let ([sum (apply + nums)])
          (minSubArraySum' (cdr nums) (min sum min-so-far)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpymnjrldj.rkt:11:32: define: default-value expression missing
  at: min-so-far
  in: (define (minSubArraySum (quote nums) min-so-far) (if (null? nums) min-so-far (let ((sum (apply + nums))) (minSubArraySum (quote (cdr nums)) (min sum min-so-far)))))
  location...:
   /tmp/tmpymnjrldj.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min)
    (if (null? nums)
        min
        (let ([sum (apply + nums)])
          (if (< sum min)
              (minSubArraySum' (cdr nums) sum)
              (minSubArraySum' (cdr nums) min)))))
  (minSubArraySum' nums (apply + nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpzgdbq322.rkt:11:32: define: default-value expression missing
  at: min
  in: (define (minSubArraySum (quote nums) min) (if (null? nums) min (let ((sum (apply + nums))) (if (< sum min) (minSubArraySum (quote (cdr nums)) sum) (minSubArraySum (quote (cdr nums)) min)))))
  location...:
   /tmp/tmpzgdbq322.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

==========================
------- Program HumanEval_114_minSubArraySum --------
#lang racket

;; Given a list of integers nums, find the minimum sum of any non-empty sub-list
;; of nums.
;; Example
;; >>> (minSubArraySum (list 2 3 4 1 2 4))
;; 1
;; >>> (minSubArraySum (list -1 -2 -3))
;; -6
(define (minSubArraySum nums)
  (define (minSubArraySum' nums min-sum)
    (cond [(null? nums) min-sum]
          [(null? (cdr nums)) (min min-sum (car nums))]
          [else (minSubArraySum' (cdr nums) (min min-sum (car nums)))]))
  (minSubArraySum' nums (car nums)))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate minSubArraySum))
    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)
    (check-equal? (candidate (list -1 -2 -3)) -6)
    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)
    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)
    (check-equal? (candidate (list 0 10 20 1000000)) 0)
    (check-equal? (candidate (list -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 100 -1 -2 -3 10 -5)) -6)
    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)
    (check-equal? (candidate (list 100 -33 32 -1 0 -2)) -33)
    (check-equal? (candidate (list -10)) -10)
    (check-equal? (candidate (list 7)) 7)
    (check-equal? (candidate (list 1 -1)) -1)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpzu3esbmq.rkt:11:32: define: default-value expression missing
  at: min-sum
  in: (define (minSubArraySum (quote nums) min-sum) (cond ((null? nums) min-sum) ((null? (cdr nums)) (min min-sum (car nums))) (else (minSubArraySum (quote (cdr nums)) (min min-sum (car nums))))))
  location...:
   /tmp/tmpzu3esbmq.rkt:11:32
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:73:58: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:45:33: simple-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:133:33: general-proto
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:16:6: try-next
   /work/arjunguha-research-group/software/racket/collects/racket/private/norm-define.rkt:165:4: normalize-definition
   /work/arjunguha-research-group/software/racket/collects/racket/private/kw.rkt:1119:2

