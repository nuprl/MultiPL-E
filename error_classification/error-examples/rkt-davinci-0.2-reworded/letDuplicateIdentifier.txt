HumanEval_158_find_max: 1
HumanEval_115_max_fill: 1
==========================
------- Program HumanEval_158_find_max --------
#lang racket

;; Write a function that accepts a list of strings.
;; The list contains different words. Return the word with maximum number
;; of unique characters. If multiple strings have maximum number of unique
;; characters, return the one which comes first in lexicographical order.
;; >>> (find_max (list "name" "of" "string"))
;; "string"
;; >>> (find_max (list "name" "enam" "game"))
;; "enam"
;; >>> (find_max (list "aaaaaaa" "bb" "cc"))
;; "aaaaaaa"
(define (find_max words)
  (let loop ((words words)
             (max-word (car words))
             (max-word-count (length (remove-duplicates (string->list (car words)))))
             (words (cdr words)))
    (cond ((null? words) max-word)
          ((> (length (remove-duplicates (string->list (car words)))) max-word-count)
           (loop (cdr words) (car words) (length (remove-duplicates (string->list (car words)))) (cdr words)))
          (else (loop (cdr words) max-word max-word-count (cdr words))))))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate find_max))
    (check-equal? (candidate (list "name" "of" "string")) "string")
    (check-equal? (candidate (list "name" "enam" "game")) "enam")
    (check-equal? (candidate (list "aaaaaaa" "bb" "cc")) "aaaaaaa")
    (check-equal? (candidate (list "abc" "cba")) "abc")
    (check-equal? (candidate (list "play" "this" "game" "of" "footbott")) "footbott")
    (check-equal? (candidate (list "we" "are" "gonna" "rock")) "gonna")
    (check-equal? (candidate (list "we" "are" "a" "mad" "nation")) "nation")
    (check-equal? (candidate (list "this" "is" "a" "prrk")) "this")
    (check-equal? (candidate (list "b")) "b")
    (check-equal? (candidate (list "play" "play" "play")) "play")
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpkwyjgo6j.rkt:17:14: let: duplicate identifier
  at: words
  in: (let loop ((words words) (max-word (car words)) (max-word-count (length (remove-duplicates (string->list (car words))))) (words (cdr words))) (cond ((null? words) max-word) ((> (length (remove-duplicates (string->list (car words)))) max-word-count) (loo...
  location...:
   /tmp/tmpkwyjgo6j.rkt:17:14
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:50:20: go

==========================
------- Program HumanEval_115_max_fill --------
#lang racket

;; You are given a rectangular grid of wells. Each row represents a single well,
;; and each 1 in a row represents a single unit of water.
;; Each well has a corresponding bucket that can be used to extract water from it, 
;; and all buckets have the same capacity.
;; Your task is to use the buckets to empty the wells.
;; Output the number of times you need to lower the buckets.
;; Example 1:
;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1)
;; 6
;; Example 2:
;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2)
;; 5
;; Example 3:
;; >>> (max_fill (list (list 0 0 0) (list 0 0 0)) 5)
;; 0
;; Constraints:
;; * all wells have the same length
;; * 1 <= grid.length <= 10^2
;; * 1 <= grid[:,1].length <= 10^2
;; * grid[i][j] -> 0 | 1
;; * 1 <= capacity <= 10
(define (max_fill grid capacity)
  (define (max_fill-helper grid capacity)
    (cond
      [(empty? grid) 0]
      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]
      [else
       (let ([row (first grid)]
             [row-rest (rest grid)]
             [row-first (first row)]
             [row-rest (rest row)])
         (cond
           [(zero? row-first) (max_fill-helper (cons row-rest row-rest) capacity)]
           [(zero? capacity) (max_fill-helper (cons row-rest row-rest) capacity)]
           [else
            (let ([row-rest (cons (sub1 capacity) row-rest)])
              (+ 1 (max_fill-helper (cons row-rest row-rest) capacity)))]))]))
  (max_fill-helper grid capacity))

(require rackunit)

(define (test-humaneval) 

  (let (( candidate max_fill))
    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1) 6)
    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2) 5)
    (check-equal? (candidate (list (list 0 0 0) (list 0 0 0)) 5) 0)
    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 2) 4)
    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1)) 9) 2)
))

(test-humaneval)
------- Status: Exception --------
-------- stderr -------
/tmp/tmpmsm3o_wv.rkt:33:14: let: duplicate identifier
  at: row-rest
  in: (let ((row (first grid)) (row-rest (rest grid)) (row-first (first row)) (row-rest (rest row))) (cond ((zero? row-first) (max_fill-helper (cons row-rest row-rest) capacity)) ((zero? capacity) (max_fill-helper (cons row-rest row-rest) capacity)) (else (le...
  location...:
   /tmp/tmpmsm3o_wv.rkt:33:14
  context...:
   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:50:20: go

