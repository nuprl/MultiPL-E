name: HumanEval_88_sort_array
language: rkt
prompt: "#lang racket\n\n#| Given a list of non-negative integers, return a corkt\
  \ of the given list after sorting,\nyou will sort the given list in ascending order\
  \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
  \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
  \ change the given list.\nExamples:\n>>> (sort_array (list ))\n(list )\n>>> (sort_array\
  \ (list 5))\n(list 5)\n>>> (sort_array (list 2 4 3 0 1 5))\n(list 0 1 2 3 4 5)\n\
  >>> (sort_array (list 2 4 3 0 1 5 6))\n(list 6 5 4 3 2 1 0)|#\n(define (sort_array\
  \ array)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 5)) (list 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3\
  \ 4 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0))\n\
  \    (check-equal? (candidate (list 2 1)) (list 1 2))\n    (check-equal? (candidate\
  \ (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87))\n    (check-equal? (candidate\
  \ (list 21 14 23 11)) (list 23 21 14 11))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? array)\n      (list)\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      (list)\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [rest (rest (butlast\
    \ array))])\n       (if (odd? sum)\n           (sort array <)\n           (sort\
    \ array >)))]))\n", "  (if (null? array)\n      (list)\n      (let* ([first (car\
    \ array)]\n             [last (car (reverse array))]\n             [sum (+ first\
    \ last)])\n        (if (odd? sum)\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (define (sort-array-helper array odd)\n    (cond\n     \
    \ [(empty? array) empty]\n      [(empty? (rest array)) array]\n      [else\n \
    \      (let* ([first (first array)]\n              [second (first (rest array))]\n\
    \              [rest (rest (rest array))])\n         (if (and (odd? (+ first second))\
    \ odd)\n             (cons second (cons first (sort-array-helper rest odd)))\n\
    \             (cons first (cons second (sort-array-helper rest odd)))))]))\n \
    \ (sort-array-helper array (odd? (+ (first array) (last array)))))\n", "  (sort\
    \ array\n        (lambda (x y)\n          (if (odd? (+ (car array) (last array)))\n\
    \              (< x y)\n              (> x y)))))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let*\n         ([first\
    \ (first array)]\n          [last (last array)]\n          [sum (+ first last)]\n\
    \          [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (if (empty? array)\n      (list)\n      (let ([first (first array)]\n       \
    \     [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (empty? (rest array))\n          (list (first array))\n          (let\
    \ ([first-value (first array)]\n                [last-value (last array)])\n \
    \           (if (odd? (+ first-value last-value))\n                (sort array\
    \ <)\n                (sort array >))))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (define (sort-array-helper array)\n    (cond\n      [(empty? array) empty]\n\
    \      [(empty? (rest array)) (list (first array))]\n      [else\n       (let\
    \ ([first-element (first array)]\n             [second-element (second array)])\n\
    \         (if (odd? (+ first-element second-element))\n             (cons first-element\
    \ (sort-array-helper (rest array)))\n             (cons second-element (sort-array-helper\
    \ (cons first-element (rest (rest array)))))))]))\n  (sort-array-helper array))\n",
  "  (define (sum-first-last array)\n    (if (null? array)\n        0\n        (+\
    \ (car array) (car (reverse array)))))\n  (define (sort-ascending array)\n   \
    \ (sort array <))\n  (define (sort-descending array)\n    (sort array >))\n  (if\
    \ (odd? (sum-first-last array))\n      (sort-ascending array)\n      (sort-descending\
    \ array)))\n", "  (sort array (lambda (x y)\n                (if (odd? (+ (car\
    \ array) (cadr (reverse array))))\n                    (< x y)\n             \
    \       (> x y)))))\n", "  (define (sum-first-last-index array)\n    (define (sum-first-last-index-helper\
    \ array sum)\n      (if (null? array)\n          sum\n          (sum-first-last-index-helper\
    \ (cdr array) (+ sum (car array)))))\n    (sum-first-last-index-helper array 0))\n\
    \  (define (sort-array-helper array)\n    (if (null? array)\n        (list)\n\
    \        (append (sort-array-helper (cdr array)) (list (car array)))))\n  (if\
    \ (odd? (sum-first-last-index array))\n      (sort-array-helper array)\n     \
    \ (reverse (sort-array-helper array))))\n", "  (if (empty? array)\n      (list)\n\
    \      (let ([sum (add1 (add1 (car array) (last array))))])\n        (if (odd?\
    \ sum)\n            (sort < array)\n            (sort > array)))))\n", "  (cond\n\
    \    [(empty? array) (list)]\n    [(empty? (rest array)) array]\n    [else\n \
    \    (let ([first (first array)]\n           [last (last array)])\n       (cond\n\
    \         [(odd? (+ first last))\n          (sort array <)]\n         [else\n\
    \          (sort array >)]))]))\n", "  (let ([len (length array)])\n    (cond\
    \ [(= len 0) (list)]\n          [(= len 1) array]\n          [(even? (+ (list-ref\
    \ array 0) (list-ref array (- len 1))))\n           (sort array >)]\n        \
    \  [else (sort array <)])))\n", "  (define (sort-helper array)\n    (cond\n  \
    \    [(empty? array) empty]\n      [(empty? (rest array)) array]\n      [else\n\
    \       (let ([first (first array)]\n             [second (second array)])\n \
    \        (if (odd? (+ first second))\n             (cons first (sort-helper (cons\
    \ second (rest (rest array)))))\n             (cons second (sort-helper (cons\
    \ first (rest (rest array)))))))]))\n  (sort-helper array))\n", "  (define (sort-array-helper\
    \ array)\n    (cond [(empty? array) empty]\n          [(empty? (rest array)) array]\n\
    \          [(even? (+ (first array) (last array)))\n           (sort-array-helper\
    \ (append (rest array) (list (first array))))]\n          [else\n           (sort-array-helper\
    \ (append (list (last array)) (butlast array)))]))\n  (sort-array-helper array))\n",
  "  (define (sum-first-last array)\n    (if (null? array)\n        0\n        (+\
    \ (car array) (last array))))\n  (define (sort-ascending array)\n    (sort array\
    \ <))\n  (define (sort-descending array)\n    (sort array >))\n  (if (odd? (sum-first-last\
    \ array))\n      (sort-ascending array)\n      (sort-descending array)))\n", " \
    \ (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (if (empty? array)\n      (list)\n      (let* ([first (first array)]\n      \
    \       [last (last array)]\n             [sum (+ first last)]\n             [rest\
    \ (rest (butlast array))])\n        (if (odd? sum)\n            (sort array <)\n\
    \            (sort array >)))))\n", "  (if (empty? array)\n      (list)\n    \
    \  (if (odd? (+ (first array) (last array)))\n          (sort array <)\n     \
    \     (sort array >))))\n", "  (cond [(empty? array) (list)]\n        [(= (length\
    \ array) 1) array]\n        [else (sort_array_helper array)]))\n", "  (cond\n\
    \    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n  \
    \   (let ([first (first array)]\n           [last (last array)])\n       (if (odd?\
    \ (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [rest (rest (butlast array))])\n      \
    \ (if (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n",
  "  (define (sort-array-helper array)\n    (cond\n      [(empty? array) empty]\n\
    \      [(empty? (rest array)) array]\n      [else\n       (let* ([first (first\
    \ array)]\n              [last (last array)]\n              [sum (+ first last)]\n\
    \              [rest (rest (butlast array))])\n         (if (odd? sum)\n     \
    \        (sort-array-helper (append (list first) (sort rest <) (list last)))\n\
    \             (sort-array-helper (append (list first) (sort rest >) (list last)))))]))\n\
    \  (sort-array-helper array))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let ([sum (add (first array) (last\
    \ array))])\n       (cond\n         [(odd? sum) (sort array <)]\n         [else\
    \ (sort array >)]))]))\n", "  (define (sort-helper array)\n    (define (odd? n)\n\
    \      (and (integer? n) (odd? n)))\n    (define (even? n)\n      (and (integer?\
    \ n) (even? n)))\n    (define (sum-first-last array)\n      (if (null? array)\n\
    \          0\n          (+ (car array) (car (reverse array)))))\n    (cond\n \
    \     [(null? array) (list)]\n      [(null? (cdr array)) array]\n      [(odd?\
    \ (sum-first-last array))\n       (sort array <)]\n      [(even? (sum-first-last\
    \ array))\n       (sort array >)]))\n  (sort-helper array))\n", "  (define (sort_array_helper\
    \ array)\n    (cond\n      [(empty? array) (list)]\n      [(= (length array) 1)\
    \ array]\n      [(= (length array) 2)\n       (if (odd? (+ (first array) (second\
    \ array)))\n           (list (first array) (second array))\n           (list (second\
    \ array) (first array)))]\n      [else\n       (let* ([left (sort_array_helper\
    \ (take array (quotient (length array) 2)))]\n              [right (sort_array_helper\
    \ (drop array (quotient (length array) 2)))])\n         (append (sort_array_helper\
    \ left) (sort_array_helper right)))]))\n  (sort_array_helper array))\n", "  (define\
    \ (sort-helper array)\n    (cond [(empty? array) empty]\n          [(empty? (rest\
    \ array)) array]\n          [(< (first array) (second array)) (cons (first array)\
    \ (sort-helper (rest array)))]\n          [else (cons (second array) (sort-helper\
    \ (cons (first array) (rest (rest array)))))]))\n  (cond [(empty? array) empty]\n\
    \        [(odd? (+ (first array) (last array))) (sort-helper array)]\n       \
    \ [else (reverse (sort-helper (reverse array)))]))\n", "  (define (sort-array-helper\
    \ array)\n    (cond\n      [(empty? array) empty]\n      [(= (length array) 1)\
    \ array]\n      [else\n       (let* ([first (first array)]\n              [last\
    \ (last array)]\n              [rest (rest (butlast array))]\n              [sum\
    \ (+ first last)])\n         (cond\n           [(odd? sum)\n            (append\
    \ (sort-array-helper rest) (list first last))]\n           [else\n           \
    \ (append (sort-array-helper rest) (list last first))]))]))\n  (sort-array-helper\
    \ array))\n", "  (define (sort-helper array)\n    (cond ((null? array) '())\n\
    \          ((null? (cdr array)) array)\n          (else\n           (let* ([first\
    \ (car array)]\n                  [second (cadr array)]\n                  [rest\
    \ (cddr array)]\n                  [sorted-rest (sort-helper rest)])\n       \
    \      (cond ((= (modulo (+ first (car (last array))) 2) 0)\n                \
    \    (append (sort-helper (cons first sorted-rest)) (list second)))\n        \
    \           (else\n                    (append (list second) (sort-helper (cons\
    \ first sorted-rest)))))))))\n  (sort-helper array))\n", "  (define (sort_array-helper\
    \ array)\n    (define (sum-first-last array)\n      (+ (car array) (car (reverse\
    \ array))))\n    (cond\n      [(empty? array) empty]\n      [(= (length array)\
    \ 1) array]\n      [(odd? (sum-first-last array))\n       (sort array <)]\n  \
    \    [else\n       (sort array >)]))\n  (sort_array-helper array))\n", "  (define\
    \ (sum-of-first-and-last-index-value array)\n    (+ (car array) (car (reverse\
    \ array))))\n  (define (sort-array-in-ascending-order array)\n    (sort array\
    \ <))\n  (define (sort-array-in-descending-order array)\n    (sort array >))\n\
    \  (if (even? (sum-of-first-and-last-index-value array))\n      (sort-array-in-descending-order\
    \ array)\n      (sort-array-in-ascending-order array)))\n", "  (cond [(empty?\
    \ array) (list)]\n        [(empty? (rest array)) array]\n        [else (sort_array\
    \ (sort-array-helper array))]))\n", "  (define (sort-array-helper array)\n   \
    \ (cond\n      [(empty? array) empty]\n      [(empty? (rest array)) array]\n \
    \     [else\n       (let ([first (first array)]\n             [second (second\
    \ array)])\n         (if (odd? (+ first second))\n             (cons first (sort-array-helper\
    \ (cons second (rest (rest array)))))\n             (cons second (sort-array-helper\
    \ (cons first (rest (rest array)))))))]))\n  (sort-array-helper array))\n", " \
    \ (define (sort-array-helper array)\n    (cond\n      [(empty? array) empty]\n\
    \      [(empty? (rest array)) array]\n      [else\n       (let ([first (first\
    \ array)]\n             [second (second array)])\n         (cond\n           [(>\
    \ (+ first second) 0)\n            (cons first (sort-array-helper (rest array)))]\n\
    \           [else\n            (cons second (sort-array-helper (cons first (rest\
    \ (rest array)))))]))]))\n  (sort-array-helper array))\n", "  (cond [(empty? array)\
    \ (list)]\n        [(= (length array) 1) array]\n        [else\n         (let\
    \ ([first (first array)]\n               [last (last array)])\n           (cond\
    \ [(odd? (+ first last))\n                  (sort array <)]\n                \
    \ [else\n                  (sort array >)]))]))\n", "  (if (empty? array)\n  \
    \    (list)\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let ([first (first array)]\n           [last (last\
    \ array)])\n       (if (odd? (+ first last))\n           (sort array <)\n    \
    \       (sort array >)))]))\n", "  (if (empty? array)\n      (list)\n      (let*\
    \ ([first (first array)]\n             [last (last array)]\n             [sum\
    \ (+ first last)]\n             [sort-fn (if (odd? sum)\n                    \
    \      (\u03BB (a b) (< a b))\n                          (\u03BB (a b) (> a b)))]\n\
    \             [sorted (sort sort-fn array)])\n        sorted)))\n", "  (cond\n\
    \    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n  \
    \   (let* ([first (first array)]\n            [last (last array)]\n          \
    \  [sum (+ first last)]\n            [rest (rest (butlast array))])\n       (if\
    \ (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n", " \
    \ (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (if (null? array)\n      (list)\n      (if (= (length array) 1)\n          array\n\
    \          (let* ([first (car array)]\n                 [last (car (reverse array))]\n\
    \                 [sum (+ first last)])\n            (if (odd? sum)\n        \
    \        (sort array <)\n                (sort array >))))))\n", "  (cond\n  \
    \  [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n    \
    \ (let ([first (first array)]\n           [last (last array)])\n       (cond\n\
    \         [(odd? (+ first last))\n          (sort array <)]\n         [else\n\
    \          (sort array >)]))]))\n", "  (sort array (lambda (a b)\n           \
    \     (if (odd? (+ (car array) (last array)))\n                    (< a b)\n \
    \                   (> a b)))))\n", "  (if (empty? array)\n      (list)\n    \
    \  (let ([first (first array)]\n            [last (last array)])\n        (if\
    \ (odd? (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (sort array\n        (lambda (a b)\n          (if (odd? (+ (car array) (last\
    \ array)))\n              (< a b)\n              (> a b)))))\n", "  (sort array\n\
    \        (lambda (x y)\n          (if (odd? (+ (car array) (last array)))\n  \
    \            (< x y)\n              (> x y)))))\n", "  (if (empty? array)\n  \
    \    (list)\n      (if (empty? (rest array))\n          (list (first array))\n\
    \          (let* ([first-value (first array)]\n                 [last-value (last\
    \ array)]\n                 [sum (+ first-value last-value)]\n               \
    \  [sorted-array (sort array <)])\n            (if (odd? sum)\n              \
    \  sorted-array\n                (reverse sorted-array))))))\n", "  (if (empty?\
    \ array)\n      (list)\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      (list)\n      (let*\
    \ ([first (first array)]\n             [last (last array)]\n             [sum\
    \ (+ first last)]\n             [rest (rest (butlast array))])\n        (if (odd?\
    \ sum)\n            (sort array <)\n            (sort array >)))))\n", "  (define\
    \ (sort-array-helper array)\n    (cond [(empty? array) empty]\n          [(= (length\
    \ array) 1) array]\n          [(= (length array) 2)\n           (if (odd? (+ (first\
    \ array) (second array)))\n               (list (first array) (second array))\n\
    \               (list (second array) (first array)))]\n          [else\n     \
    \      (let ([first-half (sort-array-helper (take array (quotient (length array)\
    \ 2)))])\n             (let ([second-half (sort-array-helper (drop array (quotient\
    \ (length array) 2)))])\n               (append first-half second-half)))]))\n\
    \  (sort-array-helper array))\n", "  (define (sort array)\n    (cond\n      [(empty?\
    \ array) empty]\n      [(empty? (rest array)) array]\n      [else\n       (let*\
    \ ([first (first array)]\n              [rest (rest array)]\n              [rest-sorted\
    \ (sort rest)]\n              [first-sorted (first rest-sorted)]\n           \
    \   [rest-rest (rest rest-sorted)])\n         (if (odd? (+ first first-sorted))\n\
    \             (cons first-sorted (cons first rest-rest))\n             (cons first\
    \ (cons first-sorted rest-rest))))]))\n  (sort array))\n", "  (if (empty? array)\n\
    \      (list)\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (define (sort-helper array)\n    (cond [(empty? array) empty]\n\
    \          [(empty? (rest array)) array]\n          [(< (first array) (second\
    \ array)) (cons (first array) (sort-helper (rest array)))]\n          [else (cons\
    \ (second array) (sort-helper (cons (first array) (rest (rest array)))))]))\n\
    \  (if (empty? array) empty\n      (if (empty? (rest array)) array\n         \
    \ (if (odd? (+ (first array) (last array))) (sort-helper array)\n            \
    \  (reverse (sort-helper (reverse array)))))))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first (first\
    \ array)]\n           [last (last array)])\n       (cond\n         [(= (add1 (remainder\
    \ (+ first last) 2)) 1)\n          (sort array <)]\n         [else\n         \
    \ (sort array >)]))]))\n", "  (define (sum-of-first-and-last-index-value array)\n\
    \    (+ (car array) (car (reverse array))))\n  (define (sort-ascending array)\n\
    \    (sort array <))\n  (define (sort-descending array)\n    (sort array >))\n\
    \  (cond\n    [(= (length array) 0) (list)]\n    [(= (length array) 1) array]\n\
    \    [(odd? (sum-of-first-and-last-index-value array)) (sort-ascending array)]\n\
    \    [else (sort-descending array)]))\n", "  (cond [(empty? array) (list)]\n \
    \       [(= (length array) 1) array]\n        [else\n         (cond [(even? (+\
    \ (first array) (last array)))\n                (sort array >)]\n            \
    \   [else\n                (sort array <)])]))\n", "  (define (sort-asc array)\n\
    \    (sort array <))\n  (define (sort-desc array)\n    (sort array >))\n  (define\
    \ (sum-first-last array)\n    (+ (first array) (last array)))\n  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [(odd? (sum-first-last\
    \ array)) (sort-asc array)]\n    [else (sort-desc array)]))\n", "  (if (empty?\
    \ array)\n      (list)\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let ([first (first array)]\n    \
    \       [last (last array)])\n       (cond\n         [(odd? (+ first last))\n\
    \          (sort array <)]\n         [else\n          (sort array >)]))]))\n",
  "  (if (null? array)\n      (list)\n      (let ([first (car array)]\n          \
    \  [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (if (empty? array)\n      (list)\n      (if (odd? (+ (first array) (last array)))\n\
    \          (sort array <)\n          (sort array >))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (cond\n         [(odd? sum)\
    \ (sort < array)]\n         [else (sort > array)]))]))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (cond\n         [(=\
    \ (add1 (remainder (+ first last) 2)) 1)\n          (sort array <)]\n        \
    \ [else\n          (sort array >)]))]))\n", "  (define (sort-helper array)\n \
    \   (cond\n      [(empty? array) empty]\n      [(empty? (rest array)) array]\n\
    \      [else\n       (let ([first (first array)]\n             [second (second\
    \ array)])\n         (cond\n           [(< first second) (cons first (sort-helper\
    \ (rest array)))]\n           [else (cons second (sort-helper (cons first (rest\
    \ (rest array)))))]))]))\n  (let ([sum (+ (first array) (last array))])\n    (if\
    \ (odd? sum)\n        (sort-helper array)\n        (reverse (sort-helper (reverse\
    \ array))))))\n", "  (define (sort-array-helper array)\n    (cond\n      [(empty?\
    \ array) empty]\n      [(= (length array) 1) array]\n      [else\n       (let*\
    \ ([first (first array)]\n              [last (last array)]\n              [rest\
    \ (rest (butlast array))]\n              [sum (+ first last)])\n         (if (odd?\
    \ sum)\n             (sort-array-helper (append rest (list last first)))\n   \
    \          (sort-array-helper (append (list last) rest first))))]))\n  (sort-array-helper\
    \ array))\n", "  (define (sum-first-last-elements array)\n    (if (null? array)\n\
    \        0\n        (+ (car array) (last array))))\n  (define (sort-array-helper\
    \ array)\n    (if (null? array)\n        (list)\n        (append (sort-array-helper\
    \ (cdr array)) (list (car array)))))\n  (if (odd? (sum-first-last-elements array))\n\
    \      (sort-array-helper array)\n      (reverse (sort-array-helper array))))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond [(empty? array) '()]\n        [(= (length array) 1) array]\n        [else\
    \ (sort_array_helper array)]))\n", "  (if (null? array)\n      (list)\n      (let\
    \ ([first (car array)]\n            [last (car (reverse array))])\n        (if\
    \ (odd? (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (let ([n (length array)])\n    (if (zero? n)\n        (list)\n        (let ([first\
    \ (first array)]\n              [last (last array)])\n          (if (odd? (+ first\
    \ last))\n              (sort array <)\n              (sort array >))))))\n",
  "  (if (null? array)\n      (list)\n      (let ([first (car array)]\n          \
    \  [last (car (reverse array))])\n        (if (odd? (+ first last))\n        \
    \    (sort array <)\n            (sort array >)))))\n", "  (cond [(empty? array)\
    \ (list)]\n        [(= (length array) 1) array]\n        [else (sort_array_helper\
    \ array)]))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let ([first (first array)]\n           [last (last\
    \ array)])\n       (cond\n         [(odd? (+ first last))\n          (sort array\
    \ <)]\n         [else\n          (sort array >)]))]))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (odd? (+ (first array) (last array)))\n          (sort\
    \ array <)\n          (sort array >))))\n", "  (cond\n    [(null? array) '()]\n\
    \    [(= (length array) 1) array]\n    [(odd? (+ (car array) (last array)))\n\
    \     (sort array <)]\n    [else\n     (sort array >)]))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (empty? (rest array))\n          (list (first array))\n\
    \          (let ([first (first array)]\n                [last (last array)])\n\
    \            (if (odd? (+ first last))\n                (sort array <)\n     \
    \           (sort array >))))))\n", "  (let loop ([array array] [result (list)])\n\
    \    (cond [(empty? array) result]\n          [(= (add1 (length array)) (length\
    \ result)) (reverse result)]\n          [else (loop (rest array) (cons (first\
    \ array) result))])))\n", "  (if (null? array)\n      (list)\n      (let ([sum\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first (first\
    \ array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (define (odd? n)\n  \
    \  (and (integer? n)\n         (odd? n)))\n  (define (even? n)\n    (and (integer?\
    \ n)\n         (even? n)))\n  (define (sum-first-last array)\n    (if (empty?\
    \ array)\n        0\n        (+ (first array)\n           (last array))))\n  (define\
    \ (sort-asc array)\n    (sort array <))\n  (define (sort-desc array)\n    (sort\
    \ array >))\n  (cond\n    [(empty? array) (list)]\n    [(odd? (sum-first-last\
    \ array)) (sort-asc array)]\n    [(even? (sum-first-last array)) (sort-desc array)]))\n",
  "  (if (empty? array)\n      (list)\n      (if (= (length array) 1)\n          array\n\
    \          (if (even? (+ (first array) (last array)))\n              (sort array\
    \ >)\n              (sort array <)))))\n", "  (let ([first (car array)]\n    \
    \    [last (car (reverse array))])\n    (if (odd? (+ first last))\n        (sort\
    \ array <)\n        (sort array >))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [rest (rest (butlast array))])\n       (if (odd? sum)\n           (sort (append\
    \ rest (list first last)))\n           (sort (append rest (list last first)) #:key\
    \ (compose not <))))]))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([first (first array)]\n           \
    \ [last (last array)]\n            [sum (+ first last)]\n            [sorted-array\
    \ (sort array <)])\n       (if (odd? sum) sorted-array (reverse sorted-array)))]))\n",
  "  (if (empty? array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (define (sum-first-last-index\
    \ array)\n    (cond [(empty? array) 0]\n          [else (+ (first array) (last\
    \ array))]))\n  (define (sort-ascending array)\n    (cond [(empty? array) empty]\n\
    \          [(empty? (rest array)) array]\n          [else (cons (first array)\
    \ (sort-ascending (rest array)))]))\n  (define (sort-descending array)\n    (cond\
    \ [(empty? array) empty]\n          [(empty? (rest array)) array]\n          [else\
    \ (cons (last array) (sort-descending (rest array)))]))\n  (cond [(empty? array)\
    \ empty]\n        [(odd? (sum-first-last-index array)) (sort-ascending array)]\n\
    \        [else (sort-descending array)]))\n", "  (if (empty? array)\n      (list)\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      (list)\n      (let ((first (first array))\n\
    \            (last (last array)))\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (define (sort-array-helper\
    \ array)\n    (cond [(empty? array) empty]\n          [(empty? (rest array)) array]\n\
    \          [(even? (+ (first array) (last array)))\n           (sort (rest (init\
    \ array)) >)]\n          [else (sort (rest (init array)) <)]))\n  (sort-array-helper\
    \ array))\n", "  (if (empty? array)\n      (list)\n      (if (= (length array)\
    \ 1)\n          array\n          (if (odd? (+ (first array) (last array)))\n \
    \             (sort array <)\n              (sort array >)))))\n", "  (cond [(empty?\
    \ array) '()]\n        [(= (length array) 1) array]\n        [else\n         (let*\
    \ ([first (first array)]\n                [last (last array)]\n              \
    \  [sum (+ first last)]\n                [rest (rest (butlast array))])\n    \
    \       (if (odd? sum)\n               (append (sort_array rest) (list first)\
    \ (list last))\n               (append (list last) (sort_array rest) (list first))))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [sorted-array (sort array (if (odd? sum)\
    \ < >))])\n       sorted-array)]))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(empty? (rest array)) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [rest (rest (butlast array))])\n       (if (odd? sum)\n           (sort array\
    \ <)\n           (sort array >)))]))\n", "  (if (empty? array)\n      (list)\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1)\
    \ array]\n    [else\n     (let*\n         ([first (first array)]\n          [last\
    \ (last array)]\n          [sum (+ first last)]\n          [sorted (sort array\
    \ (if (odd? sum) < >))])\n       sorted)]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first (first\
    \ array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (define (sort-array-helper\
    \ array)\n    (if (null? array)\n        (list)\n        (let* ([first (car array)]\n\
    \               [last (car (reverse array))]\n               [sum (+ first last)])\n\
    \          (if (odd? sum)\n              (sort array <)\n              (sort array\
    \ >)))))\n  (sort-array-helper array))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let ([sum (add (first array)\
    \ (last array))])\n       (cond\n         [(odd? sum) (sort array <)]\n      \
    \   [else (sort array >)]))]))\n", "  (define (sum-first-last array)\n    (if\
    \ (null? array)\n        0\n        (+ (car array) (car (reverse array)))))\n\
    \  (define (sort-ascending array)\n    (sort array <))\n  (define (sort-descending\
    \ array)\n    (sort array >))\n  (if (odd? (sum-first-last array))\n      (sort-ascending\
    \ array)\n      (sort-descending array)))\n", "  (if (empty? array)\n      (list)\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (null? array)\n      (list)\n      (let ([first (car array)]\n\
    \            [last (car (reverse array))])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (define (sort-helper\
    \ array)\n    (cond [(empty? array) empty]\n          [(= (length array) 1) array]\n\
    \          [(= (length array) 2) (if (odd? (+ (first array) (last array)))\n \
    \                                   (list (first array) (last array))\n      \
    \                              (list (last array) (first array)))]\n         \
    \ [else (let* ([first (first array)]\n                       [last (last array)]\n\
    \                       [rest (rest (butlast array))])\n                  (if\
    \ (odd? (+ first last))\n                      (append (sort-helper rest) (list\
    \ first last))\n                      (append (sort-helper rest) (list last first))))]))\n\
    \  (sort-helper array))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let ([first (first array)]\n           [last\
    \ (last array)])\n       (if (odd? (+ first last))\n           (sort array <)\n\
    \           (sort array >)))]))\n", "  (define (sort-helper array)\n    (if (null?\
    \ array)\n        '()\n        (let* ([first (car array)]\n               [rest\
    \ (cdr array)]\n               [sorted-rest (sort-helper rest)]\n            \
    \   [first-index (car sorted-rest)]\n               [last-index (car (reverse\
    \ sorted-rest))])\n          (if (odd? (+ first-index last-index))\n         \
    \     (append (list first) sorted-rest)\n              (reverse (append (list\
    \ first) sorted-rest))))))\n  (sort-helper array))\n", "  (if (empty? array)\n\
    \      (list)\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (define (sort-helper array)\n    (define (sort-helper-helper\
    \ array)\n      (cond [(empty? array) empty]\n            [(empty? (rest array))\
    \ (list (first array))]\n            [else (cons (first array) (sort-helper-helper\
    \ (rest array)))]))\n    (define (sort-helper-helper-helper array)\n      (cond\
    \ [(empty? array) empty]\n            [(empty? (rest array)) (list (first array))]\n\
    \            [else (cons (first array) (sort-helper-helper-helper (rest array)))]))\n\
    \    (cond [(empty? array) empty]\n          [(empty? (rest array)) (list (first\
    \ array))]\n          [(= (modulo (+ (first array) (last array)) 2) 0) (sort-helper-helper\
    \ array)]\n          [else (sort-helper-helper-helper array)]))\n  (sort-helper\
    \ array))\n", "  (define (sort-asc array)\n    (cond [(empty? array) empty]\n\
    \          [else (cons (min array) (sort-asc (remove (min array) array)))]))\n\
    \  (define (sort-desc array)\n    (cond [(empty? array) empty]\n          [else\
    \ (cons (max array) (sort-desc (remove (max array) array)))]))\n  (if (odd? (+\
    \ (first array) (last array)))\n      (sort-asc array)\n      (sort-desc array)))\n",
  "  (define (sum-first-last array)\n    (if (null? array)\n        0\n        (+\
    \ (car array) (car (reverse array)))))\n  (define (sort-ascending array)\n   \
    \ (sort array <))\n  (define (sort-descending array)\n    (sort array >))\n  (if\
    \ (odd? (sum-first-last array))\n      (sort-ascending array)\n      (sort-descending\
    \ array)))\n", "  (cond [(empty? array) empty]\n        [(= (length array) 1)\
    \ array]\n        [else\n         (let ([first (first array)]\n              \
    \ [last (last array)])\n           (if (odd? (+ first last))\n               (sort\
    \ array <)\n               (sort array >)))]))\n", "  (if (empty? array)\n   \
    \   (list)\n      (let* ([first (first array)]\n             [last (last array)]\n\
    \             [sum (+ first last)]\n             [sorted (sort array <)])\n  \
    \      (if (odd? sum)\n            sorted\n            (reverse sorted)))))\n",
  "  (if (empty? array)\n      (list)\n      (let ([first (first array)]\n       \
    \     [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      (list)\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      (list)\n      (if (= (length array)\
    \ 1)\n          array\n          (let ([first (first array)]\n               \
    \ [last (last array)])\n            (if (odd? (+ first last))\n              \
    \  (sort array <)\n                (sort array >))))))\n", "  (if (empty? array)\n\
    \      (list)\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      (list)\n      (if (even? (+ (first\
    \ array) (last array)))\n          (sort array >)\n          (sort array <))))\n",
  "  (if (empty? array)\n      (list)\n      (if (= (length array) 1)\n          array\n\
    \          (if (odd? (+ (first array) (last array)))\n              (sort array\
    \ <)\n              (sort array >)))))\n", "  (if (empty? array)\n      (list)\n\
    \      (let* ([first (first array)]\n             [last (last array)]\n      \
    \       [rest (rest (butlast array))])\n        (if (odd? (+ first last))\n  \
    \          (sort array <)\n            (sort array >)))))\n", "  (cond [(empty?\
    \ array) (list)]\n        [(= (length array) 1) array]\n        [else (if (odd?\
    \ (+ (first array) (last array)))\n                 (sort array <)\n         \
    \        (sort array >))]))\n", "  (define (sort-array-helper array)\n    (cond\
    \ [(empty? array) empty]\n          [(empty? (rest array)) array]\n          [(odd?\
    \ (+ (first array) (last array)))\n           (sort array <)]\n          [else\n\
    \           (sort array >)]))\n  (sort-array-helper array))\n", "  (if (empty?\
    \ array)\n      (list)\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (empty? (rest array))\n          (list (first array))\n          (let ([first\
    \ (first array)]\n                [last (last array)])\n            (if (odd?\
    \ (+ first last))\n                (sort array <)\n                (sort array\
    \ >))))))\n", "  (define (sum-first-last-index-value array)\n    (define (sum-first-last-index-value-helper\
    \ array sum)\n      (cond\n        [(empty? array) sum]\n        [(= (length array)\
    \ 1) (+ sum (first array))]\n        [else (sum-first-last-index-value-helper\
    \ (rest array) (+ sum (first array) (last array)))]))\n    (sum-first-last-index-value-helper\
    \ array 0))\n  (define (sort-array-helper array)\n    (cond\n      [(empty? array)\
    \ (list)]\n      [(= (length array) 1) array]\n      [else (append (sort-array-helper\
    \ (take (length array) (rest array))) (list (first array)))]))\n  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [(odd? (sum-first-last-index-value\
    \ array)) (sort-array-helper array)]\n    [else (reverse (sort-array-helper array))]))\n",
  "  (define (sort-helper array)\n    (cond [(empty? array) empty]\n          [(empty?\
    \ (rest array)) array]\n          [(< (first array) (second array)) (cons (first\
    \ array) (sort-helper (rest array)))]\n          [else (cons (second array) (sort-helper\
    \ (cons (first array) (rest (rest array)))))]))\n  (define (reverse-helper array)\n\
    \    (cond [(empty? array) empty]\n          [else (cons (last array) (reverse-helper\
    \ (butlast array)))]))\n  (define (sum-helper array)\n    (cond [(empty? array)\
    \ 0]\n          [else (+ (first array) (sum-helper (rest array)))]))\n  (cond\
    \ [(empty? array) empty]\n        [(odd? (sum-helper array)) (sort-helper array)]\n\
    \        [else (reverse-helper (sort-helper array))]))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (define (sort-array-helper\
    \ array)\n    (if (null? array)\n        '()\n        (let* ([first (car array)]\n\
    \               [last (last array)]\n               [sum (+ first last)])\n  \
    \        (if (odd? sum)\n              (sort array <)\n              (sort array\
    \ >)))))\n  (sort-array-helper array))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (if (odd? (+ first last))\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (if (empty? array)\n\
    \      (list)\n      (let* ([first (first array)]\n             [last (last array)]\n\
    \             [sum (+ first last)]\n             [sorted (sort array <)])\n  \
    \      (if (odd? sum)\n            sorted\n            (reverse sorted)))))\n",
  "  (define (sort-helper array)\n    (cond [(empty? array) empty]\n          [(empty?\
    \ (rest array)) array]\n          [(< (first array) (second array)) (cons (first\
    \ array) (sort-helper (rest array)))]\n          [else (cons (second array) (sort-helper\
    \ (cons (first array) (rest (rest array)))))]))\n  (define (sort-helper2 array)\n\
    \    (cond [(empty? array) empty]\n          [(empty? (rest array)) array]\n \
    \         [(> (first array) (second array)) (cons (first array) (sort-helper2\
    \ (rest array)))]\n          [else (cons (second array) (sort-helper2 (cons (first\
    \ array) (rest (rest array)))))]))\n  (if (odd? (+ (first array) (last array)))\n\
    \      (sort-helper array)\n      (sort-helper2 array)))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (define (sort-helper array)\n    (cond [(empty? array) empty]\n          [(=\
    \ (length array) 1) array]\n          [(= (length array) 2) (if (odd? (+ (first\
    \ array) (last array)))\n                                    (list (first array)\
    \ (last array))\n                                    (list (last array) (first\
    \ array)))]\n          [else (sort-helper (append (sort-helper (take array (/\
    \ (length array) 2)))\n                                     (sort-helper (drop\
    \ array (/ (length array) 2)))))]))\n  (sort-helper array))\n", "  (if (empty?\
    \ array)\n      (list)\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (define (sort-array-helper array)\n    (cond\n\
    \      [(empty? array) empty]\n      [(= (length array) 1) array]\n      [else\n\
    \       (let* ([first (first array)]\n              [last (last array)]\n    \
    \          [rest (rest (butlast array))]\n              [sum (+ first last)])\n\
    \         (if (odd? sum)\n             (sort (append rest (list first last)))\n\
    \             (sort (append rest (list last first)))))]))\n  (sort-array-helper\
    \ array))\n", "  (if (empty? array)\n      (list)\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n   \
    \       (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (odd? (+ (first array) (last array)))\n          (sort\
    \ array <)\n          (sort array >))))\n", "  (cond [(empty? array) array]\n\
    \        [(= (length array) 1) array]\n        [else (sort_array_helper array)]))\n",
  "  (if (null? array)\n      (list)\n      (let ([first (car array)]\n          \
    \  [last (car (reverse array))])\n        (if (odd? (+ first last))\n        \
    \    (sort array <)\n            (sort array >)))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (cond\n  \
    \     [(odd? (+ (first array) (last array)))\n        (quicksort array <)]\n \
    \      [else\n        (quicksort array >)])]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first (first\
    \ array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (even? (+ (first array) (last array)))\n          (sort\
    \ array >)\n          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (if (odd? (+ first last))\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (let ((len (length array)))\n\
    \    (cond\n      [(zero? len) (list)]\n      [(= len 1) array]\n      [(odd?\
    \ (+ (list-ref array 0) (list-ref array (- len 1))))\n       (sort array <)]\n\
    \      [else\n       (sort array >)])))\n", "  (if (empty? array)\n      (list)\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (define (sort-helper array)\n    (cond [(empty? array) empty]\n\
    \          [(= (length array) 1) array]\n          [(= (length array) 2) (if (odd?\
    \ (+ (first array) (last array)))\n                                    (list (first\
    \ array) (last array))\n                                    (list (last array)\
    \ (first array)))]\n          [else (let* ([first-half (sort-helper (take array\
    \ (/ (length array) 2)))]\n                      [second-half (sort-helper (drop\
    \ array (/ (length array) 2)))])\n                   (if (odd? (+ (first array)\
    \ (last array)))\n                       (append first-half second-half)\n   \
    \                    (append second-half first-half)))]))\n  (sort-helper array))\n",
  "  (define (odd? n)\n    (and (integer? n) (not (even? n))))\n  (define (even? n)\n\
    \    (and (integer? n) (not (odd? n))))\n  (define (sum-first-last array)\n  \
    \  (if (null? array)\n        0\n        (+ (car array) (car (reverse array)))))\n\
    \  (if (odd? (sum-first-last array))\n      (sort array <)\n      (sort array\
    \ >)))\n", "  (cond [(empty? array) (list)]\n        [(empty? (rest array)) array]\n\
    \        [else (sort_array (sort_array_helper array))]))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (cond\n         [(odd?\
    \ (+ first last))\n          (sort array <)]\n         [else\n          (sort\
    \ array >)]))]))\n", "  (define (sum-first-last-index array)\n    (let ([first-index\
    \ (car array)]\n          [last-index (car (reverse array))])\n      (+ first-index\
    \ last-index)))\n  (define (sort-ascending array)\n    (sort array <))\n  (define\
    \ (sort-descending array)\n    (sort array >))\n  (if (odd? (sum-first-last-index\
    \ array))\n      (sort-ascending array)\n      (sort-descending array)))\n", " \
    \ (if (null? array)\n      (list)\n      (let ([first (car array)]\n         \
    \   [last (car (reverse array))])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      (list)\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      (list)\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (cond\n   \
    \ [(empty? array) (list)]\n    [(empty? (rest array)) array]\n    [else\n    \
    \ (let ([first (first array)]\n           [last (last array)])\n       (cond\n\
    \         [(odd? (+ first last))\n          (sort array <)]\n         [else\n\
    \          (sort array >)]))]))\n", "  (let loop ([array array] [result '()])\n\
    \    (cond\n      [(null? array) result]\n      [(= (remainder (+ (car array)\
    \ (last array)) 2) 0)\n       (loop (cdr array) (cons (car array) result))]\n\
    \      [else (loop (cdr array) (cons (car array) result))])))\n", "  (cond\n \
    \   [(empty? array) (list)]\n    [(empty? (rest array)) array]\n    [else\n  \
    \   (let* ([first (first array)]\n            [last (last array)]\n          \
    \  [sum (+ first last)]\n            [sorted (sort array <)])\n       (if (odd?\
    \ sum) sorted (reverse sorted)))]))\n", "  (define (sort-array-helper array)\n\
    \    (cond [(empty? array) empty]\n          [(= (length array) 1) array]\n  \
    \        [(= (length array) 2)\n           (if (odd? (+ (first array) (last array)))\n\
    \               (list (first array) (last array))\n               (list (last\
    \ array) (first array)))]\n          [else\n           (let* ([first (first array)]\n\
    \                  [last (last array)]\n                  [rest (sort-array-helper\
    \ (rest (butlast array)))]\n                  [sorted (if (odd? (+ first last))\n\
    \                              (append (list first) rest (list last))\n      \
    \                        (append (list last) rest (list first)))])\n         \
    \    sorted)]))\n  (sort-array-helper array))\n", "  (if (empty? array)\n    \
    \  (list)\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (define (sort-helper array)\n    (cond\n      [(empty? array)\
    \ empty]\n      [(= (length array) 1) array]\n      [else\n       (let* ([first\
    \ (first array)]\n              [last (last array)]\n              [sum (+ first\
    \ last)]\n              [rest (rest (butlast array))])\n         (if (odd? sum)\n\
    \             (sort (cons first (sort-helper rest)) <)\n             (sort (cons\
    \ last (sort-helper rest)) >)))]))\n  (sort-helper array))\n", "  (define (sort-array-helper\
    \ array)\n    (cond\n      [(empty? array) empty]\n      [(empty? (rest array))\
    \ array]\n      [else\n       (let ([first (first array)]\n             [second\
    \ (second array)])\n         (if (odd? (+ first second))\n             (cons first\
    \ (sort-array-helper (cons second (rest (rest array)))))\n             (cons second\
    \ (sort-array-helper (cons first (rest (rest array)))))))]))\n  (sort-array-helper\
    \ array))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1)\
    \ array]\n    [else\n     (let ([first (first array)]\n           [last (last\
    \ array)])\n       (cond\n         [(odd? (+ first last))\n          (sort array\
    \ <)]\n         [else\n          (sort array >)]))]))\n", "  (cond ((null? array)\
    \ '())\n        ((null? (cdr array)) array)\n        ((= (modulo (+ (car array)\
    \ (car (last array))) 2) 0)\n         (sort array >))\n        (else (sort array\
    \ <))))\n", "  (define (sort_array_helper array)\n    (if (null? array)\n    \
    \    (list)\n        (let ([first (car array)]\n              [rest (cdr array)])\n\
    \          (if (null? rest)\n              (list first)\n              (let ([last\
    \ (car (reverse array))])\n                (if (odd? (+ first last))\n       \
    \             (sort (append (sort_array_helper rest) (list first)) <)\n      \
    \              (sort (append (sort_array_helper rest) (list first)) >)))))))\n\
    \  (sort_array_helper array))\n", "  (sort array (lambda (x y) (if (odd? (+ (car\
    \ array) (cadr (reverse array))))\n                                (< x y)\n \
    \                               (> x y)))))\n", "  (if (null? array)\n      (list)\n\
    \      (let ((first (car array))\n            (last (car (reverse array))))\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (define (sort-helper array)\n    (cond\n      [(empty? array)\
    \ empty]\n      [(= (length array) 1) array]\n      [else\n       (let* ([first\
    \ (first array)]\n              [last (last array)]\n              [rest (rest\
    \ (butlast array))])\n         (if (odd? (+ first last))\n             (cons first\
    \ (sort-helper rest))\n             (cons last (sort-helper rest))))]))\n  (sort-helper\
    \ array))\n", "  (cond [(empty? array) (list)]\n        [(= (length array) 1)\
    \ array]\n        [else\n         (let ([first (first array)]\n              \
    \ [last (last array)])\n           (cond [(odd? (+ first last))\n            \
    \      (sort array <)]\n                 [else\n                  (sort array\
    \ >)]))]))\n", "  (define (sort-helper array)\n    (cond\n      [(empty? array)\
    \ empty]\n      [(empty? (rest array)) array]\n      [else\n       (let* ([first\
    \ (first array)]\n              [second (second array)]\n              [sum (+\
    \ first second)]\n              [rest (rest (rest array))])\n         (cond\n\
    \           [(odd? sum)\n            (cons first (cons second (sort-helper rest)))]\n\
    \           [else\n            (cons second (cons first (sort-helper rest))))]))]))\n\
    \  (sort-helper array))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([first (first array)]\n           \
    \ [last (last array)]\n            [sum (+ first last)]\n            [sorted (sort\
    \ array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (empty? (rest array))\n          (list (first\
    \ array))\n          (let* ([first-value (first array)]\n                 [last-value\
    \ (last array)]\n                 [sum (+ first-value last-value)]\n         \
    \        [sorted-array (sort array <)])\n            (if (odd? sum)\n        \
    \        sorted-array\n                (reverse sorted-array))))))\n", "  (if\
    \ (empty? array)\n      (list)\n      (let* ([first (first array)]\n         \
    \    [last (last array)]\n             [sum (+ first last)]\n             [rest\
    \ (rest (butlast array))])\n        (if (odd? sum)\n            (sort array <)\n\
    \            (sort array >)))))\n", "  (let loop ([array array] [result '()])\n\
    \    (cond [(empty? array) result]\n          [(= (add1 (length array)) (add1\
    \ (length result)))\n           (reverse result)]\n          [else\n         \
    \  (let ([first (first array)]\n                 [last (last array)])\n      \
    \       (if (odd? (+ first last))\n                 (loop (rest array) (cons first\
    \ result))\n                 (loop (rest array) (cons last result))))])))\n",
  "  (if (empty? array)\n      (list)\n      (let ([first (first array)]\n       \
    \     [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (define (sort-array-helper array)\n\
    \    (cond\n      [(empty? array) empty]\n      [(empty? (rest array)) array]\n\
    \      [else\n       (let ([first (first array)]\n             [second (second\
    \ array)])\n         (if (odd? (+ first second))\n             (cons first (sort-array-helper\
    \ (cons second (rest (rest array)))))\n             (cons second (sort-array-helper\
    \ (cons first (rest (rest array)))))))]))\n  (sort-array-helper array))\n", " \
    \ (define (sort-array-helper array)\n    (cond\n      [(empty? array) empty]\n\
    \      [(= (length array) 1) array]\n      [else\n       (let* ([first (first\
    \ array)]\n              [last (last array)]\n              [rest (rest (butlast\
    \ array))]\n              [sorted-rest (sort-array-helper rest)])\n         (if\
    \ (odd? (+ first last))\n             (append (list first) sorted-rest (list last))\n\
    \             (append (list last) sorted-rest (list first))))]))\n  (sort-array-helper\
    \ array))\n", "  (if (empty? array)\n      (list)\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (define (sort-array-helper\
    \ array)\n    (if (null? array)\n        '()\n        (let* ([first (car array)]\n\
    \               [last (last array)]\n               [sum (+ first last)])\n  \
    \        (if (odd? sum)\n              (sort array <)\n              (sort array\
    \ >)))))\n  (sort-array-helper array))\n", "  (define (sort-helper array)\n  \
    \  (cond\n      [(empty? array) empty]\n      [(empty? (rest array)) array]\n\
    \      [else\n       (let ([first (first array)]\n             [second (first\
    \ (rest array))])\n         (cond\n           [(< first second) (cons first (sort-helper\
    \ (rest array)))]\n           [else (cons second (sort-helper (cons first (rest\
    \ (rest array)))))]))]))\n  (let ([sum (add (first array) (last array))])\n  \
    \  (if (odd? sum)\n        (sort-helper array)\n        (reverse (sort-helper\
    \ array)))))\n", "  (if (null? array)\n      '()\n      (let ((first (car array))\n\
    \            (last (car (reverse array))))\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (define (sort-helper\
    \ array)\n    (cond\n      [(empty? array) empty]\n      [(= (length array) 1)\
    \ array]\n      [else\n       (let ([first (first array)]\n             [rest\
    \ (rest array)])\n         (cond\n           [(= (add1 (length rest)) 1)\n   \
    \         (if (odd? (add first (first rest)))\n                (list first (first\
    \ rest))\n                (list (first rest) first))]\n           [else\n    \
    \        (let ([sorted-rest (sort-helper rest)])\n              (if (odd? (add\
    \ first (first sorted-rest)))\n                  (cons first sorted-rest)\n  \
    \                (cons (first sorted-rest) (cons first (rest sorted-rest)))))]))]))\n\
    \  (sort-helper array))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([first (first array)]\n           \
    \ [last (last array)]\n            [sum (+ first last)]\n            [sorted (sort\
    \ array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (if (null?\
    \ array)\n      (list)\n      (let ([first (car array)]\n            [last (car\
    \ (reverse array))])\n        (if (odd? (+ first last))\n            (sort array\
    \ <)\n            (sort array >)))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(empty? (rest array)) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (cond\n         [(odd? (+ first last))\n\
    \          (sort array <)]\n         [else\n          (sort array >)]))]))\n",
  "  (define (sort-helper array)\n    (if (null? array)\n        array\n        (let\
    \ ([first (car array)]\n              [rest (cdr array)])\n          (if (null?\
    \ rest)\n              array\n              (let ([last (car (reverse array))])\n\
    \                (if (odd? (+ first last))\n                    (sort array <)\n\
    \                    (sort array >)))))))\n  (sort-helper array))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (odd? (+ (first array) (last array)))\n    \
    \      (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (even? (+ (first array) (last array)))\n          (sort\
    \ array <)\n          (sort array >))))\n", "  (define (sum-of-first-and-last-index-value\
    \ array)\n    (+ (car array) (car (reverse array))))\n  (define (sort-ascending\
    \ array)\n    (sort array <))\n  (define (sort-descending array)\n    (sort array\
    \ >))\n  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n\
    \    [(odd? (sum-of-first-and-last-index-value array))\n     (sort-ascending array)]\n\
    \    [else (sort-descending array)]))\n", "  (cond [(empty? array) (list)]\n \
    \       [(empty? (rest array)) array]\n        [else (sort_array (sort-array-helper\
    \ array))]))\n", "  (define (sum_first_last array)\n    (define (sum_first_last-iter\
    \ array sum)\n      (if (null? array)\n          sum\n          (sum_first_last-iter\
    \ (cdr array) (+ sum (car array)))))\n    (sum_first_last-iter array 0))\n  (define\
    \ (sort-iter array)\n    (if (null? array)\n        (list)\n        (let ([x (car\
    \ array)]\n              [xs (cdr array)])\n          (append (sort-iter (filter\
    \ (lambda (y) (<= y x)) xs))\n                  (list x)\n                  (sort-iter\
    \ (filter (lambda (y) (> y x)) xs))))))\n  (if (odd? (sum_first_last array))\n\
    \      (sort-iter array)\n      (reverse (sort-iter array))))\n", "  (if (empty?\
    \ array)\n      (list)\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (define (sort-helper array)\n    (cond [(empty?\
    \ array) empty]\n          [(empty? (rest array)) array]\n          [(< (first\
    \ array) (second array)) (cons (first array) (sort-helper (rest array)))]\n  \
    \        [else (cons (second array) (sort-helper (cons (first array) (rest (rest\
    \ array)))))]))\n  (if (even? (+ (first array) (last array)))\n      (reverse\
    \ (sort-helper array))\n      (sort-helper array)))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (cond\n         [(odd?\
    \ (+ first last))\n          (sort array <)]\n         [else\n          (sort\
    \ array >)]))]))\n", "  (if (empty? array)\n      (list)\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (if (null?\
    \ array)\n      (list)\n      (let ([first (car array)]\n            [last (car\
    \ (reverse array))])\n        (if (odd? (+ first last))\n            (sort array\
    \ <)\n            (sort array >)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
