name: HumanEval_82_prime_length
language: rkt
prompt: "#lang racket\n\n#| Write a function that takes a string and returns #t if\
  \ the string\nlength is a prime number or #f otherwise\nExamples\n>>> (prime_length\
  \ \"Hello\")\n#t\n>>> (prime_length \"abcdcba\")\n#t\n>>> (prime_length \"kittens\"\
  )\n#t\n>>> (prime_length \"orange\")\n#f|#\n(define (prime_length string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n\
  \    (check-equal? (candidate \"Hello\") #t)\n    (check-equal? (candidate \"abcdcba\"\
  ) #t)\n    (check-equal? (candidate \"kittens\") #t)\n    (check-equal? (candidate\
  \ \"orange\") #f)\n    (check-equal? (candidate \"wow\") #t)\n    (check-equal?\
  \ (candidate \"world\") #t)\n    (check-equal? (candidate \"MadaM\") #t)\n    (check-equal?\
  \ (candidate \"Wow\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal?\
  \ (candidate \"HI\") #t)\n    (check-equal? (candidate \"go\") #t)\n    (check-equal?\
  \ (candidate \"gogo\") #f)\n    (check-equal? (candidate \"aaaaaaaaaaaaaaa\") #f)\n\
  \    (check-equal? (candidate \"Madam\") #t)\n    (check-equal? (candidate \"M\"\
  ) #f)\n    (check-equal? (candidate \"0\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (prime? (string-length string)))\n", " \
    \ (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n\
    \    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n     \
    \ [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n     \
    \      [(= i n) #t]\n           [(zero? (modulo n i)) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divisors\
    \ n)\n      (for/list ([i (in-range 1 (+ 1 (quotient n 2)))])\n        (if (zero?\
    \ (modulo n i)) i)))\n    (empty? (divisors n)))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n   \
    \ (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n\
    \ 1)))\n  (is-prime? (string-length string)))\n", "  (define (is-prime? n)\n \
    \   (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n   \
    \ (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n  \
    \  (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n\
    \ i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n   \
    \ (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0)\
    \ #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n\
    \       (define (iter i)\n         (cond\n           [(= i n) #t]\n          \
    \ [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter\
    \ 3)]))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (cond\
    \ [(= n 1) #f]\n          [(= n 2) #t]\n          [(= (remainder n 2) 0) #f]\n\
    \          [else\n           (define (iter i)\n             (cond [(> i (sqrt\
    \ n)) #t]\n                   [(= (remainder n i) 0) #f]\n                   [else\
    \ (iter (+ i 1))]))\n           (iter 3)]))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (prime-helper n (- i 1)))))\n    (prime-helper n (- n 1)))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n div)\n      (cond [(= div 1) #t]\n            [(= (modulo n div) 0) #f]\n\
    \            [else (prime-helper n (- div 1))]))\n    (prime-helper n (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (is-prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n      \
    \  [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n \
    \             #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i\
    \ 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(zero? (modulo n i)) #f]\n           [else (iter (+ i\
    \ 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i\
    \ 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0)\
    \ #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (cond ((= n\
    \ 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (prime?-iter\
    \ 3 n))))\n  (define (prime?-iter test-divisor n)\n    (cond ((> (* test-divisor\
    \ test-divisor) n) #t)\n          ((divides? test-divisor n) #f)\n          (else\
    \ (prime?-iter (+ test-divisor 2) n))))\n  (define (divides? a b)\n    (= (remainder\
    \ b a) 0))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (prime?\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n", " \
    \ (define (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i\
    \ 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n      \
    \  [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i)\
    \ 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (is-prime (string-length string)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (prime-helper n divisor)\n      (cond ((= divisor 1)\
    \ #t)\n            ((= (modulo n divisor) 0) #f)\n            (else (prime-helper\
    \ n (- divisor 1)))))\n    (prime-helper n (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (divides? a b)\n      (=\
    \ (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n \
    \       [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (-\
    \ i 1))]))\n    (iter (- n 1)))\n  (is-prime (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n      \
    \  [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (cond\n   \
    \   [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n    \
    \   (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(zero?\
    \ (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(zero? (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define (prime?\
    \ n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n    \
    \    [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (is-prime (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n\
    \ 1)))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n\
    \ 2) #t)\n          ((even? n) #f)\n          (else (prime?-iter n 3))))\n  (define\
    \ (prime?-iter n i)\n    (cond ((> i (sqrt n)) #t)\n          ((= (modulo n i)\
    \ 0) #f)\n          (else (prime?-iter n (+ i 2)))))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n\
    \ 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i\
    \ 3))\n             (cond ((= i n) #t)\n                   ((= (remainder n i)\
    \ 0) #f)\n                   (else (loop (+ i 2))))))))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n   \
    \ (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (divides? a b)\n      (=\
    \ (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n      \
    \  [else (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n  \
    \  (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n      \
    \  [else (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n", "  (define (is-prime?\
    \ n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (is-prime? n)\n  \
    \  (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n\
    \ i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n     \
    \ [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n     \
    \      [(> (* i i) n) #t]\n           [(= (modulo n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (cond [(= n 1) #f]\n          [(= n 2) #t]\n        \
    \  [(even? n) #f]\n          [else (define (iter i)\n                  (cond [(=\
    \ i n) #t]\n                        [(= (remainder n i) 0) #f]\n             \
    \           [else (iter (+ i 1))]))\n                (iter 3)]))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else (define (iter i)\n             \
    \ (cond\n                [(= i n) #t]\n                [(= (remainder n i) 0)\
    \ #f]\n                [else (iter (+ i 1))]))\n            (iter 3)]))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (cond\n      [(= n 1)\
    \ #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(= i n) #t]\n           [(= (remainder n i)\
    \ 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1\
    \ (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (null? (divisors\
    \ n)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n \
    \      (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(=\
    \ (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (cond\n   \
    \   [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n    \
    \   (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(=\
    \ (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (cond\n   \
    \   [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n    \
    \   (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(=\
    \ (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= n (find-divisor n 2)))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (define (divides? a b)\n      (=\
    \ (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime (string-length string)))\n", "  (define (prime? n)\n \
    \   (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divisible? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n     \
    \   [else (iter (+ i 1))]))\n    (iter 2))\n  (is-prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divides? a b)\n      (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (is-prime? n)\n\
    \    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n\
    \        (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else (let loop ((i 3))\n                  (cond ((= i n)\
    \ #t)\n                        ((= (remainder n i) 0) #f)\n                  \
    \      (else (loop (+ i 2))))))))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n      \
    \  [else (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n      \
    \  [else (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (divides? a b)\n      (=\
    \ (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n  \
    \  (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n     \
    \ [else\n       (define (iter i)\n         (cond\n           [(> i (sqrt n)) #t]\n\
    \           [(= (modulo n i) 0) #f]\n           [else (iter (+ i 1))]))\n    \
    \   (iter 3)]))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n\
    \    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n        \
    \  ((even? n) #f)\n          (else\n           (let loop ((i 3))\n           \
    \  (cond ((&gt; i (sqrt n)) #t)\n                   ((= (modulo n i) 0) #f)\n\
    \                   (else (loop (+ i 2))))))))\n  (prime? (string-length string)))\n\
    </code>\n", "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime? (string-length string)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-prime (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (-\
    \ n 1)))\n  (prime? (string-length string)))\n", "  (define (prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n \
    \      (define (divisible? n d)\n         (cond\n           [(= d 1) #f]\n   \
    \        [(= (modulo n d) 0) #t]\n           [else (divisible? n (- d 1))]))\n\
    \       (divisible? n (- n 1))]))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime? (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
