name: HumanEval_162_string_to_md5
language: rkt
prompt: "#lang racket\n\n#| Given a string 'text', return its md5 hash equivalent\
  \ string.\nIf 'text' is an empty string, return #f.\n>>> (string_to_md5 \"Hello\
  \ world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"|#\n(define (string_to_md5 text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n\
  \    (check-equal? (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\"\
  )\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate \"A B C\"\
  ) \"0ef78513b0cb8cef12743f5aeb35f888\")\n    (check-equal? (candidate \"password\"\
  ) \"5f4dcc3b5aa765d61d8327deb882cf99\")\n))\n\n(test-humaneval)"
completions: ["  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'hex)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5\
    \ text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (let ([md5 (make-hasheq)])\n        (hash-set! md5 'algorithm 'md5)\n   \
    \     (hash-set! md5 'encoding 'binary)\n        (hash-set! md5 'text text)\n\
    \        (hash-ref (hash-ref (hash-ref md5 'digest) 'md5) 'digest))))\n", "  (if\
    \ (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'string)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string/locale\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'hex)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string/locale (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5\
    \ text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (let ([md5\
    \ (md5 text)])\n        (bytes->string/utf-8 (bytes-append (bytes-ref md5 0)\n\
    \                                           (bytes-ref md5 1)\n              \
    \                             (bytes-ref md5 2)\n                            \
    \               (bytes-ref md5 3)\n                                          \
    \ (bytes-ref md5 4)\n                                           (bytes-ref md5\
    \ 5)\n                                           (bytes-ref md5 6)\n         \
    \                                  (bytes-ref md5 7)\n                       \
    \                    (bytes-ref md5 8)\n                                     \
    \      (bytes-ref md5 9)\n                                           (bytes-ref\
    \ md5 10)\n                                           (bytes-ref md5 11)\n   \
    \                                        (bytes-ref md5 12)\n                \
    \                           (bytes-ref md5 13)\n                             \
    \              (bytes-ref md5 14)\n                                          \
    \ (bytes-ref md5 15))))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 (string->bytes/utf-8 text)) 'digest)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (let ([md5 (md5 text)])\n\
    \        (string-join (map (\u03BB (x) (format \"~x\" x)) md5) \"\"))))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'hex)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (let ([hash (md5 text)])\n\
    \        (bytes->string/utf-8 (bytes-append hash #\"\")))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'hex)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5\
    \ text) 'string)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n    \
    \  #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\
    \")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (bytes->hex-string/locale (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 (string->bytes/utf-8 text)) 'md5)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'md5)))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->string/utf-8\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n  \
    \    #f\n      (hash-ref (md5 text) 'hex)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (define (md5-hex-string hash)\n    (bytes->hex-string (hash-bytes hash)))\n \
    \ (define (md5-string text)\n    (md5-hex-string (string->bytes/utf-8 text)))\n\
    \  (if (string=? text \"\")\n      #f\n      (md5-string text)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'hex)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (let ([md5 (make-hasheq)])\n      \
    \  (hash-set! md5 'algorithm 'md5)\n        (hash-set! md5 'encoding 'binary)\n\
    \        (hash-set! md5 'text text)\n        (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'hex)))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string/locale\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (hash \"md5\" text) \"md5\")))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (string->bytes/utf-8 text)\
    \ 'md5)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (let ([hash\
    \ (md5 text)])\n        (bytes->string/utf-8 (bytes-append hash #\"\")))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (let ([hash (md5 text)])\n        (bytes->string/utf-8\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (require openssl/md5)\n  (if (string=? text \"\")\n      #f\n      (bytes->string/utf-8\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n  \
    \    #f\n      (hash-ref (string->bytes/utf-8 text) 'md5)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'string)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (bytes->hex-string/locale (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'string)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (let ([md5 (md5 text)])\n        (bytes->string/utf-8\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'md5)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5\
    \ text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n  \
    \    #f\n      (hash-ref (string->bytes/utf-8 text) 'md5)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (let ([md5 (md5 text)])\n        (bytes->string/utf-8\
    \ (bytes-append (bytes-ref md5 0)\n                                          \
    \ (bytes-ref md5 1)\n                                           (bytes-ref md5\
    \ 2)\n                                           (bytes-ref md5 3)\n         \
    \                                  (bytes-ref md5 4)\n                       \
    \                    (bytes-ref md5 5)\n                                     \
    \      (bytes-ref md5 6)\n                                           (bytes-ref\
    \ md5 7)\n                                           (bytes-ref md5 8)\n     \
    \                                      (bytes-ref md5 9)\n                   \
    \                        (bytes-ref md5 10)\n                                \
    \           (bytes-ref md5 11)\n                                           (bytes-ref\
    \ md5 12)\n                                           (bytes-ref md5 13)\n   \
    \                                        (bytes-ref md5 14)\n                \
    \                           (bytes-ref md5 15))))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'string)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (string->bytes/utf-8 text) 'md5)))\n",
  "  (if (string=? text \"\")\n      #f\n      (let ([hash (md5 (string->bytes/utf-8\
    \ text))])\n        (bytes->string/utf-8 (bytes-append (bytes-take hash 0 4)\n\
    \                                           (bytes-take hash 4 4)\n          \
    \                                 (bytes-take hash 8 4)\n                    \
    \                       (bytes-take hash 12 4))))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'hex)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'string)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'string)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8\
    \ text)) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (hash-ref (hash \"md5\" (string->bytes/utf-8 text)) \"digest\")))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'hex)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'string)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 (string->bytes/utf-8 text)) 'md5)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (let ([md5 (md5 text)])\n        (bytes->string/utf-8\
    \ (bytes-append md5 #\"\")))))\n", "  (if (string=? text \"\")\n      #f\n   \
    \   (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n", "  (if\
    \ (string=? text \"\")\n      #f\n      (bytes->hex-string/locale (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'string)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (let ([hash (md5 (string->bytes/utf-8\
    \ text))])\n        (bytes->string/utf-8 (bytes-append (bytes-take hash 0 4)\n\
    \                                           (bytes-take hash 4 4)\n          \
    \                                 (bytes-take hash 8 4)\n                    \
    \                       (bytes-take hash 12 4))))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'hex)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'string)))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->string/utf-8\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n  \
    \    #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\
    \")\n      #f\n      (bytes->string/utf-8 (md5 (string->bytes/utf-8 text)))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string/locale\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (let ([md5 (md5 text)])\n        (bytes->string/utf-8 (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append (bytes-append\
    \ (bytes-append (bytes-append (bytes", "  (if (string=? text \"\")\n      #f\n\
    \      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (let ([hash (md5 text)])\n        (bytes->string/utf-8\
    \ (bytes-append hash #\"\")))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (bytes->hex-string (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'md5)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'string)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
