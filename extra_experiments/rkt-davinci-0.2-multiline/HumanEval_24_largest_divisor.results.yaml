language: rkt
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n d)\n    (if (= (remainder n d) 0)\n  \
    \      (largest-divisor-iter n (- d 1))\n        d))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfup_ejz.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfup_ejz.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfup_ejz.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfup_ejz.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfup_ejz.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/\
    \ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n    \
    \    (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n)\n    (cond\n      [(= n 1) 1]\n      [(even? n) (divisor\
    \ (/ n 2))]\n      [else (divisor (+ n 1))]))\n  (divisor n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy6j9nelu.rkt:21:4

    actual:     1

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy6j9nelu.rkt:22:4

    actual:     1

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy6j9nelu.rkt:23:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        (error \"\
    No divisors found\")\n        (if (= (modulo n i) 0)\n            i\n        \
    \    (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:20:4


    No divisors found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:21:4


    No divisors found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        (if (= i 1)\n\
    \            1\n            (iter (- i 1)))\n        (iter (- i 1))))\n  (iter\
    \ (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn4a8573.rkt:22:4

    actual:     1

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn4a8573.rkt:23:4

    actual:     1

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn4a8573.rkt:24:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (find-divisor n test-divisor)\n    (if (evenly-divides? n test-divisor)\n\
    \        test-divisor\n        (find-divisor n (+ test-divisor 1))))\n  (find-divisor\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoh0bzyzn.rkt:8:9: evenly-divides?: unbound identifier\n  in: evenly-divides?\n\
    \  location...:\n   /tmp/tmpoh0bzyzn.rkt:8:9\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        (error \"\
    No divisors\")\n        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpf0zyyq6p.rkt:20:4


    No divisors

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpf0zyyq6p.rkt:21:4


    No divisors

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf0zyyq6p.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf0zyyq6p.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n    \
    \    (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (find-divisor n test-divisor)\n    (if (evenly-divisible? n test-divisor)\n\
    \        test-divisor\n        (find-divisor n (+ test-divisor 1))))\n  (find-divisor\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcn67rhuv.rkt:8:9: evenly-divisible?: unbound identifier\n  in:\
    \ evenly-divisible?\n  location...:\n   /tmp/tmpcn67rhuv.rkt:8:9\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (zero? (modulo n divisor))\n\
    \        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= i n)\n        (error \"\
    No divisor found\")\n        (if (= (modulo n i) 0)\n            i\n         \
    \   (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:20:4


    No divisor found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:21:4


    No divisor found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor-iter i)\n    (if (= (remainder n i) 0)\n        i\n \
    \       (divisor-iter (- i 1))))\n  (divisor-iter (- n 1)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (let loop ((i n))\n    (if (= (modulo n i) 0)\n        i\n        (loop\
    \ (- i 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqq7mgdr.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqq7mgdr.rkt:18:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqq7mgdr.rkt:19:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqq7mgdr.rkt:20:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbqq7mgdr.rkt:21:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter (/ n\
    \ 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter (/ n\
    \ 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n i)\n    (if (= (modulo n i) 0)\n        i\n       \
    \ (divisor n (+ i 1))))\n  (divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i n)\n    (if (= (remainder n i) 0)\n  \
    \      (largest-divisor-iter (+ i 1) n)\n        (- i 1)))\n  (largest-divisor-iter\
    \ 2 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjfb2sdu.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjfb2sdu.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjfb2sdu.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter n))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 1
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpur6m9nn7.rkt:15:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n    \
    \    (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= 0 (modulo n i))\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        (largest-divisor-iter n (- divisor 1))\n        (+ divisor 1)))\n\
    \  (largest-divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        (if (= i 1)\n\
    \            0\n            i)\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp746s17z8.rkt:20:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp746s17z8.rkt:21:4

    actual:     0

    expected:   1

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor i)\n    (if (= (remainder n i) 0)\n        i\n      \
    \  (divisor (+ i 1))))\n  (divisor 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdzeo9mjx.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdzeo9mjx.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdzeo9mjx.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdzeo9mjx.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter current-divisor n)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest-divisor-iter (- current-divisor 1) n)\n\
    \        current-divisor))\n  (largest-divisor-iter (- n 1) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph_kbc1tj.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph_kbc1tj.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph_kbc1tj.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph_kbc1tj.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph_kbc1tj.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n    \
    \    (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (for/first ([i (in-range 1 n)])\n    (when (zero? (modulo n i)) i)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps7iyawb9.rkt:17:4

    actual:     1

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps7iyawb9.rkt:18:4

    actual:     1

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps7iyawb9.rkt:19:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-helper n i)\n    (if (= i n)\n        n\n   \
    \     (if (= (modulo n i) 0)\n            (largest-divisor-helper n (+ i 1))\n\
    \            (largest-divisor-helper n (+ i 1)))))\n  (largest-divisor-helper\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2w924yyk.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2w924yyk.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2w924yyk.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2w924yyk.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2w924yyk.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (find-divisor n test-divisor)\n    (if (&gt; (square test-divisor)\
    \ n)\n        n\n        (if (divides? test-divisor n)\n            (find-divisor\
    \ n (+ test-divisor 1))\n            (find-divisor n (+ test-divisor 1)))))\n\
    \  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp_tq3s4m3.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 15\n  context...:\n  \
    \ /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        (largest-divisor-iter n (- divisor 1))\n        (+ divisor 1)))\n\
    \  (largest-divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf4it39uq.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/\
    \ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n i)\n    (if (= (modulo n i) 0)\n        i\n       \
    \ (divisor n (+ i 1))))\n  (divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzv4ylbb.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (helper n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo\
    \ n i))\n            (helper n (- i 1))\n            (helper n (- i 1)))))\n \
    \ (helper n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n  \
    \  (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppm9aydca.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppm9aydca.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppm9aydca.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppm9aydca.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmppm9aydca.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (zero? (modulo n i))\n   \
    \     i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n\
    \ (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (sub1 i))))\n  (iter (sub1 n)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter test-divisor)\n    (if (= (remainder n test-divisor)\
    \ 0)\n        (largest-divisor-iter (+ test-divisor 1))\n        (- test-divisor\
    \ 1)))\n  (largest-divisor-iter 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqdaz18si.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqdaz18si.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqdaz18si.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter (- n\
    \ 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest_divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest_divisor-iter n (- i 1))\n \
    \           (largest_divisor-iter n (- i 1)))))\n  (largest_divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp_lmv2a2d.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp_lmv2a2d.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp_lmv2a2d.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp_lmv2a2d.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp_lmv2a2d.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n i)\n    (if (= n i)\n        n\n        (if (= (modulo\
    \ n i) 0)\n            i\n            (divisor n (+ i 1)))))\n  (divisor n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzccg014u.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzccg014u.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzccg014u.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzccg014u.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter (/ n\
    \ 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n current-divisor)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest-divisor-iter n (- current-divisor 1))\n\
    \        current-divisor))\n  (largest-divisor-iter n (- n 1)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4cb2qis.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4cb2qis.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4cb2qis.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4cb2qis.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4cb2qis.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/\
    \ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv2jp6u_.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv2jp6u_.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv2jp6u_.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter (/ n\
    \ 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvi_es4b.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptu7tgmqp.rkt:7:3: largest-divisor-iter: unbound identifier\n  in:\
    \ largest-divisor-iter\n  location...:\n   /tmp/tmptu7tgmqp.rkt:7:3\n"
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter current-divisor n)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest-divisor-iter current-divisor (- n 1))\n\
    \        current-divisor))\n  (largest-divisor-iter n n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mglleap.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mglleap.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mglleap.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mglleap.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3mglleap.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n    \
    \    (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/\
    \ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter (- n\
    \ 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (zero? (modulo n i))\n   \
    \     i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n\
    \ (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4wx6bqm.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4wx6bqm.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4wx6bqm.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        (largest-divisor-iter n (- divisor 1))\n        divisor))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ifrrzli.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ifrrzli.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ifrrzli.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ifrrzli.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ifrrzli.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor-iter n test-divisor)\n    (if (= (remainder n test-divisor)\
    \ 0)\n        test-divisor\n        (divisor-iter n (- test-divisor 1))))\n  (divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/\
    \ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv2jp6u_.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv2jp6u_.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv2jp6u_.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219066
- exit_code: 1
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (find-divisor n test-divisor)\n    (if (evenly-divides? n test-divisor)\n\
    \        test-divisor\n        (find-divisor n (+ test-divisor 1))))\n  (find-divisor\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoh0bzyzn.rkt:8:9: evenly-divides?: unbound identifier\n  in: evenly-divides?\n\
    \  location...:\n   /tmp/tmpoh0bzyzn.rkt:8:9\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        (error \"\
    No divisors found\")\n        (if (= (modulo n i) 0)\n            i\n        \
    \    (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:20:4


    No divisors found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:21:4


    No divisors found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/\
    \ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8zy6quxy.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (iter i)\n    (if (= (remainder n i) 0)\n        i\n        (iter\
    \ (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n    \
    \    (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        0\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0fjbr1ui.rkt:20:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0fjbr1ui.rkt:21:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0fjbr1ui.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0fjbr1ui.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter current-divisor n)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest-divisor-iter current-divisor (- n 1))\n\
    \        (- n 1)))\n  (largest-divisor-iter 2 n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuq9t3zed.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuq9t3zed.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuq9t3zed.rkt:20:4

    actual:     8

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuq9t3zed.rkt:21:4

    actual:     98

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuq9t3zed.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= i n)\n        (error \"\
    No divisor found\")\n        (if (= (modulo n i) 0)\n            i\n         \
    \   (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:20:4


    No divisor found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:21:4


    No divisor found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgtxvro18.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n     \
    \   (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter n\
    \ (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnptz9nen.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfnsb9ti.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (let loop ((i (- n 1)))\n    (if (zero? (modulo n i))\n        i\n   \
    \     (loop (- i 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219066
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        (error \"\
    No divisors found\")\n        (if (= (modulo n i) 0)\n            i\n        \
    \    (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:20:4


    No divisors found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:21:4


    No divisors found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        divisor\n        (largest-divisor-iter n (- divisor 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter i)\n    (if (= (remainder n i) 0)\n    \
    \    i\n        (largest-divisor-iter (- i 1))))\n  (largest-divisor-iter n))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu9ngb1c6.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n     \
    \   (if (zero? (modulo n i))\n            (largest-divisor-iter n (- i 1))\n \
    \           (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter n (-\
    \ n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb4_xcexz.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n        (error \"\
    No divisors found\")\n        (if (= (modulo n i) 0)\n            i\n        \
    \    (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:20:4


    No divisors found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:21:4


    No divisors found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4xwjhtm.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n>>> (largest_divisor 15)\n5|#\n(define (largest_divisor\
    \ n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n     \
    \   (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcaa4w09d.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
