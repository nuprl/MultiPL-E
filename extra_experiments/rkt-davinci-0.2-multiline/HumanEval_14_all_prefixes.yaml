name: HumanEval_14_all_prefixes
language: rkt
prompt: "#lang racket\n\n#| Return list of all prefixes from shortest to longest of\
  \ the input string\n>>> (all_prefixes \"abc\")\n(list \"a\" \"ab\" \"abc\")|#\n\
  (define (all_prefixes string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (define (all_prefixes_iter string prefixes)\n    (if (string=? string\
    \ \"\")\n        prefixes\n        (all_prefixes_iter (substring string 1)\n \
    \                          (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (let loop ([string string]\n             [prefixes (list)])\n\
    \    (if (string=? string \"\")\n        prefixes\n        (loop (substring string\
    \ 1)\n              (cons (substring string 0 1) prefixes)))))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (empty? string)\n        prefixes\n\
    \        (all_prefixes_iter (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (all_prefixes_iter string (list)))\n",
  "  (define (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n\
    \        (reverse prefixes)\n        (all_prefixes-iter (substring string 1)\n\
    \                           (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_helper (substring string\
    \ 1) (cons (string-append prefixes (substring string 0 1)) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes_helper (rest string) (append\
    \ prefixes (list (string-append prefixes (string (first string))))))))\n  (all_prefixes_helper\
    \ string (list \"\")))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_helper\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))))\n  (all_prefixes_helper string (list \"\")))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes_iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (iter prefixes string)\n    (if (string=? string \"\")\n        prefixes\n\
    \        (iter (append prefixes (list (substring string 0 1)))\n             \
    \ (substring string 1))))\n  (iter '() string))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (rest string) (append prefixes (list (string-append prefixes (first string)))))))\n\
    \  (all_prefixes_iter string (list)))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1)\n                             (append\
    \ prefixes (list string)))))\n  (all_prefixes_helper string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1)\n               \
    \            (append prefixes (list string)))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1)\n         \
    \                  (append prefixes (list string)))))\n  (all_prefixes_iter string\
    \ (list \"\")))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1)\n                           (append prefixes (list string)))))\n \
    \ (all_prefixes-iter string '()))\n", "  (for/list ([i (in-range (add1 (string-length\
    \ string)))]\n             #:when (not (zero? i)))\n    (substring string 0 i)))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_helper (substring string\
    \ 1)\n                             (append prefixes (list string)))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes-iter string prefixes)\n    (cond [(empty?\
    \ string) prefixes]\n          [else (all_prefixes-iter (rest string) (append\
    \ prefixes (list (string-append prefixes (string (first string))))))]))\n  (all_prefixes-iter\
    \ string (list \"\")))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (iter prefixes string)\n    (if (string=? string \"\"\
    )\n        prefixes\n        (iter (append prefixes (list (substring string 0\
    \ 1)))\n              (substring string 1))))\n  (iter '() string))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1)\n               \
    \            (append prefixes (list string)))))\n  (all_prefixes_iter string (list\
    \ \"\")))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes_helper string prefixes)\n \
    \   (if (empty? string)\n        prefixes\n        (all_prefixes_helper (substring\
    \ string 1)\n                             (append prefixes (list (substring string\
    \ 0 1))))))\n  (all_prefixes_helper string '()))\n", "  (for/list ([i (in-range\
    \ (add1 (string-length string)))]\n             #:when (not (zero? i)))\n    (substring\
    \ string 0 i)))\n", "  (for/list ([i (in-range (string-length string))])\n   \
    \ (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (let loop\
    \ ([string string]\n             [acc '()])\n    (if (string=? string \"\")\n\
    \        acc\n        (loop (substring string 1)\n              (cons string acc)))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (empty? string)\n      \
    \  prefixes\n        (all_prefixes_iter (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (all_prefixes_iter string (list \"\
    \")))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string (list \"\")))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (let loop ([string string]\n\
    \             [acc '()])\n    (if (empty? string)\n        acc\n        (loop\
    \ (rest string)\n              (cons (string-join (reverse acc) (list (first string)))\n\
    \                    acc)))))\n", "  (define (iter prefixes string)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (iter (append prefixes (list (substring\
    \ string 0 1)))\n              (substring string 1))))\n  (iter (list) string))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes-iter string '()))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes-iter string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1)\n         \
    \                  (append prefixes (list string)))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes_iter string prefix-list)\n\
    \    (if (string=? string \"\")\n        prefix-list\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (cons (substring string 0 1)\
    \ prefix-list))))\n  (all_prefixes_iter string '()))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1)\n                           (append prefixes (list string)))))\n \
    \ (all_prefixes_iter string '()))\n", "  (define (iter string acc)\n    (if (empty?\
    \ string)\n        acc\n        (iter (rest string) (cons (string-&gt;list string)\
    \ acc))))\n  (iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes-iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (cond [(empty? string) prefixes]\n          [else (all_prefixes-iter (rest\
    \ string) (append prefixes (list (string-append prefixes (first string)))))]))\n\
    \  (all_prefixes-iter string (list)))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1)\n         \
    \                  (append prefixes (list string)))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string acc)\n    (if (empty? string)\n\
    \        acc\n        (all_prefixes_iter (rest string) (append acc (list (string-append\
    \ (first acc) (string (first string))))))))\n  (all_prefixes_iter string (list\
    \ \"\")))\n", "  (define (iter string result)\n    (if (empty? string)\n     \
    \   result\n        (iter (rest string) (cons (string-append (first result) (string\
    \ (first string))) result))))\n  (iter string (list \"\")))\n", "  (for/list ([i\
    \ (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (all_prefixes_helper string prefixes)\n    (cond\n  \
    \    [(empty? string) prefixes]\n      [else (all_prefixes_helper (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes_helper string (list \"\")))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes-iter string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (empty? string)\n        prefixes\n\
    \        (all_prefixes_iter (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (all_prefixes_iter string (list)))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1)\n         \
    \                  (append prefixes (list string)))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string (list \"\")))\n", "  (define (all_prefixes_iter string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1)\n                           (append prefixes (list string)))))\n \
    \ (all_prefixes_iter string '()))\n", "  (define (helper string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (helper string '()))\n", " \
    \ (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n   \
    \ (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes-iter (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes-iter string (list \"\")))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes-iter (rest string) (append\
    \ prefixes (list (string-append prefixes (string (first string))))))))\n  (all_prefixes-iter\
    \ string (list)))\n", "  (define (iter string acc)\n    (if (empty? string)\n\
    \        acc\n        (iter (rest string) (cons (string-append (first acc) (string\
    \ (first string))) acc))))\n  (iter string (list \"\")))\n", "  (define (iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (iter (substring string 1) (cons (substring string 0 1) prefixes))))\n  (iter\
    \ string '()))\n", "  (for/list ([i (in-range (add1 (string-length string)))])\n\
    \    (substring string 0 i)))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string (list \"\")))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (define\
    \ (all_prefixes-iter string prefixes)\n    (cond\n      [(empty? string) prefixes]\n\
    \      [else (all_prefixes-iter (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))]))\n  (all_prefixes-iter string (list \"\
    \")))\n", "  (define (all_prefixes_iter string prefixes)\n    (cond [(empty? string)\
    \ prefixes]\n          [else (all_prefixes_iter (rest string) (cons (string-append\
    \ prefixes (list (first string))) prefixes))]))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1)\n         \
    \                  (append prefixes (list string)))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (all_prefixes_iter (rest string) (append prefixes (list\
    \ (string-append prefixes (string (first string))))))))\n  (all_prefixes_iter\
    \ string (list)))\n", "  (for/list ([i (in-range (string-length string))])\n \
    \   (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        (reverse prefixes)\n        (all_prefixes_iter (substring string 1)\n\
    \                           (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (iter string prefixes)\n    (if (string=? string\
    \ \"\")\n        prefixes\n        (iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (iter string '()))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes-iter string '()))\n", "  (define\
    \ (all_prefixes_helper string prefixes)\n    (if (empty? string)\n        prefixes\n\
    \        (all_prefixes_helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (all_prefixes_helper string (list\
    \ \"\")))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_helper string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper\
    \ (substring string 1)\n                             (append prefixes (list string)))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (iter string acc)\n    (if (empty? string)\n        acc\n        (iter\
    \ (rest string) (append acc (list (string-append (first acc) (string (first string))))))))\n\
    \  (iter string (list \"\")))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes-iter string '()))\n", "  (define (iter string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (iter (rest string) (append prefixes\
    \ (list (string-append prefixes (string (first string))))))))\n  (iter string\
    \ (list)))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes-iter\
    \ string (list \"\")))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes-iter string (list \"\")))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes_iter string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1)\n               \
    \            (append prefixes (list string)))))\n  (all_prefixes_iter string '()))\n",
  "  (define (recur string prefixes)\n    (if (string=? string \"\")\n        prefixes\n\
    \        (recur (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (recur string '()))\n", "  (define (all_prefixes-iter string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1)\n                           (append prefixes (list string)))))\n \
    \ (all_prefixes-iter string (list \"\")))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (cond [(empty? string) prefixes]\n          [else (all_prefixes_iter (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes_iter string (list \"\")))\n", "  (define (iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1)\n                           (append prefixes (list string)))))\n \
    \ (all_prefixes-iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string (list \"\")))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes-iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1)\n                           (append prefixes (list string)))))\n\
    \  (all_prefixes-iter string (list \"\")))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (add1 i))))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes-iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes-iter string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list)))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))))\n  (all_prefixes_iter string (list \"\")))\n", "  (for/list ([i\
    \ (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1)\n         \
    \                  (append prefixes (list string)))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (all_prefixes-iter (rest string) (append prefixes (list\
    \ (string-append prefixes (string (first string))))))))\n  (all_prefixes-iter\
    \ string (list)))\n", "  (define (all_prefixes_helper string acc)\n    (if (string=?\
    \ string \"\")\n        acc\n        (all_prefixes_helper (substring string 1)\
    \ (cons string acc))))\n  (all_prefixes_helper string '()))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes-iter string '()))\n", "  (define\
    \ (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes-iter (substring string 1)\n               \
    \            (append prefixes (list string)))))\n  (all_prefixes-iter string '()))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (iter prefixes string)\n    (if (string=? string\
    \ \"\")\n        prefixes\n        (iter (append prefixes (list (substring string\
    \ 0 1)))\n              (substring string 1))))\n  (iter '() string))\n", "  (define\
    \ (iter string result)\n    (if (empty? string)\n        result\n        (iter\
    \ (rest string) (cons (string-append (first result) (string (first string))) result))))\n\
    \  (iter string (list \"\")))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes_iter string '()))\n", "  (define\
    \ (all_prefixes_helper string prefixes)\n    (if (string=? string \"\")\n    \
    \    prefixes\n        (all_prefixes_helper (substring string 1) (cons (string-append\
    \ prefixes (substring string 0 1)) prefixes))))\n  (all_prefixes_helper string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1)\n                           (append prefixes (list string)))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (for/list ([i (in-range (add1 (string-length string)))]\n\
    \             #:when (not (zero? i)))\n    (substring string 0 i)))\n", "  (define\
    \ (all_prefixes_helper string prefixes)\n    (if (string=? string \"\")\n    \
    \    prefixes\n        (all_prefixes_helper (substring string 1)\n           \
    \                  (append prefixes (list string)))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_helper string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper\
    \ (substring string 1)\n                             (append prefixes (list string)))))\n\
    \  (all_prefixes_helper string '()))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1)\n                             (append\
    \ prefixes (list string)))))\n  (all_prefixes_helper string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (iter string prefixes)\n    (cond\n      [(empty? string) prefixes]\n\
    \      [else (iter (rest string) (append prefixes (list (string-append prefixes\
    \ (string (first string))))))]))\n  (iter string (list)))\n", "  (define (iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (iter (substring string 1) (cons (substring string 0 1) prefixes))))\n  (iter\
    \ string (list)))\n", "  (for/list ([i (in-range (string-length string))])\n \
    \   (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list ([i (in-range\
    \ (string-length string))])\n    (substring string 0 (+ i 1))))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (string-length string))])\n    (substring string 0 (+\
    \ i 1))))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1)\n                           (append prefixes (list string)))))\n \
    \ (all_prefixes_iter string '()))\n", "  (for/list ([i (in-range (string-length\
    \ string))])\n    (substring string 0 (+ i 1))))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_helper\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))))\n  (all_prefixes_helper string (list)))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes_iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (if (string=? string \"\")\n      (list \"\")\n      (cons (substring string\
    \ 0 1)\n            (all_prefixes (substring string 1)))))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1)\n                           (append\
    \ prefixes (list string)))))\n  (all_prefixes-iter string '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
