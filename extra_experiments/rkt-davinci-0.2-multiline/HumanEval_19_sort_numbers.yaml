name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n#| Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
  \ 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest\
  \ to largest\n>>> (sort_numbers \"three one five\")\n\"one three five\"|#\n(define\
  \ (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (string-join\n   (sort\n    (string-split numbers)\n    (lambda (a\
    \ b)\n      (< (number-to-string a) (number-to-string b))))\n   \" \"))\n", " \
    \ (define (number-to-int number)\n    (cond [(equal? number \"zero\") 0]\n   \
    \       [(equal? number \"one\") 1]\n          [(equal? number \"two\") 2]\n \
    \         [(equal? number \"three\") 3]\n          [(equal? number \"four\") 4]\n\
    \          [(equal? number \"five\") 5]\n          [(equal? number \"six\") 6]\n\
    \          [(equal? number \"seven\") 7]\n          [(equal? number \"eight\"\
    ) 8]\n          [(equal? number \"nine\") 9]))\n  (define (int-to-number number)\n\
    \    (cond [(equal? number 0) \"zero\"]\n          [(equal? number 1) \"one\"\
    ]\n          [(equal? number 2) \"two\"]\n          [(equal? number 3) \"three\"\
    ]\n          [(equal? number 4) \"four\"]\n          [(equal? number 5) \"five\"\
    ]\n          [(equal? number 6) \"six\"]\n          [(equal? number 7) \"seven\"\
    ]\n          [(equal? number 8) \"eight\"]\n          [(equal? number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond [(null? numbers) '()]\n\
    \          [(null? (cdr numbers)) numbers]\n          [(< (number-to-int (car\
    \ numbers)) (number-to-int (cadr numbers)))\n           (cons (car numbers) (sort-numbers-helper\
    \ (cdr numbers)))]\n          [else (cons (cadr numbers) (cons (car numbers) (sort-numbers-helper\
    \ (cddr numbers))))]))\n  (define (int-list-to-string int-list)\n    (cond [(null?\
    \ int-list) \"\"]\n          [else (string-append (int-to-number (car int-list))\
    \ \" \" (int-list-to-string (cdr int-list)))]))\n  (int-list-to-string (sort-numbers-helper\
    \ (string-split numbers))))\n", "  (string-join (sort (string-split numbers #\\\
    space) string<?)))\n", "  (define (sort-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(empty? (rest numbers)) (list (first numbers))]\n  \
    \    [else\n       (let ([first-number (first numbers)]\n             [rest-numbers\
    \ (rest numbers)])\n         (cond\n           [(< (first rest-numbers) first-number)\n\
    \            (cons (first rest-numbers) (sort-helper (cons first-number (rest\
    \ rest-numbers))))]\n           [else\n            (cons first-number (sort-helper\
    \ rest-numbers))]))]))\n  (string-join (sort-helper (string-split numbers #\\\
    space)) \" \"))\n", "  (define (number-to-int num)\n    (cond\n      [(string=?\
    \ num \"zero\") 0]\n      [(string=? num \"one\") 1]\n      [(string=? num \"\
    two\") 2]\n      [(string=? num \"three\") 3]\n      [(string=? num \"four\")\
    \ 4]\n      [(string=? num \"five\") 5]\n      [(string=? num \"six\") 6]\n  \
    \    [(string=? num \"seven\") 7]\n      [(string=? num \"eight\") 8]\n      [(string=?\
    \ num \"nine\") 9]))\n  (define (int-to-number num)\n    (cond\n      [(= num\
    \ 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num 2) \"two\"]\n      [(=\
    \ num 3) \"three\"]\n      [(= num 4) \"four\"]\n      [(= num 5) \"five\"]\n\
    \      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"]\n      [(= num 8) \"eight\"\
    ]\n      [(= num 9) \"nine\"]))\n  (string-join (map int-to-number (sort (map\
    \ number-to-int (string-split numbers #\\space)))) #\\space))\n", "  (string-join\
    \ (sort (string-split numbers #\\space) <) #\\space))\n", "  (string-join\n  \
    \ (sort (string-split numbers)\n         (lambda (a b)\n           (< (string->number\
    \ (string-join (string-split a)))\n              (string->number (string-join\
    \ (string-split b))))))\n   \" \"))\n", "  (string-join (sort (string-split numbers\
    \ #\\space) <) #\\space))\n", "  (string-join (sort (string-split numbers #\\\
    space)\n                     (lambda (a b)\n                       (< (string->number\
    \ (string-append \"0\" a))\n                          (string->number (string-append\
    \ \"0\" b)))))\n               #\\space))\n", "  (string-join (sort (string-split\
    \ numbers #\\space) string<?)))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers)\n    (lambda (a b)\n      (< (string->number a) (string->number b))))\n\
    \   \" \"))\n", "  (string-join (sort (string-split numbers) < #:key (compose\
    \ number->string string->number)) \" \"))\n```\n\n## [Sorting on planet Twisted-3-7](https://www.codewars.com/kata/sorting-on-planet-twisted-3-7)\n\
    \n```racket\n#lang racket\n", "  (string-join\n   (sort\n    (map string->number\n\
    \         (string-split (regexp-replace #rx\"zero\" numbers \"0\") #\\space))\n\
    \    <)\n   \" \"))\n", "  (string-join (sort (string-split numbers) string<?\
    \ #:key (\u03BB (x) (string->number x))) \" \"))\n```\n\n## Tests\n\n```racket\n\
    #lang racket\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n\
    \    (lambda (a b)\n      (< (string->number a) (string->number b))))\n   #\\\
    space))\n", "  (string-join\n   (sort\n    (map string->number\n         (string-split\
    \ numbers #\\space))\n    <)\n   \" \"))\n", "  (define (number-to-int number)\n\
    \    (cond\n      [(string=? number \"zero\") 0]\n      [(string=? number \"one\"\
    ) 1]\n      [(string=? number \"two\") 2]\n      [(string=? number \"three\")\
    \ 3]\n      [(string=? number \"four\") 4]\n      [(string=? number \"five\")\
    \ 5]\n      [(string=? number \"six\") 6]\n      [(string=? number \"seven\")\
    \ 7]\n      [(string=? number \"eight\") 8]\n      [(string=? number \"nine\"\
    ) 9]))\n  (define (int-to-number number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (list number)]\n           [(< number (first numbers)) (cons number numbers)]\n\
    \           [else (cons (first numbers) (insert-number number (rest numbers)))]))\n\
    \       (insert-number (first numbers) (sort-numbers-helper (rest numbers)))]))\n\
    \  (string-join (map int-to-number (sort-numbers-helper (map number-to-int (string-split\
    \ numbers)))) \" \"))\n", "  (string-join (sort (string-split numbers) <) \" \"\
    ))\n", "  (define (numeral->number numeral)\n    (cond\n      [(string=? numeral\
    \ \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral\
    \ \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral\
    \ \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral\
    \ \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral\
    \ \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number->numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (define (sort-numbers-helper-helper\
    \ numbers)\n      (if (null? numbers)\n          '()\n          (cons (car numbers)\
    \ (sort-numbers-helper-helper (cdr numbers)))))\n    (define (sort-numbers-helper-helper-helper\
    \ numbers)\n      (if (null? numbers)\n          '()\n          (cons (car numbers)\
    \ (sort-numbers-helper-helper-helper (cdr numbers)))))\n    (define (sort-numbers-helper-helper-helper-helper\
    \ numbers)\n      (if (null? numbers)\n          '()\n          (cons (car numbers)\
    \ (sort-numbers-helper-helper-helper-helper (cdr numbers)))))\n    (define (sort-numbers-helper-helper-helper-helper-helper\
    \ numbers)\n      (if (null? numbers)\n          '()\n          (cons (car numbers)\
    \ (sort-numbers", "  (string-join (sort (string-split numbers) < #:key (\u03BB\
    \ (x) (string->number x))) \" \"))\n", "  (string-join (sort (string-split numbers)\
    \ < #:key (lambda (x) (string->number x))) \" \"))\n```\n\n## Tests\n\n```racket\n\
    #lang racket\n", "  (string-join (sort (string-split numbers) string<? #:key (\u03BB\
    \ (x) (string->number x))) \" \"))\n", "  (define (number-to-int number)\n   \
    \ (cond\n      [(string=? number \"zero\") 0]\n      [(string=? number \"one\"\
    ) 1]\n      [(string=? number \"two\") 2]\n      [(string=? number \"three\")\
    \ 3]\n      [(string=? number \"four\") 4]\n      [(string=? number \"five\")\
    \ 5]\n      [(string=? number \"six\") 6]\n      [(string=? number \"seven\")\
    \ 7]\n      [(string=? number \"eight\") 8]\n      [(string=? number \"nine\"\
    ) 9]))\n  (define (int-to-number number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (cons\
    \ (int-to-number (car (sort (map number-to-int numbers) <)))\n             (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (string-join (sort-numbers-helper (string-split numbers\
    \ #\\space)) \" \"))\n", "  (string-join (sort (string-split numbers) <) \" \"\
    ))\n", "  (define (numeral-&gt;number numeral)\n    (cond [(string=? numeral \"\
    zero\") 0]\n          [(string=? numeral \"one\") 1]\n          [(string=? numeral\
    \ \"two\") 2]\n          [(string=? numeral \"three\") 3]\n          [(string=?\
    \ numeral \"four\") 4]\n          [(string=? numeral \"five\") 5]\n          [(string=?\
    \ numeral \"six\") 6]\n          [(string=? numeral \"seven\") 7]\n          [(string=?\
    \ numeral \"eight\") 8]\n          [(string=? numeral \"nine\") 9]))\n  (define\
    \ (number-&gt;numeral number)\n    (cond [(= number 0) \"zero\"]\n          [(=\
    \ number 1) \"one\"]\n          [(= number 2) \"two\"]\n          [(= number 3)\
    \ \"three\"]\n          [(= number 4) \"four\"]\n          [(= number 5) \"five\"\
    ]\n          [(= number 6) \"six\"]\n          [(= number 7) \"seven\"]\n    \
    \      [(= number 8) \"eight\"]\n          [(= number 9) \"nine\"]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond [(null? numbers) '()]\n          [(null?\
    \ (cdr numbers)) numbers]\n          [(&lt; (numeral-&gt;number (car numbers))\
    \ (numeral-&gt;number (cadr numbers)))\n           (cons (car numbers) (sort-numbers-helper\
    \ (cdr numbers)))]\n          [else (cons (cadr numbers) (cons (car numbers) (sort-numbers-helper\
    \ (cddr numbers))))]))\n  (string-join (map number-&gt;numeral (sort-numbers-helper\
    \ (string-split numbers))) \" \"))\n</code>\n", "  (string-join\n   (sort\n  \
    \  (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number\
    \ b))))\n   #\\space))\n", "  (string-join\n   (sort\n    (string-split numbers\
    \ #\\space)\n    (lambda (a b)\n      (< (number-string->number a)\n         (number-string->number\
    \ b))))\n   #\\space))\n", "  (define (sort-helper numbers)\n    (cond\n     \
    \ [(null? numbers) '()]\n      [(null? (cdr numbers)) numbers]\n      [else\n\
    \       (let* ([first (car numbers)]\n              [second (cadr numbers)]\n\
    \              [rest (cddr numbers)])\n         (if (< (string->number first)\
    \ (string->number second))\n             (cons first (sort-helper (cons second\
    \ rest)))\n             (cons second (sort-helper (cons first rest)))))]))\n \
    \ (string-join (sort-helper (string-split numbers #\\space)) \" \"))\n", "  (string-join\
    \ (sort (string-split numbers) string<? ) \" \"))\n", "  (sort (string-split numbers\
    \ #\\space)\n        (lambda (x y)\n          (< (string->number (string-append\
    \ \"0\" x))\n             (string->number (string-append \"0\" y))))))\n", " \
    \ (define (number-to-int number)\n    (cond ((string=? number \"zero\") 0)\n \
    \         ((string=? number \"one\") 1)\n          ((string=? number \"two\")\
    \ 2)\n          ((string=? number \"three\") 3)\n          ((string=? number \"\
    four\") 4)\n          ((string=? number \"five\") 5)\n          ((string=? number\
    \ \"six\") 6)\n          ((string=? number \"seven\") 7)\n          ((string=?\
    \ number \"eight\") 8)\n          ((string=? number \"nine\") 9)))\n  (define\
    \ (int-to-number number)\n    (cond ((= number 0) \"zero\")\n          ((= number\
    \ 1) \"one\")\n          ((= number 2) \"two\")\n          ((= number 3) \"three\"\
    )\n          ((= number 4) \"four\")\n          ((= number 5) \"five\")\n    \
    \      ((= number 6) \"six\")\n          ((= number 7) \"seven\")\n          ((=\
    \ number 8) \"eight\")\n          ((= number 9) \"nine\")))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond ((null? numbers) '())\n          ((null? (cdr numbers))\
    \ numbers)\n          (else (let* ((first (car numbers))\n                   \
    \    (second (cadr numbers))\n                       (first-int (number-to-int\
    \ first))\n                       (second-int (number-to-int second)))\n     \
    \             (if (< first-int second-int)\n                      (cons first\
    \ (sort-numbers-helper (cdr numbers)))\n                      (cons second (sort-numbers-helper\
    \ (cons first (cddr numbers)))))))))\n  (string-join (map int-to-number (sort-numbers-helper\
    \ (string-split numbers))) \" \"))\n", "  (string-join (sort (string-split numbers\
    \ #\\space)\n                     (lambda (a b)\n                       (string<?\
    \ a b)))\n               #\\space))\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (list number)]\n           [(< number (first numbers)) (cons number numbers)]\n\
    \           [else (cons (first numbers) (insert-number number (rest numbers)))]))\n\
    \       (insert-number (first numbers) (sort-numbers-helper (rest numbers)))]))\n\
    \  (define (numbers->string numbers)\n    (cond\n      [(empty? numbers) \"\"\
    ]\n      [else (string-append (number->numeral (first numbers)) \" \" (numbers->string\
    \ (rest numbers)))]))\n  (numbers->string (sort-numbers-helper (map numeral->number\
    \ (string-split numbers)))))\n", "  (string-join\n   (sort\n    (map string->number\n\
    \         (string-split numbers #\\space))\n    <)\n   \" \"))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   \" \"))\n", "  (string-join (sort (string-split\
    \ numbers) < #:key (lambda (x) (string->number x))) \" \"))\n", "  (string-join\
    \ (sort (string-split numbers) (\u03BB (a b) (< (string->number a) (string->number\
    \ b)))) \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n\
    \    (lambda (a b)\n      (< (string->number a) (string->number b))))\n   #\\\
    space))\n", "  (define (sort-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(cons? numbers)\n       (let ([first (first numbers)]\n     \
    \        [rest (rest numbers)])\n         (cond\n           [(empty? rest) (list\
    \ first)]\n           [(< (string->number first) (string->number (first rest)))\n\
    \            (cons first (sort-helper rest))]\n           [else (cons (first rest)\
    \ (sort-helper (cons first (rest rest))))]))]))\n  (string-join (sort-helper (string-split\
    \ numbers #\\space)) \" \"))\n", "  (string-join (sort (string-split numbers #\\\
    space)\n                     <\n                     (lambda (a b)\n         \
    \              (string<? (number-to-string (string->number a))\n             \
    \                    (number-to-string (string->number b)))))\n              \
    \   #\\space))\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n\
    \    (lambda (a b)\n      (string<? a b)))\n   \" \"))\n", "  (string-join\n \
    \  (sort\n    (string-split numbers #\\space)\n    (\u03BB (a b)\n      (< (number-from-string\
    \ a)\n         (number-from-string b))))\n   #\\space))\n", "  (string-join (sort\
    \ (string-split numbers) string<?)))\n```\n\n### Testing\n\n```racket\n#lang racket\n",
  "  (define (number-to-numeral number)\n    (cond\n      [(equal? number 0) \"zero\"\
    ]\n      [(equal? number 1) \"one\"]\n      [(equal? number 2) \"two\"]\n    \
    \  [(equal? number 3) \"three\"]\n      [(equal? number 4) \"four\"]\n      [(equal?\
    \ number 5) \"five\"]\n      [(equal? number 6) \"six\"]\n      [(equal? number\
    \ 7) \"seven\"]\n      [(equal? number 8) \"eight\"]\n      [(equal? number 9)\
    \ \"nine\"]))\n  (define (numeral-to-number numeral)\n    (cond\n      [(equal?\
    \ numeral \"zero\") 0]\n      [(equal? numeral \"one\") 1]\n      [(equal? numeral\
    \ \"two\") 2]\n      [(equal? numeral \"three\") 3]\n      [(equal? numeral \"\
    four\") 4]\n      [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\"\
    ) 6]\n      [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\")\
    \ 8]\n      [(equal? numeral \"nine\") 9]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (define (smallest-numeral-and-rest\
    \ numbers)\n         (define (smallest-numeral-and-rest-helper numbers smallest-numeral\
    \ smallest-numeral-index)\n           (cond\n             [(empty? numbers) (values\
    \ smallest-numeral smallest-numeral-index)]\n             [else\n            \
    \  (define (smaller-numeral? numeral1 numeral2)\n                (cond\n     \
    \             [(equal? numeral1 numeral2) false]\n                  [(equal? numeral1\
    \ \"zero\") true]\n                  [(equal? numeral1 \"one\")\n            \
    \       (cond\n                     [(equal? numeral2 \"zero\") false]\n     \
    \                [else true])]\n                  [(equal? numeral1 \"two\")\n\
    \                   (cond\n                     [(equal? numeral2 \"zero\") false]\n\
    \                     [(equal? numeral2 \"one\") false]\n                    \
    \ [else true])]\n                  [(equal? numeral1 \"", "  (string-join\n  \
    \ (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (string<?\
    \ a b)))\n   \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers\
    \ #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number b))))\n\
    \   #\\space))\n", "  (define (number-of-number num)\n    (cond\n      [(string=?\
    \ num \"zero\") 0]\n      [(string=? num \"one\") 1]\n      [(string=? num \"\
    two\") 2]\n      [(string=? num \"three\") 3]\n      [(string=? num \"four\")\
    \ 4]\n      [(string=? num \"five\") 5]\n      [(string=? num \"six\") 6]\n  \
    \    [(string=? num \"seven\") 7]\n      [(string=? num \"eight\") 8]\n      [(string=?\
    \ num \"nine\") 9]))\n  (define (number-of-numbers nums)\n    (map number-of-number\
    \ nums))\n  (define (number-to-string num)\n    (cond\n      [(= num 0) \"zero\"\
    ]\n      [(= num 1) \"one\"]\n      [(= num 2) \"two\"]\n      [(= num 3) \"three\"\
    ]\n      [(= num 4) \"four\"]\n      [(= num 5) \"five\"]\n      [(= num 6) \"\
    six\"]\n      [(= num 7) \"seven\"]\n      [(= num 8) \"eight\"]\n      [(= num\
    \ 9) \"nine\"]))\n  (define (numbers-to-string nums)\n    (map number-to-string\
    \ nums))\n  (define (sort-numbers nums)\n    (sort (number-of-numbers nums) <))\n\
    \  (string-join (numbers-to-string (sort-numbers (string-split numbers))) \" \"\
    ))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral\
    \ \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral\
    \ \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral\
    \ \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral\
    \ \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral\
    \ \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (numbers-&gt;numerals numbers)\n    (map number-&gt;numeral\
    \ numbers))\n  (define (numerals-&gt;numbers numerals)\n    (map numeral-&gt;number\
    \ numerals))\n  (define (sort-numbers numbers)\n    (sort &lt; numbers))\n  (define\
    \ (sort-numerals numerals)\n    (sort-numbers (numerals-&gt;numbers numerals)))\n\
    \  (define (numerals-&gt;string numerals)\n    (string-join numerals \" \"))\n\
    \  (define (numbers-&gt;string numbers)\n    (numerals-&gt;string (numbers-&gt;numerals\
    \ numbers)))\n  (numbers-&gt;string (sort-numbers (numerals-&gt;numbers (string-split\
    \ numbers)))))\n</code>\nI'm not sure if I'm over-thinking this or if I'm just\
    \ not seeing the obvious solution.\n\n\nA:\n\nI", "  (define (number-to-int n)\n\
    \    (cond [(equal? n \"zero\") 0]\n          [(equal? n \"one\") 1]\n       \
    \   [(equal? n \"two\") 2]\n          [(equal? n \"three\") 3]\n          [(equal?\
    \ n \"four\") 4]\n          [(equal? n \"five\") 5]\n          [(equal? n \"six\"\
    ) 6]\n          [(equal? n \"seven\") 7]\n          [(equal? n \"eight\") 8]\n\
    \          [(equal? n \"nine\") 9]))\n  (define (int-to-number n)\n    (cond [(=\
    \ n 0) \"zero\"]\n          [(= n 1) \"one\"]\n          [(= n 2) \"two\"]\n \
    \         [(= n 3) \"three\"]\n          [(= n 4) \"four\"]\n          [(= n 5)\
    \ \"five\"]\n          [(= n 6) \"six\"]\n          [(= n 7) \"seven\"]\n    \
    \      [(= n 8) \"eight\"]\n          [(= n 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (cons (int-to-number\
    \ (apply min (map number-to-int numbers)))\n              (sort-numbers-helper\
    \ (remove (int-to-number (apply min (map number-to-int numbers))) numbers)))))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n",
  "  (string-join\n   (sort\n    (string-split numbers)\n    (lambda (a b)\n     \
    \ (< (string->number a) (string->number b))))\n   \" \"))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (number-to-string\
    \ a) (number-to-string b))))\n   \" \"))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (\u03BB (a b)\n      (< (string->number (string-append\
    \ a))\n         (string->number (string-append b)))))\n   #\\space))\n", "  (string-join\
    \ (sort (string-split numbers #\\space) <) #\\space))\n", "  (string-join\n  \
    \ (sort\n    (map number->string\n         (sort (map string->number (string-split\
    \ numbers #\\space)) <))\n    string<?)))\n", "  (string-join (sort (string-split\
    \ numbers) <) \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers)\n\
    \    (lambda (a b)\n      (< (string->number a) (string->number b))))\n   \" \"\
    ))\n", "  (define (numeral->number numeral)\n    (cond\n      [(equal? numeral\
    \ \"zero\") 0]\n      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"\
    two\") 2]\n      [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\"\
    ) 4]\n      [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n\
    \      [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n\
    \      [(equal? numeral \"nine\") 9]))\n  (define (number->numeral number)\n \
    \   (cond\n      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"\
    ]\n      [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n  \
    \    [(equal? number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal?\
    \ number 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number\
    \ 8) \"eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons number empty)]\n           [(< number (car numbers)) (cons number numbers)]\n\
    \           [else (cons (car numbers) (insert-number number (cdr numbers)))]))\n\
    \       (insert-number (numeral->number (car numbers)) (sort-numbers-helper (cdr\
    \ numbers)))]))\n  (define (numbers->string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else (string-append (number->numeral (car numbers)) \"\
    \ \" (numbers->string (cdr numbers)))]))\n  (numbers->string (sort-numbers-helper\
    \ (string-split numbers))))\n```\n\n## [Reverse a String](https://www.codewars.com/kata/5168bb5dfe9a00b126000018)\n\
    \n```racket\n#lang", "  (string-join\n   (sort\n    (string-split numbers #\\\
    space)\n    (lambda (a b)\n      (< (number-to-string a) (number-to-string b))))\n\
    \   \" \"))\n", "  (string-join\n   (sort (string-split numbers)\n         (lambda\
    \ (a b)\n           (< (string->number (string-append \"0\" a))\n            \
    \  (string->number (string-append \"0\" b)))))\n   \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n      \
    \  '()\n        (let* ([head (car numbers)]\n               [tail (cdr numbers)]\n\
    \               [sorted-tail (sort-numbers-helper tail)]\n               [sorted-head\
    \ (car sorted-tail)]\n               [sorted-tail (cdr sorted-tail)])\n      \
    \    (if (&lt; (numeral-&gt;number head) (numeral-&gt;number sorted-head))\n \
    \             (cons head (cons sorted-head sorted-tail))\n              (cons\
    \ sorted-head (cons head sorted-tail))))))\n  (string-join (map number-&gt;numeral\
    \ (sort-numbers-helper (string-split numbers))) \" \"))\n</code>\n", "  (string-join\n\
    \   (sort\n    (map string->number\n         (string-split numbers #\\space))\n\
    \    <)\n   \" \"))\n", "  (string-join\n   (sort (string-split numbers #\\space)\n\
    \         <\n         (lambda (a b)\n           (string<? (number-&gt;string (string-&gt;number\
    \ a))\n                     (number-&gt;string (string-&gt;number b)))))))\n</code>\n",
  "  (string-join\n   (sort\n    (string-split numbers)\n    (lambda (a b)\n     \
    \ (< (string->number a) (string->number b))))\n   \" \"))\n", "  (define (number-to-int\
    \ number)\n    (cond [(string=? number \"zero\") 0]\n          [(string=? number\
    \ \"one\") 1]\n          [(string=? number \"two\") 2]\n          [(string=? number\
    \ \"three\") 3]\n          [(string=? number \"four\") 4]\n          [(string=?\
    \ number \"five\") 5]\n          [(string=? number \"six\") 6]\n          [(string=?\
    \ number \"seven\") 7]\n          [(string=? number \"eight\") 8]\n          [(string=?\
    \ number \"nine\") 9]))\n  (define (int-to-number number)\n    (cond [(= number\
    \ 0) \"zero\"]\n          [(= number 1) \"one\"]\n          [(= number 2) \"two\"\
    ]\n          [(= number 3) \"three\"]\n          [(= number 4) \"four\"]\n   \
    \       [(= number 5) \"five\"]\n          [(= number 6) \"six\"]\n          [(=\
    \ number 7) \"seven\"]\n          [(= number 8) \"eight\"]\n          [(= number\
    \ 9) \"nine\"]))\n  (string-join (map int-to-number (sort (map number-to-int (string-split\
    \ numbers)) <)) \" \"))\n", "  (define (number-to-int num)\n    (cond\n      [(string=?\
    \ num \"zero\") 0]\n      [(string=? num \"one\") 1]\n      [(string=? num \"\
    two\") 2]\n      [(string=? num \"three\") 3]\n      [(string=? num \"four\")\
    \ 4]\n      [(string=? num \"five\") 5]\n      [(string=? num \"six\") 6]\n  \
    \    [(string=? num \"seven\") 7]\n      [(string=? num \"eight\") 8]\n      [(string=?\
    \ num \"nine\") 9]))\n  (define (int-to-number num)\n    (cond\n      [(= num\
    \ 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num 2) \"two\"]\n      [(=\
    \ num 3) \"three\"]\n      [(= num 4) \"four\"]\n      [(= num 5) \"five\"]\n\
    \      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"]\n      [(= num 8) \"eight\"\
    ]\n      [(= num 9) \"nine\"]))\n  (define (sort-numbers-helper nums)\n    (cond\n\
    \      [(empty? nums) empty]\n      [else\n       (cons (int-to-number (car (sort\
    \ < (map number-to-int nums))))\n             (sort-numbers-helper (cdr nums)))]))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n",
  "  (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (< (string->number (string-append \"0\" a))\n\
    \                          (string->number (string-append \"0\" b)))))\n     \
    \          #\\space))\n", "  (string-join (sort (string-split numbers) <) \" \"\
    ))\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n    (lambda\
    \ (a b)\n      (< (string->number (string-append a))\n         (string->number\
    \ (string-append b)))))\n   #\\space))\n", "  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b) (< (string->number a)\
    \ (string->number b))))\n               #\\space))\n", "  (string-join\n   (sort\n\
    \    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ (string-append \"0\" a))\n         (string->number (string-append \"0\" b)))))\n\
    \   #\\space))\n", "  (define (numeral->number numeral)\n    (cond\n      [(equal?\
    \ numeral \"zero\") 0]\n      [(equal? numeral \"one\") 1]\n      [(equal? numeral\
    \ \"two\") 2]\n      [(equal? numeral \"three\") 3]\n      [(equal? numeral \"\
    four\") 4]\n      [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\"\
    ) 6]\n      [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\")\
    \ 8]\n      [(equal? numeral \"nine\") 9]))\n  (define (number->numeral number)\n\
    \    (cond\n      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"\
    ]\n      [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n  \
    \    [(equal? number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal?\
    \ number 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number\
    \ 8) \"eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (let\
    \ ([sorted-numbers (sort-numbers-helper (rest numbers))])\n         (let ([numeral\
    \ (first numbers)])\n           (let ([number (numeral->number numeral)])\n  \
    \           (cond\n               [(empty? sorted-numbers) (cons numeral empty)]\n\
    \               [(< number (numeral->number (first sorted-numbers)))\n       \
    \         (cons numeral sorted-numbers)]\n               [else\n             \
    \   (cons (first sorted-numbers)\n                      (cons numeral (rest sorted-numbers)))]))))]))\n\
    \  (define (numbers->string numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (string-append (first numbers)\n                      (if\
    \ (empty? (rest numbers))\n                          empty\n                 \
    \         (string-append \" \" (numbers->string (rest numbers)))))]))\n  (numbers->string\
    \ (sort-numbers-helper", "  (string-join (sort (string-split numbers) < #:key\
    \ (compose number->string string->number)) \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n      [(equal? numeral\
    \ \"one\") 1]\n      [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\"\
    ) 3]\n      [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n\
    \      [(equal? numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n  \
    \    [(equal? numeral \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n \
    \ (define (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) \"\
    zero\"]\n      [(equal? number 1) \"one\"]\n      [(equal? number 2) \"two\"]\n\
    \      [(equal? number 3) \"three\"]\n      [(equal? number 4) \"four\"]\n   \
    \   [(equal? number 5) \"five\"]\n      [(equal? number 6) \"six\"]\n      [(equal?\
    \ number 7) \"seven\"]\n      [(equal? number 8) \"eight\"]\n      [(equal? number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (let ([numeral (first numbers)])\n    \
    \     (cons numeral (sort-numbers-helper (rest numbers))))]))\n  (define (sort-numbers-helper2\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (let\
    \ ([numeral (first numbers)])\n         (cons (numeral-&gt;number numeral) (sort-numbers-helper2\
    \ (rest numbers))))]))\n  (define (sort-numbers-helper3 numbers)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [else\n       (let ([number (first numbers)])\n\
    \         (cons (number-&gt;numeral number) (sort-numbers-helper3 (rest numbers))))]))\n\
    \  (define (sort-numbers-helper4 numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n      ", "  (string-join\n   (sort\n    (map string->number\n\
    \         (string-split numbers #\\space))\n    <)\n   \" \"))\n", "  (string-join\
    \ (sort (string-split numbers) < #:key (lambda (s) (string->number (string-replace\
    \ \"zero\" \"0\" s)))) \" \"))\n```\n\n## Tests\n\n```racket\n#lang racket\n",
  "  (string-join\n   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n\
    \      (string<? a b)))\n   \" \"))\n", "  (string-join (sort (string-split numbers\
    \ #\\space) <) #\\space))\n", "  (define (number-to-int num)\n    (cond\n    \
    \  [(string=? num \"zero\") 0]\n      [(string=? num \"one\") 1]\n      [(string=?\
    \ num \"two\") 2]\n      [(string=? num \"three\") 3]\n      [(string=? num \"\
    four\") 4]\n      [(string=? num \"five\") 5]\n      [(string=? num \"six\") 6]\n\
    \      [(string=? num \"seven\") 7]\n      [(string=? num \"eight\") 8]\n    \
    \  [(string=? num \"nine\") 9]))\n  (define (int-to-number num)\n    (cond\n \
    \     [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num 2) \"two\"\
    ]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"]\n      [(= num 5) \"\
    five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"]\n      [(= num\
    \ 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ nums)\n    (cond\n      [(empty? nums) empty]\n      [else\n       (cons (int-to-number\
    \ (car (sort (map number-to-int nums) <)))\n             (sort-numbers-helper\
    \ (cdr nums)))]))\n  (string-join (sort-numbers-helper (string-split numbers #\\\
    space)) \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n\
    \    (lambda (a b)\n      (string<? a b)))\n   \" \"))\n```\n\n## Tests\n\n```racket\n\
    #lang racket\n", "  (string-join\n   (sort\n    (map string->number\n        \
    \ (string-split numbers #\\space))\n    <)\n   \" \"))\n", "  (string-join\n \
    \  (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n", "  (string-join\n   (sort (string-split\
    \ numbers #\\space)\n         (lambda (a b)\n           (string<? (number-to-string\
    \ (string->number a))\n                     (number-to-string (string->number\
    \ b)))))\n   #\\space))\n", "  (define (number-to-int num)\n    (cond [(equal?\
    \ num \"zero\") 0]\n          [(equal? num \"one\") 1]\n          [(equal? num\
    \ \"two\") 2]\n          [(equal? num \"three\") 3]\n          [(equal? num \"\
    four\") 4]\n          [(equal? num \"five\") 5]\n          [(equal? num \"six\"\
    ) 6]\n          [(equal? num \"seven\") 7]\n          [(equal? num \"eight\")\
    \ 8]\n          [(equal? num \"nine\") 9]))\n  (define (int-to-number num)\n \
    \   (cond [(= num 0) \"zero\"]\n          [(= num 1) \"one\"]\n          [(= num\
    \ 2) \"two\"]\n          [(= num 3) \"three\"]\n          [(= num 4) \"four\"\
    ]\n          [(= num 5) \"five\"]\n          [(= num 6) \"six\"]\n          [(=\
    \ num 7) \"seven\"]\n          [(= num 8) \"eight\"]\n          [(= num 9) \"\
    nine\"]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (let ([sorted-numbers (sort-numbers-helper (cdr numbers))])\n\
    \          (cons (car numbers) sorted-numbers))))\n  (define (sort-numbers-helper2\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (let ([sorted-numbers\
    \ (sort-numbers-helper2 (cdr numbers))])\n          (cons (number-to-int (car\
    \ numbers)) sorted-numbers))))\n  (define (sort-numbers-helper3 numbers)\n   \
    \ (if (null? numbers)\n        '()\n        (let ([sorted-numbers (sort-numbers-helper3\
    \ (cdr numbers))])\n          (cons (int-to-number (car numbers)) sorted-numbers))))\n\
    \  (sort-numbers-helper3 (sort-numbers-helper2 (sort-numbers-helper (string-split\
    \ numbers #\\space)))))\n", "  (string-join\n   (sort\n    (map string->number\n\
    \         (string-split numbers #\\space))\n    <)\n   \" \"))\n", "  (define\
    \ (number-to-int number)\n    (cond\n      [(string=? number \"zero\") 0]\n  \
    \    [(string=? number \"one\") 1]\n      [(string=? number \"two\") 2]\n    \
    \  [(string=? number \"three\") 3]\n      [(string=? number \"four\") 4]\n   \
    \   [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n    \
    \  [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n  \
    \    [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n    (cond\n\
    \      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (string-join (map int-to-number (sort (map number-to-int (string-split\
    \ numbers #\\space)))) \" \"))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number\
    \ b))))\n   #\\space))\n", "  (string-join\n   (sort\n    (string-split numbers)\n\
    \    <\n    string<?\n    )\n   \" \"\n   )\n  )\n", "  (string-join (sort (string-split\
    \ numbers) string<?)))\n", "  (define (number-to-int number)\n    (cond ((equal?\
    \ number \"zero\") 0)\n          ((equal? number \"one\") 1)\n          ((equal?\
    \ number \"two\") 2)\n          ((equal? number \"three\") 3)\n          ((equal?\
    \ number \"four\") 4)\n          ((equal? number \"five\") 5)\n          ((equal?\
    \ number \"six\") 6)\n          ((equal? number \"seven\") 7)\n          ((equal?\
    \ number \"eight\") 8)\n          ((equal? number \"nine\") 9)))\n  (define (int-to-number\
    \ number)\n    (cond ((= number 0) \"zero\")\n          ((= number 1) \"one\"\
    )\n          ((= number 2) \"two\")\n          ((= number 3) \"three\")\n    \
    \      ((= number 4) \"four\")\n          ((= number 5) \"five\")\n          ((=\
    \ number 6) \"six\")\n          ((= number 7) \"seven\")\n          ((= number\
    \ 8) \"eight\")\n          ((= number 9) \"nine\")))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (let ((smallest-number\
    \ (apply min (map number-to-int numbers))))\n          (cons (int-to-number smallest-number)\n\
    \                (sort-numbers-helper (remove (int-to-number smallest-number)\
    \ numbers))))))\n  (string-join (sort-numbers-helper (string-split numbers)) \"\
    \ \"))\n", "  (string-join\n   (sort\n    (string-split numbers)\n    (lambda\
    \ (a b)\n      (string<? a b)))\n   \" \"))\n", "  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (string<? a b)))\n               #\\space))\n", "  (string-join\n   (sort\n\
    \    (map number->string\n         (sort (map string->number (string-split numbers\
    \ #\\space))\n               <))\n    string<?)))\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2)\
    \ \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n  \
    \    [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7)\
    \ \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n\
    \  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (define (insert-numeral numeral numbers)\n         (cond\n\
    \           [(empty? numbers) (list numeral)]\n           [(< (numeral->number\
    \ numeral) (numeral->number (first numbers)))\n            (cons numeral numbers)]\n\
    \           [else\n            (cons (first numbers) (insert-numeral numeral (rest\
    \ numbers)))])\n         )\n       (insert-numeral (first numbers) (sort-numbers-helper\
    \ (rest numbers)))]))\n  (string-join (map number->numeral (sort-numbers-helper\
    \ (string-split numbers #\\space))) \" \"))\n", "  (string-join (sort (string-split\
    \ numbers) < #:key (compose number->string string->number)) \" \"))\n", "  (string-join\
    \ (sort (string-split numbers) <) \" \"))\n", "  (define (sort-helper numbers)\n\
    \    (if (null? numbers)\n        '()\n        (let* ([sorted (sort-helper (cdr\
    \ numbers))]\n               [num (car numbers)])\n          (cond\n         \
    \   [(< num (car sorted)) (cons num sorted)]\n            [else (cons (car sorted)\
    \ (cons num (cdr sorted)))]))))\n  (string-join (sort-helper (string-split numbers\
    \ #\\space)) \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers\
    \ #\\space)\n    (lambda (a b)\n      (< (string->number (string-append \"0\"\
    \ a))\n         (string->number (string-append \"0\" b)))))\n   #\\space))\n",
  "  (string-join\n   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n\
    \      (< (number-string-&gt;number a)\n         (number-string-&gt;number b))))\n\
    \   #\\space))\n", "  (string-join\n   (sort\n    (string-split numbers)\n   \
    \ <\n    (lambda (a b)\n      (cond\n        [(string=? a \"zero\") 0]\n     \
    \   [(string=? a \"one\") 1]\n        [(string=? a \"two\") 2]\n        [(string=?\
    \ a \"three\") 3]\n        [(string=? a \"four\") 4]\n        [(string=? a \"\
    five\") 5]\n        [(string=? a \"six\") 6]\n        [(string=? a \"seven\")\
    \ 7]\n        [(string=? a \"eight\") 8]\n        [(string=? a \"nine\") 9]\n\
    \        [else -1])))\n   \" \"))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (string<? a b)))\n   \" \"))\n",
  "  (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (< (string->number (string-append \"0\" a))\n\
    \                          (string->number (string-append \"0\" b)))))\n     \
    \          #\\space))\n", "  (define (number-to-int number)\n    (cond [(string=?\
    \ number \"zero\") 0]\n          [(string=? number \"one\") 1]\n          [(string=?\
    \ number \"two\") 2]\n          [(string=? number \"three\") 3]\n          [(string=?\
    \ number \"four\") 4]\n          [(string=? number \"five\") 5]\n          [(string=?\
    \ number \"six\") 6]\n          [(string=? number \"seven\") 7]\n          [(string=?\
    \ number \"eight\") 8]\n          [(string=? number \"nine\") 9]))\n  (define\
    \ (int-to-number number)\n    (cond [(= number 0) \"zero\"]\n          [(= number\
    \ 1) \"one\"]\n          [(= number 2) \"two\"]\n          [(= number 3) \"three\"\
    ]\n          [(= number 4) \"four\"]\n          [(= number 5) \"five\"]\n    \
    \      [(= number 6) \"six\"]\n          [(= number 7) \"seven\"]\n          [(=\
    \ number 8) \"eight\"]\n          [(= number 9) \"nine\"]))\n  (define (sort-numbers\
    \ numbers)\n    (sort (map number-to-int (string-split numbers)) <))\n  (string-join\
    \ (map int-to-number (sort-numbers numbers)) \" \"))\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2)\
    \ \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n  \
    \    [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7)\
    \ \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n\
    \  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (define (insert-number number numbers)\n         (cond\n\
    \           [(empty? numbers) (list number)]\n           [(< number (first numbers))\
    \ (cons number numbers)]\n           [else (cons (first numbers) (insert-number\
    \ number (rest numbers)))]))\n       (insert-number (first numbers) (sort-numbers-helper\
    \ (rest numbers)))]))\n  (define (numbers->string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else (string-append (number->numeral (first numbers))\
    \ \" \" (numbers->string (rest numbers)))]))\n  (numbers->string (sort-numbers-helper\
    \ (map numeral->number (string-split numbers #\\space)))))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers #\\space)\n    <\n    (lambda (a b)\n   \
    \   (cond\n        [(string=? a \"zero\") 0]\n        [(string=? a \"one\") 1]\n\
    \        [(string=? a \"two\") 2]\n        [(string=? a \"three\") 3]\n      \
    \  [(string=? a \"four\") 4]\n        [(string=? a \"five\") 5]\n        [(string=?\
    \ a \"six\") 6]\n        [(string=? a \"seven\") 7]\n        [(string=? a \"eight\"\
    ) 8]\n        [(string=? a \"nine\") 9]\n        [else (error 'sort_numbers \"\
    invalid input\")])))\n   #\\space))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (string<? a b)))\n   \" \"))\n```\n\
    \n## [Sort the odd](https://www.codewars.com/kata/578aa45ee9fd15ff4600090d)\n\n\
    ```racket\n#lang racket\n", "  (define (numeral-to-number numeral)\n    (cond\
    \ [(string=? numeral \"zero\") 0]\n          [(string=? numeral \"one\") 1]\n\
    \          [(string=? numeral \"two\") 2]\n          [(string=? numeral \"three\"\
    ) 3]\n          [(string=? numeral \"four\") 4]\n          [(string=? numeral\
    \ \"five\") 5]\n          [(string=? numeral \"six\") 6]\n          [(string=?\
    \ numeral \"seven\") 7]\n          [(string=? numeral \"eight\") 8]\n        \
    \  [(string=? numeral \"nine\") 9]))\n  (define (number-to-numeral number)\n \
    \   (cond [(= number 0) \"zero\"]\n          [(= number 1) \"one\"]\n        \
    \  [(= number 2) \"two\"]\n          [(= number 3) \"three\"]\n          [(= number\
    \ 4) \"four\"]\n          [(= number 5) \"five\"]\n          [(= number 6) \"\
    six\"]\n          [(= number 7) \"seven\"]\n          [(= number 8) \"eight\"\
    ]\n          [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond [(empty? numbers) empty]\n          [(empty? (rest numbers)) numbers]\n\
    \          [else (cons (first numbers) (sort-numbers-helper (rest numbers)))]))\n\
    \  (define (sort-numbers-helper2 numbers)\n    (cond [(empty? numbers) empty]\n\
    \          [(empty? (rest numbers)) numbers]\n          [else (cons (first numbers)\
    \ (sort-numbers-helper2 (rest numbers)))]))\n  (define (sort-numbers-helper3 numbers)\n\
    \    (cond [(empty? numbers) empty]\n          [(empty? (rest numbers)) numbers]\n\
    \          [else (cons (first numbers) (sort-numbers-helper3 (rest numbers)))]))\n\
    \  (define (sort-numbers-helper4 numbers)\n    (cond [(empty? numbers) empty]\n\
    \          [(empty? (rest numbers)) numbers]\n          [else (cons (first numbers)\
    \ (sort-numbers-helper4 (rest numbers)))]))\n  (", "  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (string->number (string-append \"0\" a))\n                          (string->number\
    \ (string-append \"0\" b)))))\n               #\\space))\n", "  (string-join (sort\
    \ (string-split numbers) <) \" \"))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (< (string->number (string-append\
    \ \"0\" a))\n         (string->number (string-append \"0\" b)))))\n   #\\space))\n",
  "  (string-join\n   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n\
    \      (< (string->number a) (string->number b))))\n   #\\space))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (string<?\
    \ a b)))\n   \" \"))\n", "  (define (sort-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(empty? (rest numbers)) (list (first numbers))]\n  \
    \    [else\n       (let ([first (first numbers)]\n             [rest (rest numbers)])\n\
    \         (cond\n           [(< (first rest) first) (cons (first rest) (sort-helper\
    \ (cons first (rest rest))))]\n           [else (cons first (sort-helper rest))]))]))\n\
    \  (string-join (sort-helper (string-split numbers #\\space)) \" \"))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n", "  (string-join (sort (string-split\
    \ numbers) string<?)))\n```\n\n## Tests\n\n```racket", "  (define (number-to-int\
    \ number)\n    (cond [(string=? number \"zero\") 0]\n          [(string=? number\
    \ \"one\") 1]\n          [(string=? number \"two\") 2]\n          [(string=? number\
    \ \"three\") 3]\n          [(string=? number \"four\") 4]\n          [(string=?\
    \ number \"five\") 5]\n          [(string=? number \"six\") 6]\n          [(string=?\
    \ number \"seven\") 7]\n          [(string=? number \"eight\") 8]\n          [(string=?\
    \ number \"nine\") 9]))\n  (define (int-to-number number)\n    (cond [(= number\
    \ 0) \"zero\"]\n          [(= number 1) \"one\"]\n          [(= number 2) \"two\"\
    ]\n          [(= number 3) \"three\"]\n          [(= number 4) \"four\"]\n   \
    \       [(= number 5) \"five\"]\n          [(= number 6) \"six\"]\n          [(=\
    \ number 7) \"seven\"]\n          [(= number 8) \"eight\"]\n          [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (append (sort-numbers-helper (filter (lambda (x) (< x (car\
    \ numbers))) (cdr numbers)))\n                (list (car numbers))\n         \
    \       (sort-numbers-helper (filter (lambda (x) (>= x (car numbers))) (cdr numbers))))))\n\
    \  (string-join (map int-to-number (sort-numbers-helper (map number-to-int (string-split\
    \ numbers)))) \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers)\n\
    \    (lambda (a b)\n      (< (string->number a) (string->number b))))\n   \" \"\
    ))\n", "  (define (sort-helper numbers)\n    (cond [(empty? numbers) empty]\n\
    \          [else (cons (first numbers)\n                      (sort-helper (rest\
    \ numbers)))]))\n  (define (sort-helper-2 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-2\
    \ (rest numbers)))]))\n  (define (sort-helper-3 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-3\
    \ (rest numbers)))]))\n  (define (sort-helper-4 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-4\
    \ (rest numbers)))]))\n  (define (sort-helper-5 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-5\
    \ (rest numbers)))]))\n  (define (sort-helper-6 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-6\
    \ (rest numbers)))]))\n  (define (sort-helper-7 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-7\
    \ (rest numbers)))]))\n  (define (sort-helper-8 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-8\
    \ (rest numbers)))]))\n  (define (sort-helper-9 numbers)\n    (cond [(empty? numbers)\
    \ empty]\n          [else (cons (first numbers)\n                      (sort-helper-9\
    \ (rest numbers)))]))\n  (define (sort-helper-10 numbers)\n    (cond [(empty?\
    \ numbers) empty]\n          [else (cons (first numbers)\n                   \
    \   (sort-helper-10 (rest numbers)))]))\n  (define (sort-helper-11 numbers)\n\
    \    (cond [(empty? numbers) empty]\n         ", "  (string-join\n   (sort\n \
    \   (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number\
    \ b))))\n   #\\space))\n", "  (define (numeral->number numeral)\n    (cond\n \
    \     [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number->numeral number)\n    (cond\n      [(= number 0) \"zero\"]\n\
    \      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (let ([sorted-numbers\
    \ (sort-numbers-helper (cdr numbers))])\n          (if (or (null? sorted-numbers)\n\
    \                  (< (numeral->number (car numbers))\n                     (numeral->number\
    \ (car sorted-numbers))))\n              (cons (car numbers) sorted-numbers)\n\
    \              (cons (car sorted-numbers)\n                    (sort-numbers-helper\
    \ (cons (car numbers) (cdr sorted-numbers))))))))\n  (string-join (map number->numeral\
    \ (sort-numbers-helper (string-split numbers))) \" \"))\n", "  (string-join (sort\
    \ (string-split numbers) < #:key (lambda (x) (string->number x))) \" \"))\n```\n\
    \n## Testing\n\n```racket\n#lang racket\n", "  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (string->number (string-append \"0\" a))\n                          (string->number\
    \ (string-append \"0\" b)))))\n               #\\space))\n", "  (define (number-to-int\
    \ num)\n    (cond\n      [(string=? num \"zero\") 0]\n      [(string=? num \"\
    one\") 1]\n      [(string=? num \"two\") 2]\n      [(string=? num \"three\") 3]\n\
    \      [(string=? num \"four\") 4]\n      [(string=? num \"five\") 5]\n      [(string=?\
    \ num \"six\") 6]\n      [(string=? num \"seven\") 7]\n      [(string=? num \"\
    eight\") 8]\n      [(string=? num \"nine\") 9]))\n  (define (int-to-number num)\n\
    \    (cond\n      [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num\
    \ 2) \"two\"]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"]\n     \
    \ [(= num 5) \"five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"\
    ]\n      [(= num 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (helper numbers)\n         (cond\n           [(empty? numbers) empty]\n    \
    \       [else\n            (cons (number-to-int (first numbers))\n           \
    \       (helper (rest numbers)))]))\n       (define (sort-helper numbers)\n  \
    \       (cond\n           [(empty? numbers) empty]\n           [else\n       \
    \     (cons (int-to-number (first numbers))\n                  (sort-helper (rest\
    \ numbers)))]))\n       (sort-helper (helper numbers))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (sort-numbers-helper-helper numbers)\n         (cond\n           [(empty? numbers)\
    \ empty]\n           [else\n            (cons (car numbers)\n                \
    \  (sort-numbers-helper-helper (cdr numbers)))]))\n       (define (sort-numbers-helper-helper-helper\
    \ numbers)\n         (cond\n           [(empty? numbers) empty]\n           [else\n\
    \            (cons (numeral->number (car numbers))\n                  (sort-numbers-helper-helper-helper\
    \ (cdr numbers)))]))\n       (define (sort-numbers-helper-helper-helper-helper\
    \ numbers)\n         (cond\n           [(empty? numbers) empty]\n           [else\n\
    \            (cons (number->numeral (car numbers))\n                  (sort-numbers-helper-helper-helper-helper\
    \ (cdr numbers)))]))\n       (sort", "  (string-join (sort (string-split numbers)\
    \ (\u03BB (a b) (< (number-to-string a) (number-to-string b)))) \" \"))\n", " \
    \ (string-join\n   (sort\n    (map string->number\n         (string-split numbers\
    \ #\\space))\n    <)\n   \" \"))\n", "  (define (sort-helper numbers)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(empty? (rest numbers)) numbers]\n   \
    \   [else\n       (let ([first (first numbers)]\n             [second (first (rest\
    \ numbers))])\n         (if (< first second)\n             (cons first (sort-helper\
    \ (rest numbers)))\n             (cons second (sort-helper (cons first (rest (rest\
    \ numbers)))))))]))\n  (string-join (sort-helper (string-split numbers #\\space))\
    \ \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n\
    \    (lambda (a b)\n      (string<? a b)))\n   \" \"))\n", "  (define (number-to-int\
    \ number)\n    (cond\n      [(string=? number \"zero\") 0]\n      [(string=? number\
    \ \"one\") 1]\n      [(string=? number \"two\") 2]\n      [(string=? number \"\
    three\") 3]\n      [(string=? number \"four\") 4]\n      [(string=? number \"\
    five\") 5]\n      [(string=? number \"six\") 6]\n      [(string=? number \"seven\"\
    ) 7]\n      [(string=? number \"eight\") 8]\n      [(string=? number \"nine\"\
    ) 9]))\n  (define (int-to-number number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else (cons (int-to-number\
    \ (apply min (map number-to-int numbers)))\n                  (sort-numbers-helper\
    \ (remove (int-to-number (apply min (map number-to-int numbers))) numbers)))]))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n",
  "  (string-join\n   (sort\n    (string-split numbers)\n    <\n    (lambda (a b)\n\
    \      (cond\n        [(string=? a \"zero\") 0]\n        [(string=? a \"one\"\
    ) 1]\n        [(string=? a \"two\") 2]\n        [(string=? a \"three\") 3]\n \
    \       [(string=? a \"four\") 4]\n        [(string=? a \"five\") 5]\n       \
    \ [(string=? a \"six\") 6]\n        [(string=? a \"seven\") 7]\n        [(string=?\
    \ a \"eight\") 8]\n        [(string=? a \"nine\") 9]\n        [else (error \"\
    invalid input\")])))\n   \" \"))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers)\n    <\n    (lambda (a b)\n      (cond\n        [(string=? a \"zero\"\
    ) 0]\n        [(string=? a \"one\") 1]\n        [(string=? a \"two\") 2]\n   \
    \     [(string=? a \"three\") 3]\n        [(string=? a \"four\") 4]\n        [(string=?\
    \ a \"five\") 5]\n        [(string=? a \"six\") 6]\n        [(string=? a \"seven\"\
    ) 7]\n        [(string=? a \"eight\") 8]\n        [(string=? a \"nine\") 9])))\n\
    \   \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers)\n    (lambda\
    \ (a b)\n      (< (string->number a) (string->number b))))\n   \" \"))\n", " \
    \ (string-join (sort (string-split numbers) <) \" \"))\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n      [(equal? numeral\
    \ \"one\") 1]\n      [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\"\
    ) 3]\n      [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n\
    \      [(equal? numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n  \
    \    [(equal? numeral \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n \
    \ (define (number->numeral number)\n    (cond\n      [(equal? number 0) \"zero\"\
    ]\n      [(equal? number 1) \"one\"]\n      [(equal? number 2) \"two\"]\n    \
    \  [(equal? number 3) \"three\"]\n      [(equal? number 4) \"four\"]\n      [(equal?\
    \ number 5) \"five\"]\n      [(equal? number 6) \"six\"]\n      [(equal? number\
    \ 7) \"seven\"]\n      [(equal? number 8) \"eight\"]\n      [(equal? number 9)\
    \ \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (let* ([first (first numbers)]\n      \
    \        [rest (rest numbers)]\n              [sorted-rest (sort-numbers-helper\
    \ rest)]\n              [first-number (numeral->number first)]\n             \
    \ [sorted-rest-numbers (map numeral->number sorted-rest)])\n         (cond\n \
    \          [(empty? sorted-rest) (list first)]\n           [(< first-number (first\
    \ sorted-rest-numbers))\n            (cons first sorted-rest)]\n           [else\n\
    \            (cons (first sorted-rest)\n                  (cons first (rest sorted-rest)))]))]))\n\
    \  (define (join-numbers numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (string-append (first numbers)\n                      (if\
    \ (empty? (rest numbers))\n                          empty\n                 \
    \         (string-append \" \" (join-numbers (rest numbers)))))]))\n  (join",
  "  (define (number-to-int number)\n    (cond ((equal? number \"zero\") 0)\n    \
    \      ((equal? number \"one\") 1)\n          ((equal? number \"two\") 2)\n  \
    \        ((equal? number \"three\") 3)\n          ((equal? number \"four\") 4)\n\
    \          ((equal? number \"five\") 5)\n          ((equal? number \"six\") 6)\n\
    \          ((equal? number \"seven\") 7)\n          ((equal? number \"eight\"\
    ) 8)\n          ((equal? number \"nine\") 9)))\n  (define (int-to-number number)\n\
    \    (cond ((= number 0) \"zero\")\n          ((= number 1) \"one\")\n       \
    \   ((= number 2) \"two\")\n          ((= number 3) \"three\")\n          ((=\
    \ number 4) \"four\")\n          ((= number 5) \"five\")\n          ((= number\
    \ 6) \"six\")\n          ((= number 7) \"seven\")\n          ((= number 8) \"\
    eight\")\n          ((= number 9) \"nine\")))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond ((null? numbers) '())\n          ((null? (cdr numbers))\
    \ numbers)\n          (else (let ((first (car numbers))\n                    \
    \  (second (cadr numbers)))\n                  (if (< (number-to-int first) (number-to-int\
    \ second))\n                      (cons first (sort-numbers-helper (cdr numbers)))\n\
    \                      (cons second (sort-numbers-helper (cons first (cddr numbers)))))))))\n\
    \  (let ((sorted-numbers (sort-numbers-helper (string-split numbers))))\n    (string-join\
    \ (map int-to-number sorted-numbers) \" \")))\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2)\
    \ \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n  \
    \    [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7)\
    \ \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n\
    \  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (cons (car numbers)\n             (sort-numbers-helper (cdr\
    \ numbers)))]))\n  (define (sort-numbers-helper2 numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (cons (number->numeral (car numbers))\n\
    \             (sort-numbers-helper2 (cdr numbers)))]))\n  (define (sort-numbers-helper3\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (cons\
    \ (numeral->number (car numbers))\n             (sort-numbers-helper3 (cdr numbers)))]))\n\
    \  (define (sort-numbers-helper4 numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (cons (number->numeral (car numbers))\n        \
    \     (sort-numbers-helper4 (cdr numbers)))]))\n  (define", "  (string-join (sort\
    \ (string-split numbers) < #:key (compose string->number string-normalize-spaces))\
    \ \" \"))\n", "  (define (sort-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(empty? (rest numbers)) (list (first numbers))]\n      [else\n\
    \       (define (insert-helper sorted-numbers number)\n         (cond\n      \
    \     [(empty? sorted-numbers) (list number)]\n           [(< (first sorted-numbers)\
    \ number) (cons (first sorted-numbers) (insert-helper (rest sorted-numbers) number))]\n\
    \           [else (cons number sorted-numbers)])\n         )\n       (insert-helper\
    \ (sort-helper (rest numbers)) (first numbers))]))\n  (string-join (sort-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (string-join\n   (sort\n   \
    \ (map string->number\n         (string-split numbers #\\space))\n    <)\n   \"\
    \ \"))\n", "  (define (number-to-int number)\n    (cond\n      [(string=? number\
    \ \"zero\") 0]\n      [(string=? number \"one\") 1]\n      [(string=? number \"\
    two\") 2]\n      [(string=? number \"three\") 3]\n      [(string=? number \"four\"\
    ) 4]\n      [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n\
    \      [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n\
    \      [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n  \
    \  (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(=\
    \ number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"\
    ]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers)\
    \ '()]\n      [else (cons (int-to-number (apply min (map number-to-int numbers)))\n\
    \                  (sort-numbers-helper (remove (int-to-number (apply min (map\
    \ number-to-int numbers))) numbers)))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (let* ([numbers (sort &lt; numbers)]\n         \
    \     [first (first numbers)]\n              [rest (rest numbers)])\n        \
    \ (cons first (sort-numbers-helper rest)))]))\n  (string-join (map number-&gt;numeral\
    \ (sort-numbers-helper (map numeral-&gt;number (string-split numbers)))) \" \"\
    ))\n</code>\n", "  (string-join (sort (string-split numbers #\\space)\n      \
    \               (lambda (a b)\n                       (< (string->number (string-append\
    \ \"0\" a))\n                          (string->number (string-append \"0\" b)))))\n\
    \               #\\space))\n", "  (string-join\n   (sort\n    (string-split numbers\
    \ #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number b))))\n\
    \   #\\space))\n", "  (string-join (sort (string-split numbers) < #:key (\u03BB\
    \ (num) (string->number num))) \" \"))\n", "  (define (sort-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(empty? (rest numbers)) numbers]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (first\
    \ (rest numbers))]\n              [rest (rest (rest numbers))])\n         (if\
    \ (< first second)\n             (cons first (sort-helper (cons second rest)))\n\
    \             (cons second (sort-helper (cons first rest)))))]))\n  (string-join\
    \ (sort-helper (string-split numbers #\\space)) \" \"))\n", "  (string-join\n\
    \   (sort\n    (map string->number\n         (string-split numbers #\\space))\n\
    \    <)\n   \" \"))\n", "  (define (number-to-int number)\n    (cond\n      [(string=?\
    \ number \"zero\") 0]\n      [(string=? number \"one\") 1]\n      [(string=? number\
    \ \"two\") 2]\n      [(string=? number \"three\") 3]\n      [(string=? number\
    \ \"four\") 4]\n      [(string=? number \"five\") 5]\n      [(string=? number\
    \ \"six\") 6]\n      [(string=? number \"seven\") 7]\n      [(string=? number\
    \ \"eight\") 8]\n      [(string=? number \"nine\") 9]))\n  (define (int-to-number\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-number number numbers)\n\
    \         (cond\n           [(empty? numbers) (list number)]\n           [(< number\
    \ (car numbers)) (cons number numbers)]\n           [else (cons (car numbers)\
    \ (insert-number number (cdr numbers)))]))\n       (insert-number (car numbers)\
    \ (sort-numbers-helper (cdr numbers)))]))\n  (string-join (map int-to-number (sort-numbers-helper\
    \ (map number-to-int (string-split numbers)))) \" \"))\n", "  (string-join\n \
    \  (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n", "  (define (number-to-int num)\n\
    \    (cond\n      [(string=? num \"zero\") 0]\n      [(string=? num \"one\") 1]\n\
    \      [(string=? num \"two\") 2]\n      [(string=? num \"three\") 3]\n      [(string=?\
    \ num \"four\") 4]\n      [(string=? num \"five\") 5]\n      [(string=? num \"\
    six\") 6]\n      [(string=? num \"seven\") 7]\n      [(string=? num \"eight\"\
    ) 8]\n      [(string=? num \"nine\") 9]))\n  (define (int-to-number num)\n   \
    \ (cond\n      [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num\
    \ 2) \"two\"]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"]\n     \
    \ [(= num 5) \"five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"\
    ]\n      [(= num 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (empty? numbers)\n        '()\n        (let ([smallest (apply\
    \ min (map number-to-int numbers))])\n          (cons (int-to-number smallest)\n\
    \                (sort-numbers-helper (remove (int-to-number smallest) numbers))))))\n\
    \  (string-join (sort-numbers-helper (string-split numbers)) \" \"))\n```\n\n\
    ### [Reverse Words](https://www.codewars.com/kata/5259b20d6021e9e14c0010d4)\n\n\
    ```racket\n#lang racket\n", "  (string-join\n   (sort\n    (string-split numbers\
    \ #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number b))))\n\
    \   #\\space))\n", "  (string-join\n   (sort\n    (string-split numbers)\n   \
    \ <\n    (lambda (a b)\n      (cond\n        [(string=? a \"zero\") 0]\n     \
    \   [(string=? a \"one\") 1]\n        [(string=? a \"two\") 2]\n        [(string=?\
    \ a \"three\") 3]\n        [(string=? a \"four\") 4]\n        [(string=? a \"\
    five\") 5]\n        [(string=? a \"six\") 6]\n        [(string=? a \"seven\")\
    \ 7]\n        [(string=? a \"eight\") 8]\n        [(string=? a \"nine\") 9])))\n\
    \   \" \"))\n", "  (define (number-to-int number)\n    (cond [(string=? number\
    \ \"zero\") 0]\n          [(string=? number \"one\") 1]\n          [(string=?\
    \ number \"two\") 2]\n          [(string=? number \"three\") 3]\n          [(string=?\
    \ number \"four\") 4]\n          [(string=? number \"five\") 5]\n          [(string=?\
    \ number \"six\") 6]\n          [(string=? number \"seven\") 7]\n          [(string=?\
    \ number \"eight\") 8]\n          [(string=? number \"nine\") 9]))\n  (define\
    \ (int-to-number number)\n    (cond [(= number 0) \"zero\"]\n          [(= number\
    \ 1) \"one\"]\n          [(= number 2) \"two\"]\n          [(= number 3) \"three\"\
    ]\n          [(= number 4) \"four\"]\n          [(= number 5) \"five\"]\n    \
    \      [(= number 6) \"six\"]\n          [(= number 7) \"seven\"]\n          [(=\
    \ number 8) \"eight\"]\n          [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond [(null? numbers) '()]\n          [else (cons (int-to-number\
    \ (car (sort (map number-to-int numbers) <)))\n                      (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (string-join (sort-numbers-helper (string-split numbers\
    \ #\\space)) \" \"))\n", "  (string-join\n   (sort\n    (string-split numbers)\n\
    \    <\n    string<?\n    )\n   \" \"\n   )\n  )\n", "  (define (number-to-int\
    \ number)\n    (cond\n      [(string=? number \"zero\") 0]\n      [(string=? number\
    \ \"one\") 1]\n      [(string=? number \"two\") 2]\n      [(string=? number \"\
    three\") 3]\n      [(string=? number \"four\") 4]\n      [(string=? number \"\
    five\") 5]\n      [(string=? number \"six\") 6]\n      [(string=? number \"seven\"\
    ) 7]\n      [(string=? number \"eight\") 8]\n      [(string=? number \"nine\"\
    ) 9]))\n  (define (int-to-number number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else (cons (int-to-number\
    \ (apply min (map number-to-int numbers)))\n                  (sort-numbers-helper\
    \ (remove (int-to-number (apply min (map number-to-int numbers))) numbers)))]))\n\
    \  (apply string-append (sort-numbers-helper (string-split numbers))))\n", " \
    \ (define (sort-helper nums)\n    (cond\n      [(empty? nums) empty]\n      [(empty?\
    \ (rest nums)) nums]\n      [else\n       (let ([first (first nums)]\n       \
    \      [second (second nums)])\n         (cond\n           [(string<? first second)\
    \ (cons first (sort-helper (rest nums)))]\n           [else (cons second (sort-helper\
    \ (cons first (rest (rest nums)))))]))]))\n  (string-join (sort-helper (string-split\
    \ numbers #\\space)) \" \"))\n", "  (string-join (sort (string-split numbers)\
    \ string<?)))\n", "  (string-join\n   (sort\n    (string-split numbers)\n    (lambda\
    \ (a b)\n      (string<? a b)))\n   \" \"))\n", "  (string-join (sort (string-split\
    \ numbers) <) \" \"))\n", "  (define (number-to-int number)\n    (cond [(string=?\
    \ number \"zero\") 0]\n          [(string=? number \"one\") 1]\n          [(string=?\
    \ number \"two\") 2]\n          [(string=? number \"three\") 3]\n          [(string=?\
    \ number \"four\") 4]\n          [(string=? number \"five\") 5]\n          [(string=?\
    \ number \"six\") 6]\n          [(string=? number \"seven\") 7]\n          [(string=?\
    \ number \"eight\") 8]\n          [(string=? number \"nine\") 9]))\n  (define\
    \ (int-to-number number)\n    (cond [(= number 0) \"zero\"]\n          [(= number\
    \ 1) \"one\"]\n          [(= number 2) \"two\"]\n          [(= number 3) \"three\"\
    ]\n          [(= number 4) \"four\"]\n          [(= number 5) \"five\"]\n    \
    \      [(= number 6) \"six\"]\n          [(= number 7) \"seven\"]\n          [(=\
    \ number 8) \"eight\"]\n          [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond [(empty? numbers) empty]\n          [(= (length numbers)\
    \ 1) numbers]\n          [else (cons (list-ref numbers 0)\n                  \
    \    (sort-numbers-helper (list-tail numbers)))]))\n  (define (string-to-list\
    \ string)\n    (cond [(empty? string) empty]\n          [else (cons (string-ref\
    \ string 0)\n                      (string-to-list (substring string 1)))]))\n\
    \  (define (list-to-string list)\n    (cond [(empty? list) \"\"]\n          [else\
    \ (string-append (list->string (list-ref list 0))\n                          \
    \     (list-to-string (list-tail list)))]))\n  (define (string-to-int-list string)\n\
    \    (cond [(empty? string) empty]\n          [else (cons (number-to-int (string-ref\
    \ string 0))\n                      (string-to-int-list (substring string 1)))]))\n\
    \  (define (int-list-to-string list)\n    (cond [(empty?", "  (string-join (sort\
    \ (string-split numbers #\\space)\n                     (lambda (a b) (< (string->number\
    \ a) (string->number b))))\n               #\\space))\n", "  (define (word-&gt;number\
    \ word)\n    (cond\n      [(string=? word \"zero\") 0]\n      [(string=? word\
    \ \"one\") 1]\n      [(string=? word \"two\") 2]\n      [(string=? word \"three\"\
    ) 3]\n      [(string=? word \"four\") 4]\n      [(string=? word \"five\") 5]\n\
    \      [(string=? word \"six\") 6]\n      [(string=? word \"seven\") 7]\n    \
    \  [(string=? word \"eight\") 8]\n      [(string=? word \"nine\") 9]))\n  (define\
    \ (number-&gt;word number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(=\
    \ number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"\
    ]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number\
    \ 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n\
    \      [(= number 9) \"nine\"]))\n  (define (word-list-&gt;number-list word-list)\n\
    \    (map word-&gt;number word-list))\n  (define (number-list-&gt;word-list number-list)\n\
    \    (map number-&gt;word number-list))\n  (define (word-list-&gt;sorted-word-list\
    \ word-list)\n    (number-list-&gt;word-list (sort (word-list-&gt;number-list\
    \ word-list))))\n  (string-join (word-list-&gt;sorted-word-list (string-split\
    \ numbers #\\space)) \" \"))\n</code>\n", "  (string-join\n   (sort (string-split\
    \ numbers)\n         (lambda (a b)\n           (< (string->number (string-append\
    \ \"0\" a))\n              (string->number (string-append \"0\" b)))))\n   \"\
    \ \"))\n```\n\n## Example Tests\n```racket", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number\
    \ b))))\n   #\\space))\n```\n\n## [Reverse a string](https://www.codewars.com/kata/5168bb5dfe9a00b126000018)\n\
    \n```racket\n#lang racket\n", "  (define (numeral->number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number->numeral number)\n    (cond\n      [(= number 0) \"zero\"]\n\
    \      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numeral-list)\n    (cond\n      [(null? numeral-list) '()]\n      [else (append\
    \ (sort-numbers-helper (filter (lambda (x) (< (numeral->number x) (numeral->number\
    \ (car numeral-list)))) (cdr numeral-list)))\n                   (list (car numeral-list)))]))\n\
    \  (string-join (map number->numeral (sort-numbers-helper (string-split numbers\
    \ #\\space))) \" \"))\n", "  (define (word-&gt;number word)\n    (cond\n     \
    \ [(string=? word \"zero\") 0]\n      [(string=? word \"one\") 1]\n      [(string=?\
    \ word \"two\") 2]\n      [(string=? word \"three\") 3]\n      [(string=? word\
    \ \"four\") 4]\n      [(string=? word \"five\") 5]\n      [(string=? word \"six\"\
    ) 6]\n      [(string=? word \"seven\") 7]\n      [(string=? word \"eight\") 8]\n\
    \      [(string=? word \"nine\") 9]))\n  (define (number-&gt;word number)\n  \
    \  (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(=\
    \ number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"\
    ]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-words words)\n    (string-join (sort (map word-&gt;number\
    \ words) &lt;) \" \"))\n  (define (sort-numbers numbers)\n    (string-join (sort\
    \ (map number-&gt;word numbers) &lt;) \" \"))\n  (sort-words (string-split numbers)))\n\
    </code>\n", "  (string-join\n   (sort (string-split numbers)\n         (lambda\
    \ (a b)\n           (< (string->number (string-append \"0\" a))\n            \
    \  (string->number (string-append \"0\" b)))))\n   \" \"))\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n      [(equal? numeral\
    \ \"one\") 1]\n      [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\"\
    ) 3]\n      [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n\
    \      [(equal? numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n  \
    \    [(equal? numeral \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n \
    \ (define (number->numeral number)\n    (cond\n      [(equal? number 0) \"zero\"\
    ]\n      [(equal? number 1) \"one\"]\n      [(equal? number 2) \"two\"]\n    \
    \  [(equal? number 3) \"three\"]\n      [(equal? number 4) \"four\"]\n      [(equal?\
    \ number 5) \"five\"]\n      [(equal? number 6) \"six\"]\n      [(equal? number\
    \ 7) \"seven\"]\n      [(equal? number 8) \"eight\"]\n      [(equal? number 9)\
    \ \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-number number numbers)\n\
    \         (cond\n           [(empty? numbers) (cons number empty)]\n         \
    \  [(< number (car numbers)) (cons number numbers)]\n           [else (cons (car\
    \ numbers) (insert-number number (cdr numbers)))]))\n       (define (insert-numeral\
    \ numeral numbers)\n         (insert-number (numeral->number numeral) numbers))\n\
    \       (insert-numeral (car numbers) (sort-numbers-helper (cdr numbers)))]))\n\
    \  (define (sort-numbers-helper-2 numbers)\n    (map number->numeral (sort-numbers-helper\
    \ (map numeral->number numbers))))\n  (string-join (sort-numbers-helper-2 (string-split\
    \ numbers #\\space)) \" \"))\n", "  (define (word-to-number word)\n    (cond\n\
    \      [(equal? word \"zero\") 0]\n      [(equal? word \"one\") 1]\n      [(equal?\
    \ word \"two\") 2]\n      [(equal? word \"three\") 3]\n      [(equal? word \"\
    four\") 4]\n      [(equal? word \"five\") 5]\n      [(equal? word \"six\") 6]\n\
    \      [(equal? word \"seven\") 7]\n      [(equal? word \"eight\") 8]\n      [(equal?\
    \ word \"nine\") 9]))\n  (define (number-to-word number)\n    (cond\n      [(equal?\
    \ number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n      [(equal? number\
    \ 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal? number 4) \"\
    four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number 6) \"six\"\
    ]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"eight\"]\n\
    \      [(equal? number 9) \"nine\"]))\n  (define (sort-words words)\n    (sort\
    \ (map word-to-number words) <))\n  (define (join-words words)\n    (string-join\
    \ (map number-to-word words) \" \"))\n  (join-words (sort-words (string-split\
    \ numbers))))\n", "  (define (number-to-int number)\n    (cond\n      [(string=?\
    \ number \"zero\") 0]\n      [(string=? number \"one\") 1]\n      [(string=? number\
    \ \"two\") 2]\n      [(string=? number \"three\") 3]\n      [(string=? number\
    \ \"four\") 4]\n      [(string=? number \"five\") 5]\n      [(string=? number\
    \ \"six\") 6]\n      [(string=? number \"seven\") 7]\n      [(string=? number\
    \ \"eight\") 8]\n      [(string=? number \"nine\") 9]))\n  (define (int-to-number\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-number number sorted-numbers)\n\
    \         (cond\n           [(empty? sorted-numbers) (list number)]\n        \
    \   [(< number (car sorted-numbers)) (cons number sorted-numbers)]\n         \
    \  [else (cons (car sorted-numbers) (insert-number number (cdr sorted-numbers)))]))\n\
    \       (insert-number (number-to-int (car numbers)) (sort-numbers-helper (cdr\
    \ numbers)))]))\n  (define (sort-numbers-helper2 numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (int-to-number (car numbers)) (sort-numbers-helper2\
    \ (cdr numbers)))]))\n  (sort-numbers-helper2 (sort-numbers-helper (string-split\
    \ numbers))))\n", "  (string-join (sort (string-split numbers #\\space) string<?)))\n",
  "  (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (< (string->number (string-append \"0\" a))\n\
    \                          (string->number (string-append \"0\" b)))))\n     \
    \          #\\space))\n", "  (string-join (sort (string-split numbers #\\space)\n\
    \                     (lambda (a b)\n                       (< (string->number\
    \ (string-append \"0\" a))\n                          (string->number (string-append\
    \ \"0\" b)))))\n               #\\space))\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (smallest-number numbers)\n         (cond\n           [(empty? numbers) empty]\n\
    \           [else\n            (define (smallest-number-helper numbers smallest)\n\
    \              (cond\n                [(empty? numbers) smallest]\n          \
    \      [else\n                 (define (smallest-number-helper-helper numbers\
    \ smallest)\n                   (cond\n                     [(empty? numbers)\
    \ smallest]\n                     [else\n                      (define (smallest-number-helper-helper-helper\
    \ numbers smallest)\n                        (cond\n                         \
    \ [(empty? numbers) smallest]\n                          [else\n             \
    \              (define (smallest-number-helper-helper-helper-helper numbers smallest)\n\
    \                             (cond\n                               [(empty? numbers)\
    \ smallest]\n                               [else\n                          \
    \      (define (smallest-number-helper-helper-helper-helper-helper numbers smallest)\n\
    \                                  (cond\n                                   \
    \ [(empty", "  (define (numeral-to-number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-to-numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (let* ([sorted-numbers (sort-numbers-helper (cdr numbers))]\n\
    \               [number (numeral-to-number (car numbers))])\n          (if (null?\
    \ sorted-numbers)\n              (list number)\n              (if (< number (car\
    \ sorted-numbers))\n                  (cons number sorted-numbers)\n         \
    \         (cons (car sorted-numbers) (cons number (cdr sorted-numbers))))))))\n\
    \  (define (numbers-to-string numbers)\n    (if (null? numbers)\n        \"\"\n\
    \        (string-append (number-to-numeral (car numbers)) \" \" (numbers-to-string\
    \ (cdr numbers)))))\n  (numbers-to-string (sort-numbers-helper (string-split numbers))))\n",
  "  (define (number-to-int number)\n    (cond\n      [(string=? number \"zero\")\
    \ 0]\n      [(string=? number \"one\") 1]\n      [(string=? number \"two\") 2]\n\
    \      [(string=? number \"three\") 3]\n      [(string=? number \"four\") 4]\n\
    \      [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n \
    \     [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n\
    \      [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n  \
    \  (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(=\
    \ number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"\
    ]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (let* ([min (apply min (map number-to-int numbers))]\n\
    \              [min-index (list-index (lambda (x) (= x min)) (map number-to-int\
    \ numbers))])\n         (cons (int-to-number min) (sort-numbers-helper (remove-at\
    \ min-index numbers))))]))\n  (string-join (sort-numbers-helper (string-split\
    \ numbers)) \" \"))\n", "  (define (sort-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(empty? (rest numbers)) numbers]\n      [else\n    \
    \   (let ([first (first numbers)]\n             [rest (rest numbers)])\n     \
    \    (cond\n           [(< (first rest) first) (cons (first rest) (sort-helper\
    \ (cons first (rest rest))))]\n           [else (cons first (sort-helper rest))]))]))\n\
    \  (define (number-to-string number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (string-to-number\
    \ string)\n    (cond\n      [(string=? string \"zero\") 0]\n      [(string=? string\
    \ \"one\") 1]\n      [(string=? string \"two\") 2]\n      [(string=? string \"\
    three\") 3]\n      [(string=? string \"four\") 4]\n      [(string=? string \"\
    five\") 5]\n      [(string=? string \"six\") 6]\n      [(string=? string \"seven\"\
    ) 7]\n      [(string=? string \"eight\") 8]\n      [(string=? string \"nine\"\
    ) 9]))\n  (define (string-list-to-number-list string-list)\n    (cond\n      [(empty?\
    \ string-list) empty]\n      [else (cons (string-to-number (first string-list))\
    \ (string-list-to-number-list (rest string-list)))]))\n  (define (number-list-to-string-list\
    \ number-list)\n    (cond\n      [(empty? number-list) empty]\n      [else (cons\
    \ (number-to-string (first number-list)) (number-list-to-string-list (rest number-list)))]))\n\
    \  (define (list-to-string list", "  (define (number-to-int number)\n    (cond\n\
    \      [(string=? number \"zero\") 0]\n      [(string=? number \"one\") 1]\n \
    \     [(string=? number \"two\") 2]\n      [(string=? number \"three\") 3]\n \
    \     [(string=? number \"four\") 4]\n      [(string=? number \"five\") 5]\n \
    \     [(string=? number \"six\") 6]\n      [(string=? number \"seven\") 7]\n \
    \     [(string=? number \"eight\") 8]\n      [(string=? number \"nine\") 9]))\n\
    \  (define (int-to-number number)\n    (cond\n      [(= number 0) \"zero\"]\n\
    \      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (let\
    \ ([min (apply min (map number-to-int numbers))])\n         (cons (int-to-number\
    \ min) (sort-numbers-helper (remove (int-to-number min) numbers))))]))\n  (apply\
    \ string-append (sort-numbers-helper (string-split numbers))))\n", "  (string-join\
    \ (sort (string-split numbers #\\space) < #:key (lambda (x) (string->number x)))\
    \ \" \"))\n", "  (define (number-to-int number)\n    (cond\n      [(string=? number\
    \ \"zero\") 0]\n      [(string=? number \"one\") 1]\n      [(string=? number \"\
    two\") 2]\n      [(string=? number \"three\") 3]\n      [(string=? number \"four\"\
    ) 4]\n      [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n\
    \      [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n\
    \      [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n  \
    \  (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(=\
    \ number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"\
    ]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (let* ([min (min (number-to-int (first numbers))\
    \ (number-to-int (second numbers)))]\n              [max (max (number-to-int (first\
    \ numbers)) (number-to-int (second numbers)))]\n              [rest (rest (rest\
    \ numbers))])\n         (cons (int-to-number min) (cons (int-to-number max) (sort-numbers-helper\
    \ rest))))]))\n  (string-join (sort-numbers-helper (string-split numbers)) \"\
    \ \"))\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n  \
    \  (lambda (a b)\n      (< (string->number a) (string->number b))))\n   #\\space))\n",
  "  (define (numeral->number numeral)\n    (cond\n      [(equal? numeral \"zero\"\
    ) 0]\n      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"two\") 2]\n\
    \      [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\") 4]\n \
    \     [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n    \
    \  [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n    \
    \  [(equal? numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n\
    \      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n     \
    \ [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal?\
    \ number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number\
    \ 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"\
    eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-numeral numeral numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons numeral empty)]\n           [(< (numeral->number numeral) (numeral->number\
    \ (first numbers)))\n            (cons numeral numbers)]\n           [else (cons\
    \ (first numbers) (insert-numeral numeral (rest numbers)))])\n         )\n   \
    \    (insert-numeral (first numbers) (sort-numbers-helper (rest numbers)))]))\n\
    \  (define (numbers->string numbers)\n    (cond\n      [(empty? numbers) \"\"\
    ]\n      [else (string-append (first numbers) \" \" (numbers->string (rest numbers)))]))\n\
    \  (numbers->string (sort-numbers-helper (string-split numbers))))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers)\n    (lambda (a b)\n      (string<? (number-to-string (string->number\
    \ a))\n                (number-to-string (string->number b)))))\n   \" \"))\n",
  "  (string-join (sort (string-split numbers) < #:key (lambda (x) (string->number\
    \ x))) \" \"))\n", "  (define (numeral-&gt;number numeral)\n    (cond ((string=?\
    \ numeral \"zero\") 0)\n          ((string=? numeral \"one\") 1)\n          ((string=?\
    \ numeral \"two\") 2)\n          ((string=? numeral \"three\") 3)\n          ((string=?\
    \ numeral \"four\") 4)\n          ((string=? numeral \"five\") 5)\n          ((string=?\
    \ numeral \"six\") 6)\n          ((string=? numeral \"seven\") 7)\n          ((string=?\
    \ numeral \"eight\") 8)\n          ((string=? numeral \"nine\") 9)))\n  (define\
    \ (number-&gt;numeral number)\n    (cond ((= number 0) \"zero\")\n          ((=\
    \ number 1) \"one\")\n          ((= number 2) \"two\")\n          ((= number 3)\
    \ \"three\")\n          ((= number 4) \"four\")\n          ((= number 5) \"five\"\
    )\n          ((= number 6) \"six\")\n          ((= number 7) \"seven\")\n    \
    \      ((= number 8) \"eight\")\n          ((= number 9) \"nine\")))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond ((null? numbers) '())\n          ((null?\
    \ (cdr numbers)) numbers)\n          (else (let* ((first (car numbers))\n    \
    \                   (second (cadr numbers))\n                       (first-number\
    \ (numeral-&gt;number first))\n                       (second-number (numeral-&gt;number\
    \ second)))\n                  (if (&lt; first-number second-number)\n       \
    \               (cons first (sort-numbers-helper (cdr numbers)))\n           \
    \           (cons second (sort-numbers-helper (cons first (cddr numbers)))))))))\n\
    \  (string-join (map number-&gt;numeral (sort-numbers-helper (string-split numbers)))\
    \ \" \"))\n</code>\n", "  (define (numeral-&gt;number numeral)\n    (cond\n  \
    \    [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n \
    \     [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (list number)]\n           [(&lt; number (first numbers)) (cons number numbers)]\n\
    \           [else (cons (first numbers) (insert-number number (rest numbers)))]))\n\
    \       (insert-number (first numbers) (sort-numbers-helper (rest numbers)))]))\n\
    \  (define (numbers-&gt;string numbers)\n    (cond\n      [(empty? numbers) \"\
    \"]\n      [else (string-append (number-&gt;numeral (first numbers)) \" \" (numbers-&gt;string\
    \ (rest numbers)))]))\n  (numbers-&gt;string (sort-numbers-helper (map numeral-&gt;number\
    \ (string-split numbers)))))\n</code>\n", "  (define (number-to-numberal number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (numberal-to-number numberal)\n    (cond\n      [(\"\
    zero\" numberal) 0]\n      [(\"one\" numberal) 1]\n      [(\"two\" numberal) 2]\n\
    \      [(\"three\" numberal) 3]\n      [(\"four\" numberal) 4]\n      [(\"five\"\
    \ numberal) 5]\n      [(\"six\" numberal) 6]\n      [(\"seven\" numberal) 7]\n\
    \      [(\"eight\" numberal) 8]\n      [(\"nine\" numberal) 9]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (let*\
    \ ([number (numberal-to-number (first numbers))]\n              [rest (sort-numbers-helper\
    \ (rest numbers))])\n         (if (empty? rest)\n             (cons number empty)\n\
    \             (let* ([rest-number (first rest)]\n                    [rest-rest\
    \ (rest rest)])\n               (if (< number rest-number)\n                 \
    \  (cons number (cons rest-number rest-rest))\n                   (cons rest-number\
    \ (cons number rest-rest))))))]))\n  (define (sort-numbers-helper-2 numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (let* ([number\
    \ (first numbers)]\n              [rest (sort-numbers-helper-2 (rest numbers))])\n\
    \         (if (empty? rest)\n             (cons number empty)\n             (let*\
    \ ([rest-number (first rest)]\n                    [rest-rest (rest rest)])\n\
    \               (if (< number rest-number)\n                   (cons", "  (define\
    \ (number-to-int number)\n    (cond [(equal? number \"zero\") 0]\n          [(equal?\
    \ number \"one\") 1]\n          [(equal? number \"two\") 2]\n          [(equal?\
    \ number \"three\") 3]\n          [(equal? number \"four\") 4]\n          [(equal?\
    \ number \"five\") 5]\n          [(equal? number \"six\") 6]\n          [(equal?\
    \ number \"seven\") 7]\n          [(equal? number \"eight\") 8]\n          [(equal?\
    \ number \"nine\") 9]))\n  (define (int-to-number number)\n    (cond [(equal?\
    \ number 0) \"zero\"]\n          [(equal? number 1) \"one\"]\n          [(equal?\
    \ number 2) \"two\"]\n          [(equal? number 3) \"three\"]\n          [(equal?\
    \ number 4) \"four\"]\n          [(equal? number 5) \"five\"]\n          [(equal?\
    \ number 6) \"six\"]\n          [(equal? number 7) \"seven\"]\n          [(equal?\
    \ number 8) \"eight\"]\n          [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond [(empty? numbers) empty]\n          [(empty? (rest numbers))\
    \ numbers]\n          [else (cons (sort-numbers-helper (rest numbers))\n     \
    \                 (list (first numbers)))]))\n  (define (sort-numbers-helper2\
    \ numbers)\n    (cond [(empty? numbers) empty]\n          [(empty? (rest numbers))\
    \ numbers]\n          [else (cons (first numbers)\n                      (sort-numbers-helper2\
    \ (rest numbers)))]))\n  (define (sort-numbers-helper3 numbers)\n    (cond [(empty?\
    \ numbers) empty]\n          [(empty? (rest numbers)) numbers]\n          [else\
    \ (cons (first numbers)\n                      (sort-numbers-helper3 (rest numbers)))]))\n\
    \  (define (sort-numbers-helper4 numbers)\n    (cond [(empty? numbers) empty]\n\
    \          [(empty? (rest numbers)) numbers]\n          [else (cons (first numbers)\n\
    \                      (sort-numbers-helper4 (rest numbers)))]))\n  (define (sort",
  "  (string-join\n   (sort (string-split numbers)\n         (lambda (a b)\n     \
    \      (< (string->number (string-replace a \"zero\" \"0\") 10)\n            \
    \  (string->number (string-replace b \"zero\" \"0\") 10))))\n   \" \"))\n", " \
    \ (string-join (sort (string-split numbers) < #:key (compose number->string string->number))\
    \ \" \"))\n", "  (string-join (sort (string-split numbers) < #:key (lambda (x)\
    \ (string->number x))) \" \"))\n", "  (string-join (sort (string-split numbers\
    \ #\\space)\n                     (lambda (a b)\n                       (< (string->number\
    \ (string-append \"0\" a))\n                          (string->number (string-append\
    \ \"0\" b)))))\n               #\\space))\n", "  (define (sort-helper lst)\n \
    \   (cond [(empty? lst) empty]\n          [(empty? (rest lst)) lst]\n        \
    \  [else (insert (first lst) (sort-helper (rest lst)))]))\n  (define (insert n\
    \ lst)\n    (cond [(empty? lst) (list n)]\n          [(< n (first lst)) (cons\
    \ n lst)]\n          [else (cons (first lst) (insert n (rest lst)))]))\n  (string-join\
    \ (sort-helper (string-split numbers #\\space)) \" \"))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (number-from-string\
    \ a)\n         (number-from-string b))))\n   #\\space))\n", "  (define (number-to-int\
    \ number)\n    (cond [(equal? number \"zero\") 0]\n          [(equal? number \"\
    one\") 1]\n          [(equal? number \"two\") 2]\n          [(equal? number \"\
    three\") 3]\n          [(equal? number \"four\") 4]\n          [(equal? number\
    \ \"five\") 5]\n          [(equal? number \"six\") 6]\n          [(equal? number\
    \ \"seven\") 7]\n          [(equal? number \"eight\") 8]\n          [(equal? number\
    \ \"nine\") 9]))\n  (define (int-to-number number)\n    (cond [(equal? number\
    \ 0) \"zero\"]\n          [(equal? number 1) \"one\"]\n          [(equal? number\
    \ 2) \"two\"]\n          [(equal? number 3) \"three\"]\n          [(equal? number\
    \ 4) \"four\"]\n          [(equal? number 5) \"five\"]\n          [(equal? number\
    \ 6) \"six\"]\n          [(equal? number 7) \"seven\"]\n          [(equal? number\
    \ 8) \"eight\"]\n          [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond [(null? numbers) '()]\n          [(null? (cdr numbers))\
    \ numbers]\n          [(< (number-to-int (car numbers)) (number-to-int (cadr numbers)))\n\
    \           (cons (car numbers) (sort-numbers-helper (cdr numbers)))]\n      \
    \    [else (cons (cadr numbers) (cons (car numbers) (sort-numbers-helper (cddr\
    \ numbers))))]))\n  (define (int-list-to-string int-list)\n    (cond [(null? int-list)\
    \ \"\"]\n          [else (string-append (int-to-number (car int-list)) \" \" (int-list-to-string\
    \ (cdr int-list)))]))\n  (int-list-to-string (sort-numbers-helper (string-&gt;list/c\
    \ (string-trim numbers)))))\n</code>\n", "  (string-join (sort (string-split numbers)\
    \ string<? #:key (\u03BB (x) (string->number x))) \" \"))\n", "  (string-join\n\
    \   (sort\n    (string-split numbers #\\space)\n    (lambda (x y)\n      (< (string->number\
    \ x) (string->number y))))\n   #\\space))\n", "  (string-join\n   (sort (string-split\
    \ numbers)\n         (lambda (a b)\n           (< (string->number (string-append\
    \ \"0\" a))\n              (string->number (string-append \"0\" b)))))\n   \"\
    \ \"))\n", "  (string-join (sort (string-split numbers) string<?)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
