name: HumanEval_160_do_algebra
language: rkt
prompt: "#lang racket\n\n#| Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \nthe second list is a list of integers. Use\
  \ the two given lists to build the algebric \nexpression and return the evaluation\
  \ of this expression.\nThe basic algebra operations:\nAddition ( + ) \nSubtraction\
  \ ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\
  Example:\noperator['+', '*', '-']\nlist = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n\
  => result = 9\nNote:\nThe length of operator list is equal to the length of operand\
  \ list minus one.\nOperand is a list of of non-negative integers.\nOperator list\
  \ has at least one operator, and operand list has at least two operands.|#\n(define\
  \ (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (define (do_algebra_iter operator operand result)\n    (cond\n  \
    \    [(empty? operator) (first operand)]\n      [(empty? operand) result]\n  \
    \    [else\n       (do_algebra_iter (rest operator)\n                        (rest\
    \ operand)\n                        (cond\n                          [(equal?\
    \ (first operator) '+) (+ result (first operand))]\n                         \
    \ [(equal? (first operator) '-) (- result (first operand))]\n                \
    \          [(equal? (first operator) '*) (* result (first operand))]\n       \
    \                   [(equal? (first operator) '//) (quotient result (first operand))]\n\
    \                          [(equal? (first operator) '**) (expt result (first\
    \ operand))]))]))\n  (do_algebra_iter operator operand 0))\n", "  (define (do-op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do-op-list ops)\n\
    \    (if (null? ops)\n        0\n        (do-op (car ops) (do-op-list (cdr ops))\
    \ (car operator))))\n  (do-op-list operand))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_iter\
    \ (cdr operator) (cdr operand)\n                         (cond\n             \
    \              ((equal? (car operator) '+) (+ result (car operand)))\n       \
    \                    ((equal? (car operator) '-) (- result (car operand)))\n \
    \                          ((equal? (car operator) '*) (* result (car operand)))\n\
    \                           ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                           ((equal? (car operator) '**) (expt result\
    \ (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_algebra_iter oprnd oprtn)\n    (cond [(empty? oprtn) (first oprnd)]\n\
    \          [else (do_algebra_iter (cons (eval (first oprtn) (first oprnd) (second\
    \ oprnd)) (rest (rest oprnd))) (rest oprtn))]))\n  (do_algebra_iter operand operator))\n",
  "  (define (helper oprnd oprtr)\n    (cond [(empty? oprtr) (car oprnd)]\n      \
    \    [(= (car oprtr) '+) (+ (car oprnd) (helper (cdr oprnd) (cdr oprtr)))]\n \
    \         [(= (car oprtr) '-) (- (car oprnd) (helper (cdr oprnd) (cdr oprtr)))]\n\
    \          [(= (car oprtr) '*) (* (car oprnd) (helper (cdr oprnd) (cdr oprtr)))]\n\
    \          [(= (car oprtr) '//) (quotient (car oprnd) (helper (cdr oprnd) (cdr\
    \ oprtr)))]\n          [(= (car oprtr) '**) (expt (car oprnd) (helper (cdr oprnd)\
    \ (cdr oprtr)))]))\n  (helper operand operator))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond [(null? operator) result]\n          [else\
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \         (cond [(equal? (car operator) '+) (+ result (car operand))]\n      \
    \                                   [(equal? (car operator) '-) (- result (car\
    \ operand))]\n                                         [(equal? (car operator)\
    \ '*) (* result (car operand))]\n                                         [(equal?\
    \ (car operator) '//) (quotient result (car operand))]\n                     \
    \                    [(equal? (car operator) '**) (expt result (car operand))]))]))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (cond [(empty? operator)\
    \ result]\n          [else (loop (cdr operator) (cdr operand)\n              \
    \        (match (car operator)\n                        ['+ (+ result (cadr operand))]\n\
    \                        ['* (* result (cadr operand))]\n                    \
    \    ['** (expt result (cadr operand))]\n                        ['// (quotient\
    \ result (cadr operand))]\n                        ['- (- result (cadr operand))]))])))\n\
    </code>\n", "  (define (do_algebra_iter opers operands)\n    (cond\n      [(empty?\
    \ opers) (first operands)]\n      [(empty? (rest operands)) (first operands)]\n\
    \      [else\n       (do_algebra_iter (rest opers)\n                        (cons\
    \ (eval (list (first operands) (first opers) (second operands)))\n           \
    \                   (rest (rest operands))))]))\n  (do_algebra_iter operator operand))\n",
  "  (cond\n    [(empty? operator) (first operand)]\n    [(empty? operand) (first\
    \ operator)]\n    [else\n     (cond\n       [(equal? (first operator) '+)\n  \
    \      (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n    \
    \   [(equal? (first operator) '-)\n        (- (first operand) (do_algebra (rest\
    \ operator) (rest operand)))]\n       [(equal? (first operator) '*)\n        (*\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(equal?\
    \ (first operator) '//)\n        (quotient (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(equal? (first operator) '**)\n        (expt (first\
    \ operand) (do_algebra (rest operator) (rest operand))))]))\n  )\n</code>\n",
  "  (define (helper opers ops)\n    (if (null? ops)\n        (car ops)\n        (helper\
    \ (cdr opers) (cons (eval `(,(car opers) ,(car ops) ,(car (cdr ops)))) (cdr (cdr\
    \ ops))))))\n  (helper operator operand))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((string=? (car operator) \"+\")\n                        \
    \      (+ result (car operand)))\n                             ((string=? (car\
    \ operator) \"-\")\n                              (- result (car operand)))\n\
    \                             ((string=? (car operator) \"*\")\n             \
    \                 (* result (car operand)))\n                             ((string=?\
    \ (car operator) \"//\")\n                              (quotient result (car\
    \ operand)))\n                             ((string=? (car operator) \"**\")\n\
    \                              (expt result (car operand)))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\n\
    \      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq?\
    \ op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator operand)\n   \
    \ (if (null? operator)\n        (car operand)\n        (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))))\n  (do_algebra_helper operator\
    \ operand))\n", "  (define (do_algebra_iter operator operand result)\n    (cond\n\
    \      [(null? operator) result]\n      [(= (length operator) 1) (do_algebra_iter\
    \ (cdr operator) (cdr operand) (eval `(,(car operator) ,result ,(car operand))))]\n\
    \      [else (do_algebra_iter (cdr operator) (cdr operand) (eval `(,(car operator)\
    \ ,result ,(car operand))))]))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n \
    \     [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n     \
    \ [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra_helper operator operand)\n    (cond\n      [(null? operator)\
    \ (car operand)]\n      [(null? (cdr operator)) (do_op (car operand) (cadr operand)\
    \ (car operator))]\n      [else (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))]))\n  (do_algebra_helper operator operand))\n",
  "  (define (helper opers operands)\n    (if (null? opers)\n        (car operands)\n\
    \        (helper (cdr opers)\n                (cons (eval (list (car opers) (car\
    \ operands) (car (cdr operands))))\n                      (cdr (cdr operands))))))\n\
    \  (helper operator operand))\n", "  (define (do_algebra_helper operator operand)\n\
    \    (if (null? operator)\n        (car operand)\n        (do_algebra_helper (cdr\
    \ operator)\n                           (cons (eval (list (car operator) (car\
    \ operand) (cadr operand)))\n                                 (cddr operand)))))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else\n\
    \       (do_algebra_iter (rest operator) (rest operand)\n                    \
    \    (match-define (list op operand1 operand2) (list (first operator) result (first\
    \ operand)))\n                        (cond\n                          [(equal?\
    \ op '+) (+ operand1 operand2)]\n                          [(equal? op '-) (-\
    \ operand1 operand2)]\n                          [(equal? op '*) (* operand1 operand2)]\n\
    \                          [(equal? op '//) (quotient operand1 operand2)]\n  \
    \                        [(equal? op '**) (expt operand1 operand2)]))]))\n  (do_algebra_iter\
    \ operator operand (first operand)))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (cond [(empty? operator) result]\n          [else (do_algebra_helper\
    \ (rest operator) (rest operand)\n                                   (match-define\
    \ (list op operand1 operand2) (list (first operator) (first operand) (second operand)))\n\
    \                                   (cond [(equal? op '+) (+ operand1 operand2)]\n\
    \                                         [(equal? op '-) (- operand1 operand2)]\n\
    \                                         [(equal? op '*) (* operand1 operand2)]\n\
    \                                         [(equal? op '//) (quotient operand1\
    \ operand2)]\n                                         [(equal? op '**) (expt\
    \ operand1 operand2)]))]))\n  (do_algebra_helper operator operand 0))\n", "  (define\
    \ (do_algebra_iter operator operand result)\n    (cond\n      [(empty? operator)\
    \ (first operand)]\n      [(empty? operand) result]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand)\n                             (cond\n       \
    \                        [(equal? (first operator) '+) (+ result (first operand))]\n\
    \                               [(equal? (first operator) '-) (- result (first\
    \ operand))]\n                               [(equal? (first operator) '*) (*\
    \ result (first operand))]\n                               [(equal? (first operator)\
    \ '//) (quotient result (first operand))]\n                               [(equal?\
    \ (first operator) '**) (expt result (first operand))]))]))\n  (do_algebra_iter\
    \ operator operand 0))\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter (rest\
    \ operator) (rest operand)\n                             (match (first operator)\n\
    \                               ['+ (add1 (first operand) result)]\n         \
    \                      ['* (mul1 (first operand) result)]\n                  \
    \             ['** (expt1 (first operand) result)]\n                         \
    \      ['/ (div1 (first operand) result)]\n                               ['-\
    \ (sub1 (first operand) result)]))]))\n  (do_algebra_iter operator operand (first\
    \ operand)))\n", "  (define (do_algebra_helper operator operand result)\n    (cond\n\
    \      [(empty? operator) result]\n      [else (do_algebra_helper (rest operator)\
    \ (rest operand) (eval (list (first operator) result (first operand))))]))\n \
    \ (do_algebra_helper operator operand (first operand)))\n", "  (define (do-op\
    \ op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op\
    \ '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//)\
    \ (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n  (define (do-ops\
    \ ops)\n    (if (empty? ops)\n        (error \"No operations\")\n        (let\
    \ ([op (first ops)]\n              [op1 (first operand)]\n              [op2 (second\
    \ operand)])\n          (do-op op1 op2 op))))\n  (do-ops operator))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand)\n       \
    \                    (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (eval_op op1 op2 op)\n    (cond [(eq?\
    \ op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n          [(eq? op\
    \ '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n          [(eq?\
    \ op '**) (expt op1 op2)]))\n  (define (eval_op_list ops ops_rem)\n    (if (null?\
    \ ops_rem)\n        ops\n        (eval_op_list (eval_op (car ops) (car ops_rem)\
    \ (car operator)) (cdr ops_rem))))\n  (eval_op_list (car operand) (cdr operand)))\n",
  "  (define (do_algebra_iter operator operand result)\n    (cond ((null? operator)\
    \ result)\n          ((eq? (car operator) '+) (do_algebra_iter (cdr operator)\
    \ (cdr operand) (+ result (car operand))))\n          ((eq? (car operator) '-)\
    \ (do_algebra_iter (cdr operator) (cdr operand) (- result (car operand))))\n \
    \         ((eq? (car operator) '*) (do_algebra_iter (cdr operator) (cdr operand)\
    \ (* result (car operand))))\n          ((eq? (car operator) '//) (do_algebra_iter\
    \ (cdr operator) (cdr operand) (quotient result (car operand))))\n          ((eq?\
    \ (car operator) '**) (do_algebra_iter (cdr operator) (cdr operand) (expt result\
    \ (car operand))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_algebra_helper operator operand result)\n    (cond [(empty? operator)\
    \ result]\n          [else (do_algebra_helper (rest operator) (rest operand)\n\
    \                                   (cond [(equal? (first operator) '+) (+ result\
    \ (first operand))]\n                                         [(equal? (first\
    \ operator) '-) (- result (first operand))]\n                                \
    \         [(equal? (first operator) '*) (* result (first operand))]\n        \
    \                                 [(equal? (first operator) '//) (quotient result\
    \ (first operand))]\n                                         [(equal? (first\
    \ operator) '**) (expt result (first operand))]))]))\n  (do_algebra_helper operator\
    \ operand (first operand)))\n", "  (define (do_algebra-helper operator operand\
    \ result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra-helper\
    \ (rest operator) (rest operand) (eval (list (first operator) result (first operand))))]))\n\
    \  (do_algebra-helper operator operand (first operand)))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (-\
    \ op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient\
    \ op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define (do_ops ops\
    \ ops1)\n    (cond ((null? ops) ops1)\n          ((null? ops1) ops)\n        \
    \  (else (do_ops (cdr ops) (cons (do_op (car ops1) (car (cdr ops1)) (car ops))\
    \ (cdr (cdr ops1)))))))\n  (car (do_ops operator operand)))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (cond [(empty? operator) result]\n          [else\
    \ (do_algebra_iter (rest operator) (rest operand)\n                          \
    \       (cond [(equal? (first operator) '+) (+ (first operand) (second operand))]\n\
    \                                       [(equal? (first operator) '-) (- (first\
    \ operand) (second operand))]\n                                       [(equal?\
    \ (first operator) '*) (* (first operand) (second operand))]\n               \
    \                        [(equal? (first operator) '//) (quotient (first operand)\
    \ (second operand))]\n                                       [(equal? (first operator)\
    \ '**) (expt (first operand) (second operand))]))]))\n  (do_algebra_iter operator\
    \ operand (first operand)))\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand)\n                         (match (car operator)\n            \
    \               [\"+\" (+ result (car operand))]\n                           [\"\
    -\" (- result (car operand))]\n                           [\"*\" (* result (car\
    \ operand))]\n                           [\"//\" (quotient result (car operand))]\n\
    \                           [\"**\" (expt result (car operand))]))))\n  (do_algebra_iter\
    \ operator operand (car operand)))\n</code>\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_iter\
    \ (cdr operator) (cdr operand)\n                         (cond\n             \
    \              ((equal? (car operator) '+) (+ result (car operand)))\n       \
    \                    ((equal? (car operator) '-) (- result (car operand)))\n \
    \                          ((equal? (car operator) '*) (* result (car operand)))\n\
    \                           ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                           ((equal? (car operator) '**) (expt result\
    \ (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (helper opers operands)\n    (cond [(empty? opers) (first operands)]\n\
    \          [(empty? (rest operands)) (first operands)]\n          [else (helper\
    \ (rest opers) (cons (eval (list (first operands) (first opers) (second operands)))\
    \ (rest (rest operands))))]))\n  (helper operator operand))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\
    \ [(equal? (car operator) '+) (+ result (car operand))]\n                    [(equal?\
    \ (car operator) '-) (- result (car operand))]\n                    [(equal? (car\
    \ operator) '*) (* result (car operand))]\n                    [(equal? (car operator)\
    \ '//) (quotient result (car operand))]\n                    [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand)\n                             (match (first operator)\n\
    \                               ['+ (add1 (first operand) result)]\n         \
    \                      ['* (mul1 (first operand) result)]\n                  \
    \             ['^ (expt1 (first operand) result)]\n                          \
    \     ['- (sub1 (first operand) result)]\n                               ['//\
    \ (div1 (first operand) result)]))]))\n  (do_algebra_iter operator operand (first\
    \ operand)))\n", "  (define (do_algebra_iter operator operand result)\n    (cond\n\
    \      [(empty? operator) (first operand)]\n      [(empty? operand) (error 'do_algebra\
    \ \"operand is empty\")]\n      [else\n       (do_algebra_iter (rest operator)\
    \ (rest operand)\n                        (case (first operator)\n           \
    \               [(+) (+ (first operand) result)]\n                          [(-)\
    \ (- (first operand) result)]\n                          [(*) (* (first operand)\
    \ result)]\n                          [(//) (quotient (first operand) result)]\n\
    \                          [(**) (expt (first operand) result)]))]))\n  (do_algebra_iter\
    \ operator operand 0))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (cond\n      [(null? operator) result]\n      [(null? operand) result]\n\
    \      [(null? (cdr operand)) result]\n      [else\n       (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                          (match (car operator)\n\
    \                            ['+ (car operand) + (cadr operand)]\n           \
    \                 ['* (car operand) * (cadr operand)]\n                      \
    \      ['- (car operand) - (cadr operand)]\n                            ['// (car\
    \ operand) // (cadr operand)]\n                            ['** (car operand)\
    \ ** (cadr operand)]))]))\n  (do_algebra_helper operator operand 0))\n", "  (define\
    \ (do_algebra_iter operator operand result)\n    (if (null? operator)\n      \
    \  result\n        (do_algebra_iter (cdr operator) (cdr operand)\n           \
    \              (case (car operator)\n                           ((+ - * // **)\
    \ (apply (car operator) result (car operand)))\n                           (else\
    \ (error \"Invalid operator\"))))))\n  (do_algebra_iter operator operand (car\
    \ operand)))\n", "  (define (do_algebra_helper operator operand result)\n    (cond\n\
    \      [(empty? operator) result]\n      [else (do_algebra_helper (rest operator)\
    \ (rest operand)\n                               (cond\n                     \
    \            [(equal? (first operator) '+) (+ (first operand) (second operand))]\n\
    \                                 [(equal? (first operator) '-) (- (first operand)\
    \ (second operand))]\n                                 [(equal? (first operator)\
    \ '*) (* (first operand) (second operand))]\n                                \
    \ [(equal? (first operator) '//) (quotient (first operand) (second operand))]\n\
    \                                 [(equal? (first operator) '**) (expt (first\
    \ operand) (second operand))]))]))\n  (do_algebra_helper operator operand (first\
    \ operand)))\n", "  (define (do_algebra-helper operator operand result)\n    (cond\n\
    \      [(empty? operator) (first operand)]\n      [(= (length operator) 1) (apply\
    \ (first operator) (append operand result))]\n      [else (do_algebra-helper (rest\
    \ operator) (rest operand) (cons (apply (first operator) (append (list (first\
    \ operand)) result)) '()))]))\n  (do_algebra-helper operator operand '()))\n",
  "  (define (do_algebra_iter operator operand result)\n    (cond\n      [(empty?\
    \ operator) (first operand)]\n      [(empty? operand) result]\n      [else\n \
    \      (do_algebra_iter (rest operator) (rest operand)\n                     \
    \   (cond\n                          [(= (first operator) '+) (+ result (first\
    \ operand))]\n                          [(= (first operator) '-) (- result (first\
    \ operand))]\n                          [(= (first operator) '*) (* result (first\
    \ operand))]\n                          [(= (first operator) '//) (quotient result\
    \ (first operand))]\n                          [(= (first operator) '**) (expt\
    \ result (first operand))]))]))\n  (do_algebra_iter operator operand 0))\n", " \
    \ (define (do_algebra_iter operator operand acc)\n    (cond [(empty? operator)\
    \ (first operand)]\n          [(empty? (rest operator)) (first operand)]\n   \
    \       [else (do_algebra_iter (rest operator) (rest operand) (do_op (first operator)\
    \ (first operand) (first (rest operand))))]))\n  (define (do_op op a b)\n    (cond\
    \ [(equal? op '+) (+ a b)]\n          [(equal? op '-) (- a b)]\n          [(equal?\
    \ op '*) (* a b)]\n          [(equal? op '//) (quotient a b)]\n          [(equal?\
    \ op '**) (expt a b)]))\n  (do_algebra_iter operator operand 0))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (cond ((null? operator) result)\n\
    \          ((equal? (car operator) '+) (do_algebra_helper (cdr operator) (cdr\
    \ operand) (+ result (car operand))))\n          ((equal? (car operator) '-) (do_algebra_helper\
    \ (cdr operator) (cdr operand) (- result (car operand))))\n          ((equal?\
    \ (car operator) '*) (do_algebra_helper (cdr operator) (cdr operand) (* result\
    \ (car operand))))\n          ((equal? (car operator) '//) (do_algebra_helper\
    \ (cdr operator) (cdr operand) (quotient result (car operand))))\n          ((equal?\
    \ (car operator) '**) (do_algebra_helper (cdr operator) (cdr operand) (expt result\
    \ (car operand))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (define (eval-op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n  \
    \    [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (eval-ops\
    \ ops)\n    (cond\n      [(empty? ops) 0]\n      [(empty? (rest ops)) (first ops)]\n\
    \      [else (eval-op (first ops) (eval-ops (rest ops)) (first operator))]))\n\
    \  (eval-ops operand))\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand)\n                         (match (car operator)\n            \
    \               ['+ (apply + (cons result (car operand)))]\n                 \
    \          ['* (apply * (cons result (car operand)))]\n                      \
    \     ['- (apply - (cons result (car operand)))]\n                           ['//\
    \ (apply / (cons result (car operand)))]\n                           ['** (apply\
    \ expt (cons result (car operand))))])))\n  (do_algebra_iter operator operand\
    \ (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op\
    \ '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1\
    \ op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1\
    \ op2)]))\n  (define (do_algebra_helper operator operand)\n    (if (null? operator)\n\
    \        (car operand)\n        (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))))\n  (do_algebra_helper operator operand))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (match (car operator)\n                ['+ (+ result (car operand))]\n\
    \                ['* (* result (car operand))]\n                ['- (- result\
    \ (car operand))]\n                ['// (quotient result (car operand))]\n   \
    \             ['** (expt result (car operand))])))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand)\n                 \
    \              (cond\n                                 [(equal? (first operator)\
    \ '+) (+ (first operand) (second operand))]\n                                \
    \ [(equal? (first operator) '-) (- (first operand) (second operand))]\n      \
    \                           [(equal? (first operator) '*) (* (first operand) (second\
    \ operand))]\n                                 [(equal? (first operator) '//)\
    \ (quotient (first operand) (second operand))]\n                             \
    \    [(equal? (first operator) '**) (expt (first operand) (second operand))]))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (cond\n      [(null? operator) (car operand)]\n     \
    \ [(null? (cdr operator)) (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))]\n      [else (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))]))\n  (do_algebra_helper operator\
    \ operand))\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (cond [(empty? operator) result]\n          [else (loop (cdr\
    \ operator) (cdr operand)\n                      (match (car operator)\n     \
    \                   ['+ (+ result (cadr operand))]\n                        ['*\
    \ (* result (cadr operand))]\n                        ['** (expt result (cadr\
    \ operand))]\n                        ['// (floor result (cadr operand))]\n  \
    \                      ['- (- result (cadr operand))]))])))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand)\n                 \
    \              (match (first operator)\n                                 ['+ (add1\
    \ result (first operand))]\n                                 ['* (add1 result\
    \ (first operand))]\n                                 ['- (sub1 result (first\
    \ operand))]\n                                 ['// (sub1 result (first operand))]\n\
    \                                 ['** (sub1 result (first operand))]))]))\n \
    \ (do_algebra_helper operator operand (first operand)))\n", "  (define (helper\
    \ operator operand)\n    (cond\n      [(empty? operator) (first operand)]\n  \
    \    [(empty? operand) (error 'do_algebra \"empty operand\")]\n      [else\n \
    \      (define (do-op op a b)\n         (cond\n           [(eq? op '+) (+ a b)]\n\
    \           [(eq? op '-) (- a b)]\n           [(eq? op '*) (* a b)]\n        \
    \   [(eq? op '//) (quotient a b)]\n           [(eq? op '**) (expt a b)]\n    \
    \       [else (error 'do_algebra \"invalid operator\")]))\n       (do-op (first\
    \ operator) (first operand) (helper (rest operator) (rest operand)))]))\n  (helper\
    \ operator operand))\n</code>\n", "  (cond [(empty? operator) (car operand)]\n\
    \        [(= (length operator) 1) (apply (car operator) operand)]\n        [else\
    \ (do_algebra (cdr operator) (cons (apply (car operator) (take operand 2)) (drop\
    \ operand 2)))]))\n", "  (define (helper operator operand)\n    (cond [(empty?\
    \ operator) (first operand)]\n          [(= (length operator) 1) (apply (first\
    \ operator) operand)]\n          [else (helper (rest operator) (cons (apply (first\
    \ operator) (take operand 2)) (drop operand 2)))]))\n  (helper operator operand))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (cond\n      [(null? operator) (car operand)]\n     \
    \ [(null? (cdr operator)) (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))]\n      [else (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))]))\n  (do_algebra_helper operator\
    \ operand))\n", "  (define (helper operator operand)\n    (cond\n      [(empty?\
    \ operator) (first operand)]\n      [(= (first operator) '+) (add (first operand)\
    \ (helper (rest operator) (rest operand)))]\n      [(= (first operator) '-) (sub\
    \ (first operand) (helper (rest operator) (rest operand)))]\n      [(= (first\
    \ operator) '*) (mul (first operand) (helper (rest operator) (rest operand)))]\n\
    \      [(= (first operator) '//) (div (first operand) (helper (rest operator)\
    \ (rest operand)))]\n      [(= (first operator) '**) (expt (first operand) (helper\
    \ (rest operator) (rest operand)))]))\n  (helper operator operand))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand)\n       \
    \                    (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (cond [(null? operator) result]\n          [else (do_algebra_iter (cdr operator)\
    \ (cdr operand)\n                                 (cond [(equal? (car operator)\
    \ '+') (+ result (car operand))]\n                                       [(equal?\
    \ (car operator) '-') (- result (car operand))]\n                            \
    \           [(equal? (car operator) '*') (* result (car operand))]\n         \
    \                              [(equal? (car operator) '//') (quotient result\
    \ (car operand))]\n                                       [(equal? (car operator)\
    \ '**') (expt result (car operand))]))]))\n  (do_algebra_iter operator operand\
    \ (car operand)))\n", "  (define (helper oprnd oprt)\n    (cond [(empty? oprnd)\
    \ (error \"empty operand\")]\n          [(empty? oprt) (car oprnd)]\n        \
    \  [else (helper (cons (eval (list (car oprt) (car oprnd) (car (cdr oprnd))))\
    \ (cdr (cdr oprnd))) (cdr oprt))]))\n  (helper operand operator))\n", "  (define\
    \ (do_algebra-helper operator operand result)\n    (cond [(null? operator) result]\n\
    \          [(null? operand) result]\n          [(null? (cdr operand)) result]\n\
    \          [else (do_algebra-helper (cdr operator) (cdr operand) (apply (symbol-&gt;string\
    \ (car operator)) result (car operand)))]))\n  (do_algebra-helper operator operand\
    \ (car operand)))\n", "  (define (do_algebra_iter operator operand result)\n \
    \   (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand)\n                         (cond\n                           ((eq?\
    \ (car operator) '+) (+ result (car operand)))\n                           ((eq?\
    \ (car operator) '-) (- result (car operand)))\n                           ((eq?\
    \ (car operator) '*) (* result (car operand)))\n                           ((eq?\
    \ (car operator) '//) (quotient result (car operand)))\n                     \
    \      ((eq? (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_iter\
    \ operator operand (car operand)))\n", "  (define (calc op1 op2 op)\n    (cond\
    \ [(equal? op '+) (+ op1 op2)]\n          [(equal? op '-) (- op1 op2)]\n     \
    \     [(equal? op '*) (* op1 op2)]\n          [(equal? op '//) (quotient op1 op2)]\n\
    \          [(equal? op '**) (expt op1 op2)]))\n  (define (calc-list ops ops-rest)\n\
    \    (cond [(empty? ops-rest) (first ops)]\n          [(empty? ops) (first ops-rest)]\n\
    \          [else (calc-list (list (calc (first ops) (first ops-rest) (first operator)))\
    \ (rest ops-rest))]))\n  (calc-list (list (first operand)) (rest operand)))\n",
  "  (define (eval-op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n  \
    \    [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (eval-op-list\
    \ ops ops-rest)\n    (if (null? ops-rest)\n        (car ops)\n        (eval-op\
    \ (car ops) (car ops-rest) (car operator))))\n  (eval-op-list operand (cdr operand)))\n",
  "  (define (do-op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do-op-list\
    \ ops ops2)\n    (cond\n      [(null? ops) (car ops2)]\n      [(null? ops2) (car\
    \ ops)]\n      [else (do-op (car ops) (car ops2) (car operator))]))\n  (do-op-list\
    \ (cdr operand) (cdr (cdr operand))))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand) (eval `(,(car operator) ,result ,(car operand))))))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_iter (rest operator) (rest operand)\n                   \
    \          (match (first operator)\n                               [('+ ) (+ result\
    \ (first operand))]\n                               [('- ) (- result (first operand))]\n\
    \                               [('* ) (* result (first operand))]\n         \
    \                      [('// ) (quotient result (first operand))]\n          \
    \                     [('** ) (expt result (first operand))]))]))\n  (do_algebra_iter\
    \ operator operand (first operand)))\n", "  (define (do_algebra_iter oprnd oprtr)\n\
    \    (cond\n      [(null? oprtr) (car oprnd)]\n      [else (do_algebra_iter (list\
    \ (eval (list (car oprtr) (car oprnd) (car (cdr oprnd))))) (cdr oprtr))]))\n \
    \ (do_algebra_iter operand operator))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((string=? (car operator) \"+\")\n                        \
    \      (+ result (car operand)))\n                             ((string=? (car\
    \ operator) \"-\")\n                              (- result (car operand)))\n\
    \                             ((string=? (car operator) \"*\")\n             \
    \                 (* result (car operand)))\n                             ((string=?\
    \ (car operator) \"//\")\n                              (quotient result (car\
    \ operand)))\n                             ((string=? (car operator) \"**\")\n\
    \                              (expt result (car operand)))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (define (helper operator operand)\n\
    \    (cond ((null? operator) (car operand))\n          ((= (length operator) 1)\
    \ (eval (list (car operand) (car operator) (cadr operand))))\n          (else\
    \ (eval (list (car operand) (car operator) (helper (cdr operator) (cdr operand)))))))\n\
    \  (helper operator operand))\n", "  (define (eval-op op a b)\n    (cond\n   \
    \   [(equal? op '+) (+ a b)]\n      [(equal? op '-) (- a b)]\n      [(equal? op\
    \ '*) (* a b)]\n      [(equal? op '//) (quotient a b)]\n      [(equal? op '**)\
    \ (expt a b)]))\n  (define (eval-expr ops opsands)\n    (if (null? ops)\n    \
    \    (car opsands)\n        (eval-op (car ops) (car opsands) (eval-expr (cdr ops)\
    \ (cdr opsands)))))\n  (eval-expr operator operand))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond [(equal? op '+) (+ op1 op2)]\n          [(equal? op '-) (-\
    \ op1 op2)]\n          [(equal? op '*) (* op1 op2)]\n          [(equal? op '//)\
    \ (quotient op1 op2)]\n          [(equal? op '**) (expt op1 op2)]))\n  (define\
    \ (do_calc ops ops2)\n    (cond [(empty? ops) (first ops2)]\n          [(empty?\
    \ ops2) (first ops)]\n          [else (do_calc (rest ops) (cons (do_op (first\
    \ ops) (first ops2) (first ops2)) (rest ops2)))]))\n  (do_calc operator operand))\n",
  "  (define (do-op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do-op-list\
    \ ops ops2)\n    (if (null? ops)\n        ops2\n        (do-op-list (cdr ops)\
    \ (do-op (car ops2) (car (cdr ops2)) (car ops)))))\n  (do-op-list operator operand))\n",
  "  (define (calc op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n  \
    \    [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n      [(equal?\
    \ op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n  (define\
    \ (calc-list ops ops-rest)\n    (if (null? ops-rest)\n        (car ops)\n    \
    \    (calc-list (cons (calc (car ops) (car ops-rest) (car operator)) (cdr ops-rest))\
    \ (cdr ops-rest))))\n  (calc-list (list (car operand)) (cdr operand)))\n", " \
    \ (define (do_algebra_helper operator operand result)\n    (cond\n      [(empty?\
    \ operator) result]\n      [else (do_algebra_helper (rest operator) (rest operand)\n\
    \                               (cond\n                                 [(equal?\
    \ (first operator) '+) (+ (first operand) (second operand))]\n               \
    \                  [(equal? (first operator) '-) (- (first operand) (second operand))]\n\
    \                                 [(equal? (first operator) '*) (* (first operand)\
    \ (second operand))]\n                                 [(equal? (first operator)\
    \ '//) (quotient (first operand) (second operand))]\n                        \
    \         [(equal? (first operator) '**) (expt (first operand) (second operand))]))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (match\
    \ (car operator)\n                ['+ (apply + result (car operand))]\n      \
    \          ['* (apply * result (car operand))]\n                ['- (apply - result\
    \ (car operand))]\n                ['// (apply quotient result (car operand))]\n\
    \                ['** (apply expt result (car operand))])))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand) (eval (list (first\
    \ operator) result (first operand))))]))\n  (do_algebra_helper operator operand\
    \ (first operand)))\n", "  (define (calc op1 op2 op)\n    (cond\n      [(eq? op\
    \ '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1\
    \ op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1\
    \ op2)]))\n  (define (algebra op oper)\n    (if (null? (cdr oper))\n        (car\
    \ oper)\n        (calc (car oper) (algebra (car op) (cdr oper)) (cadr op))))\n\
    \  (algebra operator operand))\n", "  (cond\n    [(empty? operator) (first operand)]\n\
    \    [(empty? operand) (error 'do_algebra \"empty operand\")]\n    [else\n   \
    \  (define op (first operator))\n     (define op1 (first operand))\n     (define\
    \ op2 (second operand))\n     (cond\n       [(eq? op '+) (+ op1 (do_algebra (rest\
    \ operator) (rest operand)))]\n       [(eq? op '-) (- op1 (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(eq? op '*) (* op1 (do_algebra (rest operator) (rest\
    \ operand)))]\n       [(eq? op '//) (quotient op1 (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(eq? op '**) (expt op1 (do_algebra (rest operator)\
    \ (rest operand)))]\n       [else (error 'do_algebra \"unknown operator\")]\n\
    \       )\n     ]\n    )\n  )\n", "  (define (helper oprnd oprtr)\n    (cond [(empty?\
    \ oprtr) (first oprnd)]\n          [(= (first oprtr) '+) (add (first oprnd) (helper\
    \ (rest oprnd) (rest oprtr)))]\n          [(= (first oprtr) '-) (sub (first oprnd)\
    \ (helper (rest oprnd) (rest oprtr)))]\n          [(= (first oprtr) '*) (mul (first\
    \ oprnd) (helper (rest oprnd) (rest oprtr)))]\n          [(= (first oprtr) '//)\
    \ (div (first oprnd) (helper (rest oprnd) (rest oprtr)))]\n          [(= (first\
    \ oprtr) '**) (expt (first oprnd) (helper (rest oprnd) (rest oprtr)))]))\n  (helper\
    \ operand operator))\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand)\n                         (case (car operator)\n             \
    \              ((+) (+ result (car operand)))\n                           ((-)\
    \ (- result (car operand)))\n                           ((*) (* result (car operand)))\n\
    \                           ((//) (quotient result (car operand)))\n         \
    \                  ((**) (expt result (car operand)))))))\n  (do_algebra_iter\
    \ operator operand (car operand)))\n", "  (define (calc op1 op2 op)\n    (cond\n\
    \      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq?\
    \ op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (calc-list ops ops-rest)\n    (if (null? ops-rest)\n\
    \        (car ops)\n        (calc-list (cons (calc (car ops) (car ops-rest) (car\
    \ operator)) (cdr ops-rest)) (cdr ops-rest))))\n  (calc-list (list (car operand))\
    \ (cdr operand)))\n", "  (define (do_algebra_iter operator operand result)\n \
    \   (cond\n      [(null? operator)\n       result]\n      [else\n       (do_algebra_iter\
    \ (cdr operator) (cdr operand)\n                        (match (car operator)\n\
    \                          ['+ (apply + result (car operand))]\n             \
    \             ['* (apply * result (car operand))]\n                          ['-\
    \ (apply - result (car operand))]\n                          ['// (apply // result\
    \ (car operand))]\n                          ['** (apply ** result (car operand))]))]))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(null? operator) result]\n     \
    \ [(null? operand) result]\n      [(null? (cdr operand)) result]\n      [else\n\
    \       (do_algebra_helper (cdr operator) (cdr operand)\n                    \
    \      (cond\n                            [(string=? (car operator) \"+\") (+\
    \ result (car operand))]\n                            [(string=? (car operator)\
    \ \"-\") (- result (car operand))]\n                            [(string=? (car\
    \ operator) \"*\") (* result (car operand))]\n                            [(string=?\
    \ (car operator) \"//\") (quotient result (car operand))]\n                  \
    \          [(string=? (car operator) \"**\") (expt result (car operand))]))]))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1\
    \ op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n\
    \      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (cond\n      [(null? operator) (car operand)]\n      [(null? (cdr\
    \ operator)) (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand))\
    \ (car operator))]\n      [else (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))]))\n  (do_algebra_helper operator operand))\n",
  "  (define (do_algebra_helper operator operand result)\n    (cond [(empty? operator)\
    \ (first operand)]\n          [(= (length operator) 1) (eval `(,(first operator)\
    \ ,result ,(first operand))) ]\n          [else (do_algebra_helper (rest operator)\
    \ (rest operand) (eval `(,(first operator) ,result ,(first operand))))]))\n  (do_algebra_helper\
    \ operator operand (first operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\
    \ [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n          [(eq?\
    \ op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n         \
    \ [(eq? op '**) (expt op1 op2)]))\n  (define (do_op_list op_list op_list2)\n \
    \   (cond [(empty? op_list) (car op_list2)]\n          [(empty? op_list2) (car\
    \ op_list)]\n          [else (do_op (car op_list) (car op_list2) (car operator))]))\n\
    \  (do_op_list operand (cdr operand)))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand)\n                             (match (first operator)\n\
    \                               [('+ ) (+ result (first operand))]\n         \
    \                      [('- ) (- result (first operand))]\n                  \
    \             [('* ) (* result (first operand))]\n                           \
    \    [('// ) (quotient result (first operand))]\n                            \
    \   [('** ) (expt result (first operand))]))]))\n  (do_algebra_iter operator operand\
    \ (first operand)))\n", "  (let loop ([operator operator] [operand operand] [result\
    \ (car operand)])\n    (cond [(null? operator) result]\n          [else (loop\
    \ (cdr operator) (cdr operand)\n                      (match (car operator)\n\
    \                        [(+ _) (+ result (cadr operand))]\n                 \
    \       [(- _) (- result (cadr operand))]\n                        [(* _) (* result\
    \ (cadr operand))]\n                        [(// _) (quotient result (cadr operand))]\n\
    \                        [(** _) (expt result (cadr operand))]))])))\n", "  (define\
    \ (do_algebra-helper operator operand)\n    (cond\n      [(empty? operator) (first\
    \ operand)]\n      [(= (length operator) 1) (eval (list (first operand) (first\
    \ operator) (second operand)))]\n      [else (do_algebra-helper (rest operator)\
    \ (cons (eval (list (first operand) (first operator) (second operand))) (rest\
    \ operand)))]))\n  (do_algebra-helper operator operand))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand) (eval (list (first\
    \ operator) result (first operand))))]))\n  (do_algebra_helper operator operand\
    \ (first operand)))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_helper (rest\
    \ operator) (rest operand)\n                               (cond\n           \
    \                      [(equal? (first operator) '+) (+ (first operand) (second\
    \ operand))]\n                                 [(equal? (first operator) '-) (-\
    \ (first operand) (second operand))]\n                                 [(equal?\
    \ (first operator) '*) (* (first operand) (second operand))]\n               \
    \                  [(equal? (first operator) '//) (quotient (first operand) (second\
    \ operand))]\n                                 [(equal? (first operator) '**)\
    \ (expt (first operand) (second operand))]))]))\n  (do_algebra_helper operator\
    \ operand (first operand)))\n", "  (define (do-algebra-helper operator operand\
    \ result)\n    (cond\n      [(empty? operator) result]\n      [else (do-algebra-helper\
    \ (rest operator) (rest operand)\n                               (match (first\
    \ operator)\n                                 ['+ (add1 result (first operand))]\n\
    \                                 ['* (add1 result (first operand))]\n       \
    \                          ['// (add1 result (first operand))]\n             \
    \                    ['** (add1 result (first operand))]\n                   \
    \              ['- (sub1 result (first operand))]))]))\n  (do-algebra-helper operator\
    \ operand 0))\n</code>\nI have tried to use the <code>match</code> function to\
    \ match the first element of the operator list with the corresponding operation,\
    \ but I am not sure how to do it.\n\n\nA:\n\nThe <code>match</code> function is\
    \ used to match a value against a pattern. In your case, the pattern is a symbol,\
    \ and the value is a symbol. So you can use the <code>match</code> function to\
    \ match the symbol against the symbol.\n<code>(define (do-algebra-helper operator\
    \ operand result)\n  (cond\n    [(empty? operator) result]\n    [else (do-algebra-helper\
    \ (rest operator) (rest operand)\n                             (match (first operator)\n\
    \                               ['+ (add1 result (first operand))]\n         \
    \                      ['* (add1 result (first operand))]\n                  \
    \             ['// (add1 result (first operand))]\n                          \
    \     ['** (add1 result (first operand))]\n                               ['-\
    \ (sub1 result (first operand))]))]))\n</code>\n", "  (define (do_op op1 op2 op)\n\
    \    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n  \
    \        [(eq? op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n\
    \          [(eq? op '**) (expt op1 op2)]))\n  (define (do_ops ops op)\n    (if\
    \ (null? ops)\n        0\n        (do_op (car ops) (do_ops (cdr ops) op) op)))\n\
    \  (do_ops operand (car operator)))\n", "  (define (do_op op1 op2 op)\n    (cond\n\
    \      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq?\
    \ op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (do_op_list ops ops_list)\n    (cond\n   \
    \   [(empty? ops_list) ops]\n      [(empty? ops) (do_op_list (car ops_list) (cdr\
    \ ops_list))]\n      [else (do_op_list (do_op (car ops) (car ops_list) (car operator))\
    \ (cdr ops_list))]))\n  (do_op_list (car operand) (cdr operand)))\n", "  (define\
    \ (do-op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq?\
    \ op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do-algebra operator\
    \ operand)\n    (cond\n      [(null? operator) (car operand)]\n      [(null? (cdr\
    \ operand)) (car operand)]\n      [else (do-op (car operand) (do-algebra (cdr\
    \ operator) (cdr operand)) (car operator))]))\n  (do-algebra operator operand))\n",
  "  (define (eval-op op operand)\n    (cond\n      [(equal? op '+) (apply + operand)]\n\
    \      [(equal? op '-) (apply - operand)]\n      [(equal? op '*) (apply * operand)]\n\
    \      [(equal? op '//) (apply // operand)]\n      [(equal? op '**) (apply expt\
    \ operand)]))\n  (eval-op (car operator) operand))\n", "  (define (do_algebra_helper\
    \ operator operand)\n    (cond [(null? operator) (car operand)]\n          [(=\
    \ (length operator) 1) (apply (car operator) operand)]\n          [else (do_algebra_helper\
    \ (cdr operator) (cons (apply (car operator) (take operand 2)) (drop operand 2)))]))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra-helper operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra-helper\
    \ (rest operator) (rest operand)\n                               (cond\n     \
    \                            [(equal? (first operator) '+) (+ (first operand)\
    \ (second operand))]\n                                 [(equal? (first operator)\
    \ '-) (- (first operand) (second operand))]\n                                \
    \ [(equal? (first operator) '*) (* (first operand) (second operand))]\n      \
    \                           [(equal? (first operator) '//) (quotient (first operand)\
    \ (second operand))]\n                                 [(equal? (first operator)\
    \ '**) (expt (first operand) (second operand))]))]))\n  (do_algebra-helper operator\
    \ operand (first operand)))\n", "  (define (do_algebra_iter oprnd oprtr)\n   \
    \ (if (null? oprtr)\n        (car oprnd)\n        (do_algebra_iter (list (eval\
    \ (list (car oprtr) (car oprnd) (cadr oprnd)))) (cdr oprtr))))\n  (do_algebra_iter\
    \ operand operator))\n", "  (define (do_op op1 op2 op)\n    (cond [(eq? op '+)\
    \ (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n          [(eq? op '*) (*\
    \ op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n          [(eq? op '**)\
    \ (expt op1 op2)]))\n  (define (do_algebra_iter operator operand result)\n   \
    \ (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand)\n                         (do_op (car operand) (car (cdr operand))\
    \ (car operator)))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq?\
    \ op '-) (- op1 op2)]\n          [(eq? op '*) (* op1 op2)]\n          [(eq? op\
    \ '//) (quotient op1 op2)]\n          [(eq? op '**) (expt op1 op2)]))\n  (define\
    \ (do_algebra_helper operator operand)\n    (cond [(null? operator) (car operand)]\n\
    \          [(eq? (car operator) '**) (do_algebra_helper (cdr operator) (cons (do_op\
    \ (car operand) (car (cdr operand)) (car operator)) (cdr (cdr operand))))]\n \
    \         [else (do_algebra_helper (cdr operator) (cons (do_op (car operand) (car\
    \ (cdr operand)) (car operator)) (cdr (cdr operand))))]))\n  (do_algebra_helper\
    \ operator operand))\n", "  (define (do_algebra_iter opers operands)\n    (cond\
    \ [(empty? opers) (first operands)]\n          [else (do_algebra_iter (rest opers)\
    \ (cons (eval (list (first operands) (first opers) (second operands))) (rest (rest\
    \ operands))))]))\n  (do_algebra_iter operator operand))\n", "  (define (do_algebra-helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) (first operand)]\n\
    \      [(empty? operand) result]\n      [else\n       (do_algebra-helper (rest\
    \ operator) (rest operand)\n                          (match (first operator)\n\
    \                            ['+ (first operand) + (second operand)]\n       \
    \                     ['* (first operand) * (second operand)]\n              \
    \              ['- (first operand) - (second operand)]\n                     \
    \       ['// (first operand) // (second operand)]\n                          \
    \  ['** (first operand) ** (second operand)]))]))\n  (do_algebra-helper operator\
    \ operand 0))\n", "  (define (do_algebra_iter operator operand result)\n    (if\
    \ (null? operator)\n        result\n        (do_algebra_iter (cdr operator) (cdr\
    \ operand)\n                         (match (car operator)\n                 \
    \          ['+ (apply + (cons result (car operand)))]\n                      \
    \     ['* (apply * (cons result (car operand)))]\n                           ['-\
    \ (apply - (cons result (car operand)))]\n                           ['// (apply\
    \ // (cons result (car operand)))]\n                           ['** (apply **\
    \ (cons result (car operand))))]))))\n  (do_algebra_iter operator operand (car\
    \ operand)))\n</code>\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter (rest\
    \ operator) (rest operand)\n                             (match (first operator)\n\
    \                               ['+ (add1 (first operand) result)]\n         \
    \                      ['* (mul1 (first operand) result)]\n                  \
    \             ['** (expt1 (first operand) result)]\n                         \
    \      ['/ (div1 (first operand) result)]\n                               ['-\
    \ (sub1 (first operand) result)]))]))\n  (do_algebra_iter operator operand (first\
    \ operand)))\n", "  (define (do_algebra_iter operator operand result)\n    (cond\n\
    \      [(empty? operator) (first operand)]\n      [(= (length operator) 1) (apply\
    \ (first operator) result (first operand))]\n      [else (do_algebra_iter (rest\
    \ operator) (rest operand) (apply (first operator) result (first operand)))]))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(null? operator) result]\n     \
    \ [(null? operand) result]\n      [(null? (cdr operand)) result]\n      [else\
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \     (match (car operator)\n                                 [\"+\" (+ result\
    \ (car operand))]\n                                 [\"-\" (- result (car operand))]\n\
    \                                 [\"*\" (* result (car operand))]\n         \
    \                        [\"//\" (quotient result (car operand))]\n          \
    \                       [\"**\" (expt result (car operand))]))]))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\
    \ [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n          [(eq?\
    \ op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n         \
    \ [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_iter operator operand\
    \ result)\n    (cond [(null? operator) result]\n          [(null? operand) result]\n\
    \          [(null? (cdr operand)) result]\n          [else (do_algebra_iter (cdr\
    \ operator) (cdr operand) (do_op (car operand) (cadr operand) (car operator)))]))\n\
    \  (do_algebra_iter operator operand 0))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (cond\n      [(null? operator) result]\n      [(= (length\
    \ operator) 1) (do_algebra_helper (cdr operator) (cdr operand) (eval `(,(car operator)\
    \ ,result ,(car operand))))]\n      [else (do_algebra_helper (cdr operator) (cdr\
    \ operand) (eval `(,(car operator) ,result ,(car operand))))]))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (cond [(empty? operator) result]\n          [else (do_algebra_helper\
    \ (rest operator) (rest operand)\n                                   (match (first\
    \ operator)\n                                          ['+ (first operand) result]\n\
    \                                          ['* (* (first operand) result)]\n \
    \                                         ['** (expt (first operand) result)]\n\
    \                                          ['// (quotient (first operand) result)]\n\
    \                                          ['- (- (first operand) result)]))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n</code>\n", "  (let\
    \ ([op (car operator)]\n        [op1 (car operand)]\n        [op2 (cadr operand)])\n\
    \    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n\
    \      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n  \
    \    [(eq? op '**) (expt op1 op2)])))\n", "  (define (helper oprnd oprt)\n   \
    \ (cond [(empty? oprnd) 0]\n          [(empty? oprt) (car oprnd)]\n          [else\
    \ (helper (cons (apply (car oprt) (take oprnd 2)) (drop oprnd 2)) (cdr oprt))]))\n\
    \  (helper operand operator))\n", "  (define (do_op op1 op2 op)\n    (cond\n \
    \     [(equal? op \"+\") (+ op1 op2)]\n      [(equal? op \"-\") (- op1 op2)]\n\
    \      [(equal? op \"*\") (* op1 op2)]\n      [(equal? op \"//\") (quotient op1\
    \ op2)]\n      [(equal? op \"**\") (expt op1 op2)]))\n  (define (do_algebra_iter\
    \ operator operand acc)\n    (if (null? operator)\n        acc\n        (do_algebra_iter\
    \ (cdr operator) (cdr operand) (do_op acc (car operand) (car operator)))))\n \
    \ (do_algebra_iter operator operand (car operand)))\n</code>\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (cond\n      [(null? operator) (car operand)]\n     \
    \ [(null? (cdr operator)) (do_op (car operand) (cadr operand) (car operator))]\n\
    \      [else (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand))\
    \ (car operator))]))\n  (do_algebra_helper operator operand))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (-\
    \ op1 op2)]\n          [(eq? op '*) (* op1 op2)]\n          [(eq? op '//) (quotient\
    \ op1 op2)]\n          [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand) (do_op (car operand) (car (cdr\
    \ operand)) (car operator)))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (cond [(null? operator) result]\n          [else (loop (cdr operator) (cdr\
    \ operand)\n                      (match (car operator)\n                    \
    \    ['+ (+ result (cadr operand))]\n                        ['* (* result (cadr\
    \ operand))]\n                        ['- (- result (cadr operand))]\n       \
    \                 ['// (quotient result (cadr operand))]\n                   \
    \     ['** (expt result (cadr operand))]))])))\n</code>\n", "  (cond [(empty?\
    \ operator) (first operand)]\n        [(empty? (rest operator)) (first operand)]\n\
    \        [else (do_algebra (rest operator) (cons (eval (list (first operand) (first\
    \ operator) (second operand))) (rest (rest operand))))]))\n", "  (define (do_op\
    \ op a b)\n    (cond\n      [(eq? op '+) (+ a b)]\n      [(eq? op '-) (- a b)]\n\
    \      [(eq? op '*) (* a b)]\n      [(eq? op '//) (quotient a b)]\n      [(eq?\
    \ op '**) (expt a b)]))\n  (define (do_algebra_helper operator operand)\n    (if\
    \ (null? operator)\n        (car operand)\n        (do_op (car operator) (car\
    \ operand) (do_algebra_helper (cdr operator) (cdr operand)))))\n  (do_algebra_helper\
    \ operator operand))\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter (rest\
    \ operator) (rest operand)\n                             (match-define (list op\
    \ operand1 operand2)\n                                           (list (first\
    \ operator)\n                                                 (first operand)\n\
    \                                                 (second operand)))\n       \
    \                      (cond\n                               [(equal? op '+) (+\
    \ operand1 operand2)]\n                               [(equal? op '-) (- operand1\
    \ operand2)]\n                               [(equal? op '*) (* operand1 operand2)]\n\
    \                               [(equal? op '// (quotient operand1 operand2))]\n\
    \                               [(equal? op '** (expt operand1 operand2))]))]))\n\
    \  (do_algebra_iter operator operand 0))\n", "  (define (do-op op1 op2 op)\n \
    \   (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n\
    \      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)]))\n  (define (do-algebra ops operands)\n\
    \    (cond\n      [(empty? ops) (car operands)]\n      [else (do-algebra (cdr\
    \ ops) (cons (do-op (car operands) (cadr operands) (car ops)) (cddr operands)))]))\n\
    \  (do-algebra operator operand))\n", "  (define (helper operator operand)\n \
    \   (cond [(empty? operator) (first operand)]\n          [(= (length operator)\
    \ 1) (apply (first operator) operand)]\n          [else (helper (rest operator)\
    \ (cons (apply (first operator) (take operand 2)) (drop operand 2)))]))\n  (helper\
    \ operator operand))\n", "  (define (helper oprnd oprtr)\n    (cond\n      [(null?\
    \ oprtr) (car oprnd)]\n      [(= (car oprtr) '+) (+ (car oprnd) (helper (cdr oprnd)\
    \ (cdr oprtr)))]\n      [(= (car oprtr) '-) (- (car oprnd) (helper (cdr oprnd)\
    \ (cdr oprtr)))]\n      [(= (car oprtr) '*) (* (car oprnd) (helper (cdr oprnd)\
    \ (cdr oprtr)))]\n      [(= (car oprtr) '//) (quotient (car oprnd) (helper (cdr\
    \ oprnd) (cdr oprtr)))]\n      [(= (car oprtr) '**) (expt (car oprnd) (helper\
    \ (cdr oprnd) (cdr oprtr)))]))\n  (helper operand operator))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_iter (rest operator) (rest operand)\n                   \
    \          (match (first operator)\n                               [('+) (+ result\
    \ (first operand))]\n                               [('-) (- result (first operand))]\n\
    \                               [('*) (* result (first operand))]\n          \
    \                     [('//) (quotient result (first operand))]\n            \
    \                   [('**) (expt result (first operand))]))]))\n  (do_algebra_iter\
    \ operator operand (first operand)))\n", "  (define (eval-op op1 op2 op)\n   \
    \ (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n     \
    \     ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n\
    \          ((eq? op '**) (expt op1 op2))))\n  (define (eval-list ops ops-rest)\n\
    \    (if (null? ops-rest)\n        (car ops)\n        (eval-list (cons (eval-op\
    \ (car ops) (car ops-rest) (car operator)) (cdr ops-rest)) (cdr ops-rest))))\n\
    \  (eval-list (list (car operand)) (cdr operand)))\n", "  (define (eval-op op1\
    \ op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-)\
    \ (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient\
    \ op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n  (define (eval-op-list\
    \ ops ops-list)\n    (if (null? ops-list)\n        ops\n        (eval-op-list\
    \ (eval-op (car ops) (car ops-list) (car operator)) (cdr ops-list))))\n  (eval-op-list\
    \ (car operand) (cdr operand)))\n", "  (define (algebra-helper operator operand)\n\
    \    (cond\n      [(null? operator) (car operand)]\n      [(= (length operator)\
    \ 1) (eval (list (car operand) (car operator) (cadr operand)))]\n      [else (eval\
    \ (list (car operand) (car operator) (algebra-helper (cdr operator) (cdr operand))))]))\n\
    \  (algebra-helper operator operand))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond ((null? operator) result)\n          ((= (length\
    \ operator) 1) (eval `(,(first operator) ,result ,(first operand))))\n       \
    \   (else (do_algebra_iter (rest operator) (rest operand) (eval `(,(first operator)\
    \ ,result ,(first operand)))))))\n  (do_algebra_iter operator operand (first operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n \
    \     [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n     \
    \ [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra_helper operator operand)\n    (cond\n      [(null? operator)\
    \ (car operand)]\n      [(null? (cdr operator)) (do_op (car operand) (cadr operand)\
    \ (car operator))]\n      [else (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))]))\n  (do_algebra_helper operator operand))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ ops opsands)\n    (cond\n      [(null? ops) (car opsands)]\n      [(null? opsands)\
    \ (do_algebra_helper (cdr ops) opsands)]\n      [else (do_algebra_helper (cdr\
    \ ops) (cons (do_op (car opsands) (cadr opsands) (car ops)) (cddr opsands)))]))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra-helper operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra-helper\
    \ (rest operator) (rest operand) (eval (list (first operand) (first operator)\
    \ (second operand))))]))\n  (do_algebra-helper operator operand (first operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra-iter\
    \ op-list opd-list)\n    (if (null? op-list)\n        (car opd-list)\n       \
    \ (do_algebra-iter (cdr op-list)\n                         (cons (do_op (car opd-list)\
    \ (cadr opd-list) (car op-list))\n                               (cddr opd-list)))))\n\
    \  (do_algebra-iter operator operand))\n", "  (define (do_op op1 op2 op)\n   \
    \ (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n  \
    \    [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n    \
    \  [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator operand)\n\
    \    (cond\n      [(null? operator) (car operand)]\n      [(null? (cdr operator))\
    \ (do_op (car operand) (cadr operand) (car operator))]\n      [else (do_op (car\
    \ operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))]))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_op op1 op2 op)\n \
    \   (cond [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n   \
    \       [(eq? op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n\
    \          [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (cond [(null? operator) (car operand)]\n          [(eq? (car operator)\
    \ '**) (do_algebra_helper (cdr operator) (cons (do_op (car operand) (car (cdr\
    \ operand)) (car operator)) (cdr (cdr operand))))]\n          [else (do_algebra_helper\
    \ (cdr operator) (cons (do_op (car operand) (car (cdr operand)) (car operator))\
    \ (cdr (cdr operand))))]))\n  (do_algebra_helper operator operand))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (cond\n      [(empty? operator)\
    \ result]\n      [else (do_algebra_helper (rest operator) (rest operand) (eval\
    \ `(,(first operator) ,result ,(first operand))))]))\n  (do_algebra_helper operator\
    \ operand (first operand)))\n", "  (define (do_algebra_helper operator operand\
    \ result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (match (car operator)\n\
    \                                  ['+ (apply + (cons result (car operand)))]\n\
    \                                  ['* (apply * (cons result (car operand)))]\n\
    \                                  ['- (apply - (cons result (car operand)))]\n\
    \                                  ['// (apply // (cons result (car operand)))]\n\
    \                                  ['** (apply ** (cons result (car operand))))])))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (define (helper\
    \ operator operand)\n    (cond\n      [(null? operator) (car operand)]\n     \
    \ [(eq? (car operator) '+) (+ (car operand) (helper (cdr operator) (cdr operand)))]\n\
    \      [(eq? (car operator) '-) (- (car operand) (helper (cdr operator) (cdr operand)))]\n\
    \      [(eq? (car operator) '*) (* (car operand) (helper (cdr operator) (cdr operand)))]\n\
    \      [(eq? (car operator) '//) (quotient (car operand) (helper (cdr operator)\
    \ (cdr operand)))]\n      [(eq? (car operator) '**) (expt (car operand) (helper\
    \ (cdr operator) (cdr operand))))))\n  (helper operator operand))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (cond\n      [(empty? operator)\
    \ result]\n      [else (do_algebra_helper (rest operator) (rest operand)\n   \
    \                            (match (first operator)\n                       \
    \          ['+ (first operand) + (second operand)]\n                         \
    \        ['* (first operand) * (second operand)]\n                           \
    \      ['- (first operand) - (second operand)]\n                             \
    \    ['// (first operand) // (second operand)]\n                             \
    \    ['** (first operand) ** (second operand)]))]))\n  (do_algebra_helper operator\
    \ operand (first operand)))\n</code>\nI am getting the following error:\n<code>do_algebra_helper:\
    \ unbound identifier in module in: do_algebra_helper\n</code>\nI am not sure what\
    \ I am doing wrong.\n\n\nA:\n\nYou have a couple of problems:\n\nYou're using\
    \ <code>match</code> incorrectly. <code>match</code> is a special form, not a\
    \ function, so you can't use it like this: <code>(match (first operator) ...)</code>.\
    \ You need to use the <code>match</code> syntax, like this: <code>(match (first\
    \ operator) ...)</code>.\nYou're using <code>+</code> and <code>*</code> incorrectly.\
    \ These are also special forms, not functions, so you can't use them like this:\
    \ <code>(first operand) + (second operand)</code>. You need to use the <code>+</code>\
    \ and <code>*</code> syntax, like this: <code>(+ (first operand) (second operand))</code>.\n\
    \nHere's a fixed version of your code:\n<code>(define (do_algebra operator operand)\n\
    \  (define (do_algebra_helper operator operand result)\n    (cond\n      [(empty?\
    \ operator) result]\n      [else (do_algebra_helper (rest operator) (rest operand)\n\
    \                               (match (first operator)\n                    \
    \             ['+ (+ (first operand) (second operand))]\n                    \
    \             ['* (* (", "  (define (do_algebra_helper operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_helper (rest\
    \ operator) (rest operand)\n                               (eval `(,(first operator)\
    \ ,result ,(first operand))))]))\n  (do_algebra_helper operator operand (first\
    \ operand)))\n", "  (define (do_algebra_helper operator operand result)\n    (cond\
    \ [(empty? operator) result]\n          [else (do_algebra_helper (rest operator)\
    \ (rest operand) (apply (first operator) result (first operand)))]))\n  (do_algebra_helper\
    \ operator operand (first operand)))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand)\n                             (match (first operator)\n\
    \                               ['+ (+ (first operand) (first (rest operand)))\
    \ ]\n                               ['* (* (first operand) (first (rest operand)))\
    \ ]\n                               ['- (- (first operand) (first (rest operand)))\
    \ ]\n                               ['// (quotient (first operand) (first (rest\
    \ operand))) ]\n                               ['** (expt (first operand) (first\
    \ (rest operand))) ]))]))\n  (do_algebra_iter operator operand (first operand)))\n",
  "  (define (do_algebra_iter operator operand result)\n    (cond\n      [(empty?\
    \ operator) result]\n      [else (do_algebra_iter (rest operator) (rest operand)\n\
    \                             (eval `(,(first operator) ,result ,(first operand))))]))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_iter (rest operator) (rest operand)\n                   \
    \          (match-define (list op operand1 operand2)\n                       \
    \                    (list (first operator)\n                                \
    \                 (first operand)\n                                          \
    \       (second operand)))\n                             (match op\n         \
    \                      ['+ (+ operand1 operand2)]\n                          \
    \     ['* (* operand1 operand2)]\n                               ['- (- operand1\
    \ operand2)]\n                               ['// (quotient operand1 operand2)]\n\
    \                               ['** (expt operand1 operand2)]))]))\n  (do_algebra_iter\
    \ operator operand 0))\n", "  (define (eval-op op1 op2 op)\n    (cond [(eq? op\
    \ '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n          [(eq? op '*)\
    \ (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n          [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (eval-algebra ops operands)\n    (cond [(empty?\
    \ ops) (first operands)]\n          [(eq? (first ops) '**) (eval-op (first operands)\
    \ (eval-algebra (rest ops) (rest operands)) '**)]\n          [else (eval-op (eval-algebra\
    \ ops (rest operands)) (first operands) (first ops))]))\n  (eval-algebra operator\
    \ operand))\n", "  (define (do_algebra_helper operator operand result)\n    (if\
    \ (null? operator)\n        result\n        (do_algebra_helper (cdr operator)\
    \ (cdr operand)\n                           (cond\n                          \
    \   ((equal? (car operator) '+)\n                              (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-)\n     \
    \                         (- result (car operand)))\n                        \
    \     ((equal? (car operator) '*)\n                              (* result (car\
    \ operand)))\n                             ((equal? (car operator) '//)\n    \
    \                          (quotient result (car operand)))\n                \
    \             ((equal? (car operator) '**)\n                              (expt\
    \ result (car operand)))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq?\
    \ op '-) (- op1 op2)]\n          [(eq? op '*) (* op1 op2)]\n          [(eq? op\
    \ '//) (quotient op1 op2)]\n          [(eq? op '**) (expt op1 op2)]))\n  (define\
    \ (do_algebra_helper operator operand)\n    (cond [(null? operator) (car operand)]\n\
    \          [(eq? (car operator) '**)\n           (do_algebra_helper (cdr operator)\
    \ (cons (do_op (car operand) (car (cdr operand)) '**) (cdr (cdr operand))))]\n\
    \          [else (do_algebra_helper (cdr operator) (cons (do_op (car operand)\
    \ (car (cdr operand)) (car operator)) (cdr (cdr operand))))]))\n  (do_algebra_helper\
    \ operator operand))\n", "  (define (do_op op1 op2 op)\n    (cond [(eq? op '+)\
    \ (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n          [(eq? op '*) (*\
    \ op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n          [(eq? op '**)\
    \ (expt op1 op2)]))\n  (define (do_algebra_helper operator operand)\n    (cond\
    \ [(null? operator) (car operand)]\n          [(eq? (car operator) '**) (do_algebra_helper\
    \ (cdr operator) (cons (do_op (car operand) (car (cdr operand)) (car operator))\
    \ (cdr (cdr operand))))]\n          [else (do_algebra_helper (cdr operator) (cons\
    \ (do_op (car operand) (car (cdr operand)) (car operator)) (cdr (cdr operand))))]))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (cond [(empty? operator) result]\n          [else (do_algebra_helper\
    \ (rest operator) (rest operand)\n                                   (match (first\
    \ operator)\n                                          [('+) (+ result (first\
    \ operand))]\n                                          [('-) (- result (first\
    \ operand))]\n                                          [('*) (* result (first\
    \ operand))]\n                                          [('//) (quotient result\
    \ (first operand))]\n                                          [('**) (expt result\
    \ (first operand))]))]))\n  (do_algebra_helper operator operand (first operand)))\n\
    </code>\n", "  (define (do_op op a b)\n    (cond [(eq? op '+) (+ a b)]\n     \
    \     [(eq? op '-) (- a b)]\n          [(eq? op '*) (* a b)]\n          [(eq?\
    \ op '//) (quotient a b)]\n          [(eq? op '**) (expt a b)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (cond [(null? operator) (car operand)]\n          [(eq?\
    \ (length operator) 1) (do_op (car operator) (car operand) (cadr operand))]\n\
    \          [else (do_op (car operator) (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)))]))\n  (do_algebra_helper operator operand))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond [(empty? operator) (first operand)]\n  \
    \        [(empty? operand) result]\n          [else (do_algebra_helper (rest operator)\
    \ (rest operand)\n                                   (cond [(equal? (first operator)\
    \ '+) (+ result (first operand))]\n                                         [(equal?\
    \ (first operator) '-) (- result (first operand))]\n                         \
    \                [(equal? (first operator) '*) (* result (first operand))]\n \
    \                                        [(equal? (first operator) '//) (quotient\
    \ result (first operand))]\n                                         [(equal?\
    \ (first operator) '**) (expt result (first operand))]))]))\n  (do_algebra_helper\
    \ operator operand 0))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(equal?\
    \ op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n      [(equal? op '*)\
    \ (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n      [(equal? op\
    \ '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator operand)\n   \
    \ (if (null? operator)\n        (car operand)\n        (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))))\n  (do_algebra_helper operator\
    \ operand))\n", "  (define (do_algebra_iter operator operand result)\n    (cond\n\
    \      [(empty? operator) result]\n      [else (do_algebra_iter (rest operator)\
    \ (rest operand)\n                             (match (first operator)\n     \
    \                          [('+ _) (+ result (first operand))]\n             \
    \                  [('- _) (- result (first operand))]\n                     \
    \          [('* _) (* result (first operand))]\n                             \
    \  [('// _) (quotient result (first operand))]\n                             \
    \  [('** _) (expt result (first operand))]))]))\n  (do_algebra_iter operator operand\
    \ (first operand)))\n", "  (define (helper operator operand)\n    (if (null? operator)\n\
    \        (car operand)\n        (helper (cdr operator)\n                (cons\
    \ (eval (list (car operator) (car operand) (cadr operand)))\n                \
    \      (cddr operand)))))\n  (helper operator operand))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (null? operator)\n        (car operand)\n       \
    \ (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond [(empty? operator) result]\n          [else (do_algebra_iter\
    \ (rest operator) (rest operand) (apply (first operator) result (first operand)))]))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (cond\n      [(empty? operator) (first operand)]\n\
    \      [(empty? operand) result]\n      [else\n       (do_algebra_iter (rest operator)\n\
    \                        (rest operand)\n                        (cond\n     \
    \                     [(equal? (first operator) '+) (+ result (first operand))]\n\
    \                          [(equal? (first operator) '-) (- result (first operand))]\n\
    \                          [(equal? (first operator) '*) (* result (first operand))]\n\
    \                          [(equal? (first operator) '//) (quotient result (first\
    \ operand))]\n                          [(equal? (first operator) '**) (expt result\
    \ (first operand))]))]))\n  (do_algebra_iter operator operand 0))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (cond\n      [(empty? operator)\
    \ result]\n      [else (do_algebra_helper (rest operator) (rest operand)\n   \
    \                            (cond\n                                 [(equal?\
    \ (first operator) '+) (+ (first operand) (second operand))]\n               \
    \                  [(equal? (first operator) '-) (- (first operand) (second operand))]\n\
    \                                 [(equal? (first operator) '*) (* (first operand)\
    \ (second operand))]\n                                 [(equal? (first operator)\
    \ '//) (quotient (first operand) (second operand))]\n                        \
    \         [(equal? (first operator) '**) (expt (first operand) (second operand))]))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_op_list ops\
    \ ops_list)\n    (if (null? ops_list)\n        ops\n        (do_op_list (do_op\
    \ (car ops_list) (cadr ops_list) (car ops)) (cddr ops_list))))\n  (do_op_list\
    \ (car operand) (cdr operand)))\n", "  (define (do_algebra_iter operator operand\
    \ result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand)\n                             (match-define (list\
    \ op operand1 operand2)\n                                           (list (first\
    \ operator) result (first operand)))\n                             (cond\n   \
    \                            [(equal? op '+) (+ operand1 operand2)]\n        \
    \                       [(equal? op '-) (- operand1 operand2)]\n             \
    \                  [(equal? op '*) (* operand1 operand2)]\n                  \
    \             [(equal? op '//) (quotient operand1 operand2)]\n               \
    \                [(equal? op '**) (expt operand1 operand2)]))]))\n  (do_algebra_iter\
    \ operator operand (first operand)))\n", "  (define (do_algebra-helper operator\
    \ operand result)\n    (cond [(empty? operator) result]\n          [else (do_algebra-helper\
    \ (rest operator) (rest operand)\n                                   (case (first\
    \ operator)\n                                     [(+) (+ result (first operand))]\n\
    \                                     [(- - result (first operand))]\n       \
    \                              [(*) (* result (first operand))]\n            \
    \                         [(// (quotient result (first operand)))])\n        \
    \                           )]))\n  (do_algebra-helper operator operand (first\
    \ operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+)\
    \ (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n\
    \      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra_helper operator operand)\n    (cond\n      [(empty? operator)\
    \ (first operand)]\n      [(empty? operand) (error 'do_algebra_helper \"empty\
    \ operand\")]\n      [(empty? (rest operand)) (error 'do_algebra_helper \"empty\
    \ operand\")]\n      [else (do_algebra_helper (rest operator) (cons (do_op (first\
    \ operand) (second operand) (first operator)) (rest (rest operand))))]))\n  (do_algebra_helper\
    \ operator operand))\n", "  (define (helper oprands ops)\n    (if (empty? ops)\n\
    \        (car oprands)\n        (helper (list (eval (list (car ops) (car oprands)\
    \ (car (cdr oprands)))))\n                (cdr ops))))\n  (helper operand operator))\n",
  "  (define (do_algebra_helper operator operand result)\n    (cond [(empty? operator)\
    \ (first operand)]\n          [(empty? operand) result]\n          [else (do_algebra_helper\
    \ (rest operator) (rest operand) (eval `(,(first operator) ,result ,(first operand))))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (define (do_op\
    \ op a b)\n    (cond [(eq? op '+) (+ a b)]\n          [(eq? op '-) (- a b)]\n\
    \          [(eq? op '*) (* a b)]\n          [(eq? op '//) (quotient a b)]\n  \
    \        [(eq? op '**) (expt a b)]))\n  (define (do_algebra_helper operator operand)\n\
    \    (if (null? operator)\n        (car operand)\n        (do_algebra_helper (cdr\
    \ operator)\n                           (cons (do_op (car operator) (car operand)\
    \ (cadr operand))\n                                 (cddr operand)))))\n  (do_algebra_helper\
    \ operator operand))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq?\
    \ op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (*\
    \ op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt\
    \ op1 op2)]))\n  (define (do_algebra_helper operator operand)\n    (cond\n   \
    \   [(null? operator) (car operand)]\n      [(null? (cdr operator)) (do_op (car\
    \ operand) (cadr operand) (car operator))]\n      [else (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))]))\n  (do_algebra_helper operator\
    \ operand))\n", "  (define (do_algebra_iter operator operand result)\n    (cond\n\
    \      [(null? operator) (car operand)]\n      [(= (length operator) 1) (apply\
    \ (car operator) (cons result (cdr operand)))]\n      [else (do_algebra_iter (cdr\
    \ operator) operand (apply (car operator) (cons result (list (car operand)))))]))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand)\n                         (match\
    \ (car operator)\n                           ['+ (apply + (cons result (car operand)))]\n\
    \                           ['* (apply * (cons result (car operand)))]\n     \
    \                      ['- (apply - (cons result (car operand)))]\n          \
    \                 ['// (apply // (cons result (car operand)))]\n             \
    \              ['** (apply ** (cons result (car operand))))]))))\n  (do_algebra_iter\
    \ operator operand (car operand)))\n</code>\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond\n      [(empty? operator) (first operand)]\n    \
    \  [(empty? operand) result]\n      [else\n       (do_algebra_iter (rest operator)\n\
    \                        (rest operand)\n                        (cond\n     \
    \                     [(equal? (first operator) '+) (+ result (first operand))]\n\
    \                          [(equal? (first operator) '-) (- result (first operand))]\n\
    \                          [(equal? (first operator) '*) (* result (first operand))]\n\
    \                          [(equal? (first operator) '//) (quotient result (first\
    \ operand))]\n                          [(equal? (first operator) '**) (expt result\
    \ (first operand))]))]))\n  (do_algebra_iter operator operand 0))\n", "  (define\
    \ (do_algebra_iter operator operand result)\n    (cond [(empty? operator) (first\
    \ operand)]\n          [(= (length operator) 1) (eval `(,(first operator) ,result\
    \ ,(first operand))) ]\n          [else (do_algebra_iter (rest operator) (rest\
    \ operand) (eval `(,(first operator) ,result ,(first operand))))]))\n  (do_algebra_iter\
    \ operator operand (first operand)))\n", "  (let ([op (car operator)]\n      \
    \  [op1 (car operand)]\n        [op2 (cadr operand)])\n    (cond [(equal? op '+)\
    \ (+ op1 op2)]\n          [(equal? op '-) (- op1 op2)]\n          [(equal? op\
    \ '*) (* op1 op2)]\n          [(equal? op '//) (quotient op1 op2)]\n         \
    \ [(equal? op '**) (expt op1 op2)])))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((equal? (car operator) '+) (+ result (car operand)))\n   \
    \                          ((equal? (car operator) '-) (- result (car operand)))\n\
    \                             ((equal? (car operator) '*) (* result (car operand)))\n\
    \                             ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                             ((equal? (car operator) '**) (expt\
    \ result (car operand)))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (cond [(null? operator) result]\n          [else (loop (cdr operator) (cdr\
    \ operand)\n                      (match (car operator)\n                    \
    \    ['+ (+ result (cadr operand))]\n                        ['* (* result (cadr\
    \ operand))]\n                        ['- (- result (cadr operand))]\n       \
    \                 ['// (quotient result (cadr operand))]\n                   \
    \     ['** (expt result (cadr operand))]))])))\n</code>\n", "  (cond\n    [(empty?\
    \ operator) (first operand)]\n    [(empty? operand) (first operator)]\n    [else\
    \ (do_algebra (rest operator) (cons (eval (list (first operator) (first operand)\
    \ (second operand))) (rest (rest operand))))]))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand)\n                         (cond\n\
    \                           [(equal? (car operator) '+)\n                    \
    \        (+ result (car operand))]\n                           [(equal? (car operator)\
    \ '-)\n                            (- result (car operand))]\n               \
    \            [(equal? (car operator) '*)\n                            (* result\
    \ (car operand))]\n                           [(equal? (car operator) '//)\n \
    \                           (quotient result (car operand))]\n               \
    \            [(equal? (car operator) '**)\n                            (expt result\
    \ (car operand))]))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (helper operator operand)\n    (cond\n      [(empty? operator) (first\
    \ operand)]\n      [(empty? operand) (first operator)]\n      [else\n       (cond\n\
    \         [(equal? (first operator) '+)\n          (+ (first operand) (helper\
    \ (rest operator) (rest operand)))]\n         [(equal? (first operator) '-)\n\
    \          (- (first operand) (helper (rest operator) (rest operand)))]\n    \
    \     [(equal? (first operator) '*)\n          (* (first operand) (helper (rest\
    \ operator) (rest operand)))]\n         [(equal? (first operator) '//)\n     \
    \     (quotient (first operand) (helper (rest operator) (rest operand)))]\n  \
    \       [(equal? (first operator) '**)\n          (expt (first operand) (helper\
    \ (rest operator) (rest operand)))]\n         [else (error 'helper \"Unknown operator\"\
    )])])\n    )\n  (helper operator operand))\n", "  (define (do_algebra-helper operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra-helper\
    \ (rest operator) (rest operand)\n                               (cond\n     \
    \                            [(equal? (first operator) '+) (+ (first operand)\
    \ (second operand))]\n                                 [(equal? (first operator)\
    \ '-) (- (first operand) (second operand))]\n                                \
    \ [(equal? (first operator) '*) (* (first operand) (second operand))]\n      \
    \                           [(equal? (first operator) '//) (quotient (first operand)\
    \ (second operand))]\n                                 [(equal? (first operator)\
    \ '**) (expt (first operand) (second operand))]))]))\n  (do_algebra-helper operator\
    \ operand (first operand)))\n", "  (define (do-op op1 op2 op)\n    (cond\n   \
    \   [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n      [(equal?\
    \ op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n      [(equal?\
    \ op '**) (expt op1 op2)]))\n  (define (do-op-list ops ops-list)\n    (cond\n\
    \      [(null? ops-list) ops]\n      [(null? (cdr ops-list)) ops]\n      [else\
    \ (do-op-list (do-op (car ops) (cadr ops-list) (car ops-list)) (cdr (cdr ops-list)))]))\n\
    \  (do-op-list (car operand) (cdr operand)))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand) (eval (list (first operator) result (first operand))))]))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1\
    \ op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n\
    \      [(eq? op '**) (expt op1 op2)]))\n  (define (do_calc ops opsnds)\n    (if\
    \ (null? ops)\n        (car opsnds)\n        (do_calc (cdr ops) (cons (do_op (car\
    \ opsnds) (cadr opsnds) (car ops)) (cddr opsnds)))))\n  (do_calc operator operand))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (cond\n                           ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                           ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                           ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                           ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                           ((equal? (car\
    \ operator) '**) (expt result (car operand)))))))\n  (do_algebra_iter operator\
    \ operand (car operand)))\n", "  (define (do_algebra_iter operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter (rest\
    \ operator) (rest operand)\n                             (match (first operator)\n\
    \                               ['+ (add1 (first operand) result)]\n         \
    \                      ['* (mul1 (first operand) result)]\n                  \
    \             ['** (expt1 (first operand) result)]\n                         \
    \      ['/ (div1 (first operand) result)]\n                               ['-\
    \ (sub1 (first operand) result)]))]))\n  (do_algebra_iter operator operand (first\
    \ operand)))\n", "  (define (do_algebra_iter operator operand result)\n    (cond\n\
    \      [(empty? operator) (first operand)]\n      [(= (length operator) 1) (eval\
    \ `(,(first operator) ,result ,(first operand))) ]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand) (eval `(,(first operator) ,result ,(first operand))))]))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1\
    \ op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n\
    \      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (cond\n      [(empty? operator) (first operand)]\n      [(empty?\
    \ (rest operator)) (do_op (first operand) (first (rest operand)) (first operator))]\n\
    \      [else (do_op (first operand) (do_algebra_helper (rest operator) (rest operand))\
    \ (first operator))]))\n  (do_algebra_helper operator operand))\n", "  (let loop\
    \ ([operator operator] [operand operand] [result (car operand)])\n    (cond [(null?\
    \ operator) result]\n          [else (loop (cdr operator) (cdr operand)\n    \
    \                  (match (car operator)\n                        ['+ (+ result\
    \ (cadr operand))]\n                        ['* (* result (cadr operand))]\n \
    \                       ['- (- result (cadr operand))]\n                     \
    \   ['// (quotient result (cadr operand))]\n                        ['** (expt\
    \ result (cadr operand))]))])))\n</code>\n", "  (define (do_op op1 op2 op)\n \
    \   (cond [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n   \
    \       [(eq? op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n\
    \          [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (cond [(empty? operator) (first operand)]\n          [(empty?\
    \ (rest operator)) (do_op (first operand) (first (rest operand)) (first operator))]\n\
    \          [else (do_op (first operand) (do_algebra_helper (rest operator) (rest\
    \ operand)) (first operator))]))\n  (do_algebra_helper operator operand))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (cond [(empty? operator) result]\n          [else (loop (cdr operator) (cdr\
    \ operand)\n                      (match (car operator)\n                    \
    \    ['+ (+ result (cadr operand))]\n                        ['* (* result (cadr\
    \ operand))]\n                        ['** (expt result (cadr operand))]\n   \
    \                     ['// (quotient result (cadr operand))]\n               \
    \         ['- (- result (cadr operand))]))])))\n", "  (define (do_op op1 op2 op)\n\
    \    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n  \
    \        [(eq? op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n\
    \          [(eq? op '**) (expt op1 op2)]))\n  (let loop ([ops operator] [ops2\
    \ (cdr operand)] [result (car operand)])\n    (if (null? ops)\n        result\n\
    \        (loop (cdr ops) (cdr ops2) (do_op result (car ops2) (car ops))))))\n\
    </code>\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1\
    \ op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n  \
    \    [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra_helper operator operand)\n    (if (null? operator)\n  \
    \      (car operand)\n        (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))))\n  (do_algebra_helper operator operand))\n",
  "  (define (helper oprnd oprtr)\n    (cond [(empty? oprtr) (car oprnd)]\n      \
    \    [(= (car oprtr) '+) (+ (car oprnd) (helper (cdr oprnd) (cdr oprtr)))]\n \
    \         [(= (car oprtr) '-) (- (car oprnd) (helper (cdr oprnd) (cdr oprtr)))]\n\
    \          [(= (car oprtr) '*) (* (car oprnd) (helper (cdr oprnd) (cdr oprtr)))]\n\
    \          [(= (car oprtr) '//) (quotient (car oprnd) (helper (cdr oprnd) (cdr\
    \ oprtr)))]\n          [(= (car oprtr) '**) (expt (car oprnd) (helper (cdr oprnd)\
    \ (cdr oprtr)))]))\n  (helper operand operator))\n", "  (let loop ([op operator]\
    \ [opd operand] [result (car opd)])\n    (cond [(null? op) result]\n         \
    \ [(null? (cdr opd)) result]\n          [else (loop (cdr op) (cdr opd)\n     \
    \                 (case (car op)\n                        [(+ - * // **) (apply\
    \ (car op) result (car (cdr opd)))]))])))\n", "  (define (helper operator operand)\n\
    \    (cond\n      [(empty? operator) (first operand)]\n      [(= (length operator)\
    \ 1) (apply (first operator) operand)]\n      [else (apply (first operator) (list\
    \ (helper (rest operator) operand) (first operand)))]))\n  (helper operator operand))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand) (eval `(,(car\
    \ operator) ,result ,(car operand))))))\n  (do_algebra_iter operator operand (car\
    \ operand)))\n", "  (define (do_algebra_helper operator operand result)\n    (cond\n\
    \      [(empty? operator) result]\n      [else (do_algebra_helper (rest operator)\
    \ (rest operand)\n                               (match (first operator)\n   \
    \                              [\"+\" (+ result (first operand))]\n          \
    \                       [\"-\" (- result (first operand))]\n                 \
    \                [\"*\" (* result (first operand))]\n                        \
    \         [\"//\" (quotient result (first operand))]\n                       \
    \          [\"**\" (expt result (first operand))]))]))\n  (do_algebra_helper operator\
    \ operand (first operand)))\n", "  (define (do_op op1 op2 op)\n    (cond [(eq?\
    \ op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n          [(eq? op\
    \ '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n          [(eq?\
    \ op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator operand)\n\
    \    (cond [(null? operator) (car operand)]\n          [(eq? (car operator) '**)\
    \ (do_algebra_helper (cdr operator) (cons (do_op (car operand) (car (cdr operand))\
    \ (car operator)) (cdr (cdr operand))))]\n          [else (do_algebra_helper (cdr\
    \ operator) (cons (do_op (car operand) (do_algebra_helper operator (cdr operand))\
    \ (car operator)) (cdr operand)))]))\n  (do_algebra_helper operator operand))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator)\n      \
    \        (cdr operand)\n              (match (car operator)\n                ['+\
    \ (+ result (car operand))]\n                ['* (* result (car operand))]\n \
    \               ['- (- result (car operand))]\n                ['// (quotient\
    \ result (car operand))]\n                ['** (expt result (car operand))])))))\n\
    </code>\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1\
    \ op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n  \
    \    [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra-iter operator operand)\n    (cond\n      [(null? operator)\
    \ (car operand)]\n      [(null? (cdr operator)) (do_op (car operand) (car (cdr\
    \ operand)) (car operator))]\n      [else (do_op (car operand) (do_algebra-iter\
    \ (cdr operator) (cdr operand)) (car operator))]))\n  (do_algebra-iter operator\
    \ operand))\n", "  (define (do_algebra_helper operator operand result)\n    (cond\n\
    \      [(empty? operator) (first operand)]\n      [(empty? operand) result]\n\
    \      [else\n       (do_algebra_helper (rest operator) (rest operand)\n     \
    \                     (cond\n                            [(equal? (first operator)\
    \ '+) (+ result (first operand))]\n                            [(equal? (first\
    \ operator) '-) (- result (first operand))]\n                            [(equal?\
    \ (first operator) '*) (* result (first operand))]\n                         \
    \   [(equal? (first operator) '//) (quotient result (first operand))]\n      \
    \                      [(equal? (first operator) '**) (expt result (first operand))]))]))\n\
    \  (do_algebra_helper operator operand 0))\n", "  (define (do_op op1 op2 op)\n\
    \    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n  \
    \        [(eq? op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n\
    \          [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra-iter operator\
    \ operand result)\n    (cond [(null? operator) result]\n          [(null? operand)\
    \ result]\n          [(null? (cdr operand)) result]\n          [else (do_algebra-iter\
    \ (cdr operator) (cdr operand) (do_op (car operand) (cadr operand) (car operator)))]))\n\
    \  (do_algebra-iter operator operand 0))\n", "  (define (do_op op1 op2 op)\n \
    \   (cond [(eq? op '+) (+ op1 op2)]\n          [(eq? op '-) (- op1 op2)]\n   \
    \       [(eq? op '*) (* op1 op2)]\n          [(eq? op '//) (quotient op1 op2)]\n\
    \          [(eq? op '**) (expt op1 op2)]))\n  (define (do_ops ops ops1 ops2)\n\
    \    (if (null? ops)\n        ops1\n        (do_ops (cdr ops) (do_op ops1 (car\
    \ ops2) (car ops)) (cdr ops2))))\n  (do_ops operator (car operand) (cdr operand)))\n",
  "  (define (do_algebra_iter operator operand result)\n    (cond\n      [(empty?\
    \ operator) result]\n      [else (do_algebra_iter (rest operator) (rest operand)\
    \ (eval (list (first operator) result (first operand))))]))\n  (do_algebra_iter\
    \ operator operand (first operand)))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra_iter\
    \ (rest operator) (rest operand)\n                             (match-define (list\
    \ op operand1 operand2) (list (first operator) result (first operand)))\n    \
    \                         (cond\n                               [(equal? op '+)\
    \ (+ operand1 operand2)]\n                               [(equal? op '-) (- operand1\
    \ operand2)]\n                               [(equal? op '*) (* operand1 operand2)]\n\
    \                               [(equal? op '//) (quotient operand1 operand2)]\n\
    \                               [(equal? op '**) (expt operand1 operand2)]))]))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand)\n                 \
    \              (cond\n                                 [(equal? (first operator)\
    \ '+) (+ (first operand) (second operand))]\n                                \
    \ [(equal? (first operator) '-) (- (first operand) (second operand))]\n      \
    \                           [(equal? (first operator) '*) (* (first operand) (second\
    \ operand))]\n                                 [(equal? (first operator) '//)\
    \ (quotient (first operand) (second operand))]\n                             \
    \    [(equal? (first operator) '**) (expt (first operand) (second operand))]))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
