name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n#| You'll be given a string of words, and your task is to\
  \ count the number\nof boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> (is_bored\
  \ \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining. I love\
  \ this weather\")\n1|#\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (define (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n  \
    \    [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else\
    \ (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split S #\\.)))\n",
  "  (define (count-boredoms S)\n    (cond\n      [(empty? S) 0]\n      [(string=?\
    \ (first S) \"I\") (+ 1 (count-boredoms (rest S)))]\n      [else (count-boredoms\
    \ (rest S))]))\n  (count-boredoms (string-split S #\\.)))\n", "  (define (count-boredoms\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (count-boredoms (rest S)))]\n      [else (count-boredoms (rest S))]))\n  (count-boredoms\
    \ (string-split S #\\.)))\n", "  (let ([boredoms (regexp-match* #rx\"I\" S)])\n\
    \    (length boredoms)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (let ([boredoms (regexp-match* #rx\"I\" S)])\n    (length boredoms)))\n",
  "  (cond [(empty? S) 0]\n        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n        [else (is_bored (substring S 1))]))\n", "  (count\
    \ (lambda (s) (string=? (substring s 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (let ([sentences (string-split S #\\.)])\n    (length (filter\
    \ (lambda (s) (string-prefix? \"I\" s)) sentences))))\n", "  (let ([sentences\
    \ (regexp-split #rx\"[.?!]\" S)])\n    (for/fold ([boredoms 0]) ([sentence sentences])\n\
    \      (if (regexp-match #rx\"^I\" sentence)\n          (+ boredoms 1)\n     \
    \     boredoms))))\n", "  (string-length (regexp-match #rx\"I\" S)))\n", "  (count\
    \ (string-split S #rx\"[.?!]\")\n         (lambda (s) (string-prefix? \"I\" (string-trim\
    \ s)))))\n", "  (let ([words (string-split S #\\space)])\n    (cond [(empty? words)\
    \ 0]\n          [(string=? (first words) \"I\") (+ 1 (is_bored (string-join (rest\
    \ words) #\\space)))]\n          [else (is_bored (string-join (rest words) #\\\
    space))])))\n", "  (length (regexp-match #rx\"I\" S)))\n", "  (count (string-split\
    \ S #rx\"[.?!]\")\n         (lambda (s) (string-contains? s \"I\"))))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n \
    \        (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([bored 0]) ([s S])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ bored 1)\n          bored))))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (let\
    \ ([s (string-split S #\\.)])\n    (for/fold ([bored 0]) ([s s])\n      (if (string-prefix?\
    \ \"I\" s)\n          (+ bored 1)\n          bored))))\n", "  (let ([words (string-split\
    \ S #\\space)])\n    (cond\n      [(empty? words) 0]\n      [(string=? (first\
    \ words) \"I\") (+ 1 (is_bored (string-join (rest words) \" \")))]\n      [else\
    \ (is_bored (string-join (rest words) \" \"))])))\n", "  (count (lambda (s) (string=?\
    \ (string-upcase (substring s 0 1)) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (count (string-split S #rx\"[.?!]\")\n         (lambda (s) (string-prefix?\
    \ \"I\" (string-trim s)))))\n", "  (cond [(empty? S) 0]\n        [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n        [else (is_bored (substring\
    \ S 1))]))\n", "  (let ([sentences (string-split S #\\.)])\n    (count (lambda\
    \ (s) (and (string-prefix? \"I\" s) (string-trim s))) sentences)))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n \
    \        (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=? (string-take\
    \ x 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (cond\n    [(string=? S \"\") 0]\n    [(string=? (substring S 0\
    \ 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (define (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n\
    \      [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else\
    \ (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split S #\\.)))\n",
  "  (define (is_bored-iter S i)\n    (cond\n      [(= i (string-length S)) 0]\n \
    \     [(string=? (substring S i (+ i 2)) \"I \") (+ 1 (is_bored-iter S (+ i 2)))]\n\
    \      [else (is_bored-iter S (+ i 1))]))\n  (is_bored-iter S 0))\n", "  (define\
    \ (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest\
    \ S))]))\n  (is-bored-helper (string-split S #\\.)))\n", "  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-contains?\
    \ (first S) \"I\") (loop (rest S) (+ count 1))]\n          [else (loop (rest S)\
    \ count)])))\n", "  (let ([words (string-split S #\\space)])\n    (cond [(null?\
    \ words) 0]\n          [(string=? (car words) \"I\")\n           (+ 1 (is_bored\
    \ (string-join (cdr words) #\\space)))]\n          [else (is_bored (string-join\
    \ (cdr words) #\\space))])))\n", "  (let ([sentences (string-split S #\\.)])\n\
    \    (for/fold ([boredoms 0]) ([sentence sentences])\n      (if (string-prefix?\
    \ \"I\" sentence)\n          (+ boredoms 1)\n          boredoms))))\n", "  (length\
    \ (regexp-match #rx\"I\" S)))\n", "  (count (string-split S #rx\"[.?!]\")\n  \
    \       (lambda (x) (string-prefix? \"I\" x))))\n", "  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (x) (string-prefix? \"I\" x))))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (count (lambda (s) (string=? (substring s 0 1) \"I\"))\n \
    \        (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1\
    \ (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n", "  (define (is-bored-helper S)\n    (cond [(empty?\
    \ S) 0]\n          [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n\
    \          [else (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split\
    \ S #\\.)))\n", "  (count (lambda (x)\n           (and (string=? (substring x\
    \ 0 1) \"I\")\n                (or (string=? (substring x (sub1 (string-length\
    \ x)) (string-length x)) \".\")\n                    (string=? (substring x (sub1\
    \ (string-length x)) (string-length x)) \"?\")\n                    (string=?\
    \ (substring x (sub1 (string-length x)) (string-length x)) \"!\"))))\n       \
    \  (string-split S #\\space)))\n", "  (let ([words (string-split S #\\space)])\n\
    \    (length (filter (lambda (w) (string=? w \"I\")) words))))\n", "  (count (lambda\
    \ (x) (and (equal? (substring x 0 1) \"I\") (not (equal? x \"\"))))\n        \
    \ (regexp-split #rx\"[.?!]\" S)))\n", "  (let ([L (string-split S #\\.)])\n  \
    \  (for/fold ([count 0]) ([sentence L])\n      (if (string-prefix? \"I\" sentence)\n\
    \          (+ count 1)\n          count))))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n \
    \   [else (is_bored (substring S 1))]))\n", "  (length (regexp-match #rx\"I\"\
    \ S)))\n", "  (count (string-split S #\\.)\n         (lambda (s) (string-prefix?\
    \ \"I\" s))))\n", "  (length (filter (lambda (x) (string=? (substring x 0 1) \"\
    I\"))\n                  (regexp-split #rx\"[.?!]\" S))))\n", "  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n", "  (let ([S (string-split S #\\.)])\n    (for/fold\
    \ ([bored 0]) ([s S])\n      (if (and (string-contains? s #\\I)\n            \
    \   (not (string-contains? s #\\i)))\n          (+ bored 1)\n          bored))))\n",
  "  (count-boredoms (string-split S #\\.)\n                  0))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (split-string S \"[.!?]\"\
    )))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (let ([s (string-split S #\\.)])\n    (for/fold ([bored\
    \ 0]) ([s s])\n      (if (string-prefix? \"I\" s)\n          (+ bored 1)\n   \
    \       bored))))\n", "  (count-boredoms (string-split S #\\.)\n             \
    \     0))\n", "  (count (lambda (x) (and (string=? (substring x 0 1) \"I\")\n\
    \                          (or (string=? (substring x (substring-length x -1)\
    \ (substring-length x)) \".\")\n                              (string=? (substring\
    \ x (substring-length x -1) (substring-length x)) \"?\")\n                   \
    \           (string=? (substring x (substring-length x -1) (substring-length x))\
    \ \"!\"))\n                          ))\n         (string-split S \" \")))\n",
  "  (let ([words (string-split S #\\space)])\n    (cond\n      [(empty? words) 0]\n\
    \      [(equal? (first words) \"I\") (+ 1 (is_bored (string-join (rest words)\
    \ #\\space)))]\n      [else (is_bored (string-join (rest words) #\\space))])))\n",
  "  (let loop ([S (string-split S #\\.)]\n             [count 0])\n    (cond [(empty?\
    \ S) count]\n          [(string-prefix? \"I\" (first S))\n           (loop (rest\
    \ S) (+ count 1))]\n          [else (loop (rest S) count)])))\n", "  (let loop\
    \ ([S (string-split S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n\
    \          [(string-prefix? \"I\" (first S))\n           (loop (rest S) (+ count\
    \ 1))]\n          [else (loop (rest S) count)])))\n", "  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2 (string-length S))))]\n\
    \    [else (is_bored (substring S 1 (string-length S)))]))\n", "  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (count (lambda (x) (string=? x \"I\")) (string-split\
    \ S #\\.)))\n", "  (count (string-split S #rx\"[.?!]\")\n         (lambda (s)\
    \ (string-prefix? \"I\" (string-trim s)))))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 1) \"I\")\n     (+ 1 (is_bored (substring S 1 (string-length\
    \ S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (let ([S (string-split S #\\.)])\n    (for/fold ([count 0])\
    \ ([s S])\n      (if (string-prefix? \"I\" s)\n          (+ count 1)\n       \
    \   count))))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n\
    \         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count\
    \ (lambda (x) (equal? (string-upcase (substring x 0 1)) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (and (string=? \"I\" (car x)) (string=?\
    \ \" \" (cadr x))))\n         (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n", "  (let ([S (string-split S #\\.)])\n    (length (filter (lambda\
    \ (s) (string-prefix? \"I\" s)) S))))\n", "  (count (lambda (s) (string=? (string-upcase\
    \ (substring s 0 1)) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", " \
    \ (define (is-bored? s)\n    (string-contains? s \"I\"))\n  (define (count-boredoms\
    \ s)\n    (cond [(is-bored? s) 1]\n          [else 0]))\n  (define (split-sentences\
    \ s)\n    (regexp-split #rx\"[.?!]\" s))\n  (define (count-boredoms-in-sentences\
    \ s)\n    (apply + (map count-boredoms (split-sentences s))))\n  (count-boredoms-in-sentences\
    \ S))\n", "  (count (lambda (x) (string=? x \"I\")) (split S #\\.)))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (split-string S \"\
    [.?!]\")))\n", "  (let ([S (string-split S #\\.)])\n    (for/fold ([count 0])\
    \ ([s S])\n      (if (string-prefix? \"I\" s)\n          (+ count 1)\n       \
    \   count))))\n", "  (cond\n    [(string=? S \"\") 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond [(string=? S \"\") 0]\n\
    \        [(string-contains S \"I\") (+ 1 (is_bored (string-drop S 1)))]\n    \
    \    [else (is_bored (string-drop S 1))]))\n", "  (cond [(empty? S) 0]\n     \
    \   [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n        [else (is_bored\
    \ (rest S))]))\n", "  (define (is_bored-helper S)\n    (cond\n      [(empty? S)\
    \ 0]\n      [(equal? (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n    \
    \  [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split S #\\\
    .)))\n", "  (count (string-split S #rx\"[.?!]\")\n         (lambda (x) (string-prefix?\
    \ \"I\" x))))\n", "  (count (lambda (x) (and (string=? (string-take x 1) \"I\"\
    )\n                          (string=? (string-take x 2) \"I \")))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (let ([sentences (regexp-split #rx\"[.?!]\" S)])\n\
    \    (length (filter (lambda (s) (regexp-match #rx\"^I\" s)) sentences))))\n",
  "  (let ([sentences (string-split S #\\.)])\n    (for/fold ([boredoms 0]) ([sentence\
    \ sentences])\n      (if (string-prefix? \"I\" sentence)\n          (+ boredoms\
    \ 1)\n          boredoms))))\n", "  (let ([sentences (string-split S #\\.)])\n\
    \    (for/fold ([boredoms 0]) ([sentence sentences])\n      (if (string-prefix?\
    \ \"I\" sentence)\n          (+ boredoms 1)\n          boredoms))))\n", "  (let\
    \ loop ([S (string-split S #\\.)]\n             [boredoms 0])\n    (cond [(empty?\
    \ S) boredoms]\n          [(string-prefix? \"I\" (first S))\n           (loop\
    \ (rest S) (+ boredoms 1))]\n          [else (loop (rest S) boredoms)])))\n",
  "  (let ([words (string-split S #\\space)])\n    (length (filter (lambda (w) (string=?\
    \ w \"I\")) words))))\n", "  (count (lambda (x) (and (string=? (substring x 0\
    \ 1) \"I\")\n                          (not (string=? (substring x 1 2) \" \"\
    ))))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (length (regexp-match #rx\"\
    ^I\" (string-split S #rx\"[.?!]\"))))\n", "  (let ((count 0))\n    (for ((word\
    \ (in-string (string-split S #\\space)))\n          (sentence (in-string (string-split\
    \ S #\\.))))\n      (when (and (string=? word \"I\")\n                 (string-contains?\
    \ sentence \"I\"))\n        (set! count (+ count 1))))\n    count))\n", "  (count\
    \ (string-split S #rx\"[.?!]\")\n         (lambda (x) (string-prefix? \"I\" x))))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (define (is-bored-helper S)\n    (cond\n      [(empty?\
    \ S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n\
    \      [else (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split S\
    \ #\\.)))\n", "  (count (lambda (x) (and (string=? (substring x 0 1) \"I\")\n\
    \                          (or (string=? (substring x (substring-length x -1)\
    \ (substring-length x)) \".\")\n                              (string=? (substring\
    \ x (substring-length x -1) (substring-length x)) \"?\")\n                   \
    \           (string=? (substring x (substring-length x -1) (substring-length x))\
    \ \"!\")))))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda (x)\
    \ (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n",
  "  (define (is_bored-helper S i)\n    (if (= i (string-length S))\n        0\n \
    \       (if (string=? (substring S i (+ i 1)) \"I\")\n            (+ 1 (is_bored-helper\
    \ S (+ i 1)))\n            (is_bored-helper S (+ i 1)))))\n  (is_bored-helper\
    \ S 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"\
    I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (count-boredoms (string-split S #\\.)\n           \
    \       0))\n", "  (count (lambda (x) (equal? (string-upcase (substring x 0 1))\
    \ \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (string-split\
    \ S #rx\"[.?!]\")\n         (lambda (s) (string-prefix? \"I\" (string-trim s)))))\n",
  "  (cond [(string=? S \"\") 0]\n        [(string=? (substring S 0 2) \"I \") (+\
    \ 1 (is_bored (substring S 2)))]\n        [else (is_bored (substring S 1))]))\n",
  "  (count-boredoms (string-split S #\\.)\n                  (string-split S #\\\
    ?)\n                  (string-split S #\\!)))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (define\
    \ (is_bored-helper S)\n    (cond [(empty? S) 0]\n          [(string=? (first S)\
    \ \"I\") (+ 1 (is_bored-helper (rest S)))]\n          [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n", "  (let ([sentences (string-split\
    \ S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"I\" s)) sentences))))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\
    \ [(empty? S) 0]\n        [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n        [else (is_bored (substring S 1))]))\n", "  (let ([words (string-split\
    \ S \" \")])\n    (if (empty? words)\n        0\n        (if (string=? (first\
    \ words) \"I\")\n            (+ 1 (is_bored (string-join (rest words) \" \")))\n\
    \            (is_bored (string-join (rest words) \" \"))))))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\"\
    ) (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (if (string-empty? S)\n      0\n      (if (string-prefix? \"I\" S)\n        \
    \  (+ 1 (is_bored (string-drop S 1)))\n          (is_bored (string-drop S 1)))))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (count-if (lambda (x) (string=? (substring x 0 1) \"I\"))\n    \
    \        (regexp-split #rx\"[.?!]\" S)))\n", "  (count-matches (regexp #rx\"^I\"\
    ) (string-split S #rx\"[.?!]\")))\n", "  (regexp-match #rx\"I\" S))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n \
    \        (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I\
    \ \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (count (lambda (x) (and (string=? (substring x 0 1) \"I\")\n                \
    \           (or (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \".\")\n                               (string=? (substring x (substring-length\
    \ x -1) (substring-length x)) \"?\")\n                               (string=?\
    \ (substring x (substring-length x -1) (substring-length x)) \"!\"))\n       \
    \                    ))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (let\
    \ ([words (string-split S #\\space)])\n    (for/fold ([count 0]) ([word words])\n\
    \      (if (string=? word \"I\")\n          (+ count 1)\n          count))))\n",
  "  (let loop ([S (string-split S #\\.)]\n             [count 0])\n    (cond [(empty?\
    \ S) count]\n          [(string-prefix? \"I\" (car S)) (loop (cdr S) (+ count\
    \ 1))]\n          [else (loop (cdr S) count)])))\n", "  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n", "  (count (lambda\
    \ (x) (string=? x \"I\")) (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n```\n\n```racket\n\
    #lang racket\n", "  (count (lambda (x) (string=? x \"I\")) (split-string S \"\
    [.?!]\")))\n", "  (let ([sentences (string-split S #\\.)])\n    (for/fold ([boredoms\
    \ 0]) ([sentence sentences])\n      (if (string-prefix? \"I\" sentence)\n    \
    \      (+ boredoms 1)\n          boredoms))))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond [(empty? S) 0]\n       \
    \ [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    \
    \    [else (is_bored (substring S 1))]))\n", "  (let loop ([S (string-split S\
    \ #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (first S))\n           (loop (rest S) (+ count 1))]\n          [else (loop\
    \ (rest S) count)])))\n", "  (count (lambda (x) (and (equal? (first x) \"I\")\
    \ (not (null? x))))\n         (split-string S \"[.?!]\")))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (count-if (lambda (x) (string=? (string-upcase (substring\
    \ x 0 1)) \"I\"))\n            (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", " \
    \ (define (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=?\
    \ (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else (is-bored-helper\
    \ (rest S))]))\n  (is-bored-helper (string-split S #\\.)))\n", "  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n", "  (count (lambda\
    \ (x) (string=? x \"I\")) (string-split S #\\.)))\n", "  (let ([words (string-split\
    \ S #\\space)])\n    (cond\n      [(empty? words) 0]\n      [(equal? (first words)\
    \ \"I\") (+ 1 (is_bored (string-join (rest words) #\\space)))]\n      [else (is_bored\
    \ (string-join (rest words) #\\space))])))\n", "  (let ([S (string-split S #\\\
    .)])\n    (length (filter (lambda (x) (string-prefix? \"I\" x)) S))))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n \
    \        (regexp-split #rx\"[.?!]\" S)))\n", "  (if (string-empty? S)\n      0\n\
    \      (if (string-prefix? \"I\" S)\n          (+ 1 (is_bored (string-drop S 1)))\n\
    \          (is_bored (string-drop S 1)))))\n", "  (length (regexp-match #rx\"\
    I\" S)))\n", "  (let loop ([S (string-split S #\\.)]\n             [count 0])\n\
    \    (cond [(empty? S) count]\n          [(string-prefix? \"I\" (first S))\n \
    \          (loop (rest S) (+ count 1))]\n          [else (loop (rest S) count)])))\n",
  "  (count (lambda (x) (equal? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"\
    ))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (length (filter (lambda (x)\
    \ (string=? (substring x 0 1) \"I\")) (regexp-split #rx\"[.?!]\" S))))\n", " \
    \ (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (length (filter (lambda (x) (string=? (substring x\
    \ 0 1) \"I\")) (regexp-split #rx\"[.?!]\" S))))\n</code>\n", "  (count (lambda\
    \ (x) (and (string=? (substring x 0 1) \"I\")\n                          (or (string=?\
    \ (substring x (substring-length x -1) (substring-length x)) \".\")\n        \
    \                      (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \"?\")\n                              (string=? (substring x (substring-length\
    \ x -1) (substring-length x)) \"!\"))\n                          ))\n        \
    \ (regexp-split #rx\"[.?!]\" S)))\n", "  (let ([S (string-split S #\\.)])\n  \
    \  (length (filter (lambda (s) (string-prefix? \"I\" s)) S))))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count-if\
    \ (lambda (s) (string=? (string-upcase (substring s 0 1)) \"I\"))\n          \
    \  (regexp-split #rx\"[.?!]\" S)))\n", "  (let loop ([S (string-split S #\\.)]\n\
    \             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (car S)) (loop (cdr S) (+ count 1))]\n          [else (loop (cdr S) count)])))\n",
  "  (define (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=?\
    \ (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else (is-bored-helper\
    \ (rest S))]))\n  (is-bored-helper (string-split S #\\.)))\n", "  (let ([words\
    \ (string-split S #\\space)])\n    (length (filter (lambda (word) (string=? word\
    \ \"I\")) words))))\n", "  (count (lambda (x) (string=? (string-take x 1) \"I\"\
    ))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (let ([words (string-split\
    \ S #\\space)])\n    (for/fold ([boredoms 0]) ([word words])\n      (if (string=?\
    \ word \"I\")\n          (+ boredoms 1)\n          boredoms))))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-trim (substring S 0 2)) \"I \") (+\
    \ 1 (is_bored (substring S 2 (string-length S))))]\n    [else (is_bored (substring\
    \ S 1 (string-length S)))]))\n", "  (count (string-split S #rx\"[.?!]\")\n   \
    \      (lambda (x) (string-prefix? \"I\" x))))\n", "  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count\
    \ (string-split S #\"[.?!]\")\n         (lambda (S) (string-prefix? \"I\" (string-trim\
    \ S)))))\n", "  (let ([words (string-split S #\\space)])\n    (cond [(empty? words)\
    \ 0]\n          [(string=? (first words) \"I\") (+ 1 (is_bored (string-join (rest\
    \ words) #\\space)))]\n          [else (is_bored (string-join (rest words) #\\\
    space))])))\n", "  (count (lambda (x) (and (string=? (substring x 0 1) \"I\")\n\
    \                           (or (string=? (substring x (substring-length x -1)\
    \ (substring-length x)) \".\")\n                               (string=? (substring\
    \ x (substring-length x -1) (substring-length x)) \"?\")\n                   \
    \            (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \"!\")))))\n         (string-split S #\\.)))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (define\
    \ (is-bored-helper S)\n    (cond [(empty? S) 0]\n          [(string=? (first S)\
    \ \"I\") (+ 1 (is-bored-helper (rest S)))]\n          [else (is-bored-helper (rest\
    \ S))]))\n  (is-bored-helper (string-split S #\\.)))\n", "  (length (regexp-match*\
    \ #rx\"I\" S)))\n", "  (define (helper S count)\n    (cond\n      [(empty? S)\
    \ count]\n      [(string=? (first S) \"I\") (helper (rest S) (+ count 1))]\n \
    \     [else (helper (rest S) count)]))\n  (helper (string-split S #\\.) 0))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (let ([L\
    \ (string-split S #\\.)])\n    (for/fold ([bored 0]) ([s L])\n      (if (string-prefix?\
    \ \"I\" s)\n          (+ bored 1)\n          bored))))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (let ([S (string-split S #\\.)])\n\
    \    (for/fold ([count 0]) ([s S])\n      (if (string-prefix? \"I\" s)\n     \
    \     (+ count 1)\n          count))))\n", "  (length (filter (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n                  (regexp-split #rx\"[.?!]\" S))))\n",
  "  (let ([L (string-split S #\\.)])\n    (for/fold ([n 0]) ([s L])\n      (if (string-prefix?\
    \ \"I\" s)\n          (+ n 1)\n          n))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
