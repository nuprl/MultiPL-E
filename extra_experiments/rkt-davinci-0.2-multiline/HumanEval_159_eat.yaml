name: HumanEval_159_eat
language: rkt
prompt: "#lang racket\n\n#| You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\nbut now you need to eat more carrots to complete the day's\
  \ meals.\nyou should return a list of [ total number of eaten carrots after your\
  \ meals,\nthe number of carrots left after your meals ]\nif there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  Example:\n>>> (eat 5 6 10)\n(list 11 4)\n>>> (eat 4 8 9)\n(list 12 1)\n>>> (eat\
  \ 1 10 10)\n(list 11 0)\n>>> (eat 2 11 5)\n(list 7 0)\nVariables:\n@number : integer\n\
  the number of carrots that you have eaten.\n@need : integer\nthe number of carrots\
  \ that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet\
  \ exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <=\
  \ remaining <= 1000\nHave fun :)|#\n(define (eat number need remaining)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n\
  \    (check-equal? (candidate 5 6 10) (list 11 4))\n    (check-equal? (candidate\
  \ 4 8 9) (list 12 1))\n    (check-equal? (candidate 1 10 10) (list 11 0))\n    (check-equal?\
  \ (candidate 2 11 5) (list 7 0))\n    (check-equal? (candidate 4 5 7) (list 9 2))\n\
  \    (check-equal? (candidate 4 5 1) (list 5 0))\n))\n\n(test-humaneval)"
completions: ["  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n### [Reverse](https://www.codewars.com/kata/5168bb5dfe9a00b126000018)\n\
    \n```racket\n#lang racket\n", "  (cond\n    [(>= (+ number need) remaining) (list\
    \ (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining (+ number\
    \ need)))]))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+\
    \ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (if (>= (+ number need) remaining)\n      (list (+ number remaining)\
    \ 0)\n      (list (+ number need) (- remaining (+ number need)))))\n", "  (list\
    \ (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n## Level 2\n\n```racket\n\
    #lang racket\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+\
    \ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need)\
    \ (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n", " \
    \ (list (+ number need) (- remaining need)))\n```\n\n## [Python](https://github.com/sagarkarira/carrot-challenge/blob/master/python/eat.py)\n\
    \n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nYou're\
    \ a hungry rabbit, and you already have eaten a certain number of carrots,\nbut\
    \ now you need to eat more carrots to complete the day's meals.\nyou should return\
    \ a list of [ total number of eaten carrots after your meals,\nthe number of carrots\
    \ left after your meals ]\nif there are not enough remaining carrots, you will\
    \ eat all remaining carrots, but will still be hungry.\nExample:\n>>> eat(5, 6,\
    \ 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2,\
    \ 11, 5)\n[7, 0]\nVariables:\n@number : integer\nthe number of carrots that you\
    \ have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n\
    @remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n\
    * 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun\
    \ :)\n\"\"\"\n\ndef eat(number, need, remaining):\n    return [number + need,\
    \ remaining - need]\n```\n\n## [Ruby](https://github.com/sagarkarira/carrot-challenge/blob/master/ruby/eat.rb)\n\
    \n```ruby\n#!/usr/bin/env ruby\n# -*- coding: utf-8 -*-\n\n# You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n# but now you need\
    \ to eat more carrots to complete the day's meals.\n# you should return a list\
    \ of [ total number of eaten carrots after your meals,\n# the number of carrots\
    \ left after your meals ]\n# if there are not enough remaining carrots, you will\
    \ eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> eat(5,\
    \ 6, 10)\n# [11", "  (list (+ number need) (- remaining need)))\n", "  (cond\n\
    \    [(>= (+ number need) remaining) (list (+ number remaining) 0)]\n    [else\
    \ (list (+ number need) (- remaining need))]))\n", "  (list (+ number need) (-\
    \ remaining need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list\
    \ (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (if (<= number\
    \ need)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining\
    \ need))))\n```\n\n### Solution\n\n```racket\n#lang racket\n", "  (if (>= (+ number\
    \ need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number\
    \ need) (- remaining (+ number need)))))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need)\
    \ (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n", " \
    \ (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (cond\n    [(>= (+\
    \ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+ number\
    \ need) (- remaining (+ number need)))]))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need)\
    \ (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n", " \
    \ (list (+ number need) (- remaining need)))\n", "  (cond\n    [(>= (+ number\
    \ need) remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need)\
    \ (- remaining (+ number need)))]))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\n## 2.2.2\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n## Problem 2\n\n```racket\n\
    #lang racket\n", '  (list (+ number need) (- remaining need)))', "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n### [6. The last one](https://www.codewars.com/kata/5a959662373c2e761d00010a)\n\
    \n```racket\n#lang racket\n", "  (cond\n    [(>= (+ number need) remaining) (list\
    \ (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n### Test\n\n```racket\n#lang\
    \ racket\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n```\n\n## [Reverse a string](https://www.codewars.com/kata/5168bb5dfe9a00b126000018)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n### [4.2](https://github.com/mohammadbutt/Racket-Programming/blob/master/4.2.rkt)\n\
    ```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang\
    \ racket\n", "  (list (+ number need) (- remaining need)))\n", "  (cond\n    [(>=\
    \ (+ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+\
    \ number need) (- remaining (+ number need)))]))\n", "  (list (+ number need)\
    \ (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n", " \
    \ (if (>= (+ number need) remaining)\n      (list (+ number remaining) 0)\n  \
    \    (list (+ number need) (- remaining need))))\n", "  (list (+ number need)\
    \ (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n", " \
    \ (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang\
    \ racket\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n```\n\n## Question 2\n\n```racket\n#lang racket\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## [Reverse a list](https://www.codewars.com/kata/53da6d8d112bd1a0dc00008b)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n",
  "  (cond\n    [(>= (+ number need) remaining) (list (+ number remaining) 0)]\n \
    \   [else (list (+ number need) (- remaining (+ number need)))]))\n", "  (list\
    \ (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## Test\n\n```racket", "  (cond\n    [(>= (+ number need) remaining) (list\
    \ (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining (+ number\
    \ need)))]))\n", "  (list (+ number need) (- remaining need)))\n", "  (cond\n\
    \    [(>= (+ number need) remaining) (list (+ number remaining) 0)]\n    [else\
    \ (list (+ number need) (- remaining (+ number need)))]))\n", "  (cond\n    [(>=\
    \ need remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need)\
    \ (- remaining need))]))\n", "  (list (+ number need) (- remaining need)))\n",
  "  (if (<= number need)\n      (list (+ number remaining) 0)\n      (list (+ number\
    \ need) (- remaining need))))\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket", " \
    \ (list (+ number need) (- remaining need)))\n```\n\n### [3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Level 2\n\n```racket\n#lang racket\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n### [Reverse](https://www.codewars.com/kata/5168bb5dfe9a00b126000018)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## [Reverse a list](https://www.codewars.com/kata/53da6d8d112bd1a0dc00008b)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n### [Problem 3](https://www.codewars.com/kata/5a7f58c00025e917f30000f1)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n\
    ```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n### Example Test Cases\n\n\
    ```racket", "  (list (+ number need) (- remaining need)))\n```\n\n```racket\n\
    #lang racket\n", "  (list (+ number need) (- remaining need)))\n```\n\n## Test\
    \ Cases\n\n```racket", "  (list (+ number need) (- remaining need)))\n", "  (list\
    \ (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need)\
    \ (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n", " \
    \ (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang\
    \ racket\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## 2.\n\n```racket\n#lang racket\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test Cases\n\n```racket", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", " \
    \ (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang\
    \ racket\n", "  (if (> (+ number need) remaining)\n      (list (+ number remaining)\
    \ 0)\n      (list (+ number need) (- remaining need))))\n", "  (list (+ number\
    \ need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", " \
    \ (list (+ number need) (- remaining need)))\n```\n\n## Solution\n\n```racket\n\
    #lang racket\n", "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## Test\n\n```racket\n#lang racket\n", '  (list (+ number need) (- remaining
    need)))', "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n\
    #lang racket\n", "  (if (> (+ number need) remaining)\n      (list (+ number remaining)\
    \ 0)\n      (list (+ number need) (- remaining need))))\n", "  (cond\n    [(>\
    \ (+ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+\
    \ number need) (- remaining need))]))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need)\
    \ (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\
    \n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n```\n\n## Solution\n\n```racket\n#lang racket\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n### [Reverse](https://www.codewars.com/kata/reverse/train/racket)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n\
    ```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n```\n\
    \n## [Reverse](https://www.codewars.com/kata/5168bb5dfe9a00b126000018)\n\n```racket\n\
    #lang racket\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+\
    \ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang racket\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n### [2.2.2]\n```racket\n#lang racket\n", "  (if (<= number need)\n\
    \      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining\
    \ need))))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", " \
    \ (if (> (+ number need) remaining)\n      (list (+ number remaining) 0)\n   \
    \   (list (+ number need) (- remaining need))))\n```\n\n## Solution\n\n```racket\n\
    #lang racket\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+\
    \ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang racket\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang\
    \ racket\n", "  (cond\n    [(>= number need) (list number remaining)]\n    [(>=\
    \ remaining need) (list (+ number remaining) 0)]\n    [else (list (+ number remaining)\
    \ 0)]))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n### [2.2.2] - 2019-11-06\n\n#### Added\n\n- [x] [2.2.2] - 2019-11-06\n\n\
    #### Changed\n\n- [x] [2.2.2] - 2019-11-06\n\n#### Removed\n\n- [x] [2.2.2] -\
    \ 2019-11-06\n\n#### Fixed\n\n- [x] [2.2.2] - 2019-11-06\n\n#### Security\n\n\
    - [x] [2.2.2] - 2019-11-06\n\n### [2.2.1] - 2019-11-06\n\n#### Added\n\n- [x]\
    \ [2.2.1] - 2019-11-06\n\n#### Changed\n\n- [x] [2.2.1] - 2019-11-06\n\n#### Removed\n\
    \n- [x] [2.2.1] - 2019-11-06\n\n#### Fixed\n\n- [x] [2.2.1] - 2019-11-06\n\n####\
    \ Security\n\n- [x] [2.2.1] - 2019-11-06\n\n### [2.2.0] - 2019-11-06\n\n#### Added\n\
    \n- [x] [2.2.0] - 2019-11-06\n\n#### Changed\n\n- [x] [2.2.0] - 2019-11-06\n\n\
    #### Removed\n\n- [x] [2.2.0] - 2019-11-06\n\n#### Fixed\n\n- [x] [2.2.0] - 2019-11-06\n\
    \n#### Security\n\n- [x] [2.2.0] - 2019-11-06\n\n### [2.1.0] - 2019-11-06\n\n\
    #### Added\n\n- [x] [2.1.0] - 2019-11-06\n\n#### Changed\n\n- [x] [2.1.0] - 2019-11-06\n\
    \n#### Removed\n\n- [x] [2.1.0] - 2019-11-06\n\n#### Fixed\n\n- [x] [2.1.0] -\
    \ 2019", "  (list (+ number need) (- remaining need)))\n```\n\n## 3.2.2\n\n```racket\n\
    #lang racket\n", "  (list (+ number need) (- remaining need)))\n```\n\n### [6.1.2.2]\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n",
  "  (if (> remaining need)\n      (list (+ number need) (- remaining need))\n   \
    \   (list (+ number remaining) 0)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\n### [Problem\
    \ 2](https://www.codewars.com/kata/5a959662373c2e761d00010a)\n\n```racket\n#lang\
    \ racket\n", "  (list (+ number need) (- remaining need)))\n```\n\n## [Reverse\
    \ the order of words in a sentence](https://www.codewars.com/kata/reverse-the-order-of-words-in-a-sentence)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## Test\n\n```racket", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang\
    \ racket\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\n##### [Solution](https://github.com/mohsenSy/codewars/blob/master/7kyu/eat-carrots/solution.rkt)\n\
    \n### [8kyu] - Count the smiley faces!\n\n```racket\n#lang racket\n", "  (list\
    \ (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n", "  (list (+ number\
    \ need) (- remaining need)))\n", "  (cond\n    [(>= remaining need) (list (+ number\
    \ need) (- remaining need))]\n    [else (list (+ number remaining) 0)]))\n", '  (list
    (+ number need) (- remaining need)))', "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need) (- remaining\
    \ need)))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (list (+ number need)\
    \ (- remaining need)))\n```\n\n```\n#lang racket\n", "  (list (+ number need)\
    \ (- remaining need)))\n```\n\n## Task 3\n\n```racket\n#lang racket\n", "  (list\
    \ (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang racket\n",
  "  (list (+ number need) (- remaining need)))\n", "  (list (+ number need) (- remaining\
    \ need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n\
    ```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n```\n\
    \n### [Reverse a list](https://www.codewars.com/kata/53da6d8d112bd1a0dc00008b)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need)\n        (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (cond\n    [(>= (+ number need)\
    \ remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (-\
    \ remaining (+ number need)))]))\n", "  (list (+ number need) (- remaining need)))\n",
  "  (list (+ number need) (- remaining need)))\n```\n\n## Test\n\n```racket\n#lang\
    \ racket\n", "  (list (+ number need) (- remaining need)))\n```\n\n### [2.2](./2.2.rkt)\n\
    \n```racket\n#lang racket\n", "  (list (+ number need) (- remaining need)))\n\
    ```\n\n## Solution\n\n```racket\n#lang racket\n", "  (list (+ number need) (-\
    \ remaining need)))\n", "  (list (+ number need) (- remaining need)))\n```\n\n\
    ## Test\n\n```racket\n#lang racket\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
