name: HumanEval_66_digitSum
language: rkt
prompt: "#lang racket\n\n#| Task\nWrite a function that takes a string as input and\
  \ returns the sum of the upper characters only'\nASCII codes.\nExamples:\n>>> (digitSum\
  \ \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\")\n67\n>>> (digitSum\
  \ \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum \"aAaaaXa\")\n\
  153|#\n(define (digitSum s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n\
  \    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\"\
  ) 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate\
  \ \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
  \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
completions: ["  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond [(empty?\
    \ s) 0]\n        [else (+ (char->integer (string-ref s 0))\n                 (digitSum\
    \ (substring s 1)))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+\
    \ (if (char-upper-case? c)\n               (char->integer c)\n               0)\n\
    \           (digitSum (substring s 1))))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (char-&gt;integer\
    \ (car s))\n                 (digitSum (cdr s)))]))\n</code>\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s)) (char-numeric? (first\
    \ s)))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [(and (char-upper-case?\
    \ (first s)) (not (char-numeric? (first s))))\n     (digitSum (rest s))]\n   \
    \ [else (digitSum (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (if (string=? s \"\")\n      0\n      (let ((ch (string-ref s\
    \ 0)))\n        (+ (if (char-upper-case? ch) (char->integer ch) 0)\n         \
    \  (digitSum (substring s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else\
    \ (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else\
    \ (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upper-case? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (let\
    \ loop ([s s] [sum 0])\n    (cond [(empty? s) sum]\n          [(char-upper-case?\
    \ (first s)) (loop (rest s) (+ sum (char->integer (first s))))]\n          [else\
    \ (loop (rest s) sum)])))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else\
    \ (digitSum (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref\
    \ s 0)])\n        (+ (if (char-upper-case? c) (char->integer c) 0)\n         \
    \  (digitSum (substring s 1))))))\n", "  (cond [(empty? s) 0]\n        [else (+\
    \ (char->integer (first s))\n                 (digitSum (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (define\
    \ (sum s)\n    (cond [(empty? s) 0]\n          [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (sum (rest s)))]\n          [else (sum (rest s))]))\n\
    \  (sum s))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref\
    \ s 0)])\n        (+ (if (char-upper-case? c)\n               (char->integer c)\n\
    \               0)\n           (digitSum (substring s 1))))))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define\
    \ (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (car s)) (sum\
    \ (cdr s)))))\n  (sum (filter char-upper-case? (string->list s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\
    \ [(empty? s) 0]\n        [else (+ (char->integer (car s))\n                 (digitSum\
    \ (cdr s)))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply\
    \ + (map char->integer (filter char-upper-case? (string->list s)))))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond [(empty?\
    \ s) 0]\n        [else (+ (char->integer (car s))\n                 (digitSum\
    \ (cdr s)))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (if (string=? s \"\")\n      0\n      (let ([ch (string-ref s 0)])\n        (+\
    \ (if (char-upper-case? ch)\n               (char->integer ch)\n             \
    \  0)\n           (digitSum (substring s 1))))))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define (sum-of-upper-chars\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (sum-of-upper-chars (rest s)))]\n      [else (sum-of-upper-chars\
    \ (rest s))]))\n  (sum-of-upper-chars s))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond [(empty? s) 0]\n      \
    \  [else (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (if\
    \ (string=? s \"\")\n      0\n      (let ((c (string-ref s 0)))\n        (+ (if\
    \ (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring s\
    \ 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref\
    \ s 0)])\n        (+ (if (char-upper-case? c) (char->integer c) 0)\n         \
    \  (digitSum (substring s 1))))))\n", "  (apply + (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define\
    \ (sum s i)\n    (if (= i (string-length s))\n        0\n        (+ (char->integer\
    \ (string-ref s i))\n           (sum s (+ i 1)))))\n  (sum s 0))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (define\
    \ (sum-of-upper-chars s)\n    (cond [(empty? s) 0]\n          [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-of-upper-chars (rest s)))]\n  \
    \        [else (sum-of-upper-chars (rest s))]))\n  (sum-of-upper-chars s))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (let\
    \ loop ([s s] [sum 0])\n    (cond [(empty? s) sum]\n          [(char-upper-case?\
    \ (first s)) (loop (rest s) (+ sum (char->integer (first s))))]\n          [else\
    \ (loop (rest s) sum)])))\n", "  (define (sum s)\n    (cond [(empty? s) 0]\n \
    \         [(char-upper-case? (first s)) (+ (char->integer (first s)) (sum (rest\
    \ s)))]\n          [else (sum (rest s))]))\n  (sum s))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map (lambda (c)\
    \ (if (char-upper-case? c) (char->integer c) 0)) (string->list s))))\n", "  (cond\
    \ [(empty? s) 0]\n        [else (+ (char->integer (car s))\n                 (digitSum\
    \ (cdr s)))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (define (sum s)\n    (if (empty? s)\n        0\n       \
    \ (+ (char->integer (car s)) (sum (cdr s)))))\n  (sum (filter char-upper-case?\
    \ (string->list s))))\n", "  (apply + (map char->integer (filter char-upper-case?\
    \ (string->list s)))))\n", "  (apply + (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map (lambda (c) (if (char-upcase? c) (char->integer\
    \ c) 0)) (string->list s))))\n", "  (define (sum s)\n    (if (empty? s)\n    \
    \    0\n        (+ (char->integer (car s)) (sum (cdr s)))))\n  (sum (filter char-upper-case?\
    \ (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (define (sum-upper s)\n    (cond\n      [(empty? s) 0]\n     \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (sum-upper (rest\
    \ s)))]\n      [else (sum-upper (rest s))]))\n  (sum-upper s))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond [(empty? s) 0]\n\
    \        [else (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\
    \ [(empty? s) 0]\n        [else (+ (char->integer (car s))\n                 (digitSum\
    \ (cdr s)))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (let loop ((s s) (acc 0))\n    (cond ((null? s) acc)\n       \
    \   ((char-upper-case? (car s))\n           (loop (cdr s) (+ acc (char->integer\
    \ (car s)))))\n          (else (loop (cdr s) acc)))))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (define (sum-upper-chars s)\n\
    \    (if (null? s)\n        0\n        (if (char-upper-case? (car s))\n      \
    \      (+ (char->integer (car s)) (sum-upper-chars (cdr s)))\n            (sum-upper-chars\
    \ (cdr s)))))\n  (sum-upper-chars s))\n", "  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n", "  (define (isUpper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (apply + (map char->integer (filter isUpper? s))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define\
    \ (sum s)\n    (cond ((null? s) 0)\n          ((char-upper-case? (car s)) (+ (char->integer\
    \ (car s)) (sum (cdr s))))\n          (else (sum (cdr s)))))\n  (sum s))", " \
    \ (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+\
    \ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
