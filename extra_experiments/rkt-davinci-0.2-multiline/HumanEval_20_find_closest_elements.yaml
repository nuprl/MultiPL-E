name: HumanEval_20_find_closest_elements
language: rkt
prompt: "#lang racket\n\n#| From a supplied list of numbers (of length at least two)\
  \ select and return two that are the closest to each\nother and return them in order\
  \ (smaller number, larger number).\n>>> (find_closest_elements (list 1.0 2.0 3.0\
  \ 4.0 5.0 2.2))\n(list 2.0 2.2)\n>>> (find_closest_elements (list 1.0 2.0 3.0 4.0\
  \ 5.0 2.0))\n(list 2.0 2.0)|#\n(define (find_closest_elements numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0))\n\
  \    (check-equal? (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0))\n    (check-equal?\
  \ (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1))\n))\n\n(test-humaneval)"
completions: ["  (let ([closest-diff (abs (- (first numbers) (second numbers)))])\n\
    \    (let loop ([numbers (rest numbers)])\n      (if (null? numbers)\n       \
    \   (list (first numbers) (second numbers))\n          (let ([diff (abs (- (first\
    \ numbers) (second numbers)))])\n            (if (< diff closest-diff)\n     \
    \           (loop (rest numbers))\n                (list (first numbers) (second\
    \ numbers))))))))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (null? (cdr numbers))\n        closest_pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest_diff (abs (- (car closest_pair)\
    \ (cadr closest_pair)))])\n          (if (< diff closest_diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let loop ((numbers numbers)\
    \ (closest-pair (list (car numbers) (cadr numbers))))\n    (if (null? (cddr numbers))\n\
    \        closest-pair\n        (let ((new-pair (list (car numbers) (cadr numbers))))\n\
    \          (if (< (abs (- (car new-pair) (cadr new-pair)))\n                 (abs\
    \ (- (car closest-pair) (cadr closest-pair))))\n              (loop (cdr numbers)\
    \ new-pair)\n              (loop (cdr numbers) closest-pair))))))\n", "  (define\
    \ (find_closest_elements_iter numbers closest-pair)\n    (if (null? (cdr numbers))\n\
    \        closest-pair\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [distance (abs (- first second))]\n        \
    \       [closest-distance (abs (- (car closest-pair) (cadr closest-pair)))]\n\
    \               [new-closest-pair (if (< distance closest-distance)\n        \
    \                             (list first second)\n                          \
    \           closest-pair)])\n          (find_closest_elements_iter (cdr numbers)\
    \ new-closest-pair))))\n  (find_closest_elements_iter numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers closest-so-far)\n\
    \    (if (null? (cdr numbers))\n        closest-so-far\n        (let* ([next-number\
    \ (cadr numbers)]\n               [difference (abs (- (car numbers) next-number))]\n\
    \               [closest-so-far (if (< difference (abs (- (car closest-so-far)\
    \ (cadr closest-so-far))))\n                                   (list (car numbers)\
    \ next-number)\n                                   closest-so-far)])\n       \
    \   (find_closest_elements_iter (cdr numbers) closest-so-far))))\n  (find_closest_elements_iter\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond [(empty? numbers) closest-pair]\n         \
    \ [(empty? (rest numbers)) closest-pair]\n          [else\n           (define\
    \ current-pair (list (first numbers) (second numbers)))\n           (define current-diff\
    \ (abs (- (first current-pair) (second current-pair))))\n           (define closest-diff\
    \ (abs (- (first closest-pair) (second closest-pair))))\n           (cond [(<\
    \ current-diff closest-diff)\n                  (find_closest_elements_helper\
    \ (rest numbers) current-pair)]\n                 [else (find_closest_elements_helper\
    \ (rest numbers) closest-pair)])]))\n  (find_closest_elements_helper numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find-closest-elements-helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n     \
    \          [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< current-diff closest-diff)\n              (find-closest-elements-helper\
    \ (cdr numbers) current-pair)\n              (find-closest-elements-helper (cdr\
    \ numbers) closest-pair)))))\n  (find-closest-elements-helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_elements)\n    (if (null? (cdr numbers))\n        closest_elements\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest_difference\
    \ (abs (- (car closest_elements) (cadr closest_elements)))])\n          (if (<\
    \ difference closest_difference)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_elements)))))\n  (find_closest_elements_helper numbers\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [current-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff current-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let loop ([numbers numbers] [closest-pair (list (first numbers) (second numbers))])\n\
    \    (if (null? (rest numbers))\n        closest-pair\n        (let* ([next-number\
    \ (first (rest numbers))]\n               [current-closest-pair-difference (abs\
    \ (- (first closest-pair) (second closest-pair)))]\n               [next-closest-pair-difference\
    \ (abs (- (first closest-pair) next-number))])\n          (if (< next-closest-pair-difference\
    \ current-closest-pair-difference)\n              (loop (rest numbers) (list (first\
    \ closest-pair) next-number))\n              (loop (rest numbers) closest-pair))))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (empty?\
    \ numbers)\n        closest-pair\n        (let* ([first (first numbers)]\n   \
    \            [rest (rest numbers)]\n               [closest-pair-first (first\
    \ closest-pair)]\n               [closest-pair-second (second closest-pair)]\n\
    \               [distance-to-closest-pair (abs (- closest-pair-first closest-pair-second))]\n\
    \               [distance-to-first (abs (- first closest-pair-first))]\n     \
    \          [distance-to-second (abs (- first closest-pair-second))])\n       \
    \   (if (< distance-to-first distance-to-closest-pair)\n              (if (< distance-to-second\
    \ distance-to-closest-pair)\n                  (find_closest_elements_helper rest\
    \ (list first first))\n                  (find_closest_elements_helper rest (list\
    \ first closest-pair-second)))\n              (if (< distance-to-second distance-to-closest-pair)\n\
    \                  (find_closest_elements_helper rest (list closest-pair-first\
    \ first))\n                  (find_closest_elements_helper rest closest-pair))))))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (let ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n\
    \    (list (apply min (filter (lambda (x) (= min-diff (abs (- x (apply min (filter\
    \ (lambda (y) (= min-diff (abs (- x y)))) numbers))))) numbers))\n          (apply\
    \ min (filter (lambda (x) (= min-diff (abs (- x (apply max (filter (lambda (y)\
    \ (= min-diff (abs (- x y)))) numbers))))) numbers)))))\n", "  (define (helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (first (rest numbers))]\n          \
    \    [diff (abs (- first second))]\n              [closest-diff (abs (- (first\
    \ closest-pair) (second closest-pair)))])\n         (if (< diff closest-diff)\n\
    \             (helper (rest numbers) (list first second))\n             (helper\
    \ (rest numbers) closest-pair)))]))\n  (helper numbers (list (first numbers) (second\
    \ numbers))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest_diff (abs\
    \ (- (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest_pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (define next-pair (list (first numbers) (second numbers)))\n\
    \       (define next-distance (abs (- (first next-pair) (second next-pair))))\n\
    \       (define current-distance (abs (- (first closest-pair) (second closest-pair))))\n\
    \       (if (< next-distance current-distance)\n           (find_closest_elements_helper\
    \ (rest numbers) next-pair)\n           (find_closest_elements_helper (rest numbers)\
    \ closest-pair))]))\n  (find_closest_elements_helper numbers (list (first numbers)\
    \ (second numbers))))\n", "  (define (diff x y)\n    (abs (- x y)))\n  (define\
    \ (find-closest-elements-helper numbers closest-diff closest-pair)\n    (if (null?\
    \ (cdr numbers))\n        closest-pair\n        (let ((new-diff (diff (car numbers)\
    \ (cadr numbers))))\n          (if (< new-diff closest-diff)\n              (find-closest-elements-helper\
    \ (cdr numbers) new-diff (list (car numbers) (cadr numbers)))\n              (find-closest-elements-helper\
    \ (cdr numbers) closest-diff closest-pair)))))\n  (find-closest-elements-helper\
    \ numbers (diff (car numbers) (cadr numbers)) (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers current_min_difference current_min_difference_elements)\n\
    \    (if (null? numbers)\n        current_min_difference_elements\n        (let*\
    \ ((first_number (car numbers))\n               (second_number (cadr numbers))\n\
    \               (difference (abs (- first_number second_number))))\n         \
    \ (if (< difference current_min_difference)\n              (find_closest_elements_helper\
    \ (cdr numbers) difference (list first_number second_number))\n              (find_closest_elements_helper\
    \ (cdr numbers) current_min_difference current_min_difference_elements)))))\n\
    \  (find_closest_elements_helper numbers (abs (- (car numbers) (cadr numbers)))\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest-difference\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< difference closest-difference)\n                                    \
    \ (list first second)\n                                     closest-pair)])\n\
    \          (find_closest_elements_helper (cdr numbers) new-closest-pair))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [first-second-diff (abs (- first second))]\n               [closest-pair-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< first-second-diff\
    \ closest-pair-diff)\n              (find_closest_elements_helper (cdr numbers)\
    \ (list first second))\n              (find_closest_elements_helper (cdr numbers)\
    \ closest-pair)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (cond\n      [(empty? numbers) closest-pair]\n      [(empty? (rest numbers))\
    \ closest-pair]\n      [else\n       (define current-pair (list (first numbers)\
    \ (second numbers)))\n       (define current-distance (abs (- (first current-pair)\
    \ (second current-pair))))\n       (define closest-distance (abs (- (first closest-pair)\
    \ (second closest-pair))))\n       (if (< current-distance closest-distance)\n\
    \           (find_closest_elements_helper (rest numbers) current-pair)\n     \
    \      (find_closest_elements_helper (rest numbers) closest-pair))]))\n  (find_closest_elements_helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (define current-pair\
    \ (list (first numbers) (second numbers)))\n       (define current-distance (abs\
    \ (- (first current-pair) (second current-pair))))\n       (define closest-distance\
    \ (abs (- (first closest-pair) (second closest-pair))))\n       (if (< current-distance\
    \ closest-distance)\n           (find_closest_elements_helper (rest numbers) current-pair)\n\
    \           (find_closest_elements_helper (rest numbers) closest-pair))]))\n \
    \ (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [distance (abs (- first second))]\n\
    \               [closest_distance (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< distance closest_distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find-closest-elements-helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [current-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff current-diff)\n\
    \              (find-closest-elements-helper (cdr numbers) (list first second))\n\
    \              (find-closest-elements-helper (cdr numbers) closest-pair)))))\n\
    \  (find-closest-elements-helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements-iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([current-pair (list (car numbers)\
    \ (cadr numbers))]\n               [current-diff (abs (- (car current-pair) (cadr\
    \ current-pair)))]\n               [closest-diff (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< current-diff closest-diff)\n           \
    \   (find_closest_elements-iter (cdr numbers) current-pair)\n              (find_closest_elements-iter\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements-iter numbers (list\
    \ (car numbers) (cadr numbers))))\n```\n\n```racket\n#lang racket\n", "  (define\
    \ (find-closest-elements-helper numbers current-min-diff current-min-diff-pair)\n\
    \    (if (null? numbers)\n        current-min-diff-pair\n        (let* ([first\
    \ (car numbers)]\n               [second (cadr numbers)]\n               [diff\
    \ (abs (- first second))])\n          (if (< diff current-min-diff)\n        \
    \      (find-closest-elements-helper (cdr numbers) diff (list first second))\n\
    \              (find-closest-elements-helper (cdr numbers) current-min-diff current-min-diff-pair)))))\n\
    \  (find-closest-elements-helper numbers (abs (- (car numbers) (cadr numbers)))\
    \ (list (car numbers) (cadr numbers))))\n", "  (let loop ((numbers numbers) (closest-pair\
    \ (list (car numbers) (cadr numbers))))\n    (if (null? (cddr numbers))\n    \
    \    closest-pair\n        (let ((next-pair (list (car numbers) (cadr numbers))))\n\
    \          (if (< (abs (- (car next-pair) (cadr next-pair)))\n               \
    \  (abs (- (car closest-pair) (cadr closest-pair))))\n              (loop (cdr\
    \ numbers) next-pair)\n              (loop (cdr numbers) closest-pair))))))\n",
  "  (define (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest_difference\
    \ (abs (- (car closest_pair) (cadr closest_pair)))])\n          (if (< difference\
    \ closest_difference)\n              (find_closest_elements_helper (cdr numbers)\
    \ (list first second))\n              (find_closest_elements_helper (cdr numbers)\
    \ closest_pair)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_iter (cdr numbers) (list first second))\n           \
    \   (find_closest_elements_iter (cdr numbers) closest-pair)))))\n  (find_closest_elements_iter\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let ([current_pair (list (car numbers) (cadr numbers))])\n         \
    \ (if (< (abs (- (car current_pair) (cadr current_pair)))\n                 (abs\
    \ (- (car closest_pair) (cadr closest_pair))))\n              (find_closest_elements_helper\
    \ (cdr numbers) current_pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n   \
    \     (let* ([first (car numbers)]\n               [second (cadr numbers)]\n \
    \              [difference (abs (- first second))]\n               [closest-difference\
    \ (abs (- (car closest-so-far) (cadr closest-so-far)))]\n               [new-closest-so-far\
    \ (if (< difference closest-difference)\n                                    \
    \   (list first second)\n                                       closest-so-far)])\n\
    \          (find_closest_elements_helper (cdr numbers) new-closest-so-far))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find-closest-elements-helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest-difference (abs (- (car closest-pair) (cadr\
    \ closest-pair)))]\n               [new-closest-pair (if (< difference closest-difference)\n\
    \                                     (list first second)\n                  \
    \                   closest-pair)])\n          (find-closest-elements-helper (cdr\
    \ numbers) new-closest-pair))))\n  (find-closest-elements-helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (cond\n      [(empty? numbers) closest_pair]\n  \
    \    [(empty? (rest numbers)) closest_pair]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (second numbers)]\n              [current_pair\
    \ (list first second)]\n              [current_distance (abs (- first second))]\n\
    \              [closest_distance (abs (- (first closest_pair) (second closest_pair)))])\n\
    \         (if (< current_distance closest_distance)\n             (find_closest_elements_helper\
    \ (rest (rest numbers)) current_pair)\n             (find_closest_elements_helper\
    \ (rest (rest numbers)) closest_pair)))]))\n  (find_closest_elements_helper numbers\
    \ (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (first (rest numbers))]\n          \
    \    [diff (abs (- first second))]\n              [closest-diff (abs (- (first\
    \ closest-pair) (second closest-pair)))])\n         (if (< diff closest-diff)\n\
    \             (find_closest_elements_helper (rest numbers) (list first second))\n\
    \             (find_closest_elements_helper (rest numbers) closest-pair)))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements-helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements-helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements-helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements-helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (let ([current-pair\
    \ (list (first numbers) (second numbers))])\n         (if (< (abs (- (first current-pair)\
    \ (second current-pair)))\n                (abs (- (first closest-pair) (second\
    \ closest-pair))))\n             (find_closest_elements_helper (rest numbers)\
    \ current-pair)\n             (find_closest_elements_helper (rest numbers) closest-pair)))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest)\n    (if (null? (cdr numbers))\n\
    \        closest\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest-diff (abs (- (car closest) (cadr closest)))]\n               [new-closest\
    \ (if (< diff closest-diff) (list first second) closest)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-closest))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements-iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([next-pair (list (car numbers)\
    \ (cadr numbers))]\n               [next-diff (abs (- (car next-pair) (cadr next-pair)))]\n\
    \               [current-diff (abs (- (car closest-pair) (cadr closest-pair)))]\n\
    \               [new-closest-pair (if (< next-diff current-diff) next-pair closest-pair)])\n\
    \          (find_closest_elements-iter (cdr numbers) new-closest-pair))))\n  (find_closest_elements-iter\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let loop ([numbers numbers]\
    \ [closest-pair (list (car numbers) (cadr numbers))])\n    (if (null? (cddr numbers))\n\
    \        closest-pair\n        (let ([new-pair (list (car numbers) (cadr numbers))])\n\
    \          (if (< (abs (- (car new-pair) (cadr new-pair)))\n                 (abs\
    \ (- (car closest-pair) (cadr closest-pair))))\n              (loop (cdr numbers)\
    \ new-pair)\n              (loop (cdr numbers) closest-pair))))))\n", "  (define\
    \ (find-closest-elements-helper numbers closest-pair)\n    (cond\n      [(empty?\
    \ numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n     \
    \ [else\n       (let* ([first (first numbers)]\n              [second (first (rest\
    \ numbers))]\n              [diff (abs (- first second))]\n              [closest-diff\
    \ (abs (- (first closest-pair) (second closest-pair)))])\n         (if (< diff\
    \ closest-diff)\n             (find-closest-elements-helper (rest numbers) (list\
    \ first second))\n             (find-closest-elements-helper (rest numbers) closest-pair)))]))\n\
    \  (find-closest-elements-helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([current-pair (list (car numbers)\
    \ (cadr numbers))]\n               [current-diff (abs (- (car current-pair) (cadr\
    \ current-pair)))]\n               [closest-diff (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< current-diff closest-diff)\n           \
    \   (find_closest_elements_helper (cdr numbers) current-pair)\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (helper lst)\n    (if (null?\
    \ (cdr lst))\n        (list (car lst) (car lst))\n        (let* ([a (car lst)]\n\
    \               [b (car (cdr lst))]\n               [c (car (cdr (cdr lst)))]\n\
    \               [d (abs (- a b))]\n               [e (abs (- b c))])\n       \
    \   (if (< d e)\n              (helper (cons a (cdr lst)))\n              (helper\
    \ (cons b (cdr (cdr lst))))))))\n  (helper numbers))\n", "  (define (abs x)\n\
    \    (if (< x 0)\n        (- x)\n        x))\n  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([n1 (car numbers)]\n               [n2 (cadr numbers)]\n     \
    \          [diff (abs (- n1 n2))]\n               [closest_diff (abs (- (car closest_pair)\
    \ (cadr closest_pair)))])\n          (if (< diff closest_diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list n1 n2))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (a b) (abs (- a b))) numbers (cdr numbers)))])\n    (list (apply min (filter\
    \ (lambda (a) (= (abs (- a (apply min numbers))) min-diff)) numbers))\n      \
    \    (apply max (filter (lambda (a) (= (abs (- a (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (let ([min (apply min numbers)])\n    (list min (apply min\
    \ (remove min numbers)))))\n", "  (let ([min-diff (apply min (map (lambda (x y)\
    \ (abs (- x y))) numbers (rest numbers)))])\n    (list (apply min (filter (lambda\
    \ (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n          (apply\
    \ max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers)))))\n",
  "  (define (find_closest_elements_helper numbers closest)\n    (if (null? (cdr numbers))\n\
    \        closest\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest-diff (abs (- (car closest) (cadr closest)))])\n          (if (< diff\
    \ closest-diff)\n              (find_closest_elements_helper (cdr numbers) (list\
    \ first second))\n              (find_closest_elements_helper (cdr numbers) closest)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let ([closest-diff (abs (- (first numbers) (second numbers)))])\n    (let loop\
    \ ([numbers (rest numbers)])\n      (if (null? numbers)\n          (list (first\
    \ numbers) (second numbers))\n          (let ([diff (abs (- (first numbers) (second\
    \ numbers)))])\n            (if (< diff closest-diff)\n                (loop (rest\
    \ numbers))\n                (list (first numbers) (second numbers))))))))\n",
  "  (define (find_closest_elements_iter numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< diff closest_diff)\n              (find_closest_elements_iter\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_iter\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_iter numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let ([current-pair (list (car numbers) (cadr numbers))])\n          (if (<\
    \ (abs (- (car current-pair) (cadr current-pair)))\n                 (abs (- (car\
    \ closest-pair) (cadr closest-pair))))\n              (find_closest_elements_iter\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_iter (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements_iter numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (let* ([min-diff (apply min (map (lambda (x\
    \ y) (abs (- x y))) numbers (cdr numbers)))]\n         [min-diff-index (find-index\
    \ (lambda (x) (= x min-diff)) (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n\
    \    (list (list-ref numbers min-diff-index) (list-ref numbers (+ min-diff-index\
    \ 1)))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([current-pair\
    \ (list (car numbers) (cadr numbers))]\n               [current-distance (abs\
    \ (- (car current-pair) (cadr current-pair)))]\n               [closest-distance\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< current-distance\
    \ closest-distance)\n              (find_closest_elements_helper (cdr numbers)\
    \ current-pair)\n              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper nums closest)\n    (if (null? (cdr nums))\n\
    \        closest\n        (let* ([next (cadr nums)]\n               [diff (abs\
    \ (- (car nums) next))]\n               [closest-diff (abs (- (car closest) (cadr\
    \ closest)))])\n          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr nums) (list (car nums) next))\n              (find_closest_elements_helper\
    \ (cdr nums) closest)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest_diff (abs (-\
    \ (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest_pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_elements)\n    (if (null?\
    \ (cdr numbers))\n        closest_elements\n        (let* ([current_number (car\
    \ numbers)]\n               [next_number (cadr numbers)]\n               [current_diff\
    \ (abs (- current_number next_number))]\n               [closest_diff (abs (-\
    \ (car closest_elements) (cadr closest_elements)))])\n          (if (< current_diff\
    \ closest_diff)\n              (find_closest_elements_helper (cdr numbers) (list\
    \ current_number next_number))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_elements)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond ((null? numbers) closest-pair)\n          ((null?\
    \ (cdr numbers)) closest-pair)\n          (else (let ((current-pair (list (car\
    \ numbers) (cadr numbers)))\n                       (next-pair (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))\n                   (if (< (abs (- (car current-pair)\
    \ (cadr current-pair)))\n                          (abs (- (car next-pair) (cadr\
    \ next-pair))))\n                       current-pair\n                       next-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([current_pair (list (car numbers) (cadr numbers))]\n         \
    \      [current_distance (abs (- (car current_pair) (cadr current_pair)))]\n \
    \              [closest_distance (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< current_distance closest_distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) current_pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find-closest-elements-helper numbers\
    \ closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n      [(empty?\
    \ (rest numbers)) closest-pair]\n      [else\n       (let* ([first (first numbers)]\n\
    \              [second (second numbers)]\n              [difference (abs (- first\
    \ second))]\n              [current-closest-difference (abs (- (first closest-pair)\
    \ (second closest-pair)))]\n              [new-closest-pair (if (< difference\
    \ current-closest-difference)\n                                    (list first\
    \ second)\n                                    closest-pair)])\n         (find-closest-elements-helper\
    \ (rest (rest numbers)) new-closest-pair))]))\n  (find-closest-elements-helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements-helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest-difference\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< difference closest-difference)\n                                    \
    \ (list first second)\n                                     closest-pair)])\n\
    \          (find_closest_elements-helper (cdr numbers) new-closest-pair))))\n\
    \  (find_closest_elements-helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))])\n\
    \    (list (apply min (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers))\n          (apply max (filter (lambda (x) (= (abs (- x (apply min\
    \ numbers))) min-diff)) numbers)))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements-iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let ([difference (abs (- (car numbers)\
    \ (cadr numbers)))])\n          (if (< difference (abs (- (car closest-pair) (cadr\
    \ closest-pair))))\n              (find_closest_elements-iter (cdr numbers) (list\
    \ (car numbers) (cadr numbers)))\n              (find_closest_elements-iter (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements-iter numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [difference (abs (- first second))]\n               [closest_difference\
    \ (abs (- (car closest_pair) (cadr closest_pair)))])\n          (if (< difference\
    \ closest_difference)\n              (find_closest_elements_helper (cdr numbers)\
    \ (list first second))\n              (find_closest_elements_helper (cdr numbers)\
    \ closest_pair)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let loop ([numbers numbers]\
    \ [closest-pair (list (car numbers) (cadr numbers))])\n    (if (null? (cddr numbers))\n\
    \        closest-pair\n        (let ([next-pair (list (car numbers) (cadr numbers))])\n\
    \          (if (< (abs (- (car next-pair) (cadr next-pair)))\n               \
    \  (abs (- (car closest-pair) (cadr closest-pair))))\n              (loop (cdr\
    \ numbers) next-pair)\n              (loop (cdr numbers) closest-pair))))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest-difference (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< difference closest-difference)\n       \
    \       (find_closest_elements_helper (cdr numbers) (list first second))\n   \
    \           (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find-closest-elements-helper\
    \ numbers closest-so-far)\n    (cond\n      [(empty? numbers) closest-so-far]\n\
    \      [(empty? (rest numbers)) closest-so-far]\n      [else\n       (let* ([n1\
    \ (first numbers)]\n              [n2 (second numbers)]\n              [diff (abs\
    \ (- n1 n2))]\n              [closest-so-far-diff (abs (- (first closest-so-far)\
    \ (second closest-so-far)))])\n         (if (< diff closest-so-far-diff)\n   \
    \          (find-closest-elements-helper (rest numbers) (list n1 n2))\n      \
    \       (find-closest-elements-helper (rest numbers) closest-so-far)))]))\n  (find-closest-elements-helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers current_min_difference current_min_difference_elements)\n    (if (empty?\
    \ numbers)\n        current_min_difference_elements\n        (let* ([first (first\
    \ numbers)]\n               [rest (rest numbers)]\n               [first_and_rest\
    \ (cons first rest)]\n               [differences (map (lambda (x) (abs (- x first)))\
    \ rest)]\n               [min_difference (apply min differences)]\n          \
    \     [min_difference_elements (filter (lambda (x) (= min_difference (abs (- x\
    \ first)))) first_and_rest)])\n          (if (< min_difference current_min_difference)\n\
    \              (find_closest_elements_helper rest min_difference min_difference_elements)\n\
    \              (find_closest_elements_helper rest current_min_difference current_min_difference_elements)))))\n\
    \  (find_closest_elements_helper numbers (abs (- (first numbers) (second numbers)))\
    \ (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (define current-pair\
    \ (list (first numbers) (second numbers)))\n       (define current-distance (abs\
    \ (- (first current-pair) (second current-pair))))\n       (define closest-distance\
    \ (abs (- (first closest-pair) (second closest-pair))))\n       (if (< current-distance\
    \ closest-distance)\n           (find_closest_elements_helper (rest numbers) current-pair)\n\
    \           (find_closest_elements_helper (rest numbers) closest-pair))]))\n \
    \ (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers min-diff min-diff-pair)\n    (if\
    \ (null? numbers)\n        min-diff-pair\n        (let* ([diff (abs (- (car numbers)\
    \ (cadr numbers)))]\n               [new-min-diff (if (< diff min-diff) diff min-diff)]\n\
    \               [new-min-diff-pair (if (= diff new-min-diff) (list (car numbers)\
    \ (cadr numbers)) min-diff-pair)])\n          (find_closest_elements_helper (cdr\
    \ numbers) new-min-diff new-min-diff-pair))))\n  (find_closest_elements_helper\
    \ numbers (abs (- (car numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n",
  "  (define (find-closest-elements-iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([next-pair (list (car numbers)\
    \ (cadr numbers))]\n               [next-diff (abs (- (car next-pair) (cadr next-pair)))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))]\n\
    \               [new-closest-pair (if (< next-diff closest-diff)\n           \
    \                          next-pair\n                                     closest-pair)])\n\
    \          (find-closest-elements-iter (cdr numbers) new-closest-pair))))\n  (find-closest-elements-iter\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([current_pair (list (car numbers) (cadr numbers))]\n         \
    \      [current_distance (abs (- (car current_pair) (cadr current_pair)))]\n \
    \              [closest_distance (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< current_distance closest_distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) current_pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (cond\n    \
    \  [(empty? numbers) closest_pair]\n      [(empty? (rest numbers)) closest_pair]\n\
    \      [else\n       (define current_pair (list (first numbers) (second numbers)))\n\
    \       (define current_distance (abs (- (first current_pair) (second current_pair))))\n\
    \       (define closest_distance (abs (- (first closest_pair) (second closest_pair))))\n\
    \       (if (< current_distance closest_distance)\n           (find_closest_elements_helper\
    \ (rest numbers) current_pair)\n           (find_closest_elements_helper (rest\
    \ numbers) closest_pair))]))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (define (find_closest_elements-iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let ([next-pair (find-closest-pair (car numbers) (cadr numbers))])\n      \
    \    (if (pair-is-closer? next-pair closest-pair)\n              (find-closest-elements-iter\
    \ (cdr numbers) next-pair)\n              (find-closest-elements-iter (cdr numbers)\
    \ closest-pair)))))\n  (find-closest-elements-iter numbers (find-closest-pair\
    \ (car numbers) (cadr numbers))))\n", "  (define (find-closest-elements-helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest-difference\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< difference closest-difference)\n                                    \
    \ (list first second)\n                                     closest-pair)])\n\
    \          (find-closest-elements-helper (cdr numbers) new-closest-pair))))\n\
    \  (find-closest-elements-helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_iter\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_iter\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_iter numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n      [(empty?\
    \ (rest numbers)) closest-pair]\n      [else\n       (let* ([first (first numbers)]\n\
    \              [second (second numbers)]\n              [current-pair (list first\
    \ second)]\n              [current-distance (abs (- first second))]\n        \
    \      [closest-distance (abs (- (first closest-pair) (second closest-pair)))])\n\
    \         (if (< current-distance closest-distance)\n             (find_closest_elements_iter\
    \ (rest numbers) current-pair)\n             (find_closest_elements_iter (rest\
    \ numbers) closest-pair)))]))\n  (find_closest_elements_iter numbers (list (first\
    \ numbers) (second numbers))))\n", "  (define (closest-pair numbers)\n    (define\
    \ (iterate numbers)\n      (if (null? (cdr numbers))\n          (list (car numbers)\
    \ (car numbers))\n          (let* ([first (car numbers)]\n                 [second\
    \ (cadr numbers)]\n                 [rest (cddr numbers)]\n                 [closest-pair\
    \ (iterate rest)]\n                 [closest-pair-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n            (if (< (abs (- first second)) closest-pair-diff)\n\
    \                (list first second)\n                closest-pair))))\n    (iterate\
    \ (sort numbers <)))\n  (closest-pair numbers))\n", "  (define (find_closest_elements-iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements-iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements-iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements-iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements-helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements-helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements-helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements-helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([closest-diff (abs (- (car numbers)\
    \ (cadr numbers)))])\n    (for/fold ([closest-pair (list (car numbers) (cadr numbers))])\n\
    \              ([n (in-list (cdr (cdr numbers)))])\n      (let ([diff (abs (-\
    \ (car closest-pair) n))])\n        (if (< diff closest-diff)\n            (values\
    \ (list (car closest-pair) n) diff)\n            (values closest-pair closest-diff))))))\n",
  "  (define (find_closest_elements-iter numbers closest-pair)\n    (cond [(empty?\
    \ numbers) closest-pair]\n          [(empty? (rest numbers)) closest-pair]\n \
    \         [else (let ([current-pair (list (first numbers) (second numbers))])\n\
    \                  (if (< (abs (- (first current-pair) (second current-pair)))\n\
    \                         (abs (- (first closest-pair) (second closest-pair))))\n\
    \                      (find_closest_elements-iter (rest numbers) current-pair)\n\
    \                      (find_closest_elements-iter (rest numbers) closest-pair)))]))\n\
    \  (find_closest_elements-iter numbers (list (first numbers) (second numbers))))\n",
  "  (let loop ([numbers numbers] [closest-pair (list (car numbers) (cadr numbers))])\n\
    \    (if (null? (cddr numbers))\n        closest-pair\n        (let ([new-pair\
    \ (list (car numbers) (cadr numbers))])\n          (if (< (abs (- (car new-pair)\
    \ (cadr new-pair)))\n                 (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (loop (cdr numbers) new-pair)\n              (loop (cdr numbers)\
    \ closest-pair))))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [difference\
    \ (abs (- first second))]\n               [closest-difference (abs (- (car closest-pair)\
    \ (cadr closest-pair)))]\n               [new-closest-pair (if (< difference closest-difference)\n\
    \                                     (list first second)\n                  \
    \                   closest-pair)])\n          (find_closest_elements_helper (cdr\
    \ numbers) new-closest-pair))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([next_pair (list (car numbers) (cadr numbers))]\n            \
    \   [next_diff (abs (- (car next_pair) (cadr next_pair)))]\n               [current_diff\
    \ (abs (- (car closest_pair) (cadr closest_pair)))]\n               [new_closest_pair\
    \ (if (< next_diff current_diff) next_pair closest_pair)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new_closest_pair))))\n  (find_closest_elements_helper numbers\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [current-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff current-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (first\
    \ (rest numbers))]\n              [current-pair (list first second)]\n       \
    \       [current-diff (abs (- first second))]\n              [closest-diff (abs\
    \ (- (first closest-pair) (second closest-pair)))])\n         (if (< current-diff\
    \ closest-diff)\n             (find_closest_elements_helper (rest numbers) current-pair)\n\
    \             (find_closest_elements_helper (rest numbers) closest-pair)))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (first (rest numbers)))))\n",
  "  (let ([closest-pair (list (first numbers) (second numbers))])\n    (for ([i (in-range\
    \ (length numbers))])\n      (for ([j (in-range (add1 i))])\n        (let ([diff\
    \ (abs (- (list-ref numbers i) (list-ref numbers j)))])\n          (when (< diff\
    \ (abs (- (first closest-pair) (second closest-pair))))\n            (set! closest-pair\
    \ (list (list-ref numbers i) (list-ref numbers j)))))))\n    closest-pair))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest-difference (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< difference closest-difference)\n       \
    \       (find_closest_elements_helper (cdr numbers) (list first second))\n   \
    \           (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let ([closest-pair (list\
    \ (first numbers) (second numbers))])\n    (for ([i (in-range (add1 (length numbers)))]\n\
    \          [j (in-range (add1 (length numbers)))]\n          #:when (and (not\
    \ (= i j))\n                      (not (equal? (first closest-pair) (second closest-pair)))\n\
    \                      (< (abs (- (list-ref numbers i) (list-ref numbers j)))\n\
    \                         (abs (- (first closest-pair) (second closest-pair))))))\n\
    \      (set! closest-pair (list (list-ref numbers i) (list-ref numbers j))))\n\
    \    closest-pair))\n", "  (let ([closest-difference (abs (- (first numbers) (second\
    \ numbers)))])\n    (for/fold ([closest-pair (list (first numbers) (second numbers))])\n\
    \              ([n (in-list (rest (rest numbers)))]\n               #:when (<\
    \ (abs (- (first closest-pair) n)) closest-difference))\n      (values (list (first\
    \ closest-pair) n) (abs (- (first closest-pair) n))))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ((first (car numbers))\n               (second (cadr numbers))\n\
    \               (difference (abs (- first second)))\n               (closest_difference\
    \ (abs (- (car closest_pair) (cadr closest_pair))))\n               (new_closest_pair\
    \ (if (< difference closest_difference)\n                                    (list\
    \ first second)\n                                    closest_pair)))\n       \
    \   (find_closest_elements_helper (cdr numbers) new_closest_pair))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let loop ((numbers numbers)\
    \ (closest (list (car numbers) (cadr numbers))) (diff (abs (- (car numbers) (cadr\
    \ numbers)))))\n    (cond\n      [(null? (cdr numbers)) closest]\n      [(< (abs\
    \ (- (car numbers) (cadr numbers))) diff) (loop (cdr numbers) (list (car numbers)\
    \ (cadr numbers)) (abs (- (car numbers) (cadr numbers))))]\n      [else (loop\
    \ (cdr numbers) closest diff)])))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (first (rest numbers))]\n          \
    \    [diff (abs (- first second))]\n              [closest-diff (abs (- (first\
    \ closest-pair) (second closest-pair)))])\n         (if (< diff closest-diff)\n\
    \             (find_closest_elements_helper (rest numbers) (list first second))\n\
    \             (find_closest_elements_helper (rest numbers) closest-pair)))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest_difference (abs (- (car closest_pair) (cadr\
    \ closest_pair)))])\n          (if (< difference closest_difference)\n       \
    \       (find_closest_elements_helper (cdr numbers) (list first second))\n   \
    \           (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find-closest-elements-helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [current-closest-difference\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< difference\
    \ current-closest-difference)\n              (find-closest-elements-helper (cdr\
    \ numbers) (list first second))\n              (find-closest-elements-helper (cdr\
    \ numbers) closest-pair)))))\n  (find-closest-elements-helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (let loop ([numbers numbers] [min-diff (abs\
    \ (- (car numbers) (cadr numbers)))] [min-pair (list (car numbers) (cadr numbers))])\n\
    \    (cond [(null? (cdr numbers)) min-pair]\n          [(< (abs (- (car numbers)\
    \ (cadr numbers))) min-diff) (loop (cdr numbers) (abs (- (car numbers) (cadr numbers)))\
    \ (list (car numbers) (cadr numbers)))]\n          [else (loop (cdr numbers) min-diff\
    \ min-pair)])))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (null? (cdr numbers))\n        closest_pair\n        (let* ((first (car\
    \ numbers))\n               (second (cadr numbers))\n               (diff (abs\
    \ (- first second)))\n               (closest_diff (abs (- (car closest_pair)\
    \ (cadr closest_pair))))\n               (new_closest_pair (if (< diff closest_diff)\n\
    \                                    (list first second)\n                   \
    \                 closest_pair)))\n          (find_closest_elements_helper (cdr\
    \ numbers) new_closest_pair))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [distance (abs (- first second))]\n               [closest-distance\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< distance\
    \ closest-distance)\n              (find_closest_elements_iter (cdr numbers) (list\
    \ first second))\n              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_iter\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_iter\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_iter numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements-iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [difference (abs (- first second))]\n               [closest-difference\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< difference\
    \ closest-difference)\n              (find_closest_elements-iter (cdr numbers)\
    \ (list first second))\n              (find_closest_elements-iter (cdr numbers)\
    \ closest-pair)))))\n  (find_closest_elements-iter numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (let* ([min-diff (apply min (map (lambda (x y) (abs\
    \ (- x y))) numbers (cdr numbers)))]\n         [min-diff-index (find-index (lambda\
    \ (x) (= x min-diff)) (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n\
    \    (list (list-ref numbers min-diff-index) (list-ref numbers (+ min-diff-index\
    \ 1)))))\n", "  (let loop ((numbers numbers) (min-diff (abs (- (car numbers) (cadr\
    \ numbers)))) (min-pair (list (car numbers) (cadr numbers))))\n    (cond ((null?\
    \ (cdr numbers)) min-pair)\n          ((< (abs (- (car numbers) (cadr numbers)))\
    \ min-diff) (loop (cdr numbers) (abs (- (car numbers) (cadr numbers))) (list (car\
    \ numbers) (cadr numbers))))\n          (else (loop (cdr numbers) min-diff min-pair)))))\n",
  "  (let ([numbers (sort numbers <)])\n    (let loop ([numbers (cdr numbers)]\n \
    \              [closest-pair (list (car numbers) (cadr numbers))]\n          \
    \     [closest-distance (abs (- (car numbers) (cadr numbers)))])\n      (if (null?\
    \ numbers)\n          closest-pair\n          (let ([distance (abs (- (car numbers)\
    \ (cadr numbers)))])\n            (if (< distance closest-distance)\n        \
    \        (loop (cdr numbers) (list (car numbers) (cadr numbers)) distance)\n \
    \               (loop (cdr numbers) closest-pair closest-distance)))))))\n", " \
    \ (define (find_closest_elements-helper numbers closest-pair)\n    (if (null?\
    \ (cdr numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n\
    \               [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest-difference (abs (- (car closest-pair) (cadr\
    \ closest-pair)))]\n               [new-closest-pair (if (< difference closest-difference)\n\
    \                                     (list first second)\n                  \
    \                   closest-pair)])\n          (find_closest_elements-helper (cdr\
    \ numbers) new-closest-pair))))\n  (find_closest_elements-helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([next-pair (list (car numbers) (cadr numbers))]\n            \
    \   [next-diff (abs (- (car next-pair) (cadr next-pair)))]\n               [current-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< next-diff current-diff) next-pair closest-pair)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-closest-pair))))\n  (find_closest_elements_helper numbers\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers smallest_difference smallest_difference_pair)\n    (cond\n      [(empty?\
    \ numbers) smallest_difference_pair]\n      [(empty? (rest numbers)) smallest_difference_pair]\n\
    \      [else\n       (let* ([current_number (first numbers)]\n              [next_number\
    \ (first (rest numbers))]\n              [difference (abs (- current_number next_number))])\n\
    \         (if (< difference smallest_difference)\n             (find_closest_elements_helper\
    \ (rest numbers) difference (list current_number next_number))\n             (find_closest_elements_helper\
    \ (rest numbers) smallest_difference smallest_difference_pair)))]))\n  (find_closest_elements_helper\
    \ numbers (abs (- (first numbers) (first (rest numbers)))) (list (first numbers)\
    \ (first (rest numbers)))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers min-diff min-diff-pair)\n    (if\
    \ (null? numbers)\n        min-diff-pair\n        (let* ([first (car numbers)]\n\
    \               [rest (cdr numbers)]\n               [diff (abs (- first (car\
    \ rest)))])\n          (if (< diff min-diff)\n              (find_closest_elements_helper\
    \ rest diff (list first (car rest)))\n              (find_closest_elements_helper\
    \ rest min-diff min-diff-pair)))))\n  (find_closest_elements_helper numbers (abs\
    \ (- (car numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (for/fold ([min-diff\
    \ (abs (- (car numbers) (cadr numbers)))]\n                             [min-a\
    \ (car numbers)]\n                             [min-b (cadr numbers)])\n     \
    \                ([a (in-list numbers)]\n                      [b (in-list numbers)])\n\
    \                     (if (and (not (= a b))\n                              (<\
    \ (abs (- a b)) min-diff))\n                         (values (abs (- a b)) a b)\n\
    \                         (values min-diff min-a min-b)))])\n    (list (min min-a\
    \ min-b) (max min-a min-b))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n   \
    \     (let* ([first (car numbers)]\n               [second (cadr numbers)]\n \
    \              [diff (abs (- first second))]\n               [closest-so-far-diff\
    \ (abs (- (car closest-so-far) (cadr closest-so-far)))])\n          (if (< diff\
    \ closest-so-far-diff)\n              (find_closest_elements_helper (cdr numbers)\
    \ (list first second))\n              (find_closest_elements_helper (cdr numbers)\
    \ closest-so-far)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (let* ([min-diff (apply min (map (lambda (x y) (abs\
    \ (- x y))) numbers (cdr numbers)))]\n         [min-pair (find (lambda (x y) (=\
    \ (abs (- x y)) min-diff)) numbers (cdr numbers))])\n    (list (apply min min-pair)\
    \ (apply max min-pair))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_pair)\n    (cond\n      [(empty? numbers) closest_pair]\n      [(empty?\
    \ (rest numbers)) closest_pair]\n      [else\n       (let* ([first (first numbers)]\n\
    \              [second (second numbers)]\n              [difference (abs (- first\
    \ second))]\n              [closest_difference (abs (- (first closest_pair) (second\
    \ closest_pair)))]\n              [new_closest_pair (if (< difference closest_difference)\
    \ (list first second) closest_pair)])\n         (find_closest_elements_helper\
    \ (rest (rest numbers)) new_closest_pair))]))\n  (find_closest_elements_helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements-iter\
    \ numbers closest-pair)\n    (cond [(empty? numbers) closest-pair]\n         \
    \ [(empty? (rest numbers)) closest-pair]\n          [else\n           (define\
    \ current-pair (list (first numbers) (second numbers)))\n           (define current-diff\
    \ (abs (- (first current-pair) (second current-pair))))\n           (define closest-diff\
    \ (abs (- (first closest-pair) (second closest-pair))))\n           (if (< current-diff\
    \ closest-diff)\n               (find_closest_elements-iter (rest numbers) current-pair)\n\
    \               (find_closest_elements-iter (rest numbers) closest-pair))]))\n\
    \  (find_closest_elements-iter numbers (list (first numbers) (second numbers))))\n",
  "  (let ([smallest-diff (abs (- (first numbers) (second numbers)))])\n    (for/fold\
    \ ([closest-elements (list (first numbers) (second numbers))])\n             \
    \ ([number (in-list (rest (rest numbers)))])\n      (let ([diff (abs (- (first\
    \ closest-elements) number))])\n        (if (< diff smallest-diff)\n         \
    \   (begin\n              (set! smallest-diff diff)\n              (list (first\
    \ closest-elements) number))\n            closest-elements)))))\n", "  (define\
    \ (find_closest_elements_helper numbers closest_difference)\n    (if (null? (cdr\
    \ numbers))\n        closest_difference\n        (let* ([difference (abs (- (car\
    \ numbers) (cadr numbers)))]\n               [new_closest_difference (if (< difference\
    \ closest_difference)\n                                           (list (car numbers)\
    \ (cadr numbers))\n                                           closest_difference)])\n\
    \          (find_closest_elements_helper (cdr numbers) new_closest_difference))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest_difference (abs (- (car closest_pair) (cadr\
    \ closest_pair)))])\n          (if (< difference closest_difference)\n       \
    \       (find_closest_elements_helper (cdr numbers) (list first second))\n   \
    \           (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let loop ([numbers numbers]\
    \ [closest-elements (list (car numbers) (cadr numbers))])\n    (if (null? (cddr\
    \ numbers))\n        closest-elements\n        (let* ([current-element (car numbers)]\n\
    \               [next-element (cadr numbers)]\n               [current-distance\
    \ (abs (- current-element next-element))]\n               [closest-distance (abs\
    \ (- (car closest-elements) (cadr closest-elements)))])\n          (if (< current-distance\
    \ closest-distance)\n              (loop (cdr numbers) (list current-element next-element))\n\
    \              (loop (cdr numbers) closest-elements))))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([next_pair (list (car numbers) (cadr numbers))]\n            \
    \   [next_distance (abs (- (car next_pair) (cadr next_pair)))]\n             \
    \  [current_distance (abs (- (car closest_pair) (cadr closest_pair)))]\n     \
    \          [new_closest_pair (if (< next_distance current_distance)\n        \
    \                            next_pair\n                                    closest_pair)])\n\
    \          (find_closest_elements_helper (cdr numbers) new_closest_pair))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (cond\n    \
    \  [(empty? numbers) closest_pair]\n      [(empty? (rest numbers)) closest_pair]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (second\
    \ numbers)]\n              [difference (abs (- first second))]\n             \
    \ [closest_difference (abs (- (first closest_pair) (second closest_pair)))]\n\
    \              [new_closest_pair (if (< difference closest_difference) (list first\
    \ second) closest_pair)])\n         (find_closest_elements_helper (rest (rest\
    \ numbers)) new_closest_pair))]))\n  (find_closest_elements_helper numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let ([next-pair (find_closest_pair (car numbers) (cadr numbers))])\n\
    \          (if (< (abs (- (car next-pair) (cadr next-pair)))\n               \
    \  (abs (- (car closest-pair) (cadr closest-pair))))\n              (find_closest_elements_helper\
    \ (cdr numbers) next-pair)\n              (find_closest_elements_helper (cdr numbers)\
    \ closest-pair)))))\n  (find_closest_elements_helper numbers (find_closest_pair\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (for/min ([n1 (in-list\
    \ numbers)]\n                            [n2 (in-list numbers)])\n           \
    \         (abs (- n1 n2)))])\n    (for/list ([n1 (in-list numbers)]\n        \
    \       [n2 (in-list numbers)])\n      (when (= (abs (- n1 n2)) min-diff)\n  \
    \      (list n1 n2)))))\n", "  (define (find_closest_elements-iter numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([current-pair\
    \ (list (car numbers) (cadr numbers))]\n               [current-diff (abs (- (car\
    \ current-pair) (cadr current-pair)))]\n               [closest-diff (abs (- (car\
    \ closest-pair) (cadr closest-pair)))])\n          (if (< current-diff closest-diff)\n\
    \              (find_closest_elements-iter (cdr numbers) current-pair)\n     \
    \         (find_closest_elements-iter (cdr numbers) closest-pair)))))\n  (find_closest_elements-iter\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([current_pair (list (car numbers) (cadr numbers))]\n         \
    \      [current_distance (abs (- (car current_pair) (cadr current_pair)))]\n \
    \              [closest_distance (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< current_distance closest_distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) current_pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest)\n    (if (null? (cdr numbers))\n\
    \        closest\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest-diff (abs (- (car closest) (cadr closest)))])\n          (if (< diff\
    \ closest-diff)\n              (find_closest_elements_helper (cdr numbers) (list\
    \ first second))\n              (find_closest_elements_helper (cdr numbers) closest)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let loop ((numbers numbers) (closest-pair (list (car numbers) (cadr numbers))))\n\
    \    (if (null? (cddr numbers))\n        closest-pair\n        (let ((next-pair\
    \ (list (car numbers) (cadr numbers))))\n          (if (< (abs (- (car next-pair)\
    \ (cadr next-pair)))\n                 (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (loop (cdr numbers) next-pair)\n              (loop (cdr numbers)\
    \ closest-pair))))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (cond\n      [(empty? numbers) closest-pair]\n      [(empty? (rest numbers))\
    \ closest-pair]\n      [else\n       (define (distance a b)\n         (abs (-\
    \ a b)))\n       (define (closer-pair? a b)\n         (let ([a-distance (distance\
    \ (first a) (second a))]\n               [b-distance (distance (first b) (second\
    \ b))])\n           (or (< a-distance b-distance)\n               (and (= a-distance\
    \ b-distance)\n                    (and (< (first a) (first b))\n            \
    \             (< (second a) (second b)))))))\n       (define (closer-pair a b)\n\
    \         (if (closer-pair? a b)\n             a\n             b))\n       (define\
    \ (pair-from-numbers a b)\n         (if (< a b)\n             (list a b)\n   \
    \          (list b a)))\n       (find_closest_elements_helper (rest numbers)\n\
    \                                     (closer-pair closest-pair\n            \
    \                                      (pair-from-numbers (first numbers)\n  \
    \                                                                   (second numbers))))]))\n\
    \  (find_closest_elements_helper (rest numbers)\n                            \
    \    (list (first numbers)\n                                      (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest)\n    (if (null? (cdr numbers))\n\
    \        closest\n        (let* ([n1 (car numbers)]\n               [n2 (cadr\
    \ numbers)]\n               [diff (abs (- n1 n2))]\n               [closest-diff\
    \ (abs (- (car closest) (cadr closest)))]\n               [new-closest (if (<\
    \ diff closest-diff) (list n1 n2) closest)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-closest))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (helper numbers closest-so-far)\n\
    \    (if (null? (cdr numbers))\n        closest-so-far\n        (let* ([n1 (car\
    \ numbers)]\n               [n2 (cadr numbers)]\n               [diff (abs (-\
    \ n1 n2))]\n               [closest-so-far (if (< diff (abs (- (car closest-so-far)\
    \ (cadr closest-so-far))))\n                                   (list n1 n2)\n\
    \                                   closest-so-far)])\n          (helper (cdr\
    \ numbers) closest-so-far))))\n  (helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (cond [(empty?\
    \ numbers) closest-pair]\n          [(empty? (rest numbers)) closest-pair]\n \
    \         [else\n           (define first (first numbers))\n           (define\
    \ second (first (rest numbers)))\n           (define diff (abs (- first second)))\n\
    \           (define closest-diff (abs (- (first closest-pair) (second closest-pair))))\n\
    \           (if (< diff closest-diff)\n               (find_closest_elements_iter\
    \ (rest numbers) (list first second))\n               (find_closest_elements_iter\
    \ (rest numbers) closest-pair))]))\n  (find_closest_elements_iter numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest_diff (abs\
    \ (- (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest_pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([current-pair (list (car numbers)\
    \ (cadr numbers))]\n               [current-diff (abs (- (car current-pair) (cadr\
    \ current-pair)))]\n               [closest-diff (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< current-diff closest-diff)\n           \
    \   (find_closest_elements_helper (cdr numbers) current-pair)\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (cdr numbers)))])\n    (list (apply min (filter\
    \ (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n      \
    \    (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (define (helper numbers closest-pair)\n    (cond\n     \
    \ [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (define current-pair (list (first numbers) (second numbers)))\n\
    \       (define current-distance (abs (- (first current-pair) (second current-pair))))\n\
    \       (define closest-distance (abs (- (first closest-pair) (second closest-pair))))\n\
    \       (if (< current-distance closest-distance)\n           (helper (rest numbers)\
    \ current-pair)\n           (helper (rest numbers) closest-pair))]))\n  (helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-so-far)\n    (cond [(empty? numbers) closest-so-far]\n     \
    \     [(empty? (rest numbers)) closest-so-far]\n          [else\n           (define\
    \ first-number (first numbers))\n           (define second-number (second numbers))\n\
    \           (define distance (abs (- first-number second-number)))\n         \
    \  (define closest-distance (abs (- (first closest-so-far) (second closest-so-far))))\n\
    \           (if (< distance closest-distance)\n               (find_closest_elements_helper\
    \ (rest numbers) (list first-number second-number))\n               (find_closest_elements_helper\
    \ (rest numbers) closest-so-far))]))\n  (find_closest_elements_helper numbers\
    \ (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (let ([new-pair\
    \ (list (first numbers) (second numbers))])\n         (if (< (abs (- (first new-pair)\
    \ (second new-pair)))\n                (abs (- (first closest-pair) (second closest-pair))))\n\
    \             (find_closest_elements_helper (rest numbers) new-pair)\n       \
    \      (find_closest_elements_helper (rest numbers) closest-pair)))]))\n  (find_closest_elements_helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_elements)\n    (cond\n      [(empty? numbers) closest_elements]\n\
    \      [(empty? (rest numbers)) closest_elements]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (second numbers)]\n              [first_closest\
    \ (first closest_elements)]\n              [second_closest (second closest_elements)]\n\
    \              [difference (abs (- first second))]\n              [closest_difference\
    \ (abs (- first_closest second_closest))])\n         (if (< difference closest_difference)\n\
    \             (find_closest_elements_helper (rest numbers) (list first second))\n\
    \             (find_closest_elements_helper (rest numbers) closest_elements)))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (define current-pair (list (first numbers) (second numbers)))\n\
    \       (define current-distance (abs (- (first current-pair) (second current-pair))))\n\
    \       (define closest-distance (abs (- (first closest-pair) (second closest-pair))))\n\
    \       (if (< current-distance closest-distance)\n           (find_closest_elements_helper\
    \ (rest numbers) current-pair)\n           (find_closest_elements_helper (rest\
    \ numbers) closest-pair))]))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ min-diff min-diff-pair)\n    (if (null? numbers)\n        min-diff-pair\n  \
    \      (let* ([current-pair (list (car numbers) (cadr numbers))]\n           \
    \    [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n       \
    \        [new-min-diff (if (< current-diff min-diff) current-diff min-diff)]\n\
    \               [new-min-diff-pair (if (= new-min-diff current-diff) current-pair\
    \ min-diff-pair)])\n          (find_closest_elements_helper (cdr numbers) new-min-diff\
    \ new-min-diff-pair))))\n  (find_closest_elements_helper numbers (abs (- (car\
    \ numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n", "  (define\
    \ (helper numbers min-diff min-pair)\n    (cond\n      [(empty? numbers) min-pair]\n\
    \      [(empty? (rest numbers)) min-pair]\n      [else\n       (define diff (abs\
    \ (- (first numbers) (second numbers))))\n       (if (< diff min-diff)\n     \
    \      (helper (rest numbers) diff (list (first numbers) (second numbers)))\n\
    \           (helper (rest numbers) min-diff min-pair))]))\n  (helper numbers (abs\
    \ (- (first numbers) (second numbers))) (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest-difference (abs (- (car closest-pair) (cadr\
    \ closest-pair)))]\n               [new-closest-pair (if (< difference closest-difference)\n\
    \                                     (list first second)\n                  \
    \                   closest-pair)])\n          (find_closest_elements_iter (cdr\
    \ numbers) new-closest-pair))))\n  (find_closest_elements_iter numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (let ([closest-diff (abs (- (first numbers)\
    \ (second numbers)))])\n    (let loop ([numbers (rest numbers)])\n      (if (null?\
    \ numbers)\n          (list (first numbers) (second numbers))\n          (let\
    \ ([diff (abs (- (first numbers) (second numbers)))])\n            (if (< diff\
    \ closest-diff)\n                (loop (rest numbers))\n                (list\
    \ (first numbers) (second numbers))))))))\n", "  (define (helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([current-pair\
    \ (list (car numbers) (cadr numbers))]\n               [current-diff (abs (- (car\
    \ current-pair) (cadr current-pair)))]\n               [closest-diff (abs (- (car\
    \ closest-pair) (cadr closest-pair)))])\n          (if (< current-diff closest-diff)\n\
    \              (helper (cdr numbers) current-pair)\n              (helper (cdr\
    \ numbers) closest-pair)))))\n  (helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (cond [(empty?\
    \ numbers) closest-pair]\n          [(empty? (rest numbers)) closest-pair]\n \
    \         [else (let* ([n1 (first numbers)]\n                       [n2 (first\
    \ (rest numbers))]\n                       [diff (abs (- n1 n2))]\n          \
    \             [closest-diff (abs (- (first closest-pair) (second closest-pair)))])\n\
    \                  (if (&lt; diff closest-diff)\n                      (find_closest_elements_iter\
    \ (rest numbers) (list n1 n2))\n                      (find_closest_elements_iter\
    \ (rest numbers) closest-pair)))]))\n  (find_closest_elements_iter numbers (list\
    \ (first numbers) (second numbers))))\n</code>\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([next-pair (list (car numbers) (cadr numbers))]\n            \
    \   [next-diff (abs (- (car next-pair) (cadr next-pair)))]\n               [current-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< next-diff current-diff) next-pair closest-pair)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-closest-pair))))\n  (find_closest_elements_helper numbers\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest_difference\
    \ (abs (- (car closest_pair) (cadr closest_pair)))]\n               [new_closest_pair\
    \ (if (< difference closest_difference)\n                                    (list\
    \ first second)\n                                    closest_pair)])\n       \
    \   (find_closest_elements_helper (cdr numbers) new_closest_pair))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let ([min-diff (abs (-\
    \ (first numbers) (second numbers)))])\n    (for/fold ([closest-pair (list (first\
    \ numbers) (second numbers))])\n              ([n (in-list (rest (rest numbers)))])\n\
    \      (let ([diff (abs (- (first closest-pair) n))])\n        (if (< diff min-diff)\n\
    \            (values (list (first closest-pair) n) diff)\n            (values\
    \ closest-pair min-diff))))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n      [(empty?\
    \ (rest numbers)) closest-pair]\n      [else\n       (define current-pair (list\
    \ (first numbers) (second numbers)))\n       (define current-distance (abs (-\
    \ (first current-pair) (second current-pair))))\n       (define closest-distance\
    \ (abs (- (first closest-pair) (second closest-pair))))\n       (if (< current-distance\
    \ closest-distance)\n           (find_closest_elements_helper (rest numbers) current-pair)\n\
    \           (find_closest_elements_helper (rest numbers) closest-pair))]))\n \
    \ (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers min-difference min-difference-pair)\n\
    \    (if (null? numbers)\n        min-difference-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [difference\
    \ (abs (- first second))])\n          (if (< difference min-difference)\n    \
    \          (find_closest_elements_helper (cdr numbers) difference (list first\
    \ second))\n              (find_closest_elements_helper (cdr numbers) min-difference\
    \ min-difference-pair)))))\n  (find_closest_elements_helper numbers (abs (- (car\
    \ numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n", "  (let\
    \ ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))])\n\
    \    (list (apply min (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers))\n          (apply max (filter (lambda (x) (= (abs (- x (apply min\
    \ numbers))) min-diff)) numbers)))))\n", "  (define (find-closest-elements-iter\
    \ numbers closest-elements)\n    (if (null? numbers)\n        closest-elements\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-elements) (cadr closest-elements)))]\n               [new-closest-elements\
    \ (if (< diff closest-diff)\n                                         (list first\
    \ second)\n                                         closest-elements)])\n    \
    \      (find-closest-elements-iter (cdr numbers) new-closest-elements))))\n  (find-closest-elements-iter\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let loop ((numbers numbers)\
    \ (min-diff (abs (- (car numbers) (cadr numbers)))) (min-pair (list (car numbers)\
    \ (cadr numbers))))\n    (cond ((null? (cdr numbers)) min-pair)\n          ((<\
    \ (abs (- (car numbers) (cadr numbers))) min-diff) (loop (cdr numbers) (abs (-\
    \ (car numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n     \
    \     (else (loop (cdr numbers) min-diff min-pair)))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([next_pair (list (car numbers) (cadr numbers))]\n            \
    \   [next_diff (abs (- (car next_pair) (cadr next_pair)))]\n               [curr_diff\
    \ (abs (- (car closest_pair) (cadr closest_pair)))]\n               [new_closest_pair\
    \ (if (< next_diff curr_diff) next_pair closest_pair)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new_closest_pair))))\n  (find_closest_elements_helper numbers\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (define current-pair\
    \ (list (first numbers) (second numbers)))\n       (define current-distance (abs\
    \ (- (first current-pair) (second current-pair))))\n       (define closest-distance\
    \ (abs (- (first closest-pair) (second closest-pair))))\n       (if (< current-distance\
    \ closest-distance)\n           (find_closest_elements_helper (rest numbers) current-pair)\n\
    \           (find_closest_elements_helper (rest numbers) closest-pair))]))\n \
    \ (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (define current-pair (list (first numbers) (second numbers)))\n\
    \       (define current-distance (abs (- (first current-pair) (second current-pair))))\n\
    \       (define closest-distance (abs (- (first closest-pair) (second closest-pair))))\n\
    \       (if (< current-distance closest-distance)\n           (find_closest_elements_helper\
    \ (rest numbers) current-pair)\n           (find_closest_elements_helper (rest\
    \ numbers) closest-pair))]))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n   \
    \     (let* ([first (car numbers)]\n               [second (cadr numbers)]\n \
    \              [difference (abs (- first second))]\n               [closest-so-far-difference\
    \ (abs (- (car closest-so-far) (cadr closest-so-far)))])\n          (if (< difference\
    \ closest-so-far-difference)\n              (find_closest_elements_helper (cdr\
    \ numbers) (list first second))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (rest numbers)))])\n    (list (apply min (filter\
    \ (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n      \
    \    (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (cond\n      [(empty? numbers) (reverse closest_pair)]\n      [(empty? (rest\
    \ numbers)) (reverse closest_pair)]\n      [else\n       (define current_pair\
    \ (list (first numbers) (second numbers)))\n       (define current_diff (abs (-\
    \ (first current_pair) (second current_pair))))\n       (define closest_diff (abs\
    \ (- (first closest_pair) (second closest_pair))))\n       (if (< current_diff\
    \ closest_diff)\n           (find_closest_elements_helper (rest numbers) current_pair)\n\
    \           (find_closest_elements_helper (rest numbers) closest_pair))]))\n \
    \ (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (let ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n\
    \    (list (apply min (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers))\n          (apply max (filter (lambda (x) (= (abs (- x (apply min\
    \ numbers))) min-diff)) numbers)))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest_diff (abs\
    \ (- (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest_pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond [(empty?\
    \ numbers) closest-pair]\n          [(empty? (rest numbers)) closest-pair]\n \
    \         [else\n           (define current-pair (list (first numbers) (second\
    \ numbers)))\n           (define current-diff (abs (- (first current-pair) (second\
    \ current-pair))))\n           (define closest-diff (abs (- (first closest-pair)\
    \ (second closest-pair))))\n           (if (< current-diff closest-diff)\n   \
    \            (find_closest_elements_helper (rest numbers) current-pair)\n    \
    \           (find_closest_elements_helper (rest numbers) closest-pair))]))\n \
    \ (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (first\
    \ (rest numbers))]\n              [diff (abs (- first second))]\n            \
    \  [closest-diff (abs (- (first closest-pair) (second closest-pair)))])\n    \
    \     (if (< diff closest-diff)\n             (find_closest_elements_helper (rest\
    \ numbers) (list first second))\n             (find_closest_elements_helper (rest\
    \ numbers) closest-pair)))]))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest)\n    (if (null? (cdr numbers))\n        closest\n        (let* ((first\
    \ (car numbers))\n               (second (cadr numbers))\n               (diff\
    \ (abs (- first second)))\n               (closest-diff (abs (- (car closest)\
    \ (cadr closest)))))\n          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (let ([smallest-difference (abs (- (first\
    \ numbers) (second numbers)))])\n    (for/fold ([closest-elements (list (first\
    \ numbers) (second numbers))])\n              ([number (in-list (cddr numbers))])\n\
    \      (let ([difference (abs (- (first closest-elements) number))])\n       \
    \ (if (< difference smallest-difference)\n            (begin\n              (set!\
    \ smallest-difference difference)\n              (list (first closest-elements)\
    \ number))\n            closest-elements)))))\n", "  (define (abs x)\n    (if\
    \ (< x 0)\n        (- x)\n        x))\n  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n     \
    \          [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< current-diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ min-diff min-pair)\n    (cond\n      [(empty? numbers) min-pair]\n      [(empty?\
    \ (rest numbers)) min-pair]\n      [else\n       (let* ([diff (abs (- (first numbers)\
    \ (second numbers)))]\n              [new-min-pair (if (< diff min-diff)\n   \
    \                             (list (first numbers) (second numbers))\n      \
    \                          min-pair)])\n         (find_closest_elements_helper\
    \ (rest numbers)\n                                       (if (< diff min-diff)\
    \ diff min-diff)\n                                       new-min-pair))]))\n \
    \ (find_closest_elements_helper numbers (abs (- (first numbers) (second numbers)))\n\
    \                                (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ((first (car numbers))\n    \
    \           (second (cadr numbers))\n               (difference (abs (- first\
    \ second)))\n               (closest_difference (abs (- (car closest_pair) (cadr\
    \ closest_pair))))\n               (new_closest_pair (if (< difference closest_difference)\n\
    \                                    (list first second)\n                   \
    \                 closest_pair)))\n          (find_closest_elements_helper (cdr\
    \ numbers) new_closest_pair))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-so-far)\n    (if (null? numbers)\n        closest-so-far\n \
    \       (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest-so-far-difference\
    \ (abs (- (car closest-so-far) (cadr closest-so-far)))])\n          (if (< difference\
    \ closest-so-far-difference)\n              (find_closest_elements_helper (cdr\
    \ numbers) (list first second))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find-closest-elements-helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (define current-pair\
    \ (list (first numbers) (second numbers)))\n       (define current-difference\
    \ (abs (- (first current-pair) (second current-pair))))\n       (define closest-difference\
    \ (abs (- (first closest-pair) (second closest-pair))))\n       (if (< current-difference\
    \ closest-difference)\n           (find-closest-elements-helper (rest numbers)\
    \ current-pair)\n           (find-closest-elements-helper (rest numbers) closest-pair))]))\n\
    \  (find-closest-elements-helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ((first_number (car numbers))\n\
    \               (second_number (cadr numbers))\n               (difference (abs\
    \ (- first_number second_number)))\n               (closest_pair_difference (abs\
    \ (- (car closest_pair) (cadr closest_pair))))\n               (new_closest_pair\
    \ (if (< difference closest_pair_difference)\n                               \
    \      (list first_number second_number)\n                                   \
    \  closest_pair)))\n          (find_closest_elements_helper (cdr numbers) new_closest_pair))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (let ([first (first numbers)]\n             [second (second\
    \ numbers)]\n             [diff (abs (- first second))])\n         (if (< diff\
    \ (abs (- (first closest-pair) (second closest-pair))))\n             (find_closest_elements_helper\
    \ (rest numbers) (list first second))\n             (find_closest_elements_helper\
    \ (rest numbers) closest-pair)))]))\n  (find_closest_elements_helper numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest)\n    (if (null? (cdr numbers))\n        closest\n        (let*\
    \ ([first (car numbers)]\n               [second (cadr numbers)]\n           \
    \    [diff (abs (- first second))]\n               [closest-diff (abs (- (car\
    \ closest) (cadr closest)))]\n               [new-closest (if (< diff closest-diff)\n\
    \                                (list first second)\n                       \
    \         closest)])\n          (find_closest_elements_iter (cdr numbers) new-closest))))\n\
    \  (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (cond\n    \
    \  [(empty? numbers) closest_pair]\n      [(empty? (rest numbers)) closest_pair]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (second\
    \ numbers)]\n              [diff (abs (- first second))]\n              [closest_diff\
    \ (abs (- (first closest_pair) (second closest_pair)))]\n              [new_closest_pair\
    \ (if (< diff closest_diff) (list first second) closest_pair)])\n         (find_closest_elements_helper\
    \ (rest (rest numbers)) new_closest_pair))]))\n  (find_closest_elements_helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers min-difference min-difference-pair)\n    (if (null? numbers)\n     \
    \   min-difference-pair\n        (let* ([current-number (car numbers)]\n     \
    \          [current-difference (abs (- (cadr numbers) current-number))])\n   \
    \       (if (< current-difference min-difference)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-difference (list current-number (cadr numbers)))\n   \
    \           (find_closest_elements_helper (cdr numbers) min-difference min-difference-pair)))))\n\
    \  (find_closest_elements_helper numbers (abs (- (cadr numbers) (car numbers)))\
    \ (list (car numbers) (cadr numbers))))\n", "  (let ([closest-pair (list (first\
    \ numbers) (second numbers))])\n    (for ([i (in-range (add1 (length numbers)))]\n\
    \          [j (in-range i)])\n      (when (< (abs (- (list-ref numbers i) (list-ref\
    \ numbers j)))\n               (abs (- (first closest-pair) (second closest-pair))))\n\
    \        (set! closest-pair (list (list-ref numbers j) (list-ref numbers i)))))\n\
    \    closest-pair))\n", "  (define (find_closest_elements_helper numbers min-diff\
    \ min-diff-pair)\n    (if (null? numbers)\n        min-diff-pair\n        (let*\
    \ ([first (car numbers)]\n               [second (cadr numbers)]\n           \
    \    [diff (abs (- first second))])\n          (if (< diff min-diff)\n       \
    \       (find_closest_elements_helper (cdr numbers) diff (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) min-diff min-diff-pair)))))\n\
    \  (find_closest_elements_helper numbers (abs (- (car numbers) (cadr numbers)))\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ((current_pair (list (car numbers) (cadr numbers)))\n         \
    \      (current_difference (abs (- (car current_pair) (cadr current_pair))))\n\
    \               (closest_difference (abs (- (car closest_pair) (cadr closest_pair)))))\n\
    \          (if (< current_difference closest_difference)\n              (find_closest_elements_helper\
    \ (cdr numbers) current_pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ min_diff min_diff_pair)\n    (if (null? (cdr numbers))\n        min_diff_pair\n\
    \        (let* ([diff (abs (- (car numbers) (cadr numbers)))]\n              \
    \ [new_min_diff (if (< diff min_diff) diff min_diff)]\n               [new_min_diff_pair\
    \ (if (= diff new_min_diff) (list (car numbers) (cadr numbers)) min_diff_pair)])\n\
    \          (find_closest_elements_helper (cdr numbers) new_min_diff new_min_diff_pair))))\n\
    \  (find_closest_elements_helper numbers (abs (- (car numbers) (cadr numbers)))\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements-helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (let ([first (first numbers)]\n             [second (second\
    \ numbers)]\n             [diff (abs (- first second))])\n         (if (< diff\
    \ (abs (- (first closest-pair) (second closest-pair))))\n             (find_closest_elements-helper\
    \ (rest numbers) (list first second))\n             (find_closest_elements-helper\
    \ (rest numbers) closest-pair)))]))\n  (find_closest_elements-helper numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements-helper\
    \ numbers closest-pair)\n    (cond [(empty? numbers) closest-pair]\n         \
    \ [(empty? (rest numbers)) closest-pair]\n          [else (let* ([first (first\
    \ numbers)]\n                       [second (first (rest numbers))]\n        \
    \               [diff (abs (- first second))]\n                       [closest-pair-diff\
    \ (abs (- (first closest-pair) (second closest-pair)))]\n                    \
    \   [new-closest-pair (if (< diff closest-pair-diff) (list first second) closest-pair)])\n\
    \                  (find_closest_elements-helper (rest numbers) new-closest-pair))]))\n\
    \  (find_closest_elements-helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([next-pair (list (car numbers)\
    \ (cadr numbers))]\n               [next-distance (abs (- (car next-pair) (cadr\
    \ next-pair)))]\n               [closest-distance (abs (- (car closest-pair) (cadr\
    \ closest-pair)))]\n               [new-closest-pair (if (< next-distance closest-distance)\n\
    \                                     next-pair\n                            \
    \         closest-pair)])\n          (find_closest_elements_helper (cdr numbers)\
    \ new-closest-pair))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (cond [(empty? numbers) closest_pair]\n          [(empty? (rest numbers))\
    \ closest_pair]\n          [else (let* ([first (first numbers)]\n            \
    \           [second (first (rest numbers))]\n                       [diff (abs\
    \ (- first second))]\n                       [closest_diff (abs (- (first closest_pair)\
    \ (second closest_pair)))])\n                  (if (< diff closest_diff)\n   \
    \                   (find_closest_elements_helper (rest numbers) (list first second))\n\
    \                      (find_closest_elements_helper (rest numbers) closest_pair)))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest_elements)\n    (if (null?\
    \ numbers)\n        closest_elements\n        (let* ([current_number (car numbers)]\n\
    \               [next_number (cadr numbers)]\n               [closest_difference\
    \ (abs (- (car closest_elements) (cadr closest_elements)))]\n               [current_difference\
    \ (abs (- current_number next_number))])\n          (if (< current_difference\
    \ closest_difference)\n              (find_closest_elements_iter (cdr numbers)\
    \ (list current_number next_number))\n              (find_closest_elements_iter\
    \ (cdr numbers) closest_elements)))))\n  (find_closest_elements_iter numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([current-pair (list (car numbers) (cadr numbers))]\n               [current-diff\
    \ (abs (- (car current-pair) (cadr current-pair)))]\n               [closest-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< current-diff\
    \ closest-diff)\n              (find_closest_elements_iter (cdr numbers) current-pair)\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_iter\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_iter\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_iter numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n     \
    \          [closest-diff (abs (- (car closest-so-far) (cadr closest-so-far)))])\n\
    \          (if (< current-diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find-closest-elements-helper\
    \ numbers closest-difference closest-pair)\n    (if (null? numbers)\n        closest-pair\n\
    \        (let* ([current-number (car numbers)]\n               [current-difference\
    \ (abs (- current-number (cadr numbers)))]\n               [new-closest-pair (if\
    \ (< current-difference closest-difference)\n                                \
    \     (list current-number (cadr numbers))\n                                 \
    \    closest-pair)])\n          (find-closest-elements-helper (cdr numbers)\n\
    \                                        (if (< current-difference closest-difference)\n\
    \                                            current-difference\n            \
    \                                closest-difference)\n                       \
    \                 new-closest-pair))))\n  (find-closest-elements-helper numbers\
    \ (abs (- (car numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-so-far)\n    (cond\n  \
    \    [(null? numbers) closest-so-far]\n      [(null? (cdr numbers)) closest-so-far]\n\
    \      [else\n       (let ([closest-so-far (if (< (abs (- (car numbers) (cadr\
    \ numbers))) (abs (- (car closest-so-far) (cadr closest-so-far))))\n         \
    \                        (list (car numbers) (cadr numbers))\n               \
    \                  closest-so-far)])\n         (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far))]))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (let loop ((numbers numbers) (closest-pair (list (car numbers) (cadr numbers))))\n\
    \    (if (null? (cddr numbers))\n        closest-pair\n        (let ((new-pair\
    \ (list (car numbers) (cadr numbers))))\n          (if (< (abs (- (car new-pair)\
    \ (cadr new-pair)))\n                 (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (loop (cdr numbers) new-pair)\n              (loop (cdr numbers)\
    \ closest-pair))))))\n", "  (define (find-closest-elements-helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let ([current-pair\
    \ (list (car numbers) (cadr numbers))])\n          (if (< (abs (- (car current-pair)\
    \ (cadr current-pair)))\n                 (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (find-closest-elements-helper (cdr numbers) current-pair)\n   \
    \           (find-closest-elements-helper (cdr numbers) closest-pair)))))\n  (find-closest-elements-helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (define first\
    \ (first numbers))\n       (define second (second numbers))\n       (define distance\
    \ (abs (- first second)))\n       (define closest-distance (abs (- (first closest-pair)\
    \ (second closest-pair))))\n       (if (< distance closest-distance)\n       \
    \    (find_closest_elements_helper (rest numbers) (list first second))\n     \
    \      (find_closest_elements_helper (rest numbers) closest-pair))]))\n  (find_closest_elements_helper\
    \ numbers (list (first numbers) (second numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
