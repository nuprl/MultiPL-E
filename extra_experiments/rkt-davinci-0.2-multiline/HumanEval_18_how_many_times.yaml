name: HumanEval_18_how_many_times
language: rkt
prompt: "#lang racket\n\n#| Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n>>> (how_many_times \"\" \"a\")\n\
  0\n>>> (how_many_times \"aaa\" \"a\")\n3\n>>> (how_many_times \"aaaa\" \"aa\")\n\
  3|#\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (let loop ([i 0] [count 0])\n    (cond [(= i (string-length string))\
    \ count]\n          [(string-contains string substring i)\n           (loop (+\
    \ i 1) (+ count 1))]\n          [else (loop (+ i 1) count)])))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(string-contains string substring)\n\
    \           (how_many_times-iter (substring string 1) substring (+ count 1))]\n\
    \          [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (find-substring string\
    \ substring)\n    (cond ((string-length string) 0)\n          ((string=? (substring\
    \ string 0 (string-length substring)) substring)\n           (+ 1 (find-substring\
    \ (substring string 1) substring)))\n          (else (find-substring (substring\
    \ string 1) substring))))\n  (find-substring string substring))\n", "  (define\
    \ (helper string substring counter)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 counter))\n        counter))\n  (helper string substring 0))\n", "  (define\
    \ (iter string substring count)\n    (cond [(empty? string) count]\n         \
    \ [(empty? substring) count]\n          [(and (equal? (first string) (first substring))\n\
    \                (equal? (rest string) (rest substring)))\n           (iter (rest\
    \ string) substring (+ count 1))]\n          [(equal? (first string) (first substring))\n\
    \           (iter (rest string) (rest substring) count)]\n          [else (iter\
    \ (rest string) substring count)]))\n  (iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string-contains string substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string-contains string substring)\n  \
    \     (how_many_times-iter (substring string 1) substring (+ count 1))]\n    \
    \  [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (if (empty? string)\n\
    \      0\n      (if (string-contains string substring)\n          (+ 1 (how_many_times\
    \ (substring string 1) substring))\n          0)))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string-contains string substring)\n\
    \       (how_many_times-iter (string-drop string 1) substring (+ count 1))]\n\
    \      [else\n       (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string (string-length substring)) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(string-prefix? substring string)\n           (how_many_times-iter\
    \ (substring string (string-length substring)) substring (+ count 1))]\n     \
    \     [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (let loop ([string string] [substring substring]\
    \ [count 0])\n    (cond [(empty? string) count]\n          [(empty? substring)\
    \ count]\n          [(and (not (empty? substring)) (not (empty? string)) (equal?\
    \ (first string) (first substring)))\n           (loop (rest string) (rest substring)\
    \ (+ count 1))]\n          [else (loop (rest string) substring count)])))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(string=?\
    \ string substring) (+ count 1)]\n      [(string=? string \"\") count]\n     \
    \ [(string=? substring \"\") count]\n      [else (how_many_times-iter (substring\
    \ string 1) substring (if (string=? (substring string 0 (string-length substring))\
    \ substring) (+ count 1) count))]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring))\n       (how_many_times-iter (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(equal? (first string) (first substring))\n       (helper (rest\
    \ string) (rest substring) (add1 count))]\n      [else (helper (rest string) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(equal?\
    \ (first string) (first substring))\n       (how_many_times-iter (rest string)\
    \ (rest substring) (+ count 1))]\n      [else (how_many_times-iter (rest string)\
    \ substring count)]))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string (+ (string-length\
    \ substring) 1)) substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (helper string substring count)\n    (if (string-contains\
    \ string substring)\n        (helper (substring string (+ 1 (string-index string\
    \ substring))) substring (+ 1 count))\n        count))\n  (helper string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(equal? (first string) (first substring))\n           (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (add1 (string-index string substring))) substring\
    \ (add1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(equal? (first string) (first substring))\n\
    \       (helper (rest string) (rest substring) (+ count 1))]\n      [else (helper\
    \ (rest string) substring count)]))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string-contains string substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (count-substring string substring)\n    (define (count-substring-iter\
    \ string substring count)\n      (if (string-contains string substring)\n    \
    \      (count-substring-iter (substring string 1) substring (+ count 1))\n   \
    \       count))\n    (count-substring-iter string substring 0))\n  (count-substring\
    \ string substring))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(and\
    \ (equal? (first string) (first substring))\n            (equal? (rest string)\
    \ (rest substring)))\n       (helper (rest string) substring (+ count 1))]\n \
    \     [(equal? (first string) (first substring))\n       (helper (rest string)\
    \ (rest substring) count)]\n      [else (helper (rest string) substring count)]))\n\
    \  (helper string substring 0))\n", "  (if (string-contains string substring)\n\
    \      (+ 1 (how_many_times (substring string (+ 1 (string-index string substring)))\
    \ substring))\n      0))\n", "  (define (how_many_times-iter string substring\
    \ count)\n    (if (string-contains string substring)\n        (how_many_times-iter\
    \ (substring string (+ 1 (string-index string substring))) substring (+ 1 count))\n\
    \        count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (first string) (first substring))\n    \
    \   (how_many_times-iter (rest string) (rest substring) (add1 count))]\n     \
    \ [else (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(equal?\
    \ (first string) (first substring))\n       (helper (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (helper (rest string) substring count)]))\n  (helper\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(string-contains string substring)\n         \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))]\n     \
    \     [else (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(string-prefix? substring string) (helper (substring string 1)\
    \ substring (+ count 1))]\n      [else (helper (substring string 1) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond\n      [(string=? string \"\") count]\n      [(string=? substring\
    \ \"\") count]\n      [(string-contains string substring)\n       (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))]\n    \
    \  [else count]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index string substring))) substring))\n\
    \      0))\n", "  (let loop ([string string] [substring substring] [count 0])\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(equal? (first string) (first substring))\n           (loop (rest string)\
    \ (rest substring) (+ count 1))]\n          [else (loop (rest string) substring\
    \ count)])))\n", "  (define (how_many_times-iter string substring count)\n   \
    \ (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ (string-length substring) 1)) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(and (equal? (first string) (first substring))\n            (equal?\
    \ (rest string) (rest substring)))\n       (helper (rest string) substring (+\
    \ count 1))]\n      [(equal? (first string) (first substring))\n       (helper\
    \ (rest string) (rest substring) count)]\n      [else (helper (rest string) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (let loop ([string string]\
    \ [substring substring] [count 0])\n    (cond [(empty? string) count]\n      \
    \    [(empty? substring) count]\n          [(string-prefix? substring string)\n\
    \           (loop (substring string 1) substring (+ count 1))]\n          [else\
    \ (loop (substring string 1) substring count)])))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(and (not (empty? string)) (not (empty? substring))\
    \ (equal? (first string) (first substring)))\n       (how_many_times-iter (rest\
    \ string) (rest substring) (add1 count))]\n      [else (how_many_times-iter (rest\
    \ string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond [(empty?\
    \ string) count]\n          [(string-contains string substring)\n           (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n          [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(eq?\
    \ (first string) (first substring))\n       (how_many_times-iter (rest string)\
    \ (rest substring) (+ count 1))]\n      [else (how_many_times-iter (rest string)\
    \ substring count)]))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(string-prefix? substring string) (helper\
    \ (substring string 1) substring (+ count 1))]\n      [else (helper (substring\
    \ string 1) substring count)]))\n  (helper string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(and (not (empty? string)) (not (empty?\
    \ substring)) (equal? (first string) (first substring)))\n       (helper (rest\
    \ string) (rest substring) (helper (rest string) substring (+ count 1)))]\n  \
    \    [else (helper (rest string) substring count)]))\n  (helper string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string-contains string substring)\n  \
    \     (how_many_times-iter (substring string 1) substring (+ count 1))]\n    \
    \  [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond ((string-length\
    \ string) < (string-length substring)) count)\n          ((string-contains string\
    \ substring)\n           (how_many_times-iter (substring string 1) substring (+\
    \ count 1)))\n          (else (how_many_times-iter (substring string 1) substring\
    \ count))))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (helper string substring\
    \ counter)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 counter))\n   \
    \     counter))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else\n       (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(and (not (empty? string)) (not (empty?\
    \ substring)) (equal? (first string) (first substring)))\n       (helper (rest\
    \ string) (rest substring) (add1 count))]\n      [else (helper (rest string) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(string-prefix? substring string)\n          \
    \ (how_many_times-iter (substring string 1) substring (+ count 1))]\n        \
    \  [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ (string-length\
    \ substring) 1)) substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (if\
    \ (string-contains string substring)\n        (helper (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (helper string\
    \ substring 0))\n", "  (cond [(empty? string) 0]\n        [(empty? substring)\
    \ 0]\n        [(string-contains string substring) (+ 1 (how_many_times (string-drop\
    \ string 1) substring))]\n        [else (how_many_times (string-drop string 1)\
    \ substring)]))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(equal?\
    \ (first string) (first substring))\n       (helper (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (helper (rest string) substring count)]))\n  (helper\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(and (equal? (first string) (first substring))\n            (equal? (rest\
    \ string) (rest substring)))\n       (how_many_times-iter (rest string) substring\
    \ (+ count 1))]\n      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (if (empty? string)\n      0\n      (if (string-contains string substring)\n\
    \          (+ 1 (how_many_times (substring string 1) substring))\n          0)))\n",
  "  (define (helper string substring count)\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(equal? (first string) (first\
    \ substring))\n           (helper (rest string) (rest substring) (+ count 1))]\n\
    \          [else (helper (rest string) substring count)]))\n  (helper string substring\
    \ 0))\n", "  (define (helper string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(and (equal? (first\
    \ string) (first substring))\n            (equal? (rest string) (rest substring)))\n\
    \       (helper (rest string) substring (+ count 1))]\n      [(equal? (first string)\
    \ (first substring))\n       (helper (rest string) (rest substring) (+ count 1))]\n\
    \      [else (helper (rest string) substring count)]))\n  (helper string substring\
    \ 0))\n", "  (define (helper string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(empty? substring) count]\n          [(and (equal? (first\
    \ string) (first substring))\n                (equal? (rest string) (rest substring)))\n\
    \           (helper (rest string) substring (+ count 1))]\n          [(equal?\
    \ (first string) (first substring))\n           (helper (rest string) (rest substring)\
    \ count)]\n          [else (helper (rest string) substring count)]))\n  (helper\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond ((string-contains string substring)\n           (how_many_times-iter\
    \ (substring string 1) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string-contains string substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (let loop ([string string] [substring substring]\
    \ [count 0])\n    (cond [(empty? string) count]\n          [(empty? substring)\
    \ count]\n          [(and (not (empty? string)) (not (empty? substring)) (equal?\
    \ (first string) (first substring)))\n           (loop (rest string) (rest substring)\
    \ (+ count 1))]\n          [else (loop (rest string) substring count)])))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring))\n       (how_many_times-iter (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times_iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times_iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times_iter (rest string) substring count)]))\n  (how_many_times_iter\
    \ string substring 0))\n", "  (let loop ([string string] [substring substring]\
    \ [count 0])\n    (cond [(empty? string) count]\n          [(empty? substring)\
    \ count]\n          [(and (equal? (first string) (first substring))\n        \
    \        (equal? (rest string) (rest substring)))\n           (loop (rest string)\
    \ substring (+ count 1))]\n          [(equal? (first string) (first substring))\n\
    \           (loop (rest string) (rest substring) (+ count 1))]\n          [else\
    \ (loop (rest string) substring count)])))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(string=? string substring) (+ count 1)]\n\
    \          [(string=? string \"\") count]\n          [else (how_many_times-iter\
    \ (substring string 1) substring\n                                     (if (string=?\
    \ (substring string 0 (string-length substring)) substring)\n                \
    \                         (+ count 1)\n                                      \
    \   count))]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (first string) (first substring))\n    \
    \   (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(and\
    \ (string=? (substring string 0 1) (substring substring 0 1))\n            (string=?\
    \ string substring))\n       (+ count (helper (substring string 1) (substring\
    \ substring 1) 0))]\n      [(string=? (substring string 0 1) (substring substring\
    \ 0 1))\n       (helper (substring string 1) (substring substring 1) count)]\n\
    \      [else (helper (substring string 1) substring count)]))\n  (helper string\
    \ substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string-contains string substring)\n\
    \       (how_many_times-iter (string-drop string 1) substring (+ count 1))]\n\
    \      [else (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(string-prefix? substring string) (helper (substring string 1)\
    \ substring (+ count 1))]\n      [else (helper (substring string 1) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index string substring))) substring))\n\
    \      0))\n", "  (define (iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring))\n       (iter (rest string) (rest substring)\n          \
    \   (if (empty? (rest substring)) (+ count 1) count))]\n      [else (iter (rest\
    \ string) substring count)]))\n  (iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ (string-length substring) 1)) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (helper string substring count)\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(and (equal? (first string)\
    \ (first substring))\n                (equal? (rest string) (rest substring)))\n\
    \           (helper (rest string) substring (+ count 1))]\n          [(equal?\
    \ (first string) (first substring))\n           (helper (rest string) (rest substring)\
    \ count)]\n          [else (helper (rest string) substring count)]))\n  (helper\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond [(empty? string) count]\n          [(string-contains string substring)\n\
    \           (how_many_times-iter (substring string 1) substring (+ count 1))]\n\
    \          [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(string-contains string substring) (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n          [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring)) (how_many_times-iter (rest string)\
    \ (rest substring) (+ count 1))]\n      [else (how_many_times-iter (rest string)\
    \ substring count)]))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [(and (not (empty? string))\
    \ (not (empty? substring)) (string-prefix? substring string))\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(and\
    \ (not (empty? string)) (not (empty? substring)) (equal? (first string) (first\
    \ substring)))\n       (helper (rest string) (rest substring) (helper (rest string)\
    \ substring (+ count 1)))]\n      [else (helper (rest string) substring count)]))\n\
    \  (helper string substring 0))\n", "  (define (helper string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (helper (rest string)\
    \ (rest substring) (+ count 1))]\n      [else (helper (rest string) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ (string-length\
    \ substring) 1)) substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ (string-length\
    \ substring) 1)) substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(string-contains string substring)\n           (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))]\n          [else (how_many_times-iter (string-drop\
    \ string 1) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(empty? substring) count]\n          [(string-contains string\
    \ substring)\n           (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))]\n          [else (how_many_times-iter (string-drop string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (helper\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(and (not (empty? string)) (not (empty? substring))\
    \ (equal? (first string) (first substring)))\n       (helper (rest string) (rest\
    \ substring) (+ count 1))]\n      [else (helper (rest string) substring count)]))\n\
    \  (helper string substring 0))\n", "  (define (how_many_times-iter string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (add1 count))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(empty? substring) count]\n          [(string-contains string\
    \ substring) (how_many_times-iter (substring string 1) substring (+ count 1))]\n\
    \          [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(and (not (empty? string)) (not (empty? substring))\
    \ (equal? (first string) (first substring)))\n           (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n    [else (how_many_times (substring string 1) substring)]))\n",
  "  (define (how_many-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string-contains string substring) (how_many-helper (substring\
    \ string 1) substring (+ count 1))]\n      [else (how_many-helper (substring string\
    \ 1) substring count)]))\n  (how_many-helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))\n        count))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring counter)\n    (cond\n      [(empty? string)\
    \ counter]\n      [(empty? substring) counter]\n      [(equal? (first string)\
    \ (first substring))\n       (how_many_times-iter (rest string) (rest substring)\n\
    \                            (add1 counter))]\n      [else (how_many_times-iter\
    \ (rest string) substring counter)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (helper string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(and (equal? (first\
    \ string) (first substring))\n            (equal? (rest string) (rest substring)))\n\
    \       (helper (rest string) substring (+ count 1))]\n      [(equal? (first string)\
    \ (first substring))\n       (helper (rest string) (rest substring) count)]\n\
    \      [else (helper (rest string) substring count)]))\n  (helper string substring\
    \ 0))\n", "  (define (count-substring string substring)\n    (if (string-contains\
    \ string substring)\n        (+ 1 (count-substring (substring string (add 1 (string-index\
    \ string substring))) substring))\n        0))\n  (count-substring string substring))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string=? (first string)\
    \ (first substring))\n       (how_many_times-iter (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (helper string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(and (equal? (first\
    \ string) (first substring)) (equal? (second string) (second substring)))\n  \
    \     (helper (rest (rest string)) (rest substring) (+ count 1))]\n      [else\
    \ (helper (rest string) substring count)]))\n  (helper string substring 0))\n",
  "  (define (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(string=? string\
    \ substring) (+ count 1)]\n      [(string-contains string substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else count]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(equal?\
    \ (first string) (first substring))\n       (helper (rest string) (rest substring)\
    \ (add1 count))]\n      [else (helper (rest string) substring count)]))\n  (helper\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(string-prefix?\
    \ substring string) (helper (substring string (add1 (string-length substring)))\
    \ substring (add1 count))]\n      [else (helper (substring string 1) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(equal? (first string) (first substring))\n       (helper (rest\
    \ string) (rest substring) (add1 count))]\n      [else (helper (rest string) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) < (string-length\
    \ substring)) count)\n            ((string-contains string substring)\n      \
    \       (how_many_times-iter (substring string 1) substring (+ count 1)))\n  \
    \          (else (how_many_times-iter (substring string 1) substring count))))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) < (string-length\
    \ substring)) count)\n          ((string-contains string substring)\n        \
    \   (how_many_times-iter (substring string 1) substring (+ count 1)))\n      \
    \    (else (how_many_times-iter (substring string 1) substring count))))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(equal? (first string) (first substring))\n           (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring))\n       (how_many_times-iter (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (helper string substring count)\n    (if (string-contains\
    \ string substring)\n        (helper (substring string (+ 1 (string-index string\
    \ substring))) substring (+ 1 count))\n        count))\n  (helper string substring\
    \ 0))\n", "  (define (helper string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string-prefix? substring\
    \ string) (helper (substring string 1) substring (+ count 1))]\n      [else (helper\
    \ (substring string 1) substring count)]))\n  (helper string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring counter)\n    (cond\n\
    \      [(empty? string) counter]\n      [(empty? substring) counter]\n      [(equal?\
    \ (first string) (first substring))\n       (how_many_times-iter (rest string)\
    \ (rest substring)\n                            (add1 counter))]\n      [else\
    \ (how_many_times-iter (rest string) substring counter)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(string=? string \"\") count]\n\
    \      [(string=? substring \"\") count]\n      [(string-contains string substring)\n\
    \       (helper (substring string 1) substring (+ count 1))]\n      [else (helper\
    \ (substring string 1) substring count)]))\n  (helper string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond [(string=? string\
    \ substring) (+ count 1)]\n          [(string-length string) 0]\n          [else\
    \ (how_many_times-iter (substring string 1) substring (if (string=? (substring\
    \ string 0 (string-length substring)) substring) (+ count 1) count))]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ (string-length substring) 1)) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n", "  (let loop ([string string]\
    \ [substring substring] [count 0])\n    (cond [(empty? string) count]\n      \
    \    [(empty? substring) count]\n          [(and (not (empty? substring)) (not\
    \ (empty? string)) (equal? (first string) (first substring)))\n           (loop\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (loop (rest string)\
    \ substring count)])))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (let loop ([string string] [substring substring] [count 0])\n    (cond [(string=?\
    \ string \"\") count]\n          [(string=? substring \"\") count]\n         \
    \ [(string-contains string substring)\n           (loop (substring string 1) substring\
    \ (+ count 1))]\n          [else (loop (substring string 1) substring count)])))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring)) (how_many_times-iter (rest string) (rest substring) (+ count\
    \ 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond [(empty? string) count]\n          [(empty? substring) count]\n\
    \          [(string-contains string substring) (helper (substring string 1) substring\
    \ (+ count 1))]\n          [else (helper (substring string 1) substring count)]))\n\
    \  (helper string substring 0))\n", "  (define (count-substring string substring)\n\
    \    (cond\n      [(empty? string) 0]\n      [(empty? substring) 0]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring) (+ 1 (count-substring\
    \ (substring string 1) substring))]\n      [else (count-substring (substring string\
    \ 1) substring)]))\n  (count-substring string substring))\n", "  (define (helper\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string-prefix? substring string) (helper (substring\
    \ string 1) substring (+ count 1))]\n      [else (helper (substring string 1)\
    \ substring count)]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (add1 count))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n```\n\n```racket\n#lang racket\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (add1 (string-index string substring))) substring (add1 count))\n   \
    \     count))\n  (helper string substring 0))\n", "  (define (helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ (helper (rest string) substring count)]\n      [(equal? (first string) (first\
    \ substring)) (helper (rest string) (rest substring) (add1 count))]\n      [else\
    \ (helper (rest string) substring count)]))\n  (helper string substring 0))\n",
  "  (define (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(equal? (first string) (first substring))\n\
    \       (helper (rest string) (rest substring) (+ count 1))]\n      [else (helper\
    \ (rest string) substring count)]))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string-contains string substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (cond\n      [(empty? string)\
    \ 0]\n      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (+ 1 (count-substring (substring string 1) substring))]\n      [else (count-substring\
    \ (substring string 1) substring)]))\n  (count-substring string substring))\n",
  "  (define (substring-index string substring)\n    (define (substring-index-iter\
    \ string substring index)\n      (cond ((string-length string) &lt; (string-length\
    \ substring))\n            (else (if (string=? (substring string 0 (string-length\
    \ substring)) substring)\n                     index\n                     (substring-index-iter\
    \ (substring string 1) substring (+ index 1)))))\n    (substring-index-iter string\
    \ substring 0))\n  (define (how-many-times-iter string substring count)\n    (cond\
    \ ((string-length string) &lt; (string-length substring))\n          (else (if\
    \ (string=? (substring string 0 (string-length substring)) substring)\n      \
    \             (how-many-times-iter (substring string (+ (substring-index string\
    \ substring) 1)) substring (+ count 1))\n                   (how-many-times-iter\
    \ (substring string 1) substring count)))))\n  (how-many-times-iter string substring\
    \ 0))\n</code>\nI'm not sure if this is the best solution, but it works.\n", " \
    \ (define (iter string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(string-contains string substring) (iter\
    \ (string-drop string 1) substring (+ count 1))]\n      [else (iter (string-drop\
    \ string 1) substring count)]))\n  (iter string substring 0))\n", "  (define (count-substring\
    \ string substring)\n    (define (count-substring-iter string substring count)\n\
    \      (cond ((string-length string) &lt; (string-length substring)) count)\n\
    \            ((string-index string substring)\n             (count-substring-iter\
    \ (substring string (+ (string-length substring) 1)) substring (+ count 1)))\n\
    \            (else count)))\n  (count-substring-iter string substring 0))\n</code>\n\
    I get the following error:\n<code>how_many_times.rkt:7:0: how_many_times.rkt:7:0:\
    \ how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0:\
    \ how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0:\
    \ how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0:\
    \ how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0:\
    \ how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0:\
    \ how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0:\
    \ how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7:0: how_many_times.rkt:7",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (string-index string substring) (string-length string)) substring))\n\
    \      0))\n", "  (let loop ([string string] [substring substring] [count 0])\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(equal? (first string) (first substring))\n           (loop (rest string)\
    \ (rest substring) (+ count 1))]\n          [else (loop (rest string) substring\
    \ count)])))\n", "  (define (how_many_times-iter string substring count)\n   \
    \ (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n   \
    \   [(equal? (first string) (first substring))\n       (how_many_times-iter (rest\
    \ string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter (rest\
    \ string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(equal? (first string) (first substring))\n\
    \       (helper (rest string) (rest substring) (+ count 1))]\n      [else (helper\
    \ (rest string) substring count)]))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(string-prefix? substring string)\n\
    \           (how_many_times-iter (substring string 1) substring (+ count 1))]\n\
    \          [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(and (not (empty? string)) (not (empty? substring))\
    \ (equal? (first string) (first substring)))\n       (how_many_times-iter (rest\
    \ string) (rest substring) (how_many_times-iter (rest string) substring count))]\n\
    \      [else (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(string-prefix?\
    \ substring string)\n       (helper (substring string (add1 (string-length substring)))\
    \ substring (add1 count))]\n      [else (helper (substring string 1) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (define (helper\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (helper (rest string) (rest substring) (+ count 1))]\n      [else (helper (rest\
    \ string) substring count)]))\n  (helper string substring 0))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (cond [(>= i (string-length string)) count]\n       \
    \   [(string=? (substring string i (+ i (string-length substring))) substring)\n\
    \           (loop (+ i 1) (+ count 1))]\n          [else (loop (+ i 1) count)])))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index string substring))) substring))\n      0))\n", " \
    \ (define (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (iter string substring count)\n    (cond\n      [(empty? string) count]\n  \
    \    [(empty? substring) count]\n      [(and (char=? (first string) (first substring))\n\
    \            (string=? (rest string) (rest substring)))\n       (iter (rest string)\
    \ substring (+ count 1))]\n      [(char=? (first string) (first substring))\n\
    \       (iter (rest string) (rest substring) count)]\n      [else (iter (rest\
    \ string) substring count)]))\n  (iter string substring 0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(string=?\
    \ (first string) (first substring))\n       (how_many_times-iter (rest string)\
    \ (rest substring) (+ count 1))]\n      [else (how_many_times-iter (rest string)\
    \ substring count)]))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(and\
    \ (not (empty? string)) (not (empty? substring)) (equal? (first string) (first\
    \ substring)))\n       (helper (rest string) (rest substring) (+ count 1))]\n\
    \      [else (helper (rest string) substring count)]))\n  (helper string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(equal? (first string) (first substring))\n           (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (string-index string substring) (string-length string)) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\
    \ [(empty? string) count]\n          [(empty? substring) count]\n          [(string-prefix?\
    \ substring string)\n           (how_many_times-iter (substring string (add1 (string-length\
    \ substring))) substring (add1 count))]\n          [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond [(empty?\
    \ string) count]\n          [(string-contains string substring)\n           (how_many_times-iter\
    \ (substring string (add1 (string-length substring))) substring (add1 count))]\n\
    \          [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
