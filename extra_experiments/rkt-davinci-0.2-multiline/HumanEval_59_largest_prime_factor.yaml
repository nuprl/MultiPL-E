name: HumanEval_59_largest_prime_factor
language: rkt
prompt: "#lang racket\n\n#| Return the largest prime factor of n. Assume n > 1 and\
  \ is not a prime.\n>>> (largest_prime_factor 13195)\n29\n>>> (largest_prime_factor\
  \ 2048)\n2|#\n(define (largest_prime_factor n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n\
  \    (check-equal? (candidate 15) 5)\n    (check-equal? (candidate 27) 3)\n    (check-equal?\
  \ (candidate 63) 7)\n    (check-equal? (candidate 330) 11)\n    (check-equal? (candidate\
  \ 13195) 29)\n))\n\n(test-humaneval)"
completions: ["  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n   \
    \     n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n d)\n     \
    \ (cond ((= d 1) #t)\n            ((= (remainder n d) 0) #f)\n            (else\
    \ (is-prime-iter? n (- d 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define (largest-prime-factor-iter\
    \ n d)\n    (cond ((= (remainder n d) 0)\n           (if (is-prime? d) d (largest-prime-factor-iter\
    \ n (- d 1))))\n          (else (largest-prime-factor-iter n (- d 1)))))\n  (largest-prime-factor-iter\
    \ n (- n 1)))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n    \
    \  [(= n 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i)\
    \ i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor n test-divisor)\n    (cond ((prime?\
    \ n) n)\n          ((divisible? n test-divisor) (largest-prime-factor (/ n test-divisor)\
    \ test-divisor))\n          (else (largest-prime-factor n (+ test-divisor 1)))))\n\
    \  (largest-prime-factor n 2))\n", "  (define (largest-prime-factor-iter n i)\n\
    \    (cond [(= n 1) i]\n          [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (or (= n 1) (=\
    \ n i))\n        i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor n)\n    (define (largest-prime-factor-iter\
    \ n test-divisor)\n      (cond ((prime? n) n)\n            ((divisible? n test-divisor)\n\
    \             (largest-prime-factor-iter (/ n test-divisor) test-divisor))\n \
    \           (else (largest-prime-factor-iter n (+ test-divisor 1)))))\n    (largest-prime-factor-iter\
    \ n 2))\n  (largest-prime-factor n))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (and (integer? (/ n\
    \ i))\n             (prime? i))\n        (largest-prime-factor (/ n i) i)\n  \
    \      (largest-prime-factor n (+ i 1))))\n  (largest-prime-factor n 2))\n", " \
    \ (define (largest_prime_factor-iter n i)\n    (if (= n i)\n        n\n      \
    \  (if (zero? (modulo n i))\n            (largest_prime_factor-iter (/ n i) 2)\n\
    \            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n```\n\n## Problem 4\n\n```racket\n#lang racket\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= n i) i]\n      [(= 0 (modulo n i)) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-helper n i)\n    (cond\n      [(=\
    \ n 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-helper (/ n i) i)]\n\
    \      [else (largest-prime-factor-helper n (+ i 1))]))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n     \
    \ (cond [(= i 1) #t]\n            [(= (remainder n i) 0) #f]\n            [else\
    \ (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (floor (sqrt n))))\n  (define\
    \ (largest-prime-factor-iter n i)\n    (cond [(= i 1) n]\n          [(and (is-prime?\
    \ i) (= (remainder n i) 0)) (largest-prime-factor-iter (/ n i) i)]\n         \
    \ [else (largest-prime-factor-iter n (- i 1))]))\n  (largest-prime-factor-iter\
    \ n (floor (sqrt n))))\n", "  (define (divisors n)\n    (for/list ([i (in-range\
    \ 2 (ceiling (sqrt n)))])\n      (if (zero? (modulo n i)) i)))\n  (define (is-prime?\
    \ n)\n    (null? (divisors n)))\n  (define (prime-divisors n)\n    (for/list ([i\
    \ (in-range 2 (ceiling (sqrt n)))])\n      (if (and (zero? (modulo n i)) (is-prime?\
    \ i)) i)))\n  (last (prime-divisors n)))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= n 1) i]\n          [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (divides? n i)\n            (largest-prime-factor-iter (/\
    \ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= 0 (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n  \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (= n i)\n        n\n\
    \        (if (divides? i n)\n            (largest-prime-factor (/ n i) i)\n  \
    \          (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor n 2))\n",
  "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond [(= i 1) #t]\n\
    \            [(= (remainder n i) 0) #f]\n            [else (prime?-iter n (- i\
    \ 1))]))\n    (prime?-iter n (quotient n 2)))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= i 1) n]\n          [(and (= (remainder n i) 0) (prime? i))\
    \ (largest-prime-factor-iter n (- i 1))]\n          [else (largest-prime-factor-iter\
    \ n (- i 1))]))\n  (largest-prime-factor-iter n (quotient n 2)))\n", "  (define\
    \ (largest-prime-factor-iter n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder\
    \ n i) 0) (largest-prime-factor-iter (/ n i) i)]\n      [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n 1)\n        i\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= n 1) i]\n          [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(integer? (/ n i)) (largest-prime-factor-iter (/ n i) i)]\n      \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\
    \ [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (prime?-iter\
    \ n (+ i 1))]))\n    (prime?-iter n 2))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= i n) n]\n          [(and (prime? i) (= (remainder n i) 0))\
    \ (largest-prime-factor-iter (/ n i) i)]\n          [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\
    \ [(= i 1) #t]\n            [(= (remainder n i) 0) #f]\n            [else (prime?-iter\
    \ n (- i 1))]))\n    (prime?-iter n (- n 1)))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= i 1) n]\n          [(and (= (remainder n i) 0) (prime? i))\
    \ (largest-prime-factor-iter n (- i 1))]\n          [else (largest-prime-factor-iter\
    \ n (- i 1))]))\n  (largest-prime-factor-iter n (- n 1)))\n", "  (define (is-prime?\
    \ n)\n    (define (helper i)\n      (cond\n        [(> i (sqrt n)) #t]\n     \
    \   [(zero? (modulo n i)) #f]\n        [else (helper (+ i 1))]))\n    (helper\
    \ 2))\n  (define (helper i)\n    (cond\n      [(> i (sqrt n)) n]\n      [(and\
    \ (zero? (modulo n i)) (is-prime? i)) (helper i)]\n      [else (helper (+ i 1))]))\n\
    \  (helper 2))\n", "  (define (iter n i)\n    (cond\n      [(= n 1) i]\n     \
    \ [(= (remainder n i) 0) (iter (/ n i) i)]\n      [else (iter n (+ i 1))]))\n\
    \  (iter n 2))\n", "  (define (prime? n)\n    (define (prime? n i)\n      (cond\n\
    \        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (prime?\
    \ n (+ i 1))]))\n    (prime? n 2))\n  (define (largest-prime-factor n i)\n   \
    \ (cond\n      [(= i n) n]\n      [(and (prime? i) (zero? (modulo n i))) (largest-prime-factor\
    \ n (+ i 1))]\n      [else (largest-prime-factor n (+ i 1))]))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n divisor)\n     \
    \ (cond [(= divisor 1) #t]\n            [(= (modulo n divisor) 0) #f]\n      \
    \      [else (prime?-iter n (- divisor 1))]))\n    (prime?-iter n (- n 1)))\n\
    \  (define (largest-prime-factor-iter n divisor)\n    (cond [(= n divisor) n]\n\
    \          [(and (= (modulo n divisor) 0) (prime? divisor))\n           (largest-prime-factor-iter\
    \ n (- divisor 1))]\n          [else (largest-prime-factor-iter n (- divisor 1))]))\n\
    \  (largest-prime-factor-iter n (- n 1)))\n", "  (let loop ([n n] [d 2])\n   \
    \ (cond [(= n d) d]\n          [(zero? (modulo n d)) (loop (/ n d) d)]\n     \
    \     [else (loop n (+ d 1))])))\n", "  (define (largest_prime_factor-iter n i)\n\
    \    (cond [(= n 1) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n factor)\n    (cond\n     \
    \ [(= n factor) factor]\n      [(zero? (modulo n factor)) (largest-prime-factor-iter\
    \ (/ n factor) factor)]\n      [else (largest-prime-factor-iter n (+ factor 1))]))\n\
    \  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= n i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(zero? (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n    \
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (zero? (modulo n i))\n\
    \        (if (prime? i)\n            i\n            (largest-prime-factor (quotient\
    \ n i) i))\n        (largest-prime-factor n (+ i 1))))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (largest-prime-factor-iter n d)\n    (cond [(= n 1) d]\n\
    \          [(= (remainder n d) 0) (largest-prime-factor-iter (/ n d) d)]\n   \
    \       [else (largest-prime-factor-iter n (+ d 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (integer? (/ n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n p)\n    (if (= n 1)\n        p\n\
    \        (if (zero? (modulo n p))\n            (largest-prime-factor (/ n p) p)\n\
    \            (largest-prime-factor n (+ p 1)))))\n  (largest-prime-factor n 2))\n",
  "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n          [(=\
    \ (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n          [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (prime? n)\n\
    \    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= n (find-divisor n 2)))\n  (define (largest-prime-factor n)\n\
    \    (cond ((prime? n) n)\n          (else (largest-prime-factor (/ n (find-divisor\
    \ n 2))))))\n  (largest-prime-factor n))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n 1) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (= n i)\n        n\n\
    \        (if (integer? (/ n i))\n            (largest-prime-factor (/ n i) i)\n\
    \            (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor n 2))\n",
  "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n        n\n    \
    \    (if (zero? (modulo n i))\n            (largest-prime-factor-iter (/ n i)\
    \ i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(zero? (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n    \
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n p)\n    (if (prime? n)\n      \
    \  n\n        (if (zero? (modulo n p))\n            (largest-prime-factor (quotient\
    \ n p) p)\n            (largest-prime-factor n (+ p 1)))))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\
    \ [(= i 1) true]\n            [(= (remainder n i) 0) false]\n            [else\
    \ (prime?-iter n (- i 1))]))\n    (prime?-iter n (floor (sqrt n))))\n  (define\
    \ (largest-prime-factor-iter n i)\n    (cond [(= i 1) n]\n          [(and (prime?\
    \ i) (= (remainder n i) 0)) (largest-prime-factor-iter (/ n i) i)]\n         \
    \ [else (largest-prime-factor-iter n (- i 1))]))\n  (largest-prime-factor-iter\
    \ n (floor (sqrt n))))\n", "  (define (largest-prime-factor-iter n factor)\n \
    \   (cond [(= n 1) factor]\n          [(= (remainder n factor) 0)\n          \
    \ (largest-prime-factor-iter (/ n factor) factor)]\n          [else (largest-prime-factor-iter\
    \ n (+ factor 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(integer? (/ n i)) (largest_prime_factor-iter (/ n i) i)]\n      \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(and (integer? (/ n i)) (prime? i)) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= i n) n]\n\
    \          [(integer? (/ n i)) (largest-prime-factor-iter (/ n i) i)]\n      \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(zero? (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n    \
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n```\n\n## Problem 4\n\n```racket\n#lang racket\n", "  (define (helper\
    \ n i)\n    (cond [(= n i) n]\n          [(= (remainder n i) 0) (helper (/ n i)\
    \ i)]\n          [else (helper n (+ i 1))]))\n  (helper n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(zero? (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n    \
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (let loop ([n n] [d 2])\n    (cond [(= n d) d]\n          [(zero?\
    \ (modulo n d)) (loop (/ n d) d)]\n          [else (loop n (+ d 1))])))\n", " \
    \ (define (largest-prime-factor n i)\n    (if (= n i)\n        i\n        (if\
    \ (zero? (modulo n i))\n            (largest-prime-factor (/ n i) i)\n       \
    \     (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor n 2))\n", " \
    \ (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n i) i]\n    \
    \  [(zero? (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n      [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime-helper n divisor)\n    \
    \  (cond [(= divisor 1) #t]\n            [(= (modulo n divisor) 0) #f]\n     \
    \       [else (prime-helper n (- divisor 1))]))\n    (prime-helper n (floor (/\
    \ n 2))))\n  (define (largest-prime-factor-helper n divisor)\n    (cond [(= (modulo\
    \ n divisor) 0)\n           (if (prime? divisor)\n               divisor\n   \
    \            (largest-prime-factor-helper n (- divisor 1)))]\n          [else\
    \ (largest-prime-factor-helper n (- divisor 1))]))\n  (largest-prime-factor-helper\
    \ n (floor (/ n 2))))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\
    \ [(= n i) i]\n          [(and (zero? (modulo n i))\n                (prime? i))\n\
    \           (largest_prime_factor-iter (/ n i) i)]\n          [else (largest_prime_factor-iter\
    \ n (+ i 1))]))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (if (prime? n)\n        n\n        (if (divides? i n)\n          \
    \  (largest-prime-factor-iter (quotient n i) i)\n            (largest-prime-factor-iter\
    \ n (+ i 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor\
    \ n i)\n    (if (prime? n)\n        n\n        (if (divides? i n)\n          \
    \  (largest-prime-factor (quotient n i) i)\n            (largest-prime-factor\
    \ n (+ i 1)))))\n  (largest-prime-factor n 2))\n", "  (define (prime? n)\n   \
    \ (define (prime-helper n i)\n      (cond [(= i n) #t]\n            [(= (remainder\
    \ n i) 0) #f]\n            [else (prime-helper n (+ i 1))]))\n    (prime-helper\
    \ n 2))\n  (define (largest-prime-factor-helper n i)\n    (cond [(= i n) n]\n\
    \          [(and (= (remainder n i) 0) (prime? i)) (largest-prime-factor-helper\
    \ n (+ i 1))]\n          [else (largest-prime-factor-helper n (+ i 1))]))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (loop i)\n      (cond ((= i n) #t)\n      \
    \      ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n    (loop\
    \ 2))\n  (define (loop i)\n    (cond ((= i n) n)\n          ((is-prime? i) (loop\
    \ (+ i 1)))\n          ((is-divisible? n i) i)\n          (else (loop (+ i 1)))))\n\
    \  (loop 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (prime?-iter\
    \ n (+ i 1))]))\n    (prime?-iter n 2))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= i n) n]\n      [(and (= (remainder n i) 0) (prime?\
    \ i)) (largest-prime-factor-iter n (+ i 1))]\n      [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= n 1) i]\n          [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n```\n\n### Problem 4\n\nA palindromic number reads the same both ways.\
    \ The largest palindrome made from the product of two 2-digit numbers is 9009\
    \ = 91 \xD7 99.\n\nFind the largest palindrome made from the product of two 3-digit\
    \ numbers.\n\n```racket\n#lang racket\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest-prime-factor-iter (/ n i) i)\n            (largest-prime-factor-iter\
    \ n (+ i 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (let loop ([n n] [i\
    \ 2])\n    (cond [(= n i) i]\n          [(zero? (modulo n i)) (loop (/ n i) i)]\n\
    \          [else (loop n (+ i 1))])))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (prime? n)\n      \
    \  n\n        (if (zero? (modulo n i))\n            (largest-prime-factor (/ n\
    \ i) i)\n            (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (divides? i n)\n            (largest-prime-factor-iter\
    \ (quotient n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(integer? (/ n i)) (largest-prime-factor-iter (/ n i) i)]\n  \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (let loop ([i 2] [n n])\n    (cond [(= n 1) i]\n          [(integer?\
    \ (sqrt n)) n]\n          [(zero? (modulo n i)) (loop i (/ n i))]\n          [else\
    \ (loop (+ i 1) n)])))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n\
    \      [(= n i) i]\n      [(= 0 (modulo n i)) (largest-prime-factor-iter (/ n\
    \ i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (and (integer?\
    \ (/ n i))\n             (prime? i))\n        (largest-prime-factor-iter (/ n\
    \ i) i)\n        (if (prime? n)\n            n\n            (largest-prime-factor-iter\
    \ n (+ i 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (if (zero? (modulo n i))\n        (if (prime? i)\n            i\n\
    \            (largest-prime-factor-iter (quotient n i) i))\n        (largest-prime-factor-iter\
    \ n (+ i 1))))\n  (largest-prime-factor-iter n 2))\n", "  (let loop ([n n] [p\
    \ 2])\n    (cond [(= n 1) p]\n          [(= (remainder n p) 0) (loop (/ n p) p)]\n\
    \          [else (loop n (+ p 1))])))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (prime? n)\n      \
    \  n\n        (if (zero? (modulo n i))\n            (largest-prime-factor (/ n\
    \ i) i)\n            (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\n\
    \        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (prime?-iter\
    \ n (+ i 1))]))\n    (prime?-iter n 2))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(prime? n) n]\n      [(zero? (modulo n i)) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\
    \ [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (prime?-iter\
    \ n (+ i 1))]))\n    (prime?-iter n 2))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(and (prime? i) (= (remainder n i) 0))\
    \ (largest-prime-factor-iter (/ n i) i)]\n          [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n i) n]\n      [(= 0 (modulo n i)) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n d)\n    (if (= n d)\n        n\n\
    \        (if (zero? (modulo n d))\n            (largest-prime-factor (/ n d) d)\n\
    \            (largest-prime-factor n (+ d 1)))))\n  (largest-prime-factor n 2))\n",
  "  (let loop ([n n] [d 2])\n    (cond [(= n d) d]\n          [(zero? (modulo n d))\
    \ (loop (/ n d) d)]\n          [else (loop n (+ d 1))])))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (divides? i n)\n            (largest-prime-factor-iter\
    \ (quotient n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n      (cond\n\
    \        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (prime-helper\
    \ n (+ i 1))]))\n    (prime-helper n 2))\n  (define (largest-prime-factor-helper\
    \ n i)\n    (cond\n      [(prime? n) n]\n      [(zero? (modulo n i)) (largest-prime-factor-helper\
    \ (/ n i) i)]\n      [else (largest-prime-factor-helper n (+ i 1))]))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(integer? (/ n i)) (largest-prime-factor-iter (/ n i) i)]\n      \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n p)\n    (if (prime? n)\n      \
    \  n\n        (if (divides? p n)\n            (largest-prime-factor (quotient\
    \ n p) p)\n            (largest-prime-factor n (+ p 1)))))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor n)\n    (define (largest-prime-factor-iter\
    \ n test-divisor)\n      (cond ((prime? n) n)\n            ((divisible? n test-divisor)\n\
    \             (largest-prime-factor-iter (/ n test-divisor) test-divisor))\n \
    \           (else (largest-prime-factor-iter n (+ test-divisor 1)))))\n    (largest-prime-factor-iter\
    \ n 2))\n  (largest-prime-factor n))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= n i) n]\n      [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (= n i)\n        n\n\
    \        (if (zero? (modulo n i))\n            (largest-prime-factor (/ n i) i)\n\
    \            (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor n 2))\n",
  "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) n]\n          [(zero?\
    \ (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n          [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= n i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (let loop ([n n] [i 2])\n    (if (= n i)\n        i\n        (if\
    \ (zero? (modulo n i))\n            (loop (/ n i) i)\n            (loop n (+ i\
    \ 1))))))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n  \
    \      n\n        (if (integer? (/ n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (remainder n i) 0) #f]\n        [else (prime?-iter\
    \ n (- i 1))]))\n    (prime?-iter n (floor (sqrt n))))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= i n) n]\n      [(and (prime? i) (= (remainder n i)\
    \ 0)) (largest-prime-factor-iter (/ n i) i)]\n      [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (is-prime?\
    \ n)\n    (define (helper i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (helper\
    \ i)\n    (cond\n      [(= i n) n]\n      [(= (remainder n i) 0) (if (is-prime?\
    \ i) i (helper (+ i 1)))]\n      [else (helper (+ i 1))]))\n  (helper 2))\n",
  "  (define (largest-prime-factor-helper n i)\n    (cond [(= n 1) i]\n          [(=\
    \ (remainder n i) 0) (largest-prime-factor-helper (/ n i) i)]\n          [else\
    \ (largest-prime-factor-helper n (+ i 1))]))\n  (largest-prime-factor-helper n\
    \ 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n 1)\n      \
    \  i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (divides? i n)\n            (largest-prime-factor-iter\
    \ (quotient n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (iter n i)\n    (if (= n 1)\n        i\n        (if (zero?\
    \ (remainder n i))\n            (iter (/ n i) i)\n            (iter n (+ i 1)))))\n\
    \  (iter n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n\
    \ 1) i]\n          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor n)\n    (define (largest-prime-factor-iter\
    \ n test-divisor)\n      (cond ((prime? n) n)\n            ((divisible? n test-divisor)\
    \ (largest-prime-factor-iter (/ n test-divisor) test-divisor))\n            (else\
    \ (largest-prime-factor-iter n (+ test-divisor 1)))))\n    (largest-prime-factor-iter\
    \ n 2))\n  (largest-prime-factor n))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) i]\n      [(=\
    \ (remainder n i) 0) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n", " \
    \ (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n        n\n   \
    \     (if (zero? (modulo n i))\n            (largest-prime-factor-iter (/ n i)\
    \ i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n p)\n    (cond [(= n p) p]\n\
    \          [(zero? (modulo n p)) (largest_prime_factor-iter (/ n p) p)]\n    \
    \      [else (largest_prime_factor-iter n (+ p 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-helper n i)\n    (cond [(= n i) n]\n\
    \          [(= 0 (modulo n i)) (largest-prime-factor-helper (/ n i) i)]\n    \
    \      [else (largest-prime-factor-helper n (+ i 1))]))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n div)\n    (cond [(= n div)\
    \ div]\n          [(zero? (modulo n div)) (largest-prime-factor-iter (/ n div)\
    \ div)]\n          [else (largest-prime-factor-iter n (+ div 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor n)\n    (cond ((prime? n) n)\n     \
    \     (else (largest-prime-factor (quotient n (find-divisor n 2))))))\n  (largest-prime-factor\
    \ n))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (prime?-iter\
    \ n (+ i 1))]))\n    (prime?-iter n 2))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond\n      [(= n i) i]\n      [(and (prime? i) (= (remainder n i)\
    \ 0)) (largest-prime-factor-iter (/ n i) i)]\n      [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond\n      [(= i n) (error \"n is prime\")]\n      [(= (remainder\
    \ n i) 0)\n       (if (prime? i) i (iter (+ i 1)))]\n      [else (iter (+ i 1))]))\n\
    \  (iter 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i)\
    \ n]\n          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(integer? (/ n i)) (largest-prime-factor-iter (/ n i) i)]\n      \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (prime? i)\n \
    \       (if (divides? i n)\n            (if (= n (* i i))\n                i\n\
    \                (largest_prime_factor-iter (/ n i) i))\n            (largest_prime_factor-iter\
    \ n (+ i 1)))\n        (largest_prime_factor-iter n (+ i 1))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(= 0 (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n  \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n   \
    \       [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (= n i)\n        n\n\
    \        (if (integer? (/ n i))\n            (largest-prime-factor (/ n i) i)\n\
    \            (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor n 2))\n",
  "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n        n\n    \
    \    (if (zero? (modulo n i))\n            (largest-prime-factor-iter (/ n i)\
    \ i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n      (cond\
    \ [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (prime-helper\
    \ n (+ i 1))]))\n    (prime-helper n 2))\n  (define (largest-prime-factor-helper\
    \ n i)\n    (cond [(= i n) n]\n          [(and (prime? i) (= (remainder n i) 0))\
    \ (largest-prime-factor-helper (/ n i) i)]\n          [else (largest-prime-factor-helper\
    \ n (+ i 1))]))\n  (largest-prime-factor-helper n 2))\n", "  (define (largest-prime-factor-iter\
    \ n p)\n    (if (prime? n)\n        n\n        (if (divides? p n)\n          \
    \  (largest-prime-factor-iter (/ n p) p)\n            (largest-prime-factor-iter\
    \ n (+ p 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= n i) n]\n          [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n          [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\
    \ [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (prime?-iter\
    \ n (+ i 1))]))\n    (prime?-iter n 2))\n  (define (largest-prime-factor-iter\
    \ n i)\n    (cond [(= i n) n]\n          [(and (= (remainder n i) 0) (prime? i))\
    \ (largest-prime-factor-iter n (+ i 1))]\n          [else (largest-prime-factor-iter\
    \ n (+ i 1))]))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest-prime-factor-iter\
    \ n i)\n    (if (prime? n)\n        n\n        (if (divides? i n)\n          \
    \  (largest-prime-factor-iter (quotient n i) i)\n            (largest-prime-factor-iter\
    \ n (+ i 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (prime? n)\n\
    \    (define (prime-helper n d)\n      (cond ((= d 1) #t)\n            ((= (remainder\
    \ n d) 0) #f)\n            (else (prime-helper n (- d 1)))))\n    (prime-helper\
    \ n (floor (sqrt n))))\n  (define (largest-prime-factor-helper n d)\n    (cond\
    \ ((= d 1) n)\n          ((and (prime? d) (= (remainder n d) 0)) (largest-prime-factor-helper\
    \ (/ n d) d))\n          (else (largest-prime-factor-helper n (- d 1)))))\n  (largest-prime-factor-helper\
    \ n (floor (sqrt n))))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n\
    \      [(= n i) n]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/\
    \ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
