name: HumanEval_61_correct_bracketing
language: rkt
prompt: "#lang racket\n\n#| brackets is a string of \"(\" and \")\".\nreturn #t if\
  \ every opening bracket has a corresponding closing bracket.\n>>> (correct_bracketing\
  \ \"(\")\n#f\n>>> (correct_bracketing \"()\")\n#t\n>>> (correct_bracketing \"(()())\"\
  )\n#t\n>>> (correct_bracketing \")(()\")\n#f|#\n(define (correct_bracketing brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\()\n           (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\))\n       \
    \    (and (not (zero? count))\n                (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (substring brackets 0 1) \")\") #f]\n\
    \    [(string=? (substring brackets 0 1) \"(\")\n     (correct_bracketing (substring\
    \ brackets 1))]))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\)) (and (positive? count)\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond ((empty? brackets) (zero? count))\n          ((char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1)))\n          ((char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1))))\n\
    \          (else (helper (rest brackets) count))))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (helper (rest brackets) (+ count 1))]\n \
    \         [(char=? (first brackets) #\\))\n           (and (< count 1) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (bracket-count brackets)\n    (cond\n      [(empty? brackets) 0]\n      [(char=?\
    \ (first brackets) #\\() (+ 1 (bracket-count (rest brackets)))]\n      [(char=?\
    \ (first brackets) #\\)) (- 1 (bracket-count (rest brackets)))]\n      [else (bracket-count\
    \ (rest brackets))]))\n  (= (bracket-count brackets) 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets) #\\\
    ()\n           (helper (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\))\n           (and (positive? count)\n                (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper\
    \ (rest brackets) (+ count 1))]\n      [else (and (not (zero? count))\n      \
    \           (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\)) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \          [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty?\
    \ (rest brackets)) #f]\n    [(equal? (first brackets) \"(\")\n     (and (correct_bracketing\
    \ (rest brackets))\n          (correct_bracketing (rest (rest brackets))))]\n\
    \    [(equal? (first brackets) \")\")\n     (and (correct_bracketing (rest brackets))\n\
    \          (correct_bracketing (rest (rest brackets))))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(symbol=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(symbol=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first\
    \ brackets) #\\()\n           (helper (rest brackets) (+ count 1))]\n        \
    \  [(char=? (first brackets) #\\))\n           (and (> count 0)\n            \
    \    (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let\
    \ loop ([brackets brackets] [count 0])\n    (cond [(empty? brackets) (= count\
    \ 0)]\n          [(char=? (first brackets) #\\()\n           (loop (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\))\n           (and (positive?\
    \ count)\n                (loop (rest brackets) (- count 1)))]\n          [else\
    \ #f])))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ open-count)\n    (cond [(empty? brackets) (zero? open-count)]\n          [(char=?\
    \ (first brackets) #\\()\n           (helper (rest brackets) (+ open-count 1))]\n\
    \          [(char=? (first brackets) #\\))\n           (and (positive? open-count)\n\
    \                (helper (rest brackets) (- open-count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first brackets)\
    \ \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets open-brackets)\n    (cond\n      [(empty? brackets) (zero? open-brackets)]\n\
    \      [(char=? (first brackets) #\\()\n       (helper (rest brackets) (+ open-brackets\
    \ 1))]\n      [(char=? (first brackets) #\\))\n       (and (positive? open-brackets)\n\
    \            (helper (rest brackets) (- open-brackets 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\()\n           (helper (rest brackets) (+ count\
    \ 1))]\n          [(char=? (first brackets) #\\))\n           (and (> count 0)\n\
    \                (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\()\n           (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\))\n       \
    \    (and (< count 1)\n                (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (correct_bracketing-iter brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\()\n       (correct_bracketing-iter\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\n     \
    \  (and (not (zero? count))\n            (correct_bracketing-iter (rest brackets)\
    \ (- count 1)))]))\n  (correct_bracketing-iter brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (helper (rest brackets) (+ count 1))]\n \
    \         [(char=? (first brackets) #\\))\n           (and (positive? count)\n\
    \                (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"(\")\n     (and (equal? (first (rest brackets))\
    \ \")\")\n          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets)\
    \ \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets open-count)\n    (cond\n      [(empty? brackets) (= open-count\
    \ 0)]\n      [(char=? (first brackets) #\\()\n       (helper (rest brackets) (+\
    \ open-count 1))]\n      [(char=? (first brackets) #\\))\n       (and (> open-count\
    \ 0)\n            (helper (rest brackets) (- open-count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets n)\n    (cond\n      [(empty?\
    \ brackets) (= n 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ n 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? n)) (helper\
    \ (rest brackets) (- n 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n          [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets open-count)\n\
    \    (cond [(empty? brackets) (zero? open-count)]\n          [(char=? (first brackets)\
    \ #\\()\n           (helper (rest brackets) (+ open-count 1))]\n          [(char=?\
    \ (first brackets) #\\))\n           (and (positive? open-count)\n           \
    \     (helper (rest brackets) (- open-count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n          [(char=?\
    \ (first brackets) #\\)) (and (positive? count) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond [(empty? brackets) (zero? count)]\n          [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\)) (and (positive? count) (helper (rest brackets) (- count 1)))]\n      \
    \    [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets open-count)\n    (cond\n      [(empty? brackets) (= open-count\
    \ 0)]\n      [(char=? (first brackets) #\\()\n       (helper (rest brackets) (+\
    \ open-count 1))]\n      [(char=? (first brackets) #\\))\n       (and (positive?\
    \ open-count)\n            (helper (rest brackets) (- open-count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (positive? count) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (correct_bracketing_helper brackets\
    \ open_count)\n    (cond\n      [(empty? brackets) (= open_count 0)]\n      [(char=?\
    \ (first brackets) #\\()\n       (correct_bracketing_helper (rest brackets) (+\
    \ open_count 1))]\n      [(char=? (first brackets) #\\))\n       (and (positive?\
    \ open_count)\n            (correct_bracketing_helper (rest brackets) (- open_count\
    \ 1)))]))\n  (correct_bracketing_helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\()\n           (helper (rest brackets) (+ count\
    \ 1))]\n          [(char=? (first brackets) #\\))\n           (and (> count 0)\n\
    \                (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(char=? (first brackets) #\\()\n     (correct_bracketing (rest brackets))]\n\
    \    [(char=? (first brackets) #\\))\n     (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (iter\
    \ count brackets)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\() (iter (+ count 1) (rest brackets))]\n          [(char=?\
    \ (first brackets) #\\)) (iter (- count 1) (rest brackets))]\n          [else\
    \ (iter count (rest brackets))]))\n  (iter 0 brackets))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (positive? count) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond [(empty? brackets) (zero? count)]\n          [(char=? (first brackets)\
    \ #\\()\n           (helper (rest brackets) (+ count 1))]\n          [(char=?\
    \ (first brackets) #\\))\n           (and (positive? count)\n                (helper\
    \ (rest brackets) (- count 1)))]\n          [else (helper (rest brackets) count)]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (correct-bracketing-helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\n       (correct-bracketing-helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\n     \
    \  (and (positive? count)\n            (correct-bracketing-helper (rest brackets)\
    \ (- count 1)))]))\n  (correct-bracketing-helper brackets 0))\n", "  (cond\n \
    \   [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first\
    \ brackets) \"(\")\n     (and (correct_bracketing (rest brackets))\n         \
    \ (equal? (first (rest brackets)) \")\"))]\n    [else (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\()\n           (helper\
    \ (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\))\n \
    \          (and (not (zero? count))\n                (helper (rest brackets) (-\
    \ count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\()\n           (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\))\n       \
    \    (and (not (zero? count))\n                (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \          [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\()\n           (helper (rest brackets) (+ count\
    \ 1))]\n          [(char=? (first brackets) #\\))\n           (and (< count 1)\n\
    \                (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (correct-bracketing-iter brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\()\n       (correct-bracketing-iter (rest brackets) (+ count 1))]\n     \
    \ [(char=? (first brackets) #\\))\n       (and (positive? count)\n           \
    \ (correct-bracketing-iter (rest brackets) (- count 1)))]))\n  (correct-bracketing-iter\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(=\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(= (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\)) (and (positive?\
    \ count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \          [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n```\n\n### Exercise 2.3.3\n\n```racket\n#lang racket\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (correct_bracketing-helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\()\n       (correct_bracketing-helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\))\n       (and (positive? count)\n\
    \            (correct_bracketing-helper (rest brackets) (- count 1)))]))\n  (correct_bracketing-helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(equal?\
    \ (first brackets) \"(\") (helper (rest brackets) (+ count 1))]\n      [(equal?\
    \ (first brackets) \")\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets counter)\n \
    \   (cond\n      [(empty? brackets) (= counter 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ counter 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? counter)) (helper (rest brackets) (- counter 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\)) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets open-count)\n    (cond\n      [(empty?\
    \ brackets) (= open-count 0)]\n      [(char=? (first brackets) #\\()\n       (helper\
    \ (rest brackets) (+ open-count 1))]\n      [(char=? (first brackets) #\\))\n\
    \       (and (positive? open-count)\n            (helper (rest brackets) (- open-count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets open-count)\n\
    \    (cond\n      [(empty? brackets) (= open-count 0)]\n      [(char=? (first\
    \ brackets) #\\()\n       (helper (rest brackets) (+ open-count 1))]\n      [(char=?\
    \ (first brackets) #\\))\n       (and (> open-count 0)\n            (helper (rest\
    \ brackets) (- open-count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets left right)\n    (cond\n      [(empty? brackets) (= left right)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ left 1) right)]\n\
    \      [(char=? (first brackets) #\\)) (helper (rest brackets) left (+ right 1))]\n\
    \      [else (helper (rest brackets) left right)]))\n  (helper brackets 0 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (helper (rest brackets) (+ count 1))]\n \
    \         [(char=? (first brackets) #\\))\n           (and (> count 0)\n     \
    \           (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(char=? (first brackets)\
    \ #\\()\n     (if (char=? (first (rest brackets)) #\\))\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         #f)]\n    [(char=? (first brackets) #\\))\
    \ #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \")\") #f]\n    [(equal? (first brackets)\
    \ \"(\")\n     (if (equal? (first (rest brackets)) \")\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (positive? count) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid input\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (zero? count)]\n          [(char=? (first brackets) #\\()\n           (helper\
    \ (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\))\n \
    \          (and (positive? count)\n                (helper (rest brackets) (-\
    \ count 1)))]\n          [else (helper (rest brackets) count)]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\()\n           (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\))\n       \
    \    (and (> count 0)\n                (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper str)\n    (cond\n      [(empty?\
    \ str) #t]\n      [(char=? (first str) #\\() (helper (rest str))]\n      [(char=?\
    \ (first str) #\\)) (and (not (empty? str)) (helper (rest str)))]))\n  (helper\
    \ (string->list brackets)))\n", "  (define (helper brackets count)\n    (cond\
    \ [(empty? brackets) (= count 0)]\n          [(char=? (first brackets) #\\()\n\
    \           (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\))\n           (and (positive? count)\n                (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]\n    \
    \  [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\()\n           (helper (rest brackets) (+ count\
    \ 1))]\n          [(char=? (first brackets) #\\))\n           (and (< count 1)\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\()\n           (helper (rest brackets) (+ count\
    \ 1))]\n          [(char=? (first brackets) #\\))\n           (and (< count 1)\n\
    \                (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\()\n           (helper (rest brackets) (+ count\
    \ 1))]\n          [(char=? (first brackets) #\\))\n           (and (not (= count\
    \ 0))\n                (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (correct-bracketing-helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\()\n       (correct-bracketing-helper (rest brackets) (+\
    \ count 1))]\n      [(char=? (first brackets) #\\))\n       (and (positive? count)\n\
    \            (correct-bracketing-helper (rest brackets) (- count 1)))]))\n  (correct-bracketing-helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first\
    \ brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (< count 1) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (zero? count)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (positive? count)\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\()\n           (helper (rest brackets) (+ count 1))]\n          [(char=?\
    \ (first brackets) #\\))\n           (and (< count 1)\n                (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (zero? count)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [(equal? (first brackets) \"(\")\n     (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond [(empty? brackets) #t]\n        [(equal? (first brackets) \")\") #f]\n\
    \        [else (correct_bracketing (rest brackets))]))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (helper (rest brackets) (+ count 1))]\n \
    \         [(char=? (first brackets) #\\))\n           (and (> count 0)\n     \
    \           (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets open-count)\n\
    \    (cond [(empty? brackets) (= open-count 0)]\n          [(char=? (first brackets)\
    \ #\\()\n           (helper (rest brackets) (+ open-count 1))]\n          [(char=?\
    \ (first brackets) #\\))\n           (and (> open-count 0)\n                (helper\
    \ (rest brackets) (- open-count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(= (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n    \
    \  [(= (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets open-count)\n    (cond\n      [(empty? brackets) (=\
    \ open-count 0)]\n      [(char=? (first brackets) #\\()\n       (helper (rest\
    \ brackets) (+ open-count 1))]\n      [(char=? (first brackets) #\\))\n      \
    \ (and (positive? open-count)\n            (helper (rest brackets) (- open-count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets brackets] [count\
    \ 0])\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\()\n           (loop (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\))\n           (and (< count 1)\n                (loop (rest brackets)\
    \ (- count 1)))])))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (positive?\
    \ count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (helper (rest brackets) (+ count 1))]\n \
    \         [(char=? (first brackets) #\\))\n           (and (not (zero? count))\n\
    \                (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (correct_bracketing_iter brackets open-count)\n    (cond\n\
    \      [(empty? brackets) (= open-count 0)]\n      [(char=? (first brackets) #\\\
    ()\n       (correct_bracketing_iter (rest brackets) (+ open-count 1))]\n     \
    \ [(char=? (first brackets) #\\))\n       (and (positive? open-count)\n      \
    \      (correct_bracketing_iter (rest brackets) (- open-count 1)))]))\n  (correct_bracketing_iter\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\)) (and (positive? count)\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(= (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n    \
    \  [(= (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper\
    \ (rest brackets) (+ count 1))]\n      [else (and (not (zero? count))\n      \
    \           (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"(\")\n     (and (equal? (first (rest brackets)) \")\")\n\
    \          (correct_bracketing (rest (rest brackets))))]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
