name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n#| Write a function vowels_count which takes a string representing\n\
  a word as input and returns the number of vowels in the string.\nVowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it\
  \ is at the end of the given word.\nExample:\n>>> (vowels_count \"abcde\")\n2\n\
  >>> (vowels_count \"ACEDY\")\n3|#\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\\
    e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n\
    \  (define (vowels-count-iter s i)\n    (if (or (eq? i (string-length s))\n  \
    \          (not (vowel? (string-ref s i))))\n        0\n        (+ 1 (vowels-count-iter\
    \ s (+ i 1)))))\n  (vowels-count-iter s 0))\n", "  (define (is-vowel? c)\n   \
    \ (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-last-char? i)\n    (=\
    \ i (- (string-length s) 1)))\n  (define (is-y? c)\n    (and (char=? c #\\y) (is-last-char?\
    \ i)))\n  (define (count-vowels i)\n    (cond\n      [(is-vowel? (string-ref s\
    \ i)) (+ 1 (count-vowels (+ i 1)))]\n      [(is-y? (string-ref s i)) (+ 1 (count-vowels\
    \ (+ i 1)))]\n      [else (count-vowels (+ i 1))]))\n  (count-vowels 0))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\\
    u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_at_end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (if (null? s)\n        0\n        (let ((first\
    \ (car s))\n              (rest (cdr s)))\n          (if (is_vowel? first)\n \
    \             (+ 1 (count-vowels rest))\n              (count-vowels rest)))))\n\
    \  (let ((last-char (string-ref s (- (string-length s) 1))))\n    (if (is_vowel_at_end?\
    \ last-char)\n        (+ 1 (count-vowels (substring s 0 (- (string-length s) 1))))\n\
    \        (count-vowels s))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\a)\n             (char=?\
    \ (first s) #\\e)\n             (char=? (first s) #\\i)\n             (char=?\
    \ (first s) #\\o)\n             (char=? (first s) #\\u))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [(and (char=? (first s) #\\y)\n              (empty? (rest\
    \ s)))\n         (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (let loop ((s s) (v 0))\n    (cond ((null? s) v)\n          ((or (char=? (car\
    \ s) #\\a)\n               (char=? (car s) #\\e)\n               (char=? (car\
    \ s) #\\i)\n               (char=? (car s) #\\o)\n               (char=? (car\
    \ s) #\\u)\n               (and (char=? (car s) #\\y)\n                    (null?\
    \ (cdr s))))\n           (loop (cdr s) (+ v 1)))\n          (else (loop (cdr s)\
    \ v)))))\n", "  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c\
    \ #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\\
    u)))\n  (define (vowels-count-iter s count)\n    (cond\n      [(empty? s) count]\n\
    \      [(vowel? (first s)) (vowels-count-iter (rest s) (+ count 1))]\n      [else\
    \ (vowels-count-iter (rest s) count)]))\n  (vowels-count-iter s 0))\n", "  (define\
    \ (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-iter\
    \ s i)\n    (if (or (char=? (string-ref s i) #\\y)\n            (vowel? (string-ref\
    \ s i)))\n        (+ 1 (vowels-count-iter s (+ i 1)))\n        (vowels-count-iter\
    \ s (+ i 1))))\n  (vowels-count-iter s 0))\n", "  (let loop ([s s] [n 0])\n  \
    \  (cond [(empty? s) n]\n          [(or (char=? (first s) #\\a)\n            \
    \   (char=? (first s) #\\e)\n               (char=? (first s) #\\i)\n        \
    \       (char=? (first s) #\\o)\n               (char=? (first s) #\\u))\n   \
    \        (loop (rest s) (+ n 1))]\n          [(and (char=? (first s) #\\y)\n \
    \               (empty? (rest s)))\n           (loop (rest s) (+ n 1))]\n    \
    \      [else (loop (rest s) n)])))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (vowels-count-helper s count)\n    (if (string-empty?\
    \ s)\n        count\n        (let ((c (string-ref s 0)))\n          (if (vowel?\
    \ c)\n              (vowels-count-helper (string-drop s 1) (+ count 1))\n    \
    \          (vowels-count-helper (string-drop s 1) count)))))\n  (vowels-count-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u)))\n  (define (is-y? c)\n    (and (char=? c #\\y)\n         (not (char=?\
    \ c (string-ref s (sub1 (string-length s)))))))\n  (define (count-vowels s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(or (is-vowel? (first s)) (is-y? (first\
    \ s)))\n       (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels (rest\
    \ s))]))\n  (count-vowels s))\n", "  (define (is-vowel? c)\n    (or (char=? c\
    \ #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\\
    o)\n        (char=? c #\\u)))\n  (define (is-last-vowel? c)\n    (or (char=? c\
    \ #\\y)\n        (is-vowel? c)))\n  (define (count-vowels s)\n    (if (null? s)\n\
    \        0\n        (+ (if (is-vowel? (car s)) 1 0)\n           (count-vowels\
    \ (cdr s)))))\n  (if (null? s)\n      0\n      (+ (if (is-last-vowel? (car (reverse\
    \ s))) 1 0)\n         (count-vowels (reverse (cdr (reverse s)))))))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-last-vowel?\
    \ c)\n    (and (is-vowel? c)\n         (not (is-vowel? (string-ref s (sub1 (string-length\
    \ s)))))))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n    \
    \  [(is-last-vowel? (first s)) (+ 1 (count-vowels (rest s)))]\n      [(is-vowel?\
    \ (first s)) (count-vowels (rest s))]\n      [else (count-vowels (rest s))]))\n\
    \  (count-vowels s))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n \
    \       (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n  \
    \      (char=? c #\\u)))\n  (define (is-last-char? i)\n    (= i (- (string-length\
    \ s) 1)))\n  (define (is-y? c)\n    (and (char=? c #\\y)\n         (is-last-char?\
    \ i)))\n  (define (count-vowels i)\n    (if (or (is-vowel? (string-ref s i))\n\
    \            (is-y? (string-ref s i)))\n        (+ 1 (count-vowels (+ i 1)))\n\
    \        (count-vowels (+ i 1))))\n  (count-vowels 0))\n", "  (define (vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (vowels-in-word s)\n\
    \    (if (empty? s)\n        0\n        (if (vowel? (first s))\n            (+\
    \ 1 (vowels-in-word (rest s)))\n            (vowels-in-word (rest s)))))\n  (define\
    \ (vowels-in-word-ending-with-y s)\n    (if (empty? s)\n        0\n        (if\
    \ (and (vowel? (first s)) (not (vowel? (second s))))\n            (+ 1 (vowels-in-word\
    \ (rest s)))\n            (vowels-in-word (rest s)))))\n  (if (vowel? (last s))\n\
    \      (vowels-in-word-ending-with-y s)\n      (vowels-in-word s)))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n       \
    \ (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=?\
    \ c #\\u)))\n  (define (is-last-char? i)\n    (= i (- (string-length s) 1)))\n\
    \  (define (is-vowel-at-end? c)\n    (and (is-vowel? c) (is-last-char? i)))\n\
    \  (define (is-y-at-end? c)\n    (and (char=? c #\\y) (is-last-char? i)))\n  (define\
    \ (is-y-vowel? c)\n    (or (is-vowel-at-end? c) (is-y-at-end? c)))\n  (define\
    \ (is-vowel-or-y? c)\n    (or (is-vowel? c) (is-y-vowel? c)))\n  (for/sum ([i\
    \ (in-range (string-length s))]\n            #:when (is-vowel-or-y? (string-ref\
    \ s i)))\n    1))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n    \
    \    (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n     \
    \   (char=? c #\\u)))\n  (define (is-y? c)\n    (char=? c #\\y))\n  (define (is-last-char?\
    \ i)\n    (= i (- (string-length s) 1)))\n  (define (vowels-count-iter i count)\n\
    \    (if (= i (string-length s))\n        count\n        (let ((c (string-ref\
    \ s i)))\n          (if (and (is-y? c) (is-last-char? i))\n              (vowels-count-iter\
    \ (+ i 1) (+ count 1))\n              (if (is-vowel? c)\n                  (vowels-count-iter\
    \ (+ i 1) (+ count 1))\n                  (vowels-count-iter (+ i 1) count))))))\n\
    \  (vowels-count-iter 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n     \
    \   (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (vowels-in-word s)\n    (cond ((empty? s) 0)\n          ((vowel? (first s))\n\
    \           (+ 1 (vowels-in-word (rest s))))\n          (else (vowels-in-word\
    \ (rest s)))))\n  (cond ((empty? s) 0)\n        ((vowel? (last s))\n         (+\
    \ 1 (vowels-in-word (butlast s))))\n        (else (vowels-in-word (butlast s)))))\n",
  "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is_last_y s)\n    (and (equal? (string-length s) 1)\n         (equal? (string-ref\
    \ s 0) #\\y)))\n  (define (is_y s)\n    (and (equal? (string-length s) 2)\n  \
    \       (equal? (string-ref s 1) #\\y)))\n  (cond\n    [(empty? s) 0]\n    [(is_vowel\
    \ (string-ref s 0))\n     (+ 1 (vowels_count (substring s 1)))]\n    [(is_last_y\
    \ s) 1]\n    [(is_y s) (vowels_count (substring s 1))]\n    [else (vowels_count\
    \ (substring s 1))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u)))\n  (define (is-vowel-at-end? c)\n    (and (is-vowel? c)\n\
    \         (not (is-vowel? (string-ref s (- (string-length s) 2))))))\n  (define\
    \ (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel-at-end?\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [(is-vowel? (first s)) (count-vowels\
    \ (rest s))]\n      [else (count-vowels (rest s))]))\n  (count-vowels (string->list\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n  \
    \       (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (define (helper s\
    \ count)\n    (cond\n      [(empty? s) count]\n      [(or (char=? (first s) #\\\
    a)\n           (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n \
    \          (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n    \
    \   (helper (rest s) (+ count 1))]\n      [(and (char=? (first s) #\\y)\n    \
    \        (empty? (rest s)))\n       (helper (rest s) (+ count 1))]\n      [else\
    \ (helper (rest s) count)]))\n  (helper s 0))\n", "  (define (is-vowel? c)\n \
    \   (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n  \
    \      (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (cond [(empty? s) 0]\n          [(is-vowel? (first\
    \ s)) (+ 1 (count-vowels (rest s)))]\n          [else (count-vowels (rest s))]))\n\
    \  (cond [(empty? s) 0]\n        [(is-vowel-at-end? (last s)) (+ 1 (count-vowels\
    \ (butlast s)))]\n        [else (count-vowels s)]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (vowels-count-helper s count)\n    (if (string-empty? s)\n        count\n\
    \        (if (is-vowel? (string-ref s 0))\n            (vowels-count-helper (substring\
    \ s 1) (+ count 1))\n            (vowels-count-helper (substring s 1) count))))\n\
    \  (if (is-vowel-at-end? (string-ref s (- (string-length s) 1)))\n      (vowels-count-helper\
    \ s 1)\n      (vowels-count-helper s 0)))\n", "  (define (is-vowel? c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end? c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-vowel? (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n          [else (count-vowels (rest s))]))\n  (cond [(empty? s)\
    \ 0]\n        [(is-vowel-at-end? (last s)) (+ 1 (count-vowels (butlast s)))]\n\
    \        [else (count-vowels s)]))\n", "  (define (is-vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((is-vowel (car s)) (+ 1 (count-vowels\
    \ (cdr s))))\n          (else (count-vowels (cdr s)))))\n  (cond ((null? s) 0)\n\
    \        ((is-vowel-at-end (car (reverse s))) (+ 1 (count-vowels (reverse (cdr\
    \ (reverse s))))))\n        (else (count-vowels (reverse (cdr (reverse s)))))))\n",
  "  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n      \
    \  (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (vowels-in-word s)\n    (if (empty? s)\n        0\n        (if (vowel? (first\
    \ s))\n            (+ 1 (vowels-in-word (rest s)))\n            (vowels-in-word\
    \ (rest s)))))\n  (if (empty? s)\n      0\n      (if (vowel? (last s))\n     \
    \     (+ 1 (vowels-in-word (butlast s)))\n          (vowels-in-word (butlast s)))))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-y? c)\n    (char=? c #\\y))\n  (define (is-vowel-or-y? c)\n    (or (is-vowel?\
    \ c)\n        (is-y? c)))\n  (define (is-last-char? c)\n    (char=? c (string-ref\
    \ s (- (string-length s) 1))))\n  (define (is-y-at-end? c)\n    (and (is-y? c)\n\
    \         (is-last-char? c)))\n  (define (is-vowel-at-end? c)\n    (and (is-vowel?\
    \ c)\n         (is-last-char? c)))\n  (define (is-vowel-or-y-at-end? c)\n    (or\
    \ (is-vowel-at-end? c)\n        (is-y-at-end? c)))\n  (define (is-vowel-or-y-at-end-or-not-y?\
    \ c)\n    (or (is-vowel-or-y-at-end? c)\n        (not (is-y? c))))\n  (define\
    \ (count-vowels-or-y-at-end s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel-or-y-at-end-or-not-y?\
    \ (first s))\n       (+ (count-vowels-or-y-at-end (rest s)) 1)]\n      [else (count-vowels-or-y-at-end\
    \ (rest s))]))\n  (count-vowels-or-y-at-end (string->list s)))\n", "  (let loop\
    \ ([i 0] [c 0])\n    (cond [(= i (string-length s)) c]\n          [(or (char=?\
    \ (string-ref s i) #\\a)\n               (char=? (string-ref s i) #\\e)\n    \
    \           (char=? (string-ref s i) #\\i)\n               (char=? (string-ref\
    \ s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n               (and\
    \ (char=? (string-ref s i) #\\y)\n                    (= i (- (string-length s)\
    \ 1))))\n           (loop (+ i 1) (+ c 1))]\n          [else (loop (+ i 1) c)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-iter s i)\n    (if\
    \ (= i (string-length s))\n        0\n        (if (vowel? (string-ref s i))\n\
    \            (+ 1 (vowels-count-iter s (+ i 1)))\n            (vowels-count-iter\
    \ s (+ i 1)))))\n  (vowels-count-iter s 0))\n", "  (define (is-vowel? c)\n   \
    \ (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-last-y? s)\n    (and\
    \ (string=? (substring s -1) \"y\")\n         (not (string=? (substring s -2)\
    \ \"ay\"))))\n  (define (is-vowel-or-last-y? c)\n    (or (is-vowel? c)\n     \
    \   (is-last-y? s)))\n  (define (count-vowels s)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(is-vowel-or-last-y? (first s)) (+ 1 (count-vowels (rest s)))]\n\
    \      [else (count-vowels (rest s))]))\n  (count-vowels s))\n", "  (define (vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-iter\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (vowel? (string-ref\
    \ s i))\n            (+ 1 (vowels-count-iter s (+ i 1)))\n            (vowels-count-iter\
    \ s (+ i 1)))))\n  (vowels-count-iter s 0))\n", "  (define (is-vowel c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((is-vowel (car s)) (+ 1 (count-vowels\
    \ (cdr s))))\n          (else (count-vowels (cdr s)))))\n  (if (is-vowel-at-end\
    \ (string-ref s (- (string-length s) 1)))\n      (+ 1 (count-vowels (substring\
    \ s 0 (- (string-length s) 1))))\n      (count-vowels s)))\n", "  (define (vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-helper\
    \ s n)\n    (if (empty? s)\n        n\n        (if (vowel? (first s))\n      \
    \      (vowels-count-helper (rest s) (+ n 1))\n            (vowels-count-helper\
    \ (rest s) n))))\n  (vowels-count-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-last-vowel c)\n    (or (char=? c #\\y)\n        (is-vowel\
    \ c)))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels (rest s))]))\n\
    \  (cond\n    [(empty? s) 0]\n    [(is-last-vowel (last s)) (+ 1 (count-vowels\
    \ (butlast s)))]\n    [else (count-vowels s)]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n\
    \         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n        \
    \ (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (helper s acc)\n\
    \    (cond [(empty? s) acc]\n          [(char-ci=? (first s) #\\a) (helper (rest\
    \ s) (+ acc 1))]\n          [(char-ci=? (first s) #\\e) (helper (rest s) (+ acc\
    \ 1))]\n          [(char-ci=? (first s) #\\i) (helper (rest s) (+ acc 1))]\n \
    \         [(char-ci=? (first s) #\\o) (helper (rest s) (+ acc 1))]\n         \
    \ [(char-ci=? (first s) #\\u) (helper (rest s) (+ acc 1))]\n          [(char-ci=?\
    \ (first s) #\\y) (helper (rest s) (+ acc 1))]\n          [else (helper (rest\
    \ s) acc)]))\n  (helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n    \
    \    (char=? c #\\y)))\n  (define (count-vowels s)\n    (if (null? s)\n      \
    \  0\n        (if (is-vowel? (car s))\n            (+ 1 (count-vowels (cdr s)))\n\
    \            (count-vowels (cdr s)))))\n  (if (null? s)\n      0\n      (if (is-vowel-at-end?\
    \ (car (reverse s)))\n          (+ 1 (count-vowels (reverse (cdr (reverse s)))))\n\
    \          (count-vowels (reverse (cdr (reverse s)))))))\n", "  (let loop ([s\
    \ s] [count 0])\n    (cond [(empty? s) count]\n          [(or (char=? (first s)\
    \ #\\a)\n               (char=? (first s) #\\e)\n               (char=? (first\
    \ s) #\\i)\n               (char=? (first s) #\\o)\n               (char=? (first\
    \ s) #\\u))\n           (loop (rest s) (+ count 1))]\n          [(and (char=?\
    \ (first s) #\\y)\n                (empty? (rest s)))\n           (loop (rest\
    \ s) (+ count 1))]\n          [else (loop (rest s) count)])))\n", "  (define (vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (vowels-in-string\
    \ s)\n    (if (empty? s)\n        '()\n        (if (vowel? (first s))\n      \
    \      (cons (first s) (vowels-in-string (rest s)))\n            (vowels-in-string\
    \ (rest s)))))\n  (length (vowels-in-string s)))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (is-y? c)\n    (char=? c #\\y))\n  (define\
    \ (is-last-char? c)\n    (char=? c (string-ref s (- (string-length s) 1))))\n\
    \  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel?\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [(is-y? (first s)) (if (is-last-char?\
    \ (first s))\n                             (+ 1 (count-vowels (rest s)))\n   \
    \                          (count-vowels (rest s)))]\n      [else (count-vowels\
    \ (rest s))]))\n  (count-vowels (string->list s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n       \
    \ (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=?\
    \ c #\\u)))\n  (define (is-last-vowel? c)\n    (or (char=? c #\\y)\n        (is-vowel?\
    \ c)))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel?\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels (rest s))]))\n\
    \  (cond\n    [(empty? s) 0]\n    [(is-last-vowel? (last s)) (+ 1 (count-vowels\
    \ (butlast s)))]\n    [else (count-vowels s)]))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (vowels-count-helper s)\n    (if (null? s)\n        0\n        (if\
    \ (is-vowel? (car s))\n            (+ 1 (vowels-count-helper (cdr s)))\n     \
    \       (vowels-count-helper (cdr s)))))\n  (if (and (not (null? s))\n       \
    \    (is-vowel-at-end? (car (reverse s))))\n      (+ 1 (vowels-count-helper (reverse\
    \ (cdr (reverse s)))))\n      (vowels-count-helper s)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-y? c)\n    (and\
    \ (char=? c #\\y)\n         (not (char=? (string-ref s (sub1 (string-length s)))\
    \ c))))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(or\
    \ (is-vowel? (first s)) (is-y? (first s)))\n       (+ 1 (count-vowels (rest s)))]\n\
    \      [else (count-vowels (rest s))]))\n  (count-vowels s))\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n      [(or (char=?\
    \ (first s) #\\a)\n           (char=? (first s) #\\e)\n           (char=? (first\
    \ s) #\\i)\n           (char=? (first s) #\\o)\n           (char=? (first s) #\\\
    u))\n       (helper (rest s) (+ count 1))]\n      [(and (char=? (first s) #\\\
    y)\n            (empty? (rest s)))\n       (helper (rest s) (+ count 1))]\n  \
    \    [else (helper (rest s) count)]))\n  (helper s 0))\n", "  (define (vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-iter\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (vowel? (string-ref\
    \ s i))\n            (+ 1 (vowels-count-iter s (+ i 1)))\n            (vowels-count-iter\
    \ s (+ i 1)))))\n  (vowels-count-iter s 0))\n", "  (define (is_vowel c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_y c)\n    (or (char=?\
    \ c #\\y)\n        (is_vowel c)))\n  (define (vowels_count_iter s count)\n   \
    \ (if (string-empty? s)\n        count\n        (if (is_vowel_y (string-ref s\
    \ 0))\n            (vowels_count_iter (substring s 1) (+ count 1))\n         \
    \   (vowels_count_iter (substring s 1) count))))\n  (vowels_count_iter s 0))\n",
  "  (define (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is-vowel-at-end c)\n    (and (is-vowel c) (equal? c (string-ref s (- (string-length\
    \ s) 1)))))\n  (define (is-vowel-at-start c)\n    (and (is-vowel c) (equal? c\
    \ (string-ref s 0))))\n  (define (is-vowel-in-middle c)\n    (and (is-vowel c)\
    \ (not (is-vowel-at-end c)) (not (is-vowel-at-start c))))\n  (define (count-vowels\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-vowel-at-end (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n          [(is-vowel-at-start (first s)) (+ 1 (count-vowels (rest\
    \ s)))]\n          [(is-vowel-in-middle (first s)) (+ 1 (count-vowels (rest s)))]\n\
    \          [else (count-vowels (rest s))]))\n  (count-vowels (string->list s)))\n",
  "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n      [(or (char=?\
    \ (first s) #\\a)\n           (char=? (first s) #\\e)\n           (char=? (first\
    \ s) #\\i)\n           (char=? (first s) #\\o)\n           (char=? (first s) #\\\
    u))\n       (helper (rest s) (+ count 1))]\n      [(and (char=? (first s) #\\\
    y)\n            (empty? (rest s)))\n       (helper (rest s) (+ count 1))]\n  \
    \    [else (helper (rest s) count)]))\n  (helper s 0))\n", "  (define (vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-in-word\
    \ s)\n    (cond ((empty? s) 0)\n          ((vowel? (first s))\n           (+ 1\
    \ (vowels-in-word (rest s))))\n          (else (vowels-in-word (rest s)))))\n\
    \  (cond ((empty? s) 0)\n        ((vowel? (last s))\n         (+ 1 (vowels-in-word\
    \ (butlast s))))\n        (else (vowels-in-word (butlast s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (vowels-in-word s)\n    (cond ((empty? s) 0)\n          ((vowel?\
    \ (first s)) (+ 1 (vowels-in-word (rest s))))\n          (else (vowels-in-word\
    \ (rest s)))))\n  (if (vowel? (last s))\n      (+ 1 (vowels-in-word (butlast s)))\n\
    \      (vowels-in-word (butlast s))))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-y? c)\n    (and (char=? c #\\\
    y)\n         (not (char=? (string-ref s (sub1 (string-length s))) #\\y))))\n \
    \ (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel?\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [(is-y? (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n      [else (count-vowels (rest s))]))\n  (count-vowels s))\n",
  "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(member\
    \ (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n           (loop (rest s) (+ count\
    \ 1))]\n          [(and (equal? (first s) \"y\")\n                (empty? (rest\
    \ s)))\n           (loop (rest s) (+ count 1))]\n          [else (loop (rest s)\
    \ count)])))\n", "  (cond [(empty? s) 0]\n        [(member (first s) '(#\\a #\\\
    e #\\i #\\o #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n        [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o\
    \ #\\u)))\n  (define (vowels-count-helper s n)\n    (cond\n      [(empty? s) n]\n\
    \      [(vowel? (first s)) (vowels-count-helper (rest s) (+ n 1))]\n      [else\
    \ (vowels-count-helper (rest s) n)]))\n  (vowels-count-helper s 0))\n", "  (define\
    \ (is-vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-y\
    \ c)\n    (char=? c #\\y))\n  (define (is-last-y c)\n    (and (is-y c)\n     \
    \    (null? (cdr s))))\n  (define (is-vowel-or-last-y c)\n    (or (is-vowel c)\n\
    \        (is-last-y c)))\n  (length (filter is-vowel-or-last-y s)))\n", "  (define\
    \ (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-in-word\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(vowel? (first s)) (+ 1 (vowels-in-word\
    \ (rest s)))]\n      [else (vowels-in-word (rest s))]))\n  (if (vowel? (last s))\n\
    \      (+ 1 (vowels-in-word (butlast s)))\n      (vowels-in-word (butlast s))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(a e i o u)) (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (let loop ([s s] [n 0])\n    (cond [(empty? s) n]\n    \
    \      [(or (char=? (first s) #\\a)\n               (char=? (first s) #\\e)\n\
    \               (char=? (first s) #\\i)\n               (char=? (first s) #\\\
    o)\n               (char=? (first s) #\\u))\n           (loop (rest s) (+ n 1))]\n\
    \          [(and (char=? (first s) #\\y)\n                (empty? (rest s)))\n\
    \           (loop (rest s) (+ n 1))]\n          [else (loop (rest s) n)])))\n",
  "  (define (vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (vowels-in-word\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(vowel? (first w)) (+ 1 (vowels-in-word\
    \ (rest w)))]\n      [else (vowels-in-word (rest w))]))\n  (vowels-in-word (string->list\
    \ s)))\n", "  (cond [(empty? s) 0]\n        [(member (first s) '(#\\a #\\e #\\\
    i #\\o #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n        [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_last_vowel? c)\n    (or (char=?\
    \ c #\\y)\n        (is_vowel? c)))\n  (define (count-vowels s)\n    (cond\n  \
    \    [(empty? s) 0]\n      [(is_vowel? (first s))\n       (+ 1 (count-vowels (rest\
    \ s)))]\n      [else (count-vowels (rest s))]))\n  (define (count-last-vowel s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(is_last_vowel? (first s))\n       (+\
    \ 1 (count-last-vowel (rest s)))]\n      [else (count-last-vowel (rest s))]))\n\
    \  (+ (count-vowels s)\n     (count-last-vowel s)))\n", "  (define (is_vowel c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_y c)\n    (char=?\
    \ c #\\y))\n  (define (is_last_char c)\n    (char=? c (string-ref s (- (string-length\
    \ s) 1))))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n    \
    \  [(is_vowel (first s)) (+ 1 (count-vowels (rest s)))]\n      [(is_y (first s))\
    \ (+ (if (is_last_char (first s)) 1 0) (count-vowels (rest s)))]\n      [else\
    \ (count-vowels (rest s))]))\n  (count-vowels s))\n", "  (define (vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-iter\
    \ s count)\n    (cond ((null? s) count)\n          ((char=? (car s) #\\y)\n  \
    \         (if (null? (cdr s))\n               (+ count 1)\n               (vowels-count-iter\
    \ (cdr s) count)))\n          ((vowel? (car s))\n           (vowels-count-iter\
    \ (cdr s) (+ count 1)))\n          (else (vowels-count-iter (cdr s) count))))\n\
    \  (vowels-count-iter s 0))\n", "  (define (is-vowel c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (is-vowel-at-end c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels s)\n\
    \    (if (or (string-empty? s)\n            (not (is-vowel (string-ref s 0))))\n\
    \        0\n        (+ 1 (count-vowels (substring s 1)))))\n  (if (string-empty?\
    \ s)\n      0\n      (if (is-vowel-at-end (string-ref s (- (string-length s) 1)))\n\
    \          (+ 1 (count-vowels (substring s 0 (- (string-length s) 1))))\n    \
    \      (count-vowels s))))\n", "  (define (is-vowel c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (is-vowel-at-end c)\n    (and (is-vowel c) (not\
    \ (is-vowel (string-ref s (- (string-length s) 2))))))\n  (define (count-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel-at-end (first s)) (+ 1\
    \ (count-vowels (rest s)))]\n      [(is-vowel (first s)) (+ 1 (count-vowels (rest\
    \ s)))]\n      [else (count-vowels (rest s))]))\n  (count-vowels (string->list\
    \ s)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-last-vowel? c)\n    (and (is-vowel? c)\n         (not (is-vowel?\
    \ (string-ref s (sub1 (string-length s)))))))\n  (define (count-vowels s)\n  \
    \  (cond\n      [(empty? s) 0]\n      [(is-last-vowel? (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n      [(is-vowel? (first s)) (count-vowels (rest s))]\n      [else\
    \ (count-vowels (rest s))]))\n  (count-vowels s))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (let ((vowels '(#\\a #\\e #\\i #\\o #\\u)))\n    (if (empty? s)\n\
    \        0\n        (if (member (first s) vowels)\n            (+ 1 (vowels_count\
    \ (rest s)))\n            (vowels_count (rest s))))))\n", "  (let loop ([s s]\
    \ [count 0])\n    (cond [(empty? s) count]\n          [(char-ci=? (first s) #\\\
    a) (loop (rest s) (+ count 1))]\n          [(char-ci=? (first s) #\\e) (loop (rest\
    \ s) (+ count 1))]\n          [(char-ci=? (first s) #\\i) (loop (rest s) (+ count\
    \ 1))]\n          [(char-ci=? (first s) #\\o) (loop (rest s) (+ count 1))]\n \
    \         [(char-ci=? (first s) #\\u) (loop (rest s) (+ count 1))]\n         \
    \ [(char-ci=? (first s) #\\y) (if (empty? (rest s))\n                        \
    \                 (+ count 1)\n                                         (loop\
    \ (rest s) count))]\n          [else (loop (rest s) count)])))\n", "  (define\
    \ (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal?\
    \ c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_y?\
    \ c)\n    (equal? c #\\y))\n  (define (is_last_y? c)\n    (and (is_y? c)\n   \
    \      (equal? (substring s (sub1 (string-length s)) (string-length s)) \"y\"\
    )))\n  (define (count-vowels s)\n    (cond ((string-empty? s) 0)\n          ((is_last_y?\
    \ (string-ref s 0)) (+ 1 (count-vowels (substring s 1 (string-length s)))))\n\
    \          ((is_vowel? (string-ref s 0)) (+ 1 (count-vowels (substring s 1 (string-length\
    \ s)))))\n          (else (count-vowels (substring s 1 (string-length s))))))\n\
    \  (count-vowels s))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first\
    \ s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-helper\
    \ s n)\n    (if (empty? s)\n        n\n        (if (vowel? (first s))\n      \
    \      (vowels-count-helper (rest s) (+ n 1))\n            (vowels-count-helper\
    \ (rest s) n))))\n  (vowels-count-helper s 0))\n", "  (define (vowel? c)\n   \
    \ (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n    \
    \    (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-helper\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (and (vowel? (string-ref\
    \ s i))\n                 (or (= i (- (string-length s) 1))\n                \
    \     (not (vowel? (string-ref s (+ i 1))))))\n            (+ 1 (vowels-count-helper\
    \ s (+ i 1)))\n            (vowels-count-helper s (+ i 1)))))\n  (vowels-count-helper\
    \ s 0))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is_last_y s)\n    (and (equal? (string-length s) 1)\n         (equal?\
    \ (string-ref s 0) #\\y)))\n  (define (count-vowels s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_vowel (first s)) (+ 1 (count-vowels (rest s)))]\n      [(is_last_y\
    \ s) 1]\n      [else (count-vowels (rest s))]))\n  (count-vowels s))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_last_y c)\n\
    \    (and (char=? c #\\y)\n         (not (char=? c (string-ref s (sub1 (string-length\
    \ s)))))))\n  (define (vowels_count_iter s i)\n    (if (= i (string-length s))\n\
    \        0\n        (+ (if (or (is_vowel (string-ref s i))\n                 \
    \ (is_last_y (string-ref s i)))\n               1\n               0)\n       \
    \    (vowels_count_iter s (add1 i)))))\n  (vowels_count_iter s 0))\n", "  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(or (char=?\
    \ (first s) #\\a)\n               (char=? (first s) #\\e)\n               (char=?\
    \ (first s) #\\i)\n               (char=? (first s) #\\o)\n               (char=?\
    \ (first s) #\\u))\n           (loop (rest s) (+ count 1))]\n          [(and (char=?\
    \ (first s) #\\y) (empty? (rest s)))\n           (loop (rest s) (+ count 1))]\n\
    \          [else (loop (rest s) count)])))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-last-y? s)\n    (and (equal?\
    \ (string-length s) 1)\n         (equal? (string-ref s 0) #\\y)))\n  (cond\n \
    \   [(is-last-y? s) 1]\n    [(is-vowel? (string-ref s 0)) (+ 1 (vowels_count (substring\
    \ s 1)))]\n    [else (vowels_count (substring s 1))]))\n", "  (define (vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (vowels-in-word s)\n\
    \    (if (empty? s)\n        0\n        (if (vowel? (first s))\n            (+\
    \ 1 (vowels-in-word (rest s)))\n            (vowels-in-word (rest s)))))\n  (if\
    \ (empty? s)\n      0\n      (if (vowel? (last s))\n          (+ 1 (vowels-in-word\
    \ (butlast s)))\n          (vowels-in-word (butlast s)))))\n", "  (let loop ([s\
    \ s] [count 0])\n    (cond [(empty? s) count]\n          [(or (char=? (first s)\
    \ #\\a)\n               (char=? (first s) #\\e)\n               (char=? (first\
    \ s) #\\i)\n               (char=? (first s) #\\o)\n               (char=? (first\
    \ s) #\\u))\n           (loop (rest s) (+ count 1))]\n          [(and (char=?\
    \ (first s) #\\y)\n                (empty? (rest s)))\n           (loop (rest\
    \ s) (+ count 1))]\n          [else (loop (rest s) count)])))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s)\
    \ 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n      \
    \   (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) 'y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is-vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-last-char c)\n    (char=? c\
    \ (string-ref s (- (string-length s) 1))))\n  (define (is-y c)\n    (and (char=?\
    \ c #\\y) (is-last-char c)))\n  (define (count-vowels s)\n    (cond ((string=?\
    \ s \"\") 0)\n          ((is-vowel (string-ref s 0)) (+ 1 (count-vowels (substring\
    \ s 1))))\n          ((is-y (string-ref s 0)) (+ 1 (count-vowels (substring s\
    \ 1))))\n          (else (count-vowels (substring s 1)))))\n  (count-vowels s))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal?\
    \ (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal? (first s)\
    \ #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-vowel-at-end c)\n    (and (is-vowel c)\n         (or\
    \ (null? (cdr s))\n             (not (is-vowel (car (cdr s)))))))\n  (define (count-vowels\
    \ s)\n    (if (null? s)\n        0\n        (+ (if (or (is-vowel (car s))\n  \
    \                (is-vowel-at-end (car s)))\n               1\n              \
    \ 0)\n           (count-vowels (cdr s)))))\n  (count-vowels s))\n", "  (define\
    \ (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-iter\
    \ s count)\n    (cond\n      [(empty? s) count]\n      [(vowel? (first s)) (vowels-count-iter\
    \ (rest s) (+ count 1))]\n      [else (vowels-count-iter (rest s) count)]))\n\
    \  (vowels-count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n       \
    \ (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=?\
    \ c #\\u)))\n  (define (is-y? c)\n    (char=? c #\\y))\n  (define (is-y-at-end?\
    \ s)\n    (and (is-y? (string-ref s (- (string-length s) 1)))\n         (not (is-y?\
    \ (string-ref s (- (string-length s) 2))))))\n  (define (count-vowels s)\n   \
    \ (cond ((string=? s \"\") 0)\n          ((is-vowel? (string-ref s 0))\n     \
    \      (+ 1 (count-vowels (substring s 1))))\n          (else (count-vowels (substring\
    \ s 1)))))\n  (if (is-y-at-end? s)\n      (+ 1 (count-vowels (substring s 0 (-\
    \ (string-length s) 1))))\n      (count-vowels s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowel? c)\n   \
    \ (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n    \
    \    (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-helper\
    \ s i)\n    (if (or (= i (string-length s))\n            (not (vowel? (string-ref\
    \ s i))))\n        0\n        (+ 1 (vowels-count-helper s (+ i 1)))))\n  (vowels-count-helper\
    \ s 0))\n", "  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c\
    \ #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\\
    u)))\n  (define (vowels-count-iter s i)\n    (if (= i (string-length s))\n   \
    \     0\n        (if (vowel? (string-ref s i))\n            (+ 1 (vowels-count-iter\
    \ s (+ i 1)))\n            (vowels-count-iter s (+ i 1)))))\n  (vowels-count-iter\
    \ s 0))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels s)\n    (if (string-empty?\
    \ s)\n        0\n        (if (is-vowel? (string-ref s 0))\n            (+ 1 (count-vowels\
    \ (substring s 1)))\n            (count-vowels (substring s 1)))))\n  (if (string-empty?\
    \ s)\n      0\n      (if (is-vowel-at-end? (string-ref s (sub1 (string-length\
    \ s))))\n          (+ 1 (count-vowels (substring s 0 (sub1 (string-length s)))))\n\
    \          (count-vowels (substring s 0 (sub1 (string-length s)))))))\n", "  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_last_char\
    \ c)\n    (char=? c (string-ref s (- (string-length s) 1))))\n  (define (is_y\
    \ c)\n    (and (char=? c #\\y) (is_last_char c)))\n  (define (is_vowel_or_y c)\n\
    \    (or (is_vowel c) (is_y c)))\n  (define (count_vowels s)\n    (cond ((string=?\
    \ s \"\") 0)\n          ((is_vowel_or_y (string-ref s 0))\n           (+ 1 (count_vowels\
    \ (substring s 1))))\n          (else (count_vowels (substring s 1)))))\n  (count_vowels\
    \ s))\n", "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c\
    \ #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\\
    u)))\n  (define (is_vowel_at_end? c)\n    (and (is_vowel? c)\n         (equal?\
    \ (string-length s) (add1 (string-index c s)))))\n  (define (count-vowels s)\n\
    \    (cond [(empty? s) 0]\n          [(is_vowel_at_end? (first s)) (add1 (count-vowels\
    \ (rest s)))]\n          [(is_vowel? (first s)) (add1 (count-vowels (rest s)))]\n\
    \          [else (count-vowels (rest s))]))\n  (count-vowels s))\n", "  (define\
    \ (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_last_y\
    \ c)\n    (and (equal? c #\\y)\n         (equal? (string-length s) (add1 (string-index\
    \ c s)))))\n  (define (is_vowel_y c)\n    (or (is_vowel c) (is_last_y c)))\n \
    \ (define (count_vowels s)\n    (cond [(empty? s) 0]\n          [(is_vowel_y (first\
    \ s)) (add1 (count_vowels (rest s)))]\n          [else (count_vowels (rest s))]))\n\
    \  (count_vowels s))\n", "  (define (vowel? c)\n    (or (char=? c #\\a)\n    \
    \    (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n     \
    \   (char=? c #\\u)))\n  (define (vowels-count-iter s i)\n    (if (or (= i (string-length\
    \ s))\n            (and (= i (- (string-length s) 1))\n                 (not (vowel?\
    \ (string-ref s i)))))\n        0\n        (+ (if (vowel? (string-ref s i)) 1\
    \ 0)\n           (vowels-count-iter s (+ i 1)))))\n  (vowels-count-iter s 0))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-last-char? c)\n    (char=? c (string-ref s (- (string-length s) 1))))\n\
    \  (define (is-y? c)\n    (char=? c #\\y))\n  (define (count-vowels s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is-vowel? (first s)) (+ 1 (count-vowels (rest s)))]\n\
    \      [(is-y? (first s)) (if (is-last-char? (first s))\n                    \
    \         (+ 1 (count-vowels (rest s)))\n                             (count-vowels\
    \ (rest s)))]\n      [else (count-vowels (rest s))]))\n  (count-vowels s))\n",
  "  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n      \
    \  (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (vowels-count-helper s i)\n    (if (= i (string-length s))\n        0\n    \
    \    (if (vowel? (string-ref s i))\n            (+ 1 (vowels-count-helper s (+\
    \ i 1)))\n            (vowels-count-helper s (+ i 1)))))\n  (if (vowel? (string-ref\
    \ s (- (string-length s) 1)))\n      (vowels-count-helper s 0)\n      (vowels-count-helper\
    \ s 0)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-vowel-at-end? c)\n    (and (is-vowel? c)\n         (or\
    \ (null? (cdr s))\n             (not (is-vowel? (car (cdr s)))))))\n  (define\
    \ (count-vowels s)\n    (cond ((null? s) 0)\n          ((is-vowel-at-end? (car\
    \ s))\n           (+ 1 (count-vowels (cdr s))))\n          ((is-vowel? (car s))\n\
    \           (+ 1 (count-vowels (cdr s))))\n          (else (count-vowels (cdr\
    \ s)))))\n  (count-vowels s))\n", "  (define (is-vowel? c)\n    (or (char=? c\
    \ #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\\
    o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (if (null? s)\n        0\n        (if (is-vowel? (car s))\n        \
    \    (+ 1 (count-vowels (cdr s)))\n            (count-vowels (cdr s)))))\n  (if\
    \ (null? s)\n      0\n      (if (is-vowel-at-end? (car (reverse s)))\n       \
    \   (+ 1 (count-vowels (reverse (cdr (reverse s)))))\n          (count-vowels\
    \ (reverse (cdr (reverse s)))))))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-last-char? c)\n    (char=? c\
    \ (string-ref s (- (string-length s) 1))))\n  (define (is-y? c)\n    (char=? c\
    \ #\\y))\n  (define (count-vowels s)\n    (cond ((string=? s \"\") 0)\n      \
    \    ((and (is-vowel? (string-ref s 0))\n                (not (is-y? (string-ref\
    \ s 0))))\n           (+ 1 (count-vowels (substring s 1))))\n          ((and (is-vowel?\
    \ (string-ref s 0))\n                (is-y? (string-ref s 0))\n              \
    \  (is-last-char? (string-ref s 0)))\n           (+ 1 (count-vowels (substring\
    \ s 1))))\n          (else (count-vowels (substring s 1)))))\n  (count-vowels\
    \ s))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n   \
    \      (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n\
    \      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n    \
    \       (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n        \
    \   (char=? (first s) #\\u))\n       (helper (rest s) (+ count 1))]\n      [(and\
    \ (char=? (first s) #\\y)\n            (empty? (rest s)))\n       (helper (rest\
    \ s) (+ count 1))]\n      [else (helper (rest s) count)]))\n  (helper s 0))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-y? c)\n    (char=? c #\\y))\n  (define (is-vowel-or-y? c)\n    (or (is-vowel?\
    \ c)\n        (is-y? c)))\n  (define (is-last-char? i)\n    (= i (- (string-length\
    \ s) 1)))\n  (define (is-y-at-end? i)\n    (and (is-y? (string-ref s i))\n   \
    \      (is-last-char? i)))\n  (define (is-vowel-at-end? i)\n    (and (is-vowel?\
    \ (string-ref s i))\n         (is-last-char? i)))\n  (define (is-vowel-or-y-at-end?\
    \ i)\n    (or (is-vowel-at-end? i)\n        (is-y-at-end? i)))\n  (define (is-vowel-or-y-at-start?\
    \ i)\n    (and (is-vowel-or-y? (string-ref s i))\n         (= i 0)))\n  (define\
    \ (is-vowel-or-y-in-middle? i)\n    (and (is-vowel-or-y? (string-ref s i))\n \
    \        (not (is-vowel-or-y-at-start? i))\n         (not (is-vowel-or-y-at-end?\
    \ i))))\n  (define (is-vowel-or-y? i)\n    (or (is-vowel-or-y-at-start? i)\n \
    \       (is-vowel-or-y-at-end? i)\n        (is-vowel-or-y-in-middle? i)))\n  (for/sum",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n       \
    \ (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=?\
    \ c #\\u)))\n  (define (is-last-char? c)\n    (char=? c (string-ref s (- (string-length\
    \ s) 1))))\n  (define (is-y-vowel? c)\n    (and (char=? c #\\y) (is-last-char?\
    \ c)))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(or\
    \ (is-vowel? (first s)) (is-y-vowel? (first s)))\n       (+ 1 (count-vowels (rest\
    \ s)))]\n      [else (count-vowels (rest s))]))\n  (count-vowels s))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-y c)\n    (char=? c #\\y))\n  (define (is-vowel-or-y\
    \ c)\n    (or (is-vowel c)\n        (is-y c)))\n  (define (is-last-char-y s)\n\
    \    (is-y (string-ref s (- (string-length s) 1))))\n  (define (count-vowels s)\n\
    \    (define (count-vowels-iter s i acc)\n      (if (= i (string-length s))\n\
    \          acc\n          (if (is-vowel-or-y (string-ref s i))\n             \
    \ (count-vowels-iter s (+ i 1) (+ acc 1))\n              (count-vowels-iter s\
    \ (+ i 1) acc))))\n    (count-vowels-iter s 0 0))\n  (if (is-last-char-y s)\n\
    \      (count-vowels s)\n      (- (count-vowels s) 1)))\n", "  (let loop ([s s]\
    \ [count 0])\n    (cond [(empty? s) count]\n          [(char-ci=? (first s) #\\\
    a) (loop (rest s) (+ count 1))]\n          [(char-ci=? (first s) #\\e) (loop (rest\
    \ s) (+ count 1))]\n          [(char-ci=? (first s) #\\i) (loop (rest s) (+ count\
    \ 1))]\n          [(char-ci=? (first s) #\\o) (loop (rest s) (+ count 1))]\n \
    \         [(char-ci=? (first s) #\\u) (loop (rest s) (+ count 1))]\n         \
    \ [(char-ci=? (first s) #\\y) (if (empty? (rest s))\n                        \
    \                (+ count 1)\n                                        (loop (rest\
    \ s) count))]\n          [else (loop (rest s) count)])))\n", "  (define (vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (vowels-in-word s)\n\
    \    (if (empty? s)\n        0\n        (if (vowel? (first s))\n            (+\
    \ 1 (vowels-in-word (rest s)))\n            (vowels-in-word (rest s)))))\n  (if\
    \ (empty? s)\n      0\n      (if (vowel? (last s))\n          (+ 1 (vowels-in-word\
    \ (butlast s)))\n          (vowels-in-word (butlast s)))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (vowels-in-word s)\n    (cond\n      [(empty? s) 0]\n   \
    \   [(vowel? (first s)) (+ 1 (vowels-in-word (rest s)))]\n      [else (vowels-in-word\
    \ (rest s))]))\n  (cond\n    [(empty? s) 0]\n    [(vowel? (last s)) (+ 1 (vowels-in-word\
    \ (butlast s)))]\n    [else (vowels-in-word (butlast s))]))\n", "  (cond\n   \
    \ [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    o) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (is_last_letter c)\n    (string=?\
    \ (substring s (- (string-length s) 1)) (string c)))\n  (define (count-vowels\
    \ s)\n    (cond [(empty? s) 0]\n          [(is_vowel (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n          [else (count-vowels (rest s))]))\n  (cond [(is_vowel\
    \ (string-ref s (- (string-length s) 1)))\n         (+ (count-vowels (substring\
    \ s 0 (- (string-length s) 1))) 1)]\n        [else (count-vowels s)]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-y c)\n    (char=?\
    \ c #\\y))\n  (define (is-last-y c)\n    (and (is-y c)\n         (null? (cdr s))))\n\
    \  (define (is-vowel-or-last-y c)\n    (or (is-vowel c)\n        (is-last-y c)))\n\
    \  (length (filter is-vowel-or-last-y s)))\n", "  (define (is-vowel c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((is-vowel (car s)) (+ 1 (count-vowels\
    \ (cdr s))))\n          (else (count-vowels (cdr s)))))\n  (define (count-vowels-at-end\
    \ s)\n    (cond ((null? s) 0)\n          ((is-vowel-at-end (car s)) (+ 1 (count-vowels-at-end\
    \ (cdr s))))\n          (else (count-vowels-at-end (cdr s)))))\n  (define (count-vowels-at-end-of-word\
    \ s)\n    (cond ((null? s) 0)\n          ((is-vowel-at-end (car s)) (+ 1 (count-vowels-at-end-of-word\
    \ (cdr s))))\n          (else 0)))\n  (+ (count-vowels s)\n     (count-vowels-at-end-of-word\
    \ s)))\n", "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n\
    \      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n    \
    \       (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n        \
    \   (char=? (first s) #\\u))\n       (helper (rest s) (+ count 1))]\n      [(and\
    \ (char=? (first s) #\\y)\n            (empty? (rest s)))\n       (helper (rest\
    \ s) (+ count 1))]\n      [else (helper (rest s) count)]))\n  (helper s 0))\n",
  "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (is_vowel_y_end\
    \ c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (vowels_count_helper\
    \ s)\n    (if (null? s)\n        0\n        (if (is_vowel_y (car s))\n       \
    \     (+ 1 (vowels_count_helper (cdr s)))\n            (vowels_count_helper (cdr\
    \ s)))))\n  (if (null? s)\n      0\n      (if (is_vowel_y_end (car (reverse s)))\n\
    \          (vowels_count_helper s)\n          (+ 1 (vowels_count_helper (reverse\
    \ (cdr (reverse s))))))))\n", "  (define (vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (vowels-count-iter s i)\n    (if (or (string-empty?\
    \ s)\n            (not (vowel? (string-ref s i))))\n        0\n        (+ 1 (vowels-count-iter\
    \ s (+ i 1)))))\n  (vowels-count-iter s 0))\n", "  (define (is_vowel c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_y c)\n    (and (char=? c #\\\
    y) (not (char=? c (string-ref s (- (string-length s) 1))))))\n  (define (count-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(or (is_vowel (first s)) (is_y (first\
    \ s)))\n       (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels (rest\
    \ s))]))\n  (count-vowels s))\n", "  (define (helper s count)\n    (cond\n   \
    \   [(empty? s) count]\n      [(or (char=? (first s) #\\a)\n           (char=?\
    \ (first s) #\\e)\n           (char=? (first s) #\\i)\n           (char=? (first\
    \ s) #\\o)\n           (char=? (first s) #\\u))\n       (helper (rest s) (+ count\
    \ 1))]\n      [(and (char=? (first s) #\\y)\n            (empty? (rest s)))\n\
    \       (helper (rest s) (+ count 1))]\n      [else (helper (rest s) count)]))\n\
    \  (helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first s) #\\\
    a)\n     (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\e)\n   \
    \  (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i)\n     (+ 1\
    \ (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o)\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u)\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(char-ci=? (first s) #\\y)\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (vowels-count-helper\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel? (first s)) (+ 1 (vowels-count-helper\
    \ (rest s)))]\n      [else (vowels-count-helper (rest s))]))\n  (if (is-vowel-at-end?\
    \ (last s))\n      (+ 1 (vowels-count-helper (butlast s)))\n      (vowels-count-helper\
    \ (butlast s))))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n     \
    \   (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n      \
    \  (char=? c #\\u)))\n  (define (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels s)\n\
    \    (cond [(empty? s) 0]\n          [(is-vowel? (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n          [else (count-vowels (rest s))]))\n  (cond [(empty? s)\
    \ 0]\n        [(is-vowel-at-end? (last s)) (+ 1 (count-vowels (butlast s)))]\n\
    \        [else (count-vowels s)]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (vowels-in-word s)\n    (if (empty?\
    \ s)\n        0\n        (if (vowel? (first s))\n            (+ 1 (vowels-in-word\
    \ (rest s)))\n            (vowels-in-word (rest s)))))\n  (if (empty? s)\n   \
    \   0\n      (if (vowel? (last s))\n          (+ 1 (vowels-in-word (butlast s)))\n\
    \          (vowels-in-word (butlast s)))))\n", "  (define (is-vowel? c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-y? c)\n    (char=? c #\\y))\n\
    \  (define (is-last-char? c)\n    (char=? c (string-ref s (- (string-length s)\
    \ 1))))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel?\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [(is-y? (first s)) (if (is-last-char?\
    \ (first s))\n                             (+ 1 (count-vowels (rest s)))\n   \
    \                          (count-vowels (rest s)))]\n      [else (count-vowels\
    \ (rest s))]))\n  (count-vowels s))\n", "  (define (is_vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_y c)\n    (or (char=?\
    \ c #\\y)\n        (is_vowel c)))\n  (define (count_vowels s)\n    (if (string-empty?\
    \ s)\n        0\n        (if (is_vowel (string-ref s 0))\n            (+ 1 (count_vowels\
    \ (substring s 1)))\n            (count_vowels (substring s 1)))))\n  (if (string-empty?\
    \ s)\n      0\n      (if (is_vowel_y (string-ref s (sub1 (string-length s))))\n\
    \          (+ 1 (count_vowels (substring s 0 (sub1 (string-length s)))))\n   \
    \       (count_vowels s))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n  \
    \      (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n \
    \ (define (is_y? c)\n    (char=? c #\\y))\n  (define (is_last_y? s)\n    (is_y?\
    \ (string-ref s (- (string-length s) 1))))\n  (define (is_vowel_or_last_y? c)\n\
    \    (or (is_vowel? c)\n        (and (is_y? c)\n             (is_last_y? s))))\n\
    \  (define (count_vowels s)\n    (if (string-empty? s)\n        0\n        (if\
    \ (is_vowel_or_last_y? (string-ref s 0))\n            (+ 1 (count_vowels (substring\
    \ s 1)))\n            (count_vowels (substring s 1)))))\n  (count_vowels s))\n",
  "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is_vowel_at_end c)\n    (and (is_vowel c)\n         (or (null? (cdr s))\n \
    \            (not (is_vowel (car (cdr s)))))))\n  (cond\n    [(null? s) 0]\n \
    \   [(is_vowel_at_end (car s)) (+ 1 (vowels_count (cdr s)))]\n    [(is_vowel (car\
    \ s)) (vowels_count (cdr s))]\n    [else (vowels_count (cdr s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_last_y?\
    \ c)\n    (and (char=? c #\\y)\n         (char=? (string-ref s (- (string-length\
    \ s) 1)) #\\y)))\n  (define (count-vowels s)\n    (cond [(empty? s) 0]\n     \
    \     [(is_vowel? (first s)) (+ 1 (count-vowels (rest s)))]\n          [(is_last_y?\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n          [else (count-vowels (rest\
    \ s))]))\n  (count-vowels s))\n", "  (define (is-vowel? c)\n    (or (char=? c\
    \ #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\\
    o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-vowel? (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n          [else (count-vowels (rest s))]))\n  (cond [(empty? s)\
    \ 0]\n        [(is-vowel-at-end? (last s)) (+ 1 (count-vowels (butlast s)))]\n\
    \        [else (count-vowels s)]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel c)\n \
    \   (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n  \
    \      (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (helper s)\n    (if (null? s)\n        0\n        (if (is-vowel (car\
    \ s))\n            (+ 1 (helper (cdr s)))\n            (helper (cdr s)))))\n \
    \ (if (is-vowel-at-end (string-ref s (- (string-length s) 1)))\n      (+ 1 (helper\
    \ (substring s 0 (- (string-length s) 1))))\n      (helper s)))\n", "  (define\
    \ (vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-in-word\
    \ s)\n    (define (vowels-in-word-iter s count)\n      (if (string-empty? s)\n\
    \          count\n          (if (vowel? (string-ref s 0))\n              (vowels-in-word-iter\
    \ (substring s 1) (+ count 1))\n              (vowels-in-word-iter (substring\
    \ s 1) count))))\n    (vowels-in-word-iter s 0))\n  (define (vowels-in-word-with-y\
    \ s)\n    (define (vowels-in-word-with-y-iter s count)\n      (if (string-empty?\
    \ s)\n          count\n          (if (vowel? (string-ref s 0))\n             \
    \ (vowels-in-word-with-y-iter (substring s 1) (+ count 1))\n              (if\
    \ (and (char=? (string-ref s 0) #\\y)\n                       (string-empty? (substring\
    \ s 1)))\n                  (+ count 1)\n                  (vowels-in-word-with-y-iter\
    \ (substring s 1) count)))))\n    (vowels-in-word-with-y-iter s 0))\n  (if (char=?\
    \ (string-ref s (sub1 (string-length s))) #\\y)\n      (vowels-in-word-with-y\
    \ s)\n      (vowels-in-word s)))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-last-vowel? c)\n    (or (char=?\
    \ c #\\y)\n        (is-vowel? c)))\n  (define (count-vowels s)\n    (cond [(empty?\
    \ s) 0]\n          [(is-vowel? (first s))\n           (+ 1 (count-vowels (rest\
    \ s)))]\n          [else (count-vowels (rest s))]))\n  (cond [(empty? s) 0]\n\
    \        [(is-last-vowel? (last s))\n         (+ 1 (count-vowels (butlast s)))]\n\
    \        [else (count-vowels s)]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (vowels-in-word s)\n    (if (empty?\
    \ s)\n        0\n        (if (vowel? (first s))\n            (+ 1 (vowels-in-word\
    \ (rest s)))\n            (vowels-in-word (rest s)))))\n  (if (empty? s)\n   \
    \   0\n      (if (vowel? (last s))\n          (+ 1 (vowels-in-word (butlast s)))\n\
    \          (vowels-in-word (butlast s)))))\n", "  (define (is-vowel? c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-last-char? c)\n    (and (char=?\
    \ c #\\y)\n         (= (string-length s) (add1 (string-index s c)))))\n  (define\
    \ (count-vowels s)\n    (cond ((null? s) 0)\n          ((is-vowel? (car s)) (add1\
    \ (count-vowels (cdr s))))\n          ((is-last-char? (car s)) (add1 (count-vowels\
    \ (cdr s))))\n          (else (count-vowels (cdr s)))))\n  (count-vowels s))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n    \
    \    (char=? c #\\y)))\n  (define (count-vowels s)\n    (if (string-empty? s)\n\
    \        0\n        (if (is-vowel? (string-ref s 0))\n            (+ 1 (count-vowels\
    \ (substring s 1)))\n            (count-vowels (substring s 1)))))\n  (if (string-empty?\
    \ s)\n      0\n      (if (is-vowel-at-end? (string-ref s (sub1 (string-length\
    \ s))))\n          (+ 1 (count-vowels (substring s 0 (sub1 (string-length s)))))\n\
    \          (count-vowels (substring s 0 (sub1 (string-length s)))))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-last-char-vowel?\
    \ s)\n    (is-vowel? (string-ref s (- (string-length s) 1))))\n  (define (count-vowels\
    \ s)\n    (define (count-vowels-iter s n)\n      (if (string-empty? s)\n     \
    \     n\n          (if (is-vowel? (string-ref s 0))\n              (count-vowels-iter\
    \ (substring s 1) (+ n 1))\n              (count-vowels-iter (substring s 1) n))))\n\
    \    (count-vowels-iter s 0))\n  (if (is-last-char-vowel? s)\n      (+ (count-vowels\
    \ (substring s 0 (- (string-length s) 1))) 1)\n      (count-vowels s)))\n", " \
    \ (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n  \
    \      (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n \
    \ (define (is_vowel_at_end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\\
    e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n\
    \        (char=? c #\\y)))\n  (define (count-vowels s)\n    (cond ((null? s) 0)\n\
    \          ((is_vowel? (car s)) (+ 1 (count-vowels (cdr s))))\n          (else\
    \ (count-vowels (cdr s)))))\n  (if (is_vowel_at_end? (string-ref s (- (string-length\
    \ s) 1)))\n      (+ 1 (count-vowels (substring s 0 (- (string-length s) 1))))\n\
    \      (count-vowels s)))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first\
    \ s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\e) (+\
    \ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n\
    \         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n        \
    \ (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-vowel-at-end c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n     \
    \   (char=? c #\\y)))\n  (define (vowels-count-iter s count)\n    (if (string-empty?\
    \ s)\n        count\n        (if (is-vowel (string-ref s 0))\n            (vowels-count-iter\
    \ (substring s 1) (+ count 1))\n            (vowels-count-iter (substring s 1)\
    \ count))))\n  (if (string-empty? s)\n      0\n      (if (is-vowel-at-end (string-ref\
    \ s (sub1 (string-length s))))\n          (vowels-count-iter (substring s 0 (sub1\
    \ (string-length s))) 1)\n          (vowels-count-iter (substring s 0 (sub1 (string-length\
    \ s))) 0))))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\\
    e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\\
    u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowel? c)\n   \
    \ (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n    \
    \    (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels-count-helper\
    \ s n)\n    (if (empty? s)\n        n\n        (if (vowel? (first s))\n      \
    \      (vowels-count-helper (rest s) (+ n 1))\n            (vowels-count-helper\
    \ (rest s) n))))\n  (vowels-count-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (cond [(empty? s) 0]\n          [(is-vowel? (first\
    \ s)) (+ 1 (count-vowels (rest s)))]\n          [else (count-vowels (rest s))]))\n\
    \  (cond [(empty? s) 0]\n        [(is-vowel-at-end? (last s)) (+ 1 (count-vowels\
    \ (butlast s)))]\n        [else (count-vowels s)]))\n", "  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_at_end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (cond ((null? s) 0)\n          ((is_vowel? (car\
    \ s)) (+ 1 (count-vowels (cdr s))))\n          (else (count-vowels (cdr s)))))\n\
    \  (if (is_vowel_at_end? (string-ref s (- (string-length s) 1)))\n      (+ 1 (count-vowels\
    \ (substring s 0 (- (string-length s) 1))))\n      (count-vowels s)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-y?\
    \ c)\n    (and (char=? c #\\y)\n         (not (char=? (string-ref s (- (string-length\
    \ s) 1)) #\\y))))\n  (define (count-vowels s)\n    (cond [(empty? s) 0]\n    \
    \      [(or (is-vowel? (first s)) (is-y? (first s)))\n           (+ 1 (count-vowels\
    \ (rest s)))]\n          [else (count-vowels (rest s))]))\n  (count-vowels s))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-last-vowel? c)\n    (or (char=? c #\\y)\n        (is-vowel? c)))\n  (define\
    \ (count-vowels s)\n    (cond [(empty? s) 0]\n          [(is-vowel? (first s))\
    \ (+ 1 (count-vowels (rest s)))]\n          [else (count-vowels (rest s))]))\n\
    \  (define (count-last-vowel s)\n    (cond [(empty? s) 0]\n          [(is-last-vowel?\
    \ (first s)) (+ 1 (count-last-vowel (rest s)))]\n          [else (count-last-vowel\
    \ (rest s))]))\n  (+ (count-vowels s) (count-last-vowel s)))\n", "  (let loop\
    \ ([s s] [v 0])\n    (cond [(empty? s) v]\n          [(or (char=? (first s) #\\\
    a)\n               (char=? (first s) #\\e)\n               (char=? (first s) #\\\
    i)\n               (char=? (first s) #\\o)\n               (char=? (first s) #\\\
    u))\n           (loop (rest s) (+ v 1))]\n          [(and (char=? (first s) #\\\
    y)\n                (empty? (rest s)))\n           (loop (rest s) (+ v 1))]\n\
    \          [else (loop (rest s) v)])))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_at_end? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (if (empty? s)\n        0\n        (if (is_vowel? (first s))\n     \
    \       (+ 1 (count-vowels (rest s)))\n            (count-vowels (rest s)))))\n\
    \  (if (empty? s)\n      0\n      (if (is_vowel_at_end? (last s))\n          (+\
    \ 1 (count-vowels (butlast s)))\n          (count-vowels (butlast s)))))\n", " \
    \ (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n  \
    \      (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n \
    \ (define (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\\
    e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n\
    \        (char=? c #\\y)))\n  (define (count-vowels s)\n    (cond [(empty? s)\
    \ 0]\n          [(is-vowel? (first s)) (+ 1 (count-vowels (rest s)))]\n      \
    \    [else (count-vowels (rest s))]))\n  (cond [(empty? s) 0]\n        [(is-vowel-at-end?\
    \ (last s)) (+ 1 (count-vowels (butlast s)))]\n        [else (count-vowels s)]))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n    \
    \    (char=? c #\\y)))\n  (define (count-vowels s)\n    (if (null? s)\n      \
    \  0\n        (if (is-vowel? (car s))\n            (+ 1 (count-vowels (cdr s)))\n\
    \            (count-vowels (cdr s)))))\n  (if (null? s)\n      0\n      (if (is-vowel-at-end?\
    \ (car (reverse s)))\n          (+ 1 (count-vowels (reverse (cdr (reverse s)))))\n\
    \          (count-vowels (reverse (cdr (reverse s)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
