language: rkt
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (difference (first l) (second l)))\n          (monotonic (rest l))) #t]\n  \
    \  [(and (negative? (difference (first l) (second l)))\n          (monotonic (rest\
    \ l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw95nglob.rkt:14:22: difference: unbound identifier\n  in: difference\n\
    \  location...:\n   /tmp/tmpw95nglob.rkt:14:22\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l)) (not (member (first l) (rest\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\
    \ (not (member (first l) (rest l))))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3c14cg9j.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3c14cg9j.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3c14cg9j.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (first l)) (positive? (second l)))\n     (and (monotonic (rest l)) (positive?\
    \ (sub1 (first l)) (second l)))]\n    [(and (negative? (first l)) (negative? (second\
    \ l)))\n     (and (monotonic (rest l)) (negative? (sub1 (first l)) (second l)))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprz54u6c9.rkt:25:4\n\
    \npositive?: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprz54u6c9.rkt:26:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprz54u6c9.rkt:27:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprz54u6c9.rkt:28:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprz54u6c9.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equ"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (every < (rest\
    \ l)))]\n        [(< (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (every > (rest l)))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyu7hphgx.rkt:15:15: every: unbound identifier\n  in: every\n  location...:\n\
    \   /tmp/tmpyu7hphgx.rkt:15:15\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (first l))\n          (positive? (second l)))\n     (and (positive? (first l))\n\
    \          (monotonic (rest l)))]\n    [(and (negative? (first l))\n         \
    \ (negative? (second l)))\n     (and (negative? (first l))\n          (monotonic\
    \ (rest l)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37nysf1z.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37nysf1z.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37nysf1z.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37nysf1z.rkt:34:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l))\n          (monotonic (rest l))) #t]\n    [(and (>= (first l)\
    \ (second l))\n          (monotonic (rest l))) #t]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi2sy0c9_.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi2sy0c9_.rkt:30:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_dje7c8.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_dje7c8.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (for/and ([x\
    \ (in-list (rest l))])\n                (< (first l) x)))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (for/and ([x\
    \ (in-list (rest l))])\n                (> (first l) x)))]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6uxe3c0.rkt:30:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6uxe3c0.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6uxe3c0.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3jwaayd8.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3jwaayd8.rkt:36:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (<= (first l) (second l)))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (>=\
    \ (first l) (second l)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:33:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [(> (first\
    \ l) (second l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (> (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (< (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqqdf3_a.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqqdf3_a.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqqdf3_a.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqqdf3_a.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l)))\n          (positive? (sub1 (second l))))\n     (and (monotonic\
    \ (rest l))\n          (positive? (sub1 (first l)))\n          (positive? (sub1\
    \ (second l))))]\n    [(and (negative? (sub1 (first l)))\n          (negative?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l))\n          (negative? (sub1\
    \ (first l)))\n          (negative? (sub1 (second l))))]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:37:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (for/and ([x\
    \ (rest l)]\n                        [y (rest (rest l))])\n                (<\
    \ x y)))]\n        [(< (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (for/and ([x (rest l)]\n                        [y (rest (rest\
    \ l))])\n                (> x y)))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfbb3kul.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfbb3kul.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfbb3kul.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfbb3kul.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfbb3kul.rkt:36:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfbb3kul.rkt:37:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (first l)) (negative? (second l))) #f]\n    [(and (negative? (first l)) (positive?\
    \ (second l))) #f]\n    [else (monotonic (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3srkvhbm.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3srkvhbm.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (define (monotonic-helper l direction)\n    (cond\n      [(empty? l) #t]\n\
    \      [(empty? (rest l)) #t]\n      [(and (= direction 1) (< (first l) (second\
    \ l)))\n       (monotonic-helper (rest l) direction)]\n      [(and (= direction\
    \ -1) (> (first l) (second l)))\n       (monotonic-helper (rest l) direction)]\n\
    \      [(and (= direction 0) (< (first l) (second l)))\n       (monotonic-helper\
    \ (rest l) 1)]\n      [(and (= direction 0) (> (first l) (second l)))\n      \
    \ (monotonic-helper (rest l) -1)]\n      [else #f]))\n  (monotonic-helper l 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9i2972v.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9i2972v.rkt:38:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (first l)) (positive? (second l)))\n     (and (positive? (first l)) (positive?\
    \ (second l)) (monotonic (rest l)))]\n    [(and (negative? (first l)) (negative?\
    \ (second l)))\n     (and (negative? (first l)) (negative? (second l)) (monotonic\
    \ (rest l)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb8ui6bza.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb8ui6bza.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb8ui6bza.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb8ui6bza.rkt:30:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3jwaayd8.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3jwaayd8.rkt:36:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (difference (first l) (second l)))\n          (monotonic (rest l))) #t]\n  \
    \  [(and (negative? (difference (first l) (second l)))\n          (monotonic (rest\
    \ l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw95nglob.rkt:14:22: difference: unbound identifier\n  in: difference\n\
    \  location...:\n   /tmp/tmpw95nglob.rkt:14:22\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (and (first l)\
    \ (second l)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (and (first l) (second l)))]\n        [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1syxe1kq.rkt:26:4

    actual:     2

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1syxe1kq.rkt:27:4

    actual:     2

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1syxe1kq.rkt:28:4

    actual:     20

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1syxe1kq.rkt:29:4

    actual:     1

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1syxe1kq.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1syxe1kq.rkt:31:4

    actual:     2

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1syxe1kq.rkt:32:4

    actual:     2

    expected:   #t

    --------------------

    --------------------

    FAILURE'
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (every < (rest l)))]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (every > (rest\
    \ l)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv36rf6gx.rkt:16:11: every: unbound identifier\n  in: every\n  location...:\n\
    \   /tmp/tmpv36rf6gx.rkt:16:11\n"
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (<= (first l)\
    \ (second l)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (>= (first l) (second l)))]\n        [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzufy2n8y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzufy2n8y.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzufy2n8y.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzufy2n8y.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l)\
    \ (second l)) (monotonic-decreasing (rest l))]\n        [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpglneems8.rkt:13:35: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpglneems8.rkt:13:35\n"
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(and (or (positive?\
    \ (sub1 (car l))) (negative? (sub1 (car l))))\n          (or (positive? (sub1\
    \ (cadr l))) (negative? (sub1 (cadr l)))))\n     (and (positive? (sub1 (car l)))\
    \ (positive? (sub1 (cadr l))))\n     (monotonic (cdr l))]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkiqqopw.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkiqqopw.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkiqqopw.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkiqqopw.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkiqqopw.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (apply < (rest\
    \ l)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (apply > (rest l)))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptij4ihno.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptij4ihno.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_u7f3n5d.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmp_u7f3n5d.rkt:11:7\n"
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (positive? (sub1 (length l))))]\n    [(> (first\
    \ l) (second l)) (and (monotonic (rest l)) (negative? (sub1 (length l))))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiaqn9rz.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiaqn9rz.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiaqn9rz.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (for/and ([x\
    \ (in-list (rest l))]\n                        [y (in-list (rest (rest l)))])\n\
    \                (< x y)))]\n        [(> (first l) (second l))\n         (and\
    \ (monotonic (rest l))\n              (for/and ([x (in-list (rest l))]\n     \
    \                   [y (in-list (rest (rest l)))])\n                (> x y)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmrbbtqsj.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmrbbtqsj.rkt:36:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l))) (positive? (sub1 (second l))))\n     (and (positive? (sub1\
    \ (first l))) (monotonic (rest l)))]\n    [(and (negative? (sub1 (first l))) (negative?\
    \ (sub1 (second l))))\n     (and (negative? (sub1 (first l))) (monotonic (rest\
    \ l)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuju0y3q9.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuju0y3q9.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuju0y3q9.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuju0y3q9.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuju0y3q9.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(or (and (<\
    \ (first l) (second l))\n                  (monotonic (rest l)))\n           \
    \  (and (> (first l) (second l))\n                  (monotonic (rest l)))) #t]\n\
    \        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp193e8orw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp193e8orw.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp193e8orw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp193e8orw.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (positive?\
    \ (sub1 (first l)))\n              (negative? (sub1 (second l))))\n         (monotonic\
    \ (rest l))]\n        [(and (negative? (sub1 (first l)))\n              (positive?\
    \ (sub1 (second l))))\n         (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbz4pzyia.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbz4pzyia.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbz4pzyia.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbz4pzyia.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbz4pzyia.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbz4pzyia.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq54f8x16.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (>= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (<= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8th4f2b_.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8th4f2b_.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) #t)]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) #t)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [(> (first\
    \ l) (second l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [(> (first\
    \ l) (second l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzj2v7dp.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (if (null? l)\n      #t\n      (let ([rest (cdr l)])\n        (if (null? rest)\n\
    \            #t\n            (let ([first (car l)]\n                  [second\
    \ (car rest)])\n              (if (< first second)\n                  (and (monotonic\
    \ rest)\n                       (every (\u03BB (x) (<= first x)) rest))\n    \
    \              (and (monotonic rest)\n                       (every (\u03BB (x)\
    \ (>= first x)) rest))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmbkcz8if.rkt:20:24: every: unbound identifier\n  in: every\n  location...:\n\
    \   /tmp/tmpmbkcz8if.rkt:20:24\n"
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l))\n                                   (or (empty?\
    \ (rest (rest l)))\n                                       (< (second l) (third\
    \ l))))]\n    [(> (first l) (second l)) (and (monotonic (rest l))\n          \
    \                         (or (empty? (rest (rest l)))\n                     \
    \                  (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp601jk_4t.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp601jk_4t.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(or (and (<\
    \ (first l) (second l))\n                  (monotonic (rest l)))\n           \
    \  (and (> (first l) (second l))\n                  (monotonic (rest l))))\n \
    \        #t]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpno3yi6l9.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpno3yi6l9.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpno3yi6l9.rkt:30:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpno3yi6l9.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (<= (first l) (second l)))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (>=\
    \ (first l) (second l)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:33:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(or (=\
    \ (first l) (second l))\n             (and (< (first l) (second l))\n        \
    \          (monotonic (rest l)))\n             (and (> (first l) (second l))\n\
    \                  (monotonic (rest l))))\n         true]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xm7uf0z.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xm7uf0z.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9042w_c.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5lo5to_.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (difference (first l) (second l)))\n          (monotonic (rest l))) #t]\n  \
    \  [(and (negative? (difference (first l) (second l)))\n          (monotonic (rest\
    \ l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw95nglob.rkt:14:22: difference: unbound identifier\n  in: difference\n\
    \  location...:\n   /tmp/tmpw95nglob.rkt:14:22\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l)))\n          (positive? (sub1 (second l))))\n     (and (monotonic\
    \ (rest l))\n          (positive? (sub1 (first l)))\n          (positive? (sub1\
    \ (second l))))]\n    [(and (negative? (sub1 (first l)))\n          (negative?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l))\n          (negative? (sub1\
    \ (first l)))\n          (negative? (sub1 (second l))))]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeag3ut5_.rkt:37:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (>= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0t8jg2vx.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0t8jg2vx.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5zs27wzw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (not (member (first l) (rest\
    \ l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n    \
    \      (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfk2ung4.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfk2ung4.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfk2ung4.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeq0l7gs.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (define (loop l prev)\n    (cond\n      [(empty? l) #t]\n      [(> (first l)\
    \ prev) (loop (rest l) (first l))]\n      [(< (first l) prev) (loop (rest l) (first\
    \ l))]\n      [else #f]))\n  (loop (rest l) (first l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl5qq66dc.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl5qq66dc.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl5qq66dc.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl5qq66dc.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2tesp1a.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqmj447ob.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (positive?\
    \ (sub1 (first l)))\n              (negative? (sub1 (second l))))\n         (and\
    \ (monotonic (rest l))\n              (positive? (sub1 (first (rest l)))))]\n\
    \        [(and (negative? (sub1 (first l)))\n              (positive? (sub1 (second\
    \ l))))\n         (and (monotonic (rest l))\n              (negative? (sub1 (first\
    \ (rest l)))))]\n        [else\n         (and (monotonic (rest l))\n         \
    \     (positive? (sub1 (first (rest l)))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjja0x0mw.rkt:32:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjja0x0mw.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjja0x0mw.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjja0x0mw.rkt:35:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphygybc5y.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 1
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48atldj4.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp48atldj4.rkt:14:31\n"
  stdout: ''
  timestamp: 1660219063
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhjtqt6e.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (let\
    \ ([cur (car l)])\n          (if (and (< prev cur) (loop (cdr l) cur))\n     \
    \         #t\n              (and (> prev cur) (loop (cdr l) cur)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptntdit23.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptntdit23.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptntdit23.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptntdit23.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptntdit23.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptntdit23.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (<= (first l) (second l)))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (>=\
    \ (first l) (second l)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbxqpff74.rkt:33:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_u8n9cg.rkt:35:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqcb4686k.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) #t)]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) #t)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmn3ii7wb.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219065
- exit_code: 0
  program: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
    \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1\
    \ 20 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bx5d2fy.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660219064
