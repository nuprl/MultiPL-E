name: HumanEval_97_multiply
language: rkt
prompt: "#lang racket\n\n#| Complete the function that takes two integers and returns\
  \ \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\n\
  >>> (multiply 148 412)\n16\n>>> (multiply 19 28)\n72\n>>> (multiply 2020 1851)\n\
  0\n>>> (multiply 14 -15)\n20|#\n(define (multiply a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n\
  \    (check-equal? (candidate 148 412) 16)\n    (check-equal? (candidate 19 28)\
  \ 72)\n    (check-equal? (candidate 2020 1851) 0)\n    (check-equal? (candidate\
  \ 14 -15) 20)\n    (check-equal? (candidate 76 67) 42)\n    (check-equal? (candidate\
  \ 17 27) 49)\n    (check-equal? (candidate 0 1) 0)\n    (check-equal? (candidate\
  \ 0 0) 0)\n))\n\n(test-humaneval)"
completions: ["  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (remainder (* (remainder\
    \ a 10) (remainder b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10))\
    \ 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (remainder (* (remainder a 10) (remainder b 10))\
    \ 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (remainder (* (remainder a 10) (remainder b 10))\
    \ 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n</code>\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (remainder (* (remainder a 10) (remainder b 10))\
    \ 10))\n", "  (remainder (* (remainder a 10) (remainder b 10)) 10))\n", "  (define\
    \ (unit-digit n)\n    (modulo n 10))\n  (define (multiply-unit-digits a b)\n \
    \   (if (or (zero? a) (zero? b))\n        0\n        (unit-digit (* a b))))\n\
    \  (multiply-unit-digits (unit-digit a) (unit-digit b)))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (remainder (* (remainder a 10) (remainder b 10))\
    \ 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (let ([a (modulo a 10)]\n        [b (modulo\
    \ b 10)])\n    (* a b)))\n", "  (remainder (* (remainder a 10) (remainder b 10))\
    \ 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (define (unit-digit\
    \ n)\n    (modulo n 10))\n  (define (product-of-unit-digits a b)\n    (* (unit-digit\
    \ a) (unit-digit b)))\n  (product-of-unit-digits a b))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (remainder (* (remainder a 10) (remainder b 10))\
    \ 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (remainder (* (remainder\
    \ a 10) (remainder b 10)) 10))\n```\n\n## Solution\n\n```racket\n#lang racket\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (let ([a (modulo a 10)]\n\
    \        [b (modulo b 10)])\n    (* a b)))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (remainder\
    \ (* (remainder a 10) (remainder b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (remainder\
    \ (* (remainder a 10) (remainder b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (let ([a (modulo a 10)]\n        [b (modulo b 10)])\n   \
    \ (* a b)))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (remainder (* (remainder a 10) (remainder b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (remainder (* (remainder\
    \ a 10) (remainder b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10))\
    \ 10))\n", "  (remainder (* (remainder a 10) (remainder b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (remainder\
    \ (* (remainder a 10) (remainder b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n</code>\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (remainder (* (remainder\
    \ a 10) (remainder b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10))\
    \ 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
