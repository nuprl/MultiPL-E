language: rkt
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (gcd (abs a) (abs b)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (gcd (abs a) (abs b)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (gcd (abs a) (abs b)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 1
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n```\n\n## Exercise 2.3\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal?\
    \ (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal?\
    \ (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp6ssrenk6.rkt:16:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660218947
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 1
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n```\n\n### Exercise 2.31\n\n\
    ```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3\
    \ 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpk_kbrwf0.rkt:14:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660218947
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (let loop ([a a] [b b])\n\
    \    (cond\n      [(= b 0) a]\n      [else (loop b (modulo a b))])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
- exit_code: 0
  program: "#lang racket\n\n#| Return a greatest common divisor of two integers a\
    \ and b\n>>> (greatest_common_divisor 3 5)\n1\n>>> (greatest_common_divisor 25\
    \ 15)\n5|#\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n  \
    \    (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660218949
