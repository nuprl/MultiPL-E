name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n#| Given the lengths of the three sides of a triangle. Return\
  \ the area of\nthe triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when\
  \ the sum of any two sides is greater \nthan the third side.\nExample:\n>>> (triangle_area\
  \ 3 4 5)\n6.0\n>>> (triangle_area 1 2 10)\n-1|#\n(define (triangle_area a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+\
    \ b c) a))\n      (round (* 0.5 (- (+ a b c)\n                       (* 2 (min\
    \ a b c))))\n             2)\n      -1))\n", "  (if (and (> (+ a b) c)\n     \
    \      (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+ a b\
    \ c) a b c)) 2)\n      -1))\n", "  (if (and (> (+ a b) c)\n           (> (+ a\
    \ c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a b c)) 2)\n\
    \      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/\
    \ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n  \
    \     (if (and (> a s) (> b s) (> c s))\n           (round (* area 2) 2)\n   \
    \        -1))]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a\
    \ c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (*\
    \ b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (sqrt (+ (* (- a b) (- a b)) (* (- a c) (- a c))))]\n \
    \   [(and (>= b a) (>= b c))\n     (sqrt (+ (* (- b a) (- b a)) (* (- b c) (-\
    \ b c))))]\n    [(and (>= c a) (>= c b))\n     (sqrt (+ (* (- c a) (- c a)) (*\
    \ (- c b) (- c b))))]\n    [else -1]))\n", "  (define (is-valid-triangle a b c)\n\
    \    (and (&gt;= a b c)\n         (&gt; (+ a b) c)\n         (&gt; (+ a c) b)\n\
    \         (&gt; (+ b c) a)))\n  (cond\n    [(is-valid-triangle a b c)\n     (define\
    \ s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n\
    </code>\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(> (+\
    \ b c) a)\n        (/ (* a (sqrt (- (* a a) (/ (+ (* b b) (* c c)) 4)))) 2)\n\
    \       ]\n       [else -1]\n     )\n    ]\n    [(and (>= b a) (>= b c))\n   \
    \  (cond\n       [(> (+ a c) b)\n        (/ (* b (sqrt (- (* b b) (/ (+ (* a a)\
    \ (* c c)) 4)))) 2)\n       ]\n       [else -1]\n     )\n    ]\n    [(and (>=\
    \ c a) (>= c b))\n     (cond\n       [(> (+ a b) c)\n        (/ (* c (sqrt (-\
    \ (* c c) (/ (+ (* a a) (* b b)) 4)))) 2)\n       ]\n       [else -1]\n     )\n\
    \    ]\n  )\n)\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (let* ([s (/ (+\
    \ a b c) 2)]\n             [area (sqrt (- (* s (- s a)) (* s (- s b)) (* s (-\
    \ s c))))])\n        (round (* area 2) 2))\n      -1))\n", "  (if (and (> a 0)\
    \ (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n\
    \          (round (* 0.5 (* a (sqrt (- (* b b) (* (/ c 2) (/ c 2)))))) 2)\n  \
    \        -1)\n      -1))\n", "  (define (is-valid-triangle a b c)\n    (and (>\
    \ (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area\
    \ a b c)\n    (sqrt (+ (* (- (* a a) (* b b)) (* c c))\n            (* (- (* a\
    \ a) (* c c)) (* b b))\n            (* (- (* b b) (* c c)) (* a a)))))\n  (cond\
    \ ((is-valid-triangle a b c)\n         (round (* 100 (area a b c))))\n       \
    \ (else -1)))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>=\
    \ (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+\
    \ a b c))\n                    (* (* a a) (* b b))\n                    (* (*\
    \ a a) (* c c))\n                    (* (* b b) (* c c)))))\n        ]\n     \
    \  [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c)\
    \ b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n\
    \                    (* (* a a) (* b b))\n                    (* (* a a) (* c\
    \ c))\n                    (* (* b b) (* c c)))))\n        ]\n       [else -1])]\n\
    \    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (*\
    \ (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n             \
    \       (* (* a a) (* b b))\n                    (* (* a a) (* c c))\n       \
    \             (* (* b b) (* c c)))))\n        ]\n       [else -1])]\n    [else\
    \ -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round\
    \ (* 0.5 (- (+ a b c) (- a b c)) (- (+ a b c) (- a b c)) (- (+ a b c) (- a b c)))\
    \ 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([s (/\
    \ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n  \
    \  [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/\
    \ (+ a b c) 2)\n           (sqrt (- (* (* a a) (* a a))\n                    (*\
    \ (* b b) (* b b))\n                    (* (* c c) (* c c)))))\n        ]\n  \
    \     [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a\
    \ c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (* a a) (* a a))\n\
    \                    (* (* b b) (* b b))\n                    (* (* c c) (* c\
    \ c)))))\n        ]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n\
    \       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (*\
    \ a a) (* a a))\n                    (* (* b b) (* b b))\n                   \
    \ (* (* c c) (* c c)))))\n        ]\n       [else -1])]\n    [else -1]))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (>\
    \ area 0) (not (infinite? area)))\n           (round (* area 100))\n         \
    \  -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n \
    \    (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 2) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b c)\
    \ 2)\n           (sqrt (- (* (* a a) (* a a))\n                    (* (* b b)\
    \ (* b b))\n                    (* (* c c) (* c c)))))\n        ]\n       [else\
    \ -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n  \
    \      (* (/ (+ a b c) 2)\n           (sqrt (- (* (* a a) (* a a))\n         \
    \           (* (* b b) (* b b))\n                    (* (* c c) (* c c)))))\n\
    \        ]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n   \
    \    [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (* a\
    \ a) (* a a))\n                    (* (* b b) (* b b))\n                    (*\
    \ (* c c) (* c c)))))\n        ]\n       [else -1])]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (- (* s (- s a)) (* s (- s b)) (* s (- s c)))))\n     (round (* area\
    \ 2) 2)]\n    [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b\
    \ c) a))\n      (round (* 0.5 (* a (sqrt (- (* b b) (* a a))))))\n      -1))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([p (+ a b c)])\n       (/ (*\
    \ p (- p a) (- p b) (- p c)) 16))]\n    [(and (>= b a) (>= b c))\n     (let ([p\
    \ (+ a b c)])\n       (/ (* p (- p a) (- p b) (- p c)) 16))]\n    [(and (>= c\
    \ a) (>= c b))\n     (let ([p (+ a b c)])\n       (/ (* p (- p a) (- p b) (- p\
    \ c)) 16))]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a c)\
    \ b) (> (+ b c) a))\n     (round (* 0.5 (- (+ a b c) a b c)) 2)]\n    [else -1]))\n",
  "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (define p (/ (+ a b c) 2))\n \
    \        (sqrt (- (* p (- p a)) (* p (- p b)) (* p (- p c))))]\n        [else\
    \ -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (>\
    \ (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(>=\
    \ (+ a b) c)\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c\
    \ c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c))\n     (/ (* a (sqrt (- (* b b) (* c c)))) 2)]\n    [(and (>= b a) (>=\
    \ b c))\n     (/ (* b (sqrt (- (* a a) (* c c)))) 2)]\n    [(and (>= c a) (>=\
    \ c b))\n     (/ (* c (sqrt (- (* a a) (* b b)))) 2)]\n    [else -1]))\n", " \
    \ (cond\n    [(and (>= a b) (>= a c)) (sqrt (+ (* (- a b) (- a c)) (* (* b b)\
    \ (* c c))))]\n    [(and (>= b a) (>= b c)) (sqrt (+ (* (- b a) (- b c)) (* (*\
    \ a a) (* c c))))]\n    [(and (>= c a) (>= c b)) (sqrt (+ (* (- c a) (- c b))\
    \ (* (* a a) (* b b))))]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n    \
    \       (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+ a\
    \ b c) a b c)) 2)\n      -1))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n  \
    \       (define s (/ (+ a b c) 2))\n         (define area (sqrt (- (* s (- s a))\
    \ (* s (- s b)) (* s (- s c)))))\n         (round (* area 2) 2)]\n        [else\
    \ -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round\
    \ (* 0.5 (* a (sqrt (- (* b b) (* a a)))) 2))\n      -1))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (round (* area 2) 2))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+\
    \ b c) a)\n        (/ (* a (sqrt (- (* a a) (/ (+ (* b b) (* c c)) 2)))) 2)\n\
    \        ]\n       [else -1]\n       )\n     ]\n    [(and (>= b a) (>= b c))\n\
    \     (cond\n       [(>= (+ a c) b)\n        (/ (* b (sqrt (- (* b b) (/ (+ (*\
    \ a a) (* c c)) 2)))) 2)\n        ]\n       [else -1]\n       )\n     ]\n    [(and\
    \ (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (/ (* c (sqrt\
    \ (- (* c c) (/ (+ (* a a) (* b b)) 2)))) 2)\n        ]\n       [else -1]\n  \
    \     )\n     ]\n    [else -1]\n    )\n  )\n", "  (if (and (> a 0) (> b 0) (>\
    \ c 0)\n           (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b\
    \ c) a))\n      (round (* 0.5 (- (+ a b c) (- a b c)) (- (+ a b c) (- a b c))\
    \ (- (+ a b c) (- a b c))) 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b\
    \ c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (*\
    \ (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c)\
    \ (- a b c))))))]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n\
    \       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+\
    \ a b c) (* (+ a b c)) (* (- a b c) (- a b c))))))]\n       [else -1])]\n    [(and\
    \ (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (- a b c))))))]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n\
    \     (cond\n       [(>= (+ b c) a)\n        (/ (* a (sqrt (- (* a a) (/ (+ (*\
    \ b b) (* c c)) 2)))) 2)\n        ]\n       [else -1]\n       )\n     ]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (/ (* b (sqrt\
    \ (- (* b b) (/ (+ (* a a) (* c c)) 2)))) 2)\n        ]\n       [else -1]\n  \
    \     )\n     ]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b)\
    \ c)\n        (/ (* c (sqrt (- (* c c) (/ (+ (* a a) (* b b)) 2)))) 2)\n     \
    \   ]\n       [else -1]\n       )\n     ]\n    [else -1]\n    )\n  )\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (> area 0)\
    \ (not (infinite? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n    \
    \   [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b\
    \ c) (* (+ a b c)) (* (+ a b c)) )\n                     (* (* a a) (* b b))\n\
    \                     (* (* a a) (* c c))\n                     (* (* b b) (*\
    \ c c)))))\n        ]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n    \
    \ (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (+ a b c) (* (+ a b c)) (* (+ a b c)) )\n                     (* (* a\
    \ a) (* b b))\n                     (* (* a a) (* c c))\n                    \
    \ (* (* b b) (* c c)))))\n        ]\n       [else -1])]\n    [(and (>= c a) (>=\
    \ c b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n    \
    \       (sqrt (- (* (+ a b c) (* (+ a b c)) (* (+ a b c)) )\n                \
    \     (* (* a a) (* b b))\n                     (* (* a a) (* c c))\n        \
    \             (* (* b b) (* c c)))))\n        ]\n       [else -1])]\n    [else\
    \ -1]))\n", "  (cond\n    [(>= (+ a b) c) (* 0.5 (- (+ a b) c) (sqrt (- (* (-\
    \ (+ a b) c) (- (+ a b) c)) (* (- a c) (- a c)) (* (- b c) (- b c)))))]\n    [else\
    \ -1]))\n```\n\n## [Problem 3](https://github.com/abhishtagatya/functional-programming-exercises/blob/master/exercises/exercise3.rkt)\n\
    \n```racket\n#lang racket\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n \
    \    (define s (/ (+ a b c) 2))\n     (define area (sqrt (- (* s (- s a)) (* s\
    \ (- s b)) (* s (- s c)))))\n     (if (and (> a (+ b c)) (> b (+ a c)) (> c (+\
    \ a b)))\n         (round (* area 100))\n         -1)]\n    [else -1]))\n", " \
    \ (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a)) (round (* 0.5 (-\
    \ (+ a b c) a b c)) 2)]\n    [else -1]))\n```\n\n```racket\n#lang racket\n", " \
    \ (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n  \
    \      (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (/ 4))\n\
    \                   (* a (* a))\n                   (* b (* b))\n            \
    \       (* c (* c)))))\n        ]\n       [else -1])]\n    [(and (>= b a) (>=\
    \ b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n    \
    \       (sqrt (- (* (+ a b c) (* (+ a b c)) (/ 4))\n                   (* a (*\
    \ a))\n                   (* b (* b))\n                   (* c (* c)))))\n   \
    \     ]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n      \
    \ [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c)\
    \ (* (+ a b c)) (/ 4))\n                   (* a (* a))\n                   (*\
    \ b (* b))\n                   (* c (* c)))))\n        ]\n       [else -1])]\n\
    \    [else -1]))\n", "  (cond [(and (> (+ a b) c)\n              (> (+ a c) b)\n\
    \              (> (+ b c) a))\n         (round (* 0.5 (* a b c)) 2)]\n       \
    \ [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (cond [(and\
    \ (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n                (round (* 0.5 (*\
    \ a (sqrt (- (* b b) (* 0.25 (* a a)))))) 2)\n                ]\n            \
    \   [else -1])\n         ]\n        [else -1]))\n", "  (cond [(and (> a 0) (>\
    \ b 0) (> c 0))\n         (let* ([s (/ (+ a b c) 2)]\n                [area (sqrt\
    \ (- (* s (- s a)) (* s (- s b)) (* s (- s c))))])\n           (if (and (>= area\
    \ 0) (not (infinite? area)))\n               (round (* area 2) 2)\n          \
    \     -1))]\n        [else -1]))\n", "  (if (and (> (+ a b) c)\n           (>\
    \ (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n \
    \     -1))\n", "  (define (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n\
    \         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area a b c)\n  \
    \  (sqrt (* (- (* a a) (* b b) (* c c)) (* a b c))))\n  (cond\n    [(is-valid-triangle\
    \ a b c) (round (* 100 (area a b c)))]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (round (* area 2) 2))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([s (/ (+ a b c) 2)])\n      \
    \ (* (- s a) (- s b) (- s c)))]\n    [(and (>= b a) (>= b c))\n     (let ([s (/\
    \ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= c a) (>=\
    \ c b))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (define\
    \ s (/ (+ a b c) 2))\n         (sqrt (* s (- s a) (- s b) (- s c)))]\n       \
    \ [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n   \
    \   (round (* 0.5 (- (+ a b c) (* 2 (max a (max b c)))) (max a (max b c))))\n\
    \      -1))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n        \
    \   (> (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 2) 2)\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n    \
    \   [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b\
    \ c) (+ a b c))\n                    (* (* a a) (* b b))\n                   \
    \ (* (* a a) (* c c))\n                    (* (* b b) (* c c)))))\n        ]\n\
    \       [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+\
    \ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b\
    \ c))\n                    (* (* a a) (* b b))\n                    (* (* a a)\
    \ (* c c))\n                    (* (* b b) (* c c)))))\n        ]\n       [else\
    \ -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n  \
    \      (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n     \
    \               (* (* a a) (* b b))\n                    (* (* a a) (* c c))\n\
    \                    (* (* b b) (* c c)))))\n        ]\n       [else -1])]\n \
    \   [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define\
    \ s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n\
    \      (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and\
    \ (>= a b c) (>= b c a) (>= c a b))\n     (define p (/ (+ a b c) 2))\n     (sqrt\
    \ (* p (- p a) (- p b) (- p c)))\n     ]\n    [else -1]))\n", "  (if (and (> a\
    \ 0) (> b 0) (> c 0))\n      (let* ([s (/ (+ a b c) 2)]\n             [area (sqrt\
    \ (- (* s (- s a)) (* s (- s b)) (* s (- s c))))])\n        (if (and (>= area\
    \ 0) (not (infinite? area)))\n            (round (* area 2) 2)\n            -1))\n\
    \      -1))\n", "  (cond\n    [(and (>= a (+ b c)) (>= b (+ a c)) (>= c (+ a b)))\
    \ -1]\n    [else (round (* 0.5 (- (+ a b c) (- a b c))))]))\n", "  (cond\n   \
    \ [(and (> a 0) (> b 0) (> c 0))\n     (cond\n       [(and (> (+ a b) c) (> (+\
    \ a c) b) (> (+ b c) a))\n        (round (* 0.5 (* a (sqrt (- (* b b) (* 0.25\
    \ (* a a)))))) 2)]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s\
    \ (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0)\
    \ (> b 0) (> c 0))\n     (cond\n       [(and (> (+ a b) c) (> (+ a c) b) (> (+\
    \ b c) a))\n        (define s (/ (+ a b c) 2))\n        (define area (sqrt (*\
    \ s (- s a) (- s b) (- s c))))\n        (round (* area 100))\n        (/ (round\
    \ (* area 100)) 100))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n   \
    \ [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt\
    \ (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (sqrt (+ (* (- a b) (- a b)) (* (- a c) (- a c))))]\n \
    \   [(and (>= b a) (>= b c))\n     (sqrt (+ (* (- b a) (- b a)) (* (- b c) (-\
    \ b c))))]\n    [(and (>= c a) (>= c b))\n     (sqrt (+ (* (- c a) (- c a)) (*\
    \ (- c b) (- c b))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0)\
    \ (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b)\
    \ (- s c))))]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+\
    \ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a) (- (+\
    \ a b c) b) (- (+ a b c) c)) 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (* s\
    \ (- s a) (- s b) (- s c))))\n     (if (and (number? area) (not (nan? area)))\n\
    \         (round (* area 100))\n         -1)]\n    [else -1]))\n", "  (if (and\
    \ (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (round\
    \ (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a b c)\
    \ (>= b c a) (>= c a b))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (round (* area 2) 2))]\n    [else -1]))\n",
  "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (cond [(and (> (+ a b) c) (> (+\
    \ a c) b) (> (+ b c) a))\n                (round (* 0.5 (* a (sqrt (- (* b b)\
    \ (* 0.25 (* a a)))))) 2)])]\n        [else -1]))\n", "  (if (and (> (+ a b) c)\n\
    \           (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (* a\
    \ (sqrt (- (* b b) (* a a)))) 2))\n      -1))\n", "  (if (and (> (+ a b) c)\n\
    \           (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+\
    \ a b c) a b c)) 2)\n      -1))\n", "  (if (and (> (+ a b) c)\n           (> (+\
    \ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a b c))\
    \ 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n    \
    \   [(> (+ b c) a)\n        (/ (* a (sqrt (- (* a a) (/ (+ (* b b) (* c c)) 2))))\
    \ 2)\n       ]\n       [else -1]\n     )\n    ]\n    [(and (>= b a) (>= b c))\n\
    \     (cond\n       [(> (+ a c) b)\n        (/ (* b (sqrt (- (* b b) (/ (+ (*\
    \ a a) (* c c)) 2)))) 2)\n       ]\n       [else -1]\n     )\n    ]\n    [(and\
    \ (>= c a) (>= c b))\n     (cond\n       [(> (+ a b) c)\n        (/ (* c (sqrt\
    \ (- (* c c) (/ (+ (* a a) (* b b)) 2)))) 2)\n       ]\n       [else -1]\n   \
    \  )\n    ]\n  )\n)\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n \
    \      [(>= (+ b c) a) (/ (* a (sqrt (- (* a a) (/ (+ (* b b) (* c c)) (* a a)))))\
    \ 2)]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>=\
    \ (+ a c) b) (/ (* b (sqrt (- (* b b) (/ (+ (* a a) (* c c)) (* b b))))) 2)]\n\
    \       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+\
    \ a b) c) (/ (* c (sqrt (- (* c c) (/ (+ (* a a) (* b b)) (* c c))))) 2)]\n  \
    \     [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n\
    \     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (+ a b c) (+ a b c))\n                    (* (* a a) (+ (* b b) (* c c))))))]\n\
    \       [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+\
    \ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b\
    \ c))\n                    (* (* b b) (+ (* a a) (* c c))))))]\n       [else -1])]\n\
    \    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (*\
    \ (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n             \
    \       (* (* c c) (+ (* a a) (* b b))))))]\n       [else -1])]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (define p (/ (+ a b c) 2))\n     (sqrt\
    \ (* p (- p a) (- p b) (- p c)))]\n    [(and (>= b a) (>= b c))\n     (define\
    \ p (/ (+ a b c) 2))\n     (sqrt (* p (- p a) (- p b) (- p c)))]\n    [(and (>=\
    \ c a) (>= c b))\n     (define p (/ (+ a b c) 2))\n     (sqrt (* p (- p a) (-\
    \ p b) (- p c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n\
    \     (cond\n       [(>= (+ b c) a)\n        (/ (* a (sqrt (- (* a a) (/ (+ (*\
    \ b b) (* c c)) 2)))) 2)\n        ]\n       [else -1]\n       )\n     ]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (/ (* b (sqrt\
    \ (- (* b b) (/ (+ (* a a) (* c c)) 2)))) 2)\n        ]\n       [else -1]\n  \
    \     )\n     ]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b)\
    \ c)\n        (/ (* c (sqrt (- (* c c) (/ (+ (* a a) (* b b)) 2)))) 2)\n     \
    \   ]\n       [else -1]\n       )\n     ]\n    [else -1]\n    )\n  )\n", "  (if\
    \ (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (>\
    \ (+ b c) a))\n          (round (* 0.5 (- (+ a b c) (* a b c))) 2)\n         \
    \ -1)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([s (/\
    \ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= b a) (>=\
    \ b c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c)) (sqrt (* (- a (/ b 2)) (- a (/ c 2)) (+ a b c)))]\n    [(and (>= b a)\
    \ (>= b c)) (sqrt (* (- b (/ a 2)) (- b (/ c 2)) (+ a b c)))]\n    [(and (>= c\
    \ a) (>= c b)) (sqrt (* (- c (/ a 2)) (- c (/ b 2)) (+ a b c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (cond\n    \
    \     [(> area 0) (round (* area 2) 2)]\n         [else -1]))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a (+ b c)) (>= b (+ a c)) (>= c (+ a b)))\n     (-1)]\n\
    \    [else\n     (round (* 0.5 (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c))\
    \ 2)]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n \
    \    (round (* 0.5 (- (+ a b c) a b c)) 2)]\n    [else -1]))\n", "  (cond\n  \
    \  [(and (< a (+ b c)) (< b (+ a c)) (< c (+ a b)))\n     (sqrt (* (- (* a a)\
    \ (* b b) (* c c)) (* (+ a b c) (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c))))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (+ (* (- a b)\
    \ (- a b)) (* (- a c) (- a c))))]\n    [(and (>= b a) (>= b c)) (sqrt (+ (* (-\
    \ b a) (- b a)) (* (- b c) (- b c))))]\n    [(and (>= c a) (>= c b)) (sqrt (+\
    \ (* (- c a) (- c a)) (* (- c b) (- c b))))]\n    [else -1]))\n", "  (cond\n \
    \   [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a\
    \ (sqrt (- (* b b) (* (- a b) (- a b)))))) 2)]\n    [else -1]))\n", "  (if (and\
    \ (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b\
    \ c) a))\n          (round (* 0.5 (* a (sqrt (- (* b b) (* (- a) (- c)))))) 2)\n\
    \          -1)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (round (* area 2) 2))]\n    [else -1]))\n", "  (cond\n \
    \   [(and (>= a b) (>= a c)) (sqrt (+ (* (- a b) (- a b)) (* (- a c) (- a c))))]\n\
    \    [(and (>= b a) (>= b c)) (sqrt (+ (* (- b a) (- b a)) (* (- b c) (- b c))))]\n\
    \    [(and (>= c a) (>= c b)) (sqrt (+ (* (- c a) (- c a)) (* (- c b) (- c b))))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 2) 2)\n           -1))]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n   \
    \        (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (* a b\
    \ c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([s\
    \ (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= b a)\
    \ (>= b c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (>\
    \ c 0))\n         (let* ([s (/ (+ a b c) 2)]\n                [area (sqrt (- (*\
    \ s (- s a)) (* s (- s b)) (* s (- s c))))])\n           (round (* area 2) 2))]\n\
    \        [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and\
    \ (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (* a (sqrt\
    \ (- (* b b) (* (- c) (- c)))))) 2)\n          -1)\n      -1))\n", "  (if (and\
    \ (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b\
    \ c) a))\n          (round (* 0.5 (* a (sqrt (- (* b b) (* 0.25 (* a a)))))) 2)\n\
    \          -1)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n\
    \    [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n\
    \      (round (* 0.5 (* a (sqrt (- (* b b) (* (- c) (- c)))))) 2)\n      -1))\n",
  "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n\
    \      (round (* 0.5 (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c)) 2)\n   \
    \   -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+\
    \ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n     \
    \  (if (positive? area)\n           (round (* area 2) 2)\n           -1))]\n \
    \   [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s\
    \ (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (> area 0) (not (infinite? area)))\n           (round (* area\
    \ 100) 2)\n           -1))]\n    [else -1]))\n", "  (if (and (> a 0) (> b 0) (>\
    \ c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n         \
    \ (round (* 0.5 (* a (sqrt (- (* b b) (* (/ a 2) (/ a 2)))))) 2)\n          -1)\n\
    \      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (sqrt (+ (* (- a\
    \ b) (- a b)) (* (- b c) (- b c))))]\n    [(and (>= b a) (>= b c))\n     (sqrt\
    \ (+ (* (- b a) (- b a)) (* (- a c) (- a c))))]\n    [(and (>= c a) (>= c b))\n\
    \     (sqrt (+ (* (- c a) (- c a)) (* (- a b) (- a b))))]\n    [else -1]))\n",
  "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n\
    \      (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (-\
    \ s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (round (* area 2) 2))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n      \
    \              (* (* a a) (+ (* b b) (* c c))))))]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n                    (* (*\
    \ b b) (+ (* a a) (* c c))))))]\n       [else -1])]\n    [(and (>= c a) (>= c\
    \ b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n      \
    \     (sqrt (- (* (+ a b c) (+ a b c))\n                    (* (* c c) (+ (* a\
    \ a) (* b b))))))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(>=\
    \ (+ a b) c) (* 0.5 (- a c) (- b c))]\n    [(>= (+ a c) b) (* 0.5 (- a b) (- c\
    \ b))]\n    [(>= (+ b c) a) (* 0.5 (- a b) (- c a))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (*\
    \ (/ (+ a b c) 2)\n           (sqrt (- (* (- (+ a b c) a)\n                  \
    \     (- (+ a b c) a))\n                    (* (- (+ a b c) b)\n             \
    \          (- (+ a b c) b)))))\n        ]\n       [else -1])]\n    [(and (>= b\
    \ a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n\
    \           (sqrt (- (* (- (+ a b c) b)\n                       (- (+ a b c) b))\n\
    \                    (* (- (+ a b c) a)\n                       (- (+ a b c) a)))))\n\
    \        ]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n   \
    \    [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (- (+\
    \ a b c) c)\n                       (- (+ a b c) c))\n                    (* (-\
    \ (+ a b c) a)\n                       (- (+ a b c) a)))))\n        ]\n      \
    \ [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n  \
    \   (sqrt (+ (* (- a b) (- a b)) (* (- a c) (- a c))))]\n    [(and (>= b a) (>=\
    \ b c))\n     (sqrt (+ (* (- b a) (- b a)) (* (- b c) (- b c))))]\n    [(and (>=\
    \ c a) (>= c b))\n     (sqrt (+ (* (- c a) (- c a)) (* (- c b) (- c b))))]\n \
    \   [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c)\
    \ a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (*\
    \ 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (round (* area 2) 2))]\n    [else -1]))\n", "  (if\
    \ (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n  \
    \    (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n", "  (if (and (> (+ a\
    \ b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (round (*\
    \ 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)\n   \
    \   -1))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (>\
    \ (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n", " \
    \ (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n  \
    \      (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n     \
    \               (* (* a a) (+ (* b b) (* c c))))))]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (+ a b c) (+ a b c))\n                    (* (*\
    \ b b) (+ (* a a) (* c c))))))]\n       [else -1])]\n    [(and (>= c a) (>= c\
    \ b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n      \
    \     (sqrt (- (* (+ a b c) (+ a b c))\n                    (* (* c c) (+ (* a\
    \ a) (* b b))))))]\n       [else -1])]\n    [else -1]))\n", "  (cond [(and (>\
    \ (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n         (round (* 0.5 (* a b (sin\
    \ (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n        [else -1]))\n",
  "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (- (+\
    \ a b c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n \
    \    (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (- a b c))))))]\n       [else -1])]\n\
    \    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (*\
    \ (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c)\
    \ (- a b c))))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n\
    \       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+\
    \ a b c) (* (+ a b c)) (* (- a b c) (- a b c))))))]\n       [else -1])]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+\
    \ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n     \
    \  (if (and (> area 0) (not (infinite? area)))\n           (round (* area 100))\n\
    \           -1))]\n    [else -1]))\n", "  (define (is-valid a b c)\n    (and (>\
    \ (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area\
    \ a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c)) (* a b c))))\n  (cond ((is-valid\
    \ a b c) (round (* 100 (area a b c))))\n        (else -1)))\n", "  (cond\n   \
    \ [(and (>= a b) (>= a c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a)\
    \ (- s b) (- s c)))]\n    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b c)\
    \ 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n \
    \    (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else\
    \ -1]))\n", "  (cond [(> (+ a b) c) (round (* 0.5 (* a b (sin (acos (/ (- (* a\
    \ a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n        [else -1]))\n```\n\n```racket\n\
    #lang racket\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (define s (/\
    \ (+ a b c) 2))\n         (define area (sqrt (- (* s (- s a)) (* s (- s b)) (*\
    \ s (- s c)))))\n         (if (and (>= area 0) (not (nan? area)))\n          \
    \   (round (* area 2) 2)\n             -1)]\n        [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (define p (/ (+ a b c) 2))\n     (sqrt (*\
    \ p (- p a) (- p b) (- p c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a\
    \ b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n\
    \           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (- a b c)))\n   \
    \               (* (* a a) (* b b))\n                  (* (* a a) (* c c))\n \
    \                 (* (* b b) (* c c)))))\n        ]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (- a b c)))\n\
    \                  (* (* a a) (* b b))\n                  (* (* a a) (* c c))\n\
    \                  (* (* b b) (* c c)))))\n        ]\n       [else -1])]\n   \
    \ [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/\
    \ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (-\
    \ a b c)))\n                  (* (* a a) (* b b))\n                  (* (* a a)\
    \ (* c c))\n                  (* (* b b) (* c c)))))\n        ]\n       [else\
    \ -1])]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n\
    \       [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (-\
    \ (+ a b c) a)\n                       (- (+ a b c) a))\n                    (*\
    \ (- (+ a b c) b)\n                       (- (+ a b c) b)))))\n        ]\n   \
    \    [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c)\
    \ b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (- (+ a b c) b)\n   \
    \                    (- (+ a b c) b))\n                    (* (- (+ a b c) a)\n\
    \                       (- (+ a b c) a)))))\n        ]\n       [else -1])]\n \
    \   [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/\
    \ (+ a b c) 2)\n           (sqrt (- (* (- (+ a b c) c)\n                     \
    \  (- (+ a b c) c))\n                    (* (- (+ a b c) a)\n                \
    \       (- (+ a b c) a)))))\n        ]\n       [else -1])]\n    [else -1]))\n",
  "  (if (and (> a 0) (> b 0) (> c 0)\n           (> (+ a b) c)\n           (> (+\
    \ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+ a b c) (- a b\
    \ c)) (- (+ a b c) (- a b c)) (- (+ a b c) (- a b c))) 2)\n      -1))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (positive? area)\n\
    \           (round (* area 2) 2)\n           -1))]\n    [else -1]))\n", "  (cond\
    \ [(and (> a 0) (> b 0) (> c 0))\n         (define s (/ (+ a b c) 2))\n      \
    \   (sqrt (* s (- s a) (- s b) (- s c)))]\n        [else -1]))\n", "  (define\
    \ (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n\
    \         (> (+ b c) a)))\n  (define (area a b c)\n    (/ (* a b c) 2))\n  (if\
    \ (is-valid-triangle a b c)\n      (area a b c)\n      -1))\n", "  (cond\n   \
    \ [(> (+ a b) c) (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c))\
    \ (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(>= (+ a b) c)\n    \
    \ (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b))))))\
    \ 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n    \
    \ (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (-\
    \ s c)))])\n       (round (* area 2) 2))]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 2) 2)\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+\
    \ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (/ (* a (sqrt (- (* a a) (/ (+ (* b b) (* c c)) 2)))) 2)\n        ]\n  \
    \     [else -1]\n       )\n     ]\n    [(and (>= b a) (>= b c))\n     (cond\n\
    \       [(>= (+ a c) b)\n        (/ (* b (sqrt (- (* b b) (/ (+ (* a a) (* c c))\
    \ 2)))) 2)\n        ]\n       [else -1]\n       )\n     ]\n    [(and (>= c a)\
    \ (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (/ (* c (sqrt (- (* c\
    \ c) (/ (+ (* a a) (* b b)) 2)))) 2)\n        ]\n       [else -1]\n       )\n\
    \     ]\n    [else -1]\n    )\n  )\n", "  (if (and (> a 0) (> b 0) (> c 0))\n\
    \      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (*\
    \ 0.5 (* a (sqrt (- (* b b) (* 0.25 (* a a)))))) 2)\n          -1)\n      -1))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (>\
    \ a s) (> b s) (> c s))\n           (round (* area 2) 2)\n           -1))]\n \
    \   [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([s (/ (+\
    \ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= b a) (>= b\
    \ c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c)\
    \ (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (*\
    \ a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (if (and (>\
    \ (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (* a (sqrt (- (*\
    \ b b) (* 0.25 (* a a)))))) 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (-\
    \ s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+\
    \ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (*\
    \ b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan?\
    \ area)))\n           (round (* area 2) 2)\n           -1))]\n    [else -1]))\n",
  "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (define s (/ (+ a b c) 2))\n \
    \        (sqrt (* s (- s a) (- s b) (- s c)))]\n        [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round (* area 100))]\n   \
    \ [else -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n      \
    \     (> (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n",
  "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (define s (/ (+ a b c) 2))\n \
    \        (sqrt (* s (- s a) (- s b) (- s c)))]\n        [else -1]))\n", "  (cond\n\
    \    [(and (>= a b c) (>= (+ b c) a)) (round (* 0.5 (- (+ a b) c) (- (+ a c) b)))\
    \ 2]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define\
    \ s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b)\
    \ (> (+ b c) a))\n          (round (* 0.5 (* a (sqrt (+ (* b b) (* c c))))))\n\
    \          -1)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (*\
    \ (- a b c) (- a b c) (- a b c)))]\n    [(and (>= b a) (>= b c)) (sqrt (* (- b\
    \ a c) (- b a c) (- b a c)))]\n    [(and (>= c a) (>= c b)) (sqrt (* (- c a b)\
    \ (- c a b) (- c a b)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b\
    \ 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s\
    \ b) (- s c))))]\n    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n\
    \         (define s (/ (+ a b c) 2))\n         (sqrt (* s (- s a) (- s b) (- s\
    \ c)))]\n        [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a c)\
    \ b) (> (+ b c) a))\n     (round (* 0.5 (- (+ a b c) a b c)) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt\
    \ (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b c) (>= b c a) (>= c a b))\n     (/ (* a b) 2)]\n    [else -1]))\n", "  (cond\
    \ [(and (>= a b) (>= a c)) (sqrt (* (- a) (- a) (- b) (- b) (- c) (- c)))]\n \
    \       [(and (>= b a) (>= b c)) (sqrt (* (- b) (- b) (- a) (- a) (- c) (- c)))]\n\
    \        [(and (>= c a) (>= c b)) (sqrt (* (- c) (- c) (- a) (- a) (- b) (- b)))]\n\
    \        [else -1]))\n", "  (cond\n    [(>= (+ a b) c)\n     (round (* 0.5 (*\
    \ a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([p (+ a b c)])\n\
    \       (/ (* p (- p a) (- p b) (- p c)) 16))]\n    [(and (>= b a) (>= b c))\n\
    \     (let ([p (+ a b c)])\n       (/ (* p (- p a) (- p b) (- p c)) 16))]\n  \
    \  [(and (>= c a) (>= c b))\n     (let ([p (+ a b c)])\n       (/ (* p (- p a)\
    \ (- p b) (- p c)) 16))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b\
    \ c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (if (and\
    \ (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b\
    \ c) a))\n          (round (* 0.5 (* a (sqrt (- (* b b) (* (- c) (- c)))))) 2)\n\
    \          -1)\n      -1))\n", "  (cond [(and (>= a b) (>= a c)) (sqrt (* (- (*\
    \ a a) (* b b) (* c c)) (* a b c))) ]\n        [(and (>= b a) (>= b c)) (sqrt\
    \ (* (- (* b b) (* a a) (* c c)) (* a b c))) ]\n        [(and (>= c a) (>= c b))\
    \ (sqrt (* (- (* c c) (* a a) (* b b)) (* a b c))) ]\n        [else -1]))\n",
  "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n\
    \      (round (* 0.5 (* a b c)) 2)\n      -1))\n", "  (cond\n    [(>= (+ a b)\
    \ c) (* 0.5 (- a b c))]\n    [(>= (+ a c) b) (* 0.5 (- a b c))]\n    [(>= (+ b\
    \ c) a) (* 0.5 (- a b c))]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n  \
    \         (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+\
    \ a b c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (define s (/ (+ a b c) 2))\n     (define area (sqrt (- (* s (- s a)) (*\
    \ s (- s b)) (* s (- s c)))))\n     (round (* area 100))]\n    [else -1]))\n",
  "  (cond\n    [(>= (+ a b) c) (* (/ (+ a b) 2) (sqrt (- (* a a) (* (/ (- (* a a)\
    \ (* b b)) (* 2 (+ a b))) (* c c)))))]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (+ a b c)) )\n    \
    \               (* a (* a a))\n                   (* b (* b b))\n            \
    \       (* c (* c c)))))\n        ]\n       [else -1])]\n    [(and (>= b a) (>=\
    \ b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n    \
    \       (sqrt (- (* (+ a b c) (* (+ a b c)) (* (+ a b c)) )\n                \
    \   (* a (* a a))\n                   (* b (* b b))\n                   (* c (*\
    \ c c)))))\n        ]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n    \
    \ (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (+ a b c) (* (+ a b c)) (* (+ a b c)) )\n                   (* a (* a\
    \ a))\n                   (* b (* b b))\n                   (* c (* c c)))))\n\
    \        ]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (> (+\
    \ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (- (+ a b c) a b c))\
    \ 2)]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (>\
    \ (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c\
    \ c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b\
    \ 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (-\
    \ s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n\
    \           (round (* area 2) 2)\n           -1))]\n    [else -1]))\n", "  (if\
    \ (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n  \
    \    (round (* 0.5 (* a b c)) 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s\
    \ b) (- s c)))]\n    [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (>\
    \ (+ b c) a))\n      (round (* 0.5 (- (+ a b c) (- a b c))) 2)\n      -1))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (define p (/ (+ a b c) 2))\n     (sqrt\
    \ (* p (- p a) (- p b) (- p c)))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b c)\
    \ 2)\n           (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (- a b c)))\n\
    \                   (* a (* a a)) (* b (* b b)) (* c (* c c)))))\n        ]\n\
    \       [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+\
    \ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (+ a b c) (* (+\
    \ a b c)) (* (- a b c) (- a b c)))\n                   (* a (* a a)) (* b (* b\
    \ b)) (* c (* c c)))))\n        ]\n       [else -1])]\n    [(and (>= c a) (>=\
    \ c b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n    \
    \       (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (- a b c)))\n       \
    \            (* a (* a a)) (* b (* b b)) (* c (* c c)))))\n        ]\n       [else\
    \ -1])]\n    [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0)\n           (<\
    \ (+ a b) c)\n           (< (+ a c) b)\n           (< (+ b c) a))\n      -1\n\
    \      (round (* 0.5 (* a b c)) 2)))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (number? area) (not (negative? area)))\n\
    \           (round (* area 2) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a (+ b c)) (>= b (+ a c)) (>= c (+ a b))) -1]\n    [else (round\
    \ (* 0.5 (* a b c)) 2)]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n \
    \    (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (* (- (* a a) (* b b)\
    \ (* c c)) (* a b c)))]\n    [(and (>= b a) (>= b c)) (sqrt (* (- (* b b) (* a\
    \ a) (* c c)) (* a b c)))]\n    [(and (>= c a) (>= c b)) (sqrt (* (- (* c c) (*\
    \ a a) (* b b)) (* a b c)))]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a\
    \ b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (- (+ a b c) a b c))\
    \ 2)]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n\
    \           (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n",
  "  (cond [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n         (round (* 0.5\
    \ (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n      \
    \  [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n  \
    \    (round (* 0.5 (- (+ a b c) (- a b c)) (- (+ a b c) (- a b c)) (- (+ a b c)\
    \ (- a b c))) 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c)) (+ (*\
    \ a b) (* a c))]\n    [(and (>= b a) (>= b c)) (+ (* b a) (* b c))]\n    [(and\
    \ (>= c a) (>= c b)) (+ (* c a) (* c b))]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let*\n         ([s (/ (+ a b c) 2)]\n      \
    \    [area (sqrt (- (* s (- s a)) (* s (- s b)) (* s (- s c))))])\n       (if\
    \ (and (number? area) (not (nan? area)))\n           (round (* area 2) 2)\n  \
    \         -1))]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a\
    \ c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (*\
    \ b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos\
    \ (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (if\
    \ (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (- (+ a\
    \ b c) a b c)) 2)\n      -1))\n", "  (cond [(and (> (+ a b) c)\n             \
    \ (> (+ a c) b)\n              (> (+ b c) a))\n         (round (* 0.5 (- (+ a\
    \ b c) a b c)) 2)]\n        [else -1]))\n", "  (if (and (> (+ a b) c)\n      \
    \     (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+ a b\
    \ c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 2) 2)\n           -1))]\n    [else -1]))\n```\n\n```racket\n#lang racket\n",
  "  (if (and (> a 0) (> b 0) (> c 0)\n           (> (+ a b) c)\n           (> (+\
    \ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (sqrt (- (* a a) (*\
    \ b b) (* c c)))))\n      -1))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
