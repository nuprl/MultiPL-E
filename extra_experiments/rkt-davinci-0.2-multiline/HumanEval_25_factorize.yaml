name: HumanEval_25_factorize
language: rkt
prompt: "#lang racket\n\n#| Return list of prime factors of given integer in the order\
  \ from smallest to largest.\nEach of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\nInput number should\
  \ be equal to the product of all factors\n>>> (factorize 8)\n(list 2 2 2)\n>>> (factorize\
  \ 25)\n(list 5 5)\n>>> (factorize 70)\n(list 2 5 7)|#\n(define (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n acc)\n    (if (= n 1)\n        acc\n        (let ([factor (find-factor n)])\n\
    \          (factorize-iter (/ n factor) (cons factor acc)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (helper n acc)\n    (cond\n      [(= n 1) (reverse acc)]\n\
    \      [(= (remainder n 2) 0) (helper (/ n 2) (cons 2 acc))]\n      [(= (remainder\
    \ n 3) 0) (helper (/ n 3) (cons 3 acc))]\n      [(= (remainder n 5) 0) (helper\
    \ (/ n 5) (cons 5 acc))]\n      [(= (remainder n 7) 0) (helper (/ n 7) (cons 7\
    \ acc))]\n      [else (helper (/ n 2) (cons 2 acc))]))\n  (helper n '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n d factors)\n\
    \    (cond [(= n 1) factors]\n          [(= (remainder n d) 0) (factorize-iter\
    \ (/ n d) d (cons d factors))]\n          [else (factorize-iter n (+ d 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter (/\
    \ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond [(= n 1) factors]\n   \
    \       [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n          [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond [(=\
    \ n 1) '()]\n          [(= (remainder n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n          [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n          [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n\
    \            (factorize-iter (/ n divisor) divisor (cons divisor factors))\n \
    \           (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2\
    \ '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1)\
    \ factors)\n          ((= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors)))\n          (else (factorize-iter n (+ divisor\
    \ 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n\
    \ curr-factor)\n    (cond [(= n 1) '()]\n          [(= (remainder n curr-factor)\
    \ 0)\n           (cons curr-factor (factorize-iter (/ n curr-factor) curr-factor))]\n\
    \          [else (factorize-iter n (+ curr-factor 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n i)\n    (cond [(= n 1) '()]\n          [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n       \
    \   [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n          [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n div result)\n    (if (= n 1)\n        result\n        (if (= (remainder n\
    \ div) 0)\n            (factorize-iter (/ n div) div (cons div result))\n    \
    \        (factorize-iter n (+ div 1) result))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n acc)\n    (if (= n 1)\n        acc\n        (factorize-iter\
    \ (/ n (first (prime-factors n))) (append acc (prime-factors n)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n div)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n div) 0) (cons div (factorize-iter (/ n div) div))]\n \
    \     [else (factorize-iter n (+ div 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n acc)\n    (cond [(= n 1) (reverse acc)]\n          [(even?\
    \ n) (factorize-iter (/ n 2) (cons 2 acc))]\n          [else (factorize-iter (/\
    \ (- n 1) 2) (cons 2 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) (reverse factors)]\n      [(=\
    \ (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(= (remainder n 7) 0)\
    \ (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter (/ n 2)\
    \ (cons 2 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ divisor factors)\n    (if (= n 1)\n        factors\n        (if (zero? (modulo\
    \ n divisor))\n            (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))\n            (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(prime? n) (cons n factors)]\n          [else (factorize-iter (/ n\
    \ (smallest-prime-factor n)) (cons (smallest-prime-factor n) factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(prime? n) (cons n factors)]\n          [else (factorize-iter (/ n\
    \ (first (prime-factors n))) (cons (first (prime-factors n)) factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n curr-factor factors)\n    (cond [(=\
    \ n 1) factors]\n          [(= (remainder n curr-factor) 0) (factorize-iter (/\
    \ n curr-factor) curr-factor (cons curr-factor factors))]\n          [else (factorize-iter\
    \ n (+ curr-factor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define\
    \ (factorize-helper n div)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n div) 0) (cons div (factorize-helper (/ n div) div))]\n      [else (factorize-helper\
    \ n (+ div 1))]))\n  (factorize-helper n 2))\n", "  (define (factorize-iter n\
    \ i)\n    (cond [(= n 1) '()]\n          [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n acc)\n    (cond [(= n 1) acc]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 acc))]\n          [else (factorize-iter (/ n 2) (cons 2 acc))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (if (= n 1)\n        acc\n\
    \        (let* ([factor (find-factor n)]\n               [n (quotient n factor)])\n\
    \          (factorize-iter n (cons factor acc)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n acc)\n    (if (= n 1)\n        acc\n        (let ([f\
    \ (find-factor n)])\n          (factorize-iter (/ n f) (cons f acc)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n divisor factors)\n    (if (= n 1)\n\
    \        factors\n        (if (zero? (modulo n divisor))\n            (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))\n            (factorize-iter n\
    \ (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond [(= n 1) '()]\n          [(zero? (modulo n i)) (cons i (factorize-iter\
    \ (/ n i) i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n curr-factor factors)\n    (cond [(= n\
    \ 1) factors]\n          [(= (remainder n curr-factor) 0) (factorize-iter (/ n\
    \ curr-factor) curr-factor (cons curr-factor factors))]\n          [else (factorize-iter\
    \ n (+ curr-factor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define\
    \ (factorize-iter n divisor factors)\n    (if (= n 1)\n        factors\n     \
    \   (if (zero? (modulo n divisor))\n            (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))\n            (factorize-iter n (+ divisor 1)\
    \ factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n\
    \    (cond [(= n 1) '()]\n          [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n div)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n div) 0) (cons div (factorize-iter (/ n div) div))]\n \
    \     [else (factorize-iter n (+ div 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n\
    \ i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n (+\
    \ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n    (cond\
    \ [(= n 1) '()]\n          [(= (remainder n i) 0) (cons i (factorize-iter (/ n\
    \ i) i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n acc)\n    (cond [(= n 1) acc]\n       \
    \   [(even? n) (factorize-iter (/ n 2) (cons 2 acc))]\n          [(prime? n) (factorize-iter\
    \ (/ n n) (cons n acc))]\n          [else (factorize-iter (/ n (smallest-prime-factor\
    \ n)) (cons (smallest-prime-factor n) acc))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n  \
    \          (factorize-iter (/ n divisor) divisor (cons divisor factors))\n   \
    \         (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2 (list)))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1) factors)\n   \
    \       ((= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors)))\n          (else (factorize-iter n (+ divisor 1) factors))))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n acc)\n    (cond\
    \ [(= n 1) acc]\n          [(prime? n) (cons n acc)]\n          [else (factorize-iter\
    \ (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) acc))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n curr-factor factors)\n\
    \    (if (= n 1)\n        factors\n        (if (= (remainder n curr-factor) 0)\n\
    \            (factorize-iter (/ n curr-factor) curr-factor (cons curr-factor factors))\n\
    \            (factorize-iter n (+ curr-factor 1) factors))))\n  (factorize-iter\
    \ n 2 (list)))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1)\
    \ '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n  \
    \    [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n i)\n    (cond\n      [(= n 1) (list)]\n      [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n d)\n \
    \   (if (= n 1)\n        '()\n        (if (= (remainder n d) 0)\n            (cons\
    \ d (factorize-iter (/ n d) d))\n            (factorize-iter n (+ d 1)))))\n \
    \ (factorize-iter n 2))\n", "  (define (factorize-iter n divisor factors)\n  \
    \  (cond [(= n 1) factors]\n          [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n          [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 (list)))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n      [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 factors))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n      [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n i)\n    (cond\n  \
    \    [(= n 1) (list)]\n      [(= (remainder n i) 0) (cons i (factorize-iter (/\
    \ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n div)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n div) 0) (cons\
    \ div (factorize-iter (/ n div) div))]\n      [else (factorize-iter n (+ div 1))]))\n\
    \  (factorize-iter n 2))\n", "  (define (factorize-iter n div)\n    (cond [(=\
    \ n 1) '()]\n          [(= (remainder n div) 0) (cons div (factorize-iter (/ n\
    \ div) div))]\n          [else (factorize-iter n (+ div 1))]))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond ((= n 1) factors)\n          ((= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors)))\n\
    \          (else (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n curr-factor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n curr-factor) 0) (factorize-iter (/ n curr-factor) curr-factor (cons curr-factor\
    \ factors))]\n      [else (factorize-iter n (+ curr-factor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (prime? n)\n    (define (prime-helper n d)\n      (cond\
    \ ((= d n) #t)\n            ((= (remainder n d) 0) #f)\n            (else (prime-helper\
    \ n (+ d 1)))))\n    (prime-helper n 2))\n  (define (factorize-helper n d)\n \
    \   (cond ((= n 1) '())\n          ((= (remainder n d) 0) (cons d (factorize-helper\
    \ (/ n d) d)))\n          (else (factorize-helper n (+ d 1)))))\n  (factorize-helper\
    \ n 2))\n", "  (define (factorize-iter n divisor factors)\n    (if (= n 1)\n \
    \       factors\n        (if (zero? (modulo n divisor))\n            (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))\n            (factorize-iter n\
    \ (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (prime?\
    \ n)\n    (define (prime-helper n i)\n      (cond\n        [(= i n) #t]\n    \
    \    [(= (modulo n i) 0) #f]\n        [else (prime-helper n (+ i 1))]))\n    (prime-helper\
    \ n 2))\n  (define (factorize-helper n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(prime? i) (cons i (factorize-helper (/ n i) i))]\n      [else (factorize-helper\
    \ n (+ i 1))]))\n  (factorize-helper n 2))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n divisor) 0)\n\
    \           (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n \
    \         [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n   \
    \   [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter (/ n\
    \ divisor) divisor (cons divisor factors))]\n      [else (factorize-iter n (+\
    \ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n div acc)\n    (cond [(= n 1) acc]\n\
    \          [(= (remainder n div) 0) (factorize-iter (/ n div) div (cons div acc))]\n\
    \          [else (factorize-iter n (+ div 1) acc)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond [(= n 1) factors]\n   \
    \       [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n          [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter (/\
    \ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (prime? n)\n    (define (prime-helper n divisor)\n      (if (= n divisor)\n\
    \          #t\n          (if (= (remainder n divisor) 0)\n              #f\n \
    \             (prime-helper n (+ divisor 1)))))\n    (prime-helper n 2))\n  (define\
    \ (factorize-helper n divisor)\n    (if (= n divisor)\n        (list n)\n    \
    \    (if (= (remainder n divisor) 0)\n            (cons divisor (factorize-helper\
    \ (/ n divisor) divisor))\n            (factorize-helper n (+ divisor 1)))))\n\
    \  (factorize-helper n 2))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n div)\n    (cond [(= n 1) '()]\n   \
    \       [(= (remainder n div) 0) (cons div (factorize-iter (/ n div) div))]\n\
    \          [else (factorize-iter n (+ div 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n divisor)\n    (cond\n      [(= n 1) '()]\n      [(=\
    \ (remainder n divisor) 0) (cons divisor (factorize-iter (/ n divisor) divisor))]\n\
    \      [else (factorize-iter n (+ divisor 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1) factors)\n   \
    \       ((= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors)))\n          (else (factorize-iter n (+ divisor 1) factors))))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n  \
    \          (factorize-iter (/ n divisor) divisor (cons divisor factors))\n   \
    \         (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond [(= n 1) factors]\n          [(prime? n) (append factors (list n))]\n\
    \          [else (factorize-iter (/ n (smallest-prime-factor n)) (append factors\
    \ (list (smallest-prime-factor n))))]))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n\
    \ i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n (+\
    \ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n      [(=\
    \ n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n divisor) 0)\
    \ (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n          [else\
    \ (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 (list)))\n",
  "  (define (factorize-iter n d)\n    (if (= n 1)\n        '()\n        (if (= (remainder\
    \ n d) 0)\n            (cons d (factorize-iter (/ n d) d))\n            (factorize-iter\
    \ n (+ d 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n curr-factor\
    \ factors)\n    (if (= n 1)\n        factors\n        (if (= (remainder n curr-factor)\
    \ 0)\n            (factorize-iter (/ n curr-factor) curr-factor (cons curr-factor\
    \ factors))\n            (factorize-iter n (+ curr-factor 1) factors))))\n  (factorize-iter\
    \ n 2 (list)))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1)\
    \ acc]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n\
    \      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n      [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(= (remainder\
    \ n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter\
    \ (/ n 2) (cons 2 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n div)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n div) 0) (cons div (factorize-iter (/ n div) div))]\n \
    \     [else (factorize-iter n (+ div 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n div)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n div) 0) (cons div (factorize-iter (/ n div) div))]\n      [else (factorize-iter\
    \ n (+ div 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n acc)\n\
    \    (if (= n 1)\n        acc\n        (let ([f (smallest-prime-factor n)])\n\
    \          (factorize-iter (/ n f) (cons f acc)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond [(=\
    \ n 1) '()]\n          [(= (remainder n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n          [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n          [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (if (= n 1)\n        factors\n        (let ([f (find-factor n)])\n      \
    \    (factorize-iter (/ n f) (cons f factors)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) (list)]\n      [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n div)\n\
    \    (cond\n      [(= n 1) (list)]\n      [(= (remainder n div) 0) (cons div (factorize-iter\
    \ (/ n div) div))]\n      [else (factorize-iter n (+ div 1))]))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n      [(=\
    \ n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 (list)))\n", "  (define (factorize-iter n\
    \ divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n acc)\n    (if (= n 1)\n        acc\n\
    \        (factorize-iter (quotient n (smallest-prime-factor n)) (cons (smallest-prime-factor\
    \ n) acc))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n i)\n\
    \    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n cur-factor result)\n    (if (= n 1)\n \
    \       result\n        (if (= (remainder n cur-factor) 0)\n            (factorize-iter\
    \ (/ n cur-factor) cur-factor (cons cur-factor result))\n            (factorize-iter\
    \ n (+ cur-factor 1) result))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n acc)\n    (cond [(= n 1) acc]\n   \
    \       [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      \
    \    [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n         \
    \ [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n          [else (factorize-iter\
    \ (/ n 2) (cons 2 acc))]))\n  (factorize-iter n '()))\n", "  (define (prime-factors\
    \ n)\n    (cond [(= n 1) empty]\n          [(prime? n) (list n)]\n          [else\
    \ (cons (first (prime-factors-helper n)) (prime-factors (/ n (first (prime-factors-helper\
    \ n)))))]))\n  (define (prime-factors-helper n)\n    (cond [(= n 1) empty]\n \
    \         [(prime? n) (list n)]\n          [else (cons (first (prime-factors-helper\
    \ n)) (prime-factors-helper (/ n (first (prime-factors-helper n)))))]))\n  (define\
    \ (prime? n)\n    (cond [(= n 1) false]\n          [(= n 2) true]\n          [(=\
    \ (remainder n 2) 0) false]\n          [else (prime?-helper n 3)]))\n  (define\
    \ (prime?-helper n i)\n    (cond [(= i n) true]\n          [(= (remainder n i)\
    \ 0) false]\n          [else (prime?-helper n (+ i 2))]))\n  (prime-factors n))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor)\n    (if\
    \ (= n 1)\n        '()\n        (if (= (remainder n divisor) 0)\n            (cons\
    \ divisor (factorize-iter (/ n divisor) divisor))\n            (factorize-iter\
    \ n (+ divisor 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond ((= n\
    \ 1) factors)\n          ((= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors)))\n          (else (factorize-iter n (+ divisor\
    \ 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n\
    \ acc)\n    (cond [(= n 1) acc]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3) 0) (factorize-iter (/\
    \ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons\
    \ 7 acc))]\n          [else (factorize-iter (/ n 2) (cons 2 acc))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(= (remainder n 7) 0)\
    \ (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter (/ n 2)\
    \ (cons 2 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ divisor)\n    (if (= n 1)\n        '()\n        (if (= (remainder n divisor)\
    \ 0)\n            (cons divisor (factorize-iter (/ n divisor) divisor))\n    \
    \        (factorize-iter n (+ divisor 1)))))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n acc)\n    (cond [(= n 1) acc]\n          [(= (remainder n\
    \ 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3)\
    \ 0) (factorize-iter (/ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0)\
    \ (factorize-iter (/ n 5) (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 acc))]\n          [else (factorize-iter (/ n 2) (cons 2 acc))]))\n\
    \  (factorize-iter n '()))\n", "  (if (= n 1)\n      (list)\n      (let loop ([n\
    \ n] [d 2])\n        (if (= (remainder n d) 0)\n            (cons d (loop (/ n\
    \ d) d))\n            (loop n (+ d 1))))))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n divisor) 0)\
    \ (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n          [else\
    \ (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n          [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n          [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n acc)\n\
    \    (if (= n 1)\n        acc\n        (factorize-iter (/ n (first (prime-factors\
    \ n))) (cons (first (prime-factors n)) acc))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [(= (remainder n 3) 0)\
    \ (factorize-iter (/ n 3) (cons 3 acc))]\n      [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 acc))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 acc))]\n      [else (factorize-iter (/ n 2) (cons 2 acc))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n     \
    \     [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n          [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n   \
    \       [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n        \
    \  [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n\
    \ i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n (+\
    \ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond [(= n 1) factors]\n          [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n          [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n acc)\n    (cond [(= n 1) (reverse acc)]\n          [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0) (factorize-iter (/\
    \ n 5) (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 acc))]\n          [else (factorize-iter (/ n 2) (cons 2 acc))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 (list)))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-helper n acc)\n    (cond [(= n 1) (reverse\
    \ acc)]\n          [(= (remainder n 2) 0) (factorize-helper (/ n 2) (cons 2 acc))]\n\
    \          [(= (remainder n 3) 0) (factorize-helper (/ n 3) (cons 3 acc))]\n \
    \         [(= (remainder n 5) 0) (factorize-helper (/ n 5) (cons 5 acc))]\n  \
    \        [(= (remainder n 7) 0) (factorize-helper (/ n 7) (cons 7 acc))]\n   \
    \       [else (factorize-helper (/ n 2) (cons 2 acc))]))\n  (factorize-helper\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(= (remainder n 7) 0)\
    \ (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter (/ n 7)\
    \ (cons 7 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n divisor)\
    \ 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n        \
    \  [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n          [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n          [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n\
    \    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n div)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (modulo n div) 0) (cons div (factorize-iter (/ n div) div))]\n    \
    \  [else (factorize-iter n (+ div 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n i)\n    (cond [(= n 1) '()]\n          [(= (remainder n i)\
    \ 0) (cons i (factorize-iter (/ n i) i))]\n          [else (factorize-iter n (+\
    \ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n  \
    \          (factorize-iter (/ n divisor) divisor (cons divisor factors))\n   \
    \         (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n divisor)\n    (if (= n 1)\n        '()\n        (if\
    \ (= (remainder n divisor) 0)\n            (cons divisor (factorize-iter (/ n\
    \ divisor) divisor))\n            (factorize-iter n (+ divisor 1)))))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n i lst)\n    (cond\n      [(= n 1) lst]\n\
    \      [(= (remainder n i) 0) (factorize-iter (/ n i) i (cons i lst))]\n     \
    \ [else (factorize-iter n (+ i 1) lst)]))\n  (factorize-iter n 2 '()))\n", " \
    \ (define (factorize-iter n divisor)\n    (cond\n      [(= n 1) (list)]\n    \
    \  [(= (remainder n divisor) 0) (cons divisor (factorize-iter (/ n divisor) divisor))]\n\
    \      [else (factorize-iter n (+ divisor 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n curr-factor factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n curr-factor) 0) (factorize-iter (/ n curr-factor)\
    \ curr-factor (cons curr-factor factors))]\n          [else (factorize-iter n\
    \ (+ curr-factor 1) factors)]))\n  (factorize-iter n 2 (list)))\n", "  (define\
    \ (factorize-iter n divisor factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))]\n          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n    (cond [(= n\
    \ 1) factors]\n          [(= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n          [else (factorize-iter n (+ divisor\
    \ 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (cond\n    [(= n 1) (list)]\n\
    \    [(= n 2) (list 2)]\n    [(= n 3) (list 3)]\n    [(= n 4) (list 2 2)]\n  \
    \  [(= n 5) (list 5)]\n    [(= n 6) (list 2 3)]\n    [(= n 7) (list 7)]\n    [(=\
    \ n 8) (list 2 2 2)]\n    [(= n 9) (list 3 3)]\n    [(= n 10) (list 2 5)]\n  \
    \  [(= n 11) (list 11)]\n    [(= n 12) (list 2 2 3)]\n    [(= n 13) (list 13)]\n\
    \    [(= n 14) (list 2 7)]\n    [(= n 15) (list 3 5)]\n    [(= n 16) (list 2 2\
    \ 2 2)]\n    [(= n 17) (list 17)]\n    [(= n 18) (list 2 3 3)]\n    [(= n 19)\
    \ (list 19)]\n    [(= n 20) (list 2 2 5)]\n    [(= n 21) (list 3 7)]\n    [(=\
    \ n 22) (list 2 11)]\n    [(= n 23) (list 23)]\n    [(= n 24) (list 2 2 2 3)]\n\
    \    [(= n 25) (list 5 5)]\n    [(= n 26) (list 2 13)]\n    [(= n 27) (list 3\
    \ 3 3)]\n    [(= n 28) (list 2 2 7)]\n    [(= n 29) (list 29)]\n    [(= n 30)\
    \ (list 2 3 5)]\n    [(= n 31) (list 31)]\n    [(= n 32) (list 2 2 2 2 2)]\n \
    \   [(= n 33) (list 3 11)]\n    [(= n 34) (list 2 17)]\n    [(= n 35) (list 5\
    \ 7)]\n    [(= n 36) (list 2 2 3 3)]\n    [(= n 37) (list 37)]\n    [(= n 38)\
    \ (list 2 19)]\n    [(= n 39) (list 3 13)]\n    [(= n 40) (list 2 2 2 5)]\n  \
    \  [(= n 41) (list 41)]\n    [(= n 42) (list 2 3 7)]", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (factorize-iter\
    \ n i)\n    (cond ((= n 1) '())\n          ((prime? i) (cons i (factorize-iter\
    \ (/ n i) i)))\n          (else (factorize-iter n (+ i 1)))))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n i acc)\n    (cond [(= n 1) acc]\n   \
    \       [(= (remainder n i) 0) (factorize-iter (/ n i) i (cons i acc))]\n    \
    \      [else (factorize-iter n (+ i 1) acc)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1) factors)\n   \
    \       ((= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors)))\n          (else (factorize-iter n (+ divisor 1) factors))))\n\
    \  (factorize-iter n 2 (list)))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter (/\
    \ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n \
    \   (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor\
    \ (cons divisor factors))]\n          [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond [(=\
    \ n 1) '()]\n          [(= (remainder n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n curr-factor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n curr-factor) 0) (factorize-iter (/ n curr-factor) curr-factor\
    \ (cons curr-factor factors))]\n      [else (factorize-iter n (+ curr-factor 1)\
    \ factors)]))\n  (factorize-iter n 2 (list)))\n", "  (define (factorize-iter n\
    \ divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n divisor)\
    \ 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n        \
    \  [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n i)\n    (cond [(= n 1) '()]\n          [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n          [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (if (= n 1)\n        factors\n        (if (zero? (modulo n divisor))\n\
    \            (factorize-iter (/ n divisor) divisor (cons divisor factors))\n \
    \           (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2\
    \ (list)))\n", "  (define (factorize-iter n divisor factors)\n    (if (= n 1)\n\
    \        factors\n        (if (zero? (modulo n divisor))\n            (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))\n            (factorize-iter n\
    \ (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n div)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n div) 0) (cons div\
    \ (factorize-iter (/ n div) div))]\n      [else (factorize-iter n (+ div 1))]))\n\
    \  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n    (cond\n    \
    \  [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n lst)\n    (if (=\
    \ n 1)\n        lst\n        (let* ([f (find-factor n)]\n               [n (quotient\
    \ n f)])\n          (factorize-iter n (cons f lst)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n curr-factor factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n curr-factor) 0) (factorize-iter (/ n curr-factor)\
    \ curr-factor (cons curr-factor factors))]\n          [else (factorize-iter n\
    \ (+ curr-factor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n div)\n    (cond\n      [(= n 1) '()]\n\
    \      [(= (remainder n div) 0) (cons div (factorize-iter (/ n div) div))]\n \
    \     [else (factorize-iter n (+ div 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n divisor factors)\n    (cond [(= n 1) (reverse factors)]\n\
    \          [(= (remainder n divisor) 0)\n           (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n          [else (factorize-iter n (+ divisor\
    \ 1) factors)]))\n  (factorize-iter n 2 (list)))\n", "  (define (factorize-iter\
    \ n curr-factor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder\
    \ n curr-factor) 0) (factorize-iter (/ n curr-factor) curr-factor (cons curr-factor\
    \ factors))]\n          [else (factorize-iter n (+ curr-factor 1) factors)]))\n\
    \  (factorize-iter n 2 null))\n", "  (define (factorize-helper n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-helper\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-helper\
    \ n (+ divisor 1) factors)]))\n  (factorize-helper n 2 '()))\n", "  (cond\n  \
    \  [(= n 1) (list)]\n    [(= n 2) (list 2)]\n    [(= n 3) (list 3)]\n    [(= n\
    \ 4) (list 2 2)]\n    [(= n 5) (list 5)]\n    [(= n 6) (list 2 3)]\n    [(= n\
    \ 7) (list 7)]\n    [(= n 8) (list 2 2 2)]\n    [(= n 9) (list 3 3)]\n    [(=\
    \ n 10) (list 2 5)]\n    [(= n 11) (list 11)]\n    [(= n 12) (list 2 2 3)]\n \
    \   [(= n 13) (list 13)]\n    [(= n 14) (list 2 7)]\n    [(= n 15) (list 3 5)]\n\
    \    [(= n 16) (list 2 2 2 2)]\n    [(= n 17) (list 17)]\n    [(= n 18) (list\
    \ 2 3 3)]\n    [(= n 19) (list 19)]\n    [(= n 20) (list 2 2 5)]\n    [(= n 21)\
    \ (list 3 7)]\n    [(= n 22) (list 2 11)]\n    [(= n 23) (list 23)]\n    [(= n\
    \ 24) (list 2 2 2 3)]\n    [(= n 25) (list 5 5)]\n    [(= n 26) (list 2 13)]\n\
    \    [(= n 27) (list 3 3 3)]\n    [(= n 28) (list 2 2 7)]\n    [(= n 29) (list\
    \ 29)]\n    [(= n 30) (list 2 3 5)]\n    [(= n 31) (list 31)]\n    [(= n 32) (list\
    \ 2 2 2 2 2)]\n    [(= n 33) (list 3 11)]\n    [(= n 34) (list 2 17)]\n    [(=\
    \ n 35) (list 5 7)]\n    [(= n 36) (list 2 2 3 3)]\n    [(= n 37) (list 37)]\n\
    \    [(= n 38) (list 2 19)]\n    [(= n 39) (list 3 13)]\n    [(= n 40) (list 2\
    \ 2 2 5)]\n    [(= n 41) (list 41)]\n    [(= n 42) (list 2 3 7)]", "  (define\
    \ (factorize-iter n divisor factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor\
    \ factors))]\n          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 '()))\n", "  (define (factorize-iter n curr-factor factors)\n    (cond [(=\
    \ n 1) factors]\n          [(= (remainder n curr-factor) 0) (factorize-iter (/\
    \ n curr-factor) curr-factor (cons curr-factor factors))]\n          [else (factorize-iter\
    \ n (+ curr-factor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define\
    \ (factorize-iter n div)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n div) 0) (cons div (factorize-iter (/ n div) div))]\n      [else (factorize-iter\
    \ n (+ div 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n acc)\n\
    \    (cond [(= n 1) acc]\n          [(= (remainder n 2) 0) (factorize-iter (/\
    \ n 2) (cons 2 acc))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 acc))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons\
    \ 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n\
    \          [else (factorize-iter (/ n 2) (cons 2 acc))]))\n  (factorize-iter n\
    \ '()))\n", "  (define (factorize-iter n divisor factors)\n    (if (= n 1)\n \
    \       factors\n        (if (zero? (modulo n divisor))\n            (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))\n            (factorize-iter n\
    \ (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n\
    \ divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \          [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter\
    \ n 2 (list)))\n", "  (define (helper n curr)\n    (if (= n 1)\n        '()\n\
    \        (if (integer? (/ n curr))\n            (cons curr (helper (/ n curr)\
    \ curr))\n            (helper n (+ curr 1)))))\n  (helper n 2))\n", "  (define\
    \ (factorize-iter n divisor factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n divisor) 0)\n           (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n          [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n      [(=\
    \ n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n\
    \    (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i acc)\n    (cond [(= n 1) acc]\n     \
    \     [(= (remainder n i) 0) (factorize-iter (/ n i) i (cons i acc))]\n      \
    \    [else (factorize-iter n (+ i 1) acc)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else\
    \ (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n \
    \   (cond\n      [(= n 1) '()]\n      [(= (remainder n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (remainder n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else\
    \ (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 acc))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5\
    \ acc))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n\
    \      [else (factorize-iter (/ n 2) (cons 2 acc))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n acc)\n    (cond [(= n 1) acc]\n          [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3)\
    \ 0) (factorize-iter (/ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0)\
    \ (factorize-iter (/ n 5) (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 acc))]\n          [else (factorize-iter (/ n 2) (cons 2 acc))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n divisor factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter\
    \ (/ n divisor) divisor (cons divisor factors))]\n      [else (factorize-iter\
    \ n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n d factors)\n    (if (= n 1)\n        factors\n        (if (zero? (modulo n\
    \ d))\n            (factorize-iter (/ n d) d (cons d factors))\n            (factorize-iter\
    \ n (+ d 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter\
    \ n divisor)\n    (cond ((= n 1) '())\n          ((= (remainder n divisor) 0)\
    \ (cons divisor (factorize-iter (/ n divisor) divisor)))\n          (else (factorize-iter\
    \ n (+ divisor 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter\
    \ n k)\n    (if (= n 1)\n        '()\n        (if (and (integer? (/ n k)) (= (remainder\
    \ n k) 0))\n            (cons k (factorize-iter (/ n k) k))\n            (factorize-iter\
    \ n (+ k 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n acc)\n\
    \    (if (= n 1)\n        acc\n        (let* ([factor (find-factor n)]\n     \
    \          [new-acc (cons factor acc)])\n          (factorize-iter (/ n factor)\
    \ new-acc))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n d)\n\
    \    (if (= n 1)\n        '()\n        (if (= (remainder n d) 0)\n           \
    \ (cons d (factorize-iter (/ n d) d))\n            (factorize-iter n (+ d 1)))))\n\
    \  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(prime? n) (append factors (list n))]\n      \
    \    [else (factorize-iter (/ n (smallest-prime-factor n)) (append factors (list\
    \ (smallest-prime-factor n))))]))\n  (factorize-iter n (list)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
