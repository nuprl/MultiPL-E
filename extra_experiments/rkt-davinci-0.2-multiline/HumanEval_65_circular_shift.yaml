name: HumanEval_65_circular_shift
language: rkt
prompt: "#lang racket\n\n#| Circular shift the digits of the integer x, shift the\
  \ digits right by shift\nand return the result as a string.\nIf shift > number of\
  \ digits, return digits reversed.\n>>> (circular_shift 12 1)\n\"21\"\n>>> (circular_shift\
  \ 12 2)\n\"12\"|#\n(define (circular_shift x shift)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n\
  \    (check-equal? (candidate 100 2) \"001\")\n    (check-equal? (candidate 12 2)\
  \ \"12\")\n    (check-equal? (candidate 97 8) \"79\")\n    (check-equal? (candidate\
  \ 12 1) \"21\")\n    (check-equal? (candidate 11 101) \"11\")\n))\n\n(test-humaneval)"
completions: ["  (define (shift-helper x shift result)\n    (if (zero? x)\n      \
    \  result\n        (shift-helper (quotient x 10)\n                      (modulo\
    \ shift 1)\n                      (string-append (number->string (modulo x 10))\
    \ result))))\n  (shift-helper x shift \"\"))\n", "  (define (shift-helper x shift)\n\
    \    (if (= shift 0)\n        x\n        (shift-helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))))\n  (define (reversed-digits x)\n    (if\
    \ (= x 0)\n        \"\"\n        (string-append (reversed-digits (quotient x 10))\
    \ (string (remainder x 10)))))\n  (if (< shift (string-length (number->string\
    \ x)))\n      (shift-helper (number->string x) shift)\n      (reversed-digits\
    \ x)))\n", "  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n\
    \        (let* ([x-str (number->string x)]\n               [x-len (string-length\
    \ x-str)]\n               [shift (modulo shift x-len)])\n          (string->number\n\
    \           (string-append (substring x-str shift x-len)\n                   \
    \       (substring x-str 0 shift))))))\n  (number->string (shift-digits x shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digit x shift)\n      (if (zero? shift)\n          x\n          (let\
    \ ([d (modulo x 10)])\n            (shift-digit (quotient x 10) (- shift 1))\n\
    \            (if (zero? shift)\n                (string-append (number->string\
    \ d) (number->string x))\n                (string-append (number->string d) (number->string\
    \ x)))))))\n  (define (num-digits x)\n    (if (zero? x)\n        0\n        (+\
    \ 1 (num-digits (quotient x 10)))))\n  (if (> shift (num-digits x))\n      (string-reverse\
    \ (number->string x))\n      (shift-digits x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [(zero? x) x]\n      [else\n\
    \       (let* ([d (remainder x 10)]\n              [x (quotient x 10)])\n    \
    \     (shift-digits (cons d x) (sub1 shift)))]))\n  (define (digits->string digits)\n\
    \    (cond\n      [(zero? digits) \"\"]\n      [else\n       (string-append (number->string\
    \ (car digits))\n                      (digits->string (cdr digits)))]))\n  (define\
    \ (reverse-digits digits)\n    (cond\n      [(zero? digits) digits]\n      [else\n\
    \       (cons (car (reverse digits)) (reverse-digits (cdr (reverse digits))))]))\n\
    \  (define (shift-digits-right x shift)\n    (let* ([n (length (number->string\
    \ x))]\n           [shift (modulo shift n)])\n      (reverse-digits (shift-digits\
    \ (reverse-digits (number->list x)) shift))))\n  (digits->string (shift-digits-right\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift acc)\n      (if (zero? x)\n          acc\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (if (zero? shift)\n          \
    \                       (add1 shift)\n                                 (sub1 shift))\n\
    \                             (if (zero? shift)\n                            \
    \     (cons (modulo x 10) acc)\n                                 acc))))\n   \
    \ (shift-digits-iter x shift '()))\n  (define (digits-to-string digits)\n    (define\
    \ (digits-to-string-iter digits acc)\n      (if (null? digits)\n          acc\n\
    \          (digits-to-string-iter (cdr digits)\n                             \
    \    (string-append (number->string (car digits))\n                          \
    \                      acc))))\n    (digits-to-string-iter digits \"\"))\n  (digits-to-string\
    \ (shift-digits x shift)))\n", "  (define (shift-helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-helper (modulo (quotient x 10) (expt 10 (sub1\
    \ (number->string x))))\n                      (sub1 shift))))\n  (string-append\
    \ (number->string (modulo (shift-helper x shift) (expt 10 (number->string x))))\n\
    \                (number->string (quotient (shift-helper x shift) (expt 10 (number->string\
    \ x))))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (cons (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n \
    \       (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits-to-string digits)\n    (if (null? digits)\n       \
    \ \"\"\n        (string-append (number->string (car digits)) (digits-to-string\
    \ (cdr digits)))))\n  (digits-to-string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (helper x shift)\n    (if (zero? shift)\n        x\n\
    \        (let* ([x-str (number->string x)]\n               [x-len (string-length\
    \ x-str)]\n               [x-last (substring x-str (- x-len 1) x-len)]\n     \
    \          [x-rest (substring x-str 0 (- x-len 1))])\n          (helper (string->number\
    \ (string-append x-last x-rest)) (- shift 1)))))\n  (number->string (helper x\
    \ shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n \
    \       (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits-to-string digits)\n    (if (null? digits)\n       \
    \ \"\"\n        (string-append (number->string (car digits)) (digits-to-string\
    \ (cdr digits)))))\n  (digits-to-string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (helper x shift result)\n    (if (zero? x)\n       \
    \ result\n        (let ([digit (modulo x 10)])\n          (helper (quotient x\
    \ 10)\n                  (if (zero? shift)\n                      shift\n    \
    \                  (sub1 shift))\n                  (string-append (number->string\
    \ digit) result)))))\n  (helper x shift \"\"))\n", "  (define (shift-digits x\
    \ shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digits-iter x shift result)\n      (if (zero? x)\n          result\n\
    \          (shift-digits-iter (quotient x 10)\n                             (if\
    \ (zero? shift)\n                                 (length (number->string x))\n\
    \                                 (- shift 1))\n                             (cons\
    \ (remainder x 10) result))))\n    (number->string (apply string->number (reverse\
    \ (shift-digits-iter x shift '())))))\n  (shift-digits x shift))\n", "  (define\
    \ (shift-helper x shift)\n    (if (zero? shift)\n        x\n        (shift-helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper\
    \ (number->string x) shift))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digits-iter x shift result)\n      (if (zero? x)\n          result\n\
    \          (shift-digits-iter (quotient x 10)\n                             (modulo\
    \ shift 10)\n                             (cons (modulo (+ (remainder x 10) shift)\
    \ 10)\n                                   result))))\n    (shift-digits-iter x\
    \ shift '()))\n  (define (digits-to-string digits)\n    (define (digits-to-string-iter\
    \ digits result)\n      (if (null? digits)\n          result\n          (digits-to-string-iter\
    \ (cdr digits)\n                                 (string-append (number->string\
    \ (car digits))\n                                                result))))\n\
    \    (digits-to-string-iter digits \"\"))\n  (digits-to-string (shift-digits x\
    \ shift)))\n", "  (define (circular-shift-helper x shift)\n    (if (= shift 0)\n\
    \        x\n        (circular-shift-helper (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (define (num-digits x)\n    (if (= x 0)\n        0\n\
    \        (+ 1 (num-digits (/ x 10)))))\n  (define (reverse-digits x)\n    (if\
    \ (= x 0)\n        0\n        (+ (* (remainder x 10) (expt 10 (- (num-digits x)\
    \ 1))) (reverse-digits (/ x 10)))))\n  (if (> shift (num-digits x))\n      (number->string\
    \ (reverse-digits x))\n      (number->string (circular-shift-helper x shift))))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (if\
    \ (= shift 0)\n          x\n          (modulo (+ (* x 10) (quotient x shift))\
    \ (* 10 shift))))\n    (define (shift-digits-iter x shift)\n      (if (= x 0)\n\
    \          '()\n          (cons (shift-digit x shift) (shift-digits-iter (quotient\
    \ x 10) shift))))\n    (reverse (shift-digits-iter x shift)))\n  (define (num-digits\
    \ x)\n    (define (num-digits-iter x count)\n      (if (= x 0)\n          count\n\
    \          (num-digits-iter (quotient x 10) (+ count 1))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits-to-string digits)\n    (define (digits-to-string-iter\
    \ digits)\n      (if (null? digits)\n          \"\"\n          (string-append\
    \ (number->string (car digits)) (digits-to-string-iter (cdr digits)))))\n    (digits-to-string-iter\
    \ digits))\n  (digits-to-string (shift-digits x (modulo shift (num-digits x)))))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (modulo\
    \ (+ x (* shift 10)) 10))\n    (define (shift-digits-iter x shift)\n      (if\
    \ (zero? x)\n          '()\n          (cons (shift-digit x shift)\n          \
    \      (shift-digits-iter (quotient x 10) shift))))\n    (reverse (shift-digits-iter\
    \ x shift)))\n  (define (num-digits x)\n    (if (zero? x)\n        0\n       \
    \ (+ 1 (num-digits (quotient x 10)))))\n  (define (shift-by-num-digits x shift)\n\
    \    (define (shift-by-num-digits-iter x shift)\n      (if (zero? x)\n       \
    \   '()\n          (cons (modulo x 10)\n                (shift-by-num-digits-iter\
    \ (quotient x 10) (- shift 1)))))\n    (reverse (shift-by-num-digits-iter x shift)))\n\
    \  (define (digits-to-string digits)\n    (define (digits-to-string-iter digits)\n\
    \      (if (null? digits)\n          \"\"\n          (string-append (number->string\
    \ (car digits))\n                         (digits-to-string-iter (cdr digits)))))\n\
    \    (digits-to-string-iter digits))\n  (digits-to-string\n   (if (> shift (num-digits\
    \ x))\n       (shift-by-num-digits x shift)\n       (shift-digits x shift))))\n",
  "  (define (shift-helper x shift)\n    (cond\n      [(zero? shift) x]\n      [(zero?\
    \ (remainder x 10)) (shift-helper (/ x 10) shift)]\n      [else (shift-helper\
    \ (cons (remainder x 10) (/ x 10)) (- shift 1))]))\n  (define (reverse-helper\
    \ x)\n    (cond\n      [(zero? x) x]\n      [else (cons (remainder x 10) (reverse-helper\
    \ (/ x 10)))]))\n  (define (to-string x)\n    (cond\n      [(zero? x) \"\"]\n\
    \      [else (string-append (number->string (remainder x 10)) (to-string (/ x\
    \ 10)))]))\n  (to-string (shift-helper x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digit x shift)\n      (define (shift-digit-right\
    \ x)\n        (define (shift-digit-right-helper x)\n          (define (shift-digit-right-helper-helper\
    \ x)\n            (define (shift-digit-right-helper-helper-helper x)\n       \
    \       (define (shift-digit-right-helper-helper-helper-helper x)\n          \
    \      (define (shift-digit-right-helper-helper-helper-helper-helper x)\n    \
    \              (define (shift-digit-right-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                              (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                                (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                                  (define (shift-digit-right-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (cond\
    \ [(= shift 0) x]\n            [(= shift 1) (modulo (+ x 10) 10)]\n          \
    \  [(= shift 2) (modulo (+ x 20) 10)]\n            [(= shift 3) (modulo (+ x 30)\
    \ 10)]\n            [(= shift 4) (modulo (+ x 40) 10)]\n            [(= shift\
    \ 5) (modulo (+ x 50) 10)]\n            [(= shift 6) (modulo (+ x 60) 10)]\n \
    \           [(= shift 7) (modulo (+ x 70) 10)]\n            [(= shift 8) (modulo\
    \ (+ x 80) 10)]\n            [(= shift 9) (modulo (+ x 90) 10)]))\n    (cond [(=\
    \ x 0) 0]\n          [else (+ (* (shift-digit (modulo x 10) shift) 10)\n     \
    \              (shift-digits (quotient x 10) shift))]))\n  (define (num-digits\
    \ x)\n    (cond [(= x 0) 0]\n          [else (+ 1 (num-digits (quotient x 10)))]))\n\
    \  (define (reverse-digits x)\n    (cond [(= x 0) 0]\n          [else (+ (* (modulo\
    \ x 10) (expt 10 (- (num-digits x) 1)))\n                   (reverse-digits (quotient\
    \ x 10)))]))\n  (cond [(> shift (num-digits x)) (number->string (reverse-digits\
    \ x))]\n        [else (number->string (shift-digits x shift))]))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digits-iter x shift acc)\n      (cond\n\
    \        [(zero? x) (reverse acc)]\n        [(zero? shift) (shift-digits-iter\
    \ (quotient x 10) shift (cons (remainder x 10) acc))]\n        [else (shift-digits-iter\
    \ (quotient x 10) (sub1 shift) (cons (remainder x 10) acc))]))\n    (shift-digits-iter\
    \ x shift '()))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (cond\n        [(zero? x) (reverse acc)]\n        [else (reverse-digits-iter\
    \ (quotient x 10) (cons (remainder x 10) acc))]))\n    (reverse-digits-iter x\
    \ '()))\n  (define (number-of-digits x)\n    (define (number-of-digits-iter x\
    \ acc)\n      (cond\n        [(zero? x) acc]\n        [else (number-of-digits-iter\
    \ (quotient x 10) (add1 acc))]))\n    (number-of-digits-iter x 0))\n  (define\
    \ (digits-to-string digits)\n    (define (digits-to-string-iter digits acc)\n\
    \      (cond\n        [(empty? digits) acc]\n        [else (digits-to-string-iter\
    \ (rest digits) (string-append (number->string (first digits)) acc))]))\n    (digits-to-string-iter\
    \ digits \"\"))\n  (digits-to-string\n   (if (> shift (number-of-digits x))\n\
    \       (reverse-digits x)\n       (shift-digits x shift))))\n", "  (define (helper\
    \ x shift result)\n    (cond\n      [(= shift 0) result]\n      [(= x 0) (reverse\
    \ result)]\n      [else (helper (quotient x 10) (- shift 1) (cons (remainder x\
    \ 10) result))]))\n  (number->string (helper x shift '())))\n", "  (define (helper\
    \ x shift acc)\n    (if (zero? x)\n        (number->string acc)\n        (helper\
    \ (quotient x 10)\n                (if (zero? shift)\n                    (sub1\
    \ (length (number->string x)))\n                    (sub1 shift))\n          \
    \      (if (zero? shift)\n                    (add1 (* (remainder x 10) (expt\
    \ 10 (sub1 (length (number->string x))))))\n                    (add1 (* (remainder\
    \ x 10) (expt 10 shift)))))))\n  (helper x shift 0))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digits-iter x shift result)\n      (cond\n    \
    \    [(zero? x) result]\n        [(zero? shift) (shift-digits-iter (quotient x\
    \ 10) shift (cons (remainder x 10) result))]\n        [else (shift-digits-iter\
    \ (quotient x 10) (sub1 shift) (cons (remainder x 10) result))]))\n    (shift-digits-iter\
    \ x shift '()))\n  (define (digits x)\n    (define (digits-iter x result)\n  \
    \    (cond\n        [(zero? x) result]\n        [else (digits-iter (quotient x\
    \ 10) (add1 result))]))\n    (digits-iter x 0))\n  (define (shift-to-right x shift)\n\
    \    (define (shift-to-right-iter x shift result)\n      (cond\n        [(zero?\
    \ x) result]\n        [else (shift-to-right-iter (quotient x 10) (sub1 shift)\
    \ (cons (remainder x 10) result))]))\n    (shift-to-right-iter x shift '()))\n\
    \  (define (reverse-digits x)\n    (define (reverse-digits-iter x result)\n  \
    \    (cond\n        [(zero? x) result]\n        [else (reverse-digits-iter (quotient\
    \ x 10) (cons (remainder x 10) result))]))\n    (reverse-digits-iter x '()))\n\
    \  (define (list->string lst)\n    (define (list->string-iter lst result)\n  \
    \    (cond\n        [(null? lst) result]\n        [else (list->string-iter (cdr\
    \ lst) (string-append result (number->string (car lst))))]))\n    (list->string-iter\
    \ lst \"\"))\n  (if (> shift (digits x))\n      (list->string (reverse-digits\
    \ x))\n      (list->string (shift-to-right x shift))))\n", "  (define (shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper (quotient\
    \ x 10) (- shift 1))))\n  (define (reverse-helper x)\n    (if (zero? x)\n    \
    \    \"\"\n        (string-append (reverse-helper (quotient x 10))\n         \
    \              (string (remainder x 10)))))\n  (define (shift-digits x shift)\n\
    \    (string-append (reverse-helper (shift-helper x shift))\n                \
    \   (reverse-helper (shift-helper x (- (length (number->string x)) shift)))))\n\
    \  (shift-digits x shift))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ x)\n        '()\n        (cons (remainder x 10) (shift-digits (quotient x 10)\
    \ shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n\
    \        digits\n        (shift-digits-right (append (cdr digits) (list (car digits)))\
    \ (- shift 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n\
    \      (define (digit-at x n)\n        (modulo (quotient x (expt 10 n)) 10))\n\
    \      (define (shift-digit-at x n)\n        (define digit (digit-at x n))\n \
    \       (define shifted-digit (+ digit shift))\n        (if (> shifted-digit 9)\n\
    \            (- shifted-digit 10)\n            shifted-digit))\n      (define\
    \ (shift-digit-at-n x n)\n        (define shifted-digit (shift-digit-at x n))\n\
    \        (define n-digit-value (expt 10 n))\n        (define shifted-digit-value\
    \ (* shifted-digit n-digit-value))\n        (define digit-value (* (digit-at x\
    \ n) n-digit-value))\n        (- shifted-digit-value digit-value))\n      (define\
    \ (shift-digits-at x n)\n        (if (= n 0)\n            0\n            (+ (shift-digit-at-n\
    \ x n)\n               (shift-digits-at x (- n 1)))))\n      (shift-digits-at\
    \ x (- (number->string x) 1)))\n    (define (shift-digits-at x n)\n      (if (=\
    \ n 0)\n          0\n          (+ (shift-digit-at-n x n)\n             (shift-digits-at\
    \ x (- n 1)))))\n    (shift-digits-at x (- (number->string x) 1)))\n  (define\
    \ (shift-digit x shift)\n    (define (digit-at x n)\n      (modulo (quotient x\
    \ (expt 10 n)) 10))\n    (define (shift-digit-at x n)\n      (define digit (digit-at\
    \ x n))\n      (define shifted-digit (+ digit shift))\n      (if (> shifted-digit\
    \ 9)\n          (- shifted-digit 10)\n          shifted-digit))\n    (define (shift-digit-at-n\
    \ x n)\n      (define shifted-digit (shift-digit-at x n))\n      (define n-digit-value\
    \ (expt 10 n))\n      (define shifted-digit-value (*", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digits-iter x shift result)\n      (cond ((zero?\
    \ x) result)\n            ((zero? shift) (shift-digits-iter (/ x 10) shift (cons\
    \ (modulo x 10) result)))\n            (else (shift-digits-iter (/ x 10) (- shift\
    \ 1) (cons (modulo x 10) result)))))\n    (shift-digits-iter x shift '()))\n \
    \ (define (digits x)\n    (define (digits-iter x result)\n      (cond ((zero?\
    \ x) result)\n            (else (digits-iter (/ x 10) (+ 1 result)))))\n    (digits-iter\
    \ x 0))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter x result)\n\
    \      (cond ((zero? x) result)\n            (else (reverse-digits-iter (/ x 10)\
    \ (+ (* result 10) (modulo x 10))))))\n    (reverse-digits-iter x 0))\n  (define\
    \ (shift-digits-to-string x)\n    (define (shift-digits-to-string-iter x result)\n\
    \      (cond ((zero? x) result)\n            (else (shift-digits-to-string-iter\
    \ (/ x 10) (string-append (number->string (modulo x 10)) result)))))\n    (shift-digits-to-string-iter\
    \ x \"\"))\n  (if (> shift (digits x))\n      (shift-digits-to-string (reverse-digits\
    \ x))\n      (shift-digits-to-string (shift-digits x shift))))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digits-iter x shift acc)\n      (if\
    \ (zero? x)\n          acc\n          (shift-digits-iter (quotient x 10)\n   \
    \                          (modulo (+ shift 1) (number->string x))\n         \
    \                    (cons (modulo x 10) acc))))\n    (string-&gt;number (string-join\
    \ (reverse (shift-digits-iter x shift '())))))\n  (number-&gt;string (shift-digits\
    \ x shift)))\n</code>\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10) (modulo shift 1)\n                             (cons (modulo\
    \ x 10) result))))\n    (shift-digits-iter x shift '()))\n  (define (digits-to-string\
    \ digits)\n    (define (digits-to-string-iter digits result)\n      (if (null?\
    \ digits)\n          result\n          (digits-to-string-iter (cdr digits)\n \
    \                                (string-append (number->string (car digits))\n\
    \                                                result))))\n    (digits-to-string-iter\
    \ digits \"\"))\n  (digits-to-string (shift-digits x shift)))\n", "  (define (shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper (modulo (quotient\
    \ x 10) (expt 10 (sub1 (number->string x))))\n                      (sub1 shift))))\n\
    \  (number->string (shift-helper x shift)))\n", "  (define (circular-shift-iter\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular-shift-iter\
    \ (quotient x 10)\n                             (modulo (+ shift 1) (length result))\n\
    \                             (string-append (substring result shift)\n      \
    \                                      (substring result 0 shift)\n          \
    \                                  (number->string (remainder x 10))))))\n  (circular-shift-iter\
    \ x shift (number->string x)))\n", "  (define (shift-helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-helper (modulo (quotient x 10) (expt\
    \ 10 (sub1 (number->string x))))\n                      (sub1 shift))))\n  (define\
    \ (reverse-helper x)\n    (if (zero? x)\n        \"\"\n        (string-append\
    \ (reverse-helper (quotient x 10))\n                       (number->string (modulo\
    \ x 10)))))\n  (if (> shift (number->string x))\n      (reverse-helper x)\n  \
    \    (number->string (shift-helper x shift))))\n", "  (define (helper x shift\
    \ acc)\n    (if (zero? x)\n        (number->string acc)\n        (helper (quotient\
    \ x 10)\n                shift\n                (+ (* acc 10) (remainder x 10)))))\n\
    \  (define (reverse-digits x acc)\n    (if (zero? x)\n        (number->string\
    \ acc)\n        (reverse-digits (quotient x 10)\n                        (+ (*\
    \ acc 10) (remainder x 10)))))\n  (define (num-digits x)\n    (if (zero? x)\n\
    \        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (if (>= shift (num-digits\
    \ x))\n      (reverse-digits x 0)\n      (helper x shift 0)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        \"\"\n        (string-append (shift-digits (quotient x 10)\
    \ shift)\n                       (string (remainder x 10)))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        \"\"\n        (string-append (reverse-digits\
    \ (quotient x 10))\n                       (string (remainder x 10)))))\n  (define\
    \ (num-digits x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient\
    \ x 10)))))\n  (define (shift-right x shift)\n    (string-append (substring x\
    \ shift)\n                   (substring x 0 shift)))\n  (define (shift-left x\
    \ shift)\n    (string-append (substring x (- (num-digits x) shift))\n        \
    \           (substring x 0 (- (num-digits x) shift))))\n  (define (shift-digits-right\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-right (shift-right\
    \ x 1) (- shift 1))))\n  (define (shift-digits-left x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-digits-left (shift-left x 1) (- shift 1))))\n  (if\
    \ (> shift (num-digits x))\n      (reverse-digits x)\n      (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular-shift-helper x shift\
    \ digits)\n    (if (zero? x)\n        (string-join digits)\n        (circular-shift-helper\
    \ (quotient x 10)\n                               (modulo (+ shift 1) (length\
    \ digits))\n                               (append (list (number->string (remainder\
    \ x 10)))\n                                       digits))))\n  (circular-shift-helper\
    \ x shift '()))\n", "  (define (helper x shift)\n    (if (zero? shift)\n     \
    \   x\n        (let* ([x-str (number->string x)]\n               [x-len (string-length\
    \ x-str)]\n               [x-last (substring x-str (- x-len 1) x-len)]\n     \
    \          [x-first (substring x-str 0 1)]\n               [x-rest (substring\
    \ x-str 1 (- x-len 1))])\n          (helper (string->number (string-append x-last\
    \ x-rest x-first))\n                  (- shift 1)))))\n  (define (helper2 x shift)\n\
    \    (if (zero? shift)\n        x\n        (let* ([x-str (number->string x)]\n\
    \               [x-len (string-length x-str)]\n               [x-first (substring\
    \ x-str 0 1)]\n               [x-rest (substring x-str 1 x-len)])\n          (helper2\
    \ (string->number (string-append x-rest x-first))\n                   (- shift\
    \ 1)))))\n  (if (< shift (number->string x))\n      (helper x shift)\n      (helper2\
    \ x shift)))\n", "  (define (shift-digit x shift)\n    (if (zero? shift)\n   \
    \     x\n        (shift-digit (modulo x 10) (- shift 1))))\n  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        \"\"\n        (string-append (shift-digits\
    \ (quotient x 10) shift)\n                       (number->string (shift-digit\
    \ x shift)))))\n  (define (num-digits x)\n    (if (zero? x)\n        0\n     \
    \   (+ 1 (num-digits (quotient x 10)))))\n  (if (> shift (num-digits x))\n   \
    \   (string-reverse (number->string x))\n      (shift-digits x shift)))\n", " \
    \ (define (shift-right x shift)\n    (define (shift-right-helper x shift)\n  \
    \    (if (zero? shift)\n          x\n          (shift-right-helper (quotient x\
    \ 10) (- shift 1))))\n    (define (shift-left x shift)\n      (define (shift-left-helper\
    \ x shift)\n        (if (zero? shift)\n            x\n            (shift-left-helper\
    \ (* x 10) (- shift 1))))\n      (shift-left-helper x shift))\n    (define (shift-helper\
    \ x shift)\n      (if (zero? shift)\n          x\n          (shift-helper (shift-right-helper\
    \ x shift) (- shift 1))))\n    (shift-left (shift-helper x shift) shift))\n  (define\
    \ (digits x)\n    (define (digits-helper x)\n      (if (zero? x)\n          0\n\
    \          (+ 1 (digits-helper (quotient x 10)))))\n    (digits-helper x))\n \
    \ (define (reverse x)\n    (define (reverse-helper x)\n      (if (zero? x)\n \
    \         0\n          (+ (* (remainder x 10) (expt 10 (- (digits x) 1)))\n  \
    \           (reverse-helper (quotient x 10)))))\n    (reverse-helper x))\n  (define\
    \ (digits-to-string x)\n    (define (digits-to-string-helper x)\n      (if (zero?\
    \ x)\n          \"\"\n          (string-append (number->string (remainder x 10))\n\
    \                         (digits-to-string-helper (quotient x 10)))))\n    (digits-to-string-helper\
    \ x))\n  (if (> (digits x) shift)\n      (digits-to-string (shift-right x shift))\n\
    \      (digits-to-string (reverse x))))\n", "  (define (shift-digits x shift)\n\
    \    (define (shift-digits-iter x shift result)\n      (if (zero? x)\n       \
    \   result\n          (shift-digits-iter (quotient x 10)\n                   \
    \          (modulo shift 1)\n                             (cons (modulo x 10)\
    \ result))))\n    (if (zero? shift)\n        (shift-digits-iter x shift '())\n\
    \        (reverse (shift-digits-iter x shift '()))))\n  (define (digits-to-string\
    \ digits)\n    (define (digits-to-string-iter digits result)\n      (if (null?\
    \ digits)\n          result\n          (digits-to-string-iter (cdr digits)\n \
    \                                (string-append result (number->string (car digits))))))\n\
    \    (digits-to-string-iter digits \"\"))\n  (digits-to-string (shift-digits x\
    \ shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift acc)\n      (if (zero? x)\n          acc\n          (shift-digits-iter\
    \ (quotient x 10) shift (cons (remainder x 10) acc))))\n    (if (zero? shift)\n\
    \        (shift-digits-iter x shift '())\n        (shift-digits-iter x shift '())))\n\
    \  (define (shift-digits-iter x shift acc)\n    (if (zero? x)\n        acc\n \
    \       (shift-digits-iter (quotient x 10) shift (cons (remainder x 10) acc))))\n\
    \  (define (digits x)\n    (shift-digits-iter x 0 '()))\n  (define (shift-digits\
    \ x shift)\n    (if (zero? shift)\n        (shift-digits-iter x shift '())\n \
    \       (shift-digits-iter x shift '())))\n  (define (reverse-digits x)\n    (reverse\
    \ (digits x)))\n  (define (shift-digits-right x shift)\n    (if (> shift (length\
    \ (digits x)))\n        (reverse-digits x)\n        (reverse (shift-digits (reverse-digits\
    \ x) shift))))\n  (define (digits->string digits)\n    (define (digits->string-iter\
    \ digits acc)\n      (if (empty? digits)\n          acc\n          (digits->string-iter\
    \ (rest digits) (string-append (number->string (first digits)) acc))))\n    (digits->string-iter\
    \ digits \"\"))\n  (digits->string (shift-digits-right x shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digit x shift)\n      (define (shift-digit-helper\
    \ x shift)\n        (if (= shift 0)\n            x\n            (shift-digit-helper\
    \ (modulo x 10) (- shift 1))))\n      (define (shift-digit-helper2 x shift)\n\
    \        (if (= shift 0)\n            x\n            (shift-digit-helper2 (/ x\
    \ 10) (- shift 1))))\n      (define (shift-digit-helper3 x shift)\n        (if\
    \ (= shift 0)\n            x\n            (shift-digit-helper3 (/ x 10) (- shift\
    \ 1))))\n      (define (shift-digit-helper4 x shift)\n        (if (= shift 0)\n\
    \            x\n            (shift-digit-helper4 (/ x 10) (- shift 1))))\n   \
    \   (define (shift-digit-helper5 x shift)\n        (if (= shift 0)\n         \
    \   x\n            (shift-digit-helper5 (/ x 10) (- shift 1))))\n      (define\
    \ (shift-digit-helper6 x shift)\n        (if (= shift 0)\n            x\n    \
    \        (shift-digit-helper6 (/ x 10) (- shift 1))))\n      (define (shift-digit-helper7\
    \ x shift)\n        (if (= shift 0)\n            x\n            (shift-digit-helper7\
    \ (/ x 10) (- shift 1))))\n      (define (shift-digit-helper8 x shift)\n     \
    \   (if (= shift 0)\n            x\n            (shift-digit-helper8 (/ x 10)\
    \ (- shift 1))))\n      (define (shift-digit-helper9 x shift)\n        (if (=\
    \ shift 0)\n            x\n            (shift-digit-helper9 (/ x 10) (- shift\
    \ 1))))\n      (define (shift-digit-helper10 x shift)\n        (if (= shift 0)\n\
    \            x\n            (shift-digit-helper10 (/ x 10) (- shift 1))))\n  \
    \    (define (shift-digit-helper11 x shift)\n        (if (= shift 0)\n       \
    \     x\n            (shift-digit-helper11 (/ x 10) (- shift 1))))\n      (define\
    \ (", "  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n  \
    \      (let ([d (remainder x 10)])\n          (shift-digits (quotient x 10) (-\
    \ shift 1))\n          (if (zero? d)\n              (shift-digits (quotient x\
    \ 10) (- shift 1))\n              (shift-digits (+ (* x 10) d) (- shift 1))))))\n\
    \  (define (digits x)\n    (if (zero? x)\n        0\n        (+ 1 (digits (quotient\
    \ x 10)))))\n  (define (reverse-digits x)\n    (if (zero? x)\n        0\n    \
    \    (+ (* (remainder x 10) (expt 10 (- (digits x) 1)))\n           (reverse-digits\
    \ (quotient x 10)))))\n  (define (reverse-digits-string x)\n    (number->string\
    \ (reverse-digits x)))\n  (define (shift-digits-string x shift)\n    (number->string\
    \ (shift-digits x shift)))\n  (if (> shift (digits x))\n      (reverse-digits-string\
    \ x)\n      (shift-digits-string x shift)))\n", "  (define (helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (helper (string-append (substring x\
    \ 1) (substring x 0 1)) (- shift 1))))\n  (if (< shift (string-length (number->string\
    \ x)))\n      (helper (number->string x) shift)\n      (string-reverse (number->string\
    \ x))))\n", "  (define (shift-digits x shift)\n    (if (zero? shift)\n       \
    \ x\n        (shift-digits (quotient x 10) (- shift 1))))\n  (define (shift-digits-helper\
    \ x shift)\n    (if (zero? x)\n        \"\"\n        (string-append (shift-digits-helper\
    \ (quotient x 10) (- shift 1))\n                       (string (remainder x 10)))))\n\
    \  (shift-digits-helper (shift-digits x shift) shift))\n", "  (define (circular-shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular-shift-helper (modulo\
    \ (quotient x 10) (expt 10 shift))\n                               (- shift 1))))\n\
    \  (number->string (circular-shift-helper x shift)))\n", "  (define (helper x\
    \ shift result)\n    (if (zero? x)\n        result\n        (helper (quotient\
    \ x 10)\n                (add1 shift)\n                (string-append (number->string\
    \ (remainder x 10)) result))))\n  (if (<= shift (number->string x) (string-length\
    \ (number->string x)))\n      (string-append (substring (number->string x) shift)\n\
    \                     (substring (number->string x) 0 shift))\n      (helper x\
    \ shift \"\")))\n", "  (define (shift-digit x shift)\n    (modulo (+ x shift)\
    \ 10))\n  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n   \
    \     (cons (shift-digit x shift)\n              (shift-digits (quotient x 10)\
    \ shift))))\n  (define (shift-digits-reverse x shift)\n    (reverse (shift-digits\
    \ x shift)))\n  (define (shift-digits-reversed x shift)\n    (if (zero? x)\n \
    \       '()\n        (cons (shift-digit x shift)\n              (shift-digits-reversed\
    \ (quotient x 10) shift))))\n  (define (shift-digits-reversed-reverse x shift)\n\
    \    (reverse (shift-digits-reversed x shift)))\n  (define (digits x)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10)\n              (digits (quotient\
    \ x 10)))))\n  (define (digits-reverse x)\n    (reverse (digits x)))\n  (define\
    \ (digits-reversed x)\n    (if (zero? x)\n        '()\n        (cons (modulo x\
    \ 10)\n              (digits-reversed (quotient x 10)))))\n  (define (digits-reversed-reverse\
    \ x)\n    (reverse (digits-reversed x)))\n  (define (digits-count x)\n    (if\
    \ (zero? x)\n        0\n        (+ 1 (digits-count (quotient x 10)))))\n  (define\
    \ (digits-count-reverse x)\n    (reverse (digits-count x)))\n  (define (digits-count-reversed\
    \ x)\n    (if (zero? x)\n        0\n        (+ 1 (digits-count-reversed (quotient\
    \ x 10)))))\n  (define (digits-count-reversed-reverse x)\n    (reverse (digits-count-reversed\
    \ x)))\n  (define (digits-count-shift x shift)\n    (if (zero? x)\n        0\n\
    \       ", "  (define (cs x shift)\n    (if (zero? shift)\n        (number->string\
    \ x)\n        (let ([s (number->string x)])\n          (string-append (substring\
    \ s shift)\n                         (substring s 0 shift)))))\n  (let ([s (number->string\
    \ x)])\n    (cs x (modulo shift (string-length s)))))\n", "  (define (digits x)\n\
    \    (if (= x 0)\n        '()\n        (cons (remainder x 10) (digits (quotient\
    \ x 10)))))\n  (define (shift-digits x shift)\n    (if (= shift 0)\n        x\n\
    \        (shift-digits (append (cdr x) (list (car x))) (- shift 1))))\n  (define\
    \ (reverse-digits x)\n    (if (null? x)\n        '()\n        (append (reverse-digits\
    \ (cdr x)) (list (car x)))))\n  (define (digits-to-string x)\n    (if (null? x)\n\
    \        \"\"\n        (string-append (number->string (car x)) (digits-to-string\
    \ (cdr x)))))\n  (if (> shift (length x))\n      (digits-to-string (reverse-digits\
    \ x))\n      (digits-to-string (shift-digits x shift))))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digits-iter x shift result)\n      (if (zero? x)\n\
    \          result\n          (shift-digits-iter (quotient x 10)\n            \
    \                 (modulo (+ shift 1) (length (number->string x)))\n         \
    \                    (cons (modulo x 10) result))))\n    (string-&gt;number (list-&gt;string\
    \ (reverse (shift-digits-iter x shift '())))))\n  (shift-digits x shift))\n",
  "  (define (shift-right x shift)\n    (define (shift-right-helper x shift)\n   \
    \   (if (= shift 0)\n          x\n          (shift-right-helper (quotient x 10)\
    \ (- shift 1))))\n    (define (shift-left x shift)\n      (define (shift-left-helper\
    \ x shift)\n        (if (= shift 0)\n            x\n            (shift-left-helper\
    \ (* x 10) (- shift 1))))\n      (shift-left-helper x shift))\n    (define (shift-right-digits\
    \ x)\n      (define (shift-right-digits-helper x)\n        (if (= x 0)\n     \
    \       0\n            (+ (* (remainder x 10) (shift-left 10 (- (shift-right-digits-helper\
    \ (quotient x 10)) 1)))\n               (shift-right-digits-helper (quotient x\
    \ 10)))))\n      (shift-right-digits-helper x))\n    (if (> shift (shift-right-digits\
    \ x))\n        (string-reverse (number->string x))\n        (number->string (shift-right-helper\
    \ x shift))))\n  (shift-right x shift))\n", "  (define (shift-right x shift)\n\
    \    (define (shift-right-helper x shift)\n      (if (zero? shift)\n         \
    \ x\n          (shift-right-helper (quotient x 10) (- shift 1))))\n    (define\
    \ (shift-left x shift)\n      (define (shift-left-helper x shift)\n        (if\
    \ (zero? shift)\n            x\n            (shift-left-helper (* x 10) (- shift\
    \ 1))))\n      (shift-left-helper x (- shift (length (number->string x)))))\n\
    \    (define (shift-right-digits x shift)\n      (define (shift-right-digits-helper\
    \ x shift)\n        (if (zero? shift)\n            x\n            (shift-right-digits-helper\
    \ (shift-right x shift) (- shift 1))))\n      (shift-right-digits-helper x shift))\n\
    \    (define (shift-left-digits x shift)\n      (define (shift-left-digits-helper\
    \ x shift)\n        (if (zero? shift)\n            x\n            (shift-left-digits-helper\
    \ (shift-left x shift) (- shift 1))))\n      (shift-left-digits-helper x shift))\n\
    \    (if (> shift (length (number->string x)))\n        (shift-left-digits x shift)\n\
    \        (shift-right-digits x shift)))\n  (number->string (shift-right x shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular-shift-helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (circular-shift-helper (modulo x 10)\
    \ (- shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-helper\
    \ x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-helper\
    \ (quotient x 10) (+ (* 10 acc) (modulo x 10)))))\n    (reverse-digits-helper\
    \ x 0))\n  (define (digits x)\n    (define (digits-helper x acc)\n      (if (zero?\
    \ x)\n          acc\n          (digits-helper (quotient x 10) (+ 1 acc))))\n \
    \   (digits-helper x 0))\n  (define (shift-digits x shift)\n    (if (> shift (digits\
    \ x))\n        (reverse-digits x)\n        (let ((shifted-x (circular-shift-helper\
    \ x shift)))\n          (if (zero? shifted-x)\n              (reverse-digits x)\n\
    \              (string-append (number->string shifted-x) (number->string (quotient\
    \ x (expt 10 shift))))))))\n  (shift-digits x shift))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (cond ((zero? x) result)\n            ((zero? shift)\
    \ (shift-digits-iter (/ x 10) shift (cons (modulo x 10) result)))\n          \
    \  (else (shift-digits-iter (/ x 10) (- shift 1) (cons (modulo x 10) result)))))\n\
    \    (shift-digits-iter x shift '()))\n  (define (digits x)\n    (define (digits-iter\
    \ x result)\n      (cond ((zero? x) result)\n            (else (digits-iter (/\
    \ x 10) (+ 1 result)))))\n    (digits-iter x 0))\n  (define (reverse-digits x)\n\
    \    (define (reverse-digits-iter x result)\n      (cond ((zero? x) result)\n\
    \            (else (reverse-digits-iter (/ x 10) (+ (* 10 result) (modulo x 10))))))\n\
    \    (reverse-digits-iter x 0))\n  (define (shift-string x shift)\n    (define\
    \ (shift-string-iter x shift result)\n      (cond ((zero? x) result)\n       \
    \     ((zero? shift) (shift-string-iter (/ x 10) shift (string-append (number->string\
    \ (modulo x 10)) result)))\n            (else (shift-string-iter (/ x 10) (- shift\
    \ 1) (string-append (number->string (modulo x 10)) result)))))\n    (shift-string-iter\
    \ x shift \"\"))\n  (define (shift-string-reverse x)\n    (define (shift-string-reverse-iter\
    \ x result)\n      (cond ((zero? x) result)\n            (else (shift-string-reverse-iter\
    \ (/ x 10) (string-append result (number->string (modulo x 10)))))))\n    (shift-string-reverse-iter\
    \ x \"\"))\n  (cond ((> shift (digits x)) (shift-string-reverse x))\n        (else\
    \ (shift-string x shift))))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digit x shift)\n      (if (= shift 0)\n          x\n          (let* ([x-str\
    \ (number->string x)]\n                 [x-len (string-length x-str)]\n      \
    \           [x-last (string-ref x-str (- x-len 1))]\n                 [x-first\
    \ (string-ref x-str 0)])\n            (shift-digit (string->number (string-append\
    \ (substring x-str 1 x-len) (string x-first))) (- shift 1)))))\n    (define (reverse-digits\
    \ x)\n      (define (reverse-digit x)\n        (if (= x 0)\n            0\n  \
    \          (+ (* (remainder x 10) (expt 10 (- (number->string x) 1))) (reverse-digit\
    \ (quotient x 10)))))\n      (reverse-digit x))\n    (define (num-digits x)\n\
    \      (if (= x 0)\n          0\n          (+ 1 (num-digits (quotient x 10)))))\n\
    \    (if (> shift (num-digits x))\n        (reverse-digits x)\n        (shift-digit\
    \ x shift)))\n  (number->string (shift-digits x shift)))\n", "  (define (helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))))\n  (if (zero? shift)\n      (number->string\
    \ x)\n      (helper (number->string x) shift)))\n", "  (define (digits x)\n  \
    \  (cond\n      [(zero? x) empty]\n      [else (cons (remainder x 10) (digits\
    \ (quotient x 10)))]))\n  (define (shift-digits digits shift)\n    (cond\n   \
    \   [(empty? digits) empty]\n      [(zero? shift) digits]\n      [else (cons (last\
    \ digits) (shift-digits (butlast digits) (sub1 shift)))]))\n  (define (reverse-digits\
    \ digits)\n    (cond\n      [(empty? digits) empty]\n      [else (cons (first\
    \ digits) (reverse-digits (rest digits)))]))\n  (define (digits->string digits)\n\
    \    (cond\n      [(empty? digits) empty]\n      [else (string-append (number->string\
    \ (first digits)) (digits->string (rest digits)))]))\n  (digits->string (shift-digits\
    \ (digits x) shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (modulo (+ shift 1) (number->string\
    \ x))\n                             (cons (modulo x 10) result))))\n    (string-&gt;number\
    \ (apply string-append (shift-digits-iter x shift '()))))\n  (number-&gt;string\
    \ (shift-digits x shift)))\n</code>\n", "  (define (shift-digits x shift)\n  \
    \  (if (zero? x)\n        x\n        (let* ([d (remainder x 10)]\n           \
    \    [x (quotient x 10)])\n          (if (zero? x)\n              (if (zero? shift)\n\
    \                  d\n                  (remainder d shift))\n              (let*\
    \ ([x (shift-digits x shift)]\n                     [x (if (zero? shift)\n   \
    \                         x\n                            (remainder x shift))])\n\
    \                (if (zero? x)\n                    d\n                    (+\
    \ (* x 10) d)))))))\n  (number->string (shift-digits x shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (let ([d (number->string x)])\n      (if (or (=\
    \ shift (string-length d))\n              (> shift (string-length d)))\n     \
    \     (string-reverse d)\n          (let ([s (string-length d)])\n           \
    \ (string-append (substring d shift s)\n                           (substring\
    \ d 0 shift))))))\n  (shift-digits x shift))\n", "  (define (circular-shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular-shift-helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (define (num-digits x)\n\
    \    (if (zero? x)\n        0\n        (+ 1 (num-digits (/ x 10)))))\n  (define\
    \ (reverse-digits x)\n    (define (reverse-digits-helper x acc)\n      (if (zero?\
    \ x)\n          acc\n          (reverse-digits-helper (/ x 10) (+ (* acc 10) (remainder\
    \ x 10)))))\n    (reverse-digits-helper x 0))\n  (if (> shift (num-digits x))\n\
    \      (number->string (reverse-digits x))\n      (number->string (circular-shift-helper\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (if (zero? shift)\n \
    \       x\n        (shift-digits (quotient x 10) (- shift 1))))\n  (define (shift-digits-right\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-right (quotient\
    \ x 10) (- shift 1))))\n  (define (shift-digits-left x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-digits-left (quotient x 10) (- shift 1))))\n\
    \  (define (shift-digits-left-helper x shift)\n    (if (zero? shift)\n       \
    \ x\n        (shift-digits-left-helper (quotient x 10) (- shift 1))))\n  (define\
    \ (shift-digits-right-helper x shift)\n    (if (zero? shift)\n        x\n    \
    \    (shift-digits-right-helper (quotient x 10) (- shift 1))))\n  (define (shift-digits-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-helper (quotient\
    \ x 10) (- shift 1))))\n  (define (shift-digits-helper-left x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits-helper-left (quotient x 10)\
    \ (- shift 1))))\n  (define (shift-digits-helper-right x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-digits-helper-right (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-digits-helper-right-helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-digits-helper-right-helper (quotient x 10)\
    \ (- shift 1))))\n  (define (shift-digits-helper-left-helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits-helper-left-helper (quotient\
    \ x 10) (- shift 1))))\n  (define (shift", "  (define (helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (helper (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (helper (number->string x) shift))\n", "  (define\
    \ (circular-shift-helper x shift)\n    (if (zero? x)\n        \"\"\n        (string-append\
    \ (circular-shift-helper (quotient x 10) (- shift 1))\n                      \
    \ (if (zero? shift)\n                           (string (modulo x 10))\n     \
    \                      (string (quotient x 10))))))\n  (if (zero? shift)\n   \
    \   (circular-shift-helper x (number->string x |> string-length))\n      (circular-shift-helper\
    \ x shift)))\n", "  (define (digits x)\n    (if (zero? x)\n        '()\n     \
    \   (cons (remainder x 10) (digits (quotient x 10)))))\n  (define (shift-digits\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits (cons (car\
    \ (last x)) (butlast x)) (- shift 1))))\n  (define (digits->string x)\n    (if\
    \ (null? x)\n        \"\"\n        (string-append (number->string (car x)) (digits->string\
    \ (cdr x)))))\n  (digits->string (shift-digits (digits x) shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [(zero? x)\
    \ x]\n      [else\n       (let* ([d (remainder x 10)]\n              [x (quotient\
    \ x 10)])\n         (shift-digits (cons d x) (sub1 shift)))]))\n  (define (digits-to-string\
    \ digits)\n    (cond\n      [(zero? digits) \"\"]\n      [else\n       (string-append\
    \ (number->string (car digits))\n                      (digits-to-string (cdr\
    \ digits)))]))\n  (digits-to-string (shift-digits x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digit x shift)\n      (modulo (+ x (* shift 10)) 10))\n    (define (shift-digits-iter\
    \ x shift)\n      (if (zero? x)\n          '()\n          (cons (shift-digit x\
    \ shift)\n                (shift-digits-iter (quotient x 10) shift))))\n    (reverse\
    \ (shift-digits-iter x shift)))\n  (define (num-digits x)\n    (define (num-digits-iter\
    \ x count)\n      (if (zero? x)\n          count\n          (num-digits-iter (quotient\
    \ x 10) (+ count 1))))\n    (num-digits-iter x 0))\n  (define (digits->string\
    \ digits)\n    (define (digits->string-iter digits)\n      (if (null? digits)\n\
    \          \"\"\n          (string-append (number->string (car digits))\n    \
    \                     (digits->string-iter (cdr digits)))))\n    (digits->string-iter\
    \ digits))\n  (digits->string (shift-digits x (modulo shift (num-digits x)))))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digits-iter x shift result)\n\
    \      (cond ((zero? x) result)\n            ((zero? shift) (shift-digits-iter\
    \ (/ x 10) shift (cons (modulo x 10) result)))\n            (else (shift-digits-iter\
    \ (/ x 10) (- shift 1) (cons (modulo x 10) result)))))\n    (shift-digits-iter\
    \ x shift '()))\n  (define (shift-digits-to-string digits)\n    (define (shift-digits-to-string-iter\
    \ digits result)\n      (cond ((null? digits) result)\n            (else (shift-digits-to-string-iter\
    \ (cdr digits) (string-append (number->string (car digits)) result)))))\n    (shift-digits-to-string-iter\
    \ digits \"\"))\n  (shift-digits-to-string (shift-digits x shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digits-iter x shift acc)\n      (if\
    \ (zero? x)\n          acc\n          (shift-digits-iter (quotient x 10)\n   \
    \                          (if (zero? shift)\n                               \
    \  (modulo x 10)\n                                 (sub1 shift))\n           \
    \                  (cons (modulo x 10) acc))))\n    (shift-digits-iter x shift\
    \ '()))\n  (define (digits->string digits)\n    (define (digits->string-iter digits\
    \ acc)\n      (if (null? digits)\n          acc\n          (digits->string-iter\
    \ (cdr digits)\n                               (string-append (number->string\
    \ (car digits))\n                                              acc))))\n    (digits->string-iter\
    \ digits \"\"))\n  (digits->string (shift-digits x shift)))\n", "  (define (helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (let* ([digits (number->string\
    \ x)]\n               [len (string-length digits)]\n               [last (substring\
    \ digits (- len 1) len)]\n               [first (substring digits 0 1)])\n   \
    \       (string->number (string-append last (substring digits 1 (- len 1)))))))\n\
    \  (number->string (helper x shift)))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? shift)\n        x\n        (let* ([x-str (number->string x)]\n\
    \               [x-len (string-length x-str)]\n               [shift (modulo shift\
    \ x-len)])\n          (string->number\n           (string-append (substring x-str\
    \ shift x-len)\n                          (substring x-str 0 shift))))))\n  (number->string\
    \ (shift-digits x shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digits-iter x shift result)\n      (if (zero? x)\n          result\n\
    \          (shift-digits-iter (quotient x 10)\n                             (modulo\
    \ shift 10)\n                             (cons (modulo x 10) result))))\n   \
    \ (if (zero? shift)\n        (shift-digits-iter x shift '())\n        (shift-digits-iter\
    \ x shift '())))\n  (define (shift-digits-string x shift)\n    (define (shift-digits-string-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-string-iter\
    \ (quotient x 10)\n                                    (modulo shift 10)\n   \
    \                                 (string-append (number->string (modulo x 10))\
    \ result))))\n    (if (zero? shift)\n        (shift-digits-string-iter x shift\
    \ \"\")\n        (shift-digits-string-iter x shift \"\")))\n  (shift-digits-string\
    \ x shift))\n", "  (define (circular-shift-helper x shift result)\n    (cond [(zero?\
    \ x) result]\n          [(zero? shift) (circular-shift-helper (/ x 10) shift (string-append\
    \ (number->string (remainder x 10)) result))]\n          [else (circular-shift-helper\
    \ (/ x 10) (- shift 1) (string-append (number->string (remainder x 10)) result))]))\n\
    \  (circular-shift-helper x shift \"\"))\n", "  (define (shift-digits x shift)\n\
    \    (define (shift-digit x shift)\n      (modulo (+ (* x 10) shift) 10))\n  \
    \  (define (shift-digits-iter x shift n)\n      (if (= n 0)\n          x\n   \
    \       (shift-digits-iter (shift-digit x shift) shift (- n 1))))\n    (shift-digits-iter\
    \ x shift (number->string x)))\n  (string->number (shift-digits x shift)))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (define\
    \ (shift-digit-helper x shift)\n        (if (= shift 0)\n            x\n     \
    \       (shift-digit-helper (modulo x 10) (- shift 1))))\n      (define (shift-digit-helper2\
    \ x shift)\n        (if (= shift 0)\n            x\n            (shift-digit-helper2\
    \ (/ x 10) (- shift 1))))\n      (define (shift-digit-helper3 x shift)\n     \
    \   (if (= shift 0)\n            x\n            (shift-digit-helper3 (/ x 10)\
    \ (- shift 1))))\n      (define (shift-digit-helper4 x shift)\n        (if (=\
    \ shift 0)\n            x\n            (shift-digit-helper4 (/ x 10) (- shift\
    \ 1))))\n      (define (shift-digit-helper5 x shift)\n        (if (= shift 0)\n\
    \            x\n            (shift-digit-helper5 (/ x 10) (- shift 1))))\n   \
    \   (define (shift-digit-helper6 x shift)\n        (if (= shift 0)\n         \
    \   x\n            (shift-digit-helper6 (/ x 10) (- shift 1))))\n      (define\
    \ (shift-digit-helper7 x shift)\n        (if (= shift 0)\n            x\n    \
    \        (shift-digit-helper7 (/ x 10) (- shift 1))))\n      (define (shift-digit-helper8\
    \ x shift)\n        (if (= shift 0)\n            x\n            (shift-digit-helper8\
    \ (/ x 10) (- shift 1))))\n      (define (shift-digit-helper9 x shift)\n     \
    \   (if (= shift 0)\n            x\n            (shift-digit-helper9 (/ x 10)\
    \ (- shift 1))))\n      (define (shift-digit-helper10 x shift)\n        (if (=\
    \ shift 0)\n            x\n            (shift-digit-helper10 (/ x 10) (- shift\
    \ 1))))\n      (define (shift-digit-helper11 x shift)\n        (if (= shift 0)\n\
    \            x\n            (shift-digit-helper11 (/ x 10) (- shift 1))))\n  \
    \    (define (", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (if (zero? shift)\n          \
    \                       (modulo x 10)\n                                 (sub1\
    \ shift))\n                             (string-append (number->string (modulo\
    \ x 10))\n                                            result))))\n    (shift-digits-iter\
    \ x shift \"\"))\n  (define (num-digits x)\n    (define (num-digits-iter x count)\n\
    \      (if (zero? x)\n          count\n          (num-digits-iter (quotient x\
    \ 10)\n                           (add1 count))))\n    (num-digits-iter x 0))\n\
    \  (if (> shift (num-digits x))\n      (shift-digits x 0)\n      (shift-digits\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n      \
    \  '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digits-iter x shift acc)\n      (cond ((zero? x) acc)\n            ((zero?\
    \ shift) (shift-digits-iter (quotient x 10) shift (cons (remainder x 10) acc)))\n\
    \            (else (shift-digits-iter (quotient x 10) (sub1 shift) (cons (remainder\
    \ x 10) acc)))))\n    (shift-digits-iter x shift '()))\n  (define (digits x)\n\
    \    (define (digits-iter x acc)\n      (cond ((zero? x) acc)\n            (else\
    \ (digits-iter (quotient x 10) (add1 acc)))))\n    (digits-iter x 0))\n  (define\
    \ (reverse-digits x)\n    (define (reverse-digits-iter x acc)\n      (cond ((zero?\
    \ x) acc)\n            (else (reverse-digits-iter (quotient x 10) (cons (remainder\
    \ x 10) acc)))))\n    (reverse-digits-iter x '()))\n  (define (digits->string\
    \ x)\n    (define (digits->string-iter x acc)\n      (cond ((zero? x) acc)\n \
    \           (else (digits->string-iter (quotient x 10) (string-append (number->string\
    \ (remainder x 10)) acc)))))\n    (digits->string-iter x \"\"))\n  (define (list->string\
    \ x)\n    (define (list->string-iter x acc)\n      (cond ((null? x) acc)\n   \
    \         (else (list->string-iter (cdr x) (string-append (number->string (car\
    \ x)) acc)))))\n    (list->string-iter x \"\"))\n  (if (>= shift (digits x))\n\
    \      (list->string (reverse-digits x))\n      (list->string (shift-digits x\
    \ shift))))\n", "  (define (shift-digits x shift)\n    (define (shift-digit x\
    \ shift)\n      (modulo (+ x (* shift 10)) 10))\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             shift\n                      \
    \       (cons (shift-digit x shift) result))))\n    (reverse (shift-digits-iter\
    \ x shift '())))\n  (define (num-digits x)\n    (define (num-digits-iter x count)\n\
    \      (if (zero? x)\n          count\n          (num-digits-iter (quotient x\
    \ 10) (+ count 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string\
    \ digits)\n    (define (digits-to-string-iter digits result)\n      (if (null?\
    \ digits)\n          result\n          (digits-to-string-iter (cdr digits)\n \
    \                                (string-append (number->string (car digits))\n\
    \                                                result))))\n    (digits-to-string-iter\
    \ digits \"\"))\n  (digits-to-string (shift-digits x (modulo shift (num-digits\
    \ x)))))\n", "  (define (helper x shift acc)\n    (if (zero? x)\n        (number->string\
    \ acc)\n        (helper (quotient x 10)\n                (if (zero? shift)\n \
    \                   (length (number->string x))\n                    (sub1 shift))\n\
    \                (if (zero? shift)\n                    (modulo (+ (modulo x 10)\
    \ (* acc 10))\n                            (expt 10 (length (number->string x))))\n\
    \                    (+ (modulo x 10) (* acc 10))))))\n  (helper x shift 0))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (define\
    \ (shift-digit-helper x shift)\n        (if (zero? shift)\n            x\n   \
    \         (shift-digit-helper (modulo x 10) (- shift 1))))\n      (define (shift-digit-helper2\
    \ x shift)\n        (if (zero? shift)\n            x\n            (shift-digit-helper2\
    \ (/ x 10) (- shift 1))))\n      (define (shift-digit-helper3 x shift)\n     \
    \   (if (zero? shift)\n            x\n            (shift-digit-helper3 (/ x 10)\
    \ (- shift 1))))\n      (define (shift-digit-helper4 x shift)\n        (if (zero?\
    \ shift)\n            x\n            (shift-digit-helper4 (/ x 10) (- shift 1))))\n\
    \      (define (shift-digit-helper5 x shift)\n        (if (zero? shift)\n    \
    \        x\n            (shift-digit-helper5 (/ x 10) (- shift 1))))\n      (define\
    \ (shift-digit-helper6 x shift)\n        (if (zero? shift)\n            x\n  \
    \          (shift-digit-helper6 (/ x 10) (- shift 1))))\n      (define (shift-digit-helper7\
    \ x shift)\n        (if (zero? shift)\n            x\n            (shift-digit-helper7\
    \ (/ x 10) (- shift 1))))\n      (define (shift-digit-helper8 x shift)\n     \
    \   (if (zero? shift)\n            x\n            (shift-digit-helper8 (/ x 10)\
    \ (- shift 1))))\n      (define (shift-digit-helper9 x shift)\n        (if (zero?\
    \ shift)\n            x\n            (shift-digit-helper9 (/ x 10) (- shift 1))))\n\
    \      (define (shift-digit-helper10 x shift)\n        (if (zero? shift)\n   \
    \         x\n            (shift-digit-helper10 (/ x 10) (- shift 1))))\n     \
    \ (define (shift-digit-helper11 x shift)\n        (if (zero? shift)\n        \
    \    x\n            (shift-digit-helper11 (/ x", "  (define (helper x shift acc)\n\
    \    (cond\n      [(zero? x) (number->string (reverse acc))]\n      [(zero? shift)\
    \ (number->string (reverse (cons (modulo x 10) acc)))]\n      [else (helper (quotient\
    \ x 10) (sub1 shift) (cons (modulo x 10) acc))]))\n  (helper x shift '()))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        (number->string x)\n\
    \        (let* ([x-str (number->string x)]\n               [x-len (string-length\
    \ x-str)]\n               [x-last (substring x-str (- x-len 1) x-len)]\n     \
    \          [x-first (substring x-str 0 1)]\n               [x-rest (substring\
    \ x-str 1 (- x-len 1))])\n          (helper (string->number (string-append x-last\
    \ x-rest x-first)) (- shift 1)))))\n  (helper x shift))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digits-iter x shift result)\n      (if (zero? x)\n\
    \          result\n          (shift-digits-iter (quotient x 10)\n            \
    \                 (if (zero? shift)\n                                 (1+ shift)\n\
    \                                 shift)\n                             (cons (modulo\
    \ x 10) result))))\n    (define (reverse-digits x)\n      (define (reverse-digits-iter\
    \ x result)\n        (if (zero? x)\n            result\n            (reverse-digits-iter\
    \ (quotient x 10)\n                                 (cons (modulo x 10) result))))\n\
    \      (reverse-digits-iter x '()))\n    (define (digits x)\n      (define (digits-iter\
    \ x result)\n        (if (zero? x)\n            result\n            (digits-iter\
    \ (quotient x 10)\n                         (cons (modulo x 10) result))))\n \
    \     (digits-iter x '()))\n    (define (join-digits x)\n      (define (join-digits-iter\
    \ x result)\n        (if (null? x)\n            result\n            (join-digits-iter\
    \ (cdr x)\n                              (string-append (number->string (car x))\
    \ result))))\n      (join-digits-iter x \"\"))\n    (define (shift-digits-helper\
    \ x shift)\n      (if (zero? shift)\n          (reverse-digits x)\n          (shift-digits-iter\
    \ x shift '())))\n    (join-digits (shift-digits-helper x shift)))\n  (shift-digits\
    \ x shift))\n", "  (define (helper x shift result)\n    (if (zero? x)\n      \
    \  result\n        (helper (quotient x 10)\n                shift\n          \
    \      (string-append (number->string (remainder x 10)) result))))\n  (if (> shift\
    \ (string-length (number->string x)))\n      (helper x shift \"\")\n      (string-append\
    \ (substring (helper x shift \"\") shift)\n                     (substring (helper\
    \ x shift \"\") 0 shift))))\n", "  (define (shift-helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-helper (quotient x 10) (- shift 1))))\n  (define\
    \ (shift-helper2 x shift)\n    (if (zero? shift)\n        x\n        (shift-helper2\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-helper3 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-helper3 (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-helper4 x shift)\n    (if (zero? shift)\n        x\n        (shift-helper4\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-helper5 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-helper5 (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-helper6 x shift)\n    (if (zero? shift)\n        x\n        (shift-helper6\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-helper7 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-helper7 (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-helper8 x shift)\n    (if (zero? shift)\n        x\n        (shift-helper8\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-helper9 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-helper9 (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-helper10 x shift)\n    (if (zero? shift)\n        x\n        (shift-helper10\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-helper11 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-helper11 (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-helper12 x shift)\n    (if (zero? shift)\n        x\n        (shift-helper12\
    \ (modulo x 10) (-", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (if (zero? shift)\n          \
    \                       (sub1 (length (number->string x)))\n                 \
    \                (sub1 shift))\n                             (cons (modulo x 10)\
    \ result))))\n    (number->string (apply + (map (lambda (x) (expt 10 x))\n   \
    \                               (shift-digits-iter x shift '())))))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (append (cdr digits)\
    \ (list (car digits)))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (define (reverse-digits digits)\n    (if (null? digits)\n\
    \        '()\n        (append (reverse-digits (cdr digits)) (list (car digits)))))\n\
    \  (define digits (shift-digits x shift))\n  (if (> shift (length digits))\n \
    \     (digits->string (reverse-digits digits))\n      (digits->string (shift-digits-right\
    \ digits shift))))\n", "  (define (shift-digits x shift)\n    (define (shift-digit\
    \ x digit)\n      (if (zero? digit)\n          x\n          (let ([x (quotient\
    \ x 10)])\n            (shift-digit (+ (* x 10) (remainder x 10)) (sub1 digit)))))\n\
    \    (shift-digit x shift))\n  (define (digits x)\n    (if (zero? x)\n       \
    \ 0\n        (add1 (digits (quotient x 10)))))\n  (define (reverse-digits x)\n\
    \    (define (reverse-digit x digit)\n      (if (zero? digit)\n          x\n \
    \         (let ([x (quotient x 10)])\n            (reverse-digit (+ (* x 10) (remainder\
    \ x 10)) (sub1 digit)))))\n    (reverse-digit x (digits x)))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-helper x)\n      (if (zero? x)\n         \
    \ \"\"\n          (string-append (digits-to-string-helper (quotient x 10))\n \
    \                        (string (remainder x 10)))))\n    (digits-to-string-helper\
    \ x))\n  (if (> shift (digits x))\n      (digits-to-string (reverse-digits x))\n\
    \      (digits-to-string (shift-digits x shift))))\n", "  (define (shift-right\
    \ x shift)\n    (define (shift-right-helper x shift)\n      (if (= shift 0)\n\
    \          x\n          (shift-right-helper (quotient x 10) (- shift 1))))\n \
    \   (define (shift-left x shift)\n      (define (shift-left-helper x shift)\n\
    \        (if (= shift 0)\n            x\n            (shift-left-helper (* x 10)\
    \ (- shift 1))))\n      (shift-left-helper x shift))\n    (define (shift-helper\
    \ x shift)\n      (if (= shift 0)\n          x\n          (if (> shift 0)\n  \
    \            (shift-right-helper x shift)\n              (shift-left-helper x\
    \ (- shift)))))\n    (shift-helper x shift))\n  (define (reverse-digits x)\n \
    \   (define (reverse-digits-helper x result)\n      (if (= x 0)\n          result\n\
    \          (reverse-digits-helper (quotient x 10) (+ (* result 10) (remainder\
    \ x 10)))))\n    (reverse-digits-helper x 0))\n  (define (num-digits x)\n    (define\
    \ (num-digits-helper x count)\n      (if (= x 0)\n          count\n          (num-digits-helper\
    \ (quotient x 10) (+ count 1))))\n    (num-digits-helper x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-helper x result)\n      (if (= x 0)\n    \
    \      result\n          (digits-to-string-helper (quotient x 10) (string-append\
    \ (number->string (remainder x 10)) result))))\n    (digits-to-string-helper x\
    \ \"\"))\n  (digits-to-string (if (> shift (num-digits x))\n                 \
    \       (reverse-digits x)\n                        (shift-right x shift))))\n",
  "  (define (reverse-digits x)\n    (define (reverse-digits-iter x result)\n    \
    \  (if (zero? x)\n          result\n          (reverse-digits-iter (quotient x\
    \ 10)\n                               (+ (* result 10) (remainder x 10)))))\n\
    \    (reverse-digits-iter x 0))\n  (define (digits x)\n    (define (digits-iter\
    \ x result)\n      (if (zero? x)\n          result\n          (digits-iter (quotient\
    \ x 10)\n                       (cons (remainder x 10) result))))\n    (digits-iter\
    \ x '()))\n  (define (shift-digits x shift)\n    (define (shift-digits-iter x\
    \ shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (if (zero? shift)\n          \
    \                       0\n                                 (sub1 shift))\n  \
    \                           (cons (remainder x 10) result))))\n    (shift-digits-iter\
    \ x shift '()))\n  (define (digits-to-string digits)\n    (define (digits-to-string-iter\
    \ digits result)\n      (if (null? digits)\n          result\n          (digits-to-string-iter\
    \ (cdr digits)\n                                 (string-append result\n     \
    \                                           (number->string (car digits))))))\n\
    \    (digits-to-string-iter digits \"\"))\n  (define (shift-digits-to-string x\
    \ shift)\n    (digits-to-string (shift-digits x shift)))\n  (define (reverse-digits-to-string\
    \ x)\n    (digits-to-string (reverse-digits x)))\n  (define (number-of-digits\
    \ x)\n    (define (number-of-digits-iter x result)\n      (if (zero? x)\n    \
    \      result\n          (number-of-digits-iter (quotient x 10)\n            \
    \                     (add1 result))))\n    (number-of-digits-iter x 0))\n  (if\
    \ (> shift (number-of-digits x))\n      (", "  (define (shift-digits x shift)\n\
    \    (define (shift-digit x shift)\n      (if (= x 0)\n          0\n         \
    \ (let* ([digit (modulo x 10)]\n                 [shifted-digit (modulo (+ digit\
    \ shift) 10)])\n            (+ (* shifted-digit (expt 10 shift))\n           \
    \    (shift-digit (quotient x 10) (- shift 1))))))\n    (if (= shift 0)\n    \
    \    x\n        (shift-digit x shift)))\n  (define (num-digits x)\n    (if (=\
    \ x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ (* (modulo x 10) (expt 10 (- (num-digits\
    \ x) 1)))\n           (reverse-digits (quotient x 10)))))\n  (number->string (if\
    \ (> shift (num-digits x))\n                      (reverse-digits x)\n       \
    \               (shift-digits x shift))))\n", "  (define (shift-digits x shift)\n\
    \    (define (shift-digits-iter x shift acc)\n      (if (zero? x)\n          acc\n\
    \          (shift-digits-iter (quotient x 10)\n                             (modulo\
    \ (+ shift 1) (number->string x))\n                             (cons (modulo\
    \ x 10) acc))))\n    (shift-digits-iter x shift '()))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-iter x acc)\n      (if (zero? x)\n         \
    \ acc\n          (reverse-digits-iter (quotient x 10)\n                      \
    \         (cons (modulo x 10) acc))))\n    (reverse-digits-iter x '()))\n  (define\
    \ (digits->string digits)\n    (define (digits->string-iter digits acc)\n    \
    \  (if (null? digits)\n          acc\n          (digits->string-iter (cdr digits)\n\
    \                               (string-append (number->string (car digits)) acc))))\n\
    \    (digits->string-iter digits \"\"))\n  (if (> shift (number->string x))\n\
    \      (digits->string (reverse-digits x))\n      (digits->string (shift-digits\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (define (shift-digit\
    \ x shift)\n      (if (= shift 0)\n          x\n          (let ([x (remainder\
    \ x 10)])\n            (shift-digit (+ (* x 10) (quotient x 10)) (- shift 1)))))\n\
    \    (if (= shift 0)\n        x\n        (shift-digit x shift)))\n  (define (num-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (define (reverse-digits x)\n    (define (reverse-digit x)\n      (let ([x (remainder\
    \ x 10)])\n        (+ (* x 10) (quotient x 10))))\n    (if (= x 0)\n        0\n\
    \        (reverse-digit x)))\n  (define (digits->string x)\n    (if (= x 0)\n\
    \        \"\"\n        (string-append (digits->string (quotient x 10))\n     \
    \                  (string (remainder x 10)))))\n  (digits->string (if (> (num-digits\
    \ x) shift)\n                      (shift-digits x shift)\n                  \
    \    (reverse-digits x))))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (circular-shift-iter x shift acc)\n    (cond\n      [(zero? shift) (number->string\
    \ acc)]\n      [(zero? x) (circular-shift-iter x (- shift 1) acc)]\n      [else\
    \ (circular-shift-iter (quotient x 10) (- shift 1) (+ (* acc 10) (remainder x\
    \ 10)))]))\n  (circular-shift-iter x shift 0))\n", "  (define (shift-digits x\
    \ shift)\n    (if (zero? x)\n        '()\n        (cons (remainder x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-digits-right (append (cdr x) (list (car x))) (- shift\
    \ 1))))\n  (define (digits-to-string x)\n    (if (null? x)\n        \"\"\n   \
    \     (string-append (number->string (car x)) (digits-to-string (cdr x)))))\n\
    \  (digits-to-string (shift-digits-right (shift-digits x shift) shift)))\n", " \
    \ (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (modulo\
    \ (+ x (* shift 10)) 10))\n    (define (shift-digits-iter x shift result)\n  \
    \    (if (zero? x)\n          result\n          (shift-digits-iter (quotient x\
    \ 10)\n                             shift\n                             (cons\
    \ (shift-digit x shift) result))))\n    (reverse (shift-digits-iter x shift '())))\n\
    \  (define (num-digits x)\n    (define (num-digits-iter x count)\n      (if (zero?\
    \ x)\n          count\n          (num-digits-iter (quotient x 10) (+ count 1))))\n\
    \    (num-digits-iter x 0))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x result)\n      (if (zero? x)\n          result\n          (reverse-digits-iter\
    \ (quotient x 10)\n                               (cons (modulo x 10) result))))\n\
    \    (reverse-digits-iter x '()))\n  (define (digits->string digits)\n    (define\
    \ (digits->string-iter digits result)\n      (if (null? digits)\n          result\n\
    \          (digits->string-iter (cdr digits)\n                               (string-append\
    \ result\n                                              (number->string (car digits))))))\n\
    \    (digits->string-iter digits \"\"))\n  (define (digits->int digits)\n    (define\
    \ (digits->int-iter digits result)\n      (if (null? digits)\n          result\n\
    \          (digits->int-iter (cdr digits)\n                            (+ (* result\
    \ 10) (car digits)))))\n    (digits->int-iter digits 0))\n  (define (digits-equal?\
    \ x y)\n    (and (null? x) (null? y))\n    (or (null? x) (null? y))\n    (and\
    \ (not (null? x)) (not (null? y))\n         (equal? (car x) (car y))\n       \
    \  (digits-equal? (cdr x) (cdr y))))\n", "  (define (helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (helper (quotient x 10) (- shift 1))))\n \
    \ (define (reverse-digits x)\n    (define (helper x)\n      (if (zero? x)\n  \
    \        \"\"\n          (string-append (helper (quotient x 10)) (string (remainder\
    \ x 10)))))\n    (helper x))\n  (define (shift-digits x shift)\n    (define (helper\
    \ x shift)\n      (if (zero? shift)\n          x\n          (helper (quotient\
    \ x 10) (- shift 1))))\n    (define (helper2 x shift)\n      (if (zero? shift)\n\
    \          x\n          (helper2 (quotient x 10) (- shift 1))))\n    (define (helper3\
    \ x shift)\n      (if (zero? shift)\n          x\n          (helper3 (quotient\
    \ x 10) (- shift 1))))\n    (define (helper4 x shift)\n      (if (zero? shift)\n\
    \          x\n          (helper4 (quotient x 10) (- shift 1))))\n    (define (helper5\
    \ x shift)\n      (if (zero? shift)\n          x\n          (helper5 (quotient\
    \ x 10) (- shift 1))))\n    (define (helper6 x shift)\n      (if (zero? shift)\n\
    \          x\n          (helper6 (quotient x 10) (- shift 1))))\n    (define (helper7\
    \ x shift)\n      (if (zero? shift)\n          x\n          (helper7 (quotient\
    \ x 10) (- shift 1))))\n    (define (helper8 x shift)\n      (if (zero? shift)\n\
    \          x\n          (helper8 (quotient x 10) (- shift 1))))\n    (define (helper9\
    \ x shift)\n      (if (zero? shift)\n          x\n          (helper9 (quotient\
    \ x 10) (- shift 1))))\n    (define (helper10 x shift)\n      (if (zero? shift)\n\
    \          x\n          (helper10 (quotient x 10) (- shift 1", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digit x shift)\n      (if (< shift 0)\n       \
    \   (add1 (modulo x 10))\n          (modulo (quotient x 10) 10)))\n    (if (zero?\
    \ x)\n        x\n        (add (shift-digit x shift)\n             (mul 10 (shift-digits\
    \ (quotient x 10) shift)))))\n  (define (num-digits x)\n    (if (zero? x)\n  \
    \      0\n        (add 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        x\n        (add (modulo x 10)\n             (mul\
    \ 10 (reverse-digits (quotient x 10))))))\n  (define (shift-by-num-digits x)\n\
    \    (if (< shift (num-digits x))\n        (shift-digits x shift)\n        (reverse-digits\
    \ x)))\n  (number->string (shift-by-num-digits x)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) (- shift 1)))))\n  (define (reverse-digits x)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n\
    \  (define (digits-to-string digits)\n    (if (null? digits)\n        \"\"\n \
    \       (string-append (number->string (car digits)) (digits-to-string (cdr digits)))))\n\
    \  (if (> shift (length (number->string x)))\n      (digits-to-string (reverse-digits\
    \ x))\n      (digits-to-string (shift-digits x shift))))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digit x shift)\n      (modulo (+ x shift) 10))\n\
    \  (define (shift-digits-iter x shift)\n    (if (zero? x)\n        '()\n     \
    \   (cons (shift-digit x shift)\n              (shift-digits-iter (quotient x\
    \ 10)\n                                 shift)))\n  (define (reverse-digits x)\n\
    \    (define (reverse-digits-iter x acc)\n      (if (zero? x)\n          acc\n\
    \          (reverse-digits-iter (quotient x 10)\n                            \
    \   (cons (modulo x 10) acc))))\n  (define (digits-to-string digits)\n    (define\
    \ (digits-to-string-iter digits)\n      (if (null? digits)\n          \"\"\n \
    \         (string-append (number->string (car digits))\n                     \
    \    (digits-to-string-iter (cdr digits)))))\n  (digits-to-string (reverse-digits-iter\
    \ x '())))\n", "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n\
    \      (if (= shift 0)\n          x\n          (let ([d (modulo x 10)])\n    \
    \        (shift-digit (quotient x 10) (- shift 1))\n            (if (= d 0)\n\
    \                (quotient x 10)\n                (+ (* x 10) d)))))\n    (if\
    \ (= shift 0)\n        x\n        (shift-digit x shift)))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digit x)\n      (let ([d (modulo x 10)])\n        (if\
    \ (= d 0)\n            x\n            (reverse-digit (quotient x 10))\n      \
    \      (+ (* x 10) d))))\n    (reverse-digit x))\n  (define (count-digits x)\n\
    \    (define (count-digit x)\n      (if (= x 0)\n          0\n          (+ 1 (count-digit\
    \ (quotient x 10)))))\n    (count-digit x))\n  (define (digits x)\n    (define\
    \ (digit x)\n      (if (= x 0)\n          '()\n          (cons (modulo x 10) (digit\
    \ (quotient x 10)))))\n    (digit x))\n  (define (stringify-digits x)\n    (define\
    \ (stringify-digit x)\n      (if (null? x)\n          \"\"\n          (string-append\
    \ (number->string (car x)) (stringify-digit (cdr x)))))\n    (stringify-digit\
    \ x))\n  (stringify-digits (if (> shift (count-digits x))\n                  \
    \      (reverse-digits x)\n                        (shift-digits x shift))))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (modulo\
    \ (+ x (* shift 10)) 10))\n    (define (shift-digits-iter x shift acc)\n     \
    \ (if (zero? x)\n          acc\n          (shift-digits-iter (quotient x 10) shift\
    \ (cons (shift-digit x shift) acc))))\n    (reverse (shift-digits-iter x shift\
    \ '())))\n  (define (num-digits x)\n    (define (num-digits-iter x acc)\n    \
    \  (if (zero? x)\n          acc\n          (num-digits-iter (quotient x 10) (+\
    \ acc 1))))\n    (num-digits-iter x 0))\n  (define (digits->string digits)\n \
    \   (define (digits->string-iter digits acc)\n      (if (null? digits)\n     \
    \     acc\n          (digits->string-iter (cdr digits) (string-append (number->string\
    \ (car digits)) acc))))\n    (digits->string-iter digits \"\"))\n  (digits->string\
    \ (shift-digits x (modulo shift (num-digits x)))))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digit x shift)\n      (modulo (+ x (* shift 10))\
    \ 10))\n    (if (zero? x)\n        0\n        (+ (* (shift-digit x shift) (expt\
    \ 10 (- (number->string x) 1)))\n           (shift-digits (quotient x 10) shift))))\n\
    \  (number->string (shift-digits x shift)))\n", "  (define (circular-shift-helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular-shift-helper\
    \ (quotient x 10)\n                               (if (> shift 0)\n          \
    \                         (sub1 shift)\n                                   (add1\
    \ shift))\n                               (string-append (number->string (remainder\
    \ x 10))\n                                              result))))\n  (define\
    \ (num-digits x)\n    (if (zero? x)\n        0\n        (add1 (num-digits (quotient\
    \ x 10)))))\n  (circular-shift-helper x (modulo shift (num-digits x)) \"\"))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digit x shift)\n      (modulo (+ x (* shift 10)) 10))\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             shift\n                      \
    \       (cons (shift-digit x shift) result))))\n    (reverse (shift-digits-iter\
    \ x shift '())))\n  (define (num-digits x)\n    (define (num-digits-iter x result)\n\
    \      (if (zero? x)\n          result\n          (num-digits-iter (quotient x\
    \ 10) (+ 1 result))))\n    (num-digits-iter x 0))\n  (define (digits->string digits)\n\
    \    (define (digits->string-iter digits result)\n      (if (null? digits)\n \
    \         result\n          (digits->string-iter (cdr digits)\n              \
    \                 (string-append result\n                                    \
    \          (number->string (car digits))))))\n    (digits->string-iter digits\
    \ \"\"))\n  (if (> shift (num-digits x))\n      (digits->string (reverse (shift-digits\
    \ x shift)))\n      (digits->string (shift-digits x shift))))\n", "  (define (rotate\
    \ x shift)\n    (define (rotate-iter x shift acc)\n      (if (zero? x)\n     \
    \     acc\n          (rotate-iter (quotient x 10)\n                       (if\
    \ (zero? shift)\n                           (length (number->string x))\n    \
    \                       (- shift 1))\n                       (string-append (number->string\
    \ (remainder x 10))\n                                      acc))))\n    (rotate-iter\
    \ x shift \"\"))\n  (rotate x shift))\n", "  (define (rotate x)\n    (define (rotate-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (rotate-iter (quotient\
    \ x 10)\n                       (string-append (number->string (remainder x 10))\n\
    \                                      acc))))\n    (rotate-iter x \"\"))\n  (define\
    \ (rotate-right x shift)\n    (define (rotate-right-iter x shift acc)\n      (if\
    \ (zero? shift)\n          acc\n          (rotate-right-iter (quotient x 10)\n\
    \                             (sub1 shift)\n                             (string-append\
    \ (number->string (remainder x 10))\n                                        \
    \    acc))))\n    (rotate-right-iter x shift \"\"))\n  (define (rotate-left x\
    \ shift)\n    (define (rotate-left-iter x shift acc)\n      (if (zero? shift)\n\
    \          acc\n          (rotate-left-iter (quotient x 10)\n                \
    \            (sub1 shift)\n                            (string-append acc\n  \
    \                                         (number->string (remainder x 10))))))\n\
    \    (rotate-left-iter x shift \"\"))\n  (define (reverse x)\n    (define (reverse-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (reverse-iter (quotient\
    \ x 10)\n                        (string-append (number->string (remainder x 10))\n\
    \                                       acc))))\n    (reverse-iter x \"\"))\n\
    \  (define (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (zero?\
    \ x)\n          acc\n          (num-digits-iter (quotient x 10)\n            \
    \               (add1 acc))))\n    (num-digits-iter x 0))\n  (if (> shift (num-digits\
    \ x))\n      (reverse x)\n      (if (> shift 0)\n          (rotate-right x shift)\n\
    \          (rotate-left x (abs shift)))))\n", "  (define (shift-helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-helper (modulo (quotient x 10)\
    \ (expt 10 (sub1 (number->string x))))\n                      (sub1 shift))))\n\
    \  (string-&gt;number (string-reverse (number-&gt;string (shift-helper x shift)))))\n\
    </code>\nI get the error:\n<code>number-&gt;string: expects argument of type &lt;number&gt;;\
    \ given 12\n</code>\nI don't understand why this is happening. I've tried changing\
    \ the order of the arguments in <code>number-&gt;string</code> and <code>string-reverse</code>\
    \ but that didn't help.\n\n\nA:\n\nThe problem is that you're passing the result\
    \ of <code>number-&gt;string</code> to <code>sub1</code>, which expects a number.\
    \ You should be passing the result of <code>sub1</code> to <code>expt</code>,\
    \ not the other way around.\n", "  (define (helper x shift acc)\n    (cond [(zero?\
    \ x) (number->string (reverse acc))]\n          [(zero? shift) (number->string\
    \ (reverse (cons (modulo x 10) acc)))]\n          [else (helper (quotient x 10)\
    \ (- shift 1) (cons (modulo x 10) acc))]))\n  (helper x shift '()))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digit x shift)\n      (modulo (+\
    \ x (* shift 10)) 10))\n    (define (shift-digits-iter x shift)\n      (if (zero?\
    \ x)\n          '()\n          (cons (shift-digit x shift)\n                (shift-digits-iter\
    \ (quotient x 10) shift))))\n    (reverse (shift-digits-iter x shift)))\n  (define\
    \ (digits x)\n    (define (digits-iter x)\n      (if (zero? x)\n          '()\n\
    \          (cons (modulo x 10)\n                (digits-iter (quotient x 10)))))\n\
    \    (reverse (digits-iter x)))\n  (define (num-digits x)\n    (length (digits\
    \ x)))\n  (define (shift-digits x shift)\n    (if (> shift (num-digits x))\n \
    \       (reverse (digits x))\n        (shift-digits x shift)))\n  (define (digits->num\
    \ x)\n    (define (digits->num-iter x)\n      (if (null? x)\n          0\n   \
    \       (+ (* (car x) (expt 10 (length x)))\n             (digits->num-iter (cdr\
    \ x)))))\n    (digits->num-iter x))\n  (number->string (digits->num (shift-digits\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n     \
    \   '()\n        (cons (remainder x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (digits->string digits)\n    (if (null? digits)\n        \"\"\n   \
    \     (string-append (number->string (car digits))\n                       (digits->string\
    \ (cdr digits)))))\n  (define (reverse-digits digits)\n    (if (null? digits)\n\
    \        '()\n        (append (reverse-digits (cdr digits)) (list (car digits)))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits)))\n     \
    \                       (- shift 1))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (let* ([x-str (number->string x)]\n             \
    \  [x-len (string-length x-str)]\n               [x-rev (string-reverse x-str)]\n\
    \               [x-rev-len (string-length x-rev)]\n               [shift-mod (modulo\
    \ shift x-len)])\n          (if (zero? shift-mod)\n              x-rev\n     \
    \         (string-append (substring x-rev 0 shift-mod)\n                     \
    \        (substring x-rev-len (- x-rev-len shift-mod)))))))\n  (helper x shift))\n",
  "  (define (shift-helper x shift)\n    (if (= shift 0)\n        x\n        (shift-helper\
    \ (modulo (quotient x 10) (expt 10 (sub1 (number->string x))))\n             \
    \         (sub1 shift))))\n  (number->string (shift-helper x shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (append (cdr digits)\
    \ (list (car digits)))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n    \
    \    x\n        (shift-helper (quotient (+ (* (remainder x 10) (expt 10 (- (number->string\
    \ x) 1)))\n                                  (quotient x 10))\n              \
    \         10)\n                      (- shift 1))))\n  (number->string (shift-helper\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n      \
    \  '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) (- shift 1)))))\n\
    \  (define (shift-digits-right x shift)\n    (if (zero? shift)\n        x\n  \
    \      (shift-digits-right (append (cdr x) (list (car x))) (- shift 1))))\n  (define\
    \ (digits-to-string x)\n    (if (zero? x)\n        '()\n        (cons (number->string\
    \ (car x)) (digits-to-string (cdr x)))))\n  (define (string-reverse x)\n    (if\
    \ (null? x)\n        '()\n        (append (string-reverse (cdr x)) (list (car\
    \ x)))))\n  (define (string-concat x)\n    (if (null? x)\n        \"\"\n     \
    \   (string-append (car x) (string-concat (cdr x)))))\n  (string-concat (string-reverse\
    \ (digits-to-string (shift-digits-right (shift-digits x shift) shift)))))\n",
  "  (define (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [(zero?\
    \ x) x]\n      [else\n       (let ([last-digit (modulo x 10)]\n             [rest\
    \ (quotient x 10)])\n         (shift-digits (+ (* 10 last-digit) rest) (- shift\
    \ 1)))]))\n  (define (num-digits x)\n    (cond\n      [(zero? x) 0]\n      [else\
    \ (+ 1 (num-digits (quotient x 10)))]))\n  (define (reverse-digits x)\n    (cond\n\
    \      [(zero? x) x]\n      [else (+ (* 10 (reverse-digits (quotient x 10))) (modulo\
    \ x 10))]))\n  (define (digits-to-string x)\n    (cond\n      [(zero? x) \"\"\
    ]\n      [else (string-append (digits-to-string (quotient x 10))\n           \
    \                (number->string (modulo x 10)))]))\n  (digits-to-string\n   (cond\n\
    \     [(> shift (num-digits x)) (reverse-digits x)]\n     [else (shift-digits\
    \ x shift)])))\n", "  (define (circular-shift-helper x shift)\n    (if (= shift\
    \ 0)\n        (number->string x)\n        (let* ([x-str (number->string x)]\n\
    \               [x-len (string-length x-str)]\n               [shift-mod (modulo\
    \ shift x-len)])\n          (if (= shift-mod 0)\n              x-str\n       \
    \       (string-append (substring x-str shift-mod x-len)\n                   \
    \          (substring x-str 0 shift-mod))))))\n  (circular-shift-helper x shift))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append\
    \ (substring x -1) (substring x 0 -1)) (- shift 1))))\n  (if (< shift (string-length\
    \ (number->string x)))\n      (helper (number->string x) shift)\n      (string-reverse\
    \ (number->string x))))\n", "  (define (shift-digits x shift)\n    (cond [(= shift\
    \ 0) x]\n          [(= shift 1) (cons (last x) (butlast x))]\n          [else\
    \ (shift-digits (cons (last x) (butlast x)) (- shift 1))]))\n  (define (reverse-digits\
    \ x)\n    (cond [(empty? x) '()]\n          [else (append (reverse-digits (rest\
    \ x)) (list (first x)))]))\n  (define (digits x)\n    (cond [(zero? x) '()]\n\
    \          [else (append (digits (quotient x 10)) (list (remainder x 10)))]))\n\
    \  (define (stringify x)\n    (cond [(empty? x) \"\"]\n          [else (string-append\
    \ (stringify (rest x)) (number->string (first x)))]))\n  (stringify (if (> (length\
    \ (digits x)) shift)\n                 (shift-digits (digits x) shift)\n     \
    \            (reverse-digits (digits x)))))\n", "  (define (circular-shift-helper\
    \ x shift result)\n    (cond\n      [(zero? x) result]\n      [(zero? shift) (circular-shift-helper\
    \ (quotient x 10) shift (string-append (number->string (remainder x 10)) result))]\n\
    \      [else (circular-shift-helper (quotient x 10) (sub1 shift) (string-append\
    \ (number->string (remainder x 10)) result))]))\n  (circular-shift-helper x shift\
    \ \"\"))\n", "  (define (helper x shift)\n    (if (zero? x)\n        '()\n   \
    \     (cons (remainder x 10) (helper (quotient x 10) (sub1 shift)))))\n  (define\
    \ (helper2 lst shift)\n    (if (zero? shift)\n        lst\n        (helper2 (append\
    \ (cdr lst) (list (car lst))) (sub1 shift))))\n  (define (helper3 lst)\n    (if\
    \ (null? lst)\n        \"\"\n        (string-append (number->string (car lst))\
    \ (helper3 (cdr lst)))))\n  (helper3 (helper2 (helper x shift) shift)))\n", " \
    \ (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular-shift-helper x shift)\n\
    \    (cond [(= shift 0) x]\n          [(= shift (string-length x)) (string-reverse\
    \ x)]\n          [else (string-append (substring x shift) (substring x 0 shift))]))\n\
    \  (circular-shift-helper (number->string x) shift))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        x\n        (let ((d (remainder x 10)))\n\
    \          (if (zero? shift)\n              d\n              (shift-digits (quotient\
    \ x 10) (sub1 shift))))))\n  (define (shift-digits-right x shift)\n    (if (zero?\
    \ x)\n        x\n        (let ((d (remainder x 10)))\n          (if (zero? shift)\n\
    \              d\n              (shift-digits-right (quotient x 10) (sub1 shift))))))\n\
    \  (define (shift-digits-left x shift)\n    (if (zero? x)\n        x\n       \
    \ (let ((d (remainder x 10)))\n          (if (zero? shift)\n              d\n\
    \              (shift-digits-left (quotient x 10) (sub1 shift))))))\n  (define\
    \ (reverse-digits x)\n    (if (zero? x)\n        x\n        (let ((d (remainder\
    \ x 10)))\n          (if (zero? (quotient x 10))\n              d\n          \
    \    (add (reverse-digits (quotient x 10)) (* d (expt 10 (number->string (quotient\
    \ x 10)))))))))\n  (define (number->string x)\n    (if (zero? x)\n        0\n\
    \        (add1 (number->string (quotient x 10)))))\n  (if (< shift (number->string\
    \ x))\n      (string-append (number->string (shift-digits x shift)) (number->string\
    \ (shift-digits-right x (sub1 shift))))\n      (string-append (number->string\
    \ (reverse-digits x)))))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        '()\n        (cons (remainder x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (if\
    \ (= shift 0)\n          x\n          (let ([d (modulo x 10)])\n            (shift-digit\
    \ (quotient x 10) (- shift 1))\n            (if (= d 0)\n                (quotient\
    \ x 10)\n                (+ (* 10 d) (quotient x 10)))))))\n  (define (shift-digits-right\
    \ x shift)\n    (define (shift-digit-right x shift)\n      (if (= shift 0)\n \
    \         x\n          (let ([d (modulo x 10)])\n            (shift-digit-right\
    \ (quotient x 10) (- shift 1))\n            (if (= d 0)\n                (quotient\
    \ x 10)\n                (+ (* 10 d) (quotient x 10)))))))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digit x)\n      (if (= x 0)\n          0\n        \
    \  (+ (* 10 (modulo x 10)) (reverse-digit (quotient x 10)))))\n    (reverse-digit\
    \ x))\n  (define (number-of-digits x)\n    (define (number-of-digit x)\n     \
    \ (if (= x 0)\n          0\n          (+ 1 (number-of-digit (quotient x 10)))))\n\
    \    (number-of-digit x))\n  (define (digits-to-string x)\n    (define (digit-to-string\
    \ x)\n      (if (= x 0)\n          \"\"\n          (string-append (digit-to-string\
    \ (quotient x 10)) (number->string (modulo x 10)))))\n    (digit-to-string x))\n\
    \  (define (shift-digits-left x shift)\n    (define (shift-digit-left x shift)\n\
    \      (if (= shift 0)\n          x\n          (let ([d (modulo x 10)])\n    \
    \        (shift-digit-left (quotient x 10) (- shift 1))\n            (if (= d\
    \ 0)\n                (quotient x 10)\n                (+ (* 10 d) (quotient x\
    \ 10)))))))\n  (define (shift-digits", "  (define (shift-digits x shift)\n   \
    \ (define (shift-digits-iter x shift result)\n      (if (zero? x)\n          result\n\
    \          (shift-digits-iter (quotient x 10)\n                             (if\
    \ (zero? shift)\n                                 (modulo shift (length (number->string\
    \ x)))\n                                 (sub1 shift))\n                     \
    \        (cons (modulo x 10) result))))\n    (number->string (apply + (shift-digits-iter\
    \ x shift '()))))\n  (shift-digits x shift))\n", "  (define (shift-digits x shift)\n\
    \    (define (shift-digits-iter x shift result)\n      (if (zero? x)\n       \
    \   result\n          (shift-digits-iter (quotient x 10)\n                   \
    \          (modulo (+ shift 1) (number->string x))\n                         \
    \    (cons (modulo x 10) result))))\n    (define (reverse-digits x)\n      (define\
    \ (reverse-digits-iter x result)\n        (if (zero? x)\n            result\n\
    \            (reverse-digits-iter (quotient x 10)\n                          \
    \       (cons (modulo x 10) result))))\n      (reverse-digits-iter x '()))\n \
    \   (define (digits->string digits)\n      (define (digits->string-iter digits\
    \ result)\n        (if (null? digits)\n            result\n            (digits->string-iter\
    \ (cdr digits)\n                                 (string-append (number->string\
    \ (car digits))\n                                                result))))\n\
    \      (digits->string-iter digits \"\"))\n    (digits->string (shift-digits-iter\
    \ x shift '())))\n  (shift-digits x shift))\n", "  (define (shift-digits x shift)\n\
    \    (define (shift-digits-iter x shift result)\n      (cond ((zero? x) result)\n\
    \            ((zero? shift) (shift-digits-iter (/ x 10) shift (cons (modulo x\
    \ 10) result)))\n            (else (shift-digits-iter (/ x 10) (- shift 1) (cons\
    \ (modulo x 10) result)))))\n    (shift-digits-iter x shift '()))\n  (define (digits\
    \ x)\n    (define (digits-iter x result)\n      (cond ((zero? x) result)\n   \
    \         (else (digits-iter (/ x 10) (+ 1 result)))))\n    (digits-iter x 0))\n\
    \  (define (reverse-digits x)\n    (define (reverse-digits-iter x result)\n  \
    \    (cond ((zero? x) result)\n            (else (reverse-digits-iter (/ x 10)\
    \ (+ (* result 10) (modulo x 10))))))\n    (reverse-digits-iter x 0))\n  (define\
    \ (list->string lst)\n    (define (list->string-iter lst result)\n      (cond\
    \ ((null? lst) result)\n            (else (list->string-iter (cdr lst) (string-append\
    \ result (number->string (car lst)))))))\n    (list->string-iter lst \"\"))\n\
    \  (cond ((> shift (digits x)) (list->string (reverse-digits x)))\n        (else\
    \ (list->string (shift-digits x shift)))))\n", "  (define (shift-digits x shift)\n\
    \    (define (shift-digit x shift)\n      (modulo (+ x (* shift 10)) 10))\n  \
    \  (define (shift-digits-iter x shift acc)\n      (if (zero? x)\n          acc\n\
    \          (shift-digits-iter (quotient x 10) shift (cons (shift-digit x shift)\
    \ acc))))\n    (reverse (shift-digits-iter x shift '())))\n  (define (num-digits\
    \ x)\n    (define (num-digits-iter x acc)\n      (if (zero? x)\n          acc\n\
    \          (num-digits-iter (quotient x 10) (+ acc 1))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter x\
    \ acc)\n      (if (zero? x)\n          acc\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (modulo x 10)) acc))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (digits-to-string (shift-digits x (modulo shift (num-digits x)))))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x shift)\n      (if\
    \ (= shift 0)\n          x\n          (let* ([x-str (number->string x)]\n    \
    \             [x-len (string-length x-str)]\n                 [x-last (string-ref\
    \ x-str (- x-len 1))]\n                 [x-rest (substring x-str 0 (- x-len 1))])\n\
    \            (string->number (string-append x-last x-rest)))))\n    (if (= shift\
    \ 0)\n        x\n        (shift-digits (shift-digit x shift) (- shift 1))))\n\
    \  (number->string (shift-digits x shift)))\n", "  (define (helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (let* ([x-str (number->string x)]\n\
    \               [x-len (string-length x-str)]\n               [shift (modulo shift\
    \ x-len)]\n               [x-str-rev (string-reverse x-str)]\n               [x-str-rev-shift\
    \ (substring x-str-rev shift x-len)]\n               [x-str-rev-shift-rest (substring\
    \ x-str-rev 0 shift)])\n          (string->number (string-append x-str-rev-shift\
    \ x-str-rev-shift-rest)))))\n  (number->string (helper x shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digits-iter x shift acc)\n      (if (zero? x)\n          acc\n      \
    \    (shift-digits-iter (quotient x 10)\n                             (if (zero?\
    \ shift)\n                                 (modulo (add1 shift) (number->string\
    \ x))\n                                 (add1 shift))\n                      \
    \       (cons (modulo x 10) acc))))\n    (string->number (apply string-append\
    \ (reverse (shift-digits-iter x shift '())))))\n  (number->string (shift-digits\
    \ x shift)))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n  \
    \      x\n        (shift-helper (modulo (quotient x 10) (expt 10 (sub1 (number->string\
    \ x))))\n                      (sub1 shift))))\n  (define (reverse-helper x)\n\
    \    (if (zero? x)\n        \"\"\n        (string-append (number->string (modulo\
    \ x 10))\n                       (reverse-helper (quotient x 10)))))\n  (if (>\
    \ shift (number->string x))\n      (reverse-helper x)\n      (number->string (shift-helper\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (if (zero? shift)\n          \
    \                       (1+ shift)\n                                 shift)\n\
    \                             (cons (remainder x 10) result))))\n    (if (zero?\
    \ shift)\n        (shift-digits-iter x shift '())\n        (shift-digits-iter\
    \ x shift '())))\n  (define (digits-to-string digits)\n    (define (digits-to-string-iter\
    \ digits result)\n      (if (null? digits)\n          result\n          (digits-to-string-iter\
    \ (cdr digits)\n                                 (string-append (number->string\
    \ (car digits))\n                                                result))))\n\
    \    (digits-to-string-iter digits \"\"))\n  (digits-to-string (shift-digits x\
    \ shift)))\n", "  (define (shift-right x)\n    (define (shift-right-helper x)\n\
    \      (if (zero? x)\n          \"\"\n          (string-append (shift-right-helper\
    \ (quotient x 10))\n                         (number->string (remainder x 10)))))\n\
    \    (if (zero? shift)\n        (shift-right-helper x)\n        (shift-right-helper\
    \ (quotient x (expt 10 shift)))))\n  (define (shift-left x)\n    (define (shift-left-helper\
    \ x)\n      (if (zero? x)\n          \"\"\n          (string-append (number->string\
    \ (remainder x 10))\n                         (shift-left-helper (quotient x 10)))))\n\
    \    (if (zero? shift)\n        (shift-left-helper x)\n        (shift-left-helper\
    \ (quotient x (expt 10 shift)))))\n  (define (num-digits x)\n    (if (zero? x)\n\
    \        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse x)\n\
    \    (define (reverse-helper x)\n      (if (zero? x)\n          \"\"\n       \
    \   (string-append (reverse-helper (quotient x 10))\n                        \
    \ (number->string (remainder x 10)))))\n    (reverse-helper x))\n  (if (> shift\
    \ (num-digits x))\n      (reverse x)\n      (if (> shift 0)\n          (shift-right\
    \ x)\n          (shift-left x))))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? shift)\n        x\n        (let* ([x-str (number->string x)]\n      \
    \         [x-len (string-length x-str)]\n               [shift (modulo shift x-len)])\n\
    \          (string->number\n           (string-append (substring x-str shift x-len)\n\
    \                          (substring x-str 0 shift))))))\n  (number->string (shift-digits\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digit x\
    \ shift)\n      (remainder (+ x (* shift 10)) 100))\n    (define (shift-digits-iter\
    \ x shift)\n      (if (zero? x)\n          '()\n          (cons (shift-digit x\
    \ shift)\n                (shift-digits-iter (quotient x 10) shift))))\n    (reverse\
    \ (shift-digits-iter x shift)))\n  (define (num-digits x)\n    (define (num-digits-iter\
    \ x count)\n      (if (zero? x)\n          count\n          (num-digits-iter (quotient\
    \ x 10) (+ count 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x)\n      (if (zero? x)\n          '()\n\
    \          (cons (number->string (remainder x 10))\n                (digits-to-string-iter\
    \ (quotient x 10)))))\n    (apply string-append (reverse (digits-to-string-iter\
    \ x))))\n  (digits-to-string (shift-digits x (modulo shift (num-digits x)))))\n",
  "  (define (shift-digit x shift)\n    (modulo (+ x shift) 10))\n  (define (shift-digits\
    \ x shift)\n    (cond\n      [(zero? x) '()]\n      [else (cons (shift-digit x\
    \ shift) (shift-digits (quotient x 10) shift))]))\n  (define (reverse-digits x)\n\
    \    (cond\n      [(zero? x) '()]\n      [else (cons (modulo x 10) (reverse-digits\
    \ (quotient x 10)))]))\n  (define (digits-to-string x)\n    (cond\n      [(zero?\
    \ x) \"\"]\n      [else (string-append (number->string (modulo x 10)) (digits-to-string\
    \ (quotient x 10)))]))\n  (digits-to-string (if (> shift (number-of-digits x))\n\
    \                        (reverse-digits x)\n                        (shift-digits\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (define (shift-digit\
    \ x shift)\n      (if (zero? shift)\n          x\n          (shift-digit (modulo\
    \ (+ (* 10 x) 1) 10) (- shift 1))))\n    (if (zero? x)\n        x\n        (cons\
    \ (shift-digit (modulo x 10) shift)\n              (shift-digits (quotient x 10)\
    \ shift))))\n  (define (num-digits x)\n    (if (zero? x)\n        0\n        (+\
    \ 1 (num-digits (quotient x 10)))))\n  (define (digits->string digits)\n    (if\
    \ (null? digits)\n        \"\"\n        (string-append (number->string (car digits))\n\
    \                       (digits->string (cdr digits)))))\n  (digits->string (shift-digits\
    \ x (modulo shift (num-digits x)))))\n", "  (define (shift-digits x shift)\n \
    \   (define (shift-digits-iter x shift result)\n      (if (zero? x)\n        \
    \  result\n          (shift-digits-iter (quotient x 10)\n                    \
    \         (if (zero? shift)\n                                 (modulo x 10)\n\
    \                                 (sub1 shift))\n                            \
    \ (cons (modulo x 10) result))))\n    (list->string (reverse (shift-digits-iter\
    \ x shift '()))))\n  (define (num-digits x)\n    (define (num-digits-iter x count)\n\
    \      (if (zero? x)\n          count\n          (num-digits-iter (quotient x\
    \ 10) (add1 count))))\n    (num-digits-iter x 0))\n  (if (> shift (num-digits\
    \ x))\n      (string-reverse (number->string x))\n      (shift-digits x shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (append (cdr digits)\
    \ (list (car digits)))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (cons (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n \
    \       (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (circular-shift-helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular-shift-helper (modulo (quotient x 10) (expt 10 (sub1 (number->string\
    \ x))))\n                               (sub1 shift))))\n  (number->string (circular-shift-helper\
    \ x shift)))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n  \
    \      x\n        (shift-helper (modulo (quotient x 10) (expt 10 (sub1 (number->string\
    \ x)))) (sub1 shift))))\n  (number->string (shift-helper x shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digits-iter x shift result)\n   \
    \   (if (zero? x)\n          result\n          (shift-digits-iter (quotient x\
    \ 10)\n                             (if (zero? shift)\n                      \
    \           (1+ shift)\n                                 shift)\n            \
    \                 (cons (remainder x 10) result))))\n    (reverse (shift-digits-iter\
    \ x shift '())))\n  (define (digits x)\n    (define (digits-iter x result)\n \
    \     (if (zero? x)\n          result\n          (digits-iter (quotient x 10)\
    \ (cons (remainder x 10) result))))\n    (reverse (digits-iter x '())))\n  (define\
    \ (number->string x)\n    (define (number->string-iter x result)\n      (if (zero?\
    \ x)\n          result\n          (number->string-iter (quotient x 10) (cons (remainder\
    \ x 10) result))))\n    (reverse (number->string-iter x '())))\n  (number->string\
    \ (apply + (map * (shift-digits x shift) (map expt (digits x) (range 0 (length\
    \ (digits x))))))))\n", "  (define (shift-digits x shift)\n    (if (zero? shift)\n\
    \        x\n        (let* ([x-str (number->string x)]\n               [x-len (string-length\
    \ x-str)]\n               [x-digits (string->list x-str)]\n               [x-digits-reversed\
    \ (reverse x-digits)]\n               [x-digits-shifted (append (drop shift x-digits-reversed)\n\
    \                                         (take shift x-digits-reversed))])\n\
    \          (string-&gt;number (list-&gt;string x-digits-shifted)))))\n  (if (&lt;\
    \ shift (number-of-digits x))\n      (shift-digits x shift)\n      (shift-digits\
    \ x (- shift (number-of-digits x)))))\n", "  (define (helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (helper (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (if (zero? shift)\n      (number->string x)\n    \
    \  (helper (number->string x) shift)))\n", "  (define (cs x shift)\n    (if (zero?\
    \ shift)\n        (number->string x)\n        (let ([d (remainder x 10)])\n  \
    \        (string-append (cs (quotient x 10) (- shift 1)) (number->string d)))))\n\
    \  (let ([n (string-length (number->string x))])\n    (if (> shift n)\n      \
    \  (string-reverse (number->string x))\n        (cs x shift))))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digits-iter x shift result)\n   \
    \   (cond ((zero? x) result)\n            ((zero? shift) (shift-digits-iter (/\
    \ x 10) shift (cons (modulo x 10) result)))\n            (else (shift-digits-iter\
    \ (/ x 10) (- shift 1) (cons (modulo x 10) result)))))\n    (shift-digits-iter\
    \ x shift '()))\n  (define (digits x)\n    (define (digits-iter x result)\n  \
    \    (cond ((zero? x) result)\n            (else (digits-iter (/ x 10) (+ 1 result)))))\n\
    \    (digits-iter x 0))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x result)\n      (cond ((zero? x) result)\n            (else (reverse-digits-iter\
    \ (/ x 10) (+ (* result 10) (modulo x 10))))))\n    (reverse-digits-iter x 0))\n\
    \  (define (shift-digits-to-string digits)\n    (define (shift-digits-to-string-iter\
    \ digits result)\n      (cond ((null? digits) result)\n            (else (shift-digits-to-string-iter\
    \ (cdr digits) (string-append result (number->string (car digits)))))))\n    (shift-digits-to-string-iter\
    \ digits \"\"))\n  (shift-digits-to-string (if (> shift (digits x)) (reverse-digits\
    \ x) (shift-digits x shift))))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits-to-string digits)\n    (if\
    \ (null? digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define digits (string->list (number->string\
    \ x)))\n  (define (shift-digits digits shift)\n    (if (zero? shift)\n       \
    \ digits\n        (shift-digits (append (rest digits) (list (first digits))) (-\
    \ shift 1))))\n  (list->string (shift-digits digits shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (shift-digits-left digits\
    \ shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-left (append\
    \ (list (last digits)) (butlast digits)) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (define (reverse-digits digits)\n\
    \    (if (null? digits)\n        '()\n        (append (reverse-digits (cdr digits))\
    \ (list (car digits)))))\n  (define (digits-length digits)\n    (if (null? digits)\n\
    \        0\n        (+ 1 (digits-length (cdr digits)))))\n  (let ([digits (shift-digits\
    \ x shift)])\n    (if (> shift (digits-length digits))\n        (digits->string\
    \ (reverse-digits digits))\n        (digits->string (shift-digits-right digits\
    \ shift)))))\n", "  (define (shift-digits x shift)\n    (define (shift-digit x\
    \ shift)\n      (modulo (+ x shift) 10))\n  (define (shift-digits-helper x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (shift-digit x shift)\n       \
    \       (shift-digits-helper (quotient x 10) shift))))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-helper x)\n      (if (zero? x)\n          '()\n\
    \          (cons (modulo x 10)\n                (reverse-digits-helper (quotient\
    \ x 10)))))\n  (define (digits-to-string x)\n    (define (digits-to-string-helper\
    \ x)\n      (if (zero? x)\n          \"\"\n          (string-append (number->string\
    \ (modulo x 10))\n                         (digits-to-string-helper (quotient\
    \ x 10)))))\n  (digits-to-string (reverse-digits (shift-digits x shift))))\n",
  "  (define (shift-digits x shift)\n    (if (= x 0)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (= shift 0)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (helper (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (if (> shift (string-length (number->string x)))\n\
    \      (string-reverse (number->string x))\n      (helper (number->string x) shift)))\n",
  "  (define (shift-helper x shift acc)\n    (if (zero? x)\n        (number->string\
    \ acc)\n        (shift-helper (quotient x 10)\n                      (if (= shift\
    \ 0)\n                          (length (number->string x))\n                \
    \          (- shift 1))\n                      (+ (* (remainder x 10) (expt 10\
    \ shift)) acc))))\n  (shift-helper x shift 0))\n", "  (define (shift-digits x\
    \ shift)\n    (define (shift-digit x shift)\n      (modulo (+ x (* shift 10))\
    \ 10))\n    (define (shift-digits-iter x shift result)\n      (if (= x 0)\n  \
    \        result\n          (shift-digits-iter (quotient x 10) shift (cons (shift-digit\
    \ x shift) result))))\n    (reverse (shift-digits-iter x shift '())))\n  (define\
    \ (number-of-digits x)\n    (define (number-of-digits-iter x result)\n      (if\
    \ (= x 0)\n          result\n          (number-of-digits-iter (quotient x 10)\
    \ (+ result 1))))\n    (number-of-digits-iter x 0))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-iter x result)\n      (if (= x 0)\n        \
    \  result\n          (reverse-digits-iter (quotient x 10) (cons (modulo x 10)\
    \ result))))\n    (reverse-digits-iter x '()))\n  (if (> shift (number-of-digits\
    \ x))\n      (list->string (reverse-digits x))\n      (list->string (shift-digits\
    \ x shift))))\n", "  (define (helper x shift)\n    (if (zero? shift)\n       \
    \ x\n        (helper (string-append (substring x 1) (substring x 0 1)) (- shift\
    \ 1))))\n  (if (< shift (string-length (number->string x)))\n      (helper (number->string\
    \ x) shift)\n      (string-reverse (number->string x))))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digit x shift)\n      (if (= shift 0)\n       \
    \   x\n          (let ([d (remainder x 10)])\n            (shift-digit (quotient\
    \ x 10) (- shift 1))\n            (if (= d 0)\n                (string-append\
    \ (number->string d) (number->string x))\n                (string-append (number->string\
    \ x) (number->string d)))))))\n  (let ([digits (number->string x)])\n    (if (>\
    \ shift (string-length digits))\n        (string-reverse digits)\n        (shift-digits\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n     \
    \   '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) (- shift 1)))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (define (shift-digit x digit shift)\n   \
    \   (cond\n        [(= digit 0) (string-append (number->string x) (number->string\
    \ shift))]\n        [(= digit shift) (string-append (number->string shift) (number->string\
    \ x))]\n        [else (string-append (number->string x) (number->string shift))]))\n\
    \    (define (shift-digits-iter x shift digit)\n      (cond\n        [(= digit\
    \ 0) (shift-digit x digit shift)]\n        [else (shift-digits-iter (quotient\
    \ x 10) shift (- digit 1))]))\n    (shift-digits-iter x shift (quotient (integer-length\
    \ x) 2)))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter x digit)\n\
    \      (cond\n        [(= digit 0) (number->string x)]\n        [else (string-append\
    \ (number->string (remainder x 10)) (reverse-digits-iter (quotient x 10) (- digit\
    \ 1)))]))\n    (reverse-digits-iter x (integer-length x)))\n  (cond\n    [(> shift\
    \ (quotient (integer-length x) 2)) (reverse-digits x)]\n    [else (shift-digits\
    \ x shift)]))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift acc)\n      (cond\n        [(zero? x) (list->string (reverse acc))]\n\
    \        [(zero? shift) (shift-digits-iter (quotient x 10) shift (cons (remainder\
    \ x 10) acc))]\n        [else (shift-digits-iter (quotient x 10) (sub1 shift)\
    \ (cons (remainder x 10) acc))]))\n    (shift-digits-iter x shift '()))\n  (define\
    \ (num-digits x)\n    (define (num-digits-iter x acc)\n      (cond\n        [(zero?\
    \ x) acc]\n        [else (num-digits-iter (quotient x 10) (add1 acc))]))\n   \
    \ (num-digits-iter x 0))\n  (shift-digits x (modulo shift (num-digits x))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (define\
    \ (shift-digit x shift)\n      (modulo (+ (* x 10) shift) 10))\n    (define (shift-digits-iter\
    \ x shift)\n      (if (zero? x)\n          '()\n          (cons (shift-digit x\
    \ shift)\n                (shift-digits-iter (quotient x 10) shift))))\n    (reverse\
    \ (shift-digits-iter x shift)))\n  (define (num-digits x)\n    (define (num-digits-iter\
    \ x count)\n      (if (zero? x)\n          count\n          (num-digits-iter (quotient\
    \ x 10) (+ count 1))))\n    (num-digits-iter x 0))\n  (define (digits->string\
    \ digits)\n    (define (digits->string-iter digits)\n      (if (null? digits)\n\
    \          \"\"\n          (string-append (number->string (car digits))\n    \
    \                     (digits->string-iter (cdr digits)))))\n    (digits->string-iter\
    \ digits))\n  (digits->string (shift-digits x shift)))\n", "  (define (shift-digit\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digit (remainder\
    \ x 10) (- shift 1))))\n  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        \"\"\n        (string-append (shift-digits (quotient x 10) shift)\n \
    \                      (number->string (shift-digit x shift)))))\n  (define (num-digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (if (> shift (num-digits x))\n      (string-reverse (number->string x))\n \
    \     (shift-digits x shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-right x)\n    (let* ([x-str (number->string x)]\n           [x-len\
    \ (string-length x-str)]\n           [x-last (substring x-str (- x-len 1) x-len)]\n\
    \           [x-rest (substring x-str 0 (- x-len 1))])\n      (string-append x-last\
    \ x-rest)))\n  (define (shift-left x)\n    (let* ([x-str (number->string x)]\n\
    \           [x-len (string-length x-str)]\n           [x-first (substring x-str\
    \ 0 1)]\n           [x-rest (substring x-str 1 x-len)])\n      (string-append\
    \ x-rest x-first)))\n  (define (shift-digits x shift)\n    (if (= shift 0)\n \
    \       x\n        (if (> shift 0)\n            (shift-digits (shift-right x)\
    \ (- shift 1))\n            (shift-digits (shift-left x) (+ shift 1)))))\n  (shift-digits\
    \ x shift))\n", "  (define (circular-shift-helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular-shift-helper (quotient x 10)\n       \
    \                        (modulo (+ shift 1) (length result))\n              \
    \                 (string-append (substring result shift)\n                  \
    \                            (substring result 0 shift)\n                    \
    \                          (number->string (remainder x 10))))))\n  (circular-shift-helper\
    \ x shift (number->string x)))\n", "  (define (helper x shift)\n    (if (zero?\
    \ shift)\n        (number->string x)\n        (let* ([x-str (number->string x)]\n\
    \               [x-str-len (string-length x-str)]\n               [shift (modulo\
    \ shift x-str-len)])\n          (string-append (substring x-str shift x-str-len)\n\
    \                         (substring x-str 0 shift)))))\n  (helper x shift))\n",
  "  (define (digits x)\n    (if (zero? x)\n        '()\n        (cons (remainder\
    \ x 10) (digits (quotient x 10)))))\n  (define (shift-digits x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits (append (rest x) (list (first\
    \ x))) (- shift 1))))\n  (define (reverse-digits x)\n    (if (null? x)\n     \
    \   '()\n        (append (reverse-digits (rest x)) (list (first x)))))\n  (define\
    \ (digits-to-string x)\n    (if (null? x)\n        \"\"\n        (string-append\
    \ (number->string (first x)) (digits-to-string (rest x)))))\n  (digits-to-string\
    \ (if (> shift (length (digits x)))\n                        (reverse-digits (digits\
    \ x))\n                        (shift-digits (digits x) shift))))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-string x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-string (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (shift-string (number->string (shift-digits x shift))\
    \ shift))\n", "  (define (shift-digits x shift)\n    (if (zero? shift)\n     \
    \   x\n        (let* ([digits (number->string x)]\n               [len (string-length\
    \ digits)]\n               [shift (modulo shift len)])\n          (string-append\
    \ (substring digits shift len)\n                         (substring digits 0 shift)))))\n\
    \  (shift-digits x shift))\n", "  (define (helper x shift)\n    (if (zero? shift)\n\
    \        x\n        (helper (modulo x 10) (- shift 1))))\n  (define (shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper (quotient\
    \ x 10) (- shift 1))))\n  (define (digits x)\n    (if (zero? x)\n        0\n \
    \       (+ 1 (digits (quotient x 10)))))\n  (define (reverse x)\n    (define (helper\
    \ x acc)\n      (if (zero? x)\n          acc\n          (helper (quotient x 10)\
    \ (+ (* acc 10) (modulo x 10)))))\n    (helper x 0))\n  (define (shift-digits\
    \ x shift)\n    (if (> shift (digits x))\n        (reverse x)\n        (string-append\
    \ (number->string (helper x shift))\n                       (number->string (shift-helper\
    \ x shift)))))\n  (shift-digits x shift))\n", "  (define (shift-right x shift)\n\
    \    (define (shift-right-iter x shift result)\n      (if (zero? shift)\n    \
    \      result\n          (shift-right-iter (quotient x 10) (sub1 shift) (string-append\
    \ (number->string (remainder x 10)) result))))\n    (shift-right-iter x shift\
    \ \"\"))\n  (define (shift-left x shift)\n    (define (shift-left-iter x shift\
    \ result)\n      (if (zero? shift)\n          result\n          (shift-left-iter\
    \ (quotient x 10) (sub1 shift) (string-append result (number->string (remainder\
    \ x 10))))))\n    (shift-left-iter x shift \"\"))\n  (define (num-digits x)\n\
    \    (define (num-digits-iter x count)\n      (if (zero? x)\n          count\n\
    \          (num-digits-iter (quotient x 10) (add1 count))))\n    (num-digits-iter\
    \ x 0))\n  (if (> shift (num-digits x))\n      (string-reverse (number->string\
    \ x))\n      (if (> shift 0)\n          (shift-right x shift)\n          (shift-left\
    \ x (abs shift)))))\n", "  (define (shift-digit digit)\n    (if (zero? digit)\n\
    \        9\n        (- digit 1)))\n  (define (shift-digits digits)\n    (if (zero?\
    \ digits)\n        '()\n        (cons (shift-digit (car digits))\n           \
    \   (shift-digits (cdr digits)))))\n  (define (shift-digits-right digits shift)\n\
    \    (if (zero? shift)\n        digits\n        (shift-digits-right (shift-digits\
    \ digits) (- shift 1))))\n  (define (digits x)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10)\n              (digits (quotient x 10)))))\n  (define\
    \ (digits-to-string digits)\n    (if (zero? digits)\n        \"\"\n        (string-append\
    \ (number->string (car digits))\n                       (digits-to-string (cdr\
    \ digits)))))\n  (define (reverse-digits digits)\n    (if (zero? digits)\n   \
    \     '()\n        (cons (car (reverse digits))\n              (reverse-digits\
    \ (cdr (reverse digits))))))\n  (define (digits-length digits)\n    (if (zero?\
    \ digits)\n        0\n        (+ 1 (digits-length (cdr digits)))))\n  (if (> shift\
    \ (digits-length (digits x)))\n      (digits-to-string (reverse-digits (digits\
    \ x)))\n      (digits-to-string (shift-digits-right (digits x) shift))))\n", " \
    \ (define (rotate xs)\n    (append (cdr xs) (list (car xs))))\n  (define (rotate-n\
    \ xs n)\n    (if (= n 0)\n        xs\n        (rotate-n (rotate xs) (- n 1))))\n\
    \  (define (digits x)\n    (if (= x 0)\n        '()\n        (cons (modulo x 10)\
    \ (digits (quotient x 10)))))\n  (define (reverse-digits x)\n    (if (= x 0)\n\
    \        '()\n        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n\
    \  (define (digits-to-number xs)\n    (if (null? xs)\n        0\n        (+ (*\
    \ (car xs) (expt 10 (length xs))) (digits-to-number (cdr xs)))))\n  (define (reverse-digits-to-number\
    \ xs)\n    (if (null? xs)\n        0\n        (+ (* (car xs) (expt 10 (length\
    \ xs))) (reverse-digits-to-number (cdr xs)))))\n  (define (digits-to-string xs)\n\
    \    (if (null? xs)\n        \"\"\n        (string-append (number->string (car\
    \ xs)) (digits-to-string (cdr xs)))))\n  (define (reverse-digits-to-string xs)\n\
    \    (if (null? xs)\n        \"\"\n        (string-append (number->string (car\
    \ xs)) (reverse-digits-to-string (cdr xs)))))\n  (if (= shift 0)\n      (number->string\
    \ x)\n      (if (> shift (length (digits x)))\n          (reverse-digits-to-string\
    \ (reverse-digits x))\n          (digits-to-string (rotate-n (digits x) shift)))))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (helper (number->string\
    \ x) shift))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (if (zero? shift)\n          \
    \                       (modulo x 10)\n                                 (sub1\
    \ shift))\n                             (cons (modulo x 10) result))))\n    (list->string\
    \ (reverse (shift-digits-iter x shift '()))))\n  (if (zero? shift)\n      (number->string\
    \ x)\n      (shift-digits x shift)))\n", "  (define (shift-digits x shift)\n \
    \   (define (shift-digits-iter x shift result)\n      (if (zero? x)\n        \
    \  result\n          (shift-digits-iter (quotient x 10)\n                    \
    \         (if (zero? shift)\n                                 (number->string\
    \ x)\n                                 (add1 shift))\n                       \
    \      (string-append (number->string (remainder x 10))\n                    \
    \                        result))))\n    (shift-digits-iter x shift \"\"))\n \
    \ (define (reverse-digits x)\n    (define (reverse-digits-iter x result)\n   \
    \   (if (zero? x)\n          result\n          (reverse-digits-iter (quotient\
    \ x 10)\n                               (string-append (number->string (remainder\
    \ x 10))\n                                              result))))\n    (reverse-digits-iter\
    \ x \"\"))\n  (define (num-digits x)\n    (define (num-digits-iter x count)\n\
    \      (if (zero? x)\n          count\n          (num-digits-iter (quotient x\
    \ 10)\n                           (add1 count))))\n    (num-digits-iter x 0))\n\
    \  (if (> shift (num-digits x))\n      (reverse-digits x)\n      (shift-digits\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift result)\n      (if (zero? x)\n          result\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (modulo shift 1)\n           \
    \                  (cons (modulo x 10) result))))\n    (if (zero? shift)\n   \
    \     (shift-digits-iter x shift '())\n        (shift-digits-iter x shift (list\
    \ (quotient x 10)))))\n  (define (digits->string digits)\n    (define (digits->string-iter\
    \ digits result)\n      (if (null? digits)\n          result\n          (digits->string-iter\
    \ (cdr digits)\n                               (string-append (number->string\
    \ (car digits))\n                                              result))))\n  \
    \  (digits->string-iter digits \"\"))\n  (digits->string (shift-digits x shift)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
