name: HumanEval_11_string_xor
language: rkt
prompt: "#lang racket\n\n#| Input are two strings a and b consisting only of 1s and\
  \ 0s.\nPerform binary XOR on these inputs and return result also as a string.\n\
  >>> (string_xor \"010\" \"110\")\n\"100\"|#\n(define (string_xor a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n\
  \    (check-equal? (candidate \"111000\" \"101010\") \"010010\")\n    (check-equal?\
  \ (candidate \"1\" \"1\") \"0\")\n    (check-equal? (candidate \"0101\" \"0000\"\
  ) \"0101\")\n))\n\n(test-humaneval)"
completions: ["  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n    \
    \    #\\1))\n  (string-join (map (lambda (x) (xor-char (car x) (cadr x)))\n  \
    \                  (zip (string->list a) (string->list b)))))\n", "  (string-join\
    \ (map (lambda (x y) (if (equal? x y) \"0\" \"1\"))\n                    (string->list\
    \ a)\n                    (string->list b))))\n", "  (string-join\n   (map\n \
    \   (lambda (x)\n      (number->string (bitwise-xor (string->number (string x)\
    \ 2)\n                                   (string->number (string (cdr x)) 2))))\n\
    \    (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n", " \
    \ (define (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n\
    \  (define (xor-string a b)\n    (string-append\n     (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n     (xor-string (substring a 1) (substring b 1))))\n\
    \  (xor-string a b))\n", "  (string-join (map (lambda (x y) (if (eq? x y) #\"\
    0\" #\"1\")) a b)))\n", "  (string-join (map (lambda (x y) (if (equal? x y) \"\
    0\" \"1\"))\n                    (string->list a)\n                    (string->list\
    \ b))))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"]\n\
    \      [else \"1\"]))\n  (string-join\n   (map (lambda (a b) (xor-char a b))\n\
    \        (string->list a)\n        (string->list b))))\n", "  (string-join\n \
    \  (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number (string\
    \ x) 2)\n                                   (string->number (string (cdr x)) 2))))\n\
    \    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n", "  (string-join\
    \ (map (lambda (x y) (if (equal? x y) \"0\" \"1\")) a b)))\n", "  (define (xor-char\
    \ a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n  (string-join\n \
    \  (map (lambda (a b)\n          (xor-char a b))\n        (string->list a)\n \
    \       (string->list b))))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\n", "  (define (xor-char a b)\n\
    \    (if (char=? a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda\
    \ (a b) (xor-char a b)) a b)))\n", "  (define (xor-char a b)\n    (string-&gt;number\
    \ (number-&gt;string (char-&gt;integer a) 2) 2))\n  (define (xor-string a b)\n\
    \    (string-&gt;number (number-&gt;string (string-&gt;number a 2) 2) 2))\n  (define\
    \ (xor-string-with-char a b)\n    (string-&gt;number (number-&gt;string (string-&gt;number\
    \ a 2) 2) 2))\n  (cond\n    [(string=? a \"\") b]\n    [(string=? b \"\") a]\n\
    \    [(string=? (string-length a) 1) (xor-string-with-char b (string-ref a 0))]\n\
    \    [(string=? (string-length b) 1) (xor-string-with-char a (string-ref b 0))]\n\
    \    [else (xor-string a b)]))\n</code>\nI'm not sure how to use the <code>string-&gt;number</code>\
    \ and <code>number-&gt;string</code> functions to achieve the desired result.\n\
    \n\nA:\n\nYou can use <code>string-map</code> to apply a function to each character\
    \ of a string, and <code>string</code> to convert a character to a string.\n<code>(define\
    \ (string-xor a b)\n  (string-map (lambda (c1 c2)\n                (string (logxor\
    \ (char-&gt;integer c1)\n                                (char-&gt;integer c2))))\n\
    \              a b))\n</code>\n", "  (define (xor-char a b)\n    (if (equal? a\
    \ b) \"0\" \"1\"))\n  (string-join (map (curry xor-char) a b)))\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1)\
    \ (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (curry xor-char) (string->list\
    \ a) (string->list b))))\n", "  (string-join (map (lambda (x y) (if (eq? x y)\
    \ \"0\" \"1\")) a b)))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (string-join\n   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (string (bitwise-xor (string-&gt;number (string-ref a 0))\n           \
    \                (string-&gt;number (string-ref b 0))))\n      (string_xor (substring\
    \ a 1) (substring b 1)))]))\n</code>\n", "  (string-join\n   (map\n    (lambda\
    \ (x)\n      (number->string (bitwise-xor (string->number (string x) 2)\n    \
    \                               (string->number (string (cdr x)) 2))))\n    (zip\
    \ (string-&gt;list a) (string-&gt;list b)))))\n</code>\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-map xor-char\
    \ a b))\n", "  (string-join (map (lambda (x y)\n                      (if (equal?\
    \ x y)\n                          #\\0\n                          #\\1))\n   \
    \                 (string->list a)\n                    (string->list b))\n  \
    \             \"\"))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (define (xor-char a b)\n    (if (eq? a b)\n        #\\0\n        #\\1))\n  (string-map\
    \ xor-char a b))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n       \
    \ #\\0\n        #\\1))\n  (apply string (map xor-char a b)))\n", "  (string-join\
    \ (map (lambda (x y) (if (equal? x y) \"0\" \"1\"))\n                    (string->list\
    \ a)\n                    (string->list b))))\n", "  (string-join (map (lambda\
    \ (x y) (if (equal? x y) \"0\" \"1\"))\n                    (string->list a)\n\
    \                    (string->list b))))\n", "  (string-join\n   (map\n    (lambda\
    \ (x)\n      (number->string (bitwise-xor (string->number (string x) 2)\n    \
    \                               (string->number (string (cdr x)) 2))))\n    (zip\
    \ (string-&gt;list a) (string-&gt;list b)))))\n</code>\n", "  (string-join (map\
    \ (lambda (x y)\n                      (if (eq? x y) \"0\" \"1\"))\n         \
    \           (string->list a)\n                    (string->list b))))\n", "  (define\
    \ (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n  (string-join\
    \ (map (lambda (a b) (xor-char a b)) a b)))\n", "  (string-append\n   (map (lambda\
    \ (x y)\n          (if (equal? x y)\n              #\\0\n              #\\1))\n\
    \        (string->list a)\n        (string->list b))))\n", "  (define (xor-char\
    \ a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1) (if (char=?\
    \ b #\\0) #\\1 #\\0)]))\n  (string-join (map (lambda (a b) (xor-char a b)) a b)))\n",
  "  (string-join (map (lambda (x y) (if (eq? x y) \"0\" \"1\")) a b)))\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-join\
    \ (map (lambda (x) (xor-char (car x) (cadr x)))\n                    (zip (string->list\
    \ a) (string->list b)))))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (define (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n\
    \  (define (xor-string a b)\n    (string-append (list (xor-char (string-ref a\
    \ 0) (string-ref b 0)))\n                   (xor-string (substring a 1) (substring\
    \ b 1))))\n  (if (string=? a \"\")\n      b\n      (if (string=? b \"\")\n   \
    \       a\n          (xor-string a b))))\n", "  (define (xor-char a b)\n    (cond\n\
    \      [(char=? a #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\\
    0)]))\n  (string-join (map (lambda (a b) (xor-char a b)) (string->list a) (string->list\
    \ b))))\n", "  (string-join\n   (map (\u03BB (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2)\n                                            (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2))))\n     \
    \   (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n", " \
    \ (string-join (map (\u03BB (x) (number->string (xor (string-&gt;number (string\
    \ x)) (string-&gt;number (string (cadr x)))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b)))))\n</code>\n", "  (define (xor-char a b)\n    (if (equal? a b)\n      \
    \  #\\0\n        #\\1))\n  (string-join\n   (map (lambda (x) (xor-char (car x)\
    \ (cadr x)))\n        (zip (string->list a) (string->list b)))))\n", "  (string-join\
    \ (map (\u03BB (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n</code>\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n\
    \    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-take a 1))\n                           (string-&gt;number (string-take\
    \ b 1))))\n      (string_xor (string-drop a 1) (string-drop b 1)))]))\n</code>\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (string (bitwise-xor (string-&gt;number (string-take a 1))\n          \
    \                 (string-&gt;number (string-take b 1))))\n      (string_xor (string-drop\
    \ a 1) (string-drop b 1)))]))\n</code>\n", "  (define (xor-char a b)\n    (if\
    \ (char=? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n   \
    \ (string-append\n     (list (xor-char (string-ref a 0) (string-ref b 0)))\n \
    \    (xor-string (substring a 1) (substring b 1))))\n  (if (string=? a \"\")\n\
    \      b\n      (if (string=? b \"\")\n          a\n          (xor-string a b))))\n",
  "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\n", "  (string-join (map (lambda\
    \ (x y) (if (equal? x y) \"0\" \"1\")) a b)))\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string x))\n        (map (lambda (x y) (bitwise-xor x y))\n   \
    \          (map string-&gt;number (string-&gt;list a))\n             (map string-&gt;number\
    \ (string-&gt;list b))))))\n</code>\n", "  (string-join\n   (map\n    (lambda\
    \ (x)\n      (if (equal? (car x) (cadr x))\n          \"0\"\n          \"1\"))\n\
    \    (list-ecart a b))\n   \"\"))\n", "  (string-join\n   (map\n    (lambda (x)\n\
    \      (number->string (bitwise-xor (string->number (string x) 2)\n          \
    \                         (string->number (string (cdr x)) 2))))\n    (zip (string-&gt;list\
    \ a) (string-&gt;list b)))))\n</code>\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda (a b) (xor-char\
    \ a b)) a b)))\n", "  (string-join (map (lambda (x y) (if (equal? x y) \"0\" \"\
    1\")) a b)))\n", "  (apply string (map (\u03BB (x y) (if (equal? x y) #\\0 #\\\
    1)) a b)))\n", "  (string-join (map (lambda (x y) (if (equal? x y) \"0\" \"1\"\
    ))\n                    (string->list a)\n                    (string->list b))))\n",
  "  (define (xor-char c1 c2)\n    (if (or (and (char=? c1 #\\1) (char=? c2 #\\0))\n\
    \            (and (char=? c1 #\\0) (char=? c2 #\\1)))\n        #\\1\n        #\\\
    0))\n  (define (xor-string a b)\n    (if (or (string=? a \"\") (string=? b \"\"\
    ))\n        \"\"\n        (string-append (list (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n  \
    \  [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number (string-take\
    \ a 1))\n                           (string-&gt;number (string-take b 1))))\n\
    \      (string_xor (string-drop a 1) (string-drop b 1)))]))\n</code>\n", "  (define\
    \ (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n  (define\
    \ (xor-string a b)\n    (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                   (xor-string (substring a 1) (substring b 1))))\n\
    \  (if (string=? a \"\")\n      b\n      (if (string=? b \"\")\n          a\n\
    \          (xor-string a b))))\n", "  (define (xor-char a b)\n    (cond\n    \
    \  [(char=? a #\\0) (if (char=? b #\\0) #\\0 #\\1)]\n      [(char=? a #\\1) (if\
    \ (char=? b #\\1) #\\0 #\\1)]))\n  (define (xor-string a b)\n    (cond\n     \
    \ [(empty? a) b]\n      [(empty? b) a]\n      [else (cons (xor-char (first a)\
    \ (first b))\n                  (xor-string (rest a) (rest b)))]))\n  (xor-string\
    \ (string->list a) (string->list b)))\n", "  (define (xor-char a b)\n    (cond\n\
    \      [(char=? a #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\\
    0)]))\n  (string-join (map (lambda (x y) (xor-char x y)) (string->list a) (string->list\
    \ b))))\n", "  (string-join\n   (map\n    (\u03BB (x)\n      (number->string (xor\
    \ (string-&gt;number (string-ref a x))\n                           (string-&gt;number\
    \ (string-ref b x)))))\n    (build-list (string-length a) (\u03BB (x) x)))\n \
    \  \"\"))\n</code>\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a\
    \ #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join\
    \ (map (lambda (x y) (xor-char x y)) (string->list a) (string->list b))))\n",
  "  (let loop ([a (string->list a)] [b (string->list b)] [result '()])\n    (cond\
    \ [(empty? a) (list->string (reverse result))]\n          [(empty? b) (list->string\
    \ (reverse result))]\n          [else (loop (rest a) (rest b) (cons (if (equal?\
    \ (first a) (first b))\n                                                  #\\\
    0\n                                                  #\\1)\n                 \
    \                             result))])))\n", "  (string-join (map (\u03BB (x)\
    \ (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n\
    </code>\n", "  (string-join (map (lambda (x y)\n                      (if (equal?\
    \ x y)\n                          #\\0\n                          #\\1))\n   \
    \                 (string->list a)\n                    (string->list b))\n  \
    \             \"\"))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string x) 2)\n                               \
    \    (string->number (string (cdr x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n   \"\"))\n</code>\n", "  (define (xor-chars a b)\n    (cond\n      [(char=?\
    \ a #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join\
    \ (map (lambda (a b) (xor-chars a b)) (string->list a) (string->list b))))\n",
  "  (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=?\
    \ a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (curry xor-char)\
    \ a b)))\n", "  (string-join (map (lambda (x y)\n                      (if (equal?\
    \ x y)\n                          #\\0\n                          #\\1))\n   \
    \                 (string->list a)\n                    (string->list b))\n  \
    \             \"\"))\n", "  (define (xor-char a b)\n    (cond\n      [(char=?\
    \ a #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join\
    \ (map (lambda (x y) (xor-char x y)) (string->list a) (string->list b))))\n",
  "  (string-join\n   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n",
  "  (string-join (map (lambda (x y)\n                      (if (equal? x y) \"0\"\
    \ \"1\"))\n                    (string->list a)\n                    (string->list\
    \ b))))\n", "  (string-join (map (lambda (x y)\n                      (if (eq?\
    \ x y) \"0\" \"1\"))\n                    (string->list a)\n                 \
    \   (string->list b))))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (define (xor-char a b)\n    (if (equal? a b) \"0\" \"1\"))\n  (string-join (map\
    \ xor-char a b)))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\n\
    \       (bitwise-xor (string->number (string-ref x 0))\n                    (string->number\
    \ (string-ref x 1)))))\n    (string-zip a b))\n   \"\"))\n", "  (cond\n    [(empty?\
    \ a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n      (if (equal?\
    \ (first a) (first b))\n          \"0\"\n          \"1\")\n      (string_xor (rest\
    \ a) (rest b)))]))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string-ref x 0))\n                           \
    \        (string->number (string-ref x 1)))))\n    (map (lambda (x) (string (string-ref\
    \ a x) (string-ref b x)))\n         (range (string-length a))))))\n", "  (string-join\n\
    \   (map (lambda (x) (number->string (bitwise-xor (string->number (string x) 2)\
    \ (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n   \"\"))\n</code>\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (string-join\n   (map (\u03BB (x) (number->string (xor (string-&gt;number (string-ref\
    \ a x))\n                                    (string-&gt;number (string-ref b\
    \ x)))))\n        (build-list (max (string-length a) (string-length b))\n    \
    \                (\u03BB (x) x)))\n   \"\"))\n</code>\n", "  (string-join\n  \
    \ (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number (string\
    \ x) 2)\n                                   (string->number (string (cdr x)) 2))))\n\
    \    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n", "  (string-join\n\
    \   (map (lambda (x) (number->string (bitwise-xor (string->number (string x) 2)\
    \ (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n   \"\"))\n</code>\n", "  (string-join (map (lambda (x y) (if (equal?\
    \ x y) \"0\" \"1\")) a b)))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (string-join (map (\u03BB (x) (number->string (bitwise-xor (string->number (string\
    \ x) 2) (string->number (string (vector-ref b (vector-index x))) 2)))) (string->list\
    \ a)) \"\"))\n", "  (define (xor-char c1 c2)\n    (cond\n      [(char=? c1 c2)\
    \ \"0\"]\n      [else \"1\"]))\n  (apply string (map (lambda (c1 c2) (xor-char\
    \ c1 c2)) a b)))\n", "  (string-join (map (lambda (x y)\n                    \
    \  (if (equal? x y)\n                          #\\0\n                        \
    \  #\\1))\n                    (string->list a)\n                    (string->list\
    \ b))\n               \"\"))\n", "  (string-join (map (lambda (x y) (if (equal?\
    \ x y) \"0\" \"1\"))\n                   (string->list a)\n                  \
    \ (string->list b))))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n  \
    \      #\\0\n        #\\1))\n  (define (xor-string a b)\n    (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                   (xor-string\
    \ (substring a 1) (substring b 1))))\n  (if (equal? (string-length a) (string-length\
    \ b))\n      (xor-string a b)\n      (error \"Input strings must be of equal length\"\
    )))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (string-join\n   (map (\u03BB (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2)\n                                            (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (string-join (map (lambda (x y) (if (equal? x y) \"\
    0\" \"1\")) a b)))\n", "  (string-join (map (lambda (x y) (if (equal? x y) \"\
    0\" \"1\")) a b)))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2))))\n     \
    \   (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n", " \
    \ (define (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n\
    \  (string-join (map (lambda (x) (xor-char (car x) (cadr x)))\n              \
    \      (zip (string->list a) (string->list b)))))\n", "  (apply string (map (\u03BB\
    \ (x y) (if (equal? x y) #\\0 #\\1)) a b)))\n", "  (string-join\n   (map (\u03BB\
    \ (x) (number->string (xor (string-&gt;number (string-ref a x))\n            \
    \                        (string-&gt;number (string-ref b x)))))\n        (build-list\
    \ (min (string-length a) (string-length b))\n                    (\u03BB (x) x)))\n\
    \   \"\"))\n</code>\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string x) 2)\n                               \
    \    (string->number (string (vector-ref b (vector-index x))) 2))))\n    (vector->list\
    \ a))\n   \"\"))\n", "  (apply string (map (lambda (x y) (if (equal? x y) #\\\
    0 #\\1)) a b)))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string x) 2))))\n        (string-&gt;list\
    \ a))\n   \"\"))\n</code>\n", "  (define (xor-char a b)\n    (if (equal? a b)\
    \ \"0\" \"1\"))\n  (define (xor-chars a b)\n    (if (empty? a) \"\"\n        (string-append\
    \ (xor-char (first a) (first b))\n                       (xor-chars (rest a) (rest\
    \ b)))))\n  (xor-chars a b))\n", "  (define (xor-char a b)\n    (if (equal? a\
    \ b)\n        #\\0\n        #\\1))\n  (string-join\n   (map (lambda (c) (xor-char\
    \ (car c) (cadr c)))\n        (zip (string->list a) (string->list b)))\n   \"\"\
    ))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\n", "  (string-join\n   (map\n\
    \    (lambda (x)\n      (number->string (bitwise-xor (string->number (string x)\
    \ 2)\n                                   (string->number (string (cdr x)) 2))))\n\
    \    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n", "  (string-join\
    \ (map (lambda (x y) (if (eq? x y) #\\0 #\\1)) a b)))\n", "  (string-join (map\
    \ (lambda (x y)\n                      (if (equal? x y) \"0\" \"1\"))\n      \
    \              (string->list a)\n                    (string->list b))))\n", " \
    \ (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (list-ref b (string-index x a))) 2))))\n\
    \        (string-&gt;list a))\n   \"\"))\n</code>\n", "  (string-join\n   (map\n\
    \    (lambda (x)\n      (number->string\n       (bitwise-xor (string->number (string-ref\
    \ x 0))\n                    (string->number (string-ref x 1)))))\n    (string-zip\
    \ a b))\n   \"\"))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string x) 2)\n                               \
    \    (string->number (string (cdr x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list\
    \ b)))))\n</code>\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b)\
    \ \"0\"]\n      [else \"1\"]))\n  (apply string (map xor-char a b)))\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1)\
    \ (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (lambda (a b) (xor-char\
    \ a b)) (string->list a) (string->list b))))\n", "  (string-join (map (lambda\
    \ (x y) (if (equal? x y) \"0\" \"1\"))\n                    (string->list a)\n\
    \                    (string->list b))))\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (define (xor-chars c1 c2)\n    (number->string (logxor\
    \ (string->number (string c1) 2)\n                            (string->number\
    \ (string c2) 2))))\n  (string-join (map xor-chars (string-&gt;list a) (string-&gt;list\
    \ b))))\n</code>\n", "  (string-join (map (lambda (x y) (if (eq? x y) \"0\" \"\
    1\")) a b)))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\\
    0\n        #\\1))\n  (string-join\n   (map (lambda (x) (xor-char (car x) (cadr\
    \ x)))\n        (zip (string->list a) (string->list b)))))\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (apply string (map\
    \ (curry xor-char) a b)))\n", "  (string-join\n   (map\n    (lambda (x)\n    \
    \  (if (= (car x) (cadr x))\n          \"0\"\n          \"1\"))\n    (list->vector\
    \ (map string->number (string-split a \"\")))\n    (list->vector (map string->number\
    \ (string-split b \"\"))))\n   \"\"))\n", "  (string-join (map (lambda (x y) (if\
    \ (eq? x y) #\"0\" #\"1\")) a b)))\n", "  (apply string (map (curry xor) (string->list\
    \ a) (string->list b))))\n", "  (string-join (map (\u03BB (x) (number->string\
    \ (xor (string-&gt;number (string-ref x 0))\n                                \
    \                 (string-&gt;number (string-ref x 1)))))\n                  \
    \  (map list (string-&gt;list a) (string-&gt;list b)))\n               \"\"))\n\
    </code>\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2))))\n     \
    \   (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\nThis is\
    \ the code I wrote. I am not sure if it is the most efficient way to do it. I\
    \ am also not sure if I am using the right functions. I am new to Racket.\n\n\n\
    A:\n\nI think your solution is fine.\nI would probably write it like this:\n<code>(define\
    \ (string-xor a b)\n  (string-join\n   (map (lambda (x) (number-&gt;string (bitwise-xor\
    \ (string-&gt;number (string x) 2)\n                                         \
    \        (string-&gt;number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\nI prefer to use <code>-&gt;</code>\
    \ instead of <code>-&gt;&gt;</code> because it's easier to read.\nI also prefer\
    \ to use <code>-&gt;</code> instead of <code>-&gt;&gt;</code> because it's easier\
    \ to read.\n", "  (string-join (map (lambda (x y) (number->string (bitwise-xor\
    \ (string->number x) (string->number y)))) (string-&gt;list a) (string-&gt;list\
    \ b))))\n</code>\n", "  (string-join (map (\u03BB (x) (number->string (xor (string-&gt;number\
    \ (string-ref x 0))\n                                                (string-&gt;number\
    \ (string-ref x 1)))))\n                    (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n               \"\"))\n</code>\n", "  (define (xor-char a b)\n    (if\
    \ (equal? a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda (x)\
    \ (xor-char (car x) (cadr x)))\n                    (zip (string->list a) (string->list\
    \ b)))))\n", "  (string-join (map (lambda (x y) (string (bitwise-xor (char->integer\
    \ x) (char->integer y))))\n                    (string->list a)\n            \
    \        (string->list b))))\n", "  (define (xor-char a b)\n    (cond\n      [(char=?\
    \ a #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join\
    \ (map (\u03BB (a b) (xor-char a b)) (string->list a) (string->list b))))\n",
  "  (let loop ([a (string->list a)] [b (string->list b)] [result '()])\n    (cond\
    \ [(empty? a) (apply string (reverse result))]\n          [(empty? b) (apply string\
    \ (reverse result))]\n          [else (loop (rest a) (rest b) (cons (if (equal?\
    \ (first a) (first b))\n                                                  #\\\
    0\n                                                  #\\1)\n                 \
    \                             result))])))\n", "  (string-join\n   (map (\u03BB\
    \ (x) (number->string (bitwise-xor (string->number (string x) 2)\n           \
    \                                 (string->number (string (cdr x)) 2))))\n   \
    \     (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n", " \
    \ (string-join\n   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (if (or (string=? a \"\") (string=? b \"\"))\n      \"\"\n      (string-append\
    \ (string (bitwise-xor (string-&gt;number (string-ref a 0))\n                \
    \                          (string-&gt;number (string-ref b 0))))\n          \
    \           (string_xor (substring a 1) (substring b 1)))))\n</code>\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1)\
    \ (if (char=? b #\\0) #\\1 #\\0)]))\n  (apply string (map (lambda (x y) (xor-char\
    \ x y)) a b)))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string-ref x 0))\n                           \
    \        (string->number (string-ref x 1)))))\n    (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n   \"\"))\n</code>\n", "  (apply string (map (\u03BB (x y) (if (eq? x\
    \ y) #\\0 #\\1)) a b)))\n", "  (string-join (map (lambda (x y) (if (equal? x y)\
    \ \"0\" \"1\"))\n                    (string->list a)\n                    (string->list\
    \ b))))\n", "  (string-join\n   (map (\u03BB (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2)\n                                            (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\n\
    \       (bitwise-xor (string->number (string-ref x 0))\n                    (string->number\
    \ (string-ref x 1)))))\n    (string-zip a b))\n   \"\"))\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-map xor-char\
    \ a b))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (define (xor-chars a b)\n    (cond ((and (empty? a) (empty?\
    \ b)) '())\n          ((and (empty? a) (not (empty? b))) (error \"unequal length\"\
    ))\n          ((and (not (empty? a)) (empty? b)) (error \"unequal length\"))\n\
    \          (else (cons (xor-char (car a) (car b)) (xor-chars (cdr a) (cdr b))))))\n\
    \  (list->string (xor-chars (string->list a) (string->list b))))\n", "  (string-join\n\
    \   (map (lambda (x) (number->string (bitwise-xor (string->number (string x) 2)\
    \ (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n   \"\"))\n</code>\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=?\
    \ a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (lambda (a b)\
    \ (xor-char a b)) (string->list a) (string->list b))))\n", "  (string-join\n \
    \  (map (lambda (x) (number->string (bitwise-xor (string->number (string x) 2)\
    \ (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n   \"\"))\n</code>\n", "  (define (xor-char a b)\n    (cond\n      [(char=?\
    \ a #\\0) (if (char=? b #\\0) #\\0 #\\1)]\n      [(char=? a #\\1) (if (char=?\
    \ b #\\1) #\\0 #\\1)]))\n  (define (xor-string a b)\n    (if (string=? a \"\"\
    )\n        \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (define (xor a b)\n    (cond\n      [(and (eq? a 0)\
    \ (eq? b 0)) 0]\n      [(and (eq? a 1) (eq? b 1)) 0]\n      [else 1]))\n  (define\
    \ (xor-string a b)\n    (if (or (null? a) (null? b))\n        \"\"\n        (string\
    \ (xor (string-&gt;number (string-ref a 0))\n                     (string-&gt;number\
    \ (string-ref b 0)))\n                (xor-string (substring a 1) (substring b\
    \ 1)))))\n  (xor-string a b))\n</code>\n", "  (string-join (map (lambda (x y)\
    \ (if (eq? x y) \"0\" \"1\")) a b)))\n", "  (define (xor-char a b)\n    (cond\
    \ ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\\
    1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string a b)\n\
    \    (cond ((and (string=? a \"\") (string=? b \"\")) \"\")\n          (else (string\
    \ (xor-char (string-ref a 0) (string-ref b 0))\n                       (xor-string\
    \ (substring a 1) (substring b 1))))))\n  (xor-string a b))\n", "  (define (xor-char\
    \ a b)\n    (if (char=? a b) #\\0 #\\1))\n  (string-map xor-char a b))\n", " \
    \ (define (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n\
    \  (define (xor-string a b)\n    (if (string=? a \"\")\n        \"\"\n       \
    \ (string-append (list (xor-char (string-ref a 0) (string-ref b 0)))\n       \
    \                (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2))))\n     \
    \   (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n", " \
    \ (apply string (map (\u03BB (x y) (if (equal? x y) #\\0 #\\1)) a b)))\n", " \
    \ (string-join\n   (map\n    (\u03BB (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n",
  "  (string-join (map (lambda (x y) (if (equal? x y) \"0\" \"1\"))\n            \
    \        (string->list a)\n                    (string->list b))))\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1)\
    \ (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (curry xor-char) (string->list\
    \ a) (string->list b))))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\n", "  (define (xor-char a b)\n\
    \    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=?\
    \ a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (if (or (string-null? a) (string-null? b))\n        \"\"\n       \
    \ (string-append (list (xor-char (string-ref a 0) (string-ref b 0)))\n       \
    \                (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n\
    \      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (define (xor-string\
    \ a b)\n    (if (string=? a \"\")\n        \"\"\n        (string-append (list\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (string-join\n\
    \   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n",
  "  (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=?\
    \ a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (lambda (a b)\
    \ (xor-char a b)) (string->list a) (string->list b))))\n", "  (string-join (map\
    \ (\u03BB (x) (number->string (xor (string-&gt;number (string-ref x 0))\n    \
    \                                             (string-&gt;number (string-ref x\
    \ 1)))))\n                    (map list (string-&gt;list a) (string-&gt;list b)))\n\
    \               \"\"))\n</code>\n", "  (string-join (map (lambda (x y) (if (equal?\
    \ x y) \"0\" \"1\"))\n                    (string->list a)\n                 \
    \   (string->list b))))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (string-join\n   (map (\u03BB (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                            (string->number (string\
    \ (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\
    \"))\n</code>\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (define (xor-string a b)\n    (if (string=? a \"\")\n\
    \        \"\"\n        (string-append (list (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (define (xor-char a b)\n    (cond\n      [(char=?\
    \ a #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (define\
    \ (xor-string a b)\n    (string-append (list (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                   (xor-string (substring a 1) (substring b 1))))\n\
    \  (cond\n    [(string=? a \"\") b]\n    [(string=? b \"\") a]\n    [else (xor-string\
    \ a b)]))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string x) 2)\n                               \
    \    (string->number (string (cdr x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list\
    \ b)))))\n</code>\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string x) 2)\n                               \
    \    (string->number (string (cdr x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list\
    \ b)))\n   \"\"))\n</code>\n", "  (define (xor-char a b)\n    (if (char=? a b)\n\
    \        #\\0\n        #\\1))\n  (string-map xor-char a b))\n", "  (string-join\n\
    \   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n",
  "  (define (xor-char c1 c2)\n    (if (char=? c1 c2)\n        #\\0\n        #\\1))\n\
    \  (define (xor-chars s1 s2)\n    (if (string-empty? s1)\n        \"\"\n     \
    \   (string-append (string (xor-char (string-ref s1 0) (string-ref s2 0)))\n \
    \                      (xor-chars (string-drop s1 1) (string-drop s2 1)))))\n\
    \  (xor-chars a b))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2))))\n     \
    \   (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n", " \
    \ (define (xor-char a b)\n    (if (equal? a b) \"0\" \"1\"))\n  (string-join (map\
    \ (lambda (x) (xor-char (car x) (cadr x))) (zip (string->list a) (string->list\
    \ b)))))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (xor (string-&gt;number (string-ref a x))\n                           (string-&gt;number\
    \ (string-ref b x)))))\n    (build-list (max (string-length a) (string-length\
    \ b))\n                (lambda (x) x)))\n   \"\"))\n</code>\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-join\n \
    \  (map (lambda (x) (xor-char (car x) (cadr x)))\n        (zip (string->list a)\
    \ (string->list b)))))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string-ref x 0))\n                           \
    \        (string->number (string-ref x 1)))))\n    (map (lambda (x) (string x))\
    \ (string-zip a b)))\n   \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0))\n                           (string-&gt;number (string-ref\
    \ b 0))))\n      (string_xor (substring a 1) (substring b 1)))]))\n</code>\n",
  "  (string-join\n   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n",
  "  (string-join (map (lambda (x y)\n                      (if (equal? x y)\n   \
    \                       #\\0\n                          #\\1))\n             \
    \       (string->list a)\n                    (string->list b))\n            \
    \   \"\"))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"\
    ]\n      [else \"1\"]))\n  (define (xor-string a b)\n    (cond\n      [(string=?\
    \ a \"\") b]\n      [(string=? b \"\") a]\n      [else (string-append (xor-char\
    \ (string-ref a 0) (string-ref b 0))\n                           (xor-string (substring\
    \ a 1) (substring b 1)))]))\n  (xor-string a b))\n", "  (apply string (map (lambda\
    \ (x y) (xor x y)) (string->list a) (string->list b))))\n", "  (apply string (map\
    \ (lambda (x y) (if (equal? x y) #\\0 #\\1)) a b)))\n", "  (define (xor-char a\
    \ b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1) (if (char=?\
    \ b #\\0) #\\1 #\\0)]))\n  (define (xor-string a b)\n    (string-append (list\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                   (xor-string\
    \ (substring a 1) (substring b 1))))\n  (if (string=? a \"\")\n      \"\"\n  \
    \    (xor-string a b)))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"]\n      [else \"\
    1\"]))\n  (string-join\n   (map (\u03BB (x) (xor-char (string-ref a (car x)) (string-ref\
    \ b (car x))))\n        (enumerate (string-length a)))\n   \"\"))\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-join\
    \ (map (lambda (x) (xor-char (car x) (cadr x)))\n                    (zip (string->list\
    \ a) (string->list b)))))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=?\
    \ a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (apply string (map (\u03BB (a b)\
    \ (xor-char a b)) (string->list a) (string->list b))))\n", "  (string-join (map\
    \ (lambda (x y)\n                      (if (equal? x y) \"0\" \"1\"))\n      \
    \              (string->list a)\n                    (string->list b))))\n", " \
    \ (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=?\
    \ a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (define (xor-string a b)\n    (cond\n\
    \      [(empty? a) b]\n      [(empty? b) a]\n      [else (cons (xor-char (car\
    \ a) (car b))\n                  (xor-string (cdr a) (cdr b)))]))\n  (xor-string\
    \ (string->list a) (string->list b)))\n", "  (string-join (map (lambda (x y) (if\
    \ (equal? x y) \"0\" \"1\")) a b)))\n", "  (define (xor-char a b)\n    (cond ((and\
    \ (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=?\
    \ b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string a b)\n    (cond\
    \ ((and (string=? a \"\") (string=? b \"\")) \"\")\n          (else (string-append\
    \ (list (xor-char (string-ref a 0) (string-ref b 0)))\n                      \
    \         (xor-string (substring a 1) (substring b 1))))))\n  (xor-string a b))\n",
  "  (string-join\n   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string x) 2)\n                                   (string->number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))))\n</code>\n",
  "  (apply string (map (\u03BB (x y) (xor x y)) (string->list a) (string->list b))))\n",
  "  (string-join (map (lambda (x y) (if (equal? x y) \"0\" \"1\")) a b)))\n", " \
    \ (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (define (xor-char a b)\n    (if (char=? a b)\n    \
    \    #\\0\n        #\\1))\n  (string-join (map (lambda (x) (xor-char (car x) (cadr\
    \ x)))\n                    (zip (string->list a) (string->list b)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
