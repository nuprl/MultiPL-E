name: HumanEval_94_skjkasdkd
language: rkt
prompt: "#lang racket\n\n#| You are given a list of integers.\nYou need to find the\
  \ largest prime value and return the sum of its digits.\nExamples:\n>>> (skjkasdkd\
  \ (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n10\n>>> (skjkasdkd\
  \ (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))\n25\n>>> (skjkasdkd (list 1 3\
  \ 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))\n13\n>>> (skjkasdkd (list 0 724\
  \ 32 71 99 32 6 0 5 91 83 0 5 6))\n11\n>>> (skjkasdkd (list 0 81 12 3 1 21))\n3\n\
  >>> (skjkasdkd (list 0 8 1 2 1 7))\n7|#\n(define (skjkasdkd lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n\
  \    (check-equal? (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324\
  \ 4 3)) 10)\n    (check-equal? (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2\
  \ 4 2 5 1)) 25)\n    (check-equal? (candidate (list 1 3 1 32 5107 34 83278 109 163\
  \ 23 2323 32 30 1 9 3)) 13)\n    (check-equal? (candidate (list 0 724 32 71 99 32\
  \ 6 0 5 91 83 0 5 6)) 11)\n    (check-equal? (candidate (list 0 81 12 3 1 21)) 3)\n\
  \    (check-equal? (candidate (list 0 8 1 2 1 7)) 7)\n    (check-equal? (candidate\
  \ (list 8191)) 19)\n    (check-equal? (candidate (list 8191 123456 127 7)) 19)\n\
  \    (check-equal? (candidate (list 127 97 8192)) 10)\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter\
    \ lst acc)\n      (cond ((null? lst) acc)\n            ((is-prime? (car lst))\
    \ (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n   \
    \ (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero?\
    \ (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(zero? n) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime?\
    \ (car lst)) (iter (cdr lst) (sum-digits (car lst)))]\n      [else (iter (cdr\
    \ lst) acc)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (prime?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (prime? n (- i 1))]))\n    (prime? n (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (sum-digits-helper n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (sum-digits-helper (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (sum-digits-helper n 0))\n  (define (largest-prime lst)\n    (cond\n    \
    \  [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n     \
    \ [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime?\
    \ n)\n    (cond\n      [(zero? n) #f]\n      [(zero? (modulo n 2)) #f]\n     \
    \ [else\n       (define (iter i)\n         (cond\n           [(> (* i i) n) #t]\n\
    \           [(zero? (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n  \
    \     (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n  \
    \      [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n\
    \ 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null?\
    \ lst) acc]\n      [(is-prime? (car lst)) (iter (cdr lst) (car lst))]\n      [else\
    \ (iter (cdr lst) acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n sum)\n      (cond\n        [(= n 0) sum]\n        [else\
    \ (iter (quotient n 10) (+ sum (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (iter lst max)\n    (cond\n      [(empty? lst) (sum-digits max)]\n      [(and\
    \ (is-prime (first lst)) (> (first lst) max)) (iter (rest lst) (first lst))]\n\
    \      [else (iter (rest lst) max)]))\n  (iter lst 0))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (/ n 2)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime\
    \ (car lst))\n                (> (sum-digits (car lst)) (sum-digits acc)))\n \
    \          (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(> i (sqrt n)) #t]\n           [(zero?\
    \ (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (iter lst max)\n    (cond\n\
    \      [(null? lst) (sum-digits max)]\n      [(and (is-prime? (car lst)) (> (car\
    \ lst) max)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) max)]))\n\
    \  (iter lst 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n```\n\n## \u0417\u0430\u0434\u0430\u0447\u0430 3\n\n\u0414\u0430 \u0441\
    \u0435 \u0434\u0435\u0444\u0438\u043D\u0438\u0440\u0430 \u0444\u0443\u043D\u043A\
    \u0446\u0438\u044F `(skjkasdkd lst)`, \u043A\u043E\u044F\u0442\u043E \u043F\u043E\
    \ \u0434\u0430\u0434\u0435\u043D \u0441\u043F\u0438\u0441\u044A\u043A \u043E\u0442\
    \ \u0446\u0435\u043B\u0438 \u0447\u0438\u0441\u043B\u0430 `lst` \u043D\u0430\u043C\
    \u0438\u0440\u0430 \u043D\u0430\u0439-\u0433\u043E\u043B\u044F\u043C\u043E\u0442\
    \u043E \u043F\u0440\u043E\u0441\u0442\u043E \u0447\u0438\u0441\u043B\u043E \u0432\
    \ \u0441\u043F\u0438\u0441\u044A\u043A\u0430 \u0438 \u0432\u0440\u044A\u0449\u0430\
    \ \u0441\u0443\u043C\u0430\u0442\u0430 \u043D\u0430 \u0446\u0438\u0444\u0440\u0438\
    \u0442\u0435 \u043C\u0443.\n\n\u041F\u0440\u0438\u043C\u0435\u0440\u0438:\n\n\
    ```racket", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((&gt;\
    \ i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (cond ((&lt; n 10)\
    \ n)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((is-prime\
    \ (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) max))))\n\
    \  (iter lst 0))\n</code>\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define\
    \ (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter (quotient\
    \ n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n\
    \    (cond\n      [(null? lst) acc]\n      [(is-prime (car lst)) (iter (cdr lst)\
    \ (sum-digits (car lst)))]\n      [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((=\
    \ n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((and (is-prime? (car lst))\n                (> (car lst) acc))\n     \
    \      (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime?\
    \ (car lst)) (iter (cdr lst) (sum-digits (car lst)))]\n      [else (iter (cdr\
    \ lst) acc)]))\n  (iter lst 0))\n", "  (define (sum-digits n)\n    (cond\n   \
    \   [(zero? n) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (is-prime? n)\n    (cond\n      [(zero? n) #f]\n      [(= n 1) #f]\n\
    \      [(= n 2) #t]\n      [(= (modulo n 2) 0) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(> i (quotient n 2)) #t]\n           [(=\
    \ (modulo n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (define (find-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime?\
    \ (car lst)) (car lst)]\n      [else (find-prime (cdr lst))]))\n  (sum-digits\
    \ (find-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (find-largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (find-largest-prime (cdr lst)))))\n \
    \ (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime? n)\n    (cond\
    \ ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n\
    \           (let loop ((i 3))\n             (cond ((= i n) #t)\n             \
    \      ((= (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n\
    \ 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n    \
    \    [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (find-max-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (max (car lst) (find-max-prime (cdr lst)))]\n\
    \      [else (find-max-prime (cdr lst))]))\n  (sum-digits (find-max-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n        \
    \  ((and (is-prime (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter s n)\n      (cond\n        [(= n 0) s]\n \
    \       [else (iter (+ s (modulo n 10)) (/ n 10))]))\n    (iter 0 n))\n  (define\
    \ (iter lst max)\n    (cond\n      [(null? lst) (sum-digits max)]\n      [(and\
    \ (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst))]\n     \
    \ [else (iter (cdr lst) max)]))\n  (iter lst 0))\n```\n\n### \u0417\u0430\u0434\
    \u0430\u0447\u0430 2\n\n\u0414\u0430 \u0441\u0435 \u0434\u0435\u0444\u0438\u043D\
    \u0438\u0440\u0430 \u0444\u0443\u043D\u043A\u0446\u0438\u044F `(skjkasdkd lst)`,\
    \ \u043A\u043E\u044F\u0442\u043E \u043F\u0440\u0438\u0435\u043C\u0430 \u0441\u043F\
    \u0438\u0441\u044A\u043A \u043E\u0442 \u0446\u0435\u043B\u0438 \u0447\u0438\u0441\
    \u043B\u0430 \u0438 \u0432\u0440\u044A\u0449\u0430 \u043A\u0430\u0442\u043E \u0440\
    \u0435\u0437\u0443\u043B\u0442\u0430\u0442 \u0441\u043F\u0438\u0441\u044A\u043A\
    \ \u043E\u0442 \u0446\u0435\u043B\u0438 \u0447\u0438\u0441\u043B\u0430, \u043A\
    \u043E\u0438\u0442\u043E \u0441\u0435 \u0441\u0440\u0435\u0449\u0430\u0442 \u0432\
    \ \u0434\u0430\u0434\u0435\u043D\u0438\u044F \u0441\u043F\u0438\u0441\u044A\u043A\
    \ \u043F\u043E\u043D\u0435 \u0434\u0432\u0430 \u043F\u044A\u0442\u0438.\n\n\u041F\
    \u0440\u0438\u043C\u0435\u0440\u0438:\n\n```racket", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i)\
    \ 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n sum)\n      (if (= n 0) sum\n          (iter (quotient\
    \ n 10) (+ sum (remainder n 10)))))\n    (iter n 0))\n  (define (iter lst max)\n\
    \    (if (null? lst) (sum-digits max)\n        (if (and (is-prime? (car lst))\
    \ (> (car lst) max))\n            (iter (cdr lst) (car lst))\n            (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n  \
    \    [else\n       (define (iter i)\n         (cond\n           [(= i n) #t]\n\
    \           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n \
    \      (iter 3)]))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n \
    \     [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (iter\
    \ lst max)\n    (cond\n      [(null? lst) (sum-digits max)]\n      [(is-prime?\
    \ (car lst)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) max)]))\n\
    \  (iter lst 0))\n```\n\n## \u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u043F\
    \u0438\u0441\u044A\u043A \u043E\u0442 \u043F\u0440\u043E\u0441\u0442\u0438 \u0447\
    \u0438\u0441\u043B\u0430\n\n\u041D\u0430\u043F\u0438\u0448\u0435\u0442\u0435 \u0444\
    \u0443\u043D\u043A\u0446\u0438\u044F `(primes-list n)`, \u043A\u043E\u044F\u0442\
    \u043E \u0432\u0440\u044A\u0449\u0430 \u0441\u043F\u0438\u0441\u044A\u043A \u043E\
    \u0442 \u0432\u0441\u0438\u0447\u043A\u0438 \u043F\u0440\u043E\u0441\u0442\u0438\
    \ \u0447\u0438\u0441\u043B\u0430 \u0432 \u0438\u043D\u0442\u0435\u0440\u0432\u0430\
    \u043B\u0430 `[1, n]`.\n\n\u041F\u0440\u0438\u043C\u0435\u0440\u0438:\n\n```racket",
  "  (define (is-prime n)\n    (define (helper i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper\
    \ 2))\n  (define (sum-digits n)\n    (define (helper n acc)\n      (cond\n   \
    \     [(= n 0) acc]\n        [else (helper (quotient n 10) (+ acc (remainder n\
    \ 10)))]))\n    (helper n 0))\n  (define (helper lst acc)\n    (cond\n      [(null?\
    \ lst) acc]\n      [(is-prime (car lst)) (helper (cdr lst) (car lst))]\n     \
    \ [else (helper (cdr lst) acc)]))\n  (sum-digits (helper lst 0)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((and\
    \ (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n      \
    \    (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define\
    \ (prime? n)\n    (define (prime-helper n i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (prime-helper n (- i 1))]))\n\
    \    (prime-helper n (- n 1)))\n  (define (sum-digits n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (max (car lst)\
    \ (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime (car lst)) (iter\
    \ (cdr lst) (sum-digits (car lst))))\n          (else (iter (cdr lst) acc))))\n\
    \  (iter lst 0))\n```\n\n## \u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u0443\
    \u043C\u0430 \u043D\u0430 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438\u0442\
    \u0435 \u043D\u0430 \u043C\u0430\u0442\u0440\u0438\u0446\u0430\n\n\u0414\u0430\
    \ \u0441\u0435 \u0434\u0435\u0444\u0438\u043D\u0438\u0440\u0430 \u0444\u0443\u043D\
    \u043A\u0446\u0438\u044F `(sum-matrix m)`, \u043A\u043E\u044F\u0442\u043E \u043F\
    \u0440\u0438\u0435\u043C\u0430 \u043A\u0430\u0442\u043E \u0430\u0440\u0433\u0443\
    \u043C\u0435\u043D\u0442 \u043C\u0430\u0442\u0440\u0438\u0446\u0430 `m` \u0438\
    \ \u0432\u0440\u044A\u0449\u0430 \u0441\u0443\u043C\u0430\u0442\u0430 \u043D\u0430\
    \ \u0432\u0441\u0438\u0447\u043A\u0438 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\
    \u0438 \u0432 \u043D\u0435\u044F.\n\n\u041F\u0440\u0438\u043C\u0435\u0440\u0438\
    :\n\n```racket", "  (define (isprime n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (find-max lst)\n    (define (iter lst\
    \ max)\n      (cond ((null? lst) max)\n            ((> (car lst) max) (iter (cdr\
    \ lst) (car lst)))\n            (else (iter (cdr lst) max))))\n    (iter lst 0))\n\
    \  (define (find-prime lst)\n    (define (iter lst)\n      (cond ((null? lst)\
    \ #f)\n            ((isprime (car lst)) (car lst))\n            (else (iter (cdr\
    \ lst)))))\n    (iter lst))\n  (sum-digits (find-prime (list->vector (list->set\
    \ lst)))))", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n\
    \          (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond\n        [(= d 1) #t]\n \
    \       [(= (modulo n d) 0) #f]\n        [else (is-prime-helper n (- d 1))]))\n\
    \    (is-prime-helper n (floor (/ n 2))))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n \
    \ (define (helper lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car\
    \ lst)) (max (sum-digits (car lst)) (helper (cdr lst)))]\n      [else (helper\
    \ (cdr lst))]))\n  (helper lst))\n", "  (define (sum-digits n)\n    (if (&lt;\
    \ n 10)\n        n\n        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n\
    \  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (quotient\
    \ n 2)) #t)\n            ((zero? (modulo n i)) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n</code>\n", "  (define (is-prime\
    \ n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter\
    \ n (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n     \
    \     (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i\
    \ 1)))))\n    (is-prime-iter n (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define\
    \ (max-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (max-prime (cdr lst)))\n          (else (max (car lst) (max-prime (cdr lst))))))\n\
    \  (sum-digits (max-prime lst)))\n", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((and (is-prime\
    \ (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (+ acc (sum-digits (car lst)))))\n          (else (iter (cdr lst)\
    \ acc))))\n  (iter lst 0))\n```\n\n### \u0417\u0430\u0434\u0430\u0447\u0430 3\n\
    \n\u0414\u0430 \u0441\u0435 \u0434\u0435\u0444\u0438\u043D\u0438\u0440\u0430 \u0444\
    \u0443\u043D\u043A\u0446\u0438\u044F `(sum-digits n)`, \u043A\u043E\u044F\u0442\
    \u043E \u043D\u0430\u043C\u0438\u0440\u0430 \u0441\u0443\u043C\u0430\u0442\u0430\
    \ \u043D\u0430 \u0446\u0438\u0444\u0440\u0438\u0442\u0435 \u043D\u0430 \u0435\u0441\
    \u0442\u0435\u0441\u0442\u0432\u0435\u043D\u043E\u0442\u043E \u0447\u0438\u0441\
    \u043B\u043E `n`.\n\n```racket\n#lang racket\n", "  (define (is-prime n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime (car lst))\n\
    \                (> (sum-digits (car lst)) (sum-digits acc)))\n           (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n  (sum-digits\
    \ (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc\
    \ (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(and (is-prime? (first lst)) (> (first lst)\
    \ acc)) (iter (rest lst) (first lst))]\n      [else (iter (rest lst) acc)]))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define\
    \ (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient n\
    \ 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((and (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n\
    \          (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime\
    \ n)\n    (define (is-prime-iter n i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (is-prime-iter n (- i 1))]))\n  \
    \  (is-prime-iter n (- n 1)))\n  (define (sum-digits n)\n    (define (sum-digits-iter\
    \ n acc)\n      (cond\n        [(= n 0) acc]\n        [else (sum-digits-iter (quotient\
    \ n 10) (+ acc (remainder n 10)))]))\n    (sum-digits-iter n 0))\n  (define (find-max-prime\
    \ lst)\n    (define (find-max-prime-iter lst max)\n      (cond\n        [(null?\
    \ lst) max]\n        [(and (is-prime (car lst)) (> (car lst) max)) (find-max-prime-iter\
    \ (cdr lst) (car lst))]\n        [else (find-max-prime-iter (cdr lst) max)]))\n\
    \    (find-max-prime-iter lst 0))\n  (sum-digits (find-max-prime lst)))\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (prime-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (prime-digits (quotient n 10))))))\n  (define (iter lst max)\n    (cond\
    \ ((null? lst) max)\n          ((and (is-prime (car lst))\n                (>\
    \ (prime-digits (car lst)) (prime-digits max)))\n           (iter (cdr lst) (car\
    \ lst)))\n          (else (iter (cdr lst) max))))\n  (prime-digits (iter lst 0)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (iter lst max)\n    (cond\n\
    \      [(null? lst) (sum-digits max)]\n      [(and (is-prime? (car lst)) (> (car\
    \ lst) max)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) max)]))\n\
    \  (iter lst 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (-\
    \ i 1))]))\n    (iter (- n 1)))\n  (define (prime-list lst)\n    (cond\n     \
    \ [(null? lst) '()]\n      [(is-prime (car lst)) (cons (car lst) (prime-list (cdr\
    \ lst)))]\n      [else (prime-list (cdr lst))]))\n  (define (sum-digits n)\n \
    \   (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n\
    \  (sum-digits (apply max (prime-list lst))))\n", "  (define (is-prime? n)\n \
    \   (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (iter n s)\n      (cond ((= n 0) s)\n            (else (iter\
    \ (quotient n 10) (+ s (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((and (is-prime?\
    \ (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (prime? n)\n    (define (helper\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (sum-digits n)\n\
    \    (define (helper n acc)\n      (cond\n        [(= n 0) acc]\n        [else\
    \ (helper (quotient n 10) (+ acc (remainder n 10)))]))\n    (helper n 0))\n  (define\
    \ (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(prime? (car lst))\
    \ (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr\
    \ lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder\
    \ n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (if (= n 0)\n     \
    \     acc\n          (iter (quotient n 10) (+ acc (remainder n 10)))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n      (if\
    \ (null? lst)\n          acc\n          (if (is-prime? (car lst))\n          \
    \    (iter (cdr lst) (car lst))\n              (iter (cdr lst) acc))))\n    (iter\
    \ lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else\
    \ (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(and (is-prime? (car\
    \ lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr\
    \ lst) acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n  \
    \  (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (find-largest-prime lst)\n    (cond ((null? lst) 0)\n\
    \          ((is-prime? (car lst)) (max (car lst) (find-largest-prime (cdr lst))))\n\
    \          (else (find-largest-prime (cdr lst)))))\n  (define (sum-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n\
    \  (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(null? lst) acc]\n \
    \       [(and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n\
    \        [else (iter (cdr lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc\
    \ (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n\
    \      [(null? lst) acc]\n      [(is-prime? (car lst)) (iter (cdr lst) (sum-digits\
    \ (car lst)))]\n      [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n```\n\n\
    ## [\u0417\u0430\u0434\u0430\u0447\u0430 \u043F\u0440\u043E \u043F\u0440\u043E\
    \u0441\u0442\u044B\u0435 \u0447\u0438\u0441\u043B\u0430](https://www.e-olymp.com/ru/problems/898)\n\
    \n\u0414\u0430\u043D\u043E \u043D\u0430\u0442\u0443\u0440\u0430\u043B\u044C\u043D\
    \u043E\u0435 \u0447\u0438\u0441\u043B\u043E n. \u041D\u0430\u0439\u0434\u0438\u0442\
    \u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u043F\u0440\
    \u043E\u0441\u0442\u044B\u0445 \u0447\u0438\u0441\u0435\u043B \u043E\u0442 1 \u0434\
    \u043E n.\n\n\u0412\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\
    \u044B\u0435\n\n\u0412\u0445\u043E\u0434\u043D\u043E\u0439 \u0444\u0430\u0439\u043B\
    \ INPUT.TXT \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442 \u043D\u0430\u0442\
    \u0443\u0440\u0430\u043B\u044C\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E\
    \ n (n \u2264 10000).\n\n\u0412\u044B\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\
    \u0430\u043D\u043D\u044B\u0435\n\n\u0412 \u0432\u044B\u0445\u043E\u0434\u043D\u043E\
    \u0439 \u0444\u0430\u0439\u043B OUTPUT.TXT \u0432\u044B\u0432\u0435\u0434\u0438\
    \u0442\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u043F\
    \u0440\u043E\u0441\u0442\u044B\u0445 \u0447\u0438\u0441\u0435\u043B \u043E\u0442\
    \ 1 \u0434\u043E n.\n\n```racket\n#", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient\
    \ n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n\
    \    (cond ((null? lst) acc)\n          ((and (is-prime (car lst)) (> (car lst)\
    \ acc)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime? (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst)\
    \ acc))))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define\
    \ (helper i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n\
    \            (else (helper (- i 1)))))\n    (helper (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (helper lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (helper (cdr lst))))\n          (else (helper (cdr\
    \ lst)))))\n  (sum-digits (helper lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime? (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst)\
    \ acc))))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime?-iter n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (is-prime?-iter n (- i 1))]))\n    (is-prime?-iter\
    \ n (quotient n 2)))\n  (define (sum-digits n)\n    (define (sum-digits-iter n\
    \ acc)\n      (cond\n        [(= n 0) acc]\n        [else (sum-digits-iter (quotient\
    \ n 10) (+ acc (remainder n 10)))]))\n    (sum-digits-iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (largest-prime-iter lst acc)\n      (cond\n        [(null?\
    \ lst) acc]\n        [(and (is-prime? (car lst)) (> (car lst) acc)) (largest-prime-iter\
    \ (cdr lst) (car lst))]\n        [else (largest-prime-iter (cdr lst) acc)]))\n\
    \    (largest-prime-iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n\
    \ 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n    \
    \    [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (largest-prime-value lst)\n    (define (iter lst acc)\n\
    \      (cond\n        [(null? lst) acc]\n        [(and (is-prime? (car lst)) (>\
    \ (car lst) acc)) (iter (cdr lst) (car lst))]\n        [else (iter (cdr lst) acc)]))\n\
    \    (iter lst 0))\n  (sum-digits (largest-prime-value lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter s n)\n      (cond ((= n 0) s)\n          \
    \  (else (iter (+ s (modulo n 10)) (/ n 10)))))\n    (iter 0 n))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((=\
    \ n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter s n)\n      (cond ((=\
    \ n 0) s)\n            (else (iter (+ s (modulo n 10)) (/ n 10)))))\n    (iter\
    \ 0 n))\n  (define (iter lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (sum-digits (car lst)))\n          (else (iter (cdr lst)))))\n  (iter\
    \ lst))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (cond\n      [(= n\
    \ 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (iter lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime (car lst)) (max\
    \ (sum-digits (car lst)) (iter (cdr lst)))]\n      [else (iter (cdr lst))]))\n\
    \  (iter lst))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((&gt; i (/ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter\
    \ n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+\
    \ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n\
    \    (define (iter lst acc)\n      (cond ((null? lst) acc)\n            ((is-prime\
    \ (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n\
    \    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n</code>\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (find-largest-prime lst)\n    (define (iter lst acc)\n    \
    \  (cond ((null? lst) acc)\n            ((is-prime (car lst)) (iter (cdr lst)\
    \ (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (find-largest-prime lst)))\n", "  (define (sum-digits n)\n    (if\
    \ (= n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n\
    \  (define (is-prime? n)\n    (define (helper i)\n      (if (= i n)\n        \
    \  #t\n          (if (= (modulo n i) 0)\n              #f\n              (helper\
    \ (+ i 1)))))\n    (if (= n 1)\n        #f\n        (helper 2)))\n  (define (largest-prime\
    \ lst)\n    (define (helper lst)\n      (if (null? lst)\n          0\n       \
    \   (if (is-prime? (car lst))\n              (car lst)\n              (helper\
    \ (cdr lst)))))\n    (helper lst))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (remainder\
    \ n 10)\n           (sum-digits (quotient n 10)))))\n  (define (is-prime? n)\n\
    \    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder\
    \ n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst)\n           0)\n      \
    \    ((is-prime? (car lst))\n           (if (> (car lst) (largest-prime (cdr lst)))\n\
    \               (car lst)\n               (largest-prime (cdr lst))))\n      \
    \    (else\n           (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n      \
    \    (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (iter\
    \ lst largest)\n    (cond ((null? lst) (sum-digits largest))\n          ((and\
    \ (is-prime? (car lst)) (> (car lst) largest))\n           (iter (cdr lst) (car\
    \ lst)))\n          (else (iter (cdr lst) largest))))\n  (iter lst 0))\n", " \
    \ (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n \
    \     [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n \
    \          [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (iter lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car\
    \ lst)) (max (sum-digits (car lst)) (iter (cdr lst)))]\n      [else (iter (cdr\
    \ lst))]))\n  (iter lst))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper? n (- i 1))]))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (/ n 10)))]))\n  (define (max-prime lst)\n    (cond\n    \
    \  [(null? lst) 0]\n      [(and (is-prime? (car lst)) (> (car lst) (max-prime\
    \ (cdr lst)))) (car lst)]\n      [else (max-prime (cdr lst))]))\n  (sum-digits\
    \ (max-prime lst)))\n", "  (define (is-prime? n)\n    (define (prime? n i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n  (define (sum-digits n)\n \
    \   (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n  \
    \    (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\n    \
    \  [(zero? n) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime?\
    \ (car lst)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) acc)]))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n \
    \       [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (define (iter s n)\n      (cond\n        [(zero? n) s]\n        [else (iter\
    \ (+ s (modulo n 10)) (/ n 10))]))\n    (iter 0 n))\n  (define (iter lst max)\n\
    \    (cond\n      [(null? lst) (sum-digits max)]\n      [(and (is-prime? (car\
    \ lst)) (> (car lst) max)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr\
    \ lst) max)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (/ n 2)))\n  (define (sum-digits n)\n\
    \    (define (iter n s)\n      (cond\n        [(= n 0) s]\n        [else (iter\
    \ (quotient n 10) (+ s (remainder n 10)))]))\n    (iter n 0))\n  (define (iter\
    \ lst max)\n    (cond\n      [(null? lst) (sum-digits max)]\n      [(and (is-prime?\
    \ (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst))]\n      [else (iter\
    \ (cdr lst) max)]))\n  (iter lst 0))\n", "  (define (is-prime n)\n    (cond ((=\
    \ n 2) #t)\n          ((= n 3) #t)\n          ((= n 5) #t)\n          ((= n 7)\
    \ #t)\n          ((= n 11) #t)\n          ((= n 13) #t)\n          ((= n 17) #t)\n\
    \          ((= n 19) #t)\n          ((= n 23) #t)\n          ((= n 29) #t)\n \
    \         ((= n 31) #t)\n          ((= n 37) #t)\n          ((= n 41) #t)\n  \
    \        ((= n 43) #t)\n          ((= n 47) #t)\n          ((= n 53) #t)\n   \
    \       ((= n 59) #t)\n          ((= n 61) #t)\n          ((= n 67) #t)\n    \
    \      ((= n 71) #t)\n          ((= n 73) #t)\n          ((= n 79) #t)\n     \
    \     ((= n 83) #t)\n          ((= n 89) #t)\n          ((= n 97) #t)\n      \
    \    (else #f)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1)\
    \ #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n  \
    \  (helper (- n 1)))\n  (define (sum-digits n)\n    (define (helper n acc)\n \
    \     (cond\n        [(= n 0) acc]\n        [else (helper (quotient n 10) (+ acc\
    \ (remainder n 10)))]))\n    (helper n 0))\n  (define (helper lst acc)\n    (cond\n\
    \      [(null? lst) acc]\n      [(is-prime? (car lst)) (helper (cdr lst) (car\
    \ lst))]\n      [else (helper (cdr lst) acc)]))\n  (sum-digits (helper lst 0)))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i n)\
    \ #t]\n        [(= (remainder n i) 0) #f]\n        [else (helper (+ i 1))]))\n\
    \    (helper 2))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n   \
    \   [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (helper\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (sum-digits\
    \ (car lst)) (helper (cdr lst)))]\n      [else (helper (cdr lst))]))\n  (helper\
    \ lst))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((&gt;\
    \ i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((&lt; n 10) (+ acc n))\n            (else (iter (quotient n 10)\
    \ (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n     \
    \     (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n\
    </code>\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter s n)\n  \
    \    (cond ((= n 0) s)\n            (else (iter (+ s (remainder n 10)) (/ n 10)))))\n\
    \    (iter 0 n))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n  \
    \  (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder n 2) 0)\
    \ #f)\n          (else\n           (let loop ((i 3))\n             (cond ((&gt;\
    \ (* i i) n) #t)\n                   ((= (remainder n i) 0) #f)\n            \
    \       (else (loop (+ i 2))))))))\n  (define (sum-digits n)\n    (cond ((&lt;\
    \ n 10) n)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n</code>\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst max)\n    (cond\n      [(null? lst) (sum-digits max)]\n\
    \      [(and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst))]\n\
    \      [else (iter (cdr lst) max)]))\n  (iter lst 0))\n```\n\n## \u0417\u0430\u0434\
    \u0430\u0447\u0430 3\n\n```racket\n#lang racket\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (find-largest-prime lst)\n    (define (iter lst acc)\n      (cond\n\
    \        [(null? lst) acc]\n        [(and (is-prime? (car lst)) (> (car lst) acc))\
    \ (iter (cdr lst) (car lst))]\n        [else (iter (cdr lst) acc)]))\n    (iter\
    \ lst 0))\n  (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define\
    \ (sum-digits n)\n    (define (iter s n)\n      (cond ((= n 0) s)\n          \
    \  (else (iter (+ s (modulo n 10)) (quotient n 10)))))\n    (iter 0 n))\n  (define\
    \ (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((is-prime\
    \ (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) max))))\n\
    \  (iter lst 0))\n```\n\n## \u0417\u0430\u0434\u0430\u0447\u0430 4\n\n\u0414\u0430\
    \ \u0441\u0435 \u043D\u0430\u043F\u0438\u0448\u0435 \u0444\u0443\u043D\u043A\u0446\
    \u0438\u044F `(skjkasdkd lst)`, \u043A\u043E\u044F\u0442\u043E \u043F\u0440\u0438\
    \u0435\u043C\u0430 \u0441\u043F\u0438\u0441\u044A\u043A \u043E\u0442 \u0446\u0435\
    \u043B\u0438 \u0447\u0438\u0441\u043B\u0430 \u0438 \u0432\u0440\u044A\u0449\u0430\
    \ \u0441\u043F\u0438\u0441\u044A\u043A \u043E\u0442 \u0446\u0435\u043B\u0438 \u0447\
    \u0438\u0441\u043B\u0430, \u043A\u043E\u0438\u0442\u043E \u0441\u0430 \u043F\u0440\
    \u043E\u0441\u0442\u0438 \u0438 \u043F\u043E-\u0433\u043E\u043B\u0435\u043C\u0438\
    \ \u043E\u0442 \u043D\u0430\u0439-\u0433\u043E\u043B\u044F\u043C\u043E\u0442\u043E\
    \ \u043F\u0440\u043E\u0441\u0442\u043E \u0447\u0438\u0441\u043B\u043E \u0432 \u0441\
    \u043F\u0438\u0441\u044A\u043A\u0430.\n\n\u041F\u0440\u0438\u043C\u0435\u0440\u0438\
    :\n\n```racket", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n   \
    \   [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n\
    \      [(= n 11) #t]\n      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19)\
    \ #t]\n      [(= n 23) #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(=\
    \ n 37) #t]\n      [(= n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n \
    \     [(= n 53) #t]\n      [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67)\
    \ #t]\n      [(= n 71) #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(=\
    \ n 83) #t]\n      [(= n 89) #t]\n      [(= n 97) #t]\n      [(= n 101) #t]\n\
    \      [(= n 103) #t]\n      [(= n 107) #t]\n      [(= n 109) #t]\n      [(= n\
    \ 113) #t]\n      [(= n 127) #t]\n      [(= n 131) #t]\n      [(= n 137) #t]\n\
    \      [(= n 139) #t]\n      [(= n 149) #t]\n      [(= n 151) #t]\n      [(= n\
    \ 157) #t]\n      [(= n 163) #t]\n      [(= n 167) #t]\n      [(= n 173) #t]\n\
    \      [(= n 179) #t]\n      [(= n 181) #t]\n      [(= n 191) #t]\n      [(= n\
    \ 193) #t]\n      [(= n 197) #t]\n      [(= n 199) #t]\n      [(= n 211) #t]\n\
    \      [(= n 223) #t]\n      [(= n 227)", "  (define (sum-digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (is-prime? n)\n    (cond\n      [(= n 1) false]\n      [(= n 2) true]\n\
    \      [(even? n) false]\n      [else\n       (define (iter i)\n         (cond\n\
    \           [(= i n) true]\n           [(zero? (modulo n i)) false]\n        \
    \   [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (find-largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n\
    \      [else (find-largest-prime (cdr lst))]))\n  (sum-digits (find-largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n\
    \ 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i\
    \ 3))\n             (cond ((&gt; i (sqrt n)) #t)\n                   ((= (modulo\
    \ n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (sum-digits\
    \ n)\n    (cond ((&lt; n 10) n)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n</code>\n", "  (define (is-prime?\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else\n           (let loop ((i 3))\n             (cond ((&gt; (* i\
    \ i) n) #t)\n                   ((= (modulo n i) 0) #f)\n                   (else\
    \ (loop (+ i 2))))))))\n  (define (sum-digits n)\n    (cond ((zero? n) 0)\n  \
    \        (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (max-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (max-prime (cdr lst))))\n          (else (max-prime (cdr lst)))))\n  (sum-digits\
    \ (max-prime lst)))\n</code>\n", "  (define (is-prime n)\n    (define (prime?\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n\
    \ 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n       \
    \   ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (digits n)\n\
    \    (cond ((= n 0) '())\n         (else (cons (modulo n 10) (digits (quotient\
    \ n 10))))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (max-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((and (is-prime? (car lst))\n          \
    \      (> (car lst) (max-prime (cdr lst))))\n           (car lst))\n         \
    \ (else (max-prime (cdr lst)))))\n  (sum-digits (max-prime lst)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (/ n 2)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (define (iter lst largest)\n    (cond ((null?\
    \ lst) (sum-digits largest))\n          ((and (is-prime (car lst)) (> (car lst)\
    \ largest))\n           (iter (cdr lst) (car lst)))\n          (else (iter (cdr\
    \ lst) largest))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-list lst)\n\
    \    (cond ((null? lst) '())\n          ((is-prime? (car lst)) (cons (car lst)\
    \ (prime-list (cdr lst))))\n          (else (prime-list (cdr lst)))))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (sum-digits (apply max (prime-list lst))))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n\
    \ 1)))\n  (define (sum-digits n)\n    (define (iter n s)\n      (cond\n      \
    \  [(= n 0) s]\n        [else (iter (quotient n 10) (+ s (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst max)\n    (cond\n      [(null? lst) (sum-digits\
    \ max)]\n      [(and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst))]\n      [else (iter (cdr lst) max)]))\n  (iter lst 0))\n", "  (define\
    \ (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n    (cond\n     \
    \ [(< n 2) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n      \
    \ (define (iter i)\n         (cond\n           [(> i (quotient n 2)) #t]\n   \
    \        [(zero? (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n     \
    \  (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr lst))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n \
    \       [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (cond\n      [(zero? n) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (iter lst max)\n    (cond\n      [(null? lst) (sum-digits\
    \ max)]\n      [(and (prime? (car lst)) (> (car lst) max)) (iter (cdr lst) (car\
    \ lst))]\n      [else (iter (cdr lst) max)]))\n  (iter lst 0))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (-\
    \ i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define\
    \ (find-largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car\
    \ lst)) (car lst))\n          (else (find-largest-prime (cdr lst)))))\n  (sum-digits\
    \ (find-largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define\
    \ (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient n\
    \ 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n\
    \    (cond ((null? lst) acc)\n          ((and (is-prime? (car lst))\n        \
    \        (> (car lst) acc))\n           (iter (cdr lst) (car lst)))\n        \
    \  (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(=\
    \ n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(and (is-prime? (first lst)) (> (first lst) acc)) (iter (rest lst) (first\
    \ lst))]\n      [else (iter (rest lst) acc)]))\n  (sum-digits (iter lst 0)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((and (is-prime? (car lst)) (> (car\
    \ lst) acc)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n\
    \    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (define (sum-digits n)\n    (cond\n     \
    \ [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (iter lst max)\n    (cond\n      [(null? lst) (sum-digits max)]\n \
    \     [(and (is-prime (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst))]\n\
    \      [else (iter (cdr lst) max)]))\n  (iter lst 0))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n      (cond\
    \ ((null? lst) acc)\n            ((is-prime (car lst)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\n      [(= n 0)\
    \ 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (iter lst max)\n    (cond\n      [(null? lst) (sum-digits max)]\n      [(and\
    \ (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst))]\n     \
    \ [else (iter (cdr lst) max)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n  \
    \        (else\n           (let loop ((i 3))\n             (cond ((= i n) #t)\n\
    \                   ((= (remainder n i) 0) #f)\n                   (else (loop\
    \ (+ i 2))))))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (max-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (max-prime\
    \ (cdr lst))))\n          (else (max-prime (cdr lst)))))\n  (sum-digits (max-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n   \
    \   (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst max)\n    (cond ((null? lst)\
    \ (sum-digits max))\n          ((and (is-prime (car lst)) (> (car lst) max)) (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst\
    \ 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n       \
    \ [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n\
    \        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder\
    \ n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null?\
    \ lst) acc]\n      [(and (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst)\
    \ (car lst))]\n      [else (iter (cdr lst) acc)]))\n  (sum-digits (iter lst 0)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((is-prime (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n      \
    \    (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (/ n 2)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) (sum-digits acc)]\n\
    \      [(and (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n\
    \      [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime?\
    \ (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (prime-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n    \
    \        (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime?\
    \ (car lst)) (iter (cdr lst) (prime-digits (car lst))))\n          (else (iter\
    \ (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(empty? lst) acc]\n\
    \        [(is-prime (first lst)) (iter (rest lst) (first lst))]\n        [else\
    \ (iter (rest lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((=\
    \ n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n\
    \          (if (= (remainder n i) 0)\n              #f\n              (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n\
    \      (if (= n 0)\n          sum\n          (iter (quotient n 10) (+ sum (remainder\
    \ n 10)))))\n    (iter n 0))\n  (define (iter lst max)\n    (if (null? lst)\n\
    \        (sum-digits max)\n        (if (and (is-prime (car lst)) (> (car lst)\
    \ max))\n            (iter (cdr lst) (car lst))\n            (iter (cdr lst) max))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (iter\
    \ lst)\n    (cond ((null? lst) 0)\n          ((and (is-prime? (car lst))\n   \
    \             (> (car lst) (iter (cdr lst))))\n           (sum-digits (car lst)))\n\
    \          (else (iter (cdr lst)))))\n  (iter lst))\n", "  (define (is-prime n)\n\
    \    (define (is-prime-helper n i)\n      (cond\n        [(= n 1) #f]\n      \
    \  [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (find-largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime\
    \ (car lst)) (max (car lst) (find-largest-prime (cdr lst)))]\n      [else (find-largest-prime\
    \ (cdr lst))]))\n  (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (cond\n      [(= n 2) #t]\n      [(=\
    \ n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n    \
    \  [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23) #t]\n\
    \      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37) #t]\n      [(= n 41)\
    \ #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n      [(=\
    \ n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n      [(= n 71) #t]\n \
    \     [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83) #t]\n      [(= n 89)\
    \ #t]\n      [(= n 97) #t]\n      [(= n 101) #t]\n      [(= n 103) #t]\n     \
    \ [(= n 107) #t]\n      [(= n 109) #t]\n      [(= n 113) #t]\n      [(= n 127)\
    \ #t]\n      [(= n 131) #t]\n      [(= n 137) #t]\n      [(= n 139) #t]\n    \
    \  [(= n 149) #t]\n      [(= n 151) #t]\n      [(= n 157) #t]\n      [(= n 163)\
    \ #t]\n      [(= n 167) #t]\n      [(= n 173) #t]\n      [(= n 179) #t]\n    \
    \  [(= n 181) #t]\n      [(= n 191) #t]\n      [(= n 193) #t]\n      [(= n 197)\
    \ #t]\n      [(= n 199) #t]\n      [(= n 211) #t]\n      [(= n 223) #t]\n    \
    \  [(= n 227) #t]\n      [(= n 229) #", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (prime-lst lst)\n\
    \    (cond\n      [(null? lst) '()]\n      [(is-prime (car lst)) (cons (car lst)\
    \ (prime-lst (cdr lst)))]\n      [else (prime-lst (cdr lst))]))\n  (define (max-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(null? (cdr lst)) (car lst)]\n\
    \      [(> (car lst) (car (cdr lst))) (max-prime (cons (car lst) (cdr (cdr lst))))]\n\
    \      [else (max-prime (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n \
    \     [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (sum-digits\
    \ (max-prime (prime-lst lst))))\n", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (sum-digits n)\n    (if (=\
    \ n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n\
    \  (define (is-prime? n)\n    (define (iter i)\n      (if (= i n)\n          #t\n\
    \          (if (= (modulo n i) 0)\n              #f\n              (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (quotient n 2)))\n \
    \ (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n\
    \ 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n\
    \      [(and (is-prime? (car lst))\n            (> (car lst) acc))\n       (iter\
    \ (cdr lst) (car lst))]\n      [else (iter (cdr lst) acc)]))\n  (sum-digits (iter\
    \ lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n       \
    \   (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n   \
    \         ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n      (cond ((&lt;\
    \ n 10) (+ sum n))\n            (else (iter (quotient n 10) (+ sum (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst max)\n    (cond ((null? lst)\
    \ (sum-digits max))\n          ((is-prime (car lst)) (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) max))))\n  (iter lst 0))\n</code>\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(=\
    \ n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst max)\n    (cond\n      [(empty? lst) (sum-digits\
    \ max)]\n      [(is-prime? (first lst)) (iter (rest lst) (max (first lst) max))]\n\
    \      [else (iter (rest lst) max)]))\n  (iter lst 0))\n```\n\n## \u0417\u0430\
    \u0434\u0430\u0447\u0430 2\n\n\u0414\u0430 \u0441\u0435 \u043D\u0430\u043F\u0438\
    \u0448\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044F, \u043A\u043E\u044F\u0442\
    \u043E \u043F\u0440\u0438\u0435\u043C\u0430 \u043A\u0430\u0442\u043E \u0430\u0440\
    \u0433\u0443\u043C\u0435\u043D\u0442\u0438 \u0441\u043F\u0438\u0441\u044A\u043A\
    \ \u043E\u0442 \u0447\u0438\u0441\u043B\u0430 \u0438 \u0434\u0432\u0435 \u0447\
    \u0438\u0441\u043B\u0430 `a` \u0438 `b` \u0438 \u0432\u0440\u044A\u0449\u0430\
    \ \u0441\u043F\u0438\u0441\u044A\u043A \u043E\u0442 \u0447\u0438\u0441\u043B\u0430\
    \u0442\u0430 \u0432 \u0441\u043F\u0438\u0441\u044A\u043A\u0430, \u043A\u043E\u0438\
    \u0442\u043E \u0441\u0430 \u043F\u043E-\u0433\u043E\u043B\u0435\u043C\u0438 \u043E\
    \u0442 `a` \u0438 \u043F\u043E-\u043C\u0430\u043B\u043A\u0438 \u043E\u0442 `b`.\n\
    \n\u041F\u0440\u0438\u043C\u0435\u0440:\n\n```racket\n> (filter-range (list 1\
    \ 2 3 4 5 6 7 8 9) 3 7)\n'(4 5 6)\n```\n\n## \u0417\u0430\u0434\u0430\u0447\u0430\
    \ 3\n\n\u0414\u0430 \u0441\u0435 \u043D\u0430\u043F\u0438\u0448\u0435 \u0444\u0443\
    \u043D\u043A\u0446\u0438\u044F, \u043A\u043E\u044F\u0442\u043E \u043F\u0440\u0438\
    \u0435\u043C\u0430 \u043A", "  (define (is-prime n)\n    (define (iter i)\n  \
    \    (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define\
    \ (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter (quotient\
    \ n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(null? lst) acc]\n \
    \       [(is-prime (car lst)) (iter (cdr lst) (car lst))]\n        [else (iter\
    \ (cdr lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter s n)\n      (cond ((=\
    \ n 0) s)\n            (else (iter (+ s (modulo n 10)) (/ n 10)))))\n    (iter\
    \ 0 n))\n  (define (iter lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (sum-digits (car lst)))\n          (else (iter (cdr lst)))))\n  (iter\
    \ lst))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper (-\
    \ i 1)))))\n    (helper (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (helper lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car\
    \ lst))\n          (else (helper (cdr lst)))))\n  (sum-digits (helper lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (if (= i n)\n          #t\n\
    \          (if (= (remainder n i) 0)\n              #f\n              (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (if (= n 0)\n          acc\n          (iter (quotient n 10) (+ acc (remainder\
    \ n 10)))))\n    (iter n 0))\n  (define (iter lst acc)\n    (if (null? lst)\n\
    \        acc\n        (if (is-prime? (car lst))\n            (iter (cdr lst) (car\
    \ lst))\n            (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((is-prime (car lst)) (iter (cdr lst)\
    \ (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst)) (max (car lst)\
    \ (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond\n      [(null? lst) acc]\n      [(and (is-prime? (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst)\
    \ acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (sum-digits n)\n    (if\
    \ (zero? n)\n        0\n        (+ (remainder n 10)\n           (sum-digits (quotient\
    \ n 10)))))\n  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime (car lst))\n\
    \                (&gt; (sum-digits (car lst)) acc))\n           (iter (cdr lst)\
    \ (sum-digits (car lst))))\n          (else (iter (cdr lst) acc))))\n  (iter lst\
    \ 0))\n</code>\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (-\
    \ i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n\
    \ acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10)\
    \ (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n  \
    \  (cond\n      [(null? lst) acc]\n      [(is-prime? (car lst)) (iter (cdr lst)\
    \ (sum-digits (car lst)))]\n      [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n\
    ```\n\n## Task 3\n\n```racket\n#lang racket\n", "  (define (is-prime? n)\n   \
    \ (define (helper x)\n      (cond\n        [(= x 1) #t]\n        [(= (modulo n\
    \ x) 0) #f]\n        [else (helper (- x 1))]))\n    (helper (quotient n 2)))\n\
    \  (define (digits n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder\
    \ n 10) (digits (quotient n 10)))]))\n  (define (sum-digits lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [else (+ (first lst) (sum-digits (rest lst)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(empty? lst) 0]\n      [(is-prime?\
    \ (first lst)) (first lst)]\n      [else (largest-prime (rest lst))]))\n  (sum-digits\
    \ (digits (largest-prime lst))))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n  \
    \  (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond\n      [(null? lst) acc]\n      [(and (is-prime? (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst)\
    \ acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n\
    \          ((and (prime? (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (find-largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime (car lst)) (max (car lst) (find-largest-prime\
    \ (cdr lst))))\n          (else (find-largest-prime (cdr lst)))))\n  (sum-digits\
    \ (find-largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (divisible?\
    \ a b)\n      (= (modulo a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= n (find-divisor n 2)))\n  (define (sum-digits n)\n    (if (= n 0)\n    \
    \    0\n        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  (define (find-largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (find-largest-prime (cdr lst)))))\n  (sum-digits (find-largest-prime\
    \ lst)))\n", "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n     \
    \ [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime?\
    \ n)\n    (cond\n      [(zero? n) #f]\n      [(zero? (modulo n 2)) #f]\n     \
    \ [else\n       (define (iter i)\n         (cond\n           [(> (* i i) n) #t]\n\
    \           [(zero? (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n  \
    \     (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr\
    \ lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-list\
    \ lst)\n    (cond ((null? lst) '())\n          ((is-prime? (car lst)) (cons (car\
    \ lst) (prime-list (cdr lst))))\n          (else (prime-list (cdr lst)))))\n \
    \ (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (max-prime-digit-sum lst)\n\
    \    (cond ((null? lst) 0)\n          ((= (car lst) (apply max lst)) (sum-digits\
    \ (car lst)))\n          (else (max-prime-digit-sum (cdr lst)))))\n  (max-prime-digit-sum\
    \ (prime-list lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits largest))\n\
    \          ((and (is-prime? (car lst)) (> (car lst) largest))\n           (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n  (iter\
    \ lst 0))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n      (cond\
    \ ((= n 0) sum)\n            (else (iter (quotient n 10) (+ sum (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst max)\n\
    \      (cond ((null? lst) max)\n            ((and (prime? (car lst)) (> (car lst)\
    \ max)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n\
    \    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (prime-list lst)\n    (cond ((null? lst) '())\n          ((is-prime? (car lst))\
    \ (cons (car lst) (prime-list (cdr lst))))\n          (else (prime-list (cdr lst)))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (max-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((null? (cdr lst)) (car lst))\n          ((> (car\
    \ lst) (car (cdr lst))) (max-prime (cons (car lst) (cdr (cdr lst)))))\n      \
    \    (else (max-prime (cdr lst)))))\n  (sum-digits (max-prime (prime-list lst))))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((=\
    \ n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((is-prime? (car lst)) (iter (cdr\
    \ lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n d)\n      (cond\n        [(= d 1) #t]\n        [(= (modulo\
    \ n d) 0) #f]\n        [else (is-prime-helper n (- d 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n \
    \     [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (sum-digits n)\n    (define (iter n sum)\n      (cond\n  \
    \      [(= n 0) sum]\n        [else (iter (quotient n 10) (+ sum (remainder n\
    \ 10)))]))\n    (iter n 0))\n  (define (iter lst max)\n    (cond\n      [(empty?\
    \ lst) (sum-digits max)]\n      [(and (is-prime? (first lst)) (> (first lst) max))\
    \ (iter (rest lst) (first lst))]\n      [else (iter (rest lst) max)]))\n  (iter\
    \ lst 0))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc\
    \ (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n\
    \      [(null? lst) acc]\n      [(and (prime? (car lst)) (> (car lst) acc)) (iter\
    \ (cdr lst) (car lst))]\n      [else (iter (cdr lst) acc)]))\n  (sum-digits (iter\
    \ lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter\
    \ lst acc)\n      (cond ((null? lst) acc)\n            ((and (is-prime? (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr\
    \ lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n    \
    \        ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n   \
    \ (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\
    \ ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst)\
    \ acc))))\n  (sum-digits (iter lst 0)))\n```\n\n## \u0417\u0430\u0434\u0430\u0447\
    \u0430 2\n\n```racket\n#lang racket\n", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-digits n)\n \
    \   (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (prime-digits (quotient\
    \ n 10))))))\n  (define (iter lst max)\n    (cond ((null? lst) max)\n        \
    \  ((and (is-prime (car lst))\n                (&gt; (prime-digits (car lst))\
    \ (prime-digits max)))\n           (iter (cdr lst) (car lst)))\n          (else\
    \ (iter (cdr lst) max))))\n  (prime-digits (iter lst 0)))\n</code>\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (iter lst max)\n    (cond\
    \ ((null? lst) (sum-digits max))\n          ((is-prime? (car lst)) (iter (cdr\
    \ lst) (max (car lst) max)))\n          (else (iter (cdr lst) max))))\n  (iter\
    \ lst 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (quotient n 2)))\n  (define (prime-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (modulo n 10) (prime-digits (quotient n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (prime-digits (largest-prime lst)))\n", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond\n        [(zero? n) acc]\n       \
    \ [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(prime? (first lst)) (sum-digits (first lst))]\n    [else (skjkasdkd\
    \ (rest lst))]))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n\
    \      (cond ((= n 0) sum)\n            (else (iter (quotient n 10) (+ sum (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst max)\n    (cond ((null? lst)\
    \ (sum-digits max))\n          ((and (is-prime? (car lst)) (> (car lst) max))\
    \ (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter\
    \ lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter s n)\n\
    \      (cond\n        [(= n 0) s]\n        [else (iter (+ s (modulo n 10)) (/\
    \ n 10))]))\n    (iter 0 n))\n  (define (iter lst max)\n    (cond\n      [(empty?\
    \ lst) (sum-digits max)]\n      [(and (is-prime? (first lst)) (> (first lst) max))\
    \ (iter (rest lst) (first lst))]\n      [else (iter (rest lst) max)]))\n  (iter\
    \ lst 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (if (= i n)\
    \ #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter s n)\n      (if (=\
    \ n 0) s\n          (iter (+ s (remainder n 10)) (quotient n 10))))\n    (iter\
    \ 0 n))\n  (define (iter lst max)\n    (if (null? lst) (sum-digits max)\n    \
    \    (if (and (is-prime (car lst)) (> (car lst) max))\n            (iter (cdr\
    \ lst) (car lst))\n            (iter (cdr lst) max))))\n  (iter lst 0))\n", " \
    \ (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n    (cond\n\
    \      [(zero? n) #f]\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (modulo\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(> i (quotient n 2)) #t]\n           [(= (modulo n i) 0) #f]\n          \
    \ [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n \
    \     [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (let* ([primes (filter prime? lst)]\n         [max (apply max primes)])\n   \
    \ (sum-digits max)))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter\
    \ n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n\
    \ 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n\
    \    (cond\n      [(null? lst) acc]\n      [(and (is-prime? (car lst)) (> (car\
    \ lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) acc)]))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (/ n 2)))\n  (define (prime-list lst)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(is-prime (first lst)) (cons (first lst) (prime-list\
    \ (rest lst)))]\n      [else (prime-list (rest lst))]))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/\
    \ n 10)))]))\n  (define (max-prime-sum lst)\n    (cond\n      [(empty? lst) 0]\n\
    \      [(= (first lst) (apply max lst)) (sum-digits (first lst))]\n      [else\
    \ (max-prime-sum (rest lst))]))\n  (max-prime-sum (prime-list lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n  \
    \  (iter 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n    \
    \      (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n  \
    \      [(zero? n) acc]\n        [else (iter (quotient n 10) (+ acc (remainder\
    \ n 10)))]))\n    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter\
    \ lst acc)\n      (cond\n        [(null? lst) acc]\n        [(is-prime? (car lst))\
    \ (iter (cdr lst) (car lst))]\n        [else (iter (cdr lst) acc)]))\n    (iter\
    \ lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n \
    \   (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter i s)\n      (cond\n        [(= i 0) s]\n        [else\
    \ (iter (quotient i 10) (+ s (remainder i 10)))]))\n    (iter n 0))\n  (define\
    \ (largest-prime lst)\n    (define (iter lst max)\n      (cond\n        [(null?\
    \ lst) max]\n        [(and (is-prime (car lst)) (> (car lst) max)) (iter (cdr\
    \ lst) (car lst))]\n        [else (iter (cdr lst) max)]))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(null? lst) acc]\n \
    \       [(and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n\
    \        [else (iter (cdr lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n```\n\n## \u0417\u0430\u0434\u0430\u0447\u0430 2. \u041F\u0440\u043E\
    \u0441\u0442\u0438 \u0447\u0438\u0441\u043B\u0430\n\n\u041D\u0430\u043F\u0438\u0448\
    \u0435\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044F `(primes-in-range\
    \ start end)`, \u043A\u043E\u044F\u0442\u043E \u0432\u0440\u044A\u0449\u0430 \u0441\
    \u043F\u0438\u0441\u044A\u043A \u043E\u0442 \u0432\u0441\u0438\u0447\u043A\u0438\
    \ \u043F\u0440\u043E\u0441\u0442\u0438 \u0447\u0438\u0441\u043B\u0430 \u0432 \u0438\
    \u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430 `[start, end]`.\n\n\u041F\u0440\
    \u0438\u043C\u0435\u0440\u0438:\n\n```racket", "  (define (is-prime? n)\n    (define\
    \ (helper i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i)\
    \ 0)\n              #f\n              (helper (+ i 1)))))\n    (helper 2))\n \
    \ (define (sum-digits n)\n    (define (helper n acc)\n      (if (= n 0)\n    \
    \      acc\n          (helper (quotient n 10) (+ acc (remainder n 10)))))\n  \
    \  (helper n 0))\n  (define (largest-prime lst)\n    (define (helper lst acc)\n\
    \      (if (null? lst)\n          acc\n          (if (is-prime? (car lst))\n \
    \             (if (> (car lst) acc)\n                  (helper (cdr lst) (car\
    \ lst))\n                  (helper (cdr lst) acc))\n              (helper (cdr\
    \ lst) acc))))\n    (helper lst 0))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (quotient n 2)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n        \
    \  (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (iter lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (sum-digits (car lst)))\n\
    \          (else (iter (cdr lst)))))\n  (iter lst))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n sum)\n      (cond ((= n 0) sum)\n            (else (iter\
    \ (quotient n 10) (+ sum (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((and (is-prime?\
    \ (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond\n      [(null? lst) (sum-digits acc)]\n      [(and (is-prime\
    \ (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter\
    \ (cdr lst) acc)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (define (iter n sum)\n      (cond\n        [(= n 0) sum]\n        [else\
    \ (iter (quotient n 10) (+ sum (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car\
    \ lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (define (sum-digits n)\n    (cond\n     \
    \ [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter s n)\n      (cond\n        [(= n 0) s]\n \
    \       [else (iter (+ s (modulo n 10)) (/ n 10))]))\n    (iter 0 n))\n  (define\
    \ (iter lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (sum-digits\
    \ (car lst))]\n      [else (iter (cdr lst))]))\n  (iter lst))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((< i n) (and (not (zero? (modulo n i)))\
    \ (iter (+ i 1))))\n            (else #t)))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((< n 10) (+ acc n))\n           \
    \ (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n        \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr\
    \ lst) max))))\n  (iter lst 0))\n", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(null? lst) acc]\n \
    \       [(and (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n\
    \        [else (iter (cdr lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n    \
    \    [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\n      [(= n 0)\
    \ 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime (car\
    \ lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond\n        [(> i (/ n 2)) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(and\
    \ (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else\
    \ (iter (cdr lst) acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((&lt; n 10) (+ acc n))\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime?\
    \ (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n</code>\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n  (sum-digits\
    \ (iter lst 0)))\n", "  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n\
    \      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (modulo n 2)\
    \ 0) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (modulo n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr\
    \ lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else\
    \ (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime? (car lst))\
    \ (iter (cdr lst) (max acc (car lst)))]\n      [else (iter (cdr lst) acc)]))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(empty? lst) 0]\n      [(is-prime?\
    \ (first lst)) (max (first lst) (largest-prime (rest lst)))]\n      [else (largest-prime\
    \ (rest lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (if (= i 1)\n          #t\n          (if (=\
    \ (modulo n i) 0)\n              #f\n              (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-of-digits n)\n    (define (iter n acc)\n      (if\
    \ (= n 0)\n          acc\n          (iter (quotient n 10) (+ acc (remainder n\
    \ 10)))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst\
    \ acc)\n      (if (null? lst)\n          acc\n          (if (is-prime? (car lst))\n\
    \              (iter (cdr lst) (car lst))\n              (iter (cdr lst) acc))))\n\
    \    (iter lst 0))\n  (sum-of-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(is-prime? (first lst)) (max\
    \ (first lst) (largest-prime (rest lst)))]\n      [else (largest-prime (rest lst))]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n  \
    \      [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n\
    \ 10)))]))\n    (iter n 0))\n  (define (iter lst max)\n    (cond\n      [(null?\
    \ lst) (sum-digits max)]\n      [(and (is-prime? (car lst)) (> (car lst) max))\
    \ (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) max)]))\n  (iter lst\
    \ 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (if (= i n)\n\
    \          #t\n          (if (= (remainder n i) 0)\n              #f\n       \
    \       (iter (+ i 1)))))\n    (iter 2))\n  (define (get-primes lst)\n    (cond\
    \ ((null? lst) '())\n          ((is-prime? (car lst)) (cons (car lst) (get-primes\
    \ (cdr lst))))\n          (else (get-primes (cdr lst)))))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (sum-digits (apply max (get-primes lst))))\n```\n\n## \u0417\u0430\
    \u0434\u0430\u0447\u0430 3\n\n\u0414\u0430 \u0441\u0435 \u043D\u0430\u043F\u0438\
    \u0448\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044F `(sums lst)`, \u043A\u043E\
    \u044F\u0442\u043E \u043F\u0440\u0438\u0435\u043C\u0430 \u0441\u043F\u0438\u0441\
    \u044A\u043A \u043E\u0442 \u0446\u0435\u043B\u0438 \u0447\u0438\u0441\u043B\u0430\
    \ \u0438 \u0432\u0440\u044A\u0449\u0430 \u0441\u043F\u0438\u0441\u044A\u043A \u043E\
    \u0442 \u0441\u0443\u043C\u0438\u0442\u0435 \u043D\u0430 \u043F\u043E\u0434\u0441\
    \u043F\u0438\u0441\u044A\u0446\u0438\u0442\u0435 \u043D\u0430 \u043F\u043E\u0434\
    \u0430\u0434\u0435\u043D\u0438\u044F \u0441\u043F\u0438\u0441\u044A\u043A.\n\n\
    \u041F\u0440\u0438\u043C\u0435\u0440\u0438:\n\n```racket", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((and\
    \ (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n      \
    \    (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (remainder n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n\
    \ 1)))\n  (define (sum-digits n)\n    (define (iter s n)\n      (cond\n      \
    \  [(= n 0) s]\n        [else (iter (+ s (remainder n 10)) (/ n 10))]))\n    (iter\
    \ 0 n))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n   \
    \   [(prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else\
    \ (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n      (cond\
    \ ((null? lst) acc)\n            ((and (is-prime? (car lst)) (> (car lst) acc))\
    \ (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n   \
    \ (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n  \
    \    (cond ((< i n) (if (zero? (modulo n i)) #f (iter (+ i 1))))\n           \
    \ (else #t)))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((< n 10) (+ acc n))\n            (else (iter (quotient n 10) (+\
    \ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\
    \ ((null? lst) acc)\n          ((and (is-prime (car lst)) (> (car lst) acc)) (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n  (sum-digits\
    \ (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n  \
    \  (define (iter n acc)\n      (cond\n        [(zero? n) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(empty? lst) acc]\n\
    \        [(is-prime (first lst)) (iter (rest lst) (first lst))]\n        [else\
    \ (iter (rest lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (iter lst largest)\n \
    \   (cond ((null? lst) (sum-digits largest))\n          ((and (is-prime? (car\
    \ lst)) (> (car lst) largest))\n           (iter (cdr lst) (car lst)))\n     \
    \     (else (iter (cdr lst) largest))))\n  (iter lst 0))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) (sum-digits acc)]\n\
    \      [(is-prime? (car lst)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr\
    \ lst) acc)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n  (sum-digits\
    \ (iter lst 0)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((< i n) (if (zero? (modulo n i)) #f (iter (+ i 1))))\n            (else #t)))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\
    \ ((zero? n) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n\
    \ 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((is-prime (car lst)) (iter (cdr lst) (car lst)))\n        \
    \  (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n```\n\n## \u0417\
    \u0430\u0434\u0430\u0447\u0430 3\n\n\u0414\u0430 \u0441\u0435 \u0434\u0435\u0444\
    \u0438\u043D\u0438\u0440\u0430 \u0444\u0443\u043D\u043A\u0446\u0438\u044F `(k-to-n\
    \ k n)`, \u043A\u043E\u044F\u0442\u043E \u043F\u0440\u0438\u0435\u043C\u0430 \u0446\
    \u0435\u043B\u0438\u0442\u0435 \u0447\u0438\u0441\u043B\u0430 `k` \u0438 `n` \u0438\
    \ \u0432\u0440\u044A\u0449\u0430 \u0441\u043F\u0438\u0441\u044A\u043A \u043E\u0442\
    \ \u0432\u0441\u0438\u0447\u043A\u0438 \u043F\u0440\u043E\u0441\u0442\u0438 \u0447\
    \u0438\u0441\u043B\u0430 \u0432 \u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\
    \u0430 `[k, n]`.\n\n```racket\n#lang racket\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n sum)\n      (cond ((= n 0) sum)\n            (else (iter\
    \ (quotient n 10) (+ sum (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((=\
    \ n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((is-prime (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n      \
    \    (else (iter (cdr lst) acc))))\n  (iter lst 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
