language: rkt
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (string-ref s 0))\n                 (digitSum (substring s\
    \ 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6d11fcqv.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6d11fcqv.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6d11fcqv.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6d11fcqv.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6d11fcqv.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6d11fcqv.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6d11fcqv.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6d11fcqv.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n    \
    \           (char->integer c)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char-&gt;integer (car s))\n                 (digitSum (cdr s)))]))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpxa9qpndd.rkt:22:36: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(and (char-upper-case? (first s)) (char-numeric? (first s)))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [(and (char-upper-case? (first s)) (not\
    \ (char-numeric? (first s))))\n     (digitSum (rest s))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxwc1emsh.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxwc1emsh.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxwc1emsh.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxwc1emsh.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxwc1emsh.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxwc1emsh.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxwc1emsh.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxwc1emsh.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ((ch (string-ref s 0)))\n        (+ (if (char-upper-case? ch) (char->integer\
    \ ch) 0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (let loop ([s s] [sum 0])\n   \
    \ (cond [(empty? s) sum]\n          [(char-upper-case? (first s)) (loop (rest\
    \ s) (+ sum (char->integer (first s))))]\n          [else (loop (rest s) sum)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbscbimms.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbscbimms.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbscbimms.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbscbimms.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbscbimms.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-eq"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c) (char->integer\
    \ c) 0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (first s))\n                 (digitSum (rest s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmheojo5b.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmheojo5b.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmheojo5b.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmheojo5b.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmheojo5b.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-eq"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum s)\n    (cond [(empty?\
    \ s) 0]\n          [(char-upper-case? (first s)) (+ (char->integer (first s))\
    \ (sum (rest s)))]\n          [else (sum (rest s))]))\n  (sum s))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n    \
    \           (char->integer c)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum s)\n    (if (empty?\
    \ s)\n        0\n        (+ (char->integer (car s)) (sum (cdr s)))))\n  (sum (filter\
    \ char-upper-case? (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upcase? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo1c7kcri.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpo1c7kcri.rkt:22:6\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ([ch (string-ref s 0)])\n        (+ (if (char-upper-case? ch)\n  \
    \             (char->integer ch)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum-of-upper-chars s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (sum-of-upper-chars (rest s)))]\n      [else (sum-of-upper-chars\
    \ (rest s))]))\n  (sum-of-upper-chars s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpidr7fwf_.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpidr7fwf_.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidr7fwf_.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpidr7fwf_.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidr7fwf_.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpidr7fwf_.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidr7fwf_.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpidr7fwf_.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upcase? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo1c7kcri.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpo1c7kcri.rkt:22:6\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ((c (string-ref s 0)))\n        (+ (if (char-upper-case? c) (char->integer\
    \ c) 0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c) (char->integer\
    \ c) 0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum s i)\n    (if (= i\
    \ (string-length s))\n        0\n        (+ (char->integer (string-ref s i))\n\
    \           (sum s (+ i 1)))))\n  (sum s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbtadmjs.rkt:33:4

    actual:     326

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbtadmjs.rkt:34:4

    actual:     461

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbtadmjs.rkt:35:4

    actual:     601

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbtadmjs.rkt:36:4

    actual:     683

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbtadmjs.rkt:37:4

    actual:     638

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbtadmjs.rkt:38:4

    actual:     1090

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbtadmjs.rkt:39:4

    actual:     1634

    expected:   327

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum-of-upper-chars s)\n\
    \    (cond [(empty? s) 0]\n          [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (sum-of-upper-chars (rest s)))]\n          [else (sum-of-upper-chars\
    \ (rest s))]))\n  (sum-of-upper-chars s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmmnannp5.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmmnannp5.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmmnannp5.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmmnannp5.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmmnannp5.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmmnannp5.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmmnannp5.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmmnannp5.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (let loop ([s s] [sum 0])\n   \
    \ (cond [(empty? s) sum]\n          [(char-upper-case? (first s)) (loop (rest\
    \ s) (+ sum (char->integer (first s))))]\n          [else (loop (rest s) sum)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbscbimms.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbscbimms.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbscbimms.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbscbimms.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbscbimms.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-eq"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum s)\n    (cond [(empty?\
    \ s) 0]\n          [(char-upper-case? (first s)) (+ (char->integer (first s))\
    \ (sum (rest s)))]\n          [else (sum (rest s))]))\n  (sum s))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpygsgc5aj.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygsgc5aj.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum s)\n    (if (empty?\
    \ s)\n        0\n        (+ (char->integer (car s)) (sum (cdr s)))))\n  (sum (filter\
    \ char-upper-case? (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upcase?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbssz9avy.rkt:20:33: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpbssz9avy.rkt:20:33\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum s)\n    (if (empty?\
    \ s)\n        0\n        (+ (char->integer (car s)) (sum (cdr s)))))\n  (sum (filter\
    \ char-upper-case? (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum-upper s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (sum-upper (rest s)))]\n      [else (sum-upper (rest s))]))\n  (sum-upper\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0k9d_ppe.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0k9d_ppe.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0k9d_ppe.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0k9d_ppe.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0k9d_ppe.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0k9d_ppe.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0k9d_ppe.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0k9d_ppe.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upcase? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo1c7kcri.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpo1c7kcri.rkt:22:6\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc1_peon.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc1_peon.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (car s))\n                 (digitSum (cdr s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5du77tv.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (let loop ((s s) (acc 0))\n   \
    \ (cond ((null? s) acc)\n          ((char-upper-case? (car s))\n           (loop\
    \ (cdr s) (+ acc (char->integer (car s)))))\n          (else (loop (cdr s) acc)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eqxq3td.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eqxq3td.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eqxq3td.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eqxq3td.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eqxq3td.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eqxq3td.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum-upper-chars s)\n \
    \   (if (null? s)\n        0\n        (if (char-upper-case? (car s))\n       \
    \     (+ (char->integer (car s)) (sum-upper-chars (cdr s)))\n            (sum-upper-chars\
    \ (cdr s)))))\n  (sum-upper-chars s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16sl584w.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16sl584w.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16sl584w.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16sl584w.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16sl584w.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16sl584w.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbnj_v62w.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbnj_v62w.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbnj_v62w.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbnj_v62w.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbnj_v62w.rkt:31:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbnj_v62w.rkt:32:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (isUpper? c)\n    (and\
    \ (char-alphabetic? c) (char-upper-case? c)))\n  (apply + (map char->integer (filter\
    \ isUpper? s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsq2hxtt.rkt:29:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsq2hxtt.rkt:30:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsq2hxtt.rkt:31:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsq2hxtt.rkt:32:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsq2hxtt.rkt:33:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsq2hxtt.rkt:34:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (define (sum s)\n    (cond ((null?\
    \ s) 0)\n          ((char-upper-case? (car s)) (+ (char->integer (car s)) (sum\
    \ (cdr s))))\n          (else (sum (cdr s)))))\n  (sum s))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoewn2wj9.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoewn2wj9.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoewn2wj9.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoewn2wj9.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoewn2wj9.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoewn2wj9.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c) (char->integer\
    \ c) 0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgcxi_1go.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgcxi_1go.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp5n6h4rr.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp5n6h4rr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| Task\nWrite a function that takes a string as input\
    \ and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n\
    >>> (digitSum \"\")\n0\n>>> (digitSum \"abAB\")\n131\n>>> (digitSum \"abcCd\"\
    )\n67\n>>> (digitSum \"helloE\")\n69\n>>> (digitSum \"woArBld\")\n131\n>>> (digitSum\
    \ \"aAaaaXa\")\n153|#\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5urbzssp.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5urbzssp.rkt:20:38\n"
  stdout: ''
  timestamp: 1660219125
