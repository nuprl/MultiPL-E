name: HumanEval_158_find_max
language: rkt
prompt: "#lang racket\n\n#| Write a function that accepts a list of strings.\nThe\
  \ list contains different words. Return the word with maximum number\nof unique\
  \ characters. If multiple strings have maximum number of unique\ncharacters, return\
  \ the one which comes first in lexicographical order.\n>>> (find_max (list \"name\"\
  \ \"of\" \"string\"))\n\"string\"\n>>> (find_max (list \"name\" \"enam\" \"game\"\
  ))\n\"enam\"\n>>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n\"aaaaaaa\"|#\n(define\
  \ (find_max words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: ["  (define (count-unique word)\n    (length (remove-duplicates (string->list\
    \ word))))\n  (define (max-unique words)\n    (cond [(empty? words) '()]\n   \
    \       [(empty? (rest words)) (first words)]\n          [else (if (> (count-unique\
    \ (first words))\n                       (count-unique (max-unique (rest words))))\n\
    \                   (first words)\n                   (max-unique (rest words)))]))\n\
    \  (max-unique words))\n", "  (define (count-unique word)\n    (define (helper\
    \ word seen)\n      (cond [(empty? word) (length seen)]\n            [(member\
    \ (first word) seen) (helper (rest word) seen)]\n            [else (helper (rest\
    \ word) (cons (first word) seen))]))\n    (helper word '()))\n  (define (max-unique-word\
    \ words)\n    (cond [(empty? words) '()]\n          [(empty? (rest words)) (first\
    \ words)]\n          [else (if (> (count-unique (first words))\n             \
    \          (count-unique (second words)))\n                    (first words)\n\
    \                    (second words))]))\n  (define (helper words max)\n    (cond\
    \ [(empty? words) max]\n          [else (helper (rest words)\n               \
    \         (if (> (count-unique (first words))\n                              \
    \ (count-unique max))\n                            (first words)\n           \
    \                 max))]))\n  (helper words (max-unique-word words)))\n", "  (define\
    \ (unique-chars word)\n    (define (unique-chars-helper word result)\n      (cond\n\
    \        [(empty? word) result]\n        [(member (first word) result) (unique-chars-helper\
    \ (rest word) result)]\n        [else (unique-chars-helper (rest word) (cons (first\
    \ word) result))]))\n    (unique-chars-helper word '()))\n  (define (max-unique-chars\
    \ words)\n    (cond\n      [(empty? words) '()]\n      [(empty? (rest words))\
    \ (first words)]\n      [else (if (> (length (unique-chars (first words)))\n \
    \                 (length (unique-chars (max-unique-chars (rest words)))))\n \
    \              (first words)\n               (max-unique-chars (rest words)))]))\n\
    \  (max-unique-chars words))\n", "  (define (count-unique word)\n    (define (count-unique-iter\
    \ word unique-count)\n      (cond\n        [(empty? word) unique-count]\n    \
    \    [(member (first word) (rest word)) (count-unique-iter (rest word) unique-count)]\n\
    \        [else (count-unique-iter (rest word) (+ unique-count 1))]))\n    (count-unique-iter\
    \ word 0))\n  (define (find-max-iter words max-word)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (count-unique (first words)) (count-unique max-word))\
    \ (find-max-iter (rest words) (first words))]\n      [else (find-max-iter (rest\
    \ words) max-word)]))\n  (find-max-iter words (first words)))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word)\n                    (string->list\
    \ (string-join (remove-duplicates (string->list word))))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word)\n              (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (define (lexicographically-first words)\n \
    \   (apply min words))\n  (lexicographically-first (max-unique-words words)))\n",
  "  (define (unique-chars word)\n    (set-difference (string->list word) (string->list\
    \ (string-join (list-remove word words)))))\n  (define (max-unique-chars words)\n\
    \    (apply max (map unique-chars words)))\n  (define (max-unique-words words)\n\
    \    (filter (lambda (word) (= (unique-chars word) (max-unique-chars words)))\
    \ words))\n  (define (min-lexicographical-word words)\n    (apply min words))\n\
    \  (min-lexicographical-word (max-unique-words words)))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (first words))))\n\
    \  (define (max-unique-chars word)\n    (length (unique-chars word)))\n  (define\
    \ (max-word word1 word2)\n    (cond\n      [(> (max-unique-chars word1) (max-unique-chars\
    \ word2)) word1]\n      [(< (max-unique-chars word1) (max-unique-chars word2))\
    \ word2]\n      [else (if (string<? word1 word2) word1 word2)]))\n  (foldl max-word\
    \ (first words) (rest words)))\n", "  (define (unique-chars word)\n    (define\
    \ (unique-chars-iter word chars)\n      (cond\n        [(empty? word) chars]\n\
    \        [(member (first word) chars) (unique-chars-iter (rest word) chars)]\n\
    \        [else (unique-chars-iter (rest word) (cons (first word) chars))]))\n\
    \    (unique-chars-iter word '()))\n  (define (max-unique-chars words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(empty? (rest words)) (first words)]\n   \
    \   [else\n       (define max-unique (max (length (unique-chars (first words)))\n\
    \                               (length (unique-chars (second words)))))\n   \
    \    (define max-unique-words (filter (lambda (word)\n                       \
    \                   (= max-unique (length (unique-chars word))))\n           \
    \                             words))\n       (if (= (length max-unique-words)\
    \ 1)\n           (first max-unique-words)\n           (min (first max-unique-words)\
    \ (second max-unique-words)))]))\n  (max-unique-chars words))\n", "  (define (count-unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map count-unique-chars words)))\n  (define (find-max-unique-chars\
    \ words)\n    (filter (lambda (word) (= (count-unique-chars word) (max-unique-chars\
    \ words))) words))\n  (apply min (find-max-unique-chars words)))\n", "  (let loop\
    \ ((words words)\n             (max-word (car words))\n             (max-len (length\
    \ (string-&gt;list (car words)))))\n    (cond ((null? words) max-word)\n     \
    \     ((&gt; (length (string-&gt;list (car words))) max-len)\n           (loop\
    \ (cdr words) (car words) (length (string-&gt;list (car words)))))\n         \
    \ ((= (length (string-&gt;list (car words))) max-len)\n           (loop (cdr words)\
    \ (if (&lt; (car words) max-word) (car words) max-word) max-len))\n          (else\
    \ (loop (cdr words) max-word max-len)))))\n</code>\n", "  (define (unique-chars\
    \ word)\n    (set-member-equality-test string=?)\n    (set (for/list ([c (in-string\
    \ word)])\n           (string-append (list c)))))\n  (define (count-unique-chars\
    \ word)\n    (length (unique-chars word)))\n  (define (max-unique-chars words)\n\
    \    (apply max (map count-unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (\u03BB (word) (= (count-unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (define (first-in-lex words)\n    (apply min\
    \ words))\n  (first-in-lex (max-unique-words words)))\n", "  (define (helper words\
    \ max-word)\n    (cond [(empty? words) max-word]\n          [(> (length (unique\
    \ (first words)))\n              (length (unique max-word)))\n           (helper\
    \ (rest words) (first words))]\n          [else (helper (rest words) max-word)]))\n\
    \  (helper words (first words)))\n", "  (define (unique-chars word)\n    (set-difference\
    \ (string->list word) (string->list (first words))))\n  (define (max-unique-chars\
    \ word)\n    (length (unique-chars word)))\n  (define (max-unique-chars-word word)\n\
    \    (if (equal? (max-unique-chars word) (max-unique-chars (first words)))\n \
    \       word\n        (max-unique-chars-word (rest words))))\n  (max-unique-chars-word\
    \ words))\n", "  (let loop ((words words)\n             (max-word (car words))\n\
    \             (max-len (length (remove-duplicates (string->list (car words))))))\n\
    \    (cond ((null? words) max-word)\n          ((> (length (remove-duplicates\
    \ (string->list (car words)))) max-len)\n           (loop (cdr words) (car words)\
    \ (length (remove-duplicates (string->list (car words))))))\n          ((= (length\
    \ (remove-duplicates (string->list (car words)))) max-len)\n           (if (string<?\
    \ (car words) max-word)\n               (loop (cdr words) (car words) (length\
    \ (remove-duplicates (string->list (car words)))))\n               (loop (cdr\
    \ words) max-word (length (remove-duplicates (string->list (car words)))))))\n\
    \          (else (loop (cdr words) max-word max-len)))))\n", "  (let loop ((words\
    \ words)\n             (max-word \"\")\n             (max-count 0))\n    (cond\
    \ ((null? words) max-word)\n          ((> (length (unique-chars (car words)))\
    \ max-count)\n           (loop (cdr words) (car words) (length (unique-chars (car\
    \ words)))))\n          (else (loop (cdr words) max-word max-count)))))\n", " \
    \ (define (count-unique word)\n    (let loop ((word word) (count 0) (uniques '()))\n\
    \      (cond ((null? word) count)\n            ((member (car word) uniques) (loop\
    \ (cdr word) count uniques))\n            (else (loop (cdr word) (+ count 1) (cons\
    \ (car word) uniques))))))\n  (define (max-unique words)\n    (let loop ((words\
    \ words) (max-word \"\") (max-count 0))\n      (cond ((null? words) max-word)\n\
    \            ((> (count-unique (car words)) max-count)\n             (loop (cdr\
    \ words) (car words) (count-unique (car words))))\n            (else (loop (cdr\
    \ words) max-word max-count)))))\n  (max-unique words))\n", "  (define (helper\
    \ words max-word)\n    (if (null? words)\n        max-word\n        (let ([word\
    \ (car words)])\n          (if (&gt; (length (remove-duplicates (string-&gt;list\
    \ word)))\n                 (length (remove-duplicates (string-&gt;list max-word))))\n\
    \              (helper (cdr words) word)\n              (helper (cdr words) max-word)))))\n\
    \  (helper (cdr words) (car words)))\n</code>\n", "  (define (unique-chars word)\n\
    \    (length (remove-duplicates (string->list word))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word)\n              (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (define (first-lex words)\n    (apply min words))\n\
    \  (first-lex (max-unique-words words)))\n", "  (define (unique-chars word)\n\
    \    (define (helper word acc)\n      (cond\n        [(empty? word) acc]\n   \
    \     [(member (first word) acc) (helper (rest word) acc)]\n        [else (helper\
    \ (rest word) (cons (first word) acc))]))\n    (helper word '()))\n  (define (max-unique-chars\
    \ words)\n    (define (helper words acc)\n      (cond\n        [(empty? words)\
    \ acc]\n        [(> (length (unique-chars (first words))) (length acc))\n    \
    \     (helper (rest words) (unique-chars (first words)))]\n        [else (helper\
    \ (rest words) acc)]))\n    (helper words '()))\n  (define (find-max-unique words)\n\
    \    (define (helper words acc)\n      (cond\n        [(empty? words) acc]\n \
    \       [(and (= (length (unique-chars (first words))) (length acc))\n       \
    \       (string<? (first words) acc))\n         (helper (rest words) (first words))]\n\
    \        [(= (length (unique-chars (first words))) (length acc))\n         (helper\
    \ (rest words) acc)]\n        [else (helper (rest words) (first words))]))\n \
    \   (helper words (first words)))\n  (find-max-unique words))\n", "  (define (helper\
    \ words max-word)\n    (cond [(empty? words) max-word]\n          [(> (length\
    \ (unique-chars (first words)))\n              (length (unique-chars max-word)))\n\
    \           (helper (rest words) (first words))]\n          [else (helper (rest\
    \ words) max-word)]))\n  (helper words (first words)))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (string-append\
    \ word))))\n  (define (max-unique-chars words)\n    (apply max (map unique-chars\
    \ words)))\n  (define (max-unique-words words)\n    (filter (lambda (word) (=\
    \ (unique-chars word) (max-unique-chars words))) words))\n  (define (first-lexicographically\
    \ words)\n    (apply min words))\n  (first-lexicographically (max-unique-words\
    \ words)))\n", "  (define (unique-chars word)\n    (set-difference (string->list\
    \ word)\n                    (string->list (first words))))\n  (define (max-unique-chars\
    \ word1 word2)\n    (cond ((> (length (unique-chars word1))\n              (length\
    \ (unique-chars word2)))\n           word1)\n          ((< (length (unique-chars\
    \ word1))\n              (length (unique-chars word2)))\n           word2)\n \
    \         (else\n           (if (string<? word1 word2)\n               word1\n\
    \               word2))))\n  (foldl max-unique-chars (first words) (rest words)))\n",
  "  (let loop ((words words)\n             (max-word (car words))\n             (max-count\
    \ (count-unique-chars (car words))))\n    (cond ((null? words) max-word)\n   \
    \       ((> (count-unique-chars (car words)) max-count)\n           (loop (cdr\
    \ words) (car words) (count-unique-chars (car words))))\n          (else (loop\
    \ (cdr words) max-word max-count)))))\n", "  (define (count-unique word)\n   \
    \ (define (count-unique-iter word seen)\n      (cond [(empty? word) (length seen)]\n\
    \            [(member (first word) seen) (count-unique-iter (rest word) seen)]\n\
    \            [else (count-unique-iter (rest word) (cons (first word) seen))]))\n\
    \    (count-unique-iter word '()))\n  (define (find-max-iter words max-word)\n\
    \    (cond [(empty? words) max-word]\n          [(> (count-unique (first words))\
    \ (count-unique max-word))\n           (find-max-iter (rest words) (first words))]\n\
    \          [else (find-max-iter (rest words) max-word)]))\n  (find-max-iter words\
    \ (first words)))\n", "  (define (unique-chars word)\n    (define (helper word\
    \ seen)\n      (cond\n        [(empty? word) seen]\n        [(member (first word)\
    \ seen) (helper (rest word) seen)]\n        [else (helper (rest word) (cons (first\
    \ word) seen))]))\n    (helper word '()))\n  (define (max-unique-chars words)\n\
    \    (cond\n      [(empty? words) '()]\n      [(empty? (rest words)) (unique-chars\
    \ (first words))]\n      [else (if (> (length (unique-chars (first words)))\n\
    \                  (length (unique-chars (first (rest words)))))\n           \
    \    (max-unique-chars (cons (first words) (rest (rest words))))\n           \
    \    (max-unique-chars (rest words)))]))\n  (define (find-max words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(empty? (rest words)) (first words)]\n   \
    \   [else (if (> (length (unique-chars (first words)))\n                  (length\
    \ (unique-chars (first (rest words)))))\n               (find-max (cons (first\
    \ words) (rest (rest words))))\n               (find-max (rest words)))]))\n \
    \ (find-max words))\n", "  (define (max-unique-chars word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-chars-word word1 word2)\n    (cond\n\
    \      [(> (max-unique-chars word1) (max-unique-chars word2)) word1]\n      [(<\
    \ (max-unique-chars word1) (max-unique-chars word2)) word2]\n      [else (if (string<?\
    \ word1 word2) word1 word2)]))\n  (foldl max-unique-chars-word (car words) (cdr\
    \ words)))\n", "  (define (count-unique word)\n    (define (count-unique-helper\
    \ word seen)\n      (cond\n        [(empty? word) (length seen)]\n        [(member\
    \ (first word) seen) (count-unique-helper (rest word) seen)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) seen))]))\n    (count-unique-helper word empty))\n\
    \  (define (find-max-helper words max-word max-count)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (count-unique (first words)) max-count)\n      \
    \ (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-count)\n       (cond\n         [(string<?\
    \ (first words) max-word) (find-max-helper (rest words) (first words) max-count)]\n\
    \         [else (find-max-helper (rest words) max-word max-count)])]\n      [else\
    \ (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper words\
    \ (first words) (count-unique (first words))))\n", "  (let loop ((words words)\n\
    \             (max-word (car words))\n             (max-count (length (remove-duplicates\
    \ (string->list (car words)))))\n             (count 0))\n    (cond ((null? words)\
    \ max-word)\n          ((> (length (remove-duplicates (string->list (car words))))\
    \ max-count)\n           (loop (cdr words) (car words) (length (remove-duplicates\
    \ (string->list (car words)))) (+ count 1)))\n          ((= (length (remove-duplicates\
    \ (string->list (car words)))) max-count)\n           (if (< (string-ci<? (car\
    \ words) max-word) 0)\n               (loop (cdr words) (car words) (length (remove-duplicates\
    \ (string->list (car words)))) (+ count 1))\n               (loop (cdr words)\
    \ max-word max-count (+ count 1))))\n          (else (loop (cdr words) max-word\
    \ max-count (+ count 1))))))\n", "  (let loop ((words words)\n             (max-word\
    \ (car words))\n             (max-count (length (remove-duplicates (string->list\
    \ (car words)))))\n             (count 0))\n    (cond ((null? words) max-word)\n\
    \          ((> (length (remove-duplicates (string->list (car words)))) max-count)\n\
    \           (loop (cdr words) (car words) (length (remove-duplicates (string->list\
    \ (car words)))) (+ count 1)))\n          ((= (length (remove-duplicates (string->list\
    \ (car words)))) max-count)\n           (if (< count (string-ci<? (car words)\
    \ max-word))\n               (loop (cdr words) (car words) (length (remove-duplicates\
    \ (string->list (car words)))) (+ count 1))\n               (loop (cdr words)\
    \ max-word max-count (+ count 1))))\n          (else (loop (cdr words) max-word\
    \ max-count (+ count 1))))))\n", "  (define (count-unique word)\n    (define (count-unique-helper\
    \ word seen)\n      (cond\n        [(empty? word) (length seen)]\n        [(member\
    \ (first word) seen) (count-unique-helper (rest word) seen)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) seen))]))\n    (count-unique-helper word '()))\n\
    \  (define (find-max-helper words max-word max-count)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (count-unique (first words)) max-count)\n      \
    \ (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-count)\n       (cond\n         [(string<?\
    \ (first words) max-word)\n          (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n         [else (find-max-helper (rest words)\
    \ max-word max-count)])]\n      [else (find-max-helper (rest words) max-word max-count)]))\n\
    \  (find-max-helper words (first words) (count-unique (first words))))\n", " \
    \ (let loop ((words words)\n             (max-word \"\")\n             (max-count\
    \ 0))\n    (cond ((null? words) max-word)\n          ((> (length (unique-chars\
    \ (car words))) max-count)\n           (loop (cdr words) (car words) (length (unique-chars\
    \ (car words)))))\n          (else (loop (cdr words) max-word max-count)))))\n",
  "  (let loop ((words words)\n             (max-word (car words))\n             (max-count\
    \ (count-unique-chars (car words))))\n    (cond ((null? words) max-word)\n   \
    \       ((> (count-unique-chars (car words)) max-count)\n           (loop (cdr\
    \ words) (car words) (count-unique-chars (car words))))\n          (else (loop\
    \ (cdr words) max-word max-count)))))\n", "  (define (unique-chars word)\n   \
    \ (let loop ((chars '()) (word word))\n      (cond ((null? word) chars)\n    \
    \        ((member (car word) chars) (loop chars (cdr word)))\n            (else\
    \ (loop (cons (car word) chars) (cdr word))))))\n  (let loop ((words words) (max-word\
    \ '()) (max-chars 0))\n    (cond ((null? words) max-word)\n          ((> (length\
    \ (unique-chars (car words))) max-chars)\n           (loop (cdr words) (car words)\
    \ (length (unique-chars (car words)))))\n          (else (loop (cdr words) max-word\
    \ max-chars)))))\n", "  (define (max-word max-word-so-far word)\n    (if (or (null?\
    \ word)\n            (string<? (string-length (unique-chars max-word-so-far))\n\
    \                      (string-length (unique-chars word))))\n        max-word-so-far\n\
    \        word))\n  (foldl max-word (car words) (cdr words)))\n", "  (let loop\
    \ ((words words)\n             (max-word (car words))\n             (max-count\
    \ (count-unique-chars (car words))))\n    (cond ((null? words) max-word)\n   \
    \       ((&gt; (count-unique-chars (car words)) max-count)\n           (loop (cdr\
    \ words) (car words) (count-unique-chars (car words))))\n          (else (loop\
    \ (cdr words) max-word max-count)))))\n", "  (define (helper words max-word)\n\
    \    (cond [(empty? words) max-word]\n          [(> (length (unique-chars (first\
    \ words)))\n              (length (unique-chars max-word)))\n           (helper\
    \ (rest words) (first words))]\n          [else (helper (rest words) max-word)]))\n\
    \  (helper words (first words)))\n", "  (let loop ((words words)\n           \
    \  (max-word (car words))\n             (max-count (count-unique-chars (car words))))\n\
    \    (cond ((null? words) max-word)\n          ((> (count-unique-chars (car words))\
    \ max-count)\n           (loop (cdr words) (car words) (count-unique-chars (car\
    \ words))))\n          (else (loop (cdr words) max-word max-count)))))\n", " \
    \ (define (count-unique word)\n    (define (count-unique-helper word seen)\n \
    \     (cond\n        [(empty? word) (length seen)]\n        [(member (first word)\
    \ seen) (count-unique-helper (rest word) seen)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) seen))]))\n    (count-unique-helper word empty))\n\
    \  (define (find-max-helper words max-word max-count)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (count-unique (first words)) max-count)\n      \
    \ (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-count)\n       (cond\n         [(string<?\
    \ (first words) max-word)\n          (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n         [else (find-max-helper (rest words)\
    \ max-word max-count)])]\n      [else (find-max-helper (rest words) max-word max-count)]))\n\
    \  (find-max-helper words (first words) (count-unique (first words))))\n", " \
    \ (define (helper words max-word)\n    (cond [(empty? words) max-word]\n     \
    \     [(> (length (unique-chars (first words)))\n              (length (unique-chars\
    \ max-word)))\n           (helper (rest words) (first words))]\n          [else\
    \ (helper (rest words) max-word)]))\n  (helper words (first words)))\n", "  (define\
    \ (helper words max-word max-count)\n    (cond [(empty? words) max-word]\n   \
    \       [(> (length (unique (first words))) max-count)\n           (helper (rest\
    \ words) (first words) (length (unique (first words))))]\n          [else (helper\
    \ (rest words) max-word max-count)]))\n  (helper words (first words) (length (unique\
    \ (first words)))))\n", "  (let loop ((words words)\n             (max-word (car\
    \ words))\n             (max-count (count-unique-chars (car words))))\n    (cond\
    \ ((null? words) max-word)\n          ((> (count-unique-chars (car words)) max-count)\n\
    \           (loop (cdr words) (car words) (count-unique-chars (car words))))\n\
    \          (else (loop (cdr words) max-word max-count)))))\n", "  (define (unique-chars\
    \ word)\n    (define (helper word seen)\n      (cond [(empty? word) seen]\n  \
    \          [(member (first word) seen) (helper (rest word) seen)]\n          \
    \  [else (helper (rest word) (cons (first word) seen))]))\n    (helper word '()))\n\
    \  (define (max-unique-chars words)\n    (cond [(empty? words) '()]\n        \
    \  [(empty? (rest words)) (list (first words))]\n          [else (if (> (length\
    \ (unique-chars (first words)))\n                      (length (unique-chars (second\
    \ words))))\n                   (cons (first words) (max-unique-chars (rest words)))\n\
    \                   (cons (second words) (max-unique-chars (rest (rest words)))))]))\n\
    \  (first (max-unique-chars words)))\n", "  (define (unique-chars word)\n    (define\
    \ (unique-chars-iter word seen)\n      (cond\n        [(empty? word) seen]\n \
    \       [(member (first word) seen) (unique-chars-iter (rest word) seen)]\n  \
    \      [else (unique-chars-iter (rest word) (cons (first word) seen))]))\n   \
    \ (unique-chars-iter word '()))\n  (define (max-unique-chars words)\n    (cond\n\
    \      [(empty? words) 0]\n      [else (max (unique-chars (first words)) (max-unique-chars\
    \ (rest words)))]))\n  (define (find-max-iter words max-unique-chars)\n    (cond\n\
    \      [(empty? words) '()]\n      [(= (unique-chars (first words)) max-unique-chars)\
    \ (first words)]\n      [else (find-max-iter (rest words) max-unique-chars)]))\n\
    \  (find-max-iter words (max-unique-chars words)))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (first words))))\n\
    \  (define (max-unique-chars word)\n    (length (unique-chars word)))\n  (define\
    \ (max-unique-word word)\n    (and (not (empty? (unique-chars word))) word))\n\
    \  (define (max-word word)\n    (and (max-unique-word word)\n         (or (null?\
    \ (first words))\n             (string<? (first words) word))))\n  (define (max-word-so-far\
    \ word)\n    (and (max-word word)\n         (or (null? (first words))\n      \
    \       (> (max-unique-chars word)\n                (max-unique-chars (first words))))))\n\
    \  (cond ((null? words) (error \"empty list\"))\n        ((null? (rest words))\
    \ (first words))\n        (else (find_max (cons (if (max-word-so-far (first words))\n\
    \                                   (first words)\n                          \
    \         (first (rest words)))\n                               (rest (rest words)))))))\n",
  "  (define (unique-chars word)\n    (set-member-equal? (string->list word)))\n \
    \ (define (max-unique-chars word1 word2)\n    (if (> (unique-chars word1) (unique-chars\
    \ word2))\n        word1\n        word2))\n  (foldl max-unique-chars (car words)\
    \ (cdr words)))\n", "  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word word1 word2)\n    (cond ((>\
    \ (count-unique word1) (count-unique word2)) word1)\n          ((< (count-unique\
    \ word1) (count-unique word2)) word2)\n          (else (string<? word1 word2)\
    \ word1 word2)))\n  (foldl max-unique-word (car words) (cdr words)))\n", "  (define\
    \ (count-unique word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-unique-word word1 word2)\n    (cond ((> (count-unique word1) (count-unique\
    \ word2)) word1)\n          ((< (count-unique word1) (count-unique word2)) word2)\n\
    \          (else (if (string<? word1 word2) word1 word2))))\n  (foldl max-unique-word\
    \ (car words) (cdr words)))\n", "  (define (unique-chars word)\n    (set-difference\
    \ (string->list word) (string->list (string-append word))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (first-max-unique-chars\
    \ words)\n    (car (filter (lambda (word) (= (max-unique-chars words) (unique-chars\
    \ word))) words)))\n  (first-max-unique-chars words))\n", "  (let loop ((words\
    \ words)\n             (max-word (car words))\n             (max-count (count-unique-chars\
    \ (car words))))\n    (cond ((null? words) max-word)\n          ((> (count-unique-chars\
    \ (car words)) max-count)\n           (loop (cdr words) (car words) (count-unique-chars\
    \ (car words))))\n          (else (loop (cdr words) max-word max-count)))))\n",
  "  (define (unique-chars word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word)\n            \
    \  (= (unique-chars word) (max-unique-chars words)))\n            words))\n  (car\
    \ (sort (max-unique-words words) string<?)))\n", "  (define (count-unique word)\n\
    \    (define (count-unique-helper word unique-chars)\n      (cond\n        [(empty?\
    \ word) (length unique-chars)]\n        [(member (first word) unique-chars)\n\
    \         (count-unique-helper (rest word) unique-chars)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (count-unique-helper word\
    \ '()))\n  (define (find-max-helper words max-word max-count)\n    (cond\n   \
    \   [(empty? words) max-word]\n      [(> (count-unique (first words)) max-count)\n\
    \       (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-count)\n       (cond\n         [(string<?\
    \ (first words) max-word)\n          (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n         [else (find-max-helper (rest words)\
    \ max-word max-count)])]\n      [else (find-max-helper (rest words) max-word max-count)]))\n\
    \  (find-max-helper words (first words) (count-unique (first words))))\n", " \
    \ (define (count-unique word)\n    (define (helper word seen)\n      (cond\n \
    \       [(empty? word) (length seen)]\n        [(member (first word) seen) (helper\
    \ (rest word) seen)]\n        [else (helper (rest word) (cons (first word) seen))]))\n\
    \    (helper word '()))\n  (define (helper words max-word max-count)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (count-unique (first words)) max-count)\n\
    \       (helper (rest words) (first words) (count-unique (first words)))]\n  \
    \    [(= (count-unique (first words)) max-count)\n       (if (string<? (first\
    \ words) max-word)\n           (helper (rest words) (first words) (count-unique\
    \ (first words)))\n           (helper (rest words) max-word max-count))]\n   \
    \   [else (helper (rest words) max-word max-count)]))\n  (helper words (first\
    \ words) (count-unique (first words))))\n", "  (define (count-unique word)\n \
    \   (define (count-unique-helper word count)\n      (cond\n        [(empty? word)\
    \ count]\n        [(member (first word) (rest word)) (count-unique-helper (rest\
    \ word) count)]\n        [else (count-unique-helper (rest word) (+ count 1))]))\n\
    \    (count-unique-helper word 0))\n  (define (find-max-helper words max-word\
    \ max-count)\n    (cond\n      [(empty? words) max-word]\n      [(> (count-unique\
    \ (first words)) max-count) (find-max-helper (rest words) (first words) (count-unique\
    \ (first words)))]\n      [(= (count-unique (first words)) max-count) (if (string<?\
    \ (first words) max-word) (find-max-helper (rest words) (first words) (count-unique\
    \ (first words))) (find-max-helper (rest words) max-word max-count))]\n      [else\
    \ (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper words\
    \ (first words) (count-unique (first words))))\n", "  (let loop ((words words)\n\
    \             (max-word (car words))\n             (max-count (length (unique-chars\
    \ (car words)))))\n    (cond ((null? words) max-word)\n          ((> (length (unique-chars\
    \ (car words))) max-count)\n           (loop (cdr words) (car words) (length (unique-chars\
    \ (car words)))))\n          (else (loop (cdr words) max-word max-count)))))\n",
  "  (define (helper words max-word max-len)\n    (cond [(empty? words) max-word]\n\
    \          [(> (length (unique (first words))) max-len)\n           (helper (rest\
    \ words) (first words) (length (unique (first words))))]\n          [else (helper\
    \ (rest words) max-word max-len)]))\n  (helper words (first words) (length (unique\
    \ (first words)))))\n", "  (define (unique-chars word)\n    (set-difference (string->list\
    \ word) (string->list (string-append word (string-append word)))))\n  (define\
    \ (max-unique-chars words)\n    (apply max (map unique-chars words)))\n  (define\
    \ (max-unique-words words)\n    (filter (lambda (word) (= (max-unique-chars words)\
    \ (unique-chars word))) words))\n  (define (lexicographical-order words)\n   \
    \ (sort words string<?))\n  (first (lexicographical-order (max-unique-words words))))\n",
  "  (define (helper words max-word)\n    (cond [(empty? words) max-word]\n      \
    \    [(> (length (unique (first words)))\n              (length (unique max-word)))\n\
    \           (helper (rest words) (first words))]\n          [else (helper (rest\
    \ words) max-word)]))\n  (helper words (first words)))\n", "  (define (find-max-helper\
    \ words max-word max-count)\n    (cond [(empty? words) max-word]\n          [(>\
    \ (count-unique (first words)) max-count)\n           (find-max-helper (rest words)\
    \ (first words) (count-unique (first words)))]\n          [else (find-max-helper\
    \ (rest words) max-word max-count)]))\n  (find-max-helper words (first words)\
    \ (count-unique (first words))))\n", "  (define (unique-chars word)\n    (define\
    \ (helper word chars)\n      (cond [(empty? word) chars]\n            [(member\
    \ (first word) chars) (helper (rest word) chars)]\n            [else (helper (rest\
    \ word) (cons (first word) chars))]))\n    (helper word '()))\n  (define (max-chars\
    \ words)\n    (cond [(empty? words) '()]\n          [(empty? (rest words)) (list\
    \ (first words))]\n          [else (if (> (length (unique-chars (first words)))\n\
    \                      (length (unique-chars (second words))))\n             \
    \      (cons (first words) (max-chars (rest words)))\n                   (cons\
    \ (second words) (max-chars (rest (rest words)))))]))\n  (define (lexicographical-order\
    \ words)\n    (cond [(empty? words) '()]\n          [(empty? (rest words)) (list\
    \ (first words))]\n          [else (if (< (first words) (second words))\n    \
    \               (cons (first words) (lexicographical-order (rest words)))\n  \
    \                 (cons (second words) (lexicographical-order (rest (rest words)))))]))\n\
    \  (lexicographical-order (max-chars words)))\n", "  (define (count-unique word)\n\
    \    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word\
    \ word1 word2)\n    (if (&gt; (count-unique word1) (count-unique word2))\n   \
    \     word1\n        word2))\n  (foldl max-unique-word (first words) (rest words)))\n\
    </code>\n", "  (define (unique-chars word)\n    (length (remove-duplicates (string->list\
    \ word))))\n  (define (max-unique-chars words)\n    (apply max (map unique-chars\
    \ words)))\n  (define (max-unique-words words)\n    (filter (lambda (word)\n \
    \             (= (unique-chars word) (max-unique-chars words)))\n            words))\n\
    \  (apply min (max-unique-words words)))\n", "  (define (count-unique word)\n\
    \    (define (count-unique-helper word unique-chars)\n      (cond [(empty? word)\
    \ (length unique-chars)]\n            [(member (first word) unique-chars)\n  \
    \           (count-unique-helper (rest word) unique-chars)]\n            [else\
    \ (count-unique-helper (rest word)\n                                       (cons\
    \ (first word) unique-chars))]))\n    (count-unique-helper word '()))\n  (define\
    \ (find-max-helper words max-word max-count)\n    (cond [(empty? words) max-word]\n\
    \          [(> (count-unique (first words)) max-count)\n           (find-max-helper\
    \ (rest words) (first words)\n                            (count-unique (first\
    \ words)))]\n          [(= (count-unique (first words)) max-count)\n         \
    \  (cond [(string<? (first words) max-word)\n                  (find-max-helper\
    \ (rest words) (first words) max-count)]\n                 [else (find-max-helper\
    \ (rest words) max-word max-count)])]\n          [else (find-max-helper (rest\
    \ words) max-word max-count)]))\n  (find-max-helper words (first words) (count-unique\
    \ (first words))))\n", "  (define (unique-chars word)\n    (set-difference (string->list\
    \ word) (string->list (first words))))\n  (define (max-unique-chars word)\n  \
    \  (length (unique-chars word)))\n  (define (max-unique-chars-word word)\n   \
    \ (if (null? (cdr words))\n        word\n        (if (> (max-unique-chars word)\
    \ (max-unique-chars (second words)))\n            word\n            (max-unique-chars-word\
    \ (second words)))))\n  (max-unique-chars-word (first words)))\n", "  (define\
    \ (unique-chars word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (find-max-unique-chars words)\n    (filter (lambda (word) (= (unique-chars\
    \ word) (max-unique-chars words))) words))\n  (apply min (find-max-unique-chars\
    \ words)))\n", "  (define (count-unique word)\n    (define (count-unique-helper\
    \ word seen)\n      (cond\n        [(empty? word) (length seen)]\n        [(member\
    \ (first word) seen) (count-unique-helper (rest word) seen)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) seen))]))\n    (count-unique-helper word '()))\n\
    \  (define (find-max-helper words max-word max-count)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (count-unique (first words)) max-count)\n      \
    \ (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-count)\n       (cond\n         [(string<?\
    \ (first words) max-word)\n          (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n         [else (find-max-helper (rest words)\
    \ max-word max-count)])]\n      [else (find-max-helper (rest words) max-word max-count)]))\n\
    \  (find-max-helper words (first words) (count-unique (first words))))\n", " \
    \ (define (helper words max-word max-count)\n    (cond [(empty? words) max-word]\n\
    \          [(> (count-unique (first words)) max-count)\n           (helper (rest\
    \ words) (first words) (count-unique (first words)))]\n          [else (helper\
    \ (rest words) max-word max-count)]))\n  (helper words (first words) (count-unique\
    \ (first words))))\n", "  (define (helper words max-word max-count)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (count-unique (first words)) max-count)\n\
    \       (helper (rest words) (first words) (count-unique (first words)))]\n  \
    \    [else (helper (rest words) max-word max-count)]))\n  (helper words (first\
    \ words) (count-unique (first words))))\n", "  (define (max-word words)\n    (if\
    \ (null? words)\n        (error \"No words\")\n        (let loop ((words words)\n\
    \                   (max-word (car words))\n                   (max-count (count-unique-chars\
    \ (car words))))\n          (if (null? words)\n              max-word\n      \
    \        (let ((count (count-unique-chars (car words))))\n                (if\
    \ (&gt; count max-count)\n                    (loop (cdr words) (car words) count)\n\
    \                    (if (= count max-count)\n                        (if (string&lt;?\
    \ (car words) max-word)\n                            (loop (cdr words) (car words)\
    \ count)\n                            (loop (cdr words) max-word count))\n   \
    \                     (loop (cdr words) max-word max-count))))))))\n  (max-word\
    \ words))\n", "  (let loop ((words words)\n             (max-word (car words))\n\
    \             (max-count (length (remove-duplicates (string->list (car words)))))\n\
    \             (rest (cdr words)))\n    (cond ((null? rest) max-word)\n       \
    \   ((> (length (remove-duplicates (string->list (car rest)))) max-count)\n  \
    \         (loop rest (car rest) (length (remove-duplicates (string->list (car\
    \ rest)))) (cdr rest)))\n          (else (loop rest max-word max-count (cdr rest))))))\n",
  "  (define (count-unique word)\n    (define (helper word seen)\n      (cond\n  \
    \      [(empty? word) (length seen)]\n        [(member (first word) seen) (helper\
    \ (rest word) seen)]\n        [else (helper (rest word) (cons (first word) seen))]))\n\
    \    (helper word empty))\n  (define (find-max-helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (count-unique (first words)) (count-unique\
    \ max-word))\n       (find-max-helper (rest words) (first words))]\n      [else\
    \ (find-max-helper (rest words) max-word)]))\n  (find-max-helper (rest words)\
    \ (first words)))\n", "  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique? word)\n    (= (count-unique word)\n\
    \       (count-unique (first words))))\n  (cond\n    [(empty? words) empty]\n\
    \    [(max-unique? (first words)) (first words)]\n    [else (find-max (rest words))]))\n",
  "  (define (helper words max-word max-count)\n    (cond [(empty? words) max-word]\n\
    \          [(> (count-unique (first words)) max-count)\n           (helper (rest\
    \ words) (first words) (count-unique (first words)))]\n          [else (helper\
    \ (rest words) max-word max-count)]))\n  (helper words \"\" 0))\n", "  (let loop\
    \ ((words words)\n             (max-word (car words))\n             (max-count\
    \ (length (unique-chars (car words)))))\n    (cond ((null? words) max-word)\n\
    \          ((> (length (unique-chars (car words))) max-count)\n           (loop\
    \ (cdr words) (car words) (length (unique-chars (car words)))))\n          (else\
    \ (loop (cdr words) max-word max-count)))))\n", "  (let loop ((words words)\n\
    \             (max-word (car words))\n             (max-count (length (unique-chars\
    \ (car words)))))\n    (cond ((null? words) max-word)\n          ((> (length (unique-chars\
    \ (car words))) max-count)\n           (loop (cdr words) (car words) (length (unique-chars\
    \ (car words)))))\n          (else (loop (cdr words) max-word max-count)))))\n",
  "  (define (find-max-helper words max-word max-count)\n    (cond [(empty? words)\
    \ max-word]\n          [(> (count-unique (first words)) max-count)\n         \
    \  (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \          [else (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper\
    \ words (first words) (count-unique (first words))))\n", "  (define (count-unique\
    \ word)\n    (define (count-unique-helper word unique-chars)\n      (cond\n  \
    \      [(empty? word) (length unique-chars)]\n        [(member (first word) unique-chars)\n\
    \         (count-unique-helper (rest word) unique-chars)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (count-unique-helper word\
    \ '()))\n  (define (find-max-helper words max-word max-unique-count)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (count-unique (first words)) max-unique-count)\n\
    \       (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-unique-count)\n       (cond\n    \
    \     [(string<? (first words) max-word)\n          (find-max-helper (rest words)\
    \ (first words) (count-unique (first words)))]\n         [else (find-max-helper\
    \ (rest words) max-word max-unique-count)])]\n      [else (find-max-helper (rest\
    \ words) max-word max-unique-count)]))\n  (find-max-helper words (first words)\
    \ (count-unique (first words))))\n```\n\n### Problem 4\n\n```racket\n#lang racket\n",
  "  (define (count-unique word)\n    (define (count-unique-helper word seen)\n  \
    \    (cond\n        [(empty? word) (length seen)]\n        [(member (first word)\
    \ seen) (count-unique-helper (rest word) seen)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) seen))]))\n    (count-unique-helper word empty))\n\
    \  (define (max-unique-helper words max-word max-count)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (count-unique (first words)) max-count)\n      \
    \ (max-unique-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-count)\n       (cond\n         [(string<?\
    \ (first words) max-word)\n          (max-unique-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n         [else (max-unique-helper (rest words)\
    \ max-word max-count)])]\n      [else (max-unique-helper (rest words) max-word\
    \ max-count)]))\n  (max-unique-helper words (first words) (count-unique (first\
    \ words))))\n", "  (define (helper words max-word max-count)\n    (cond [(empty?\
    \ words) max-word]\n          [(> (count-unique (first words)) max-count)\n  \
    \         (helper (rest words) (first words) (count-unique (first words)))]\n\
    \          [else (helper (rest words) max-word max-count)]))\n  (helper words\
    \ \"\" 0))\n", "  (define (unique-chars word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (max-unique-words words)\n    (filter (lambda\
    \ (word)\n              (= (unique-chars word) (max-unique-chars words)))\n  \
    \          words))\n  (apply min (max-unique-words words)))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (string-append\
    \ word (string-append word)))))\n  (define (max-unique-chars words)\n    (apply\
    \ max (map unique-chars words)))\n  (define (max-unique-words words)\n    (filter\
    \ (lambda (word) (= (unique-chars word) (max-unique-chars words))) words))\n \
    \ (define (lexicographical-order words)\n    (sort words string<?))\n  (car (lexicographical-order\
    \ (max-unique-words words))))\n", "  (let ([max-word (car words)]\n        [max-count\
    \ (length (unique-chars (car words)))]\n        [current-word (cadr words)]\n\
    \        [current-count (length (unique-chars (cadr words)))])\n    (for ([word\
    \ (cdr (cdr words))])\n      (set! current-word word)\n      (set! current-count\
    \ (length (unique-chars word)))\n      (cond\n        [(> current-count max-count)\n\
    \         (set! max-word current-word)\n         (set! max-count current-count)]\n\
    \        [(and (= current-count max-count)\n              (string<? current-word\
    \ max-word))\n         (set! max-word current-word)]))\n    max-word))\n", " \
    \ (let loop ((words words)\n             (max-word (car words))\n            \
    \ (max-len (length (remove-duplicates (string->list (car words))))))\n    (cond\
    \ [(empty? words) max-word]\n          [(> (length (remove-duplicates (string->list\
    \ (car words)))) max-len)\n           (loop (cdr words) (car words) (length (remove-duplicates\
    \ (string->list (car words)))))\n           ]\n          [else (loop (cdr words)\
    \ max-word max-len)])))\n", "  (let loop ((words words)\n             (max-word\
    \ (car words))\n             (max-count (length (remove-duplicates (string->list\
    \ (car words)))))\n             (max-index 0)\n             (index 0))\n    (cond\
    \ ((null? words) max-word)\n          ((> (length (remove-duplicates (string->list\
    \ (car words)))) max-count)\n           (loop (cdr words)\n                 (car\
    \ words)\n                 (length (remove-duplicates (string->list (car words))))\n\
    \                 index\n                 (+ index 1)))\n          ((= (length\
    \ (remove-duplicates (string->list (car words)))) max-count)\n           (if (<\
    \ index max-index)\n               (loop (cdr words)\n                     (car\
    \ words)\n                     (length (remove-duplicates (string->list (car words))))\n\
    \                     index\n                     (+ index 1))\n             \
    \  (loop (cdr words)\n                     max-word\n                     max-count\n\
    \                     max-index\n                     (+ index 1))))\n       \
    \   (else (loop (cdr words)\n                      max-word\n                \
    \      max-count\n                      max-index\n                      (+ index\
    \ 1))))))\n", "  (define (find-max-helper words max-word max-count)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (length (unique (first words))) max-count)\n\
    \       (find-max-helper (rest words) (first words) (length (unique (first words))))]\n\
    \      [else (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper\
    \ words (first words) (length (unique (first words)))))\n", "  (let loop ((words\
    \ words)\n             (max-word (car words))\n             (max-count (length\
    \ (unique-chars (car words)))))\n    (cond ((null? words) max-word)\n        \
    \  ((&gt; (length (unique-chars (car words))) max-count)\n           (loop (cdr\
    \ words) (car words) (length (unique-chars (car words)))))\n          ((= (length\
    \ (unique-chars (car words))) max-count)\n           (if (string&lt;? (car words)\
    \ max-word)\n               (loop (cdr words) (car words) (length (unique-chars\
    \ (car words))))\n               (loop (cdr words) max-word max-count)))\n   \
    \       (else (loop (cdr words) max-word max-count)))))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (first words))))\n\
    \  (define (max-unique-chars word)\n    (length (unique-chars word)))\n  (define\
    \ (max-word word1 word2)\n    (if (&gt; (max-unique-chars word1) (max-unique-chars\
    \ word2))\n        word1\n        word2))\n  (foldl max-word (first words) (rest\
    \ words)))\n</code>\n", "  (define (max-word words)\n    (define (max-word-helper\
    \ words max-word max-count)\n      (cond [(empty? words) max-word]\n         \
    \   [(> (length (unique-chars (first words))) max-count)\n             (max-word-helper\
    \ (rest words) (first words) (length (unique-chars (first words))))]\n       \
    \     [else (max-word-helper (rest words) max-word max-count)]))\n    (max-word-helper\
    \ words (first words) (length (unique-chars (first words)))))\n  (max-word words))\n",
  "  (let loop ((words words)\n             (max-word (car words))\n             (max-count\
    \ (length (unique-chars (car words)))))\n    (cond ((null? words) max-word)\n\
    \          ((> (length (unique-chars (car words))) max-count)\n           (loop\
    \ (cdr words) (car words) (length (unique-chars (car words)))))\n          (else\
    \ (loop (cdr words) max-word max-count)))))\n", "  (define (unique-chars word)\n\
    \    (set-difference (string->list word) (string->list (string-append word))))\n\
    \  (define (max-unique-chars word1 word2)\n    (if (> (length (unique-chars word1))\
    \ (length (unique-chars word2)))\n        word1\n        word2))\n  (foldl max-unique-chars\
    \ (car words) (cdr words)))\n", "  (define (unique-chars word)\n    (set-difference\
    \ (string->list word) (string->list (first words))))\n  (define (max-unique-chars\
    \ word)\n    (length (unique-chars word)))\n  (define (max-word word)\n    (and\
    \ (or (null? (first words))\n             (string<? (first words) word))\n   \
    \      (string<? word (first words))))\n  (foldl (\u03BB (word max)\n        \
    \   (if (> (max-unique-chars word) (max-unique-chars max))\n               word\n\
    \               max))\n         (first words)\n         (rest words)))\n", " \
    \ (define (count-unique word)\n    (define (helper word seen)\n      (cond\n \
    \       [(empty? word) (length seen)]\n        [(member (first word) seen) (helper\
    \ (rest word) seen)]\n        [else (helper (rest word) (cons (first word) seen))]))\n\
    \    (helper word '()))\n  (define (helper words max-word max-count)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (count-unique (first words)) max-count)\n\
    \       (helper (rest words) (first words) (count-unique (first words)))]\n  \
    \    [(= (count-unique (first words)) max-count)\n       (if (string<? (first\
    \ words) max-word)\n           (helper (rest words) (first words) (count-unique\
    \ (first words)))\n           (helper (rest words) max-word max-count))]\n   \
    \   [else (helper (rest words) max-word max-count)]))\n  (helper words (first\
    \ words) (count-unique (first words))))\n```\n\n## Problem 5\n\n```racket\n#lang\
    \ racket\n", "  (define (helper words max-word max-unique)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (length (unique (first words))) max-unique)\n  \
    \     (helper (rest words) (first words) (length (unique (first words))))]\n \
    \     [(= (length (unique (first words))) max-unique)\n       (if (string<? (first\
    \ words) max-word)\n           (helper (rest words) (first words) (length (unique\
    \ (first words))))\n           (helper (rest words) max-word max-unique))]\n \
    \     [else (helper (rest words) max-word max-unique)]))\n  (helper words (first\
    \ words) (length (unique (first words)))))\n", "  (define (unique-chars word)\n\
    \    (set-member-equal? (string->list word)))\n  (define (max-unique-chars word1\
    \ word2)\n    (cond\n      [(> (unique-chars word1) (unique-chars word2)) word1]\n\
    \      [(< (unique-chars word1) (unique-chars word2)) word2]\n      [else (if\
    \ (string<? word1 word2) word1 word2)]))\n  (foldl max-unique-chars \"\" words))\n",
  "  (define (unique-chars word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word)\n            \
    \  (= (unique-chars word) (max-unique-chars words)))\n            words))\n  (car\
    \ (sort (max-unique-words words) string<?)))\n", "  (let loop ((words words)\n\
    \             (max-word (car words))\n             (max-count (count-unique-chars\
    \ (car words))))\n    (cond\n      [(null? words) max-word]\n      [(> (count-unique-chars\
    \ (car words)) max-count)\n       (loop (cdr words) (car words) (count-unique-chars\
    \ (car words)))]\n      [else (loop (cdr words) max-word max-count)])))\n", " \
    \ (define (unique-chars word)\n    (set-difference (string->list word) (string->list\
    \ (substring word 1))))\n  (define (max-unique-chars word)\n    (length (unique-chars\
    \ word)))\n  (define (max-unique-chars-word word1 word2)\n    (cond ((> (max-unique-chars\
    \ word1) (max-unique-chars word2)) word1)\n          ((< (max-unique-chars word1)\
    \ (max-unique-chars word2)) word2)\n          (else (if (string<? word1 word2)\
    \ word1 word2))))\n  (foldl max-unique-chars-word (car words) (cdr words)))\n",
  "  (define (count-unique word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (find-max-helper words max-word max-count)\n    (cond [(empty? words)\
    \ max-word]\n          [(> (count-unique (first words)) max-count)\n         \
    \  (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \          [(= (count-unique (first words)) max-count)\n           (cond [(string<?\
    \ (first words) max-word)\n                  (find-max-helper (rest words) (first\
    \ words) (count-unique (first words)))]\n                 [else (find-max-helper\
    \ (rest words) max-word max-count)])]\n          [else (find-max-helper (rest\
    \ words) max-word max-count)]))\n  (find-max-helper words \"\" 0))\n", "  (let\
    \ loop ((words words)\n             (max-word (car words))\n             (max-count\
    \ (length (remove-duplicates (string->list (car words)))))\n             (count\
    \ 0))\n    (cond\n      [(empty? words) max-word]\n      [(> (length (remove-duplicates\
    \ (string->list (car words)))) max-count)\n       (loop (cdr words) (car words)\
    \ (length (remove-duplicates (string->list (car words)))) (+ count 1))]\n    \
    \  [(= (length (remove-duplicates (string->list (car words)))) max-count)\n  \
    \     (if (string<? (car words) max-word)\n           (loop (cdr words) (car words)\
    \ (length (remove-duplicates (string->list (car words)))) (+ count 1))\n     \
    \      (loop (cdr words) max-word (length (remove-duplicates (string->list (car\
    \ words)))) (+ count 1)))]\n      [else (loop (cdr words) max-word max-count (+\
    \ count 1))])))\n", "  (define (unique-chars word)\n    (set! word (string-&gt;list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list-&gt;string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-so-far)\n      (cond ((null? words) max-so-far)\n            ((&gt; (string-length\
    \ (unique-chars (car words)))\n                (string-length (unique-chars max-so-far)))\n\
    \             (max-unique-chars-iter (cdr words) (car words)))\n            (else\
    \ (max-unique-chars-iter (cdr words) max-so-far))))\n    (max-unique-chars-iter\
    \ words (car words)))\n  (max-unique-chars words))\n</code>\n", "  (define (helper\
    \ words max-word)\n    (cond\n      [(empty? words) max-word]\n      [(> (length\
    \ (unique-chars (first words)))\n          (length (unique-chars max-word)))\n\
    \       (helper (rest words) (first words))]\n      [else (helper (rest words)\
    \ max-word)]))\n  (helper words (first words)))\n", "  (define (unique-chars word)\n\
    \    (set-difference (string->list word) (string->list (first words))))\n  (define\
    \ (max-unique-chars word1 word2)\n    (if (> (length (unique-chars word1)) (length\
    \ (unique-chars word2)))\n        word1\n        word2))\n  (define (find-max-helper\
    \ words)\n    (if (null? (cdr words))\n        (car words)\n        (max-unique-chars\
    \ (car words) (find-max-helper (cdr words)))))\n  (find-max-helper words))\n",
  "  (define (count-unique word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-unique-word word1 word2)\n    (cond ((> (count-unique word1) (count-unique\
    \ word2)) word1)\n          ((< (count-unique word1) (count-unique word2)) word2)\n\
    \          (else (if (string<? word1 word2) word1 word2))))\n  (foldl max-unique-word\
    \ (car words) (cdr words)))\n", "  (define (unique-chars word)\n    (set-difference\
    \ (string->list word) (string->list (string-append word))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word) (= (max-unique-chars words) (unique-chars\
    \ word))) words))\n  (define (lexicographically-first words)\n    (apply min words))\n\
    \  (lexicographically-first (max-unique-words words)))\n", "  (define (unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (apply max (map\
    \ unique-chars words)))\n", "  (define (max-word words)\n    (if (null? words)\n\
    \        '()\n        (let ([word (car words)])\n          (if (null? (cdr words))\n\
    \              word\n              (let ([next-word (max-word (cdr words))])\n\
    \                (if (&gt; (length (unique-chars word))\n                    \
    \   (length (unique-chars next-word)))\n                    word\n           \
    \         next-word))))))\n  (max-word words))\n", "  (define (unique-chars word)\n\
    \    (set-difference (string->list word)\n                    (string->list (string-join\
    \ (remove-duplicates (string->list word))))))\n  (define (max-unique-chars words)\n\
    \    (apply max (map unique-chars words)))\n  (define (max-unique-words words)\n\
    \    (filter (lambda (word) (= (unique-chars word) (max-unique-chars words)))\n\
    \            words))\n  (define (lexicographically-first word1 word2)\n    (cond\
    \ ((string<? word1 word2) word1)\n          ((string<? word2 word1) word2)\n \
    \         (else word1)))\n  (apply lexicographically-first (max-unique-words words)))\n",
  "  (define (unique-chars word)\n    (set-difference (string->list word) (string->list\
    \ (first words))))\n  (define (max-unique-chars word)\n    (length (unique-chars\
    \ word)))\n  (define (max-unique-chars-word word)\n    (if (null? (cdr words))\n\
    \        word\n        (if (> (max-unique-chars word) (max-unique-chars (second\
    \ words)))\n            word\n            (max-unique-chars-word (second words)))))\n\
    \  (max-unique-chars-word (first words)))\n", "  (define (unique-chars word)\n\
    \    (set-difference (string->list word) (string->list (first words))))\n  (define\
    \ (max-unique-chars word)\n    (length (unique-chars word)))\n  (define (max-unique-chars-word\
    \ word)\n    (if (or (null? (cdr words))\n            (&gt;= (max-unique-chars\
    \ word)\n                 (max-unique-chars (cadr words))))\n        word\n  \
    \      (max-unique-chars-word (cadr words))))\n  (max-unique-chars-word (first\
    \ words)))\n</code>\n", "  (define (unique-chars word)\n    (set-difference (string->list\
    \ word) (string->list (substring word 1))))\n  (define (max-unique-chars words)\n\
    \    (apply max (map unique-chars words)))\n  (define (max-unique-words words)\n\
    \    (filter (lambda (word) (= (unique-chars word) (max-unique-chars words)))\
    \ words))\n  (define (first-in-lexicographical-order words)\n    (apply min words))\n\
    \  (first-in-lexicographical-order (max-unique-words words)))\n", "  (define (unique-chars\
    \ word)\n    (define (helper word chars)\n      (cond\n        [(empty? word)\
    \ chars]\n        [(member (first word) chars) (helper (rest word) chars)]\n \
    \       [else (helper (rest word) (cons (first word) chars))]))\n    (helper word\
    \ '()))\n  (define (helper words max-word max-chars)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (length (unique-chars (first words))) max-chars)\n\
    \       (helper (rest words) (first words) (length (unique-chars (first words))))]\n\
    \      [(= (length (unique-chars (first words))) max-chars)\n       (if (string<?\
    \ (first words) max-word)\n           (helper (rest words) (first words) (length\
    \ (unique-chars (first words))))\n           (helper (rest words) max-word max-chars))]\n\
    \      [else (helper (rest words) max-word max-chars)]))\n  (helper words (first\
    \ words) (length (unique-chars (first words)))))\n", "  (define (helper words\
    \ max-word max-count)\n    (cond\n      [(empty? words) max-word]\n      [(> (count-unique\
    \ (first words)) max-count)\n       (helper (rest words) (first words) (count-unique\
    \ (first words)))]\n      [else (helper (rest words) max-word max-count)]))\n\
    \  (helper words (first words) (count-unique (first words))))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (string-append\
    \ word))))\n  (define (max-unique words)\n    (cond [(empty? words) '()]\n   \
    \       [(empty? (cdr words)) (car words)]\n          [else (if (> (length (unique-chars\
    \ (car words)))\n                      (length (unique-chars (cadr words))))\n\
    \                   (car words)\n                   (max-unique (cdr words)))]))\n\
    \  (max-unique words))\n", "  (define (count-unique word)\n    (define (helper\
    \ word count)\n      (cond\n        [(empty? word) count]\n        [(member (first\
    \ word) (rest word)) (helper (rest word) count)]\n        [else (helper (rest\
    \ word) (+ count 1))]))\n    (helper word 0))\n  (define (max-unique-word words)\n\
    \    (cond\n      [(empty? words) (error \"No words\")]\n      [(empty? (rest\
    \ words)) (first words)]\n      [(> (count-unique (first words)) (count-unique\
    \ (second words)))\n       (max-unique-word (cons (first words) (rest (rest words))))]\n\
    \      [else (max-unique-word (rest words))]))\n  (max-unique-word words))\n",
  "  (define (count-unique word)\n    (define (count-unique-helper word seen)\n  \
    \    (cond [(empty? word) (length seen)]\n            [(member (first word) seen)\
    \ (count-unique-helper (rest word) seen)]\n            [else (count-unique-helper\
    \ (rest word) (cons (first word) seen))]))\n    (count-unique-helper word '()))\n\
    \  (define (max-unique-helper words max-word max-count)\n    (cond [(empty? words)\
    \ max-word]\n          [(> (count-unique (first words)) max-count)\n         \
    \  (max-unique-helper (rest words) (first words) (count-unique (first words)))]\n\
    \          [(= (count-unique (first words)) max-count)\n           (cond [(string<?\
    \ (first words) max-word)\n                  (max-unique-helper (rest words) (first\
    \ words) (count-unique (first words)))]\n                 [else (max-unique-helper\
    \ (rest words) max-word max-count)])]\n          [else (max-unique-helper (rest\
    \ words) max-word max-count)]))\n  (max-unique-helper words (first words) (count-unique\
    \ (first words))))\n", "  (define (helper words max-word max-count)\n    (cond\
    \ [(empty? words) max-word]\n          [(> (count-unique (first words)) max-count)\n\
    \           (helper (rest words) (first words) (count-unique (first words)))]\n\
    \          [else (helper (rest words) max-word max-count)]))\n  (helper words\
    \ (first words) (count-unique (first words))))\n", "  (define (helper words max-word\
    \ max-chars)\n    (cond\n      [(empty? words) max-word]\n      [(string<? (first\
    \ words) max-word) (helper (rest words) max-word max-chars)]\n      [(string=?\
    \ (first words) max-word) (helper (rest words) max-word max-chars)]\n      [(>\
    \ (length (unique-chars (first words))) max-chars) (helper (rest words) (first\
    \ words) (length (unique-chars (first words))))]\n      [else (helper (rest words)\
    \ max-word max-chars)]))\n  (helper words (first words) (length (unique-chars\
    \ (first words)))))\n", "  (define (count-unique word)\n    (define (count-unique-helper\
    \ word unique-chars)\n      (cond [(empty? word) (length unique-chars)]\n    \
    \        [(member (first word) unique-chars)\n             (count-unique-helper\
    \ (rest word) unique-chars)]\n            [else (count-unique-helper (rest word)\n\
    \                                       (cons (first word) unique-chars))]))\n\
    \    (count-unique-helper word '()))\n  (define (find-max-helper words max-word\
    \ max-unique-count)\n    (cond [(empty? words) max-word]\n          [(> (count-unique\
    \ (first words)) max-unique-count)\n           (find-max-helper (rest words) (first\
    \ words)\n                            (count-unique (first words)))]\n       \
    \   [(= (count-unique (first words)) max-unique-count)\n           (if (string<?\
    \ (first words) max-word)\n               (find-max-helper (rest words) (first\
    \ words)\n                                (count-unique (first words)))\n    \
    \           (find-max-helper (rest words) max-word max-unique-count))]\n     \
    \     [else (find-max-helper (rest words) max-word max-unique-count)]))\n  (find-max-helper\
    \ words (first words) (count-unique (first words))))\n", "  (define (count-unique\
    \ word)\n    (define (count-unique-helper word unique-chars)\n      (cond\n  \
    \      [(empty? word) (length unique-chars)]\n        [(member (first word) unique-chars)\n\
    \         (count-unique-helper (rest word) unique-chars)]\n        [else (count-unique-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (count-unique-helper word\
    \ '()))\n  (define (find-max-helper words max-word max-count)\n    (cond\n   \
    \   [(empty? words) max-word]\n      [(> (count-unique (first words)) max-count)\n\
    \       (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \      [(= (count-unique (first words)) max-count)\n       (cond\n         [(string<?\
    \ (first words) max-word)\n          (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n         [else (find-max-helper (rest words)\
    \ max-word max-count)])]\n      [else (find-max-helper (rest words) max-word max-count)]))\n\
    \  (find-max-helper words (first words) (count-unique (first words))))\n", " \
    \ (define (unique-chars word)\n    (set-difference (string->list word) (string->list\
    \ (string-append word word))))\n  (define (max-unique-chars words)\n    (apply\
    \ max (map unique-chars words)))\n  (define (max-unique-words words)\n    (filter\
    \ (lambda (word) (= (unique-chars word) (max-unique-chars words))) words))\n \
    \ (apply min (max-unique-words words)))\n", "  (let loop ((words words)\n    \
    \         (max-word (car words))\n             (max-count (length (string-&gt;set\
    \ (car words)))))\n    (cond ((null? words) max-word)\n          ((&gt; (length\
    \ (string-&gt;set (car words))) max-count)\n           (loop (cdr words) (car\
    \ words) (length (string-&gt;set (car words)))))\n          ((= (length (string-&gt;set\
    \ (car words))) max-count)\n           (loop (cdr words) (if (string&lt;? (car\
    \ words) max-word) (car words) max-word) max-count))\n          (else (loop (cdr\
    \ words) max-word max-count)))))\n</code>\n", "  (define (helper words max-word)\n\
    \    (cond [(empty? words) max-word]\n          [(> (length (unique (first words)))\n\
    \              (length (unique max-word)))\n           (helper (rest words) (first\
    \ words))]\n          [else (helper (rest words) max-word)]))\n  (helper words\
    \ (first words)))\n", "  (define (count-unique word)\n    (define (helper word\
    \ count)\n      (cond [(empty? word) count]\n            [(member (first word)\
    \ (rest word)) (helper (rest word) count)]\n            [else (helper (rest word)\
    \ (+ count 1))]))\n    (helper word 0))\n  (define (helper words max-word max-count)\n\
    \    (cond [(empty? words) max-word]\n          [(> (count-unique (first words))\
    \ max-count)\n           (helper (rest words) (first words) (count-unique (first\
    \ words)))]\n          [else (helper (rest words) max-word max-count)]))\n  (helper\
    \ words (first words) (count-unique (first words))))\n", "  (let loop ((words\
    \ words)\n             (max-word (car words))\n             (max-count (count-unique-chars\
    \ (car words))))\n    (cond\n      [(null? words) max-word]\n      [(> (count-unique-chars\
    \ (car words)) max-count)\n       (loop (cdr words) (car words) (count-unique-chars\
    \ (car words)))]\n      [else (loop (cdr words) max-word max-count)])))\n", " \
    \ (define (find_max-helper words max-word max-count)\n    (if (null? words)\n\
    \        max-word\n        (let ([word (car words)])\n          (let ([count (length\
    \ (remove-duplicates (string->list word)))]\n                [new-max-word (if\
    \ (> count max-count) word max-word)])\n            (find-max-helper (cdr words)\
    \ new-max-word (max count max-count))))))\n  (find-max-helper words \"\" 0))\n",
  "  (define (count-unique word)\n    (define (count-unique-helper word unique-chars)\n\
    \      (cond [(empty? word) (length unique-chars)]\n            [(member (first\
    \ word) unique-chars)\n             (count-unique-helper (rest word) unique-chars)]\n\
    \            [else (count-unique-helper (rest word)\n                        \
    \               (cons (first word) unique-chars))]))\n    (count-unique-helper\
    \ word '()))\n  (define (find-max-helper words max-word max-count)\n    (cond\
    \ [(empty? words) max-word]\n          [(> (count-unique (first words)) max-count)\n\
    \           (find-max-helper (rest words) (first words)\n                    \
    \        (count-unique (first words)))]\n          [(= (count-unique (first words))\
    \ max-count)\n           (cond [(string<? (first words) max-word)\n          \
    \        (find-max-helper (rest words) (first words) max-count)]\n           \
    \      [else (find-max-helper (rest words) max-word max-count)])]\n          [else\
    \ (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper words\
    \ (first words) (count-unique (first words))))\n", "  (define (count-unique word)\n\
    \    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word?\
    \ word)\n    (and (not (null? word))\n         (or (null? (cdr word))\n      \
    \       (and (= (count-unique (car word))\n                     (count-unique\
    \ (cadr word)))\n                  (max-unique-word? (cdr word))))))\n  (car (filter\
    \ max-unique-word? words)))\n", "  (define (unique-chars word)\n    (define (helper\
    \ word chars)\n      (cond\n        [(empty? word) chars]\n        [(member (first\
    \ word) chars) (helper (rest word) chars)]\n        [else (helper (rest word)\
    \ (cons (first word) chars))]))\n    (helper word (list)))\n  (define (max-unique-chars\
    \ words)\n    (cond\n      [(empty? words) (error \"No words\")]\n      [(empty?\
    \ (rest words)) (first words)]\n      [(> (length (unique-chars (first words)))\n\
    \          (length (unique-chars (second words))))\n       (max-unique-chars (cons\
    \ (first words) (rest (rest words))))]\n      [else (max-unique-chars (rest words))]))\n\
    \  (max-unique-chars words))\n", "  (define (unique-chars word)\n    (set-member-equal?\
    \ (string->list word)))\n  (define (max-unique-chars word1 word2)\n    (if (&gt;\
    \ (unique-chars word1) (unique-chars word2))\n        word1\n        word2))\n\
    \  (foldl max-unique-chars (car words) (cdr words)))\n</code>\n", "  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (find-max-helper\
    \ words max-word max-count)\n    (cond [(empty? words) max-word]\n          [(>\
    \ (count-unique (first words)) max-count)\n           (find-max-helper (rest words)\
    \ (first words) (count-unique (first words)))]\n          [(= (count-unique (first\
    \ words)) max-count)\n           (cond [(string<? (first words) max-word)\n  \
    \                (find-max-helper (rest words) (first words) (count-unique (first\
    \ words)))]\n                 [else (find-max-helper (rest words) max-word max-count)])]\n\
    \          [else (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper\
    \ words (first words) (count-unique (first words))))\n", "  (define (helper words\
    \ max-word max-count)\n    (cond\n      [(empty? words) max-word]\n      [(> (count-unique\
    \ (first words)) max-count)\n       (helper (rest words) (first words) (count-unique\
    \ (first words)))]\n      [else (helper (rest words) max-word max-count)]))\n\
    \  (helper words \"\" 0))\n", "  (define (unique-chars word)\n    (set-difference\
    \ (string->list word) (string->list (first words))))\n  (define (max-unique-chars\
    \ word)\n    (length (unique-chars word)))\n  (define (max-unique-chars-word word)\n\
    \    (if (null? words)\n        word\n        (if (> (max-unique-chars word) (max-unique-chars\
    \ (first words)))\n            word\n            (max-unique-chars-word (first\
    \ words)))))\n  (max-unique-chars-word (first words)))\n", "  (define (max-unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-chars-word\
    \ word)\n    (and (not (empty? word))\n         (or (max-unique-chars (first word))\n\
    \             (max-unique-chars-word (rest word)))))\n  (define (max-unique-chars-word-in-list\
    \ words)\n    (and (not (empty? words))\n         (or (max-unique-chars-word (first\
    \ words))\n             (max-unique-chars-word-in-list (rest words)))))\n  (define\
    \ (max-unique-chars-word-in-list-with-word words)\n    (and (not (empty? words))\n\
    \         (or (list (max-unique-chars-word (first words)) (first words))\n   \
    \          (max-unique-chars-word-in-list-with-word (rest words)))))\n  (define\
    \ (max-unique-chars-word-in-list-with-word-in-list words)\n    (and (not (empty?\
    \ words))\n         (or (max-unique-chars-word-in-list-with-word (first words))\n\
    \             (max-unique-chars-word-in-list-with-word-in-list (rest words)))))\n\
    \  (define (max-unique-chars-word-in-list-with-word-in-list-with-word words)\n\
    \    (and (not (empty? words))\n         (or (list (max-unique-chars-word-in-list-with-word\
    \ (first words)) (first words))\n             (max-unique-chars-word-in-list-with-word-in-list-with-word\
    \ (rest words)))))\n  (define (max-unique-chars-word-in-list-with-word-in-list-with-word-in-list\
    \ words)\n    (and (not (empty? words))\n         (or (max-unique-chars-word-in-list-with-word-in-list\
    \ (first words))\n             (max-unique-", "  (define (unique-chars word)\n\
    \    (let loop ((chars (list))\n               (word (string->list word)))\n \
    \     (cond ((null? word) (length chars))\n            ((member (car word) chars)\
    \ (loop chars (cdr word)))\n            (else (loop (cons (car word) chars) (cdr\
    \ word))))))\n  (let loop ((words words)\n             (max-word (car words))\n\
    \             (max-chars (unique-chars (car words))))\n    (cond ((null? words)\
    \ max-word)\n          ((> (unique-chars (car words)) max-chars)\n           (loop\
    \ (cdr words) (car words) (unique-chars (car words))))\n          (else (loop\
    \ (cdr words) max-word max-chars)))))\n", "  (define (unique-chars word)\n   \
    \ (set-difference (string->list word) (string->list (first words))))\n  (define\
    \ (max-unique-chars word1 word2)\n    (cond ((> (length (unique-chars word1))\
    \ (length (unique-chars word2))) word1)\n          ((< (length (unique-chars word1))\
    \ (length (unique-chars word2))) word2)\n          (else (if (string<? word1 word2)\
    \ word1 word2))))\n  (foldl max-unique-chars (first words) (rest words)))\n",
  "  (define (count-unique word)\n    (define (count-unique-helper word seen)\n  \
    \    (cond [(empty? word) (length seen)]\n            [(member (first word) seen)\
    \ (count-unique-helper (rest word) seen)]\n            [else (count-unique-helper\
    \ (rest word) (cons (first word) seen))]))\n    (count-unique-helper word '()))\n\
    \  (define (find-max-helper words max-word max-count)\n    (cond [(empty? words)\
    \ max-word]\n          [(> (count-unique (first words)) max-count)\n         \
    \  (find-max-helper (rest words) (first words) (count-unique (first words)))]\n\
    \          [(= (count-unique (first words)) max-count)\n           (cond [(string<?\
    \ (first words) max-word)\n                  (find-max-helper (rest words) (first\
    \ words) (count-unique (first words)))]\n                 [else (find-max-helper\
    \ (rest words) max-word max-count)])]\n          [else (find-max-helper (rest\
    \ words) max-word max-count)]))\n  (find-max-helper words (first words) (count-unique\
    \ (first words))))\n", "  (define (unique-chars word)\n    (set-difference (string->list\
    \ word) (string->list (rest words))))\n  (define (max-unique-chars word)\n   \
    \ (length (unique-chars word)))\n  (define (max-word word)\n    (and (null? (rest\
    \ words))\n         (max-unique-chars word)\n         word))\n  (define (max-word-so-far\
    \ word)\n    (and (max-unique-chars word)\n         (or (max-word word)\n    \
    \         (max-word-so-far (rest words)))))\n  (max-word-so-far words))\n", " \
    \ (let loop ((words words)\n             (max-word (car words))\n            \
    \ (max-count (count-unique-chars (car words))))\n    (cond ((null? words) max-word)\n\
    \          ((> (count-unique-chars (car words)) max-count)\n           (loop (cdr\
    \ words) (car words) (count-unique-chars (car words))))\n          (else (loop\
    \ (cdr words) max-word max-count)))))\n", "  (define (unique-chars word)\n   \
    \ (set-difference (string->list word) (string->list (first words))))\n  (define\
    \ (max-unique-chars words)\n    (if (null? (cdr words))\n        (unique-chars\
    \ (first words))\n        (let ([max-so-far (max-unique-chars (cdr words))])\n\
    \          (if (&gt; (length (unique-chars (first words)))\n                 (length\
    \ max-so-far))\n              (unique-chars (first words))\n              max-so-far))))\n\
    \  (define (find-word words)\n    (if (null? (cdr words))\n        (first words)\n\
    \        (let ([max-so-far (find-word (cdr words))])\n          (if (&gt; (length\
    \ (unique-chars (first words)))\n                 (length (unique-chars max-so-far)))\n\
    \              (first words)\n              max-so-far))))\n  (find-word words))\n\
    </code>\n", "  (define (uniq-chars word)\n    (set-difference (string->list word)\
    \ (string->list (substring word 1))))\n  (define (max-uniq-chars words)\n    (foldl\
    \ (lambda (word max)\n             (if (&gt; (length (uniq-chars word)) (length\
    \ (uniq-chars max)))\n                 word\n                 max))\n        \
    \   (car words)\n           (cdr words)))\n  (max-uniq-chars words))\n</code>\n",
  "  (define (helper words max-word)\n    (cond\n      [(empty? words) max-word]\n\
    \      [(> (length (unique-chars (first words)))\n          (length (unique-chars\
    \ max-word)))\n       (helper (rest words) (first words))]\n      [else (helper\
    \ (rest words) max-word)]))\n  (helper words (first words)))\n", "  (define (unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word)\n              (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (car (sort (max-unique-words words) string<?)))\n",
  "  (define (unique-chars word)\n    (set-difference (string->list word) (string->list\
    \ (first words))))\n  (define (max-unique-chars word1 word2)\n    (cond ((> (length\
    \ (unique-chars word1)) (length (unique-chars word2))) word1)\n          ((< (length\
    \ (unique-chars word1)) (length (unique-chars word2))) word2)\n          (else\
    \ (if (string<? word1 word2) word1 word2))))\n  (foldl max-unique-chars (first\
    \ words) (rest words)))\n", "  (define (count-unique word)\n    (define (helper\
    \ word seen)\n      (cond [(empty? word) (length seen)]\n            [(member\
    \ (first word) seen) (helper (rest word) seen)]\n            [else (helper (rest\
    \ word) (cons (first word) seen))]))\n    (helper word '()))\n  (define (helper\
    \ words max-word max-count)\n    (cond [(empty? words) max-word]\n          [(>\
    \ (count-unique (first words)) max-count)\n           (helper (rest words) (first\
    \ words) (count-unique (first words)))]\n          [else (helper (rest words)\
    \ max-word max-count)]))\n  (helper words (first words) (count-unique (first words))))\n",
  "  (define (max-word words)\n    (if (null? words)\n        \"\"\n        (let ((max-word\
    \ (max-word (cdr words))))\n          (if (&gt; (length (unique-chars (car words)))\n\
    \                (length (unique-chars max-word)))\n              (car words)\n\
    \              max-word))))\n  (max-word words))\n", "  (define (helper words\
    \ max-word max-count)\n    (cond\n      [(empty? words) max-word]\n      [(> (length\
    \ (unique (first words))) max-count)\n       (helper (rest words) (first words)\
    \ (length (unique (first words))))]\n      [else (helper (rest words) max-word\
    \ max-count)]))\n  (helper words (first words) (length (unique (first words)))))\n",
  "  (define (find-max-helper words max-word max-count)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(string<? (first words) max-word) (find-max-helper\
    \ (rest words) max-word max-count)]\n      [(string<? max-word (first words))\
    \ (find-max-helper (rest words) (first words) (count-unique-chars (first words)))]\n\
    \      [(= max-count (count-unique-chars (first words))) (find-max-helper (rest\
    \ words) max-word max-count)]\n      [(> max-count (count-unique-chars (first\
    \ words))) (find-max-helper (rest words) max-word max-count)]\n      [else (find-max-helper\
    \ (rest words) (first words) (count-unique-chars (first words)))]))\n  (find-max-helper\
    \ words (first words) (count-unique-chars (first words))))\n", "  (let loop ((words\
    \ words)\n             (max-word (car words))\n             (max-count (length\
    \ (remove-duplicates (string->list (car words)))))\n             (count 0))\n\
    \    (cond ((null? words) max-word)\n          ((= max-count (length (remove-duplicates\
    \ (string->list (car words)))))\n           (if (string<? (car words) max-word)\n\
    \               (loop (cdr words) (car words) max-count (+ count 1))\n       \
    \        (loop (cdr words) max-word max-count (+ count 1))))\n          ((> (length\
    \ (remove-duplicates (string->list (car words)))) max-count)\n           (loop\
    \ (cdr words) (car words) (length (remove-duplicates (string->list (car words))))\
    \ (+ count 1)))\n          (else (loop (cdr words) max-word max-count (+ count\
    \ 1))))))\n", "  (define (count-unique word)\n    (define (helper word seen)\n\
    \      (cond [(empty? word) (length seen)]\n            [(member (first word)\
    \ seen) (helper (rest word) seen)]\n            [else (helper (rest word) (cons\
    \ (first word) seen))]))\n    (helper word '()))\n  (define (max-unique words)\n\
    \    (cond [(empty? words) '()]\n          [(empty? (rest words)) (first words)]\n\
    \          [else (if (> (count-unique (first words))\n                       (count-unique\
    \ (second words)))\n                    (first words)\n                    (second\
    \ words))]))\n  (max-unique words))\n", "  (define (max-word words)\n    (if (null?\
    \ words)\n        '()\n        (let ([word (car words)])\n          (if (null?\
    \ (cdr words))\n              word\n              (let ([next-word (max-word (cdr\
    \ words))])\n                (if (&gt; (length (unique-chars word))\n        \
    \                (length (unique-chars next-word)))\n                    word\n\
    \                    next-word))))))\n  (max-word words))\n", "  (define (find-max-helper\
    \ words max-word)\n    (cond\n      [(empty? words) max-word]\n      [(string<?\
    \ (first words) max-word) (find-max-helper (rest words) max-word)]\n      [(string<?\
    \ max-word (first words)) (find-max-helper (rest words) (first words))]\n    \
    \  [else (find-max-helper (rest words) max-word)]))\n  (find-max-helper (rest\
    \ words) (first words)))\n", "  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word word1 word2)\n    (cond ((>\
    \ (count-unique word1) (count-unique word2)) word1)\n          ((< (count-unique\
    \ word1) (count-unique word2)) word2)\n          (else (if (string<? word1 word2)\
    \ word1 word2))))\n  (foldl max-unique-word (car words) (cdr words)))\n", "  (define\
    \ (helper words max-word max-count)\n    (cond [(empty? words) max-word]\n   \
    \       [(> (count-unique (first words)) max-count)\n           (helper (rest\
    \ words) (first words) (count-unique (first words)))]\n          [else (helper\
    \ (rest words) max-word max-count)]))\n  (helper words (first words) (count-unique\
    \ (first words))))\n", "  (define (helper words max-word max-count)\n    (cond\
    \ [(empty? words) max-word]\n          [(> (length (unique (first words))) max-count)\n\
    \           (helper (rest words) (first words) (length (unique (first words))))]\n\
    \          [else (helper (rest words) max-word max-count)]))\n  (helper words\
    \ (first words) (length (unique (first words)))))\n", "  (let loop ((words words)\n\
    \             (max-word (car words))\n             (max-count (count-unique-chars\
    \ (car words))))\n    (cond ((null? words) max-word)\n          ((&gt; (count-unique-chars\
    \ (car words)) max-count)\n           (loop (cdr words) (car words) (count-unique-chars\
    \ (car words))))\n          (else (loop (cdr words) max-word max-count)))))\n",
  "  (define (helper words max-word max-count)\n    (cond [(empty? words) max-word]\n\
    \          [(> (count-unique (first words)) max-count)\n           (helper (rest\
    \ words) (first words) (count-unique (first words)))]\n          [else (helper\
    \ (rest words) max-word max-count)]))\n  (helper words (first words) (count-unique\
    \ (first words))))\n", "  (let loop ((words words)\n             (max-word (car\
    \ words))\n             (max-count (length (unique-chars (car words)))))\n   \
    \ (cond ((null? words) max-word)\n          ((> (length (unique-chars (car words)))\
    \ max-count)\n           (loop (cdr words) (car words) (length (unique-chars (car\
    \ words)))))\n          (else (loop (cdr words) max-word max-count)))))\n", " \
    \ (define (unique-chars word)\n    (define (helper word acc)\n      (cond\n  \
    \      [(empty? word) acc]\n        [(member (first word) acc) (helper (rest word)\
    \ acc)]\n        [else (helper (rest word) (cons (first word) acc))]))\n    (helper\
    \ word '()))\n  (define (max-unique-chars words)\n    (define (helper words acc)\n\
    \      (cond\n        [(empty? words) acc]\n        [(> (length (unique-chars\
    \ (first words))) (length acc))\n         (helper (rest words) (unique-chars (first\
    \ words)))]\n        [else (helper (rest words) acc)]))\n    (helper words '()))\n\
    \  (define (find-max-unique-chars words)\n    (define (helper words acc)\n   \
    \   (cond\n        [(empty? words) acc]\n        [(equal? (unique-chars (first\
    \ words)) (max-unique-chars words))\n         (helper (rest words) (first words))]\n\
    \        [else (helper (rest words) acc)]))\n    (helper words (first words)))\n\
    \  (find-max-unique-chars words))\n", "  (define (count-unique word)\n    (define\
    \ (count-unique-helper word seen-chars)\n      (cond [(empty? word) (length seen-chars)]\n\
    \            [(member (first word) seen-chars)\n             (count-unique-helper\
    \ (rest word) seen-chars)]\n            [else (count-unique-helper (rest word)\n\
    \                                       (cons (first word) seen-chars))]))\n \
    \   (count-unique-helper word empty))\n  (define (find-max-helper words max-word\
    \ max-count)\n    (cond [(empty? words) max-word]\n          [(> (count-unique\
    \ (first words)) max-count)\n           (find-max-helper (rest words) (first words)\n\
    \                            (count-unique (first words)))]\n          [(= (count-unique\
    \ (first words)) max-count)\n           (cond [(string<? (first words) max-word)\n\
    \                  (find-max-helper (rest words) (first words) max-count)]\n \
    \                [else (find-max-helper (rest words) max-word max-count)])]\n\
    \          [else (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper\
    \ words (first words) (count-unique (first words))))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (first words))))\n\
    \  (define (max-unique-chars word)\n    (length (unique-chars word)))\n  (define\
    \ (max-word word)\n    (and (or (null? (first words))\n             (max-unique-chars\
    \ word)\n             (max-unique-chars (first words)))\n         (or (null? (first\
    \ words))\n             (max-unique-chars word)\n             (max-unique-chars\
    \ (first words))\n             (string<? word (first words)))\n         word))\n\
    \  (cond ((null? words) '())\n        ((null? (cdr words)) (max-word (first words)))\n\
    \        (else (max-word (first words))\n              (find-max (cdr words)))))\n",
  "  (define (unique-chars word)\n    (define (helper word chars)\n      (cond [(empty?\
    \ word) chars]\n            [(member (first word) chars) (helper (rest word) chars)]\n\
    \            [else (helper (rest word) (cons (first word) chars))]))\n    (helper\
    \ word (list)))\n  (define (max-unique-chars words)\n    (cond [(empty? words)\
    \ 0]\n          [else (max (length (unique-chars (first words)))\n           \
    \          (max-unique-chars (rest words)))]))\n  (define (find-max-helper words\
    \ max-unique-chars)\n    (cond [(empty? words) (error \"No word with max unique\
    \ chars\")]\n          [(= (length (unique-chars (first words))) max-unique-chars)\n\
    \           (first words)]\n          [else (find-max-helper (rest words) max-unique-chars)]))\n\
    \  (find-max-helper words (max-unique-chars words)))\n", "  (define (helper words\
    \ max-word max-count)\n    (cond [(empty? words) max-word]\n          [(> (length\
    \ (unique (first words))) max-count)\n           (helper (rest words) (first words)\
    \ (length (unique (first words))))]\n          [else (helper (rest words) max-word\
    \ max-count)]))\n  (helper words (first words) (length (unique (first words)))))\n",
  "  (define (count-unique word)\n    (define (count-unique-helper word unique-chars)\n\
    \      (cond [(empty? word) (length unique-chars)]\n            [(member (first\
    \ word) unique-chars)\n             (count-unique-helper (rest word) unique-chars)]\n\
    \            [else (count-unique-helper (rest word)\n                        \
    \               (cons (first word) unique-chars))]))\n    (count-unique-helper\
    \ word '()))\n  (define (find-max-helper words max-word max-count)\n    (cond\
    \ [(empty? words) max-word]\n          [(> (count-unique (first words)) max-count)\n\
    \           (find-max-helper (rest words) (first words)\n                    \
    \        (count-unique (first words)))]\n          [(= (count-unique (first words))\
    \ max-count)\n           (cond [(string<? (first words) max-word)\n          \
    \        (find-max-helper (rest words) (first words) max-count)]\n           \
    \      [else (find-max-helper (rest words) max-word max-count)])]\n          [else\
    \ (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper words\
    \ (first words) (count-unique (first words))))\n", "  (define (helper words max-word\
    \ max-count)\n    (cond [(empty? words) max-word]\n          [(> (count-unique\
    \ (first words)) max-count)\n           (helper (rest words) (first words) (count-unique\
    \ (first words)))]\n          [else (helper (rest words) max-word max-count)]))\n\
    \  (helper words (first words) (count-unique (first words))))\n", "  (define (helper\
    \ words max-word)\n    (cond [(empty? words) max-word]\n          [(> (length\
    \ (unique (first words)))\n              (length (unique max-word)))\n       \
    \    (helper (rest words) (first words))]\n          [else (helper (rest words)\
    \ max-word)]))\n  (helper words (first words)))\n", "  (define (unique-chars word)\n\
    \    (set-member-equality-test string=?)\n    (set-add-list! (set) word))\n  (define\
    \ (max-unique-chars words)\n    (define (max-unique-chars-helper words max-word\
    \ max-unique-chars)\n      (cond [(empty? words) max-word]\n            [(> (length\
    \ (unique-chars (first words))) max-unique-chars)\n             (max-unique-chars-helper\
    \ (rest words) (first words) (length (unique-chars (first words))))]\n       \
    \     [else (max-unique-chars-helper (rest words) max-word max-unique-chars)]))\n\
    \    (max-unique-chars-helper words (first words) (length (unique-chars (first\
    \ words)))))\n  (max-unique-chars words))\n", "  (define (count-unique word)\n\
    \    (length (remove-duplicates (string->list word))))\n  (define (max-count words)\n\
    \    (apply max (map count-unique words)))\n  (define (max-words words)\n    (filter\
    \ (lambda (word) (= (count-unique word) (max-count words))) words))\n  (define\
    \ (min-word words)\n    (apply min words))\n  (min-word (max-words words)))\n",
  "  (define (max-word words)\n    (cond ((null? words) '())\n          ((null? (cdr\
    \ words)) (car words))\n          (else (if (&gt; (length (unique-chars (car words)))\n\
    \                       (length (unique-chars (cadr words))))\n              \
    \     (car words)\n                   (cadr words)))))\n  (define (unique-chars\
    \ word)\n    (cond ((null? word) '())\n          ((member (car word) (cdr word))\
    \ (unique-chars (cdr word)))\n          (else (cons (car word) (unique-chars (cdr\
    \ word))))))\n  (max-word words))\n</code>\n", "  (define (unique-chars word)\n\
    \    (set-member-equality-test char=?)\n    (set (for/list ([c (in-string word)])\
    \ c)))\n  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (filter-by-unique-chars words)\n    (filter (\u03BB (w) (= (unique-chars\
    \ w) (max-unique-chars words))) words))\n  (define (filter-by-lex words)\n   \
    \ (filter (\u03BB (w) (string<? w (first words))) words))\n  (first (filter-by-lex\
    \ (filter-by-unique-chars words))))\n", "  (define (unique-chars word)\n    (set-difference\
    \ (string->list word) (string->list (substring word 1))))\n  (define (max-unique-chars\
    \ word1 word2)\n    (cond ((< (length (unique-chars word1)) (length (unique-chars\
    \ word2))) word2)\n          ((> (length (unique-chars word1)) (length (unique-chars\
    \ word2))) word1)\n          (else (if (string<? word1 word2) word1 word2))))\n\
    \  (foldl max-unique-chars (car words) (cdr words)))\n", "  (define (helper words\
    \ max_word max_count)\n    (if (null? words)\n        max_word\n        (let*\
    \ ([word (car words)]\n               [count (length (remove-duplicates (string->list\
    \ word)))]\n               [new_max_word (if (> count max_count)\n           \
    \                      word\n                                 max_word)])\n  \
    \        (helper (cdr words) new_max_word count))))\n  (helper words \"\" 0))\n",
  "  (define (helper words max-word max-count)\n    (cond\n      [(empty? words) max-word]\n\
    \      [(string<? (first words) max-word) (helper (rest words) max-word max-count)]\n\
    \      [(string<? max-word (first words)) (helper (rest words) (first words) (count-unique\
    \ (first words)))]\n      [(= max-count (count-unique (first words))) (helper\
    \ (rest words) (first words) max-count)]\n      [else (helper (rest words) max-word\
    \ max-count)]))\n  (helper words (first words) (count-unique (first words))))\n",
  "  (define (count-unique word)\n    (define (count-unique-helper word unique-chars)\n\
    \      (cond\n        [(empty? word) (length unique-chars)]\n        [(member\
    \ (first word) unique-chars)\n         (count-unique-helper (rest word) unique-chars)]\n\
    \        [else (count-unique-helper (rest word) (cons (first word) unique-chars))]))\n\
    \    (count-unique-helper word '()))\n  (define (find-max-helper words max-word\
    \ max-count)\n    (cond\n      [(empty? words) max-word]\n      [(> (count-unique\
    \ (first words)) max-count)\n       (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n      [(= (count-unique (first words)) max-count)\n\
    \       (cond\n         [(string<? (first words) max-word)\n          (find-max-helper\
    \ (rest words) (first words) (count-unique (first words)))]\n         [else (find-max-helper\
    \ (rest words) max-word max-count)])]\n      [else (find-max-helper (rest words)\
    \ max-word max-count)]))\n  (find-max-helper words (first words) (count-unique\
    \ (first words))))\n", "  (define (unique-chars word)\n    (set-member-equal?\
    \ word))\n  (define (max-unique-chars word1 word2)\n    (if (&gt; (length (unique-chars\
    \ word1))\n           (length (unique-chars word2)))\n        word1\n        word2))\n\
    \  (foldl max-unique-chars (car words) (cdr words)))\n</code>\n", "  (define (count-unique\
    \ word)\n    (define (count-unique-helper word acc)\n      (cond\n        [(empty?\
    \ word) acc]\n        [(member (first word) acc) (count-unique-helper (rest word)\
    \ acc)]\n        [else (count-unique-helper (rest word) (cons (first word) acc))]))\n\
    \    (count-unique-helper word '()))\n  (define (find-max-helper words max-word\
    \ max-count)\n    (cond\n      [(empty? words) max-word]\n      [(> (count-unique\
    \ (first words)) max-count)\n       (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n      [(= (count-unique (first words)) max-count)\n\
    \       (if (string<? (first words) max-word)\n           (find-max-helper (rest\
    \ words) (first words) (count-unique (first words)))\n           (find-max-helper\
    \ (rest words) max-word max-count))]\n      [else (find-max-helper (rest words)\
    \ max-word max-count)]))\n  (find-max-helper words (first words) (count-unique\
    \ (first words))))\n", "  (define (helper words max-word max-count)\n    (cond\
    \ [(empty? words) max-word]\n          [(> (length (unique (first words))) max-count)\n\
    \           (helper (rest words) (first words) (length (unique (first words))))]\n\
    \          [else (helper (rest words) max-word max-count)]))\n  (helper words\
    \ (first words) (length (unique (first words)))))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word) (string->list (first words))))\n\
    \  (define (max-unique-chars word1 word2)\n    (cond ((> (length (unique-chars\
    \ word1)) (length (unique-chars word2))) word1)\n          ((< (length (unique-chars\
    \ word1)) (length (unique-chars word2))) word2)\n          (else (string<? word1\
    \ word2) word1 word2)))\n  (foldl max-unique-chars (first words) (rest words)))\n",
  "  (define (helper words max-word max-uniq)\n    (cond\n      [(empty? words) max-word]\n\
    \      [(string&lt;=? (first words) max-word) (helper (rest words) max-word max-uniq)]\n\
    \      [(&gt; (length (unique-chars (first words))) max-uniq) (helper (rest words)\
    \ (first words) (length (unique-chars (first words))))]\n      [else (helper (rest\
    \ words) max-word max-uniq)]))\n  (helper words (first words) (length (unique-chars\
    \ (first words)))))\n", "  (define (helper words max-word max-count)\n    (cond\
    \ [(empty? words) max-word]\n          [(> (count-unique (first words)) max-count)\n\
    \           (helper (rest words) (first words) (count-unique (first words)))]\n\
    \          [else (helper (rest words) max-word max-count)]))\n  (helper words\
    \ (first words) (count-unique (first words))))\n", "  (define (count-unique word)\n\
    \    (define (count-unique-iter word uniques)\n      (cond\n        [(empty? word)\
    \ (length uniques)]\n        [(member (first word) uniques) (count-unique-iter\
    \ (rest word) uniques)]\n        [else (count-unique-iter (rest word) (cons (first\
    \ word) uniques))]))\n    (count-unique-iter word '()))\n  (define (find-max-iter\
    \ words max-word max-count)\n    (cond\n      [(empty? words) max-word]\n    \
    \  [(> (count-unique (first words)) max-count)\n       (find-max-iter (rest words)\
    \ (first words) (count-unique (first words)))]\n      [(= (count-unique (first\
    \ words)) max-count)\n       (cond\n         [(string<? (first words) max-word)\n\
    \          (find-max-iter (rest words) (first words) (count-unique (first words)))]\n\
    \         [else (find-max-iter (rest words) max-word max-count)])]\n      [else\
    \ (find-max-iter (rest words) max-word max-count)]))\n  (find-max-iter words (first\
    \ words) (count-unique (first words))))\n", "  (define (count-unique word)\n \
    \   (define (count-unique-helper word unique-chars)\n      (cond [(empty? word)\
    \ (length unique-chars)]\n            [(member (first word) unique-chars)\n  \
    \           (count-unique-helper (rest word) unique-chars)]\n            [else\
    \ (count-unique-helper (rest word)\n                                       (cons\
    \ (first word) unique-chars))]))\n    (count-unique-helper word '()))\n  (define\
    \ (find-max-helper words max-word max-unique-count)\n    (cond [(empty? words)\
    \ max-word]\n          [(> (count-unique (first words)) max-unique-count)\n  \
    \         (find-max-helper (rest words) (first words)\n                      \
    \      (count-unique (first words)))]\n          [(= (count-unique (first words))\
    \ max-unique-count)\n           (cond [(string<? (first words) max-word)\n   \
    \               (find-max-helper (rest words) (first words)\n                \
    \                   max-unique-count)]\n                 [else (find-max-helper\
    \ (rest words) max-word\n                                        max-unique-count)])]\n\
    \          [else (find-max-helper (rest words) max-word max-unique-count)]))\n\
    \  (find-max-helper words (first words) (count-unique (first words))))\n", " \
    \ (define (unique-chars word)\n    (define (helper word seen)\n      (cond\n \
    \       [(empty? word) seen]\n        [(member (first word) seen) (helper (rest\
    \ word) seen)]\n        [else (helper (rest word) (cons (first word) seen))]))\n\
    \    (helper word '()))\n  (define (helper words max-word max-count)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (length (unique-chars (first words)))\
    \ max-count)\n       (helper (rest words) (first words) (length (unique-chars\
    \ (first words))))]\n      [(= (length (unique-chars (first words))) max-count)\n\
    \       (if (string<? (first words) max-word)\n           (helper (rest words)\
    \ (first words) (length (unique-chars (first words))))\n           (helper (rest\
    \ words) max-word max-count))]\n      [else (helper (rest words) max-word max-count)]))\n\
    \  (helper words (first words) (length (unique-chars (first words)))))\n", " \
    \ (define (unique-chars word)\n    (set-cdr! (cdr (member word '())) '())\n  \
    \  (length word))\n  (define (max-unique-chars word1 word2)\n    (cond ((> (unique-chars\
    \ word1) (unique-chars word2)) word1)\n          ((< (unique-chars word1) (unique-chars\
    \ word2)) word2)\n          (else (if (string<? word1 word2) word1 word2))))\n\
    \  (foldl max-unique-chars (car words) (cdr words)))\n", "  (define (find_max_helper\
    \ words max-word max-count)\n    (cond [(empty? words) max-word]\n          [(>\
    \ (count_unique (first words)) max-count)\n           (find_max_helper (rest words)\
    \ (first words) (count_unique (first words)))]\n          [else (find_max_helper\
    \ (rest words) max-word max-count)]))\n  (find_max_helper words (first words)\
    \ (count_unique (first words))))\n", "  (define (unique-chars word)\n    (set-difference\
    \ (string->list word) (string->list (substring word 1))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-words words)\n\
    \    (filter (lambda (word)\n              (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (apply min (max-words words)))\n", "  (define\
    \ (helper words max-word max-count)\n    (cond\n      [(empty? words) max-word]\n\
    \      [(string<? (first words) max-word)\n       (helper (rest words) (first\
    \ words) max-count)]\n      [(string<? max-word (first words))\n       (helper\
    \ (rest words) max-word max-count)]\n      [(= max-count (count-unique-chars (first\
    \ words)))\n       (helper (rest words) max-word max-count)]\n      [(> max-count\
    \ (count-unique-chars (first words)))\n       (helper (rest words) (first words)\
    \ (count-unique-chars (first words)))]\n      [else\n       (helper (rest words)\
    \ max-word max-count)]))\n  (helper words (first words) (count-unique-chars (first\
    \ words))))\n", "  (define (unique-chars word)\n    (set-difference (string->list\
    \ word) (string->list (car words))))\n  (define (max-unique-chars word)\n    (length\
    \ (unique-chars word)))\n  (define (max-word word1 word2)\n    (cond ((> (max-unique-chars\
    \ word1) (max-unique-chars word2)) word1)\n          ((< (max-unique-chars word1)\
    \ (max-unique-chars word2)) word2)\n          ((string<? word1 word2) word1)\n\
    \          (else word2)))\n  (foldl max-word (car words) (cdr words)))\n", " \
    \ (define (unique-chars word)\n    (set-difference (string->list word) (string->list\
    \ (first words))))\n  (define (max-unique-word word)\n    (if (null? (cdr words))\n\
    \        word\n        (if (> (length (unique-chars word))\n               (length\
    \ (unique-chars (second words))))\n            (max-unique-word word)\n      \
    \      (max-unique-word (second words)))))\n  (max-unique-word (first words)))\n",
  "  (let loop ((words words)\n             (max-word (car words))\n             (max-count\
    \ (count-unique-chars (car words))))\n    (cond ((null? words) max-word)\n   \
    \       ((> (count-unique-chars (car words)) max-count)\n           (loop (cdr\
    \ words) (car words) (count-unique-chars (car words))))\n          (else (loop\
    \ (cdr words) max-word max-count)))))\n", "  (let loop ((words words)\n      \
    \       (max-word (car words))\n             (max-count (count-unique-chars (car\
    \ words))))\n    (cond ((null? words) max-word)\n          ((> (count-unique-chars\
    \ (car words)) max-count)\n           (loop (cdr words) (car words) (count-unique-chars\
    \ (car words))))\n          (else (loop (cdr words) max-word max-count)))))\n",
  "  (define (unique-chars word)\n    (set-member-equality-test char=?)\n    (set\
    \ (string->list word)))\n  (define (max-unique-chars word1 word2)\n    (cond\n\
    \      [(> (length (unique-chars word1)) (length (unique-chars word2))) word1]\n\
    \      [(< (length (unique-chars word1)) (length (unique-chars word2))) word2]\n\
    \      [else (string<? word1 word2) word1 word2]))\n  (foldl max-unique-chars\
    \ (car words) (cdr words)))\n", "  (define (unique-chars word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (max-unique-words words)\n    (filter (lambda\
    \ (word) (= (unique-chars word) (max-unique-chars words))) words))\n  (apply min\
    \ (max-unique-words words)))\n", "  (define (max_word word1 word2)\n    (if (&gt;\
    \ (length (unique_chars word1)) (length (unique_chars word2)))\n        word1\n\
    \        word2))\n  (define (unique_chars word)\n    (remove-duplicates (string-&gt;list\
    \ word)))\n  (foldl max_word \"\" words))\n</code>\n", "  (let loop ((words words)\n\
    \             (max-word (car words))\n             (max-chars (count-chars (car\
    \ words))))\n    (cond ((null? words) max-word)\n          ((> (count-chars (car\
    \ words)) max-chars)\n           (loop (cdr words) (car words) (count-chars (car\
    \ words))))\n          ((= (count-chars (car words)) max-chars)\n           (loop\
    \ (cdr words) (min (car words) max-word) max-chars))\n          (else (loop (cdr\
    \ words) max-word max-chars)))))\n", "  (define (helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique (first\
    \ words))) max-count)\n       (helper (rest words) (first words) (length (unique\
    \ (first words))))]\n      [else (helper (rest words) max-word max-count)]))\n\
    \  (helper words (first words) (length (unique (first words)))))\n", "  (define\
    \ (max-unique-char-count word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-unique-char-word word1 word2)\n    (if (&gt; (max-unique-char-count\
    \ word1) (max-unique-char-count word2))\n        word1\n        word2))\n  (foldl\
    \ max-unique-char-word (first words) (rest words)))\n</code>\n", "  (let loop\
    \ ((words words)\n             (max-word (car words))\n             (max-unique-chars\
    \ (length (unique-chars (car words)))))\n    (cond ((null? words) max-word)\n\
    \          ((> (length (unique-chars (car words))) max-unique-chars)\n       \
    \    (loop (cdr words) (car words) (length (unique-chars (car words)))))\n   \
    \       ((= (length (unique-chars (car words))) max-unique-chars)\n          \
    \ (loop (cdr words)\n                 (if (string<? (car words) max-word) (car\
    \ words) max-word)\n                 max-unique-chars))\n          (else (loop\
    \ (cdr words) max-word max-unique-chars)))))\n", "  (define (max-unique-char-word\
    \ words)\n    (if (null? words)\n        \"\"\n        (let* ([word (car words)]\n\
    \               [rest (cdr words)]\n               [rest-max (max-unique-char-word\
    \ rest)]\n               [word-unique-char-count (length (unique-characters word))]\n\
    \               [rest-unique-char-count (length (unique-characters rest-max))])\n\
    \          (if (> word-unique-char-count rest-unique-char-count)\n           \
    \   word\n              rest-max))))\n  (max-unique-char-word words))\n", "  (define\
    \ (unique-chars word)\n    (set-difference (string->list word)\n             \
    \       (string->list (string-join (string-split word #\\space)))))\n  (define\
    \ (max-unique-chars words)\n    (apply max (map unique-chars words)))\n  (define\
    \ (max-unique-words words)\n    (filter (lambda (word)\n              (= (unique-chars\
    \ word)\n                 (max-unique-chars words)))\n            words))\n  (define\
    \ (lexicographical-order words)\n    (sort words string<?))\n  (first (lexicographical-order\
    \ (max-unique-words words))))\n", "  (define (count-unique word)\n    (define\
    \ (count-unique-helper word unique-chars)\n      (cond [(empty? word) (length\
    \ unique-chars)]\n            [(member (first word) unique-chars)\n          \
    \   (count-unique-helper (rest word) unique-chars)]\n            [else (count-unique-helper\
    \ (rest word)\n                                       (cons (first word) unique-chars))]))\n\
    \    (count-unique-helper word '()))\n  (define (find-max-helper words max-word\
    \ max-count)\n    (cond [(empty? words) max-word]\n          [(> (count-unique\
    \ (first words)) max-count)\n           (find-max-helper (rest words) (first words)\n\
    \                            (count-unique (first words)))]\n          [(= (count-unique\
    \ (first words)) max-count)\n           (cond [(string<? (first words) max-word)\n\
    \                  (find-max-helper (rest words) (first words) max-count)]\n \
    \                [else (find-max-helper (rest words) max-word max-count)])]\n\
    \          [else (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper\
    \ words (first words) (count-unique (first words))))\n", "  (define (unique-chars\
    \ word)\n    (set-difference (string->list word)\n                    (string->list\
    \ (string-join (remove-duplicates (string->list word))))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word) (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (apply min (max-unique-words words)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
