name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n#| From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\nin the sequence.\n>>> (rolling_max (list\
  \ 1 2 3 2 3 4 2))\n(list 1 2 3 3 3 4 4)|#\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (define (rolling-max-iter numbers max-so-far)\n    (if (null? numbers)\n\
    \        '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-iter numbers\
    \ 0))\n", "  (define (rolling_max-iter numbers maxes)\n    (cond\n      [(empty?\
    \ numbers) (reverse maxes)]\n      [(empty? maxes) (rolling_max-iter (rest numbers)\
    \ (list (first numbers)))]\n      [else (rolling_max-iter (rest numbers) (cons\
    \ (max (first numbers) (first maxes)) maxes))]))\n  (rolling_max-iter numbers\
    \ '()))\n", "  (let loop ([numbers numbers]\n             [max-so-far '()])\n\
    \    (if (null? numbers)\n        max-so-far\n        (let ([current-max (max\
    \ (car numbers) (car max-so-far))])\n          (loop (cdr numbers)\n         \
    \       (cons current-max max-so-far))))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond ((null? numbers) '())\n\
    \          ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling-max-helper\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling-max-helper\
    \ (cdr numbers) max-so-far)))))\n  (rolling-max-helper numbers (car numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? numbers)\n        result\n\
    \        (loop (cdr numbers)\n              (max max-so-far (car numbers))\n \
    \             (append result (list max-so-far))))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (max (car numbers) max-so-far)\n \
    \             (cons (max (car numbers) max-so-far) result)))))\n", "  (define\
    \ (rolling-max-iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (max (car numbers) max-so-far)\n              (rolling-max-iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-iter numbers\
    \ -1))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond [(empty?\
    \ numbers) empty]\n          [(> (first numbers) max-so-far)\n           (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      \
    \    [else (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons max-so-far (rolling-max-helper (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n    \
    \  [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n    \
    \  [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (define (rolling-max-iter\
    \ numbers maxes)\n    (if (null? numbers)\n        maxes\n        (let ([max (max\
    \ (car numbers) (car maxes))])\n          (rolling-max-iter (cdr numbers) (cons\
    \ max maxes)))))\n  (rolling-max-iter numbers (list (car numbers))))\n", "  (define\
    \ (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [acc '()])\n    (cond [(empty? numbers) (reverse acc)]\n       \
    \   [(empty? acc) (loop (rest numbers) (list (first numbers)))]\n          [else\
    \ (loop (rest numbers) (cons (max (first numbers) (first acc)) acc))])))\n", " \
    \ (define (rolling-max-helper numbers max-so-far)\n    (cond [(empty? numbers)\
    \ empty]\n          [(> (first numbers) max-so-far)\n           (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n          [else (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [acc '()])\n    (if (null? numbers)\n        (reverse acc)\n        (loop (cdr\
    \ numbers)\n              (cons (max (car numbers) (car acc)) acc)))))\n", " \
    \ (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons max-so-far (rolling-max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers -inf.0))\n", " \
    \ (define (rolling-max-iter numbers acc)\n    (cond [(empty? numbers) (reverse\
    \ acc)]\n          [else (rolling-max-iter (rest numbers)\n                  \
    \                (cons (max (first numbers) (first acc)) acc))]))\n  (rolling-max-iter\
    \ numbers (list (first numbers))))\n", "  (define (rolling-max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling-max-iter numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ((next-max (if (&gt; (car numbers) max-so-far)\n      \
    \                      (car numbers)\n                            max-so-far)))\n\
    \          (cons next-max (rolling_max_iter (cdr numbers) next-max)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n</code>\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far '()])\n    (if (null? numbers)\n        max-so-far\n    \
    \    (let ([current-max (max (car numbers) (car max-so-far))])\n          (loop\
    \ (cdr numbers)\n                (cons current-max max-so-far))))))\n", "  (define\
    \ (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far '()])\n    (cond [(empty?\
    \ numbers) (reverse max-so-far)]\n          [(empty? max-so-far) (loop (rest numbers)\
    \ (list (first numbers)))]\n          [else (loop (rest numbers)\n           \
    \           (cons (max (first numbers) (first max-so-far)) max-so-far))])))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond [(empty? numbers) empty]\n\
    \          [(> (first numbers) max-so-far)\n           (cons (first numbers) (rolling-max-iter\
    \ (rest numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond [(empty? numbers)\
    \ '()]\n          [(> (first numbers) max-so-far)\n           (cons (first numbers)\n\
    \                 (rolling-max-helper (rest numbers) (first numbers)))]\n    \
    \      [else (cons max-so-far\n                      (rolling-max-helper (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n  (rolling-max-iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [maxes (list (car numbers))])\n    (if (null? (cdr numbers))\n        maxes\n\
    \        (loop (cdr numbers)\n              (cons (max (car numbers) (car maxes))\
    \ maxes)))))\n", "  (define (rolling-max-iter numbers max-so-far)\n    (cond [(empty?\
    \ numbers) empty]\n          [(> (first numbers) max-so-far)\n           (cons\
    \ (first numbers) (rolling-max-iter (rest numbers) (first numbers)))]\n      \
    \    [else (cons max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling-max-iter numbers (first numbers)))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (cond [(empty? numbers) empty]\n          [(> (first\
    \ numbers) max-so-far)\n           (cons (first numbers) (rolling-max-iter (rest\
    \ numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond [(empty? numbers) empty]\n\
    \          [(> (first numbers) max-so-far)\n           (cons (first numbers) (rolling_max-iter\
    \ (rest numbers) (first numbers)))]\n          [else (cons max-so-far (rolling_max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [maxes '()])\n    (cond [(empty? numbers)\
    \ (reverse maxes)]\n          [else (loop (rest numbers)\n                   \
    \   (cons (max (first numbers) (first maxes)) maxes))])))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max-iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max-iter numbers -1))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max-iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ maxes]\n      [(empty? maxes) (rolling_max-iter (rest numbers) (list (first\
    \ numbers)))]\n      [else (rolling_max-iter (rest numbers) (append maxes (list\
    \ (max (first numbers) (first maxes)))))]))\n  (rolling_max-iter numbers '()))\n",
  "  (define (rolling_max-iter numbers current-max)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) current-max)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ current-max (rolling_max-iter (rest numbers) current-max))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (car numbers)]\n             [result (list max-so-far)])\n    (if\
    \ (null? numbers)\n        result\n        (let ([current-max (max max-so-far\
    \ (car numbers))])\n          (loop (cdr numbers)\n                current-max\n\
    \                (append result (list current-max)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling-max-helper numbers maxes)\n\
    \    (cond\n      [(empty? numbers) (reverse maxes)]\n      [(empty? maxes) (rolling-max-helper\
    \ (rest numbers) (list (first numbers)))]\n      [else (rolling-max-helper (rest\
    \ numbers) (cons (max (first numbers) (first maxes)) maxes))]))\n  (rolling-max-helper\
    \ numbers (list)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? numbers)\n\
    \        result\n        (loop (cdr numbers)\n              (max max-so-far (car\
    \ numbers))\n              (append result (list max-so-far))))))\n", "  (cond\n\
    \    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else\
    \ (cons (max (first numbers) (first (rest numbers)))\n                (rolling_max\
    \ (rest numbers)))]))\n", "  (define (rolling-max-iter numbers max-so-far)\n \
    \   (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling-max-iter numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? numbers)\n        result\n\
    \        (loop (rest numbers)\n              (max max-so-far (first numbers))\n\
    \              (append result (list (max max-so-far (first numbers))))))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (cond [(empty? numbers)\n        \
    \   (reverse result)]\n          [(> (first numbers) max-so-far)\n           (loop\
    \ (rest numbers)\n                 (first numbers)\n                 (cons (first\
    \ numbers) result))]\n          [else\n           (loop (rest numbers)\n     \
    \            max-so-far\n                 (cons max-so-far result))])))\n", " \
    \ (define (rolling-max-helper numbers maxes)\n    (cond [(empty? numbers) (reverse\
    \ maxes)]\n          [(empty? maxes) (rolling-max-helper (rest numbers) (list\
    \ (first numbers)))]\n          [else (rolling-max-helper (rest numbers) (cons\
    \ (max (first numbers) (first maxes)) maxes))]))\n  (rolling-max-helper numbers\
    \ (list)))\n", "  (define (rolling-max-helper numbers max-so-far)\n    (cond [(empty?\
    \ numbers) empty]\n          [(> (first numbers) max-so-far)\n           (cons\
    \ (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n    \
    \      [else (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (define (rolling_max-iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max-iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max-iter numbers -inf.0))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far (car numbers)]\n         \
    \    [result (list max-so-far)])\n    (if (null? numbers)\n        result\n  \
    \      (loop (cdr numbers)\n              (max max-so-far (car numbers))\n   \
    \           (append result (list max-so-far))))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling-max-helper (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling-max-helper\
    \ numbers (car numbers)))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max-iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        maxes\n        (rolling_max_iter\
    \ (cdr numbers)\n                          (cons (max (car numbers) (car maxes))\n\
    \                                maxes))))\n  (rolling_max_iter numbers (list\
    \ (car numbers))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ '()])\n    (cond [(empty? numbers) (reverse max-so-far)]\n          [(empty?\
    \ max-so-far) (loop (rest numbers) (list (first numbers)))]\n          [else (loop\
    \ (rest numbers)\n                      (cons (max (first numbers) (first max-so-far))\
    \ max-so-far))])))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (first numbers)]\n             [result (list max-so-far)])\n    (if (null? numbers)\n\
    \        result\n        (loop (rest numbers)\n              (max max-so-far (first\
    \ numbers))\n              (append result (list (max max-so-far (first numbers))))))))\n",
  "  (let loop ([numbers numbers]\n             [acc (list (car numbers))])\n    (if\
    \ (null? (cdr numbers))\n        acc\n        (loop (cdr numbers)\n          \
    \    (append acc (list (max (car numbers) (car acc))))))))\n", "  (define (rolling_max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n  (rolling-max-iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far 0]\n             [result '()])\n    (if (null? numbers)\n      \
    \  (reverse result)\n        (let ([current (car numbers)])\n          (if (&gt;\
    \ current max-so-far)\n              (loop (cdr numbers) current (cons current\
    \ result))\n              (loop (cdr numbers) max-so-far (cons max-so-far result)))))))\n\
    </code>\n", "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n    \
    \  [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (max (car numbers) max-so-far)\n              (cons (max (car numbers)\
    \ max-so-far) result)))))\n", "  (if (null? numbers)\n      '()\n      (cons (max\
    \ (car numbers) (apply max (cdr numbers)))\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n\
    \        (rolling_max_iter (cdr numbers)\n                          (cons (max\
    \ (car numbers) (car maxes))\n                                maxes))))\n  (reverse\
    \ (rolling_max_iter numbers (list (car numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (let ([next-number (cadr numbers)])\n          (loop (cdr numbers)\n\
    \                (if (&gt; next-number max-so-far)\n                    next-number\n\
    \                    max-so-far)\n                (cons (if (&gt; next-number\
    \ max-so-far)\n                          next-number\n                       \
    \   max-so-far)\n                      result))))))\n</code>\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ (reverse maxes)]\n      [(empty? maxes) (rolling_max_iter (rest numbers) (list\
    \ (first numbers)))]\n      [else (rolling_max_iter (rest numbers) (cons (max\
    \ (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter numbers empty))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n  (rolling-max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [acc '()])\n    (if (null? numbers)\n        (reverse acc)\n   \
    \     (loop (cdr numbers)\n              (cons (max (car numbers) (car acc)) acc)))))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond [(empty? numbers) empty]\n\
    \          [(> (first numbers) max-so-far)\n           (cons (first numbers) (rolling-max-iter\
    \ (rest numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond ((null? numbers) '())\n\
    \          ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling-max-helper\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling-max-helper\
    \ (cdr numbers) max-so-far)))))\n  (rolling-max-helper numbers (car numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) (list (first\
    \ numbers))]\n    [else (cons (max (first numbers) (first (rolling_max (rest numbers))))\n\
    \                (rolling_max (rest numbers)))]))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond [(empty? numbers) empty]\n          [(> (first\
    \ numbers) max-so-far)\n           (cons (first numbers) (rolling_max_iter (rest\
    \ numbers) (first numbers)))]\n          [else (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond [(empty? numbers) empty]\n\
    \          [(> (first numbers) max-so-far)\n           (cons (first numbers) (rolling-max-iter\
    \ (rest numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max-iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max-iter numbers\
    \ -1))\n", "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n\
    \             [accumulator (list max-so-far)])\n    (if (null? numbers)\n    \
    \    accumulator\n        (let ([next-max (if (&gt; (first numbers) max-so-far)\n\
    \                            (first numbers)\n                            max-so-far)])\n\
    \          (loop (rest numbers)\n                next-max\n                (append\
    \ accumulator (list next-max)))))))\n</code>\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling-max-helper (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling-max-helper numbers -inf.0))\n", " \
    \ (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far '()])\n    (if (null? numbers)\n        max-so-far\n        (loop\
    \ (cdr numbers)\n              (cons (max (car numbers) (car max-so-far))\n  \
    \                  max-so-far)))))\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? numbers)\n        result\n        (loop (rest numbers)\n     \
    \         (max max-so-far (first numbers))\n              (append result (list\
    \ (max max-so-far (first numbers))))))))\n", "  (let loop ([numbers numbers]\n\
    \             [acc (list (car numbers))])\n    (if (null? (cdr numbers))\n   \
    \     acc\n        (loop (cdr numbers)\n              (append acc (list (max (car\
    \ numbers) (car acc))))))))\n", "  (define (rolling_max_helper numbers max-so-far)\n\
    \    (cond [(empty? numbers) empty]\n          [(> (first numbers) max-so-far)\n\
    \           (cons (first numbers) (rolling_max_helper (rest numbers) (first numbers)))]\n\
    \          [else (cons max-so-far (rolling_max_helper (rest numbers) max-so-far))]))\n\
    \  (rolling_max_helper numbers (first numbers)))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (rolling-max-iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling-max-iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling-max-iter\
    \ numbers -1000000000 (list)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond [(empty? numbers) '()]\n          [(> (first numbers) max-so-far)\n\
    \           (cons (first numbers)\n                 (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n          [else (cons max-so-far\n                     \
    \  (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers\
    \ (first numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n \
    \   (cond [(empty? numbers) empty]\n          [(> (first numbers) max-so-far)\n\
    \           (cons (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n\
    \          [else (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (for/fold ([acc '()])\
    \ ([n numbers])\n    (cons (max n (car acc)) acc)))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max-iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max-iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max-iter numbers (first numbers) (list (first numbers))))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far (car numbers)]\n         \
    \    [result (list max-so-far)])\n    (cond [(empty? numbers) (reverse result)]\n\
    \          [(> (car numbers) max-so-far)\n           (loop (cdr numbers)\n   \
    \              (car numbers)\n                 (cons (car numbers) result))]\n\
    \          [else\n           (loop (cdr numbers)\n                 max-so-far\n\
    \                 (cons max-so-far result))])))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? numbers)\n        result\n        (loop (rest numbers)\n     \
    \         (max max-so-far (first numbers))\n              (append result (list\
    \ (max max-so-far (first numbers))))))))\n", "  (define (rolling-max-iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling-max-iter (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling-max-iter numbers 0))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond [(empty? numbers) empty]\n          [(> (first\
    \ numbers) max-so-far)\n           (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond [(empty? numbers) empty]\n\
    \          [(> (first numbers) max-so-far)\n           (cons (first numbers) (rolling-max-iter\
    \ (rest numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling-max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling-max-iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n```\n\
    \n### Problem 5\n\n```racket\n#lang racket\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max-iter numbers max-so-far\
    \ result)\n    (cond\n      [(empty? numbers) (reverse result)]\n      [(> (first\
    \ numbers) max-so-far)\n       (rolling_max-iter (rest numbers) (first numbers)\
    \ (cons (first numbers) result))]\n      [else\n       (rolling_max-iter (rest\
    \ numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max-iter numbers\
    \ (first numbers) (list (first numbers))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [rolling-max (list max-so-far)])\n    (if (null? numbers)\n        rolling-max\n\
    \        (loop (cdr numbers)\n              (max max-so-far (car numbers))\n \
    \             (append rolling-max (list (max max-so-far (car numbers))))))))\n",
  "  (define (rolling_max-iter numbers acc)\n    (if (null? numbers)\n        acc\n\
    \        (rolling_max-iter (cdr numbers)\n                          (cons (max\
    \ (car numbers) (car acc))\n                                acc))))\n  (rolling_max-iter\
    \ numbers (list (car numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling-max-helper (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling-max-helper\
    \ numbers (car numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) (reverse max-so-far)]\n      [(> (first numbers)\
    \ (first max-so-far))\n       (rolling-max-helper (rest numbers) (cons (first\
    \ numbers) max-so-far))]\n      [else (rolling-max-helper (rest numbers) (cons\
    \ (first max-so-far) max-so-far))]))\n  (rolling-max-helper numbers (list (first\
    \ numbers))))\n", "  (define (rolling_max-iter numbers max-so-far)\n    (cond\
    \ [(empty? numbers) empty]\n          [(> (first numbers) max-so-far)\n      \
    \     (cons (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n\
    \          [else (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max-iter numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond [(empty? numbers) empty]\n          [(> (first\
    \ numbers) max-so-far)\n           (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers (first numbers) (list (first numbers))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n  (rolling-max-iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (first numbers)]\n             [result (list max-so-far)])\n   \
    \ (if (null? numbers)\n        result\n        (loop (rest numbers)\n        \
    \      (max max-so-far (first numbers))\n              (append result (list (max\
    \ max-so-far (first numbers))))))))\n", "  (define (rolling-max-helper numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons max-so-far (rolling-max-helper (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? numbers)\n        result\n\
    \        (loop (rest numbers)\n              (max max-so-far (first numbers))\n\
    \              (append result (list (max max-so-far (first numbers))))))))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max_helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons max-so-far (rolling_max_helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_helper\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_helper numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? numbers)\n        result\n\
    \        (loop (rest numbers)\n              (max max-so-far (first numbers))\n\
    \              (append result (list (max max-so-far (first numbers))))))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [accumulator (list max-so-far)])\n    (if (null? numbers)\n        accumulator\n\
    \        (loop (cdr numbers)\n              (max max-so-far (car numbers))\n \
    \             (cons (max max-so-far (car numbers)) accumulator)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond [(empty? numbers) empty]\n\
    \          [(> (first numbers) max-so-far)\n           (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n          [else (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-iter numbers\
    \ 0))\n", "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n\
    \             [result (list max-so-far)])\n    (if (null? (cdr numbers))\n   \
    \     result\n        (let ([next-number (cadr numbers)])\n          (loop (cdr\
    \ numbers)\n                (if (&gt; next-number max-so-far)\n              \
    \      next-number\n                    max-so-far)\n                (cons (if\
    \ (&gt; next-number max-so-far)\n                          next-number\n     \
    \                     max-so-far)\n                      result))))))\n</code>\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ (reverse max-so-far)]\n      [(> (first numbers) (first max-so-far))\n     \
    \  (rolling-max-helper (rest numbers) (cons (first numbers) max-so-far))]\n  \
    \    [else (rolling-max-helper (rest numbers) (cons (first max-so-far) max-so-far))]))\n\
    \  (rolling-max-helper numbers (list (first numbers))))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far max-so-far-index)\n    (cond\n \
    \     [(empty? numbers) (list)]\n      [(= (first numbers) max-so-far)\n     \
    \  (cons max-so-far (rolling-max-iter (rest numbers) max-so-far max-so-far-index))]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter\
    \ (rest numbers) (first numbers) (add1 max-so-far-index)))]\n      [else\n   \
    \    (cons max-so-far (rolling-max-iter (rest numbers) max-so-far max-so-far-index))]))\n\
    \  (rolling-max-iter numbers (first numbers) 0))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max-iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max-iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max-iter numbers -inf.0 empty))\n", "  (define (rolling_max-iter numbers\
    \ max-so-far result)\n    (cond [(empty? numbers) result]\n          [(> (first\
    \ numbers) max-so-far) (rolling_max-iter (rest numbers) (first numbers) (append\
    \ result (list (first numbers))))]\n          [else (rolling_max-iter (rest numbers)\
    \ max-so-far (append result (list max-so-far)))]))\n  (rolling_max-iter numbers\
    \ -1 '()))\n", "  (let loop ([numbers numbers]\n             [max-so-far (car\
    \ numbers)]\n             [accumulator (list max-so-far)])\n    (if (null? numbers)\n\
    \        accumulator\n        (loop (cdr numbers)\n              (max max-so-far\
    \ (car numbers))\n              (cons (max max-so-far (car numbers)) accumulator)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? numbers)\n        result\n\
    \        (loop (rest numbers)\n              (max max-so-far (first numbers))\n\
    \              (append result (list (max max-so-far (first numbers))))))))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (first numbers)]\n             [result (list max-so-far)])\n   \
    \ (if (null? numbers)\n        result\n        (loop (rest numbers)\n        \
    \      (max max-so-far (first numbers))\n              (append result (list (max\
    \ max-so-far (first numbers))))))))\n", "  (define (rolling-max-helper numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons max-so-far (rolling-max-helper (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (rolling-max-helper numbers (car numbers)))\n", "  (define\
    \ (rolling-max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers) (reverse\
    \ max-so-far)]\n      [(> (first numbers) (first max-so-far))\n       (rolling-max-iter\
    \ (rest numbers) (cons (first numbers) max-so-far))]\n      [else (rolling-max-iter\
    \ (rest numbers) (cons (first max-so-far) max-so-far))]))\n  (rolling-max-iter\
    \ numbers (list (first numbers))))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (cond [(empty? numbers) empty]\n          [(> (first numbers) max-so-far)\n\
    \           (cons (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n\
    \          [else (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max-iter numbers (first numbers)))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (define (rolling-max-helper numbers current-max\
    \ result)\n    (cond\n      [(empty? numbers) (reverse result)]\n      [(> (first\
    \ numbers) current-max)\n       (rolling-max-helper (rest numbers) (first numbers)\
    \ (cons (first numbers) result))]\n      [else (rolling-max-helper (rest numbers)\
    \ current-max (cons current-max result))]))\n  (rolling-max-helper numbers (first\
    \ numbers) (list (first numbers))))\n", "  (let loop ([numbers numbers]\n    \
    \         [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? numbers)\n        result\n        (loop (cdr numbers)\n      \
    \        (max max-so-far (car numbers))\n              (append result (list max-so-far))))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? numbers)\n        result\n\
    \        (let ([next-max (max max-so-far (first numbers))])\n          (loop (rest\
    \ numbers)\n                next-max\n                (append result (list next-max)))))))\n",
  "  (define (rolling-max-iter numbers max-so-far result)\n    (cond [(empty? numbers)\
    \ (reverse result)]\n          [(> (first numbers) max-so-far)\n           (rolling-max-iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n          [else\
    \ (rolling-max-iter (rest numbers) max-so-far (cons max-so-far result))]))\n \
    \ (rolling-max-iter numbers (first numbers) (list (first numbers))))\n", "  (define\
    \ (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (first numbers)]\n             [result (list max-so-far)])\n   \
    \ (if (null? numbers)\n        result\n        (loop (rest numbers)\n        \
    \      (max max-so-far (first numbers))\n              (append result (list (max\
    \ max-so-far (first numbers))))))))\n", "  (let loop ([numbers numbers]\n    \
    \         [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (max (car numbers) max-so-far)\n              (cons (max (car numbers)\
    \ max-so-far) result)))))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max-iter numbers current-max\
    \ result)\n    (cond [(empty? numbers) result]\n          [(> (first numbers)\
    \ current-max)\n           (rolling_max-iter (rest numbers) (first numbers) (append\
    \ result (list (first numbers))))]\n          [else (rolling_max-iter (rest numbers)\
    \ current-max (append result (list current-max)))]))\n  (rolling_max-iter numbers\
    \ (first numbers) (list (first numbers))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond ((null? numbers) '())\n          ((> (car numbers)\
    \ max-so-far)\n           (cons (car numbers) (rolling-max-helper (cdr numbers)\
    \ (car numbers))))\n          (else (cons max-so-far (rolling-max-helper (cdr\
    \ numbers) max-so-far)))))\n  (rolling-max-helper numbers (car numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max-iter numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers current-max)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) current-max)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons current-max (rolling-max-helper\
    \ (rest numbers) current-max))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far result)\n    (cond [(empty? numbers)\
    \ result]\n          [(> (first numbers) max-so-far)\n           (rolling_max-iter\
    \ (rest numbers) (first numbers) (append result (list (first numbers))))]\n  \
    \        [else (rolling_max-iter (rest numbers) max-so-far (append result (list\
    \ max-so-far)))]))\n  (rolling_max-iter numbers -1 '()))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-iter numbers maxes)\n    (cond [(empty? numbers) (reverse\
    \ maxes)]\n          [(empty? maxes) (rolling-max-iter (rest numbers) (list (first\
    \ numbers)))]\n          [else (rolling-max-iter (rest numbers) (cons (max (first\
    \ numbers) (first maxes)) maxes))]))\n  (rolling-max-iter numbers empty))\n",
  "  (define (rolling-max-helper numbers max-so-far acc)\n    (cond\n      [(empty?\
    \ numbers) (reverse acc)]\n      [(> (first numbers) max-so-far)\n       (rolling-max-helper\
    \ (rest numbers) (first numbers) (cons (first numbers) acc))]\n      [else (rolling-max-helper\
    \ (rest numbers) max-so-far (cons max-so-far acc))]))\n  (rolling-max-helper numbers\
    \ -inf.0 empty))\n", "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n    \
    \  [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond [(empty? numbers)\
    \ empty]\n          [(> (first numbers) max-so-far)\n           (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n          [else (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (define (rolling-max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling-max-iter numbers (first numbers)))\n", "  (define (rolling_max-iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max-iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max-iter numbers (car numbers)))\n",
  "  (define (rolling-max-iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-iter numbers\
    \ -inf.0))\n", "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers))\
    \ numbers]\n    [else (cons (max (first numbers) (first (rest numbers)))\n   \
    \             (rolling_max (rest numbers)))]))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far result)\n    (cond ((null? numbers)\
    \ result)\n          ((> (car numbers) max-so-far)\n           (rolling_max-iter\
    \ (cdr numbers) (car numbers) (append result (list (car numbers)))))\n       \
    \   (else (rolling_max-iter (cdr numbers) max-so-far (append result (list max-so-far))))))\n\
    \  (rolling_max-iter numbers (car numbers) (list (car numbers))))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n \
    \       (rolling_max_iter (cdr numbers) (cons (max (car numbers) (car maxes))\
    \ maxes))))\n  (rolling_max_iter numbers (list (car numbers))))\n", "  (define\
    \ (rolling_max-iter numbers max-so-far result)\n    (cond [(empty? numbers) (reverse\
    \ result)]\n          [(> (first numbers) max-so-far)\n           (rolling_max-iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n          [else\
    \ (rolling_max-iter (rest numbers) max-so-far (cons max-so-far result))]))\n \
    \ (rolling_max-iter numbers (first numbers) (list (first numbers))))\n", "  (define\
    \ (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (define (rolling-max-iter\
    \ numbers maxes)\n    (if (null? numbers)\n        maxes\n        (rolling-max-iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling-max-iter\
    \ numbers (list (car numbers))))\n", "  (let loop ([numbers numbers]\n       \
    \      [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? numbers)\n        result\n        (loop (rest numbers)\n     \
    \         (max max-so-far (first numbers))\n              (append result (list\
    \ (max max-so-far (first numbers))))))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? numbers)\n        result\n        (loop (rest numbers)\n     \
    \         (max max-so-far (first numbers))\n              (append result (list\
    \ (max max-so-far (first numbers))))))))\n", "  (define (rolling-max-helper numbers\
    \ maxes)\n    (if (null? numbers)\n        maxes\n        (rolling-max-helper\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling-max-helper\
    \ numbers (cons (car numbers) '())))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(= (first numbers)\
    \ max-so-far)\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) (max (first\
    \ numbers) max-so-far)))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max-iter numbers (first numbers)))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ([max-so-far (max (car numbers) max-so-far)])\n       \
    \   (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling-max-helper\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling-max-helper numbers\
    \ (car numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n   \
    \ (if (null? numbers)\n        '()\n        (cons max-so-far (rolling-max-helper\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling-max-helper numbers\
    \ (car numbers)))\n", "  (define (rolling-max-iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n     \
    \  (cons (first numbers) (rolling-max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling-max-iter numbers (first numbers)))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond [(empty? numbers) empty]\n          [(> (first\
    \ numbers) max-so-far)\n           (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n          [else (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers maxes)\n    (if (null?\
    \ numbers)\n        maxes\n        (rolling_max_iter (cdr numbers)\n         \
    \                 (cons (max (car numbers) (car maxes))\n                    \
    \            maxes))))\n  (rolling_max_iter numbers (list (car numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
