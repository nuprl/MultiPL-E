name: HumanEval_80_is_happy
language: rkt
prompt: "#lang racket\n\n#| You are given a string s.\nYour task is to check if the\
  \ string is haprkt or not.\nA string is haprkt if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\nFor example:\n>>> (is_happy a)\n#f\n>>> (is_happy\
  \ aa)\n#f\n>>> (is_happy abcd)\n#t\n>>> (is_happy aabb)\n#f\n>>> (is_happy adb)\n\
  #t\n>>> (is_happy xyy)\n#f|#\n(define (is_happy s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n\
  \    (check-equal? (candidate \"a\") #f)\n    (check-equal? (candidate \"aa\") #f)\n\
  \    (check-equal? (candidate \"abcd\") #t)\n    (check-equal? (candidate \"aabb\"\
  ) #f)\n    (check-equal? (candidate \"adb\") #t)\n    (check-equal? (candidate \"\
  xyy\") #f)\n    (check-equal? (candidate \"iopaxpoi\") #t)\n    (check-equal? (candidate\
  \ \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (is_happy-helper s i)\n    (cond [(< i (- (string-length\
    \ s) 2))\n           (and (not (equal? (string-ref s i) (string-ref s (+ i 1))))\n\
    \                (not (equal? (string-ref s i) (string-ref s (+ i 2))))\n    \
    \            (not (equal? (string-ref s (+ i 1)) (string-ref s (+ i 2))))\n  \
    \              (is_happy-helper s (+ i 1)))]\n          [else #t]))\n  (and (>=\
    \ (string-length s) 3)\n       (is_happy-helper s 0)))\n", "  (define (is_happy-helper\
    \ s)\n    (cond [(empty? s) #t]\n          [(and (char=? (first s) (second s))\n\
    \                (char=? (second s) (third s))) #f]\n          [else (is_happy-helper\
    \ (rest s))]))\n  (and (>= (string-length s) 3)\n       (is_happy-helper s)))\n",
  "  (and\n   (not (string=? s \"\"))\n   (not (string=? s \" \"))\n   (not (string=?\
    \ s \"  \"))\n   (not (string=? s \"   \"))\n   (not (string=? s \"    \"))\n\
    \   (not (string=? s \"     \"))\n   (not (string=? s \"      \"))\n   (not (string=?\
    \ s \"       \"))\n   (not (string=? s \"        \"))\n   (not (string=? s \"\
    \         \"))\n   (not (string=? s \"          \"))\n   (not (string=? s \" \
    \          \"))\n   (not (string=? s \"            \"))\n   (not (string=? s \"\
    \             \"))\n   (not (string=? s \"              \"))\n   (not (string=?\
    \ s \"               \"))\n   (not (string=? s \"                \"))\n   (not\
    \ (string=? s \"                 \"))\n   (not (string=? s \"                \
    \  \"))\n   (not (string=? s \"                   \"))\n   (not (string=? s \"\
    \                    \"))\n   (not (string=? s \"                     \"))\n \
    \  (not (string=? s \"                      \"))\n   (not (string=? s \"     \
    \                  \"))\n   (not (string=? s \"                        \"))\n\
    \   (not (string=? s \"                         \"))\n   (not (string=? s \" \
    \                         \"))\n   (not (string=? s \"                       \
    \    \"))\n   (not (string=? s \"                            \"))\n   (not (string=?\
    \ s \"                             \"))\n   (not (string=? s \"              \
    \                \"))\n   (not (string=? s \"                               \"\
    ))\n   (not (string=? s \"                                \"))\n   (not (string=?\
    \ s \"                                 \"))\n   (not (string=? s \"          \
    \                        \"))\n   (not (string=? s \"                        \
    \           \"))\n   (not (string=? s \"                                    \"\
    ))\n   (not (string=? s \"                                     \"))\n   (not (",
  "  (define (helper s)\n    (if (empty? s)\n        #t\n        (if (equal? (first\
    \ s) (second s))\n            #f\n            (if (equal? (first s) (third s))\n\
    \                #f\n                (helper (rest s))))))\n  (if (&lt; (string-length\
    \ s) 3)\n      #f\n      (helper s)))\n</code>\n", "  (if (< (string-length s)\
    \ 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length s)\
    \ 3))\n            #t\n            (if (string=? (substring s i (+ i 3))\n   \
    \                       (substring s (+ i 1) (+ i 4)))\n                #f\n \
    \               (loop (+ i 1)))))))\n", "  (if (< (string-length s) 3)\n     \
    \ #f\n      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n   \
    \         #t\n            (if (equal? (substring s i (+ i 3))\n              \
    \          (substring s (+ i 1) (+ i 4)))\n                #f\n              \
    \  (loop (+ i 1)))))))\n", "  (define (is_happy-helper s i)\n    (cond\n     \
    \ [(= i (- (string-length s) 2)) #t]\n      [(string=? (substring s i (+ i 3))\
    \ (substring s (+ i 1) (+ i 4))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n\
    \  (if (< (string-length s) 3)\n      #f\n      (is_happy-helper s 0)))\n", " \
    \ (define (is_happy-helper s i)\n    (cond\n      [(>= i 3) (and (not (equal?\
    \ (string-ref s (- i 1)) (string-ref s (- i 2))))\n                    (not (equal?\
    \ (string-ref s (- i 1)) (string-ref s (- i 3))))\n                    (not (equal?\
    \ (string-ref s (- i 2)) (string-ref s (- i 3))))\n                    (is_happy-helper\
    \ s (- i 1)))]\n      [(= i 2) (not (equal? (string-ref s (- i 1)) (string-ref\
    \ s (- i 2))))]\n      [(= i 1) #t]\n      [else #f]))\n  (is_happy-helper s (string-length\
    \ s)))\n", "  (let loop ([s s] [prev #f])\n    (cond\n      [(empty? s) #t]\n\
    \      [(and (char=? (first s) (first prev))\n            (char=? (first s) (second\
    \ s))) #f]\n      [else (loop (rest s) (first s))])))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define (is_happy-helper\
    \ s)\n    (cond\n      [(empty? s) #t]\n      [(and (char=? (first s) (second\
    \ s)) (char=? (second s) (third s))) #f]\n      [else (is_happy-helper (rest s))]))\n\
    \  (and (>= (string-length s) 3) (is_happy-helper s)))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (not (equal? (substring s 0 3) (substring s 1 4)))))\n</code>\n",
  "  (if (&lt; (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if\
    \ (= i (- (string-length s) 3))\n            #t\n            (if (equal? (substring\
    \ s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n     \
    \           #f\n                (loop (+ i 1)))))))\n</code>\n", "  (if (&lt;\
    \ (string-length s) 3)\n      #f\n      (let ([s (string-&gt;list s)])\n     \
    \   (let loop ([s s])\n          (if (or (null? s) (null? (cdr s)) (null? (cddr\
    \ s)))\n              #t\n              (if (equal? (car s) (cadr s))\n      \
    \            #f\n                  (loop (cdr s))))))))\n</code>\n", "  (define\
    \ (helper s)\n    (cond\n      [(empty? s) #t]\n      [(and (char=? (first s)\
    \ (second s)) (char=? (second s) (third s))) #f]\n      [else (helper (rest s))]))\n\
    \  (and (&gt;= (string-length s) 3) (helper s)))\n</code>\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else #t]))\n", "  (if (< (string-length s) 3)\n      #f\n      (let\
    \ loop ([i 0])\n        (if (= i (- (string-length s) 3))\n            #t\n  \
    \          (if (string=? (substring s i (+ i 3))\n                          (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (define (helper s i)\n    (cond\n      [(= i (- (string-length s) 2)) #t]\n \
    \     [(string=? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n\
    \      [else (helper s (+ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [else (helper s 0)]))\n", "  (define (is_happy-helper s)\n    (cond\n   \
    \   [(empty? s) #t]\n      [(empty? (rest s)) #t]\n      [(empty? (rest (rest\
    \ s))) #t]\n      [(char=? (first s) (first (rest s))) #f]\n      [(char=? (first\
    \ s) (first (rest (rest s)))) #f]\n      [(char=? (first (rest s)) (first (rest\
    \ (rest s)))) #f]\n      [else (is_happy-helper (rest s))]))\n  (and (not (empty?\
    \ s)) (is_happy-helper s)))\n", "  (cond\n    [(< (string-length s) 3) #f]\n \
    \   [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (every (lambda (x) (not (equal? x (string-ref s (+ x 1))))) (iota\
    \ (- (string-length s) 2)))))\n", "  (if (< (string-length s) 3)\n      #f\n \
    \     (let ([s (string-&gt;list s)])\n        (if (and (not (equal? (car s) (cadr\
    \ s)))\n                 (not (equal? (cadr s) (caddr s)))\n                 (not\
    \ (equal? (car s) (caddr s))))\n            #t\n            #f))))\n</code>\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (=\
    \ i (- (string-length s) 3))\n            #t\n            (if (equal? (substring\
    \ s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n     \
    \           #f\n                (loop (+ i 1)))))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (equal? (string-ref s 0) (string-ref s 1))\n            \
    \    (string-ref s 1) (string-ref s 2)))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (char=? (string-ref s 0) (string-ref s 1))\n          (char=?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length s) 2))\
    \ #t]\n      [(equal? (string-ref s i) (string-ref s (+ i 1))) #f]\n      [(equal?\
    \ (string-ref s i) (string-ref s (+ i 2))) #f]\n      [(equal? (string-ref s (+\
    \ i 1)) (string-ref s (+ i 2))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n\
    \  (and (>= (string-length s) 3) (is_happy-helper s 0)))\n", "  (define (is_happy-helper\
    \ s)\n    (cond [(empty? s) #t]\n          [(and (char=? (first s) (second s))\n\
    \                (char=? (second s) (third s))) #f]\n          [else (is_happy-helper\
    \ (rest s))]))\n  (and (&gt;= (string-length s) 3)\n       (is_happy-helper s)))\n\
    </code>\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n\
    \        (if (= i (- (string-length s) 3))\n            #t\n            (if (equal?\
    \ (substring s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n\
    \                #f\n                (loop (+ i 1)))))))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length\
    \ s) 3))\n            #t\n            (if (string=? (substring s i (+ i 3))\n\
    \                          (substring s (+ i 1) (+ i 4)))\n                #f\n\
    \                (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length s) 3)\
    \ #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n",
  "  (if (or (< (string-length s) 3)\n          (equal? (string-length s) (string-length\
    \ (remove-duplicates s))))\n      #f\n      (let loop ([i 0])\n        (if (=\
    \ i (- (string-length s) 2))\n            #t\n            (if (equal? (string-ref\
    \ s i) (string-ref s (+ i 1))\n                       (string-ref s (+ i 1)) (string-ref\
    \ s (+ i 2)))\n                #f\n                (loop (+ i 1)))))))\n", " \
    \ (define (is_happy-helper s)\n    (cond\n      [(empty? s) #t]\n      [(and (char=?\
    \ (first s) (second s)) (char=? (second s) (third s))) #f]\n      [else (is_happy-helper\
    \ (rest s))]))\n  (and (not (empty? s)) (is_happy-helper s)))\n", "  (define (is_happy-helper\
    \ s i)\n    (cond\n      [(= i (- (string-length s) 2)) #t]\n      [(string=?\
    \ (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n      [else (is_happy-helper\
    \ s (+ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n    [else (is_happy-helper\
    \ s 0)]))\n", "  (and (>= (string-length s) 3)\n       (not (equal? (string-ref\
    \ s 0) (string-ref s 1))\n                (string-ref s 1) (string-ref s 2)))))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let ((s (string->list s)))\n  \
    \      (cond ((equal? (list-ref s 0) (list-ref s 1)) #f)\n              ((equal?\
    \ (list-ref s 1) (list-ref s 2)) #f)\n              ((equal? (list-ref s 0) (list-ref\
    \ s 2)) #f)\n              (else #t)))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (equal? (substring s 0 3) (substring s 1 4)))))\n", "  (cond\n\
    \    [(empty? s) #f]\n    [(< (string-length s) 3) #f]\n    [(and (char=? (string-ref\
    \ s 0) (string-ref s 1))\n          (char=? (string-ref s 0) (string-ref s 2)))\
    \ #f]\n    [else (is_happy (substring s 1))]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (equal? (string-ref s 0) (string-ref s 1))\n            \
    \    (string-ref s 1) (string-ref s 2))\n       (not (equal? (string-ref s 1)\
    \ (string-ref s 2))\n                (string-ref s 2) (string-ref s 3)))))\n",
  "  (and (>= (string-length s) 3)\n       (not (has-duplicates s))))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s\
    \ 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (and (>= (string-length s) 3)\n       (not (member (substring s 0 3) (list (substring\
    \ s 1 4) (substring s 2 5))))))\n", "  (and (>= (string-length s) 3)\n       (let\
    \ loop ([i 0])\n         (cond\n           [(= i (- (string-length s) 2)) #t]\n\
    \           [(string=? (substring s i (+ i 3))\n                      (substring\
    \ s (+ i 1) (+ i 4))) #f]\n           [else (loop (+ i 1))]))))\n", "  (if (or\
    \ (< (string-length s) 3)\n          (equal? (substring s 0 3) (substring s 1\
    \ 4)))\n      #f\n      (is_happy (substring s 1))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (and (>= (string-length s) 3)\n       (not (equal? (substring s\
    \ 0 3) (substring s 1 4)))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", " \
    \ (and (&gt;= (string-length s) 3)\n       (for/and ([i (in-range (sub1 (string-length\
    \ s)) -1 -1)])\n         (not (equal? (string-ref s i)\n                     \
    \ (string-ref s (sub1 i)))))))\n</code>\n", "  (if (< (string-length s) 3)\n \
    \     #f\n      (let loop ([i 0])\n        (if (= i (- (string-length s) 2))\n\
    \            #t\n            (if (equal? (substring s i (+ i 3)) (substring s\
    \ (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (if (or (< (string-length s) 3)\n          (string-contains s #\\a #\\a)\n  \
    \        (string-contains s #\\b #\\b)\n          (string-contains s #\\c #\\\
    c))\n      #f\n      #t))\n", "  (cond\n    [(< (string-length s) 3) #f]\n   \
    \ [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (and\n\
    \   (&gt;= (string-length s) 3)\n   (not (equal? (string-ref s 0) (string-ref\
    \ s 1)))\n   (not (equal? (string-ref s 0) (string-ref s 2)))\n   (not (equal?\
    \ (string-ref s 1) (string-ref s 2)))))\n", "  (if (< (string-length s) 3)\n \
    \     #f\n      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n\
    \            #t\n            (if (string=? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let loop ([s (string-&gt;list s)]\n\
    \                 [prev (car s)]\n                 [prev2 (cadr s)])\n       \
    \ (cond\n          [(null? s) #t]\n          [(and (char=? prev (car s))\n   \
    \             (char=? prev2 (cadr s))) #f]\n          [else (loop (cdr s) (car\
    \ s) (cadr s))]))))\n</code>\n", "  (define (is_happy-helper s i)\n    (cond\n\
    \      [(= i (- (string-length s) 2)) #t]\n      [(string=? (substring s i (+\
    \ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n      [else (is_happy-helper s (+\
    \ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n    [else (is_happy-helper\
    \ s 0)]))\n", "  (define (helper s)\n    (if (or (empty? s) (empty? (rest s))\
    \ (empty? (rest (rest s))))\n        #f\n        (if (equal? (first s) (first\
    \ (rest s)))\n            #f\n            (if (equal? (first s) (first (rest (rest\
    \ s))))\n                #f\n                (helper (rest s))))))\n  (helper\
    \ s))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n\
    \        (if (= i (- (string-length s) 2))\n            #t\n            (if (string=?\
    \ (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n                #f\n\
    \                (loop (+ i 1)))))))\n", "  (if (< (string-length s) 3)\n    \
    \  #f\n      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n  \
    \          #t\n            (if (equal? (substring s i (+ i 3))\n             \
    \           (substring s (+ i 1) (+ i 4)))\n                #f\n             \
    \   (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and\
    \ (char=? (string-ref s 0) (string-ref s 1))\n          (char=? (string-ref s\
    \ 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s\
    \ 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (if (or (< (string-length s) 3)\n      \
    \    (equal? (string-length s) (string-length (string-&gt;list (string-&gt;set\
    \ s)))))\n      #f\n      #t))\n</code>\nI am not sure if I am doing it right.\
    \ I am new to Racket.\n\n\nA:\n\nYou can use <code>string-&gt;list</code> to get\
    \ a list of characters, then <code>map</code> to get a list of strings of length\
    \ 3, then <code>map</code> again to get a list of sets of the strings, and then\
    \ <code>map</code> again to get a list of the lengths of the sets. If the length\
    \ of the list of lengths is the same as the length of the list of strings, then\
    \ all the strings are distinct.\n<code>(define (is-happy s)\n  (let ((l (string-&gt;list\
    \ s)))\n    (if (&lt; (length l) 3)\n        #f\n        (let ((sl (map (lambda\
    \ (i) (string (list-ref l i) (list-ref l (+ i 1)) (list-ref l (+ i 2))))\n   \
    \                    (range 0 (- (length l) 2)))))\n          (if (= (length sl)\
    \ (length (map length (map string-&gt;set sl))))\n              #t\n         \
    \     #f)))))\n</code>\n", "  (and (>= (string-length s) 3)\n       (for/and ([i\
    \ (in-range (sub1 (string-length s)) -1 -1)])\n         (not (equal? (string-ref\
    \ s i)\n                      (string-ref s (add1 i)))))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (for/and ([i (in-range (sub1 (string-length s)) -1 -1)])\n   \
    \      (not (equal? (string-ref s i)\n                      (string-ref s (sub1\
    \ i)))))))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n\
    \        (if (= i (- (string-length s) 3))\n            #t\n            (if (equal?\
    \ (substring s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n\
    \                #f\n                (loop (+ i 1)))))))", "  (and (>= (string-length\
    \ s) 3)\n       (not (has-duplicates? s))))\n", "  (if (< (string-length s) 3)\n\
    \      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n\
    \            #t\n            (if (equal? (substring s i (+ i 3))\n           \
    \             (substring s (+ i 1) (+ i 4)))\n                #f\n           \
    \     (loop (+ i 1)))))))\n", "  (and (&gt;= (string-length s) 3)\n       (not\
    \ (equal? (substring s 0 3) (substring s 1 4)))))\n</code>\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (equal? s (string-append (substring s 0 3) (substring s 0\
    \ 3))))\n       (not (equal? s (string-append (substring s 1 3) (substring s 1\
    \ 3))))\n       (not (equal? s (string-append (substring s 2 3) (substring s 2\
    \ 3))))))\n", "  (and (>= (string-length s) 3)\n       (for/and ([i (in-range\
    \ (sub1 (string-length s)) -1 -1)])\n         (not (equal? (string-ref s i)\n\
    \                      (string-ref s (modulo (+ i 1) (string-length s))))))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (if (or (< (string-length s) 3)\n          (equal? (string-length s) (count-distinct-letters\
    \ s)))\n      #f\n      #t))\n", "  (define (is_happy-helper s i)\n    (cond\n\
    \      [(= i (- (string-length s) 2)) #t]\n      [(char=? (string-ref s i) (string-ref\
    \ s (+ i 1))) #f]\n      [(char=? (string-ref s i) (string-ref s (+ i 2))) #f]\n\
    \      [(char=? (string-ref s (+ i 1)) (string-ref s (+ i 2))) #f]\n      [else\
    \ (is_happy-helper s (+ i 1))]))\n  (and (>= (string-length s) 3)\n       (is_happy-helper\
    \ s 0)))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n\
    \        (if (= i (- (string-length s) 3))\n            #t\n            (if (string=?\
    \ (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n                #f\n\
    \                (loop (+ i 1)))))))\n", "  (and (>= (string-length s) 3)\n  \
    \     (not (member (substring s 0 3)\n                    (list (substring s 1\
    \ 4)\n                          (substring s 2 5))))))\n", "  (define (is_happy-helper\
    \ s i)\n    (if (&lt; i (- (string-length s) 2))\n        (if (equal? (string-ref\
    \ s i) (string-ref s (+ i 1))\n                   (string-ref s (+ i 2)))\n  \
    \          #f\n            (is_happy-helper s (+ i 1)))\n        #t))\n  (is_happy-helper\
    \ s 0))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length\
    \ s) 2))\n            #t\n            (if (string=? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (define (helper s i)\n    (cond\n      [(= i (- (string-length s) 2)) #t]\n \
    \     [(string=? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n\
    \      [else (helper s (+ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [else (helper s 0)]))\n", "  (and (>= (string-length s) 3)\n       (for/and\
    \ ([i (in-range (sub1 (string-length s)) -1 -1)])\n         (not (equal? (string-ref\
    \ s i)\n                      (string-ref s (add1 i)))))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n\
    \    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define\
    \ (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length s) 2)) #t]\n\
    \      [(equal? (substring s i (+ i 3)) (string-append (substring s i (+ i 1))\
    \ (substring s i (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (is_happy-helper\
    \ s (+ i 1))]))\n  (if (< (string-length s) 3)\n      #f\n      (is_happy-helper\
    \ s 0)))\n", "  (cond\n    [(or (< (string-length s) 3)\n         (equal? (string-ref\
    \ s 0) (string-ref s 1))\n         (equal? (string-ref s 1) (string-ref s 2)))\n\
    \     #f]\n    [(equal? (string-length s) 3)\n     #t]\n    [else\n     (is_happy\
    \ (substring s 1))]))\n", "  (if (< (string-length s) 3)\n      #f\n      (let\
    \ loop ([i 0])\n        (if (= i (- (string-length s) 3))\n            #t\n  \
    \          (if (equal? (substring s i (+ i 3))\n                        (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (and\n   (&gt;= (string-length s) 3)\n \
    \  (not (equal? (substring s 0 3) (substring s 1 4)))))\n</code>\n", "  (if (<\
    \ (string-length s) 3)\n      #f\n      (define (is_happy-helper s)\n        (if\
    \ (empty? s)\n            #t\n            (if (equal? (string-ref s 0) (string-ref\
    \ s 1))\n                #f\n                (is_happy-helper (rest s)))))\n \
    \     (is_happy-helper s)))\n", "  (cond\n    [(< (string-length s) 3) #f]\n \
    \   [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", " \
    \ (and (>= (string-length s) 3)\n       (every (lambda (c) (not (equal? c (string-ref\
    \ s (+ (string-position c s) 1))))) (string-&gt;list s))))\n</code>\n", "  (if\
    \ (< (string-length s) 3)\n      #f\n      (let ([s (string-&gt;list s)])\n  \
    \      (for/and ([i (in-range (sub1 (string-length s)) -1 -1)])\n          (not\
    \ (equal? (list-ref s i) (list-ref s (add1 i))))))))\n</code>\n", "  (and (>=\
    \ (string-length s) 3)\n       (not (equal? (string-ref s 0) (string-ref s 1))\n\
    \                (string-ref s 1) (string-ref s 2)))))\n```\n\n## Problem 2\n\n\
    ```racket\n#lang racket\n", "  (if (< (string-length s) 3)\n      #f\n      (let\
    \ loop ([i 0])\n        (if (= i (- (string-length s) 2))\n            #t\n  \
    \          (if (string=? (substring s i (+ i 3))\n                          (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (=\
    \ i (- (string-length s) 2))\n            #t\n            (if (string=? (substring\
    \ s i (+ i 3))\n                          (substring s (+ i 1) (+ i 4)))\n   \
    \             #f\n                (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (define (helper s)\n    (if (string-length s)\n        (if (string=?\
    \ (substring s 0 3) (substring s 1 4))\n            #f\n            (helper (substring\
    \ s 1)))\n        #t))\n  (if (>= (string-length s) 3)\n      (helper s)\n   \
    \   #f))\n", "  (and\n   (>= (string-length s) 3)\n   (not (equal? (substring\
    \ s 0 3) (substring s 1 4)))\n   (not (equal? (substring s 0 3) (substring s 2\
    \ 5)))\n   (not (equal? (substring s 1 4) (substring s 2 5)))))\n", "  (if (or\
    \ (< (string-length s) 3)\n          (string-contains s #\\a #\\a)\n         \
    \ (string-contains s #\\b #\\b)\n          (string-contains s #\\c #\\c))\n  \
    \    #f\n      #t))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (cond\n   \
    \ [(string=? s \"\") #f]\n    [(string=? s \"a\") #f]\n    [(string=? s \"aa\"\
    ) #f]\n    [(string=? s \"aaa\") #f]\n    [(string=? s \"aaaa\") #f]\n    [(string=?\
    \ s \"aaaaa\") #f]\n    [(string=? s \"aaaaaa\") #f]\n    [(string=? s \"aaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"\
    aaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s\
    \ \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=?\
    \ s \"", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n \
    \       (if (= i (- (string-length s) 3))\n            #t\n            (if (string=?\
    \ (substring s i (+ i 3))\n                          (substring s (+ i 1) (+ i\
    \ 4)))\n                #f\n                (loop (+ i 1)))))))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(string=? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define (is_happy-helper\
    \ s)\n    (if (or (empty? s) (empty? (rest s)) (empty? (rest (rest s))))\n   \
    \     #f\n        (if (equal? (first s) (first (rest s)))\n            #f\n  \
    \          (if (equal? (first s) (first (rest (rest s))))\n                #f\n\
    \                (is_happy-helper (rest s))))))\n  (is_happy-helper s))\n", " \
    \ (if (string&lt;=? s 3)\n      #f\n      (let ([s (string-&gt;list s)])\n   \
    \     (cond\n          [(equal? (list-ref s 0) (list-ref s 1)) #f]\n         \
    \ [(equal? (list-ref s 1) (list-ref s 2)) #f]\n          [(equal? (list-ref s\
    \ 0) (list-ref s 2)) #f]\n          [else #t]))))\n</code>\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length\
    \ s) 2))\n            #t\n            (if (string=? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (define (is_happy-helper s)\n    (cond\n\
    \      [(empty? s) #t]\n      [(empty? (rest s)) #t]\n      [(empty? (rest (rest\
    \ s))) #t]\n      [(equal? (first s) (first (rest s))) #f]\n      [(equal? (first\
    \ s) (first (rest (rest s)))) #f]\n      [(equal? (first (rest s)) (first (rest\
    \ (rest s)))) #f]\n      [else (is_happy-helper (rest s))]))\n  (and (not (empty?\
    \ s))\n       (not (empty? (rest s)))\n       (not (empty? (rest (rest s))))\n\
    \       (is_happy-helper s)))\n", "  (if (< (string-length s) 3)\n      #f\n \
    \     (let loop ([i 0])\n        (if (= i (- (string-length s) 2))\n         \
    \   #t\n            (if (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+\
    \ i 4)))\n                #f\n                (loop (+ i 1)))))))\n", "  (define\
    \ (is_happy-helper s)\n    (cond [(empty? s) #t]\n          [(and (equal? (first\
    \ s) (second s))\n                (equal? (second s) (third s))) #f]\n       \
    \   [else (is_happy-helper (rest s))]))\n  (and (>= (string-length s) 3)\n   \
    \    (is_happy-helper s)))\n", "  (if (< (string-length s) 3)\n      #f\n    \
    \  (let loop ([i 0])\n        (if (= i (- (string-length s) 2))\n            #t\n\
    \            (if (char=? (string-ref s i) (string-ref s (+ i 1)))\n          \
    \      #f\n                (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length\
    \ s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (string-append (substring\
    \ s i (+ i 1)) (substring s i (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else\
    \ (is_happy-helper s (+ i 1))]))\n  (and (>= (string-length s) 3) (is_happy-helper\
    \ s 0)))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(string=? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (every (lambda (c) (not (equal? c (string-ref s (+ 1 (string-length\
    \ s))))))\n              (string-&gt;list (substring s 0 3)))))\n</code>\n", " \
    \ (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length s)\
    \ 2)) #t]\n      [(equal? (string-ref s i) (string-ref s (+ i 1))) #f]\n     \
    \ [(equal? (string-ref s i) (string-ref s (+ i 2))) #f]\n      [(equal? (string-ref\
    \ s (+ i 1)) (string-ref s (+ i 2))) #f]\n      [else (is_happy-helper s (+ i\
    \ 1))]))\n  (and (>= (string-length s) 3) (is_happy-helper s 0)))\n", "  (and\
    \ (>= (string-length s) 3)\n       (not (equal? (string-ref s 0) (string-ref s\
    \ 1))\n                (string-ref s 1) (string-ref s 2)))))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length\
    \ s) 3))\n            #t\n            (if (string=? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (define (is_happy-helper s i)\n\
    \        (if (= i (- (string-length s) 2))\n            #t\n            (if (string=?\
    \ (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n                #f\n\
    \                (is_happy-helper s (+ i 1)))))\n      (is_happy-helper s 0)))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (=\
    \ i (- (string-length s) 3))\n            #t\n            (if (equal? (substring\
    \ s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n     \
    \           #f\n                (loop (+ i 1)))))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (let loop ([i 0])\n         (cond\n           [(= i (- (string-length\
    \ s) 3)) #t]\n           [(string=? (substring s i (+ i 3)) (substring s (+ i\
    \ 1) (+ i 4))) #f]\n           [else (loop (+ i 1))]))))\n", "  (define (is_happy-helper\
    \ s)\n    (cond\n      [(empty? s) #t]\n      [(empty? (rest s)) #t]\n      [(empty?\
    \ (rest (rest s))) #t]\n      [(char=? (first s) (first (rest s))) #f]\n     \
    \ [(char=? (first s) (first (rest (rest s)))) #f]\n      [(char=? (first (rest\
    \ s)) (first (rest (rest s)))) #f]\n      [else (is_happy-helper (rest s))]))\n\
    \  (and (>= (string-length s) 3) (is_happy-helper s)))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(and (char=? (string-ref s 0) (string-ref s 1))\n          (char=?\
    \ (string-ref s 1) (string-ref s 2))) #f]\n    [else (is_happy (substring s 1))]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (and (>= (string-length s) 3)\n       (every\
    \ (lambda (x) (not (equal? x (string-ref s (+ x 1))))) (iota (- (string-length\
    \ s) 2)))))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i\
    \ 0])\n        (if (= i (- (string-length s) 3))\n            #t\n           \
    \ (if (string=? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n     \
    \           #f\n                (loop (+ i 1)))))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (every (lambda (c) (not (equal? c (string-ref s (+ 1 (string-position\
    \ c s))))))\n              (string-&gt;list s))))\n</code>\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (equal? (string-ref s 0) (string-ref s 1))\n            \
    \    (string-ref s 1) (string-ref s 2))\n       (not (equal? (string-ref s 1)\
    \ (string-ref s 2))\n                (string-ref s 2) (string-ref s 3)))))\n",
  "  (cond [(< (string-length s) 3) #f]\n        [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n        [(equal? (string-ref s 1) (string-ref s 2)) #f]\n       \
    \ [else #t]))\n", "  (if (< (string-length s) 3)\n      #f\n      (define (is_happy-helper\
    \ s)\n        (if (empty? s)\n            #t\n            (if (equal? (substring\
    \ s 0 3) (substring s 1 4))\n                #f\n                (is_happy-helper\
    \ (substring s 1)))))\n      (is_happy-helper s)))\n", "  (and (>= (string-length\
    \ s) 3)\n       (for/and ([i (in-range (sub1 (string-length s)) -1 -1)])\n   \
    \      (not (equal? (string-ref s i)\n                      (string-ref s (+ i\
    \ 1)))))))\n", "  (if (< (string-length s) 3)\n      #f\n      (define (is_happy-helper\
    \ s i)\n        (if (= i (- (string-length s) 2))\n            #t\n          \
    \  (if (string=? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n    \
    \            #f\n                (is_happy-helper s (+ i 1)))))\n      (is_happy-helper\
    \ s 0)))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n\
    \        (if (= i (- (string-length s) 2))\n            #t\n            (if (char=?\
    \ (string-ref s i) (string-ref s (+ i 1)))\n                #f\n             \
    \   (loop (+ i 1)))))))\n", "  (if (< (string-length s) 3)\n      #f\n      (let\
    \ loop ([i 0])\n        (if (= i (- (string-length s) 2))\n            #t\n  \
    \          (if (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n\
    \                #f\n                (loop (+ i 1)))))))", "  (define (is_happy-helper\
    \ s i)\n    (cond\n      [(= i (- (string-length s) 2)) #t]\n      [(char=? (string-ref\
    \ s i) (string-ref s (+ i 1))) #f]\n      [(char=? (string-ref s i) (string-ref\
    \ s (+ i 2))) #f]\n      [(char=? (string-ref s (+ i 1)) (string-ref s (+ i 2)))\
    \ #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (and (>= (string-length s)\
    \ 3)\n       (is_happy-helper s 0)))\n", "  (cond\n    [(< (string-length s) 3)\
    \ #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (and (>= (string-length s)\
    \ 3)\n       (not (equal? (string-ref s 0) (string-ref s 1))\n               \
    \ (string-ref s 1) (string-ref s 2)))))\n", "  (define (is_happy-helper s i)\n\
    \    (cond\n      [(>= i (- (string-length s) 2)) #t]\n      [(string=? (substring\
    \ s i (+ i 3)) (string-append (substring s i (+ i 1)) (substring s i (+ i 1))\
    \ (substring s i (+ i 1)))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n\
    \  (and (>= (string-length s) 3) (is_happy-helper s 0)))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else #t]))\n", "  (if (or (< (string-length s) 3)\n          (equal?\
    \ (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref\
    \ s 2)))\n      #f\n      (if (equal? (string-length s) 3)\n          #t\n   \
    \       (is_happy (substring s 1)))))\n", "  (cond\n    [(< (string-length s)\
    \ 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define (is_happy-helper\
    \ s)\n    (if (string-length s)\n        (if (string=? (substring s 0 3) (substring\
    \ s 1 4))\n            #f\n            (is_happy-helper (substring s 1)))\n  \
    \      #t))\n  (if (< (string-length s) 3)\n      #f\n      (is_happy-helper s)))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (if (or (< (string-length s) 3)\n      \
    \    (string-contains s #\\a #\\a)\n          (string-contains s #\\b #\\b)\n\
    \          (string-contains s #\\c #\\c))\n      #f\n      #t))\n", "  (if (or\
    \ (< (string-length s) 3)\n          (equal? (string-length s) 3)\n          (equal?\
    \ (string-length s) 4))\n      (if (equal? (string-ref s 0) (string-ref s 1))\n\
    \          #f\n          #t)\n      (if (equal? (string-ref s 0) (string-ref s\
    \ 1))\n          (is_happy (substring s 1))\n          (if (equal? (string-ref\
    \ s 1) (string-ref s 2))\n              (is_happy (substring s 2))\n         \
    \     (if (equal? (string-ref s 0) (string-ref s 2))\n                  (is_happy\
    \ (substring s 3))\n                  #t)))))\n", "  (and (>= (string-length s)\
    \ 3)\n       (not (equal? (string-ref s 0) (string-ref s 1))\n               \
    \ (string-ref s 1) (string-ref s 2)))))\n```\n\n## Problem 3\n\n```racket\n#lang\
    \ racket\n", "  (and (>= (string-length s) 3)\n       (every (lambda (x) (not\
    \ (equal? x (string-ref s (+ x 1))))) (iota (- (string-length s) 2)))))\n", " \
    \ (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (define (is_happy-helper s)\n    (cond\n\
    \      [(empty? s) #t]\n      [(empty? (rest s)) #t]\n      [(empty? (rest (rest\
    \ s))) #t]\n      [(char=? (first s) (first (rest s))) #f]\n      [(char=? (first\
    \ s) (first (rest (rest s)))) #f]\n      [(char=? (first (rest s)) (first (rest\
    \ (rest s)))) #f]\n      [else (is_happy-helper (rest s))]))\n  (is_happy-helper\
    \ s))\n", "  (and\n   (&gt;= (string-length s) 3)\n   (let loop ([s s])\n    \
    \ (cond\n       [(empty? s) #t]\n       [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n       [else (loop (substring s 1))]))))\n</code>\n", "  (and (>=\
    \ (string-length s) 3)\n       (not (equal? (substring s 0 3) (substring s 1 4)))))\n",
  "  (define (is_happy-helper s)\n    (cond\n      [(empty? s) #t]\n      [(empty?\
    \ (rest s)) #t]\n      [(empty? (rest (rest s))) #t]\n      [(equal? (first s)\
    \ (first (rest s))) #f]\n      [(equal? (first s) (first (rest (rest s)))) #f]\n\
    \      [(equal? (first (rest s)) (first (rest (rest s)))) #f]\n      [else (is_happy-helper\
    \ (rest s))]))\n  (is_happy-helper s))\n", "  (cond\n    [(< (string-length s)\
    \ 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (cond [(string=? s \"\"\
    ) #f]\n        [(string=? s \"a\") #f]\n        [(string=? s \"aa\") #f]\n   \
    \     [(string=? s \"ab\") #t]\n        [(string=? s \"abc\") #t]\n        [(string=?\
    \ s \"abcd\") #t]\n        [(string=? s \"abcc\") #f]\n        [(string=? s \"\
    abccd\") #t]\n        [(string=? s \"abccdd\") #t]\n        [(string=? s \"abccdde\"\
    ) #t]\n        [(string=? s \"abccddee\") #t]\n        [(string=? s \"abccddeee\"\
    ) #f]\n        [(string=? s \"abccddeeef\") #t]\n        [(string=? s \"abccddeeeff\"\
    ) #t]\n        [(string=? s \"abccddeeeffg\") #t]\n        [(string=? s \"abccddeeeffgg\"\
    ) #t]\n        [(string=? s \"abccddeeeffggg\") #f]\n        [(string=? s \"abccddeeeffgggh\"\
    ) #t]\n        [(string=? s \"abccddeeeffggghh\") #t]\n        [(string=? s \"\
    abccddeeeffggghhh\") #t]\n        [(string=? s \"abccddeeeffggghhhh\") #t]\n \
    \       [(string=? s \"abccddeeeffggghhhhh\") #f]\n        [(string=? s \"abccddeeeffggghhhhhi\"\
    ) #t]\n        [(string=? s \"abccddeeeffggghhhhhii\") #t]\n        [(string=?\
    \ s \"abccddeeeffggghhhhhiii\") #t]\n        [(string=? s \"abccddeeeffggghhhhhiiii\"\
    ) #t]\n        [(string=? s \"abccddeeeffggghhhhhiiiii\") #f]\n        [(string=?\
    \ s \"abccddeeeffggghhhhhiiiiij\") #t]\n        [(string=? s \"abccddeeeffggghhhhhiiiiijk\"\
    ) #", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0\
    \ 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (define (is_happy-helper s\
    \ i)\n    (cond\n      [(>= i (- (string-length s) 2)) #t]\n      [(string=? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n      [else (is_happy-helper\
    \ s (+ i 1))]))\n  (and (>= (string-length s) 3) (is_happy-helper s 0)))\n", " \
    \ (and (>= (string-length s) 3)\n       (not (equal? (substring s 0 3) (substring\
    \ s 1 4)))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(and (char=?\
    \ (string-ref s 0) (string-ref s 1))\n          (char=? (string-ref s 1) (string-ref\
    \ s 2))) #f]\n    [(and (char=? (string-ref s 1) (string-ref s 2))\n         \
    \ (char=? (string-ref s 2) (string-ref s 3))) #f]\n    [(and (char=? (string-ref\
    \ s 2) (string-ref s 3))\n          (char=? (string-ref s 3) (string-ref s 4)))\
    \ #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (and (&gt;=\
    \ (string-length s) 3)\n       (for/and ([i (in-range (sub1 (string-length s))\
    \ -1 -1)])\n         (not (equal? (string-ref s i)\n                      (string-ref\
    \ s (sub1 i)))))))\n", "  (define (is_happy-helper s)\n    (if (or (&lt; (string-length\
    \ s) 3)\n            (equal? (string-ref s 0) (string-ref s 1))\n            (equal?\
    \ (string-ref s 1) (string-ref s 2)))\n        #f\n        (is_happy-helper (substring\
    \ s 1))))\n  (is_happy-helper s))\n</code>\n", "  (and (>= (string-length s) 3)\n\
    \       (not (equal? s (string-append (substring s 0 1) (substring s 0 1) (substring\
    \ s 0 1))))\n       (not (equal? s (string-append (substring s 0 1) (substring\
    \ s 1 2) (substring s 1 2))))\n       (not (equal? s (string-append (substring\
    \ s 1 2) (substring s 1 2) (substring s 1 2))))\n       (not (equal? s (string-append\
    \ (substring s 1 2) (substring s 2 3) (substring s 2 3))))\n       (not (equal?\
    \ s (string-append (substring s 2 3) (substring s 2 3) (substring s 2 3))))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", " \
    \ (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (let loop ([s s] [n 0])\n    (cond\n   \
    \   [(empty? s) (if (< n 3) #f #t)]\n      [(equal? (first s) (second s)) #f]\n\
    \      [(equal? (first s) (third s)) #f]\n      [else (loop (rest s) (+ n 1))])))\n",
  "  (define (helper s)\n    (if (or (< (string-length s) 3)\n            (equal?\
    \ (string-ref s 0) (string-ref s 1))\n            (equal? (string-ref s 1) (string-ref\
    \ s 2)))\n        #f\n        (helper (substring s 1))))\n  (helper s))\n", " \
    \ (and (>= (string-length s) 3)\n       (for/and ([i (in-range 0 (- (string-length\
    \ s) 2))])\n         (not (equal? (substring s i (+ i 3))\n                  \
    \    (substring s (+ i 1) (+ i 4)))))))\n", "  (and\n   (>= (string-length s)\
    \ 3)\n   (not (member (substring s 0 3) (list (substring s 1 4) (substring s 2\
    \ 5))))))\n", "  (and\n   (&gt;= (string-length s) 3)\n   (every (lambda (x) (not\
    \ (equal? x (string-ref s (+ x 1))))) (iota (- (string-length s) 2)))))\n</code>\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (define (is_happy-helper s)\n    (cond\n\
    \      [(empty? s) #t]\n      [(and (not (empty? (rest s)))\n            (not\
    \ (empty? (rest (rest s))))\n            (equal? (first s) (second s))\n     \
    \       (equal? (second s) (third s))) #f]\n      [else (is_happy-helper (rest\
    \ s))]))\n  (and (&gt;= (string-length s) 3)\n       (is_happy-helper s)))\n</code>\n",
  "  (define (helper s)\n    (cond\n      [(empty? s) #t]\n      [(and (equal? (first\
    \ s) (second s)) (equal? (second s) (third s))) #f]\n      [else (helper (rest\
    \ s))]))\n  (and (>= (string-length s) 3) (helper s)))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length\
    \ s) 2))\n            #t\n            (if (string=? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (if (or (< (string-length s) 3)\n          (string-contains s #\\a #\\a)\n  \
    \        (string-contains s #\\b #\\b)\n          (string-contains s #\\c #\\\
    c))\n      #f\n      #t))\n", "  (cond\n    [(< (string-length s) 3) #f]\n   \
    \ [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s\
    \ 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (let loop ([s s] [prev #f])\n\
    \    (cond\n      [(empty? s) #t]\n      [(and (char=? (first s) (first prev))\n\
    \            (char=? (first s) (second s))) #f]\n      [else (loop (rest s) (first\
    \ s))])))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n\
    \        (if (= i (- (string-length s) 3))\n            #t\n            (if (equal?\
    \ (substring s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n\
    \                #f\n                (loop (+ i 1)))))))\n", "  (define (helper\
    \ s i)\n    (cond\n      [(= i (sub1 (string-length s))) #t]\n      [(equal? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n      [else (helper s (+ i\
    \ 1))]))\n  (and (>= (string-length s) 3) (helper s 0)))\n", "  (cond\n    [(string=?\
    \ s \"\") #f]\n    [(string=? s \"a\") #f]\n    [(string=? s \"aa\") #f]\n   \
    \ [(string=? s \"aaa\") #f]\n    [(string=? s \"aaaa\") #f]\n    [(string=? s\
    \ \"aaaaa\") #f]\n    [(string=? s \"aaaaaa\") #f]\n    [(string=? s \"aaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"\
    aaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s\
    \ \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=?\
    \ s \"", "  (if (or (< (string-length s) 3)\n          (string-contains s #\\\
    a #\\a)\n          (string-contains s #\\b #\\b)\n          (string-contains s\
    \ #\\c #\\c))\n      #f\n      #t))\n", "  (if (< (string-length s) 3)\n     \
    \ #f\n      (let* ([s (string->list s)]\n             [s (append s (list 'x))])\n\
    \        (cond\n          [(equal? (list-ref s 0) (list-ref s 1)) #f]\n      \
    \    [(equal? (list-ref s 1) (list-ref s 2)) #f]\n          [(equal? (list-ref\
    \ s 0) (list-ref s 2)) #f]\n          [else #t]))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (every (lambda (c) (not (equal? c (string-ref s (+ 1 (string-length\
    \ s))))))\n              (string-&gt;list (substring s 0 (- (string-length s)\
    \ 1))))))\n</code>\n", "  (and (>= (string-length s) 3)\n       (not (equal? (substring\
    \ s 0 3) (substring s 1 4)))))\n", "  (define (helper s)\n    (cond\n      [(empty?\
    \ s) #t]\n      [(and (char=? (first s) (second s)) (char=? (second s) (third\
    \ s))) #f]\n      [else (helper (rest s))]))\n  (and (not (empty? s))\n      \
    \ (not (empty? (rest s)))\n       (not (empty? (rest (rest s))))\n       (helper\
    \ s)))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n\
    \        (if (= i (- (string-length s) 2))\n            #t\n            (if (equal?\
    \ (substring s i (+ i 3))\n                        (string-append (substring s\
    \ i (+ i 1))\n                                       (substring s i (+ i 1))\n\
    \                                       (substring s i (+ i 1))))\n          \
    \      #f\n                (loop (+ i 1)))))))\n", "  (cond [(< (string-length\
    \ s) 3) #f]\n        [(and (not (equal? (string-ref s 0) (string-ref s 1)))\n\
    \              (not (equal? (string-ref s 0) (string-ref s 2)))\n            \
    \  (not (equal? (string-ref s 1) (string-ref s 2)))) #t]\n        [else #f]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (and (>= (string-length s) 3)\n       (not (equal? (substring s 0 3) (substring\
    \ s 1 4)))))\n", "  (and (>= (string-length s) 3)\n       (not (equal? (substring\
    \ s 0 3) (substring s 1 4)))))\n", "  (let loop ([s s] [prev #f])\n    (cond [(empty?\
    \ s) #t]\n          [(char=? (first s) prev) #f]\n          [else (loop (rest\
    \ s) (first s))])))\n", "  (define (is_happy-helper s)\n    (if (empty? s)\n \
    \       #t\n        (if (or (equal? (substring s 0 3) (substring s 1 4))\n   \
    \             (equal? (substring s 0 3) (substring s 2 5)))\n            #f\n\
    \            (is_happy-helper (substring s 1)))))\n  (and (>= (string-length s)\
    \ 3)\n       (is_happy-helper s)))\n", "  (and (>= (string-length s) 3)\n    \
    \   (for/and ([i (in-range (string-length s) (- (string-length s) 2))])\n    \
    \     (not (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))))))\n",
  "  (if (or (< (string-length s) 3)\n          (equal? (substring s 0 3) (substring\
    \ s 1 4)))\n      #f\n      (is_happy (substring s 1))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
