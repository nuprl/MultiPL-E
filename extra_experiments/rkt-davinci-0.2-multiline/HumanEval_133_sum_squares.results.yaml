language: rkt
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling\
    \ lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0\
    \ 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6z7b__c.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cp8q3mm.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling\
    \ lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0\
    \ 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:27:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:28:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:29:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:30:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:31:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx5v7o1__.rkt:32:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map (lambda (x) (ceiling x)) lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp6hyk93c.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp6hyk93c.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp6hyk93c.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp6hyk93c.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp6hyk93c.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp6hyk93c.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp6hyk93c.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0))\
    \ 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal?\
    \ (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0\
    \ 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0))\
    \ 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal?\
    \ (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list\
    \ 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate\
    \ (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdhlcqmge.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
- exit_code: 0
  program: "#lang racket\n\n#| You are given a list of numbers.\nYou need to return\
    \ the sum of squared numbers in the given list,\nround each element in the list\
    \ to the upper int(Ceiling) first.\nExamples:\n>>> (lst (list 1.0 2.0 3.0))\n\
    14\n>>> (lst (list 1.0 4.0 9.0))\n98\n>>> (lst (list 1.0 3.0 5.0 7.0))\n84\n>>>\
    \ (lst (list 1.4 4.2 0.0))\n29\n>>> (lst (list -2.4 1.0 1.0))\n6|#\n(define (sum_squares\
    \ lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:25:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:26:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:27:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:28:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:29:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:30:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphn4rp0wj.rkt:31:4

    actual:     200000000.0

    expected:   200000000

    ------------'
  stdout: ''
  timestamp: 1660218948
