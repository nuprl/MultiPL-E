name: HumanEval_126_is_sorted
language: rkt
prompt: "#lang racket\n\n#| Given a list of numbers, return whether or not they are\
  \ sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber,\
  \ return #f. Assume no negative numbers and only integers.\nExamples\n>>> (is_sorted\
  \ (list 5))\n#t\n>>> (is_sorted (list 1 2 3 4 5))\n#t\n>>> (is_sorted (list 1 3\
  \ 2 4 5))\n#f\n>>> (is_sorted (list 1 2 3 4 5 6))\n#t\n>>> (is_sorted (list 1 2\
  \ 3 4 5 6 7))\n#t\n>>> (is_sorted (list 1 3 2 4 5 6 7))\n#f\n>>> (is_sorted (list\
  \ 1 2 2 3 3 4))\n#t\n>>> (is_sorted (list 1 2 2 2 3 4))\n#f|#\n(define (is_sorted\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n\
  \    (check-equal? (candidate (list 5)) #t)\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 1 2 3 4\
  \ 5 6 7)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5 6 7)) #f)\n    (check-equal?\
  \ (candidate (list )) #t)\n    (check-equal? (candidate (list 1)) #t)\n    (check-equal?\
  \ (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 2 2 3 4))\
  \ #f)\n    (check-equal? (candidate (list 1 2 3 3 3 4)) #f)\n    (check-equal? (candidate\
  \ (list 1 2 2 3 3 4)) #t)\n    (check-equal? (candidate (list 1 2 3 4)) #t)\n))\n\
  \n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and\
    \ (not (empty? lst)) (not (empty? (rest lst))))\n     (if (and (<= (first lst)\
    \ (second lst)) (is_sorted (rest lst)))\n         #t\n         #f)]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #f]\n    [(and (< (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (= (first\
    \ lst) (second lst))\n          (= (second lst) (third lst))) #f]\n    [(and (not\
    \ (empty? (rest lst)))\n          (< (first lst) (second lst)))\n     (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (= (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #f]\n    [(and (&lt; (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #t]\n    [else #f]))\n</code>\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (if (and (= (first lst) (second lst))\
    \ (is_sorted (rest lst)))\n         #f\n         (if (&lt; (first lst) (second\
    \ lst))\n             (is_sorted (rest lst))\n             #f))]))\n</code>\n\
    I am trying to make it so that if the first two elements are equal, it returns\
    \ false. However, it is not working. It returns true for the following test cases:\n\
    <code>(is_sorted (list 1 2 2 3 4))", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (= (first lst) (second lst))\n         \
    \      (= (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second\
    \ lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (= (first lst) (second lst))\n\
    \          (is_sorted (rest lst))) #f]\n    [(and (< (first lst) (second lst))\n\
    \          (is_sorted (rest lst))) #t]\n    [else #f]))\n```\n\n## Problem 2\n\
    \n```racket\n#lang racket\n", "  (cond\n    [(empty? lst) #t]\n    [(and (not\
    \ (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and\
    \ (not (equal? (first lst) (second lst)))\n          (not (equal? (second lst)\
    \ (third lst)))\n          (is_sorted (rest lst)))]\n    [(and (not (empty? (rest\
    \ lst)))\n          (empty? (rest (rest lst))))\n     (not (equal? (first lst)\
    \ (second lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (if (< (first\
    \ lst) (second lst))\n         (is_sorted (rest lst))\n         #f)]))\n", " \
    \ (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (if (and (= (first lst) (second lst))\n\
    \              (not (empty? (rest (rest lst)))))\n         #f\n         (if (<\
    \ (first lst) (second lst))\n             (is_sorted (rest lst))\n           \
    \  #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (if (and (= (first lst) (second lst))\
    \ (not (empty? (rest (rest lst)))))\n         #f\n         (if (< (first lst)\
    \ (second lst))\n             (is_sorted (rest lst))\n             #f))]))\n",
  "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(= (first\
    \ lst) (second lst)) #f]\n        [(> (first lst) (second lst)) #f]\n        [else\
    \ (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n \
    \    (if (and (= (first lst) (second lst)) (is_sorted (rest lst)))\n         #f\n\
    \         (if (< (first lst) (second lst))\n             (is_sorted (rest lst))\n\
    \             #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest\
    \ (rest lst))))\n          (equal? (first lst) (second lst))\n          (equal?\
    \ (second lst) (third lst))) #f]\n    [(and (not (empty? (rest lst)))\n      \
    \    (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second lst))\n\
    \          (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n  \
    \  [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n\
    \     (if (and (= (first lst) (second lst))\n              (is_sorted (rest lst)))\n\
    \         #f\n         (if (< (first lst) (second lst))\n             (is_sorted\
    \ (rest lst))\n             #f))]))\n", "  (cond [(empty? lst) #t]\n        [(empty?\
    \ (rest lst)) #t]\n        [(and (not (empty? (rest lst)))\n              (not\
    \ (empty? (rest (rest lst))))\n              (and (= (first lst) (second lst))\n\
    \                   (= (second lst) (third lst))))\n         #f]\n        [(and\
    \ (not (empty? (rest lst)))\n              (not (empty? (rest (rest lst)))))\n\
    \         (if (and (< (first lst) (second lst))\n                  (< (second\
    \ lst) (third lst)))\n             (is_sorted (rest lst))\n             #f)]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (if (and\
    \ (= (first lst) (second lst)) (not (empty? (rest (rest lst)))))\n         #f\n\
    \         (if (< (first lst) (second lst))\n             (is_sorted (rest lst))\n\
    \             #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest\
    \ (rest lst))))\n          (and (= (first lst) (second lst))\n               (=\
    \ (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n     \
    \     (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second lst))\n\
    \          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty?\
    \ (rest lst))))\n     (if (and (= (first lst) (second lst))\n              (not\
    \ (empty? (rest (rest lst)))))\n         #f\n         (if (< (first lst) (second\
    \ lst))\n             (is_sorted (rest lst))\n             #f))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (empty? (rest\
    \ (rest lst)))\n          (or (= (first lst) (second lst))\n              (< (first\
    \ lst) (second lst)))) #t]\n    [(or (= (first lst) (second lst))\n         (<\
    \ (first lst) (second lst)))\n     (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(and (= (first\
    \ lst) (second lst)) (is_sorted (rest lst))) #f]\n        [(and (< (first lst)\
    \ (second lst)) (is_sorted (rest lst))) #t]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty?\
    \ (rest lst))))\n     (if (and (= (first lst) (second lst)) (not (empty? (rest\
    \ (rest lst)))))\n         #f\n         (if (< (first lst) (second lst))\n   \
    \          (is_sorted (rest lst))\n             #f))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal?\
    \ (first lst) (second lst)) (is_sorted (rest lst))) #f]\n    [(and (&lt; (first\
    \ lst) (second lst)) (is_sorted (rest lst))) #t]\n    [else #f]))\n</code>\n",
  "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(and (= (first\
    \ lst) (second lst))\n              (is_sorted (rest lst))) #f]\n        [(and\
    \ (< (first lst) (second lst))\n              (is_sorted (rest lst))) #t]\n  \
    \      [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(= (first lst) (second lst)) #f]\n    [(< (first lst) (second lst))\
    \ (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n         \
    \ (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second lst))\n\
    \               (= (second lst) (third lst))))\n     #f]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and (<= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst)))) #f]\n\
    \    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n\
    \     (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst)))) #f]\n    [(and (<= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst)))) #f]\n\
    \    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n\
    \     (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (and (= (first lst) (second lst))\n               (= (second\
    \ lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n          (not\
    \ (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second lst))\n    \
    \      (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n   \
    \       (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst)))) #f]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (if (and (<\
    \ (first lst) (second lst))\n              (< (second lst) (third lst)))\n   \
    \      (is_sorted (rest lst))\n         #f)]\n    [else #f]))\n", "  (cond\n \
    \   [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (= (first lst) (second lst))\n         \
    \      (= (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst))))\n          (and (= (first\
    \ lst) (second lst))\n               (= (second lst) (third lst)))) #f]\n    [(and\
    \ (<= (first lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst))))\n\
    \          (= (first lst) (second lst))\n          (= (second lst) (third lst)))\
    \ #f]\n    [(and (not (empty? (rest lst)))\n          (< (first lst) (second lst)))\n\
    \     (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond [(empty? lst) #t]\n\
    \        [(empty? (rest lst)) #t]\n        [(and (not (empty? (rest lst)))\n \
    \             (and (<= (first lst) (second lst))\n                   (is_sorted\
    \ (rest lst)))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n         \
    \ (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second lst))\n\
    \               (= (second lst) (third lst)))) #f]\n    [(and (<= (first lst)\
    \ (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n", " \
    \ (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(and (not\
    \ (empty? (rest lst)))\n              (not (empty? (rest (rest lst))))\n     \
    \         (and (= (first lst) (second lst))\n                   (= (second lst)\
    \ (third lst)))) #f]\n        [(and (< (first lst) (second lst))\n           \
    \   (is_sorted (rest lst))) #t]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #f]\n    [(and (< (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst)\
    \ (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n\
    \    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n   \
    \ [(empty? (rest lst)) #t]\n    [(and (<= (first lst) (second lst))\n        \
    \  (is_sorted (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n   \
    \       (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst)))) #f]\n    [(and (<= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst)\
    \ (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (or (= (first lst) (second lst))\n              (< (first lst) (second\
    \ lst))))\n     (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst))\n     \
    \     (not (empty? (rest lst)))\n          (or (empty? (rest (rest lst)))\n  \
    \            (and (< (first lst) (second lst))\n                   (is_sorted\
    \ (rest lst)))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest\
    \ lst))))\n     (if (and (= (first lst) (second lst))\n              (not (empty?\
    \ (rest (rest lst)))))\n         #f\n         (if (< (first lst) (second lst))\n\
    \             (is_sorted (rest lst))\n             #f))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (cond\n       [(< (first lst) (first\
    \ (rest lst))) (is_sorted (rest lst))]\n       [else #f])]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst))\
    \ (not (empty? (rest lst))))\n     (if (and (= (first lst) (second lst))\n   \
    \           (not (empty? (rest (rest lst)))))\n         #f\n         (if (&lt;\
    \ (first lst) (second lst))\n             (is_sorted (rest lst))\n           \
    \  #f))]))\n</code>\nI am not sure why this is not working. I am getting a <code>#f</code>\
    \ for <code>(is_sorted (list 1 2 2 3 3 4))</code> and <code>(is_sorted (list 1\
    \ 2 2 2 3 4))</code>.\n\n\nA:\n\nThe problem is that you're not checking the entire\
    \ list, only the first two elements.\nYou need to check the entire list, and if\
    \ you find a pair of elements that are not in order, then you can return <code>#f</code>\
    \ immediately.\n<code>(define (is-sorted lst)\n  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest\
    \ lst))))\n     (if (&lt; (first lst) (second lst))\n         (is-sorted (rest\
    \ lst))\n         #f)]))\n</code>\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst)\
    \ (second lst)) #f]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (equal? (first lst) (second lst))\n          (is_sorted (rest\
    \ lst))) #f]\n    [(and (< (first lst) (second lst))\n          (is_sorted (rest\
    \ lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (empty? (rest (rest lst)))\n          (or (= (first\
    \ lst) (second lst))\n              (< (first lst) (second lst)))) #t]\n    [(or\
    \ (= (first lst) (second lst))\n         (< (first lst) (second lst)))\n     (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n \
    \    (if (and (= (first lst) (second lst))\n              (is_sorted (rest lst)))\n\
    \         #f\n         (if (< (first lst) (second lst))\n             (is_sorted\
    \ (rest lst))\n             #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (if (and\
    \ (= (first lst) (second lst))\n              (is_sorted (rest lst)))\n      \
    \   #f\n         (if (< (first lst) (second lst))\n             (is_sorted (rest\
    \ lst))\n             #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty?\
    \ (rest lst))))\n     (and (not (member (first lst) (rest lst)))\n          (is_sorted\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (if (and\
    \ (= (first lst) (second lst))\n              (not (empty? (rest (rest lst)))))\n\
    \         #f\n         (if (< (first lst) (second lst))\n             (is_sorted\
    \ (rest lst))\n             #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n \
    \    (if (&lt; (first lst) (second lst))\n         (is_sorted (rest lst))\n  \
    \       #f)]))\n</code>\nI'm not sure if I'm doing this right, but I'm trying\
    \ to use recursion to check if the first element is less than the second element,\
    \ and if it is, check the rest of the list. If it's not, return false. I'm not\
    \ sure if I'm using the right conditionals, and I'm not sure if I'm using recursion\
    \ correctly.\n\n\nA:\n\nYou're on the right track, but you're missing a few things.\
    \ First, you need to check if the list is empty, and if it is, return <code>#t</code>.\
    \ Second, you need to check if the first element is less than the second element,\
    \ and if it is, you need to call <code>is_sorted</code> on the rest of the list.\
    \ Finally, you need to check if the first element is equal to the second element,\
    \ and if it is, return <code>#f</code>. Here's an implementation that does all\
    \ that:\n<code>(define (is-sorted lst)\n  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n \
    \    (if (&lt; (first lst) (second lst))\n         (is-sorted (rest lst))\n  \
    \       #f)]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (if\
    \ (= (first lst) (second lst))\n         #f\n         (is-sorted (rest lst)))]))\n\
    </code>\nBut this is a bit redundant, because the last two <code>cond</code> clauses\
    \ are identical except for the last line. So we can simplify it a bit:\n<code>(define\
    \ (is-sorted lst)\n  (cond\n    [(empty?", "  (cond\n    [(empty? lst) #t]\n \
    \   [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest\
    \ lst))))\n     (if (and (= (first lst) (second lst))\n              (is_sorted\
    \ (rest lst)))\n         #f\n         (if (< (first lst) (second lst))\n     \
    \        (is_sorted (rest lst))\n             #f))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (if (and (= (first lst) (second lst))\n\
    \              (not (empty? (rest (rest lst)))))\n         #f\n         (if (<\
    \ (first lst) (second lst))\n             (is_sorted (rest lst))\n           \
    \  #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (if (and (= (first\
    \ lst) (second lst))\n              (not (empty? (rest (rest lst)))))\n      \
    \   #f\n         (and (<= (first lst) (second lst))\n              (is_sorted\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (empty? (rest (rest lst)))\n          (<= (first lst) (second\
    \ lst))) #t]\n    [(and (<= (first lst) (second lst))\n          (is_sorted (rest\
    \ lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst))\n          (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst))))\n          (not (empty? (rest\
    \ (rest (rest lst)))))\n          (not (empty? (rest (rest (rest (rest lst)))))))\n\
    \     (and (and (<= (first lst) (first (rest lst)))\n               (<= (first\
    \ (rest lst)) (first (rest (rest lst)))))\n          (and (<= (first (rest (rest\
    \ lst))) (first (rest (rest (rest lst)))))\n               (<= (first (rest (rest\
    \ (rest lst)))) (first (rest (rest (rest (rest lst))))))))]\n    [(and (not (empty?\
    \ lst))\n          (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst)))))\n     (and (<= (first lst) (first (rest lst)))\n          (<= (first\
    \ (rest lst)) (first (rest (rest lst)))))]\n    [(and (not (empty? lst))\n   \
    \       (not (empty? (rest lst))))\n     (<= (first lst) (first (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (and (not (member (first lst) (rest lst)))\n\
    \          (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n  \
    \  [(empty? (rest lst)) #t]\n    [(and (= (first lst) (second lst)) (is_sorted\
    \ (rest lst))) #f]\n    [(and (< (first lst) (second lst)) (is_sorted (rest lst)))\
    \ #t]\n    [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest\
    \ lst)) #t]\n        [(and (not (empty? (rest lst)))\n              (not (empty?\
    \ (rest (rest lst))))\n              (and (= (first lst) (second lst))\n     \
    \              (= (second lst) (third lst))))\n         #f]\n        [(and (not\
    \ (empty? (rest lst)))\n              (not (empty? (rest (rest lst)))))\n    \
    \     (and (<= (first lst) (second lst))\n              (is_sorted (rest lst)))]\n\
    \        [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest lst))\
    \ #t]\n        [(and (not (empty? (rest lst))) (not (empty? (rest (rest lst)))))\n\
    \         (and (not (= (first lst) (second lst)))\n              (not (= (second\
    \ lst) (third lst)))\n              (is_sorted (rest lst)))]\n        [(and (not\
    \ (empty? (rest lst))) (empty? (rest (rest lst))))\n         (and (not (= (first\
    \ lst) (second lst)))\n              (is_sorted (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second\
    \ lst)) #f]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst)\
    \ (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst)\
    \ (second lst)) #f]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (and (= (first lst) (second lst))\n               (= (second\
    \ lst) (third lst))))\n     #f]\n    [(and (<= (first lst) (second lst))\n   \
    \       (is_sorted (rest lst)))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst)))) #f]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and (<= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst)))) #f]\n\
    \    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n\
    \     (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst))))\n \
    \    #f]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst)))))\n     (and (<= (first lst) (second lst))\n          (is_sorted (rest\
    \ lst)))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(and (empty? (rest (rest lst)))\n          (or (= (first lst)\
    \ (second lst))\n              (< (first lst) (second lst)))) #t]\n    [(or (=\
    \ (first lst) (second lst))\n         (< (first lst) (second lst)))\n     (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (= (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #f]\n    [(and (< (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (equal?\
    \ (first lst) (second lst))\n          (equal? (second lst) (third lst))) #f]\n\
    \    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n\
    \     (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond [(empty?\
    \ lst) #t]\n        [(empty? (rest lst)) #t]\n        [(and (not (empty? (rest\
    \ lst)))\n              (empty? (rest (rest lst)))) #t]\n        [(and (not (empty?\
    \ (rest lst)))\n              (empty? (rest (rest lst)))\n              (empty?\
    \ (rest (rest (rest lst))))) #t]\n        [(and (not (empty? (rest lst)))\n  \
    \            (empty? (rest (rest lst)))\n              (empty? (rest (rest (rest\
    \ lst))))\n              (empty? (rest (rest (rest (rest lst)))))) #t]\n     \
    \   [(and (not (empty? (rest lst)))\n              (empty? (rest (rest lst)))\n\
    \              (empty? (rest (rest (rest lst))))\n              (empty? (rest\
    \ (rest (rest (rest lst)))))\n              (empty? (rest (rest (rest (rest (rest\
    \ lst))))))) #t]\n        [(and (not (empty? (rest lst)))\n              (empty?\
    \ (rest (rest lst)))\n              (empty? (rest (rest (rest lst))))\n      \
    \        (empty? (rest (rest (rest (rest lst)))))\n              (empty? (rest\
    \ (rest (rest (rest (rest lst))))))\n              (empty? (rest (rest (rest (rest\
    \ (rest (rest lst)))))))) #t]\n        [(and (not (empty? (rest lst)))\n     \
    \         (empty? (rest (rest lst)))\n              (empty? (rest (rest (rest\
    \ lst))))\n              (empty? (rest (rest (rest (rest lst)))))\n          \
    \    (empty? (rest (rest (rest (rest (rest lst))))))\n              (empty? (rest\
    \ (rest (rest (rest (rest (rest lst)))))))\n              (empty? (rest (rest\
    \ (rest (rest (rest (rest (rest lst))))))))) #t]\n        [(and (not (empty? (rest\
    \ lst)))\n              (empty? (rest (rest lst)))\n              (empty? (rest\
    \ (rest (rest lst))))\n              (empty? (rest (rest (", "  (define (is_sorted-helper\
    \ lst prev)\n    (cond\n      [(empty? lst) #t]\n      [(= (first lst) prev) #f]\n\
    \      [else (is_sorted-helper (rest lst) (first lst))]))\n  (is_sorted-helper\
    \ (rest lst) (first lst)))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(and (equal? (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #f]\n    [(and (< (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (equal? (first lst) (second lst))\n    \
    \           (equal? (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst)))))\n     (and (equal? (first\
    \ lst) (second lst))\n          (is_sorted (rest lst)))]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and (< (first\
    \ lst) (second lst))\n          (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (empty? (rest (rest lst)))) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (cond\n       [(> (first lst)\
    \ (first (rest lst))) #f]\n       [(= (first lst) (first (rest lst))) #f]\n  \
    \     [else (is_sorted (rest lst))])]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst)))) #f]\n\
    \    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n\
    \     (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (and (= (first lst) (second lst))\n               (= (second\
    \ lst) (third lst))))\n     #f]\n    [(and (not (empty? (rest lst)))\n       \
    \   (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second lst))\n\
    \          (is_sorted (rest lst)))]\n    [else\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n \
    \   [else (is_sorted (rest lst))]))\n", "  (cond [(empty? lst) #t]\n        [(empty?\
    \ (rest lst)) #t]\n        [(and (= (first lst) (second lst))\n              (is_sorted\
    \ (rest lst))) #f]\n        [(and (< (first lst) (second lst))\n             \
    \ (is_sorted (rest lst))) #t]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first lst) (second\
    \ lst))\n          (is_sorted (rest lst))) #f]\n    [(and (< (first lst) (second\
    \ lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n", "  (cond [(empty?\
    \ lst) #t]\n        [(empty? (rest lst)) #t]\n        [(and (= (first lst) (second\
    \ lst))\n              (is_sorted (rest lst))) #f]\n        [(and (< (first lst)\
    \ (second lst))\n              (is_sorted (rest lst))) #t]\n        [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #f]\n    [(and (< (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst))))\n \
    \    #f]\n    [(and (<= (first lst) (second lst))\n          (is_sorted (rest\
    \ lst)))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (or (= (first lst) (second lst))\n          \
    \    (< (first lst) (second lst)))\n          (or (= (second lst) (third lst))\n\
    \              (< (second lst) (third lst))))\n     (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (= (first lst) (second lst))\n          (= (second lst) (third\
    \ lst))) #f]\n    [(and (not (empty? (rest lst)))\n          (< (first lst) (second\
    \ lst)))\n     (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (and (<= (first lst) (second\
    \ lst))\n               (<= (second lst) (third lst))))\n     (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (and (not (empty?\
    \ (rest (rest lst))))\n               (and (< (first lst) (second lst))\n    \
    \                (is_sorted (rest lst)))))\n     #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst))))\n          (= (first lst)\
    \ (second lst))\n          (= (second lst) (third lst)))\n     #f]\n    [(and\
    \ (not (empty? (rest lst)))\n          (< (first lst) (second lst)))\n     (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (= (first lst) (second lst))\n         \
    \      (= (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first lst)\
    \ (second lst))\n          (is_sorted (rest lst))) #f]\n    [(< (first lst) (second\
    \ lst))\n     (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst)))) #f]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and (<= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (empty?\
    \ (rest (rest lst)))\n          (or (< (first lst) (second lst))\n           \
    \   (= (first lst) (second lst)))) #t]\n    [(and (< (first lst) (second lst))\n\
    \          (is_sorted (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (= (first lst) (second lst))\
    \ (is_sorted (rest lst))) #f]\n    [(and (< (first lst) (second lst)) (is_sorted\
    \ (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst)))) #f]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and (<= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst)\
    \ (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (<= (first lst) (second lst))\n        \
    \       (<= (second lst) (third lst))))\n     (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null?\
    \ lst) #t]\n    [(null? (cdr lst)) #t]\n    [(< (car lst) (cadr lst)) (is_sorted\
    \ (cdr lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (= (first lst) (second lst))\n         \
    \      (= (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second\
    \ lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond [(empty? lst) #t]\n\
    \        [(empty? (rest lst)) #t]\n        [(and (not (empty? (rest lst)))\n \
    \             (not (empty? (rest (rest lst))))\n              (= (first lst) (second\
    \ lst))\n              (= (second lst) (third lst))) #f]\n        [(and (not (empty?\
    \ (rest lst)))\n              (not (empty? (rest (rest lst)))))\n         (and\
    \ (<= (first lst) (second lst))\n              (is_sorted (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst))))\n \
    \    #f]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst)))))\n     (and (<= (first lst) (second lst))\n          (is_sorted (rest\
    \ lst)))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n```\n\n### 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (= (first\
    \ lst) (second lst))\n          (= (second lst) (third lst))) #f]\n    [(and (not\
    \ (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and\
    \ (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst))))\n          (equal? (first\
    \ lst) (second lst))\n          (equal? (second lst) (third lst))) #f]\n    [(and\
    \ (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n   \
    \  (and (equal? (first lst) (second lst))\n          (equal? (second lst) (third\
    \ lst)))]\n    [(and (< (first lst) (second lst))\n          (is_sorted (rest\
    \ lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (= (first lst) (second lst))\n         \
    \      (= (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst))))\n          (and (= (first\
    \ lst) (second lst))\n               (= (second lst) (third lst)))) #f]\n    [(and\
    \ (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n   \
    \  (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n  \
    \  [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst))))\n \
    \    #f]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst)))))\n     (and (<= (first lst) (second lst))\n          (is_sorted (rest\
    \ lst)))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest\
    \ (rest lst))))\n          (and (= (first lst) (second lst))\n               (=\
    \ (second lst) (third lst))))\n     #f]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (empty? (rest (rest lst)))) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst)))))\n     (if (and (<= (first\
    \ lst) (first (rest lst)))\n              (<= (first (rest lst)) (first (rest\
    \ (rest lst)))))\n         (is_sorted (rest (rest lst)))\n         #f)]))\n",
  "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(and (not\
    \ (empty? (rest lst)))\n              (empty? (rest (rest lst)))) #t]\n      \
    \  [(and (not (empty? (rest lst)))\n              (not (empty? (rest (rest lst)))))\n\
    \         (and (not (= (first lst) (second lst)))\n              (and (<= (first\
    \ lst) (second lst))\n                   (is_sorted (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst))))\n          (and (= (first\
    \ lst) (second lst))\n               (= (second lst) (third lst))))\n     #f]\n\
    \    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n\
    \     (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (or (= (first lst) (second\
    \ lst))\n              (< (first lst) (second lst))))\n     (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (empty? (rest (rest lst))))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst)))))\n     (cond\n       [(< (first lst) (first (rest lst)))\n        (is_sorted\
    \ (rest lst))]\n       [else #f])]))\n", "  (cond [(empty? lst) #t]\n        [(empty?\
    \ (rest lst)) #t]\n        [(and (not (empty? (rest lst)))\n              (not\
    \ (empty? (rest (rest lst))))\n              (equal? (first lst) (second lst))\n\
    \              (equal? (second lst) (third lst))) #f]\n        [(and (not (empty?\
    \ (rest lst)))\n              (not (empty? (rest (rest lst)))))\n         (and\
    \ (equal? (first lst) (second lst))\n              (equal? (second lst) (third\
    \ lst)))]\n        [(and (not (empty? (rest lst)))\n              (not (empty?\
    \ (rest (rest lst)))))\n         (and (<= (first lst) (second lst))\n        \
    \      (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(= (first lst)\
    \ (second lst)) #f]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (and (= (first lst) (second lst))\n               (= (second\
    \ lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n          (not\
    \ (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second lst))\n    \
    \      (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first lst) (second lst))\n\
    \          (is_sorted (rest lst))) #f]\n    [(and (< (first lst) (second lst))\n\
    \          (is_sorted (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst))))\n     #f]\n    [(and (not\
    \ (empty? (rest lst)))\n          (not (empty? (rest (rest lst)))))\n     (and\
    \ (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #t]\n    [(<\
    \ (car lst) (cadr lst)) (is_sorted (cdr lst))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second\
    \ lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first lst) (second lst))\n\
    \          (is_sorted (rest lst))) #f]\n    [(and (< (first lst) (second lst))\n\
    \          (is_sorted (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty?\
    \ (rest (rest lst))))\n          (and (= (first lst) (second lst))\n         \
    \      (= (second lst) (third lst)))) #f]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst)))))\n     (and (<= (first lst) (second\
    \ lst))\n          (is_sorted (rest lst)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first lst)\
    \ (second lst)) (empty? (rest (rest lst)))) #f]\n    [(and (equal? (first lst)\
    \ (second lst)) (not (empty? (rest (rest lst))))) (is_sorted (rest (rest lst)))]\n\
    \    [(and (not (equal? (first lst) (second lst))) (< (first lst) (second lst)))\
    \ (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n         \
    \ (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second lst))\n\
    \               (= (second lst) (third lst)))) #f]\n    [(and (<= (first lst)\
    \ (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (not (equal? (first lst)\
    \ (second lst)))\n          (not (equal? (second lst) (third lst))))\n     (and\
    \ (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (if (and (= (first\
    \ lst) (second lst))\n              (is_sorted (rest lst)))\n         #f\n   \
    \      (if (< (first lst) (second lst))\n             (is_sorted (rest lst))\n\
    \             #f))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(and (= (first lst) (second lst))\n          (is_sorted (rest lst))) #f]\n\
    \    [(and (< (first lst) (second lst))\n          (is_sorted (rest lst))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst))))\n \
    \    #f]\n    [(and (<= (first lst) (second lst))\n          (is_sorted (rest\
    \ lst)))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (empty? (rest (rest lst)))\n          (or (< (first\
    \ lst) (second lst))\n              (= (first lst) (second lst)))) #t]\n    [(and\
    \ (< (first lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (= (first\
    \ lst) (second lst)) (is_sorted (rest lst))) #f]\n    [(and (< (first lst) (second\
    \ lst)) (is_sorted (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty?\
    \ (rest lst))))\n     (if (and (<= (first lst) (second lst))\n              (is_sorted\
    \ (rest lst)))\n         #t\n         #f)]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst))) (not (empty?\
    \ (rest (rest lst)))))\n     (and (<= (first lst) (first (rest lst)))\n      \
    \    (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n```\n\n## Problem 2\n\n```racket\n#lang racket\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst))\
    \ (not (empty? (rest lst))))\n     (if (and (= (first lst) (second lst)) (not\
    \ (empty? (rest (rest lst)))))\n         #f\n         (if (< (first lst) (second\
    \ lst))\n             (is_sorted (rest lst))\n             #f))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest\
    \ lst)))\n          (not (empty? (rest (rest lst))))\n          (and (= (first\
    \ lst) (second lst))\n               (= (second lst) (third lst)))) #f]\n    [(and\
    \ (<= (first lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(and (not (empty? (rest lst)))\n          (and (<= (first lst) (second lst))\n\
    \               (is_sorted (rest lst)))) #t]\n    [else #f]))\n", "  (cond\n \
    \   [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #f]\n    [(and (< (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (not (=\
    \ (first lst) (second lst)))\n          (not (= (second lst) (third lst))))\n\
    \     (and (<= (first lst) (second lst))\n          (is_sorted (rest lst)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (and (= (first lst) (second lst))\n               (= (second\
    \ lst) (third lst)))) #f]\n    [(and (<= (first lst) (second lst))\n         \
    \ (is_sorted (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty?\
    \ (rest lst))))\n     (if (and (= (first lst) (second lst))\n              (not\
    \ (empty? (rest (rest lst)))))\n         #f\n         (if (&lt; (first lst) (second\
    \ lst))\n             (is_sorted (rest lst))\n             #f))]))\n</code>\n",
  "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(and (not\
    \ (empty? (rest lst)))\n              (= (first lst) (second lst)))\n        \
    \ #f]\n        [(and (not (empty? (rest lst)))\n              (< (first lst) (second\
    \ lst)))\n         (is_sorted (rest lst))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst))\n\
    \          (not (empty? (rest lst)))\n          (and (<= (first lst) (second lst))\n\
    \               (is_sorted (rest lst))))\n     #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (equal? (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #f]\n    [(and (< (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(= (first\
    \ lst) (second lst)) #f]\n        [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (and (= (first lst) (second lst))\n               (= (second\
    \ lst) (third lst))))\n     #f]\n    [(and (<= (first lst) (second lst))\n   \
    \       (is_sorted (rest lst)))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? (rest lst))) (not (empty? (rest (rest\
    \ lst)))))\n     (and (not (= (first lst) (second lst)))\n          (and (<= (first\
    \ lst) (second lst))\n               (is_sorted (rest lst))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (not (empty? (rest (rest lst))))\n          (and (=\
    \ (first lst) (second lst))\n               (= (second lst) (third lst))))\n \
    \    #f]\n    [(and (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst)))))\n     (and (<= (first lst) (second lst))\n          (is_sorted (rest\
    \ lst)))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(and (equal? (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #f]\n    [(and (< (first lst) (second lst))\n          (is_sorted\
    \ (rest lst))) #t]\n    [else #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null?\
    \ (cdr lst)) #t]\n    [(and (equal? (car lst) (cadr lst))\n          (is_sorted\
    \ (cdr lst))) #f]\n    [(and (< (car lst) (cadr lst))\n          (is_sorted (cdr\
    \ lst))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(= (first lst) (second lst)) #f]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? (rest lst)))\n\
    \          (not (empty? (rest (rest lst))))\n          (and (= (first lst) (second\
    \ lst))\n               (= (second lst) (third lst)))) #f]\n    [(and (<= (first\
    \ lst) (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ (rest lst)))\n          (or (= (first lst) (second lst))\n              (< (first\
    \ lst) (second lst))))\n     (is_sorted (rest lst))]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
