language: rkt
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (if (char-lower-case? c)\n                 (char-upcase c)\n\
    \                 (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp09y3ph0v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp09y3ph0v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x) (char-upcase\
    \ x) (char-downcase x))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpty6kk1eb.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpty6kk1eb.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s)) (string-append (char-upcase\
    \ (first s)) (solve (rest s)))]\n    [(char-numeric? (first s)) (string-append\
    \ (first s) (solve (rest s)))]\n    [else (string-append (char-downcase (first\
    \ s)) (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev68s3dm.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpev68s3dm.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpev68s3dm.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpev68s3dm.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpev68s3dm.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-e"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-join (reverse (map (lambda (x)\n   \
    \                                (if (char-alphabetic? x)\n                  \
    \                     (char-upcase x)\n                                      \
    \ (char-downcase x)))\n                                 (string->list s)))\n \
    \                  \"\")\n      (string-join (reverse (string->list s)) \"\")))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbvr7jgv.rkt:30:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #rx\"[a-zA-Z]\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfbvr7jgv.rkt:31:4\n\nstring-contains?: contract violation\n\
    \  expected: string?\n  given: #rx\"[a-zA-Z]\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbvr7jgv.rkt:32:4\n\nstring-contains?:\
    \ contract violation\n  expected: string?\n  given: #rx\"[a-zA-Z]\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbvr7jgv.rkt:33:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #rx\"[a-zA-Z]\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfbvr7jgv.rkt:34:4\n\nstring-contains?: contract violation\n\
    \  expected: string?\n  given: #rx\"[a-zA-Z]\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   "
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append (string-downcase (string-ref s 0)) \"\")\n      (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n      (string-append\
    \ (string-ref s 0) \"\")\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-append (string-upcase (string-ref s 0)) \"\")\n      (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9k7ghpm.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9k7ghpm.rkt:37:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9k7ghpm.rkt:38:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9k7ghpm.rkt:39:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9k7ghpm.rkt:40:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9k7ghpm.rkt:41:4\n\
    \nstring-upcase: contract violation\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x) (char-upcase\
    \ x) (char-downcase x))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9ktlj61k.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9ktlj61k.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map\n       (lambda (c)\n         (if\
    \ (char-alphabetic? c)\n             (char-upcase c)\n             (char-downcase\
    \ c)))\n       s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprp87xmkr.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprp87xmkr.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (string-join\n\
    \   (reverse\n    (map\n     (lambda (c)\n       (if (char-alphabetic? c)\n  \
    \         (char-upcase c)\n           (char-downcase c)))\n     (string->list\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzu2ixs6.rkt:30:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    F #\\D #\\S #\\A)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnzu2ixs6.rkt:31:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\4 #\\3 #\\2 #\\1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzu2ixs6.rkt:32:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    B #\\A)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnzu2ixs6.rkt:33:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\C #\\@ #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzu2ixs6.rkt:34:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\5 #\\4 #\\^\
    \ #\\W #\\F #\\D #\\S #\\A #\\#)\n--------------------\n-------"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (x)\n         (if (char-alphabetic?\
    \ x)\n             (char-upcase x)\n             (char-downcase x)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsuc7i40q.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpsuc7i40q.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(string-contains? s #\\a)\n     (string-map\n      (lambda (c)\n       \
    \ (if (char-alphabetic? c)\n            (char-downcase c)\n            (char-upcase\
    \ c)))\n      s)]\n    [else (string-reverse s)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm_73dcuq.rkt:18:6: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpm_73dcuq.rkt:18:6\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt3392puj.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpt3392puj.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (if (char-lower-case? (first s))\n          (char-upcase (first s))\n \
    \         (char-downcase (first s)))\n      (solve (rest s)))]\n    [else\n  \
    \   (string-append (first s) (solve (rest s)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg6dgwg3_.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg6dgwg3_.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg6dgwg3_.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg6dgwg3_.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg6dgwg3_.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-e"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (reverse-case-string s)\n    (string-map\
    \ reverse-case s))\n  (define (reverse-string s)\n    (string-reverse s))\n  (if\
    \ (string-contains s is-letter?)\n      (reverse-case-string s)\n      (reverse-string\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppoczjbuq.rkt:23:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppoczjbuq.rkt:23:5\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplqa6w7_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmplqa6w7_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-downcase c)\n                                 \
    \ (char-upcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcp33_u1d.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpcp33_u1d.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (reverse s)))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp2fhas3r_.rkt:24:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqu5lwjyt.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqu5lwjyt.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (if (char-lower-case? c)\n                 (char-upcase c)\n\
    \                 (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp09y3ph0v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp09y3ph0v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt3392puj.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpt3392puj.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-downcase x)\n                        (char-upcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7pu5xkm1.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7pu5xkm1.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-pred\
    \ s char-alphabetic?)\n      (string-map (\u03BB (c) (if (char-alphabetic? c)\n\
    \                             (char-downcase c)\n                            \
    \ (char-upcase c)))\n                 s)\n      (string-reverse s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdec9lqys.rkt:16:7: string-contains-pred: unbound identifier\n \
    \ in: string-contains-pred\n  location...:\n   /tmp/tmpdec9lqys.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (reverse-string s)\n    (string-reverse\
    \ s))\n  (define (reverse-case-string s)\n    (string-map reverse-case s))\n \
    \ (define (reverse-case-letters s)\n    (string-map (lambda (c) (if (is-letter?\
    \ c) (reverse-case c) c)) s))\n  (define (has-letters? s)\n    (string-any is-letter?\
    \ s))\n  (cond\n    [(has-letters? s) (reverse-case-letters s)]\n    [else (reverse-string\
    \ s)]))\n```\n\n## Problem 2\n\n```racket\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpkylk1gdv.rkt:35:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeph2lf1a.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeph2lf1a.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeph2lf1a.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeph2lf1a.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeph2lf1a.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeph2lf1a.rkt:35:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0dtyeiwn.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0dtyeiwn.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (reverse-case-string s)\n    (string-map\
    \ reverse-case s))\n  (define (reverse-string s)\n    (string-reverse s))\n  (if\
    \ (string-contains s is-letter?)\n      (reverse-case-string s)\n      (reverse-string\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppoczjbuq.rkt:23:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppoczjbuq.rkt:23:5\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0)\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-downcase (string-ref s 0))\n                    (solve (substring s\
    \ 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl_2b5s6_.rkt:35:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:36:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:38:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (reverse-string s)\n    (if (empty? s)\n\
    \        \"\"\n        (string-append (reverse-string (rest s)) (list (first s)))))\n\
    \  (define (reverse-string-case s)\n    (if (empty? s)\n        \"\"\n       \
    \ (string-append (reverse-string-case (rest s)) (list (reverse-case (first s))))))\n\
    \  (define (reverse-string-case-if-letter s)\n    (if (empty? s)\n        \"\"\
    \n        (string-append (reverse-string-case-if-letter (rest s)) (list (if (is-letter?\
    \ (first s)) (reverse-case (first s)) (first s))))))\n  (if (string-contains s\
    \ (regexp \"[a-zA-Z]\"))\n      (reverse-string-case-if-letter s)\n      (reverse-string\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpokn_sijv.rkt:34:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpokn_sijv.rkt:34:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplqa6w7_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmplqa6w7_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (rev-case c)\n    (if (char-alphabetic? c)\n        (if (char-lower-case? c)\n\
    \            (char-upcase c)\n            (char-downcase c))\n        c))\n  (define\
    \ (rev-case-string s)\n    (string-map rev-case s))\n  (if (string-any char-alphabetic?\
    \ s)\n      (rev-case-string s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqezkn9_1.rkt:23:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqezkn9_1.rkt:23:5\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0)\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-downcase (string-ref s 0))\n                    (solve (substring s\
    \ 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl_2b5s6_.rkt:35:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:36:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:38:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (if (char-lower-case? c)\n                          \
    \            (char-upcase c)\n                                      (char-downcase\
    \ c))\n                                  c)) s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx_27e7sy.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpx_27e7sy.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:29:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpjhiba0.rkt:31:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:32:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:33:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:34:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-downcase (string (first s)))\n                    (solve (rest s)))]\n\
    \    [(char-numeric? (first s))\n     (string-append (string (first s))\n    \
    \                (solve (rest s)))]\n    [else\n     (string-append (string-upcase\
    \ (string (first s)))\n                    (solve (rest s)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09y63qum.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp09y63qum.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp09y63qum.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp09y63qum.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp09y63qum.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-e"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-downcase\
    \ c) (char-upcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcizita7y.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpcizita7y.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:29:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpjhiba0.rkt:31:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:32:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:33:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:34:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp83y7iowm.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp83y7iowm.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmajjisft.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmajjisft.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (reverse-string s)\n    (if (empty? s)\n\
    \        \"\"\n        (string-append (reverse-string (rest s)) (string (first\
    \ s)))))\n  (define (reverse-string-case s)\n    (if (empty? s)\n        \"\"\n\
    \        (string-append (reverse-string-case (rest s)) (string (reverse-case (first\
    \ s))))))\n  (if (string-contains s is-letter?)\n      (reverse-string-case s)\n\
    \      (reverse-string s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1sjpcaqa.rkt:30:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp1sjpcaqa.rkt:30:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-downcase c)\n                                 \
    \ (char-upcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2ryk_plv.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp2ryk_plv.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp0b0_jfd.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpp0b0_jfd.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(and (char-alphabetic? (string-ref s 0))\n      \
    \    (char-lower-case? (string-ref s 0)))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(and (char-alphabetic? (string-ref\
    \ s 0))\n          (char-upper-case? (string-ref s 0)))\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [else (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp924a8rad.rkt:31:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp924a8rad.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp924a8rad.rkt:33:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp924a8rad.rkt:34:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp924a8rad.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp924a8rad.rkt:36:4\n\
    \nstring-ref: index is out o"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (if (char-lower-case? c)\n                 (char-upcase c)\n\
    \                 (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphk9na3u9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmphk9na3u9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp0b0_jfd.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpp0b0_jfd.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-upcase c)\n                                  (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyk7xppp1.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpyk7xppp1.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s \"a-z\")\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5ymjf83m.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp5ymjf83m.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (rev-case-string s)\n    (if (string-empty?\
    \ s)\n        \"\"\n        (string-append (reverse-case (string-ref s 0))\n \
    \                      (rev-case-string (substring s 1)))))\n  (if (string-any\
    \ is-letter? s)\n      (rev-case-string s)\n      (string-reverse s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy_hl8q58.rkt:23:9: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpy_hl8q58.rkt:23:9\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmajjisft.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmajjisft.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-upcase c)\n                                  (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5r4dw80d.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5r4dw80d.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp0b0_jfd.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpp0b0_jfd.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (\u03BB (x) (if (char-alphabetic? x)\n          \
    \                   (char-upcase x)\n                             (char-downcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt9xbsemu.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpt9xbsemu.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplqa6w7_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmplqa6w7_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp22s55s1m.rkt:22:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplqa6w7_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmplqa6w7_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt3392puj.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpt3392puj.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (if (char-lower-case? c)\n                 (char-upcase c)\n\
    \                 (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp09y3ph0v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp09y3ph0v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmajjisft.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmajjisft.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt3392puj.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpt3392puj.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-downcase (string-ref s 0))\n                    (solve (substring s\
    \ 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0)\n                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nhkpuz1.rkt:33:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nhkpuz1.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8nhkpuz1.rkt:35:4\n\nstring-downcase: contract violation\n\
    \  expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nhkpuz1.rkt:36:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nhkpuz1.rkt:37:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nhkpuz1.rkt:38:4\n\
    \nstring-upcase: contract vi"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6mvwt8_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp6mvwt8_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-upcase x)\n                        (char-downcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt446c103.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt446c103.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp83y7iowm.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp83y7iowm.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw2ejs0pa.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpw2ejs0pa.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (\u03BB (c) (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptz9ehrj0.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmptz9ehrj0.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplqa6w7_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmplqa6w7_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt3392puj.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpt3392puj.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0)\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-downcase (string-ref s 0))\n                    (solve (substring s\
    \ 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl_2b5s6_.rkt:35:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:36:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:38:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map\n       (lambda (c)\n         (if\
    \ (char-alphabetic? c)\n             (char-upcase c)\n             (char-downcase\
    \ c)))\n       s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprp87xmkr.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprp87xmkr.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append (string-downcase (substring s 0 1))\n                  \
    \   (substring s 1 (- (string-length s) 1)))\n      (string-upcase (substring\
    \ s (- (string-length s) 1) (string-length s))))]\n    [else\n     (string-append\n\
    \      (string-append (string-upcase (substring s 0 1))\n                    \
    \ (substring s 1 (- (string-length s) 1)))\n      (string-downcase (substring\
    \ s (- (string-length s) 1) (string-length s))))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi3g8tpm4.rkt:34:4

    actual:     "asDF"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi3g8tpm4.rkt:35:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi3g8tpm4.rkt:36:4

    actual:     "aB"

    expected:   "AB"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi3g8tpm4.rkt:37:4

    actual:     "#a@c"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi3g8tpm4.rkt:38:4

    actual:     "#AsdfW^45"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi3g8tpm4.rkt:39:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi3g8tpm4.rkt:40:4

    actual:     "#$a^d"

    '
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwf5gmdib.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwf5gmdib.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-upcase (string-ref s 0))\n      (solve (substring s 1)))]\n   \
    \ [(char-numeric? (string-ref s 0))\n     (string-append\n      (string-ref s\
    \ 0)\n      (solve (substring s 1)))]\n    [else\n     (string-append\n      (string-downcase\
    \ (string-ref s 0))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzzavr4r.rkt:36:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzzavr4r.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbzzavr4r.rkt:38:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzzavr4r.rkt:39:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzzavr4r.rkt:40:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzzavr4r.rkt:41:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwf5gmdib.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwf5gmdib.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6mvwt8_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp6mvwt8_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-upcase x)\n                        (char-downcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo95dfn83.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpo95dfn83.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-letter?\
    \ s)\n      (reverse-case s)\n      (reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx8f20i_s.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpx8f20i_s.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp83y7iowm.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp83y7iowm.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmajjisft.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmajjisft.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (if (char-lower-case? c)\n                 (char-upcase c)\n\
    \                 (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphk9na3u9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmphk9na3u9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg_fmur1t.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpg_fmur1t.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (string-join\
    \ (reverse (map (lambda (x)\n                               (if (char-alphabetic?\
    \ x)\n                                   (if (char-lower-case? x)\n          \
    \                             (char-upcase x)\n                              \
    \         (char-downcase x))\n                                   x))\n       \
    \                      (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:29:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    F #\\d #\\S #\\a)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:30:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\4 #\\3 #\\2 #\\1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:31:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    B #\\A)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg9y2nl8c.rkt:32:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\c #\\@ #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:33:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\5 #\\4 #\\^\
    \ #\\w #\\F #\\D #\\S #\\a #\\#)\n--------------------\n-------"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map\n       (lambda (c)\n         (if\
    \ (char-alphabetic? c)\n             (if (char-lower-case? c)\n              \
    \   (char-upcase c)\n                 (char-downcase c))\n             c))\n \
    \      s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk6kjq42r.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpk6kjq42r.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append\n       (string-append\n        (string-append\n       \
    \  (string-append\n          (string-append\n           (string-append\n     \
    \       (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpd5z1rbgu.rkt:84:70: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 86\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmajjisft.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmajjisft.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdvavicpt.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpdvavicpt.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv68i06tv.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv68i06tv.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append (string-upcase (string-ref s 0))\n                     (string-downcase\
    \ (substring s 1)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-append (string-downcase (string-ref s 0))\n                   \
    \  (string-upcase (substring s 1)))\n      (solve (substring s 1)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3p5icw_3.rkt:34:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3p5icw_3.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3p5icw_3.rkt:36:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3p5icw_3.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3p5icw_3.rkt:38:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3p5icw_3.rkt:39:4\n\
    \nstring-downcase: contract violat"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv68i06tv.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv68i06tv.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwf5gmdib.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwf5gmdib.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmajjisft.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmajjisft.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(letter? (first s))\n     (string-append\n      (if\
    \ (char-lower-case? (first s))\n          (char-upcase (first s))\n          (char-lower-case\
    \ (first s)))\n      (solve (rest s)))]\n    [else\n     (string-append (first\
    \ s) (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg8z8png_.rkt:18:6: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmpg8z8png_.rkt:18:6\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c)\n         (not (char-numeric?\
    \ c))))\n  (define (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase\
    \ c)\n        (char-downcase c)))\n  (define (reverse-case-string s)\n    (string-map\
    \ reverse-case s))\n  (define (reverse-string s)\n    (string-reverse s))\n  (define\
    \ (has-letters? s)\n    (string-any is-letter? s))\n  (cond\n    [(has-letters?\
    \ s) (reverse-case-string s)]\n    [else (reverse-string s)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw1mog6dx.rkt:24:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpw1mog6dx.rkt:24:5\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplqa6w7_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmplqa6w7_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (string-join\
    \ (reverse (map (lambda (x)\n                               (if (char-alphabetic?\
    \ x)\n                                   (if (char-lower-case? x)\n          \
    \                             (char-upcase x)\n                              \
    \         (char-downcase x))\n                                   x))\n       \
    \                      (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:29:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    F #\\d #\\S #\\a)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:30:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\4 #\\3 #\\2 #\\1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:31:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    B #\\A)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg9y2nl8c.rkt:32:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\c #\\@ #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg9y2nl8c.rkt:33:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\5 #\\4 #\\^\
    \ #\\w #\\F #\\D #\\S #\\a #\\#)\n--------------------\n-------"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoi44b9z3.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpoi44b9z3.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-upcase x)\n                        (char-downcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt446c103.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt446c103.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (if (char-lower-case? (first s))\n          (string-upcase (string (first\
    \ s)))\n          (string-downcase (string (first s))))\n      (solve (rest s)))]\n\
    \    [else\n     (string-append (string (first s)) (solve (rest s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptj48pgih.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptj48pgih.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptj48pgih.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptj48pgih.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptj48pgih.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-e"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fykugv4.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7fykugv4.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fykugv4.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7fykugv4.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fykugv4.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-e"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-letter?\
    \ s)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-downcase c)\
    \ (char-upcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo4muskpj.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpo4muskpj.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains\
    \ s #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3cz53vna.rkt:16:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp3cz53vna.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:29:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpjhiba0.rkt:31:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:32:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:33:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpjhiba0.rkt:34:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2m7iugze.rkt:27:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2m7iugze.rkt:28:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2m7iugze.rkt:29:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2m7iugze.rkt:30:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2m7iugze.rkt:31:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2m7iugze.rkt:32:4\n\
    \nstring-downcase: contract violat"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv68i06tv.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv68i06tv.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (string-reverse\
    \ (string-map\n                   (lambda (c)\n                     (if (char-alphabetic?\
    \ c)\n                         (char-upcase c)\n                         (char-downcase\
    \ c)))\n                   s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmtwtw4rl.rkt:16:3: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpmtwtw4rl.rkt:16:3\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0)\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-downcase (string-ref s 0))\n                    (solve (substring s\
    \ 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl_2b5s6_.rkt:35:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:36:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:38:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplqa6w7_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmplqa6w7_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (\u03BB (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo_7_3x1_.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpo_7_3x1_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-downcase x)\n                        (char-upcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7pu5xkm1.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7pu5xkm1.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6mvwt8_v.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp6mvwt8_v.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-ci=? c #\\a)\n                       \
    \     #\\A\n                            #\\a)\n                        c))\n \
    \                 s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpefsiv1fo.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpefsiv1fo.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (is-letter? c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define\
    \ (reverse-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n  \
    \      (char-downcase c)))\n  (define (reverse-string s)\n    (if (empty? s)\n\
    \        \"\"\n        (string-append (reverse-string (rest s)) (string (first\
    \ s)))))\n  (if (string-contains s is-letter?)\n      (string-map reverse-case\
    \ s)\n      (reverse-string s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmns33zyl.rkt:26:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpmns33zyl.rkt:26:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string (string-ref s 0)))\n                    (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string (string-ref s 0))\n                    (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpogz2z6kt.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpogz2z6kt.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpogz2z6kt.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpogz2z6kt.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpogz2z6kt.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpogz2z6kt.rkt:38:4"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-downcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [else\
    \ (string-append (string-ref s 0)\n                         (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7jn6bwke.rkt:32:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7jn6bwke.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7jn6bwke.rkt:34:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7jn6bwke.rkt:35:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7jn6bwke.rkt:36:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7jn6bwke.rkt:37:4\n\
    \nstring-ref: index is out of ra"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp83y7iowm.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp83y7iowm.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append\n       (string-append\n        (string-append\n       \
    \  (string-append\n          (string-append\n           (string-append\n     \
    \       (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpcht5m76s.rkt:84:70: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 86\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmajjisft.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmajjisft.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-upcase c)\n                                  (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5r4dw80d.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5r4dw80d.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-downcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [else\
    \ (string-append (string-ref s 0)\n                         (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gzn8fc2.rkt:32:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gzn8fc2.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9gzn8fc2.rkt:34:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gzn8fc2.rkt:35:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gzn8fc2.rkt:36:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gzn8fc2.rkt:37:4\n\
    \nstring-ref: index is out of ra"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoczvfh2c.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpoczvfh2c.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (\u03BB (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4jshvyo8.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp4jshvyo8.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (string-upcase (string (first s)))\n      (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append\n      (string (first s))\n      (solve (rest\
    \ s)))]\n    [else\n     (string-append\n      (string-downcase (string (first\
    \ s)))\n      (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqz95bqx6.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqz95bqx6.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqz95bqx6.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqz95bqx6.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqz95bqx6.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-e"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv68i06tv.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv68i06tv.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (if (char-lower-case? (first s))\n          (string-upcase (string (first\
    \ s)))\n          (string-downcase (string (first s))))\n      (solve (rest s)))]\n\
    \    [else\n     (string-append (string (first s)) (solve (rest s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptj48pgih.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptj48pgih.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptj48pgih.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptj48pgih.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptj48pgih.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-e"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwf5gmdib.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwf5gmdib.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c)\n                  \
    \  (if (char-alphabetic? c)\n                        (char-upcase c)\n       \
    \                 (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9co0800i.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9co0800i.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append\n       (string-append\n        (string-append\n       \
    \  (string-append\n          (string-append\n           (string-append\n     \
    \       (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpcht5m76s.rkt:84:70: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 86\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (define\
    \ (reverse-case c)\n    (cond\n      [(char-alphabetic? c) (char-upcase c)]\n\
    \      [(char-numeric? c) c]\n      [(char-whitespace? c) c]\n      [(char-punctuation?\
    \ c) c]\n      [(char-symbolic? c) c]\n      [else (char-downcase c)]))\n  (string-join\
    \ (map reverse-case (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh86b5h5.rkt:31:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    A #\\S #\\D #\\F)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjh86b5h5.rkt:32:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\1 #\\2 #\\3 #\\4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh86b5h5.rkt:33:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    A #\\B)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjh86b5h5.rkt:34:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\# #\\A #\\@ #\\C)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh86b5h5.rkt:35:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\# #\\A #\\S\
    \ #\\D #\\F #\\W #\\^ #\\4 #\\5)\n--------------------\n-------"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (if (char-lower-case? x)\n                     \
    \       (char-upcase x)\n                            (char-downcase x))\n    \
    \                    x))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi_u41i0y.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpi_u41i0y.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-upcase x)\n                        (char-downcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt446c103.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt446c103.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuu0nzr4c.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuu0nzr4c.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains\
    \ s #\\a)\n      (string-map (lambda (x)\n                    (if (char-alphabetic?\
    \ x)\n                        (char-downcase x)\n                        (char-upcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpugv2rs3r.rkt:16:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpugv2rs3r.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0dtyeiwn.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0dtyeiwn.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219002
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains-ci?\
    \ s \"a-z\")\n      (string-map (\u03BB (c) (if (char-alphabetic? c) (char-downcase\
    \ c) (char-upcase c))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpykxfdtq2.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpykxfdtq2.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0))\n                    (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0)\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-downcase (string-ref s 0))\n                    (solve (substring s\
    \ 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl_2b5s6_.rkt:35:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:36:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_2b5s6_.rkt:38:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219002
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond [(empty?\
    \ s) \"\"]\n        [(char-alphabetic? (string-ref s 0))\n         (string-append\
    \ (string-upcase (string-ref s 0))\n                        (solve (substring\
    \ s 1)))]\n        [(char-numeric? (string-ref s 0))\n         (string-append\
    \ (string-ref s 0)\n                        (solve (substring s 1)))]\n      \
    \  [else (string-append (string-downcase (string-ref s 0))\n                 \
    \            (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp25byk6l5.rkt:31:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp25byk6l5.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp25byk6l5.rkt:33:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp25byk6l5.rkt:34:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp25byk6l5.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp25byk6l5.rkt:36:4\n\
    \nstring-downcase: contract "
  stdout: ''
  timestamp: 1660219004
- exit_code: 0
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbeqw_83i.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbeqw_83i.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyz1qc_zp.rkt:16:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpyz1qc_zp.rkt:16:7\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwf5gmdib.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwf5gmdib.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n```\n\n## Problem 2\n\
    \n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmptrsdtvmk.rkt:25:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| You are given a string s.\nif s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \notherwise keep it as it is.\n\
    If the string contains no letters, reverse the string.\nThe function should return\
    \ the resulted string.\nExamples\n>>> (solve \"1234\")\n\"4321\"\n>>> (solve \"\
    ab\")\n\"AB\"\n>>> (solve \"#a@C\")\n\"#A@c\"|#\n(define (solve s)\n  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7mfgvhp9.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7mfgvhp9.rkt:17:7\n"
  stdout: ''
  timestamp: 1660219001
