name: HumanEval_153_Strongest_Extension
language: rkt
prompt: "#lang racket\n\n#| You will be given the name of a class (a string) and a\
  \ list of extensions.\nThe extensions are to be used to load additional classes\
  \ to the class. The\nstrength of the extension is as follows: Let CAP be the number\
  \ of the uppercase\nletters in the extension's name, and let SM be the number of\
  \ lowercase letters \nin the extension's name, the strength is given by the fraction\
  \ CAP - SM. \nYou should find the strongest extension and return a string in this\
  \ \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions\
  \ with the same strength, you should\nchoose the one that comes first in the list.\n\
  For example, if you are given \"Slices\" as the class and a list of the\nextensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n\
  >>> (Strongest_Extension \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n\"my_class.AA\"\
  |#\n(define (Strongest_Extension class_name extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (let ([sorted (sort lst (\u03BB (x y)\
    \ (< (strength x) (strength y))))])\n      (car sorted)))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ((caps (count-if char-upper-case? ext))\n          (smalls (count-if char-lower-case?\
    \ ext)))\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond ((null? extensions) strongest-extension-name)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-name-helper\
    \ (cdr extensions) strongest-extension-name))))\n    (strongest-extension-name-helper\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength s)\n    (let ([caps (count (lambda (c)\
    \ (char-upper-case? c)) s)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) s)])\n      (- caps smalls)))\n  (define (strongest-extension lst)\n   \
    \ (apply max (map strength lst)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength ext)\n\
    \    (define (is-upper? c)\n      (char-upcase? c))\n    (define (is-lower? c)\n\
    \      (char-lower-case? c))\n    (define (count-upper s)\n      (foldl (lambda\
    \ (c acc)\n               (if (is-upper? c)\n                   (+ acc 1)\n  \
    \                 acc))\n             0\n             s))\n    (define (count-lower\
    \ s)\n      (foldl (lambda (c acc)\n               (if (is-lower? c)\n       \
    \            (+ acc 1)\n                   acc))\n             0\n           \
    \  s))\n    (- (count-upper ext)\n       (count-lower ext)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (if (null? extensions)\n          strongest-extension-name\n          (let*\
    \ ([ext (car extensions)]\n                 [ext-strength (strength ext)])\n \
    \           (if (< ext-strength (strength strongest-extension-name))\n       \
    \         (strongest-extension-name-helper (cdr extensions) ext)\n           \
    \     (strongest-extension-name-helper (cdr extensions) strongest-extension-name)))))\n\
    \    (strongest-extension-name-helper extensions (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ str)\n    (let ((caps (regexp-match #rx\"[A-Z]\" str))\n          (smalls (regexp-match\
    \ #rx\"[a-z]\" str)))\n      (- (length caps) (length smalls))))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ str)\n    (let loop ([str str] [cap 0] [sm 0])\n      (cond [(empty? str) (/\
    \ cap (- sm))]\n            [(char-upper-case? (car str)) (loop (cdr str) (+ cap\
    \ 1) sm)]\n            [(char-lower-case? (car str)) (loop (cdr str) cap (+ sm\
    \ 1))]\n            [else (loop (cdr str) cap sm)])))\n  (define (strongest lst)\n\
    \    (if (null? lst)\n        \"\"\n        (let loop ([lst lst] [max 0] [max-str\
    \ \"\"])\n          (cond [(null? lst) max-str]\n                [(> (strength\
    \ (car lst)) max) (loop (cdr lst) (strength (car lst)) (car lst))]\n         \
    \       [else (loop (cdr lst) max max-str)]))))\n  (string-append class_name \"\
    .\" (strongest extensions)))\n</code>\n", "  (define (strength ext)\n    (let\
    \ ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength str)\n    (let ([caps (count-if char-upper-case? str)]\n         \
    \ [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n  (define\
    \ (strongest-extension extensions)\n    (let ([extensions (sort extensions (\u03BB\
    \ (a b) (< (strength a) (strength b))))])\n      (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (- (count-if char-upper-case? ext)\n       (count-if char-lower-case?\
    \ ext)))\n  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n\
    \  (string-append class_name \".\" (list-ref extensions (argmax (map strength\
    \ extensions)))))\n", "  (string-append class_name \".\" (car (sort (map (lambda\
    \ (ext) (cons ext (abs (- (count-upper ext) (count-lower ext))))) extensions)\
    \ (lambda (x y) (> (cdr x) (cdr y))))))\n", "  (define (strength extension)\n\
    \    (let ((upper (string-upper-case extension))\n          (lower (string-lower-case\
    \ extension)))\n      (- (string-length upper) (string-length lower))))\n  (define\
    \ (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (define (strongest-extension-name extensions)\n    (list-ref extensions (argmax\
    \ (map strength extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension extensions)\n\
    \    (let ([extensions (sort extensions (lambda (a b) (string<? a b)))]\n    \
    \      [strengths (map strength extensions)])\n      (apply max strengths)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([extensions (sort\
    \ extensions (lambda (a b) (string<? a b)))]\n          [strengths (map strength\
    \ extensions)])\n      (list-ref extensions (list-index (apply max strengths)\
    \ strengths))))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (let ((cap (regexp-match #rx\"[A-Z]\" extension))\n\
    \          (sm (regexp-match #rx\"[a-z]\" extension)))\n      (- (length cap)\
    \ (length sm))))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count_upper str)\n    (let loop ((i 0) (count\
    \ 0))\n      (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count_lower str)\n    (let loop ((i 0)\
    \ (count 0))\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (/\
    \ (- (count_upper str) (count_lower str)) (string-length str)))\n  (define (strongest_extension\
    \ lst)\n    (let loop ((lst lst) (max_strength 0) (max_extension \"\"))\n    \
    \  (if (null? lst)\n          max_extension\n          (let ((str (car lst)))\n\
    \            (if (&gt; (strength str) max_strength)\n                (loop (cdr\
    \ lst) (strength str) str)\n                (loop (cdr lst) max_strength max_extension))))))\n\
    \  (string-append class_name \".\" (strongest_extension extensions)))\n</code>\n",
  "  (string-append class_name \".\" (car (sort (map (lambda (ext)\n             \
    \                                    (cons (round (/ (- (count-upper ext) (count-lower\
    \ ext))\n                                                                 (count-lower\
    \ ext)))\n                                                       ext))\n     \
    \                                          extensions)\n                     \
    \                      (lambda (x y)\n                                       \
    \      (cond\n                                               [(> (car x) (car\
    \ y)) #t]\n                                               [(< (car x) (car y))\
    \ #f]\n                                               [else (string<? (cdr x)\
    \ (cdr y))])))))\n  )\n", "  (define (strength str)\n    (let loop ([str str]\
    \ [cap 0] [sm 0])\n      (cond [(empty? str) (/ cap (- sm))]\n            [(char-upper-case?\
    \ (car str)) (loop (cdr str) (+ cap 1) sm)]\n            [(char-lower-case? (car\
    \ str)) (loop (cdr str) cap (+ sm 1))]\n            [else (loop (cdr str) cap\
    \ sm)])))\n  (define (strongest-extension extensions)\n    (let loop ([extensions\
    \ extensions] [max-strength -inf.0] [max-extension #f])\n      (cond [(empty?\
    \ extensions) max-extension]\n            [(> (strength (car extensions)) max-strength)\n\
    \             (loop (cdr extensions) (strength (car extensions)) (car extensions))]\n\
    \            [else (loop (cdr extensions) max-strength max-extension)])))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ str)\n    (let ([caps (count-if char-upper-case? str)]\n          [smalls (count-if\
    \ char-lower-case? str)])\n      (- caps smalls)))\n  (define (strongest-extension\
    \ lst)\n    (if (null? lst)\n        \"\"\n        (let ([ext (car lst)]\n   \
    \           [rest (cdr lst)])\n          (if (null? rest)\n              ext\n\
    \              (let ([strongest (strongest-extension rest)])\n               \
    \ (if (&gt; (strength ext) (strength strongest))\n                    ext\n  \
    \                  strongest))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n</code>\n", "  (define (strength ext)\n    (define (count-upper\
    \ ext)\n      (if (empty? ext)\n          0\n          (if (char-upper-case? (car\
    \ ext))\n              (+ 1 (count-upper (cdr ext)))\n              (count-upper\
    \ (cdr ext)))))\n    (define (count-lower ext)\n      (if (empty? ext)\n     \
    \     0\n          (if (char-lower-case? (car ext))\n              (+ 1 (count-lower\
    \ (cdr ext)))\n              (count-lower (cdr ext)))))\n    (- (count-upper ext)\
    \ (count-lower ext)))\n  (define (strongest-extension extensions)\n    (if (empty?\
    \ extensions)\n        \"\"\n        (let ((first-ext (car extensions))\n    \
    \          (rest-exts (cdr extensions)))\n          (if (empty? rest-exts)\n \
    \             first-ext\n              (let ((first-strength (strength first-ext))\n\
    \                    (rest-strength (strength (strongest-extension rest-exts))))\n\
    \                (if (> first-strength rest-strength)\n                    first-ext\n\
    \                    (strongest-extension rest-exts)))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength str)\n   \
    \ (let loop ([str str] [cap 0] [sm 0])\n      (cond [(empty? str) (/ cap (- sm))]\n\
    \            [(char-upper-case? (car str)) (loop (cdr str) (+ cap 1) sm)]\n  \
    \          [(char-lower-case? (car str)) (loop (cdr str) cap (+ sm 1))]\n    \
    \        [else (loop (cdr str) cap sm)])))\n  (define (strongest-extension extensions)\n\
    \    (let loop ([extensions extensions] [max-ext \"\"] [max-strength 0])\n   \
    \   (cond [(empty? extensions) max-ext]\n            [(> (strength (car extensions))\
    \ max-strength)\n             (loop (cdr extensions) (car extensions) (strength\
    \ (car extensions)))]\n            [else (loop (cdr extensions) max-ext max-strength)])))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength extension)\n    (let ((cap (count-if char-upper-case? extension))\n\
    \          (sm (count-if char-lower-case? extension)))\n      (- cap sm)))\n \
    \ (define (strongest-extension extensions)\n    (define (strongest-extension-helper\
    \ extensions strongest-extension)\n      (cond ((null? extensions) strongest-extension)\n\
    \            ((> (strength (car extensions)) (strength strongest-extension))\n\
    \             (strongest-extension-helper (cdr extensions) (car extensions)))\n\
    \            (else (strongest-extension-helper (cdr extensions) strongest-extension))))\n\
    \    (strongest-extension-helper extensions (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ str)\n    (let ((caps (count-if char-upper-case? str))\n          (smalls (count-if\
    \ char-lower-case? str)))\n      (- caps smalls)))\n  (define (strongest-extension\
    \ lst)\n    (let ((strongest (car lst))\n          (strongest-strength (strength\
    \ (car lst))))\n      (for/fold ([strongest (car lst)]\n                 [strongest-strength\
    \ (strength (car lst))])\n                 ([ext (in-list (cdr lst))])\n     \
    \   (let ((ext-strength (strength ext)))\n          (if (> ext-strength strongest-strength)\n\
    \              (values ext ext-strength)\n              (values strongest strongest-strength))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (count-upper-case str)\n    (for/fold ([count 0]) ([c (in-string str)])\n  \
    \    (if (char-upper-case? c)\n          (+ count 1)\n          count)))\n  (define\
    \ (count-lower-case str)\n    (for/fold ([count 0]) ([c (in-string str)])\n  \
    \    (if (char-lower-case? c)\n          (+ count 1)\n          count)))\n  (define\
    \ (strength str)\n    (- (count-upper-case str) (count-lower-case str)))\n  (define\
    \ (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (define (strongest-extension-name extensions)\n    (list-ref extensions (position\
    \ (strongest-extension extensions) extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength s)\n\
    \    (- (length (regexp-match* #rx\"[A-Z]\" s))\n       (length (regexp-match*\
    \ #rx\"[a-z]\" s))))\n  (define (strongest-extension-name lst)\n    (apply max\
    \ lst))\n  (string-append class_name \".\" (list-ref extensions (strongest-extension-name\
    \ (map strength extensions)))))\n", "  (define (strength extension)\n    (let\
    \ ([caps (count-if char-upper-case? extension)]\n          [smalls (count-if char-lower-case?\
    \ extension)])\n      (- caps smalls)))\n  (define (strongest-extension lst)\n\
    \    (let ([max-strength (apply max (map strength lst))])\n      (car (filter\
    \ (lambda (x) (= (strength x) max-strength)) lst))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ((caps (regexp-match #rx\"[A-Z]\" ext))\n          (smalls (regexp-match\
    \ #rx\"[a-z]\" ext)))\n      (- (length caps) (length smalls))))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength str)\n\
    \    (let loop ([str str] [cap 0] [sm 0])\n      (cond [(empty? str) (/ cap (-\
    \ sm))]\n            [(char-upper-case? (car str)) (loop (cdr str) (+ cap 1) sm)]\n\
    \            [(char-lower-case? (car str)) (loop (cdr str) cap (+ sm 1))]\n  \
    \          [else (loop (cdr str) cap sm)])))\n  (define (strongest-extension extensions)\n\
    \    (let loop ([extensions extensions] [max-strength -1] [max-extension \"\"\
    ])\n      (cond [(empty? extensions) max-extension]\n            [(> (strength\
    \ (car extensions)) max-strength)\n             (loop (cdr extensions) (strength\
    \ (car extensions)) (car extensions))]\n            [else (loop (cdr extensions)\
    \ max-strength max-extension)])))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let loop ([str str] [cap 0]\
    \ [sm 0])\n      (cond [(empty? str) (/ cap (- sm))]\n            [(char-upper-case?\
    \ (car str)) (loop (cdr str) (+ cap 1) sm)]\n            [(char-lower-case? (car\
    \ str)) (loop (cdr str) cap (+ sm 1))]\n            [else (loop (cdr str) cap\
    \ sm)])))\n  (define (strongest-extension lst)\n    (let loop ([lst lst] [max\
    \ 0] [max-str \"\"])\n      (cond [(empty? lst) (string-append class_name \".\"\
    \ max-str)]\n            [(> (strength (car lst)) max) (loop (cdr lst) (strength\
    \ (car lst)) (car lst))]\n            [else (loop (cdr lst) max max-str)])))\n\
    \  (strongest-extension extensions))\n", "  (define (strength str)\n    (let ([caps\
    \ (count-if char-upper-case? str)]\n          [smalls (count-if char-lower-case?\
    \ str)])\n      (- caps smalls)))\n  (define (strongest-extension lst)\n    (apply\
    \ max (map strength lst)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax (map strength extensions)))))\n", "  (define (strength ext)\n    (let\
    \ ([caps (count-if char-upper-case? ext)]\n          [smalls (count-if char-lower-case?\
    \ ext)])\n      (- caps smalls)))\n  (define (strongest-extension lst)\n    (let\
    \ ([max-strength (apply max (map strength lst))])\n      (first (filter (lambda\
    \ (ext) (= (strength ext) max-strength)) lst))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ((caps (string-count ext #\\A #\\Z))\n          (smalls (string-count ext\
    \ #\\a #\\z)))\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-so-far)\n \
    \     (cond ((null? extensions) strongest-so-far)\n            ((> (strength (car\
    \ extensions)) (strength strongest-so-far))\n             (strongest-extension-name-helper\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-name-helper\
    \ (cdr extensions) strongest-so-far))))\n    (strongest-extension-name-helper\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count-upper str)\n    (for/sum ([c (in-string\
    \ str)])\n      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n \
    \ (define (strength str)\n    (- (count-upper str) (count-lower str)))\n  (define\
    \ (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax (map strength extensions)))))\n",
  "  (define (strength str)\n    (let ((caps (regexp-match #rx\"[A-Z]\" str))\n  \
    \        (smalls (regexp-match #rx\"[a-z]\" str)))\n      (- (length caps) (length\
    \ smalls))))\n  (define (strongest_extension lst)\n    (cond\n      [(empty? lst)\
    \ \"\"]\n      [(empty? (cdr lst)) (car lst)]\n      [else (let ((first (car lst))\n\
    \                   (second (cadr lst)))\n               (if (> (strength first)\
    \ (strength second))\n                   first\n                   second))]))\n\
    \  (string-append class_name \".\" (strongest_extension extensions)))\n", "  (define\
    \ (strength s)\n    (let ([cap (count-if char-upper-case? s)]\n          [sm (count-if\
    \ char-lower-case? s)])\n      (- cap sm)))\n  (define (strongest-extension l)\n\
    \    (if (null? l)\n        \"\"\n        (let ([s (car l)]\n              [ss\
    \ (cdr l)])\n          (if (null? ss)\n              s\n              (let ([s-strength\
    \ (strength s)]\n                    [ss-strength (strength (strongest-extension\
    \ ss))])\n                (if (> s-strength ss-strength)\n                   \
    \ s\n                    (strongest-extension ss)))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ((caps (regexp-match* #rx\"[A-Z]\" ext))\n          (smalls (regexp-match*\
    \ #rx\"[a-z]\" ext)))\n      (- (length caps) (length smalls))))\n  (define (strongest-extension\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ((strongest (strongest-extension extensions)))\n     \
    \ (car (filter (lambda (ext) (= (strength ext) strongest)) extensions))))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (count-caps\
    \ str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str))\n\
    \          count\n          (if (char-upper-case? (string-ref str i))\n      \
    \        (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (count-smalls str)\n    (let loop ([i 0] [count 0])\n      (if (= i\
    \ (string-length str))\n          count\n          (if (char-lower-case? (string-ref\
    \ str i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i\
    \ 1) count)))))\n  (define (strength str)\n    (- (count-caps str) (count-smalls\
    \ str)))\n  (define (strongest-extension lst)\n    (if (null? lst)\n        \"\
    \"\n        (let ([str (car lst)])\n          (if (null? (cdr lst))\n        \
    \      str\n              (let ([str2 (strongest-extension (cdr lst))])\n    \
    \            (if (> (strength str) (strength str2))\n                    str\n\
    \                    str2))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (define (strongest-extension-name extensions)\n    (list-ref extensions (position\
    \ (strongest-extension extensions) extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength str)\n\
    \    (let ((caps (count-if char-upper-case? str))\n          (smalls (count-if\
    \ char-lower-case? str)))\n      (- caps smalls)))\n  (define (strongest-extension\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-name\
    \ extensions)\n    (list-ref extensions (position (strongest-extension extensions)\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength str)\n    (let ((cap (count-if char-upper-case? str))\n   \
    \       (sm (count-if char-lower-case? str)))\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ((caps (string-count ext #\\A #\\Z))\n          (smalls (string-count\
    \ ext #\\a #\\z)))\n      (- caps smalls)))\n  (define (strongest-extension extensions)\n\
    \    (let loop ((extensions extensions)\n               (best-extension (car extensions))\n\
    \               (best-strength (strength (car extensions))))\n      (cond ((null?\
    \ extensions) best-extension)\n            ((> (strength (car extensions)) best-strength)\n\
    \             (loop (cdr extensions) (car extensions) (strength (car extensions))))\n\
    \            (else (loop (cdr extensions) best-extension best-strength)))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n          (sm\
    \ (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ lst)\n    (cond ((null? lst) '())\n          ((null? (cdr lst)) (car lst))\n\
    \          (else (let ((first (car lst))\n                      (rest (cdr lst)))\n\
    \                  (if (&gt; (strength first) (strength (strongest-extension rest)))\n\
    \                      first\n                      (strongest-extension rest))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n</code>\n",
  "  (define (strength extension)\n    (define (count-upper extension)\n      (cond\n\
    \        [(empty? extension) 0]\n        [(char-upper-case? (first extension))\
    \ (+ 1 (count-upper (rest extension)))]\n        [else (count-upper (rest extension))]))\n\
    \    (define (count-lower extension)\n      (cond\n        [(empty? extension)\
    \ 0]\n        [(char-lower-case? (first extension)) (+ 1 (count-lower (rest extension)))]\n\
    \        [else (count-lower (rest extension))]))\n    (- (count-upper extension)\
    \ (count-lower extension)))\n  (define (strongest-extension extensions)\n    (cond\n\
    \      [(empty? extensions) \"\"]\n      [(empty? (rest extensions)) (first extensions)]\n\
    \      [(> (strength (first extensions)) (strength (second extensions))) (strongest-extension\
    \ (cons (first extensions) (rest (rest extensions))))]\n      [else (strongest-extension\
    \ (rest extensions))]))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ((cap (count-if char-upcase?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (define (strongest-extension-name extensions)\n    (list-ref extensions (position\
    \ (strongest-extension extensions) extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ([caps (count-if char-upper-case? ext)]\n          [smalls (count-if\
    \ char-lower-case? ext)])\n      (- caps smalls)))\n  (define (strongest-extension\
    \ lst)\n    (let ([ext (car lst)]\n          [str (strength ext)])\n      (for/fold\
    \ ([str str] [ext ext]) ([e (in-list (cdr lst))])\n        (let ([s (strength\
    \ e)])\n          (if (< s str)\n              (values s e)\n              (values\
    \ str ext))))))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let ((upper (count-if char-upper-case? ext))\n \
    \         (lower (count-if char-lower-case? ext)))\n      (- upper lower)))\n\
    \  (define (strongest-extension extensions)\n    (let loop ((extensions extensions)\n\
    \               (strongest (car extensions))\n               (strength (strength\
    \ (car extensions))))\n      (cond ((null? extensions) strongest)\n          \
    \  ((> (strength (car extensions)) strength)\n             (loop (cdr extensions)\
    \ (car extensions) (strength (car extensions))))\n            (else (loop (cdr\
    \ extensions) strongest strength)))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength s)\n    (let ((caps (string-count s #\\\
    A #\\Z))\n          (smalls (string-count s #\\a #\\z)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (let ((strongest (car lst))\n      \
    \    (strength (strength (car lst))))\n      (for ([e (in-list (cdr lst))])\n\
    \        (let ((s (strength e)))\n          (when (> s strength)\n           \
    \ (set! strongest e)\n            (set! strength s))))\n      strongest))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ str)\n    (let ((caps (string-upper-case str))\n          (smalls (string-lower-case\
    \ str)))\n      (- (string-length caps) (string-length smalls))))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength extension)\n\
    \    (let ((caps (count-if char-upper-case? extension))\n          (smalls (count-if\
    \ char-lower-case? extension)))\n      (- caps smalls)))\n  (define (strongest-extension\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength s)\n    (let ([caps (count-if char-upper-case? s)]\n          [smalls\
    \ (count-if char-lower-case? s)])\n      (- caps smalls)))\n  (define (strongest-extension\
    \ lst)\n    (define (strongest-extension-helper lst strongest-so-far)\n      (cond\
    \ [(empty? lst) strongest-so-far]\n            [(> (strength (first lst)) (strength\
    \ strongest-so-far))\n             (strongest-extension-helper (rest lst) (first\
    \ lst))]\n            [else (strongest-extension-helper (rest lst) strongest-so-far)]))\n\
    \    (strongest-extension-helper (rest lst) (first lst)))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (define (is-upper? c)\n      (char-upper-case? c))\n    (define (is-lower? c)\n\
    \      (char-lower-case? c))\n    (define (count-upper str)\n      (define (count-upper-iter\
    \ str count)\n        (cond\n          [(empty? str) count]\n          [(is-upper?\
    \ (first str)) (count-upper-iter (rest str) (+ count 1))]\n          [else (count-upper-iter\
    \ (rest str) count)]))\n      (count-upper-iter str 0))\n    (define (count-lower\
    \ str)\n      (define (count-lower-iter str count)\n        (cond\n          [(empty?\
    \ str) count]\n          [(is-lower? (first str)) (count-lower-iter (rest str)\
    \ (+ count 1))]\n          [else (count-lower-iter (rest str) count)]))\n    \
    \  (count-lower-iter str 0))\n    (- (count-upper ext) (count-lower ext)))\n \
    \ (define (find-strongest extensions)\n    (define (find-strongest-iter extensions\
    \ strongest)\n      (cond\n        [(empty? extensions) strongest]\n        [(>\
    \ (strength (first extensions)) (strength strongest))\n         (find-strongest-iter\
    \ (rest extensions) (first extensions))]\n        [else (find-strongest-iter (rest\
    \ extensions) strongest)]))\n    (find-strongest-iter extensions (first extensions)))\n\
    \  (string-append class_name \".\" (find-strongest extensions)))\n", "  (define\
    \ (strength ext)\n    (- (count-if char-upper-case? ext)\n       (count-if char-lower-case?\
    \ ext)))\n  (define (strongest-extension lst)\n    (if (null? lst)\n        \"\
    \"\n        (let ((max-ext (car lst))\n              (max-strength (strength (car\
    \ lst))))\n          (for ([ext (in-list (cdr lst))])\n            (let ((str\
    \ (strength ext)))\n              (when (> str max-strength)\n               \
    \ (set! max-ext ext)\n                (set! max-strength str))))\n          max-ext)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (define (strongest-extension-name-with-strength extensions)\n\
    \    (let ([strongest-extension-name (strongest-extension-name extensions)])\n\
    \      (list strongest-extension-name\n            (strength strongest-extension-name))))\n\
    \  (define (strongest-extension-name-with-strength-and-index extensions)\n   \
    \ (let ([strongest-extension-name-with-strength (strongest-extension-name-with-strength\
    \ extensions)])\n      (list (first strongest-extension-name-with-strength)\n\
    \            (second strongest-extension-name-with-strength)\n            (index-of\
    \ strongest-extension-name-with-strength extensions))))\n  (define (strongest-extension-name-with-strength-and-index-and-extensions\
    \ extensions)\n    (let ([strongest-extension-name-with-strength-and-index (strongest-extension-name-with-strength-and-index\
    \ extensions)])\n      (list (first strongest-extension-name-with-strength-and-index)\n\
    \            (second strongest-extension-name-with-strength-and-index)\n     \
    \       (third strongest-extension-name-with-strength-and-index)\n           \
    \ extensions)))\n  (define (strongest-extension-name-with-strength-and-index-and-extensions-and-class-name\
    \ extensions)\n    (let ([strongest-extension-name-with-strength-and-index-and-extensions\
    \ (strongest-extension-name-with-strength-and-index-and-extensions extensions)])\n\
    \      (list (first strongest-extension-name-with-strength-and-index-and-extensions)\n\
    \            (second strongest-extension-name-with-strength-and-index-and-extensions)\n",
  "  (define (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n   \
    \       (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ extensions)\n    (let ((extensions (sort extensions (\u03BB (a b) (< (strength\
    \ a) (strength b))))))\n      (car extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ([cap (count-if char-upper-case? ext)]\n          [sm (count-if char-lower-case?\
    \ ext)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extensions (sort extensions (\u03BB (x y) (< (strength x) (strength\
    \ y))))])\n      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count-upper str)\n    (let loop ((i 0) (count\
    \ 0))\n      (if (= i (string-length str))\n          count\n          (if (char-upper-case?\
    \ (string-ref str i))\n              (loop (+ i 1) (+ count 1))\n            \
    \  (loop (+ i 1) count)))))\n  (define (count-lower str)\n    (let loop ((i 0)\
    \ (count 0))\n      (if (= i (string-length str))\n          count\n         \
    \ (if (char-lower-case? (string-ref str i))\n              (loop (+ i 1) (+ count\
    \ 1))\n              (loop (+ i 1) count)))))\n  (define (strength str)\n    (-\
    \ (count-upper str) (count-lower str)))\n  (define (strongest-extension lst)\n\
    \    (if (null? lst)\n        \"\"\n        (let loop ((lst lst) (max-str \"\"\
    ) (max-strength 0))\n          (if (null? lst)\n              max-str\n      \
    \        (let ((str (car lst))\n                    (strength (strength (car lst))))\n\
    \                (if (> strength max-strength)\n                    (loop (cdr\
    \ lst) str strength)\n                    (loop (cdr lst) max-str max-strength)))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength str)\n    (let loop ([str str] [cap 0] [sm 0])\n      (cond [(empty?\
    \ str) (/ cap (- sm))]\n            [(char-upcase? (first str)) (loop (rest str)\
    \ (+ cap 1) sm)]\n            [(char-lowercase? (first str)) (loop (rest str)\
    \ cap (+ sm 1))]\n            [else (loop (rest str) cap sm)])))\n  (define (strongest-extension\
    \ lst)\n    (let loop ([lst lst] [max (strength (first lst))] [max-str (first\
    \ lst)])\n      (cond [(empty? lst) max-str]\n            [(> (strength (first\
    \ lst)) max) (loop (rest lst) (strength (first lst)) (first lst))]\n         \
    \   [else (loop (rest lst) max max-str)])))\n  (string-append class_name \".\"\
    \ (strongest-extension extensions)))\n", "  (define (strength extension)\n   \
    \ (let ([caps (count (lambda (x) (char-upper-case? x)) extension)]\n         \
    \ [smalls (count (lambda (x) (char-lower-case? x)) extension)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ([ext (car extensions)]\n              [rest (cdr\
    \ extensions)])\n          (if (null? rest)\n              ext\n             \
    \ (let ([next (strongest-extension rest)])\n                (if (&gt; (strength\
    \ ext) (strength next))\n                    ext\n                    next))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n</code>\n",
  "  (define (strength s)\n    (let ([caps (count (lambda (c) (char-upper-case? c))\
    \ s)]\n          [smalls (count (lambda (c) (char-lower-case? c)) s)])\n     \
    \ (- caps smalls)))\n  (define (strongest-extension lst)\n    (let ([sorted (sort\
    \ lst (lambda (a b) (< (strength a) (strength b))))])\n      (car sorted)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength s)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) s)]\n\
    \          [smalls (count (lambda (c) (char-lower-case? c)) s)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension lst)\n    (let ([strongest (car lst)]\n\
    \          [strongest-strength (strength (car lst))])\n      (for ([e (in-list\
    \ (cdr lst))])\n        (let ([s (strength e)])\n          (when (> s strongest-strength)\n\
    \            (set! strongest e)\n            (set! strongest-strength s))))\n\
    \      strongest))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength str)\n    (let loop ([str str] [cap 0] [sm 0])\n      (cond\
    \ [(empty? str) (/ cap (- sm))]\n            [(char-upper-case? (first str)) (loop\
    \ (rest str) (+ cap 1) sm)]\n            [(char-lower-case? (first str)) (loop\
    \ (rest str) cap (+ sm 1))]\n            [else (loop (rest str) cap sm)])))\n\
    \  (define (strongest-extension extensions)\n    (define (strongest-extension-helper\
    \ extensions strongest)\n      (cond [(empty? extensions) (first strongest)]\n\
    \            [(> (strength (first extensions)) (strength (first strongest)))\n\
    \             (strongest-extension-helper (rest extensions) (list (first extensions)))]\n\
    \            [(= (strength (first extensions)) (strength (first strongest)))\n\
    \             (strongest-extension-helper (rest extensions) (append strongest\
    \ (list (first extensions))))]\n            [else (strongest-extension-helper\
    \ (rest extensions) strongest)]))\n    (strongest-extension-helper extensions\
    \ (list (first extensions))))\n  (format \"~a.~a\" class_name (strongest-extension\
    \ extensions)))\n", "  (define (strength extension)\n    (let ((caps (count-if\
    \ char-upper-case? extension))\n          (smalls (count-if char-lower-case? extension)))\n\
    \      (- caps smalls)))\n  (define (strongest-extension extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength s)\n\
    \    (let loop ([s s] [cap 0] [sm 0])\n      (cond [(empty? s) (- cap sm)]\n \
    \           [(char-upper-case? (car s)) (loop (cdr s) (+ cap 1) sm)]\n       \
    \     [(char-lower-case? (car s)) (loop (cdr s) cap (+ sm 1))]\n            [else\
    \ (loop (cdr s) cap sm)])))\n  (define (strongest l)\n    (if (empty? l)\n   \
    \     \"\"\n        (let loop ([l l] [s (strength (car l))] [r (car l)])\n   \
    \       (cond [(empty? (cdr l)) r]\n                [(> (strength (cadr l)) s)\
    \ (loop (cdr l) (strength (cadr l)) (cadr l))]\n                [else (loop (cdr\
    \ l) s r)]))))\n  (string-append class_name \".\" (strongest extensions)))\n",
  "  (define (strength ext)\n    (- (count-if char-upper-case? ext)\n       (count-if\
    \ char-lower-case? ext)))\n  (define (strongest-extension extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\"\n       \
    \          (list-ref extensions (argmax strength extensions))))\n", "  (define\
    \ (strength ext)\n    (let ((caps (regexp-match #rx\"[A-Z]\" ext))\n         \
    \ (smalls (regexp-match #rx\"[a-z]\" ext)))\n      (- (length caps) (length smalls))))\n\
    \  (define (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (list-ref extensions (strongest-extension extensions))))\n",
  "  (define (strength ext)\n    (let ((caps (count-if char-upper-case? ext))\n  \
    \        (smalls (count-if char-lower-case? ext)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (- (count (lambda (c) (char-upper-case? c)) ext)\n\
    \       (count (lambda (c) (char-lower-case? c)) ext)))\n  (define (strongest-extension\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (strongest-extension-name\
    \ extensions))))\n", "  (define (strength str)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) str)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength str)\n    (let\
    \ ([upper (count (lambda (c) (char-upper-case? c)) str)]\n          [lower (count\
    \ (lambda (c) (char-lower-case? c)) str)])\n      (- upper lower)))\n  (define\
    \ (strongest-extension lst)\n    (let ([max-strength (apply max (map strength\
    \ lst))])\n      (car (filter (lambda (str) (= (strength str) max-strength)) lst))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (list-ref extensions (argmax (map strength\
    \ extensions)))))\n", "  (define (strength ext)\n    (let ([cap (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension extensions)\n\
    \    (apply max (map strength extensions)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions)\n    \
    \  (if (null? extensions)\n          \"\"\n          (if (= (strength (car extensions))\
    \ (strongest-extension extensions))\n              (car extensions)\n        \
    \      (strongest-extension-name-helper (cdr extensions)))))\n    (strongest-extension-name-helper\
    \ extensions))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength s)\n    (let ((caps (string-count s #\\A #\\Z))\n         \
    \ (smalls (string-count s #\\a #\\z)))\n      (- caps smalls)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ ext)\n    (let ([caps (count-if char-upper-case? ext)]\n          [smalls (count-if\
    \ char-lower-case? ext)])\n      (- caps smalls)))\n  (define (strongest-extension\
    \ extensions)\n    (define (strongest-extension-helper extensions strongest-so-far)\n\
    \      (cond [(empty? extensions) strongest-so-far]\n            [(> (strength\
    \ (first extensions)) (strength strongest-so-far))\n             (strongest-extension-helper\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-helper\
    \ (rest extensions) strongest-so-far)]))\n    (strongest-extension-helper extensions\
    \ (first extensions)))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (- (count-if char-upper-case?\
    \ ext)\n       (count-if char-lower-case? ext)))\n  (define (strongest-extension\
    \ extensions)\n    (let loop ((extensions extensions)\n               (strongest\
    \ (car extensions))\n               (strength (strength (car extensions))))\n\
    \      (cond ((null? extensions) strongest)\n            ((> (strength (car extensions))\
    \ strength)\n             (loop (cdr extensions) (car extensions) (strength (car\
    \ extensions))))\n            (else (loop (cdr extensions) strongest strength)))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength str)\n    (let loop ([str str] [cap 0] [sm 0])\n      (cond [(empty?\
    \ str) (/ cap (- sm))]\n            [(char-upper-case? (first str)) (loop (rest\
    \ str) (+ cap 1) sm)]\n            [(char-lower-case? (first str)) (loop (rest\
    \ str) cap (+ sm 1))]\n            [else (loop (rest str) cap sm)])))\n  (define\
    \ (strongest-extension lst)\n    (let loop ([lst lst] [max -1] [ext \"\"])\n \
    \     (cond [(empty? lst) ext]\n            [(> (strength (first lst)) max) (loop\
    \ (rest lst) (strength (first lst)) (first lst))]\n            [else (loop (rest\
    \ lst) max ext)])))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    </code>\n", "  (define (strength str)\n    (let loop ([str str] [cap 0] [sm 0])\n\
    \      (cond [(empty? str) (/ cap (- sm))]\n            [(char-upper-case? (first\
    \ str)) (loop (rest str) (+ cap 1) sm)]\n            [(char-lower-case? (first\
    \ str)) (loop (rest str) cap (+ sm 1))]\n            [else (loop (rest str) cap\
    \ sm)])))\n  (define (strongest-extension lst)\n    (let loop ([lst lst] [max-strength\
    \ -inf.0] [max-extension (first lst)])\n      (cond [(empty? lst) max-extension]\n\
    \            [(> (strength (first lst)) max-strength) (loop (rest lst) (strength\
    \ (first lst)) (first lst))]\n            [else (loop (rest lst) max-strength\
    \ max-extension)])))\n  (string-append class_name \".\" (strongest-extension extensions)))\n\
    </code>\n", "  (define (strength ext)\n    (- (count (lambda (c) (char-upper-case?\
    \ c)) ext)\n       (count (lambda (c) (char-lower-case? c)) ext)))\n  (define\
    \ (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (list-ref extensions (argmax (map strength\
    \ extensions)))))\n", "  (define (strength ext)\n    (let ([caps (count (compose\
    \ char-upcase char-downcase) ext)]\n          [smalls (count char-lower-case?\
    \ ext)])\n      (- caps smalls)))\n  (define (strongest-extension extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ str)\n    (define (is-upper? c) (char-upcase? c))\n    (define (is-lower? c)\
    \ (char-lower-case? c))\n    (define (count-upper str)\n      (if (empty? str)\n\
    \          0\n          (+ (if (is-upper? (first str)) 1 0)\n             (count-upper\
    \ (rest str)))))\n    (define (count-lower str)\n      (if (empty? str)\n    \
    \      0\n          (+ (if (is-lower? (first str)) 1 0)\n             (count-lower\
    \ (rest str)))))\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ exts)\n    (if (empty? exts)\n        \"\"\n        (define (strongest-extension-helper\
    \ exts)\n          (if (empty? (rest exts))\n              (first exts)\n    \
    \          (if (> (strength (first exts)) (strength (second exts)))\n        \
    \          (strongest-extension-helper (cons (first exts) (rest (rest exts))))\n\
    \                  (strongest-extension-helper (cons (second exts) (rest (rest\
    \ exts)))))))\n        (strongest-extension-helper exts)))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (define (count-upper ext)\n      (if (empty? ext)\n          0\n          (if\
    \ (char-upper-case? (car ext))\n              (+ 1 (count-upper (cdr ext)))\n\
    \              (count-upper (cdr ext)))))\n    (define (count-lower ext)\n   \
    \   (if (empty? ext)\n          0\n          (if (char-lower-case? (car ext))\n\
    \              (+ 1 (count-lower (cdr ext)))\n              (count-lower (cdr\
    \ ext)))))\n    (- (count-upper ext) (count-lower ext)))\n  (define (strongest-extension\
    \ extensions)\n    (if (empty? extensions)\n        \"\"\n        (if (empty?\
    \ (cdr extensions))\n            (car extensions)\n            (if (> (strength\
    \ (car extensions)) (strength (cadr extensions)))\n                (strongest-extension\
    \ (cons (car extensions) (cddr extensions)))\n                (strongest-extension\
    \ (cdr extensions))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let loop ([str str] [cap 0]\
    \ [sm 0])\n      (cond [(empty? str) (/ cap (- sm))]\n            [(char-upper-case?\
    \ (first str)) (loop (rest str) (+ cap 1) sm)]\n            [(char-lower-case?\
    \ (first str)) (loop (rest str) cap (+ sm 1))]\n            [else (loop (rest\
    \ str) cap sm)])))\n  (define (strongest-extension extensions)\n    (let loop\
    \ ([extensions extensions] [max-strength -inf.0] [max-extension \"\"])\n     \
    \ (cond [(empty? extensions) max-extension]\n            [(> (strength (first\
    \ extensions)) max-strength)\n             (loop (rest extensions) (strength (first\
    \ extensions)) (first extensions))]\n            [else (loop (rest extensions)\
    \ max-strength max-extension)])))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (define (count-upper str)\n\
    \      (if (empty? str)\n          0\n          (if (char-upper-case? (first str))\n\
    \              (+ 1 (count-upper (rest str)))\n              (count-upper (rest\
    \ str)))))\n    (define (count-lower str)\n      (if (empty? str)\n          0\n\
    \          (if (char-lower-case? (first str))\n              (+ 1 (count-lower\
    \ (rest str)))\n              (count-lower (rest str)))))\n    (- (count-upper\
    \ str) (count-lower str)))\n  (define (max-strength lst)\n    (if (empty? lst)\n\
    \        0\n        (max (strength (first lst)) (max-strength (rest lst)))))\n\
    \  (define (find-max-strength lst)\n    (if (empty? lst)\n        \"\"\n     \
    \   (if (= (max-strength lst) (strength (first lst)))\n            (first lst)\n\
    \            (find-max-strength (rest lst)))))\n  (string-append class_name \"\
    .\" (find-max-strength extensions)))\n", "  (define (strength ext)\n    (let ([cap\
    \ (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength extension)\n\
    \    (let ([caps (count (lambda (c) (char-upper-case? c)) extension)]\n      \
    \    [smalls (count (lambda (c) (char-lower-case? c)) extension)])\n      (- caps\
    \ smalls)))\n  (define (extension-name extension)\n    (string-append class_name\
    \ \".\" extension))\n  (define (strongest-extension extensions)\n    (if (null?\
    \ extensions)\n        \"\"\n        (let ([extension (car extensions)]\n    \
    \          [rest (cdr extensions)])\n          (if (null? rest)\n            \
    \  (extension-name extension)\n              (let ([strongest-rest (strongest-extension\
    \ rest)])\n                (if (< (strength extension) (strength strongest-rest))\n\
    \                    strongest-rest\n                    (extension-name extension)))))))\n\
    \  (strongest-extension extensions))\n", "  (define (strength extension)\n   \
    \ (let loop ([extension extension] [cap 0] [sm 0])\n      (cond [(empty? extension)\
    \ (/ cap (- sm))]\n            [(char-upper-case? (car extension)) (loop (cdr\
    \ extension) (+ cap 1) sm)]\n            [(char-lower-case? (car extension)) (loop\
    \ (cdr extension) cap (+ sm 1))]\n            [else (loop (cdr extension) cap\
    \ sm)])))\n  (define (strongest extensions)\n    (let loop ([extensions extensions]\
    \ [strongest (car extensions)] [strength (strength (car extensions))])\n     \
    \ (cond [(empty? (cdr extensions)) strongest]\n            [(> (strength (car\
    \ (cdr extensions))) strength) (loop (cdr extensions) (car (cdr extensions)) (strength\
    \ (car (cdr extensions))))]\n            [else (loop (cdr extensions) strongest\
    \ strength)])))\n  (string-append class_name \".\" (strongest extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength s)\n\
    \    (let ([cap (count (lambda (c) (char-upper-case? c)) s)]\n          [sm (count\
    \ (lambda (c) (char-lower-case? c)) s)])\n      (- cap sm)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ str)\n    (define (count-upper str)\n      (if (empty? str)\n          0\n \
    \         (if (char-upper-case? (first str))\n              (+ 1 (count-upper\
    \ (rest str)))\n              (count-upper (rest str)))))\n    (define (count-lower\
    \ str)\n      (if (empty? str)\n          0\n          (if (char-lower-case? (first\
    \ str))\n              (+ 1 (count-lower (rest str)))\n              (count-lower\
    \ (rest str)))))\n    (- (count-upper str) (count-lower str)))\n  (define (strongest-extension\
    \ extensions)\n    (cond [(empty? extensions) \"\"]\n          [(empty? (rest\
    \ extensions)) (first extensions)]\n          [else (if (> (strength (first extensions))\
    \ (strength (second extensions)))\n                    (strongest-extension (cons\
    \ (first extensions) (rest (rest extensions))))\n                    (strongest-extension\
    \ (cons (second extensions) (rest (rest extensions)))))]))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ([caps (count-if char-upper-case? ext)]\n          [smalls (count-if char-lower-case?\
    \ ext)])\n      (- caps smalls)))\n  (define (strongest-extension lst)\n    (if\
    \ (null? lst)\n        \"\"\n        (let ([ext (car lst)]\n              [rest\
    \ (cdr lst)])\n          (if (null? rest)\n              ext\n              (let\
    \ ([stronger (strongest-extension rest)])\n                (if (> (strength ext)\
    \ (strength stronger))\n                    ext\n                    stronger))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ((caps (string-count ext #\\A #\\Z))\n          (smalls\
    \ (string-count ext #\\a #\\z)))\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength str)\n\
    \    (let ([caps (count (lambda (x) (char-upper-case? x)) str)]\n          [smalls\
    \ (count (lambda (x) (char-lower-case? x)) str)])\n      (- caps smalls)))\n \
    \ (define (strongest-extension lst)\n    (let ([strongest (car lst)]\n       \
    \   [strength (strength (car lst))])\n      (for ([ext (cdr lst)])\n        (let\
    \ ([str (strength ext)])\n          (when (> str strength)\n            (set!\
    \ strongest ext)\n            (set! strength str))))\n      strongest))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n     \
    \     [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (strength ext)\n    (let loop ([i\
    \ 0] [cap 0] [sm 0])\n      (cond [(= i (string-length ext))\n             (/\
    \ cap (- sm))]\n            [(char-upper-case? (string-ref ext i))\n         \
    \    (loop (+ i 1) (+ cap 1) sm)]\n            [(char-lower-case? (string-ref\
    \ ext i))\n             (loop (+ i 1) cap (+ sm 1))]\n            [else\n    \
    \         (loop (+ i 1) cap sm)])))\n  (define (strongest-extension lst)\n   \
    \ (let loop ([lst lst] [max-strength -1] [max-ext \"\"])\n      (cond [(null?\
    \ lst)\n             max-ext]\n            [(> (strength (car lst)) max-strength)\n\
    \             (loop (cdr lst) (strength (car lst)) (car lst))]\n            [else\n\
    \             (loop (cdr lst) max-strength max-ext)])))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count\
    \ (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-name\
    \ extensions)\n    (list-ref extensions (position (strongest-extension extensions)\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (- (count-if char-upper-case? extension)\n\
    \       (count-if char-lower-case? extension)))\n  (define (strongest-extension\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\"\n                 (list-ref extensions\n                           (argmin\
    \ (map strength extensions)))))\n", "  (define (strength ext)\n    (let ([cap\
    \ (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength ext)\n    (define (count-upper str)\n      (if (empty? str)\n    \
    \      0\n          (if (char-upper-case? (first str))\n              (+ 1 (count-upper\
    \ (rest str)))\n              (count-upper (rest str)))))\n    (define (count-lower\
    \ str)\n      (if (empty? str)\n          0\n          (if (char-lower-case? (first\
    \ str))\n              (+ 1 (count-lower (rest str)))\n              (count-lower\
    \ (rest str)))))\n    (- (count-upper ext) (count-lower ext)))\n  (define (strongest-extension\
    \ lst)\n    (if (empty? lst)\n        \"\"\n        (if (empty? (rest lst))\n\
    \            (first lst)\n            (if (> (strength (first lst)) (strength\
    \ (strongest-extension (rest lst))))\n                (first lst)\n          \
    \      (strongest-extension (rest lst))))))\n  (string-append class_name \".\"\
    \ (strongest-extension extensions)))\n", "  (define (strength ext)\n    (let ([caps\
    \ (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength s)\n    (- (count-if char-upper-case? s)\n       (count-if char-lower-case?\
    \ s)))\n  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n\
    \  (string-append class_name \".\" (list-ref extensions (argmax (map strength\
    \ extensions)))))\n", "  (define (strength extension)\n    (let ((cap (count-if\
    \ char-upper-case? extension))\n          (sm (count-if char-lower-case? extension)))\n\
    \      (- cap sm)))\n  (define (strongest extensions)\n    (let loop ((extensions\
    \ extensions)\n               (strongest (car extensions))\n               (strength\
    \ (strength (car extensions))))\n      (cond ((null? extensions) strongest)\n\
    \            ((> (strength (car extensions)) strength)\n             (loop (cdr\
    \ extensions) (car extensions) (strength (car extensions))))\n            (else\
    \ (loop (cdr extensions) strongest strength)))))\n  (string-append class_name\
    \ \".\" (strongest extensions)))\n", "  (define (strength ext)\n    (let ([cap\
    \ (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension\
    \ lst)\n    (let ([max-strength (apply max (map strength lst))])\n      (car (filter\
    \ (lambda (x) (= (strength x) max-strength)) lst))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength str)\n   \
    \ (let ((caps (string-count str #\\A #\\Z))\n          (smalls (string-count str\
    \ #\\a #\\z)))\n      (- caps smalls)))\n  (define (strongest lst)\n    (define\
    \ (strongest-helper lst best)\n      (cond ((null? lst) best)\n            ((>\
    \ (strength (car lst)) (strength best))\n             (strongest-helper (cdr lst)\
    \ (car lst)))\n            (else (strongest-helper (cdr lst) best))))\n    (strongest-helper\
    \ lst (car lst)))\n  (string-append class_name \".\" (strongest extensions)))\n",
  "  (define (strength str)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [smalls (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension extensions)\n    (let\
    \ ([extensions (sort extensions (lambda (a b) (< (strength a) (strength b))))])\n\
    \      (car extensions)))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([strongest (apply\
    \ max (map strength extensions))])\n      (car (member strongest (map strength\
    \ extensions)))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (extension-strength extension)\n    (let ((caps\
    \ (string-count extension #\\A #\\Z))\n          (smalls (string-count extension\
    \ #\\a #\\z)))\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map extension-strength extensions)))\n  (define (strongest-extension-index\
    \ extensions)\n    (list-ref extensions (position (strongest-extension-name extensions)\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-index\
    \ extensions)))\n", "  (define (strength s)\n    (let ([caps (count (lambda (c)\
    \ (char-upcase? c)) s)]\n          [smalls (count (lambda (c) (char-lowercase?\
    \ c)) s)])\n      (- caps smalls)))\n  (define (strongest-extension extensions)\n\
    \    (define (strongest-extension-helper extensions strongest-so-far)\n      (cond\
    \ [(empty? extensions) strongest-so-far]\n            [(< (strength (first extensions))\
    \ (strength strongest-so-far))\n             (strongest-extension-helper (rest\
    \ extensions) strongest-so-far)]\n            [else (strongest-extension-helper\
    \ (rest extensions) (first extensions))]))\n    (strongest-extension-helper extensions\
    \ (first extensions)))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let ((caps (count-if char-upper-case?\
    \ str))\n          (smalls (count-if char-lower-case? str)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (define (strongest-extension-helper\
    \ extensions strongest-so-far)\n      (cond ((null? extensions) strongest-so-far)\n\
    \            ((> (strength (car extensions)) (strength strongest-so-far))\n  \
    \           (strongest-extension-helper (cdr extensions) (car extensions)))\n\
    \            (else (strongest-extension-helper (cdr extensions) strongest-so-far))))\n\
    \    (strongest-extension-helper extensions (car extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n      \
    \    [sm (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (strength ext)\n    (let ([caps\
    \ (count (\u03BB (c) (char-upper-case? c)) ext)]\n          [smalls (count (\u03BB\
    \ (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (\u03BB (i) (strength (list-ref extensions\
    \ i))) (range (length extensions))))))\n", "  (define (strength str)\n    (let\
    \ ((caps (count-if char-upper-case? str))\n          (smalls (count-if char-lower-case?\
    \ str)))\n      (- caps smalls)))\n  (define (strongest-extension lst)\n    (apply\
    \ max (map strength lst)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax (map strength extensions)))))\n", "  (define (strength extension)\n\
    \    (let ([cap (count (lambda (c) (char-upper-case? c)) extension)]\n       \
    \   [sm (count (lambda (c) (char-lower-case? c)) extension)])\n      (- cap sm)))\n\
    \  (define (strongest-extension extensions)\n    (if (null? extensions)\n    \
    \    \"\"\n        (let ([ext (car extensions)]\n              [rest (cdr extensions)])\n\
    \          (if (null? rest)\n              ext\n              (let ([strongest\
    \ (strongest-extension rest)])\n                (if (> (strength ext) (strength\
    \ strongest))\n                    ext\n                    strongest))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (strength str)\n    (let loop ([str\
    \ str] [cap 0] [sm 0])\n      (cond [(empty? str) (/ cap (- sm))]\n          \
    \  [(char-upper-case? (car str)) (loop (cdr str) (+ cap 1) sm)]\n            [(char-lower-case?\
    \ (car str)) (loop (cdr str) cap (+ sm 1))]\n            [else (loop (cdr str)\
    \ cap sm)])))\n  (define (strongest-extension extensions)\n    (let loop ([extensions\
    \ extensions] [strongest (car extensions)] [strength (strength (car extensions))])\n\
    \      (cond [(empty? extensions) strongest]\n            [(> (strength (car extensions))\
    \ strength) (loop (cdr extensions) (car extensions) (strength (car extensions)))]\n\
    \            [else (loop (cdr extensions) strongest strength)])))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let loop ([ext ext] [cap 0] [sm 0])\n      (cond [(empty? ext) (/\
    \ cap (- sm))]\n            [(char-upper-case? (car ext)) (loop (cdr ext) (+ cap\
    \ 1) sm)]\n            [(char-lower-case? (car ext)) (loop (cdr ext) cap (+ sm\
    \ 1))]\n            [else (loop (cdr ext) cap sm)])))\n  (define (strongest-extension\
    \ extensions)\n    (let loop ([extensions extensions] [max-strength -inf.0] [max-extension\
    \ \"\"])\n      (cond [(empty? extensions) max-extension]\n            [(> (strength\
    \ (car extensions)) max-strength)\n             (loop (cdr extensions) (strength\
    \ (car extensions)) (car extensions))]\n            [else (loop (cdr extensions)\
    \ max-strength max-extension)])))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name exts)\n\
    \    (let ([strongest-ext (car (sort exts (lambda (a b) (< (strength a) (strength\
    \ b)))))]\n          [strongest-strength (strength strongest-ext)])\n      (if\
    \ (andmap (lambda (ext) (= (strength ext) strongest-strength)) exts)\n       \
    \   strongest-ext\n          (strongest-extension-name (remove strongest-ext exts)))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength str)\n\
    \    (let ([cap (count (lambda (c) (char-upper-case? c)) str)]\n          [sm\
    \ (count (lambda (c) (char-lower-case? c)) str)])\n      (- cap sm)))\n  (define\
    \ (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (list-ref extensions (argmax (lambda (i) (strength\
    \ (list-ref extensions i))) (range (length extensions))))))\n", "  (define (strength\
    \ ext)\n    (- (count-if char-upper-case? ext)\n       (count-if char-lower-case?\
    \ ext)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ((cap (count-if char-upper-case?\
    \ str))\n          (sm (count-if char-lower-case? str)))\n      (- cap sm)))\n\
    \  (define (strongest-extension lst)\n    (let ((strongest (car lst))\n      \
    \    (strongest-strength (strength (car lst))))\n      (for/fold ([strongest strongest]\n\
    \                 [strongest-strength strongest-strength])\n                 ([ext\
    \ (in-list (cdr lst))])\n        (let ((str (strength ext)))\n          (if (>\
    \ str strongest-strength)\n              (values ext str)\n              (values\
    \ strongest strongest-strength))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) str)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength str)\n    (let\
    \ ([caps (count (lambda (c) (char-upper-case? c)) str)]\n          [smalls (count\
    \ (lambda (c) (char-lower-case? c)) str)])\n      (- caps smalls)))\n  (define\
    \ (strongest-extension-name extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (let ([extensions (sort extensions\
    \ (\u03BB (x y) (> (strength x) (strength y))))])\n      (car extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength str)\n    (let ((caps (regexp-match* #rx\"[A-Z]\" str))\n        \
    \  (smalls (regexp-match* #rx\"[a-z]\" str)))\n      (- (length caps) (length\
    \ smalls))))\n  (define (strongest-extension lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(empty? (cdr lst)) (car lst)]\n      [else\n       (let ((first\
    \ (car lst))\n             (second (cadr lst)))\n         (if (> (strength first)\
    \ (strength second))\n             first\n             (strongest-extension (cdr\
    \ lst))))]))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c))\
    \ ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n     \
    \ (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (let ([max-strength\
    \ (apply max (map strength extensions))])\n      (car (filter (lambda (ext) (=\
    \ (strength ext) max-strength)) extensions))))\n  (string-append class_name \"\
    .\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n  \
    \  (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count\
    \ (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength s)\n    (let loop ([s s] [cap 0] [sm 0])\n      (cond [(empty? s)\
    \ (- cap sm)]\n            [(char-upper-case? (car s)) (loop (cdr s) (+ cap 1)\
    \ sm)]\n            [(char-lower-case? (car s)) (loop (cdr s) cap (+ sm 1))]\n\
    \            [else (loop (cdr s) cap sm)])))\n  (define (max-strength lst)\n \
    \   (cond [(empty? lst) 0]\n          [(> (strength (car lst)) (max-strength (cdr\
    \ lst))) (strength (car lst))]\n          [else (max-strength (cdr lst))]))\n\
    \  (define (strongest-extension lst)\n    (cond [(empty? lst) \"\"]\n        \
    \  [(= (strength (car lst)) (max-strength lst)) (car lst)]\n          [else (strongest-extension\
    \ (cdr lst))]))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (count_caps str)\n    (for/fold ([caps 0]) ([c (in-string str)])\n  \
    \    (if (char-upper-case? c)\n          (+ caps 1)\n          caps)))\n  (define\
    \ (count_smalls str)\n    (for/fold ([smalls 0]) ([c (in-string str)])\n     \
    \ (if (char-lower-case? c)\n          (+ smalls 1)\n          smalls)))\n  (define\
    \ (strength str)\n    (- (count_caps str) (count_smalls str)))\n  (define (strongest_extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmin (map strength extensions)))))\n</code>\n", "  (define\
    \ (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (strongest-extension-name extensions))))\n", "  (define (strength ext)\n   \
    \ (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls\
    \ (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n \
    \ (define (strongest-extension lst)\n    (if (null? lst)\n        \"\"\n     \
    \   (let ([ext (car lst)]\n              [rest (cdr lst)])\n          (if (null?\
    \ rest)\n              ext\n              (let ([next (strongest-extension rest)])\n\
    \                (if (> (strength ext) (strength next))\n                    ext\n\
    \                    next))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let loop ([cap 0] [sm 0] [i\
    \ 0])\n      (cond [(= i (string-length ext)) (/ cap (- sm))]\n            [(char-upcase?\
    \ (string-ref ext i)) (loop (+ cap 1) sm (+ i 1))]\n            [else (loop cap\
    \ (+ sm 1) (+ i 1))])))\n  (define (strongest-extension exts)\n    (let loop ([exts\
    \ exts] [strongest (car exts)] [strength (strength (car exts))])\n      (cond\
    \ [(null? exts) strongest]\n            [(> (strength (car exts)) strength) (loop\
    \ (cdr exts) (car exts) (strength (car exts)))]\n            [else (loop (cdr\
    \ exts) strongest strength)])))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([cap (count-if char-upper-case?\
    \ ext)]\n          [sm (count-if char-lower-case? ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension lst)\n    (let ([max-strength (apply max (map\
    \ strength lst))])\n      (first (filter (lambda (x) (= (strength x) max-strength))\
    \ lst))))\n  (format \"~a.~a\" class_name (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count-if char-upper-case? ext)]\n  \
    \        [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (define (strongest-extension-helper\
    \ extensions strongest-so-far)\n      (cond [(empty? extensions) strongest-so-far]\n\
    \            [(> (strength (first extensions)) (strength strongest-so-far))\n\
    \             (strongest-extension-helper (rest extensions) (first extensions))]\n\
    \            [else (strongest-extension-helper (rest extensions) strongest-so-far)]))\n\
    \    (strongest-extension-helper extensions (first extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n</code>\n", "  (define\
    \ (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength str)\n    (let\
    \ loop ([str str] [cap 0] [sm 0])\n      (cond [(empty? str) (/ cap (- sm))]\n\
    \            [(char-upper-case? (car str)) (loop (cdr str) (+ cap 1) sm)]\n  \
    \          [(char-lower-case? (car str)) (loop (cdr str) cap (+ sm 1))]\n    \
    \        [else (loop (cdr str) cap sm)])))\n  (define (strongest-extension lst)\n\
    \    (let loop ([lst lst] [max -inf.0] [max-str \"\"])\n      (cond [(empty? lst)\
    \ max-str]\n            [(> (strength (car lst)) max) (loop (cdr lst) (strength\
    \ (car lst)) (car lst))]\n            [else (loop (cdr lst) max max-str)])))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ((caps (string-count ext #\\A #\\Z))\n          (smalls\
    \ (string-count ext #\\a #\\z)))\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond ((null? extensions) strongest-extension-name)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-name-helper\
    \ (cdr extensions) strongest-extension-name))))\n    (strongest-extension-name-helper\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([caps (count-if\
    \ char-upper-case? extension)]\n          [smalls (count-if char-lower-case? extension)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension extensions)\n    (apply\
    \ max (map strength extensions)))\n  (define (strongest-extension-name extensions)\n\
    \    (list-ref extensions (position (strongest-extension extensions) extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let loop ([ext ext] [cap 0] [sm 0])\n      (cond\
    \ [(empty? ext) (/ cap (- sm))]\n            [(char-upper-case? (car ext)) (loop\
    \ (cdr ext) (+ cap 1) sm)]\n            [(char-lower-case? (car ext)) (loop (cdr\
    \ ext) cap (+ sm 1))]\n            [else (loop (cdr ext) cap sm)])))\n  (define\
    \ (strongest-extension-name extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (list-ref extensions (position (strongest-extension-name\
    \ extensions) extensions))))\n", "  (define (strength extension)\n    (let ([caps\
    \ (count-if char-upper-case? extension)]\n          [smalls (count-if char-lower-case?\
    \ extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength str)\n    (let\
    \ ((caps (count-if char-upper-case? str))\n          (smalls (count-if char-lower-case?\
    \ str)))\n      (- caps smalls)))\n  (define (strongest-extension lst)\n    (let\
    \ ((strongest (car lst))\n          (strength (strength (car lst))))\n      (for\
    \ ([ext (in-list (cdr lst))])\n        (let ((str (strength ext)))\n         \
    \ (when (> str strength)\n            (set! strength str)\n            (set! strongest\
    \ ext))))\n      strongest))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n</code>\n", "  (define (strength ext)\n    (- (length (regexp-match*\
    \ #rx\"[A-Z]\" ext))\n       (length (regexp-match* #rx\"[a-z]\" ext))))\n  (define\
    \ (strongest-extension-name extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let loop ([ext ext] [cap 0] [sm 0])\n      (cond\
    \ [(empty? ext) (/ cap (- sm))]\n            [(char-upper-case? (car ext)) (loop\
    \ (cdr ext) (+ cap 1) sm)]\n            [(char-lower-case? (car ext)) (loop (cdr\
    \ ext) cap (+ sm 1))]\n            [else (loop (cdr ext) cap sm)])))\n  (define\
    \ (strongest-extension extensions)\n    (let loop ([extensions extensions] [max-strength\
    \ -inf.0] [max-extension \"\"])\n      (cond [(empty? extensions) max-extension]\n\
    \            [(> (strength (car extensions)) max-strength)\n             (loop\
    \ (cdr extensions) (strength (car extensions)) (car extensions))]\n          \
    \  [else (loop (cdr extensions) max-strength max-extension)])))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ str)\n    (define (count-upper str)\n      (cond\n        [(empty? str) 0]\n\
    \        [(char-upper-case? (first str)) (+ 1 (count-upper (rest str)))]\n   \
    \     [else (count-upper (rest str))]))\n    (define (count-lower str)\n     \
    \ (cond\n        [(empty? str) 0]\n        [(char-lower-case? (first str)) (+\
    \ 1 (count-lower (rest str)))]\n        [else (count-lower (rest str))]))\n  \
    \  (- (count-upper str) (count-lower str)))\n  (define (find-strongest lst)\n\
    \    (cond\n      [(empty? lst) \"\"]\n      [(empty? (rest lst)) (first lst)]\n\
    \      [(> (strength (first lst)) (strength (second lst))) (find-strongest (cons\
    \ (first lst) (rest (rest lst))))]\n      [else (find-strongest (cons (second\
    \ lst) (rest (rest lst))))]))\n  (string-append class_name \".\" (find-strongest\
    \ extensions)))\n", "  (define (strength ext)\n    (let loop ([ext ext] [cap 0]\
    \ [sm 0])\n      (cond [(empty? ext) (/ cap (- sm))]\n            [(char-upper-case?\
    \ (car ext)) (loop (cdr ext) (+ cap 1) sm)]\n            [(char-lower-case? (car\
    \ ext)) (loop (cdr ext) cap (+ sm 1))]\n            [else (loop (cdr ext) cap\
    \ sm)])))\n  (define (strongest-extension exts)\n    (let loop ([exts exts] [max-strength\
    \ -inf.0] [max-ext \"\"])\n      (cond [(empty? exts) max-ext]\n            [(>\
    \ (strength (car exts)) max-strength)\n             (loop (cdr exts) (strength\
    \ (car exts)) (car exts))]\n            [else (loop (cdr exts) max-strength max-ext)])))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ([cap (count-if char-upper-case? ext)]\n          [sm\
    \ (count-if char-lower-case? ext)])\n      (- cap sm)))\n  (define (strongest-extension\
    \ exts)\n    (apply max (map strength exts)))\n  (define (strongest-extension-name\
    \ exts)\n    (list-ref exts (argmax strength exts)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (count-upper s)\n\
    \    (for/sum ([c (in-string s)])\n      (if (char-upper-case? c) 1 0)))\n  (define\
    \ (count-lower s)\n    (for/sum ([c (in-string s)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength s)\n    (/ (- (count-upper s) (count-lower s))\
    \ (string-length s)))\n  (define (strongest-extension lst)\n    (apply max (map\
    \ strength lst)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ strength extensions))))\n", "  (define (strength ext)\n    (let ([caps (count\
    \ (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda (c)\
    \ (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([strongest-extension (car extensions)]\n          [strongest-strength\
    \ (strength (car extensions))])\n      (for ([ext (cdr extensions)])\n       \
    \ (let ([strength (strength ext)])\n          (when (> strength strongest-strength)\n\
    \            (set! strongest-extension ext)\n            (set! strongest-strength\
    \ strength))))\n      strongest-extension))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (let ([strongest-extension (first\
    \ extensions)]\n        [strongest-extension-strength (strength (first extensions))])\n\
    \    (for ([extension extensions])\n      (let ([extension-strength (strength\
    \ extension)])\n        (when (> extension-strength strongest-extension-strength)\n\
    \          (set! strongest-extension extension)\n          (set! strongest-extension-strength\
    \ extension-strength))))\n    (string-append class_name \".\" strongest-extension)))\n",
  "  (define (strength str)\n    (let ([caps (count-if char-upper-case? str)]\n  \
    \        [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax (map strength extensions)))))\n",
  "  (define (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max extensions))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let loop ([ext ext] [cap 0] [sm 0])\n      (cond\
    \ [(empty? ext) (/ cap (- sm))]\n            [(char-upper-case? (car ext)) (loop\
    \ (cdr ext) (+ cap 1) sm)]\n            [(char-lower-case? (car ext)) (loop (cdr\
    \ ext) cap (+ sm 1))]\n            [else (loop (cdr ext) cap sm)])))\n  (define\
    \ (strongest-extension exts)\n    (cond [(empty? exts) \"\"]\n          [(empty?\
    \ (cdr exts)) (car exts)]\n          [else (let ([s1 (strength (car exts))]\n\
    \                       [s2 (strength (cadr exts))])\n                  (if (>\
    \ s1 s2) (car exts) (cadr exts)))]))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let loop ([str str] [cap 0]\
    \ [sm 0])\n      (cond [(empty? str) (/ cap (- sm))]\n            [(char-upper-case?\
    \ (car str)) (loop (cdr str) (+ cap 1) sm)]\n            [(char-lower-case? (car\
    \ str)) (loop (cdr str) cap (+ sm 1))]\n            [else (loop (cdr str) cap\
    \ sm)])))\n  (define (strongest-extension extensions)\n    (let loop ([extensions\
    \ extensions] [max-strength -inf.0] [max-extension \"\"])\n      (cond [(empty?\
    \ extensions) max-extension]\n            [(> (strength (car extensions)) max-strength)\n\
    \             (loop (cdr extensions) (strength (car extensions)) (car extensions))]\n\
    \            [else (loop (cdr extensions) max-strength max-extension)])))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n      \
    \    [sm (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension extensions)\n    (let ([strongest (car extensions)]\n\
    \          [strength (strength (car extensions))])\n      (for ([ext (in-list\
    \ (cdr extensions))])\n        (let ([s (strength ext)])\n          (when (> s\
    \ strength)\n            (set! strength s)\n            (set! strongest ext))))\n\
    \      strongest))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (count_upper str)\n    (for/fold ([count 0]) ([c (in-string str)])\n\
    \      (if (char-upper-case? c)\n          (+ count 1)\n          count)))\n \
    \ (define (count_lower str)\n    (for/fold ([count 0]) ([c (in-string str)])\n\
    \      (if (char-lower-case? c)\n          (+ count 1)\n          count)))\n \
    \ (define (strength str)\n    (- (count_upper str) (count_lower str)))\n  (define\
    \ (strongest_extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (position (strongest_extension extensions)\
    \ extensions))))\n", "  (define (strength ext)\n    (- (count-if char-upper-case?\
    \ ext)\n       (count-if char-lower-case? ext)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength str)\n\
    \    (let ([caps (count (lambda (c) (char-upper-case? c)) str)]\n          [smalls\
    \ (count (lambda (c) (char-lower-case? c)) str)])\n      (- caps smalls)))\n \
    \ (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax (map strength extensions)))))\n",
  "  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c))\
    \ ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n     \
    \ (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max\
    \ (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ((caps (count-if char-upper-case?\
    \ ext))\n          (smalls (count-if char-lower-case? ext)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension? ext1 ext2)\n    (let ((strength1 (strength ext1))\n\
    \          (strength2 (strength ext2)))\n      (cond ((> strength1 strength2)\
    \ #t)\n            ((< strength1 strength2) #f)\n            (else (< (string-ci<?\
    \ ext1 ext2) 0)))))\n  (define (strongest-extension extensions)\n    (if (null?\
    \ (cdr extensions))\n        (car extensions)\n        (let ((strongest (car extensions)))\n\
    \          (for ((ext (cdr extensions)))\n            (when (strongest-extension?\
    \ ext strongest)\n              (set! strongest ext)))\n          strongest)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength extension)\n    (let ([caps (count (lambda (c) (char-upper-case? c))\
    \ extension)]\n          [smalls (count (lambda (c) (char-lower-case? c)) extension)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension extensions)\n    (let\
    \ ([extensions (sort extensions (lambda (a b) (< (strength a) (strength b))))])\n\
    \      (car extensions)))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let loop ([ext ext] [cap 0]\
    \ [sm 0])\n      (cond [(empty? ext) (- cap sm)]\n            [(char-upper-case?\
    \ (car ext)) (loop (cdr ext) (+ cap 1) sm)]\n            [(char-lower-case? (car\
    \ ext)) (loop (cdr ext) cap (+ sm 1))]\n            [else (loop (cdr ext) cap\
    \ sm)])))\n  (define (strongest-extension exts)\n    (if (empty? exts)\n     \
    \   \"\"\n        (let loop ([exts exts] [max-ext (car exts)] [max-strength (strength\
    \ (car exts))])\n          (cond [(empty? (cdr exts)) max-ext]\n             \
    \   [(> (strength (car (cdr exts))) max-strength) (loop (cdr exts) (car (cdr exts))\
    \ (strength (car (cdr exts))))]\n                [else (loop (cdr exts) max-ext\
    \ max-strength)]))))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c))\
    \ ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n     \
    \ (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max\
    \ (map strength extensions)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax strength extensions))))\n", "  (define (ext_strength ext)\n    (let\
    \ ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([extensions (sort extensions (lambda (a b) (< (ext_strength\
    \ a) (ext_strength b))))])\n      (car extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (- (count-upper ext) (count-lower ext)))\n  (define (count-upper str)\n \
    \   (count (lambda (c) (char-upper-case? c)) str))\n  (define (count-lower str)\n\
    \    (count (lambda (c) (char-lower-case? c)) str))\n  (define (count pred str)\n\
    \    (if (empty? str)\n        0\n        (+ (if (pred (first str)) 1 0)\n   \
    \        (count pred (rest str)))))\n  (define (strongest-extension extensions)\n\
    \    (if (empty? extensions)\n        \"\"\n        (let ([strongest (first extensions)])\n\
    \          (for ([ext (rest extensions)])\n            (when (> (strength ext)\
    \ (strength strongest))\n              (set! strongest ext)))\n          strongest)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let loop ([ext ext] [cap 0] [sm 0])\n      (cond [(empty?\
    \ ext) (/ cap (- sm))]\n            [(char-upper-case? (car ext)) (loop (cdr ext)\
    \ (+ cap 1) sm)]\n            [(char-lower-case? (car ext)) (loop (cdr ext) cap\
    \ (+ sm 1))]\n            [else (loop (cdr ext) cap sm)])))\n  (define (strongest-extension\
    \ extensions)\n    (let loop ([extensions extensions] [best-ext (car extensions)]\
    \ [best-strength (strength (car extensions))])\n      (cond [(empty? extensions)\
    \ best-ext]\n            [(> (strength (car extensions)) best-strength) (loop\
    \ (cdr extensions) (car extensions) (strength (car extensions)))]\n          \
    \  [else (loop (cdr extensions) best-ext best-strength)])))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ str)\n    (let loop ([i 0] [cap 0] [sm 0])\n      (cond [(= i (string-length\
    \ str))\n             (/ cap (- sm))]\n            [(char-upper-case? (string-ref\
    \ str i))\n             (loop (+ i 1) (+ cap 1) sm)]\n            [(char-lower-case?\
    \ (string-ref str i))\n             (loop (+ i 1) cap (+ sm 1))]\n           \
    \ [else\n             (loop (+ i 1) cap sm)])))\n  (define (strongest-extension\
    \ lst)\n    (let loop ([lst lst] [max-str \"\"] [max-str-strength 0])\n      (cond\
    \ [(null? lst)\n             max-str]\n            [(> (strength (car lst)) max-str-strength)\n\
    \             (loop (cdr lst) (car lst) (strength (car lst)))]\n            [else\n\
    \             (loop (cdr lst) max-str max-str-strength)])))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n     \
    \     [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n</code>\n", "  (define (strength str)\n    (let\
    \ ([upper (count-if char-upper-case? str)]\n          [lower (count-if char-lower-case?\
    \ str)])\n      (- upper lower)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength ext)\n    (let\
    \ ([caps (count-if char-upper-case? ext)]\n          [smalls (count-if char-lower-case?\
    \ ext)])\n      (- caps smalls)))\n  (define (strongest-extension extensions)\n\
    \    (define (strongest-extension-helper extensions strongest-so-far)\n      (cond\
    \ [(empty? extensions) strongest-so-far]\n            [(> (strength (first extensions))\
    \ (strength strongest-so-far))\n             (strongest-extension-helper (rest\
    \ extensions) (first extensions))]\n            [else (strongest-extension-helper\
    \ (rest extensions) strongest-so-far)]))\n    (strongest-extension-helper extensions\
    \ (first extensions)))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n</code>\n", "  (define (strength ext)\n    (let ((caps (regexp-match\
    \ #rx\"[A-Z]\" ext))\n          (smalls (regexp-match #rx\"[a-z]\" ext)))\n  \
    \    (- (length caps) (length smalls))))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max extensions))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (extension-strength extension)\n\
    \    (let ([caps (count (lambda (c) (char-upper-case? c)) extension)]\n      \
    \    [smalls (count (lambda (c) (char-lower-case? c)) extension)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension extensions)\n    (apply max (map extension-strength\
    \ extensions)))\n  (define (strongest-extension-name extensions)\n    (list-ref\
    \ extensions (argmax extension-strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength s)\n\
    \    (let ((cap (count (lambda (c) (char-upper-case? c)) s))\n          (sm (count\
    \ (lambda (c) (char-lower-case? c)) s)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ lst)\n    (define (strongest-extension-helper lst strongest)\n      (cond ((null?\
    \ lst) strongest)\n            ((> (strength (car lst)) (strength strongest))\n\
    \             (strongest-extension-helper (cdr lst) (car lst)))\n            (else\
    \ (strongest-extension-helper (cdr lst) strongest))))\n    (strongest-extension-helper\
    \ lst (car lst)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (- (count-if char-upper-case? ext) (count-if char-lower-case?\
    \ ext)))\n  (define (strongest-extension lst)\n    (define (strongest-extension-helper\
    \ lst strongest-strength strongest-ext)\n      (cond [(empty? lst) strongest-ext]\n\
    \            [(> (strength (first lst)) strongest-strength)\n             (strongest-extension-helper\
    \ (rest lst) (strength (first lst)) (first lst))]\n            [else (strongest-extension-helper\
    \ (rest lst) strongest-strength strongest-ext)]))\n    (strongest-extension-helper\
    \ lst (strength (first lst)) (first lst)))\n  (string-append class_name \".\"\
    \ (strongest-extension extensions)))\n", "  (define (strength str)\n    (let ((caps\
    \ (regexp-match #rx\"[A-Z]\" str))\n          (smalls (regexp-match #rx\"[a-z]\"\
    \ str)))\n      (- (length caps) (length smalls))))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength str)\n\
    \    (let ([caps (count (lambda (c) (char-upper-case? c)) str)]\n          [smalls\
    \ (count (lambda (c) (char-lower-case? c)) str)])\n      (- caps smalls)))\n \
    \ (define (strongest-extension extensions)\n    (let ([sorted-extensions (sort\
    \ extensions strength <)])\n      (car sorted-extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ extension)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) extension)]\n\
    \          [smalls (count (lambda (c) (char-lower-case? c)) extension)])\n   \
    \   (- caps smalls)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (- (count-if char-upper-case?\
    \ ext)\n       (count-if char-lower-case? ext)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ ext)\n    (let ((caps (count-if char-upper-case? ext))\n          (smalls (count-if\
    \ char-lower-case? ext)))\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond ((null? extensions) strongest-extension-name)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-name-helper\
    \ (cdr extensions) strongest-extension-name))))\n    (strongest-extension-name-helper\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax strength extensions))))\n", " \
    \ (define (strength str)\n    (let ((caps (count (lambda (c) (char-upper-case?\
    \ c)) str))\n          (smalls (count (lambda (c) (char-lower-case? c)) str)))\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count (lambda\
    \ (x) (char-upper-case? x)) str)]\n          [smalls (count (lambda (x) (char-lower-case?\
    \ x)) str)])\n      (- caps smalls)))\n  (define (strongest-extension lst)\n \
    \   (let ([strongest (car lst)]\n          [strength (strength (car lst))])\n\
    \      (for ([ext (in-list (cdr lst))])\n        (let ([str (strength ext)])\n\
    \          (when (> str strength)\n            (set! strongest ext)\n        \
    \    (set! strength str))))\n      strongest))\n  (string-append class_name \"\
    .\" (strongest-extension extensions)))\n", "  (define (strength ext)\n    (let\
    \ ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ((cap (string-count ext #\\A #\\Z))\n          (sm (string-count ext\
    \ #\\a #\\z)))\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-iter extensions strongest-so-far)\n   \
    \   (cond ((null? extensions) strongest-so-far)\n            ((> (strength (car\
    \ extensions)) (strength strongest-so-far))\n             (strongest-extension-name-iter\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-name-iter\
    \ (cdr extensions) strongest-so-far))))\n    (strongest-extension-name-iter extensions\
    \ (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (define (strongest-extension-name extensions)\n    (list-ref extensions (argmax\
    \ (map strength extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (string-append class_name \".\" (list-ref extensions (argmax (map strength\
    \ extensions)))))\n", "  (define (strength ext)\n    (- (count-if char-upper-case?\
    \ ext)\n       (count-if char-lower-case? ext)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (count-upper str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n \
    \ (define (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (- (count-upper str) (count-lower str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (define\
    \ (strongest-extension-name lst)\n    (list-ref lst (argmax strength lst)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength str)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [smalls (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension lst)\n    (apply max\
    \ (map strength lst)))\n  (define (strongest-extension-name lst)\n    (let ([strongest\
    \ (strongest-extension lst)])\n      (car (filter (lambda (x) (= (strength x)\
    \ strongest)) lst))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) str)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (- caps smalls)))\n  (define (ext-name ext)\n    (string-append\
    \ class_name \".\" ext))\n  (define (ext-strength ext)\n    (strength ext))\n\
    \  (define (ext-strength-name ext)\n    (list (ext-strength ext) (ext-name ext)))\n\
    \  (define (ext-strength-name-list)\n    (map ext-strength-name extensions))\n\
    \  (define (strongest-extension-name-list)\n    (sort ext-strength-name-list >))\n\
    \  (define (strongest-extension-name)\n    (first (strongest-extension-name-list)))\n\
    \  (second strongest-extension-name))\n", "  (define (strength ext)\n    (let\
    \ ([caps (count-if char-upper-case? ext)]\n          [smalls (count-if char-lower-case?\
    \ ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([strongest-extension (apply max extensions)])\n      (list-ref extensions\
    \ (position strongest-extension extensions))))\n  (string-append class_name \"\
    .\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n  \
    \  (let ((cap (count-if char-upcase? ext))\n          (sm (count-if char-lower-case?\
    \ ext)))\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (strongest-extension-name extensions))))\n", "  (define\
    \ (strength str)\n    (let ((caps (regexp-match #rx\"[A-Z]\" str))\n         \
    \ (smalls (regexp-match #rx\"[a-z]\" str)))\n      (- (length caps) (length smalls))))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax (map strength extensions)))))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension extensions)\n    (apply\
    \ max (map strength extensions)))\n  (define (strongest-extension-name extensions)\n\
    \    (list-ref extensions (position (strongest-extension extensions) extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength str)\n    (let loop ([str str] [cap 0] [sm 0])\n      (cond\
    \ [(empty? str) (/ cap (- sm))]\n            [(char-upper-case? (first str)) (loop\
    \ (rest str) (+ cap 1) sm)]\n            [(char-lower-case? (first str)) (loop\
    \ (rest str) cap (+ sm 1))]\n            [else (loop (rest str) cap sm)])))\n\
    \  (define (strongest-extension extensions)\n    (let loop ([extensions extensions]\
    \ [max-strength -inf.0] [max-extension \"\"])\n      (cond [(empty? extensions)\
    \ max-extension]\n            [(> (strength (first extensions)) max-strength)\n\
    \             (loop (rest extensions) (strength (first extensions)) (first extensions))]\n\
    \            [else (loop (rest extensions) max-strength max-extension)])))\n \
    \ (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength str)\n    (let ((caps (regexp-match #rx\"[A-Z]\" str))\n         \
    \ (smalls (regexp-match #rx\"[a-z]\" str)))\n      (- (length caps) (length smalls))))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax (map strength extensions)))))\n",
  "  (define (strength str)\n    (let ([caps (string-count str #\\A-Z)]\n        \
    \  [smalls (string-count str #\\a-z)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name\
    \ strongest-extension-strength)\n      (cond [(empty? extensions) strongest-extension-name]\n\
    \            [(> (strength (first extensions)) strongest-extension-strength)\n\
    \             (strongest-extension-name-helper (rest extensions) (first extensions)\
    \ (strength (first extensions)))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name strongest-extension-strength)]))\n\
    \    (strongest-extension-name-helper extensions \"\" -99999))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ str)\n    (let ([caps (count-if char-upper-case? str)]\n          [smalls (count-if\
    \ char-lower-case? str)])\n      (- caps smalls)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax strength extensions))))\n", "  (define (strength\
    \ s)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) s)]\n         \
    \ [smalls (count (lambda (c) (char-lower-case? c)) s)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax (map strength extensions)))))\n",
  "  (define (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n   \
    \       (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-name\
    \ extensions)\n    (list-ref extensions (position (strongest-extension extensions)\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength str)\n    (let ([caps (count-if char-upper-case? str)]\n  \
    \        [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([sorted-extensions\
    \ (sort extensions strength <)])\n      (car sorted-extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ ext)\n    (let ([cap (count-if char-upper-case? ext)]\n          [sm (count-if\
    \ char-lower-case? ext)])\n      (- cap sm)))\n  (define (strongest-extension\
    \ lst)\n    (let ([max-strength (apply max (map strength lst))])\n      (car (filter\
    \ (lambda (x) (= (strength x) max-strength)) lst))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
