name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n#| You are given a word. Your task is to find the closest\
  \ vowel that stands between \ntwo consonants from the right side of the word (case\
  \ sensitive).\nVowels in the beginning and ending doesn't count. Return empty string\
  \ if you didn't\nfind any vowel met the above condition. \nYou may assume that the\
  \ given string contains English letter only.\nExample:\n>>> (get_closest_vowel \"\
  yogurt\")\n\"u\"\n>>> (get_closest_vowel \"FULL\")\n\"U\"\n>>> (get_closest_vowel\
  \ \"quick\")\n\"\"\n>>> (get_closest_vowel \"ab\")\n\"\"|#\n(define (get_closest_vowel\
  \ word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\\
    A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (if (is-vowel? (string-ref word 0))\n\
    \        (string-ref word 0)\n        (if (is-consonant? (string-ref word 0))\n\
    \            (if (is-vowel? (string-ref word 1))\n                (string-ref\
    \ word 1)\n                (find-closest-vowel (substring word 1)))\n        \
    \    (find-closest-vowel (substring word 1)))))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first\
    \ word)) (first word)]\n          [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond [(empty? word) empty]\n          [(is-consonant?\
    \ (first word)) (first word)]\n          [else (find-consonant (rest word))]))\n\
    \  (define (find-vowel-between-consonants word)\n    (cond [(empty? word) empty]\n\
    \          [(and (is-consonant? (first word))\n                (is-vowel? (second\
    \ word))\n                (is-consonant? (third word)))\n           (second word)]\n\
    \          [else (find-vowel-between-consonants (rest word))]))\n  (cond [(empty?\
    \ word) empty]\n        [(is-vowel? (first word)) empty]\n        [(is-consonant?\
    \ (first word))\n         (cond [(empty? (rest word)) empty]\n               [(is-vowel?\
    \ (second word)) empty]\n               [(is-consonant? (second word))\n     \
    \           (cond [(empty? (rest (rest word))) empty]\n                      [(is-vowel?\
    \ (third word)) empty]\n                      [(is-consonant? (third word))\n\
    \                       (find-vowel-between-consonants (rest (rest word)))]\n\
    \                      [else empty])]\n               [else empty])]\n       \
    \ [else empty]))\n", "  (define (get-closest-vowel-helper word)\n    (define (is-vowel?\
    \ ch)\n      (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n\
    \    (define (is-consonant? ch)\n      (not (is-vowel? ch)))\n    (define (get-closest-vowel-helper-helper\
    \ word)\n      (if (null? word)\n          \"\"\n          (if (and (is-consonant?\
    \ (car word))\n                   (is-vowel? (car (cdr word))))\n            \
    \  (string (car (cdr word)))\n              (get-closest-vowel-helper-helper (cdr\
    \ word)))))\n    (if (or (null? word)\n            (is-vowel? (car word)))\n \
    \       \"\"\n        (get-closest-vowel-helper-helper (reverse word))))\n  (get-closest-vowel-helper\
    \ word))\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is_vowel? (first word)) (first word)]\n      [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_consonant? (first word)) (first word)]\n      [else\
    \ (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is_consonant? (first word))\n\
    \            (is_vowel? (second word))\n            (is_consonant? (third word)))\n\
    \       (second word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first word)) empty]\n  \
    \  [(is_consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is_vowel? (second word)) empty]\n       [(is_consonant? (second word))\n\
    \        (cond\n          [(empty? (rest (rest word))) empty]\n          [(is_vowel?\
    \ (third word)) (third word)]\n          [(is_consonant? (third word))\n     \
    \      (cond\n             [(empty? (rest (rest (rest word)))) empty]\n      \
    \       [(is_vowel? (fourth word)) (fourth word)]\n             [(is_consonant?\
    \ (fourth word))\n              (cond\n                [(empty? (rest (rest (rest\
    \ (rest word))))) empty]\n                [(is_vowel? (fifth word)) (fifth word)]\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel word)\n    (let loop ([word (string-&gt;list word)]\n   \
    \            [prev-consonant #f]\n               [prev-vowel #f])\n      (cond\
    \ [(null? word) #f]\n            [(is-vowel? (car word))\n             (loop (cdr\
    \ word) prev-consonant (car word))]\n            [(is-consonant? (car word))\n\
    \             (if prev-vowel\n                 prev-vowel\n                 (loop\
    \ (cdr word) (car word) prev-vowel))]\n            [else (loop (cdr word) prev-consonant\
    \ prev-vowel)])))\n  (let ([closest-vowel (get-closest-vowel word)])\n    (if\
    \ closest-vowel\n        (list-&gt;string (list closest-vowel))\n        \"\"\
    )))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"\
    o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (is-vowel? (string-ref\
    \ word 0))\n        \"\"\n        (if (is-vowel? (string-ref word 1))\n      \
    \      (string-ref word 1)\n            (if (is-vowel? (string-ref word 2))\n\
    \                (string-ref word 2)\n                (find-closest-vowel (substring\
    \ word 1))))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n  \
    \  (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n   \
    \     (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (and (not (is-vowel? c))\n         (not (char=? c #\\y))))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]\n          [else empty]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowel-pos -1]\n               [consonant-pos -1])\n\
    \      (cond [(empty? word)\n             (if (&gt; vowel-pos consonant-pos)\n\
    \                 (list-ref word vowel-pos)\n                 \"\")]\n       \
    \     [(is-vowel? (first word))\n             (loop (rest word)\n            \
    \       (add1 vowel-pos)\n                   consonant-pos)]\n            [(is-consonant?\
    \ (first word))\n             (loop (rest word)\n                   vowel-pos\n\
    \                   (add1 consonant-pos))])))\n  (find-closest-vowel word))\n\
    </code>\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is_vowel? (first word)) (first word)]\n      [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_consonant? (first word)) (first word)]\n      [else\
    \ (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is_consonant? (first word))\n\
    \            (is_vowel? (second word))\n            (is_consonant? (third word)))\
    \ (second word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first word)) empty]\n  \
    \  [(is_consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is_vowel? (second word)) empty]\n       [(is_consonant? (second word))\n\
    \        (cond\n          [(empty? (rest (rest word))) empty]\n          [(is_vowel?\
    \ (third word)) (third word)]\n          [(is_consonant? (third word))\n     \
    \      (cond\n             [(empty? (rest (rest (rest word)))) empty]\n      \
    \       [(is_vowel? (fourth word)) (fourth word)]\n             [(is_consonant?\
    \ (fourth word))\n              (cond\n                [(empty? (rest (rest (rest\
    \ (rest word))))) empty]\n                [(is_vowel? (fifth word)) (fifth word)]\n\
    \                [(", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowel #\\a]\n               [consonant #\\a])\n    \
    \  (cond [(null? word) #f]\n            [(and (is-vowel? (car word))\n       \
    \           (is-consonant? consonant))\n             (list-&gt;string vowel)]\n\
    \            [(and (is-consonant? (car word))\n                  (is-vowel? vowel))\n\
    \             (loop (cdr word)\n                   (car word)\n              \
    \     (car word))]\n            [else (loop (cdr word)\n                     \
    \   vowel\n                        consonant)])))\n  (find-closest-vowel word))\n\
    </code>\n", "  (define (get-closest-vowel word)\n    (define (get-closest-vowel\
    \ word)\n      (define (get-closest-vowel word)\n        (define (get-closest-vowel\
    \ word)\n          (define (get-closest-vowel word)\n            (define (get-closest-vowel\
    \ word)\n              (define (get-closest-vowel word)\n                (define\
    \ (get-closest-vowel word)\n                  (define (get-closest-vowel word)\n\
    \                    (define (get-closest-vowel word)\n                      (define\
    \ (get-closest-vowel word)\n                        (define (get-closest-vowel\
    \ word)\n                          (define (get-closest-vowel word)\n        \
    \                    (define (get-closest-vowel word)\n                      \
    \        (define (get-closest-vowel word)\n                                (define\
    \ (get-closest-vowel word)\n                                  (define (get-closest-vowel\
    \ word)\n                                    (define (get-closest-vowel word)\n\
    \                                      (define (get-closest-vowel word)\n    \
    \                                    (define (get-closest-vowel word)\n      \
    \                                    (define (get-closest-vowel word)\n      \
    \                                      (define (get-closest-vowel word)\n    \
    \                                          (define (get-closest-vowel word)\n\
    \                                                (define (get-closest-vowel word)\n\
    \                                                  (define (get-closest-vowel\
    \ word)\n                                                    (define (get-closest-vowel\
    \ word)\n                                                      (define (get-closest-vowel\
    \ word)\n                                                        (define (get-closest-vowel\
    \ word)\n                                                          (define (get-closest-vowel\
    \ word)\n                                                            (define (get-closest-vowel\
    \ word)\n                ", "  (define (get-closest-vowel-helper word index)\n\
    \    (if (= index (string-length word))\n        \"\"\n        (let ((char (string-ref\
    \ word index)))\n          (if (member char '(\"a\" \"e\" \"i\" \"o\" \"u\" \"\
    A\" \"E\" \"I\" \"O\" \"U\"))\n              (if (and (not (member (string-ref\
    \ word (- index 1)) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n                       (not (member (string-ref word (+ index 1)) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))))\n              \
    \    (string char)\n                  (get-closest-vowel-helper word (+ index\
    \ 1)))\n              (get-closest-vowel-helper word (+ index 1))))))\n  (get-closest-vowel-helper\
    \ word 0))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-vowel-index word)\n    (let loop ([i (sub1 (string-length\
    \ word))])\n      (if (and (is-consonant? (string-ref word i))\n             \
    \  (is-vowel? (string-ref word (sub1 i))))\n          i\n          (if (zero?\
    \ i)\n              -1\n              (loop (sub1 i))))))\n  (let ([i (get-vowel-index\
    \ word)])\n    (if (negative? i)\n        \"\"\n        (string (string-ref word\
    \ i)))))\n", "  (define (get-closest-vowel-helper word)\n    (if (empty? word)\n\
    \        \"\"\n        (if (and (char-consonant? (first word))\n             \
    \    (char-vowel? (second word)))\n            (string (second word))\n      \
    \      (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond [(empty? word) empty]\n\
    \          [(is-consonant? (first word)) (first word)]\n          [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond [(empty?\
    \ word) empty]\n          [(and (is-consonant? (first word))\n               \
    \ (is-vowel? (second word))\n                (is-consonant? (third word)))\n \
    \          (second word)]\n          [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (cond [(empty? (rest (rest\
    \ word))) empty]\n                      [(is-vowel? (third word)) empty]\n   \
    \                   [(is-consonant? (third word))\n                       (find-vowel-between-consonants\
    \ (rest (rest word)))]\n                      [else (find-vowel-between-consonants\
    \ (rest (rest word)))])]\n               [else (find-vowel-between-consonants\
    \ (rest word))])]\n        [else (find-vowel-between-consonants word)]))\n", " \
    \ (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-vowel-index word)\n    (define (get-vowel-index-iter word i)\n      (if\
    \ (or (null? word) (is-vowel? (car word)))\n          i\n          (get-vowel-index-iter\
    \ (cdr word) (+ i 1))))\n    (get-vowel-index-iter word 0))\n  (define (get-consonant-index\
    \ word)\n    (define (get-consonant-index-iter word i)\n      (if (or (null? word)\
    \ (is-consonant? (car word)))\n          i\n          (get-consonant-index-iter\
    \ (cdr word) (+ i 1))))\n    (get-consonant-index-iter word 0))\n  (define (get-closest-vowel-iter\
    \ word i)\n    (if (or (null? word) (is-vowel? (car word)))\n        (if (or (null?\
    \ word) (is-consonant? (car word)))\n            (if (and (not (null? word)) (is-vowel?\
    \ (car word)))\n                (list-ref word i)\n                \"\")\n   \
    \         (get-closest-vowel-iter (cdr word) (+ i 1)))\n        (get-closest-vowel-iter\
    \ (cdr word) (+ i 1))))\n  (get-closest-vowel-iter word (get-vowel-index word)))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel word)\n    (let loop ([word (string-&gt;list word)]\n   \
    \            [prev-consonant #f]\n               [closest-vowel #f])\n      (cond\n\
    \        [(null? word)\n         (if closest-vowel\n             (list-&gt;string\
    \ (reverse closest-vowel))\n             \"\")]\n        [(is-vowel? (car word))\n\
    \         (if prev-consonant\n             (list-&gt;string (reverse closest-vowel))\n\
    \             (loop (cdr word) prev-consonant closest-vowel))]\n        [(is-consonant?\
    \ (car word))\n         (loop (cdr word) (car word) (cons (car word) closest-vowel))])))\n\
    \  (get-closest-vowel word))\n</code>\n", "  (let ([vowels (list #\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\\
    R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop ([word word] [i 0])\n \
    \     (cond [(empty? word) \"\"]\n            [(member (first word) vowels) (first\
    \ word)]\n            [(member (first word) consonants) (loop (rest word) (+ i\
    \ 1))]\n            [else (loop (rest word) (+ i 1))]))))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (is-consonant?\
    \ (first word))\n                 (is-vowel? (second word)))\n            (second\
    \ word)\n            (find-closest-vowel (rest word)))))\n  (find-closest-vowel\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowel #\\])\n               [distance 0])\n      (cond\
    \ [(null? word) (list-&gt;string (list vowel))]\n            [(is_vowel? (car\
    \ word))\n             (loop (cdr word) (car word) (+ distance 1))]\n        \
    \    [(is_consonant? (car word))\n             (loop (cdr word) vowel (+ distance\
    \ 1))]\n            [else (list-&gt;string (list vowel))])))\n  (get-closest-vowel\
    \ word))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond [(empty? word)\
    \ empty]\n          [(is-vowel? (first word)) empty]\n          [(is-consonant?\
    \ (first word))\n           (cond [(is-vowel? (second word)) (first word)]\n \
    \                [else (find-closest-vowel (rest word))])]))\n  (find-closest-vowel\
    \ (reverse word)))\n", "  (let loop ([word word] [i (sub1 (string-length word))])\n\
    \    (cond\n      [(= i 0) \"\"]\n      [(vowel? (string-ref word i))\n      \
    \ (if (vowel? (string-ref word (sub1 i)))\n           (loop word (sub1 i))\n \
    \          (string (string-ref word i)))]\n      [else (loop word (sub1 i))])))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-vowel-index word)\n    (define (get-vowel-index-iter word index)\n\
    \      (if (null? word)\n          #f\n          (if (is-vowel? (car word))\n\
    \              index\n              (get-vowel-index-iter (cdr word) (+ index\
    \ 1)))))\n    (get-vowel-index-iter word 0))\n  (define (get-consonant-index word)\n\
    \    (define (get-consonant-index-iter word index)\n      (if (null? word)\n \
    \         #f\n          (if (is-consonant? (car word))\n              index\n\
    \              (get-consonant-index-iter (cdr word) (+ index 1)))))\n    (get-consonant-index-iter\
    \ word 0))\n  (define (get-closest-vowel-iter word index)\n    (if (null? word)\n\
    \        \"\"\n        (if (and (is-vowel? (car word))\n                 (not\
    \ (null? (cdr word)))\n                 (is-consonant? (cadr word)))\n       \
    \     (string-ref word index)\n            (get-closest-vowel-iter (cdr word)\
    \ (+ index 1)))))\n  (get-closest-vowel-iter word (get-vowel-index word)))\n",
  "  (let ([vowels (string-&gt;list \"aeiouAEIOU\")]\n        [word (string-&gt;list\
    \ word)])\n    (for/first ([i (in-range (sub1 (length word)) -1 -1)]\n       \
    \         [v (in-list vowels)])\n      (and (not (member v vowels))\n        \
    \   (member v vowels)\n           (list-ref word i)))))\n</code>\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word))\n            (is-vowel? (second word)))\n       (first word)]\n     \
    \ [else (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (is-consonant-vowel-consonant? c1 c2 c3)\n    (and (is-consonant? c1)\n\
    \         (is-vowel? c2)\n         (is-consonant? c3)))\n  (define (find-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [closest-vowel\
    \ #f])\n      (cond\n        [(null? word)\n         (if closest-vowel\n     \
    \        (list-&gt;string (reverse closest-vowel))\n             \"\")]\n    \
    \    [(is-consonant-vowel-consonant? (car word) (cadr word) (caddr word))\n  \
    \       (list-&gt;string (reverse (cons (cadr word) closest-vowel)))]\n      \
    \  [else\n         (loop (cdr word)\n               (cons (car word) closest-vowel))])))\n\
    \  (find-closest-vowel word))\n</code>\n", "  (let ([vowels (list #\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list word)])\n\
    \    (let loop ([word (reverse word)]\n               [prev-char #\\])\n     \
    \          [prev-vowel #\\])\n      (cond [(empty? word) (list->string (reverse\
    \ (list prev-vowel)))]\n            [(member (first word) vowels) (loop (rest\
    \ word) (first word) (first word))]\n            [(and (not (member (first word)\
    \ vowels))\n                  (not (member prev-char vowels))) (loop (rest word)\
    \ (first word) prev-vowel)]\n            [else (loop (rest word) (first word)\
    \ #\\])]))))\n", "  (define (get-closest-vowel word)\n    (define (get-closest-vowel\
    \ word)\n      (define (get-closest-vowel word)\n        (define (get-closest-vowel\
    \ word)\n          (define (get-closest-vowel word)\n            (define (get-closest-vowel\
    \ word)\n              (define (get-closest-vowel word)\n                (define\
    \ (get-closest-vowel word)\n                  (define (get-closest-vowel word)\n\
    \                    (define (get-closest-vowel word)\n                      (define\
    \ (get-closest-vowel word)\n                        (define (get-closest-vowel\
    \ word)\n                          (define (get-closest-vowel word)\n        \
    \                    (define (get-closest-vowel word)\n                      \
    \        (define (get-closest-vowel word)\n                                (define\
    \ (get-closest-vowel word)\n                                  (define (get-closest-vowel\
    \ word)\n                                    (define (get-closest-vowel word)\n\
    \                                      (define (get-closest-vowel word)\n    \
    \                                    (define (get-closest-vowel word)\n      \
    \                                    (define (get-closest-vowel word)\n      \
    \                                      (define (get-closest-vowel word)\n    \
    \                                          (define (get-closest-vowel word)\n\
    \                                                (define (get-closest-vowel word)\n\
    \                                                  (define (get-closest-vowel\
    \ word)\n                                                    (define (get-closest-vowel\
    \ word)\n                                                      (define (get-closest-vowel\
    \ word)\n                                                        (define (get-closest-vowel\
    \ word)\n                                                          (define (get-closest-vowel\
    \ word)\n                                                            (define (get-closest-vowel\
    \ word)\n                ", "  (define (is_vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n  \
    \  (not (is_vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_vowel? (first word)) (first word)]\n      [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_consonant? (first word)) (first word)]\n      [else\
    \ (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is_consonant? (first word))\n\
    \            (is_vowel? (second word))\n            (is_consonant? (third word)))\n\
    \       (second word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first word)) empty]\n  \
    \  [(is_consonant? (first word)) (find-vowel-between-consonants word)]\n    [else\
    \ (find-vowel word)]))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n  \
    \  (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\
    \ [(empty? word) empty]\n          [(and (is_vowel? (first word))\n          \
    \      (is_consonant? (second word)))\n           (first word)]\n          [else\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (get-closest-vowel word)\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [vowel #\\])\n              \
    \ [consonant #\\])\n      (cond [(empty? word) (list-&gt;string (reverse vowel))]\n\
    \            [(is_vowel? (first word))\n             (loop (rest word) (cons (first\
    \ word) vowel) consonant)]\n            [(char=? #\\ (first consonant))\n    \
    \         (loop (rest word) vowel (cons (first word) consonant))]\n          \
    \  [(is_vowel? (first consonant))\n             (loop (rest word) vowel (cons\
    \ (first word) consonant))]\n            [else (loop (rest word) vowel (cons (first\
    \ word) consonant))])))\n  (get-closest-vowel word))\n</code>\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ c1 c2 c3)\n    (and (is-consonant? c1) (is-vowel? c2) (is-consonant? c3)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(is-consonant-vowel-consonant? (first word) (second word) (third\
    \ word))\n       (second word)]\n      [else (get-closest-vowel-from-right (rest\
    \ word))]))\n  (get-closest-vowel-from-right (reverse word)))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (char-vowel? (first\
    \ word))\n                 (char-consonant? (second word)))\n            (first\
    \ word)\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n\
    \    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is_vowel? (first word)) (is_consonant?\
    \ (second word))) (first word)]\n      [else (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (define (is-vowel? c)\n      (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n    (define (is-consonant? c)\n    \
    \  (not (is-vowel? c)))\n    (define (is-consonant-vowel-consonant? word)\n  \
    \    (and (is-consonant? (string-ref word 0))\n           (is-vowel? (string-ref\
    \ word 1))\n           (is-consonant? (string-ref word 2))))\n    (cond [(empty?\
    \ word) \"\"]\n          [(is-consonant-vowel-consonant? word) (string-ref word\
    \ 1)]\n          [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (let loop ([word (string-&gt;list word)]\n         \
    \    [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n\
    \             [result '()])\n    (cond [(null? word) (list-&gt;string result)]\n\
    \          [(member (car word) vowels)\n           (loop (cdr word) vowels (cons\
    \ (car word) result))]\n          [else (loop (cdr word) vowels result)])))\n\
    </code>\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (if (or (empty? word) (empty?\
    \ (rest word)))\n        \"\"\n        (if (and (is_consonant? (first word)) (is_vowel?\
    \ (second word)))\n            (second word)\n            (get-closest-vowel (rest\
    \ word)))))\n  (get-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [vowel-pos -1])\n\
    \      (cond [(empty? word)\n             (if (= vowel-pos -1)\n             \
    \    \"\"\n                 (list-ref word vowel-pos))]\n            [(is-vowel?\
    \ (first word))\n             (loop (rest word)\n                   (if (= vowel-pos\
    \ -1)\n                       (add1 (length word))\n                       vowel-pos))]\n\
    \            [(is-consonant? (first word))\n             (loop (rest word)\n \
    \                  vowel-pos)])))\n  (get-closest-vowel word))\n</code>\n", " \
    \ (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (let loop ([word (string-&gt;list word)]\n\
    \               [prev-consonant #f]\n               [prev-vowel #f])\n      (cond\
    \ [(empty? word) prev-vowel]\n            [(is-vowel? (first word))\n        \
    \     (loop (rest word) prev-consonant (first word))]\n            [(is-consonant?\
    \ (first word))\n             (loop (rest word) (first word) prev-vowel)])))\n\
    \  (if (is-vowel? (string-ref word 0))\n      (find-closest-vowel (substring word\
    \ 1))\n      (find-closest-vowel word)))\n</code>\n", "  (define (is_vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond\n        [(null? word) (if\
    \ prev-vowel (list-&gt;string (reverse prev-vowel)) \"\")]\n        [(is_vowel?\
    \ (car word))\n         (loop (cdr word) prev-consonant (cons (car word) prev-vowel))]\n\
    \        [(is_consonant? (car word))\n         (if prev-vowel\n             (list-&gt;string\
    \ (reverse prev-vowel))\n             (loop (cdr word) (cons (car word) prev-consonant)\
    \ prev-vowel))])))\n  (get-closest-vowel word))\n</code>\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))))\n  (define (find-closest-vowel\
    \ word)\n    (if (is-consonant-vowel-consonant? word)\n        (string-ref word\
    \ 1)\n        (find-closest-vowel (substring word 1))))\n  (if (is-consonant-vowel-consonant?\
    \ word)\n      (string-ref word 1)\n      (find-closest-vowel (substring word\
    \ 1))))\n", "  (let loop ([word (string-&gt;list word)]\n             [vowels\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n          \
    \   [prev-char #\\space]\n             [next-char #\\space])\n    (cond [(empty?\
    \ word) \"\"]\n          [(member (car word) vowels)\n           (if (and (not\
    \ (char=? prev-char #\\space))\n                    (not (char=? next-char #\\\
    space)))\n               (list-&gt;string (cons (car word) '()))\n           \
    \    (loop (cdr word) vowels (car word) next-char))]\n          [else (loop (cdr\
    \ word) vowels prev-char (car word))])))\n</code>\n", "  (define (find-vowel word)\n\
    \    (cond [(empty? word) #f]\n          [(member (first word) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) (first word)]\n          [else (find-vowel (rest word))]))\n\
    \  (define (find-consonant word)\n    (cond [(empty? word) #f]\n          [(member\
    \ (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) #f]\n          [else (first word)]))\n\
    \  (define (find-vowel-between-consonants word)\n    (cond [(empty? word) #f]\n\
    \          [(and (find-vowel word) (find-consonant word)) (find-vowel word)]\n\
    \          [else (find-vowel-between-consonants (rest word))]))\n  (find-vowel-between-consonants\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n   \
    \ (if (null? word)\n        \"\"\n        (if (is-vowel? (string-ref word 0))\n\
    \            (string-ref word 0)\n            (get-closest-vowel-from-right (substring\
    \ word 1)))))\n  (if (or (is-vowel? (string-ref word 0))\n          (is-vowel?\
    \ (string-ref word (- (string-length word) 1))))\n      \"\"\n      (get-closest-vowel-from-right\
    \ (reverse word))))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant? w)\n\
    \    (and (is-consonant? (string-ref w 0))\n         (is-vowel? (string-ref w\
    \ 1))\n         (is-consonant? (string-ref w 2))))\n  (define (get-closest-vowel-from-right\
    \ w)\n    (cond\n      [(is-consonant-vowel-consonant? w) (string-ref w 1)]\n\
    \      [(string-length w) \"\" ]\n      [else (get-closest-vowel-from-right (substring\
    \ w 1))]))\n  (get-closest-vowel-from-right word))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(empty? word) prev-vowel]\n\
    \            [(is-vowel? (first word))\n             (loop (rest word) prev-consonant\
    \ (first word))]\n            [(is-consonant? (first word))\n             (loop\
    \ (rest word) (first word) prev-vowel)])))\n  (if (is-vowel? (string-ref word\
    \ 0))\n      (string-&gt;list (string-append (list (find-closest-vowel (substring\
    \ word 1))) \"\"))\n      (string-&gt;list (string-append (list (find-closest-vowel\
    \ word)) \"\"))))\n</code>\n", "  (define (is-vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel word)\n    (let loop ([word (string-&gt;list word)]\n\
    \               [prev-char #\\a]\n               [prev-prev-char #\\a])\n    \
    \  (cond [(null? word) \"\"]\n            [(and (is-consonant? prev-char)\n  \
    \                (is-vowel? (car word))\n                  (is-consonant? prev-prev-char))\n\
    \             (list-&gt;string (list (car word)))]\n            [else (loop (cdr\
    \ word) (car word) prev-char)])))\n  (get-closest-vowel word))\n</code>\n", " \
    \ (define (get-closest-vowel-helper word)\n    (if (empty? word)\n        \"\"\
    \n        (if (and (not (vowel? (first word)))\n                 (vowel? (second\
    \ word)))\n            (first word)\n            (get-closest-vowel-helper (rest\
    \ word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (define (find-closest-vowel-iter word prev-consonant prev-vowel)\n\
    \      (cond\n        [(empty? word) prev-vowel]\n        [(is-vowel? (first word))\n\
    \         (find-closest-vowel-iter (rest word) #f (first word))]\n        [(and\
    \ (is-consonant? (first word)) prev-consonant)\n         (find-closest-vowel-iter\
    \ (rest word) #t prev-vowel)]\n        [else (find-closest-vowel-iter (rest word)\
    \ #t prev-vowel)]))\n    (find-closest-vowel-iter word #f #f))\n  (find-closest-vowel\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) (first word)]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-closest-vowel word)\n    (if (empty? word)\
    \ empty\n        (if (is-vowel? (first word))\n            (first word)\n    \
    \        (find-closest-vowel (rest word)))))\n  (define (find-closest-consonant\
    \ word)\n    (if (empty? word) empty\n        (if (is-consonant? (first word))\n\
    \            (first word)\n            (find-closest-consonant (rest word)))))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (if (empty? word)\
    \ empty\n        (if (and (is-consonant? (first word))\n                 (is-vowel?\
    \ (second word))\n                 (is-consonant? (third word)))\n           \
    \ (second word)\n            (find-closest-vowel-between-consonants (rest word)))))\n\
    \  (define (find-closest-vowel-between-consonants-from-right word)\n    (find-closest-vowel-between-consonants\
    \ (reverse word)))\n  (find-closest-vowel-between-consonants-from-right word))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (let loop ([word (string-reverse word)]\n   \
    \            [prev-char #\\])\n               [next-char #\\])\n      (cond [(empty?\
    \ word) \"\"]\n            [(is-vowel? (first word))\n             (if (and (is-consonant?\
    \ prev-char)\n                      (is-consonant? next-char))\n             \
    \    (string (first word))\n                 (loop (rest word) (first word) prev-char))]\n\
    \            [else (loop (rest word) (first word) prev-char)])))\n  (find-closest-vowel\
    \ word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"\
    ]\n    [(empty? (rest (rest word))) \"\"]\n    [(consonant? (first word)) (get_closest_vowel\
    \ (rest word))]\n    [(consonant? (first (rest word))) (get_closest_vowel (rest\
    \ (rest word)))]\n    [(consonant? (first (rest (rest word)))) (string (first\
    \ (rest word)))]\n    [else (get_closest_vowel (rest (rest word)))]))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (is-vowel? (string-ref word 0))\n       \
    \ (if (is-vowel? (string-ref word 1))\n            (find-closest-vowel (substring\
    \ word 1))\n            (string-ref word 0))\n        (if (is-vowel? (string-ref\
    \ word 1))\n            (string-ref word 1)\n            (find-closest-vowel (substring\
    \ word 1)))))\n  (if (or (is-vowel? (string-ref word 0))\n          (is-vowel?\
    \ (string-ref word 1)))\n      (find-closest-vowel word)\n      \"\"))\n", " \
    \ (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond [(empty? word) empty]\n          [(is-vowel?\
    \ (first word)) empty]\n          [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))]\n          [else (first word)]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (let loop ([word (string-&gt;list word)]\n             [i (length\
    \ word)])\n    (cond [(empty? word) \"\"]\n          [(and (vowel? (car word))\n\
    \                (consonant? (list-ref word (- i 1)))\n                (consonant?\
    \ (list-ref word (- i 2))))\n           (list-&gt;string (list (car word)))]\n\
    \          [else (loop (cdr word) (- i 1))])))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(null? word) prev-vowel]\n\
    \            [(is-vowel? (car word))\n             (loop (cdr word) prev-consonant\
    \ (car word))]\n            [(is-consonant? (car word))\n             (if prev-vowel\n\
    \                 prev-vowel\n                 (loop (cdr word) (car word) prev-vowel))])))\n\
    \  (if (is-vowel? (string-ref word 0))\n      \"\"\n      (string (get-closest-vowel\
    \ word))))\n</code>\n", "  (define (get-vowel-index word)\n    (define (get-vowel-index-helper\
    \ word index)\n      (cond [(empty? word) index]\n            [(member (first\
    \ word) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n    \
    \         (get-vowel-index-helper (rest word) (+ index 1))]\n            [else\
    \ (get-vowel-index-helper (rest word) index)]))\n    (get-vowel-index-helper word\
    \ 0))\n  (define (get-vowel-from-index word index)\n    (cond [(= index 0) \"\"\
    ]\n          [(= index 1) (list-ref word 0)]\n          [else (get-vowel-from-index\
    \ (rest word) (- index 1))]))\n  (get-vowel-from-index word (get-vowel-index word)))\n",
  "  (let loop ([word (string-&gt;list word)]\n             [vowels '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [result '()])\n\
    \    (cond\n      [(empty? word) (list-&gt;string result)]\n      [(member (car\
    \ word) vowels) (loop (cdr word) vowels (cons (car word) result))]\n      [else\
    \ (loop (cdr word) vowels result)])))\n</code>\n", "  (define (is-vowel? ch)\n\
    \    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? ch)\n    (not (is-vowel? ch)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (string-empty? word)\n        \"\"\n        (let ((last-char\
    \ (string-ref word (sub1 (string-length word)))))\n          (if (is-vowel? last-char)\n\
    \              (get-closest-vowel-helper (substring word 0 (sub1 (string-length\
    \ word))))\n              (if (is-consonant? last-char)\n                  (let\
    \ ((next-char (string-ref word (sub1 (string-length word)))))\n              \
    \      (if (is-consonant? next-char)\n                        (get-closest-vowel-helper\
    \ (substring word 0 (sub1 (string-length word))))\n                        (string\
    \ last-char)))\n                  \"\")))))\n  (get-closest-vowel-helper word))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-vowel-between-consonants word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(and (is-consonant? (first word))\n            (is-vowel? (second\
    \ word))\n            (is-consonant? (third word)))\n       (second word)]\n \
    \     [else (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty?\
    \ word) empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant? (first\
    \ word))\n     (cond\n       [(empty? (rest word)) empty]\n       [(is-vowel?\
    \ (second word)) empty]\n       [(is-consonant? (second word))\n        (cond\n\
    \          [(empty? (rest (rest word))) empty]\n          [(is-vowel? (third word))\
    \ (third word)]\n          [(is-consonant? (third word))\n           (cond\n \
    \            [(empty? (rest (rest (rest word)))) empty]\n             [(is-vowel?\
    \ (fourth word)) (fourth word)]\n             [(is-consonant? (fourth word))\n\
    \              (cond\n                [(empty? (rest (rest (rest (rest word)))))\
    \ empty]\n                [(is-vowel? (fifth word)) (fifth word)]\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (if (or (null? word) (null? (cdr word)))\n\
    \        \"\"\n        (if (and (is-consonant? (car word)) (is-vowel? (cadr word)))\n\
    \            (cadr word)\n            (get-closest-vowel-helper (cdr word)))))\n\
    \  (get-closest-vowel-helper (reverse (string->list word))))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (cdr word)))\n        \"\"\n      \
    \  (if (and (vowel? (car word)) (consonant? (cadr word)))\n            (string\
    \ (car word))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word (reverse word)] [prev-consonant #f] [prev-vowel #f])\n \
    \     (cond [(empty? word) #f]\n            [(is-vowel? (first word))\n      \
    \       (if prev-consonant\n                 (first word)\n                 (loop\
    \ (rest word) prev-consonant #t))]\n            [(is-consonant? (first word))\n\
    \             (if prev-vowel\n                 prev-vowel\n                 (loop\
    \ (rest word) #t prev-vowel))])))\n  (find-closest-vowel word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel lst)\n    (cond [(null? lst) \"\"]\n          [(is-vowel?\
    \ (car lst)) (car lst)]\n          [else (get-closest-vowel (cdr lst))]))\n  (define\
    \ (get-closest-consonant lst)\n    (cond [(null? lst) \"\"]\n          [(is-consonant?\
    \ (car lst)) (car lst)]\n          [else (get-closest-consonant (cdr lst))]))\n\
    \  (define (get-closest-vowel-from-right lst)\n    (cond [(null? lst) \"\"]\n\
    \          [(is-consonant? (car lst)) (get-closest-vowel (cdr lst))]\n       \
    \   [else (get-closest-vowel-from-right (cdr lst))]))\n  (get-closest-vowel-from-right\
    \ (reverse (string->list word))))\n", "  (define (is_vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel word)\n    (define\
    \ (get-closest-vowel-iter word prev-consonant prev-vowel)\n      (cond [(empty?\
    \ word) prev-vowel]\n            [(is_vowel? (first word)) (get-closest-vowel-iter\
    \ (rest word) #f (first word))]\n            [(is_consonant? (first word)) (get-closest-vowel-iter\
    \ (rest word) (first word) prev-vowel)]))\n    (get-closest-vowel-iter word #f\
    \ #f))\n  (get-closest-vowel word))\n", "  (define (is_vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is_vowel? (first word))\
    \ (is_consonant? (second word))) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (find-closest-vowel (reverse word)))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants\
    \ (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r\
    \ #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\\
    L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop\
    \ ([i (sub1 (string-length word))]\n               [prev-char #\\0]\n        \
    \       [next-char #\\0])\n      (if (or (negative? i) (string=? word \"\"))\n\
    \          \"\"\n          (let ([char (string-ref word i)])\n            (if\
    \ (and (member char vowels) (member prev-char consonants) (member next-char consonants))\n\
    \                (string char)\n                (loop (sub1 i) char (string-ref\
    \ word (add1 i)))))))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(null?\
    \ word) #f]\n      [(is-vowel? (car word)) (car word)]\n      [else (find-vowel\
    \ (cdr word))]))\n  (define (find-consonant word)\n    (cond\n      [(null? word)\
    \ #f]\n      [(is-consonant? (car word)) (car word)]\n      [else (find-consonant\
    \ (cdr word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(null? word) #f]\n      [(and (is-consonant? (car word))\n           \
    \ (is-vowel? (cadr word))\n            (is-consonant? (caddr word)))\n       (cadr\
    \ word)]\n      [else (find-vowel-between-consonants (cdr word))]))\n  (cond\n\
    \    [(or (null? word) (is-vowel? (car word))) #f]\n    [(find-vowel-between-consonants\
    \ word)\n     (find-vowel-between-consonants word)]\n    [(find-vowel word)\n\
    \     (find-vowel word)]\n    [else #f]))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n\
    \  (define (find-closest-consonant word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-consonant? (first word)) (first word)]\n      [(is-vowel? (first word))\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-from-right\
    \ word)\n    (find-closest-vowel (reverse word)))\n  (define (find-closest-consonant-from-right\
    \ word)\n    (find-closest-consonant (reverse word)))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(or (empty? word) (empty? (rest word))) empty]\n  \
    \    [(and (is-consonant? (first word)) (is-consonant? (second word)))\n     \
    \  (find-closest-vowel-from-right (rest word))]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (find-closest-vowel-between-consonants word))\n", "  (let\
    \ loop ([i (sub1 (string-length word))]\n             [vowel-pos #f])\n    (cond\
    \ [(= i -1) (if vowel-pos\n                       (string-ref word vowel-pos)\n\
    \                       \"\")]\n          [(char-vowel? (string-ref word i))\n\
    \           (loop (sub1 i) i)]\n          [else (loop (sub1 i) vowel-pos)])))\n",
  "  (define (get-closest-vowel-helper word)\n    (if (empty? word)\n        \"\"\n\
    \        (if (or (char=? (first word) #\\a)\n                (char=? (first word)\
    \ #\\e)\n                (char=? (first word) #\\i)\n                (char=? (first\
    \ word) #\\o)\n                (char=? (first word) #\\u))\n            (first\
    \ word)\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n    (define\
    \ (get-closest-vowel-from-right-iter word prev-vowel prev-consonant)\n      (cond\n\
    \        [(empty? word) prev-vowel]\n        [(is-vowel? (first word)) (get-closest-vowel-from-right-iter\
    \ (rest word) (first word) prev-consonant)]\n        [(is-consonant? (first word))\
    \ (get-closest-vowel-from-right-iter (rest word) prev-vowel (first word))]))\n\
    \    (get-closest-vowel-from-right-iter word \"\" \"\"))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (is-consonant-vowel-consonant? w)\n    (and (is-consonant?\
    \ (string-ref w 0))\n         (is-vowel? (string-ref w 1))\n         (is-consonant?\
    \ (string-ref w 2))))\n  (define (get-closest-vowel-from-right w)\n    (cond ((is-consonant-vowel-consonant?\
    \ w)\n           (string-ref w 1))\n          ((&gt; (string-length w) 3)\n  \
    \         (get-closest-vowel-from-right (substring w 1)))\n          (else \"\"\
    )))\n  (get-closest-vowel-from-right word))\n</code>\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (is-vowel? (car word))\n\
    \            (if (is-consonant? (cadr word))\n                (car word)\n   \
    \             (find-closest-vowel (cdr word)))\n            (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is-consonant? (first word))\n                 (is-vowel? (second\
    \ word)))\n            (second word)\n            (get-closest-vowel-helper (rest\
    \ word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (get-closest-vowel-iter\
    \ word pos)\n    (if (or (equal? pos 0) (equal? pos (string-length word)))\n \
    \       \"\"\n        (if (or (equal? (string-ref word pos) #\\a)\n          \
    \      (equal? (string-ref word pos) #\\e)\n                (equal? (string-ref\
    \ word pos) #\\i)\n                (equal? (string-ref word pos) #\\o)\n     \
    \           (equal? (string-ref word pos) #\\u))\n            (if (or (equal?\
    \ (string-ref word (- pos 1)) #\\a)\n                    (equal? (string-ref word\
    \ (- pos 1)) #\\e)\n                    (equal? (string-ref word (- pos 1)) #\\\
    i)\n                    (equal? (string-ref word (- pos 1)) #\\o)\n          \
    \          (equal? (string-ref word (- pos 1)) #\\u))\n                (get-closest-vowel-iter\
    \ word (- pos 1))\n                (string (string-ref word pos)))\n         \
    \   (get-closest-vowel-iter word (- pos 1)))))\n  (get-closest-vowel-iter word\
    \ (- (string-length word) 1)))\n", "  (define (is-vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [prev-consonant #f]\n       \
    \        [closest-vowel #f])\n      (cond\n        [(null? word) (if closest-vowel\n\
    \                          (list-&gt;string (reverse closest-vowel))\n       \
    \                   \"\")]\n        [(is-vowel? (car word))\n         (if prev-consonant\n\
    \             (loop (cdr word) #f (cons (car word) closest-vowel))\n         \
    \    (loop (cdr word) #f closest-vowel))]\n        [(is-consonant? (car word))\n\
    \         (loop (cdr word) (car word) closest-vowel)])))\n  (find-closest-vowel\
    \ word))\n</code>\n", "  (define (is-vowel? ch)\n    (member ch '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ ch)\n    (not (is-vowel? ch)))\n  (define (get-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [else (get-closest-vowel (rest word))]))\n  (define (get-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (get-closest-consonant (rest word))]))\n \
    \ (define (get-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(and (is-vowel? (first word))\n            (is-consonant?\
    \ (second word))\n            (is-consonant? (third word)))\n       (first word)]\n\
    \      [else (get-closest-vowel-between-consonants (rest word))]))\n  (cond\n\
    \    [(empty? word) empty]\n    [(and (is-vowel? (first word))\n          (is-consonant?\
    \ (second word)))\n     (first word)]\n    [(and (is-consonant? (first word))\n\
    \          (is-vowel? (second word)))\n     (second word)]\n    [(and (is-consonant?\
    \ (first word))\n          (is-consonant? (second word)))\n     (get-closest-vowel-between-consonants\
    \ (rest word))]\n    [else (get-closest-vowel word)]))\n", "  (define (get-closest-vowel-iter\
    \ word i)\n    (if (or (= i -1) (= i (string-length word)))\n        \"\"\n  \
    \      (let ((c (string-ref word i)))\n          (if (or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if\
    \ (and (not (char=? (string-ref word (- i 1)) #\\a))\n                       (not\
    \ (char=? (string-ref word (- i 1)) #\\e))\n                       (not (char=?\
    \ (string-ref word (- i 1)) #\\i))\n                       (not (char=? (string-ref\
    \ word (- i 1)) #\\o))\n                       (not (char=? (string-ref word (-\
    \ i 1)) #\\u)))\n                  (string c)\n                  (get-closest-vowel-iter\
    \ word (- i 1)))\n              (get-closest-vowel-iter word (- i 1))))))\n  (get-closest-vowel-iter\
    \ word (- (string-length word) 1)))\n", "  (define (is_vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel word)\n \
    \   (cond\n      [(empty? word) \"\"]\n      [(is_vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) \"\"]\n      [(is_consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(and (is_consonant? (first\
    \ word))\n            (is_vowel? (second word))\n            (is_consonant? (third\
    \ word)))\n       (second word)]\n      [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (find-vowel-between-consonants word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-consonant (rest word))]))\n  (define\
    \ (find-vowel-between-consonants word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(and (is-consonant? (first word))\n            (is-vowel? (second word))\n\
    \            (is-consonant? (third word)))\n       (second word)]\n      [else\
    \ (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty? word)\
    \ empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant? (first word))\n\
    \     (cond\n       [(empty? (rest word)) empty]\n       [(is-vowel? (second word))\
    \ empty]\n       [(is-consonant? (second word))\n        (cond\n          [(empty?\
    \ (rest (rest word))) empty]\n          [(is-vowel? (third word)) (third word)]\n\
    \          [(is-consonant? (third word))\n           (cond\n             [(empty?\
    \ (rest (rest (rest word)))) empty]\n             [(is-vowel? (fourth word)) (fourth\
    \ word)]\n             [(is-consonant? (fourth word))\n              (cond\n \
    \               [(empty? (rest (rest (rest (rest word))))) empty]\n          \
    \      [(is-vowel? (fifth word)) (fifth word)]\n", "  (define (is-vowel? c)\n\
    \    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest\
    \ word))]))\n  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop\
    \ ([word (string-reverse word)]\n               [prev #\\ ]\n               [curr\
    \ #\\ ]\n               [next #\\ ])\n      (cond [(empty? word) \"\"]\n     \
    \       [(is-vowel? (first word))\n             (if (and (is-consonant? prev)\n\
    \                      (is-consonant? curr))\n                 (string (first\
    \ word))\n                 (loop (rest word) curr (first word) #\\ ))]\n     \
    \       [else (loop (rest word) curr (first word) #\\ )])))\n  (get-closest-vowel\
    \ word))\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-vowel word)\n    (let loop ([word word] [i\
    \ (sub1 (string-length word))])\n      (cond [(is_vowel? (string-ref word i))\
    \ (string-ref word i)]\n            [(zero? i) \"\"]\n            [else (loop\
    \ (substring word 0 i) (sub1 i))])))\n  (define (find-consonant word)\n    (let\
    \ loop ([word word] [i (sub1 (string-length word))])\n      (cond [(is_consonant?\
    \ (string-ref word i)) (string-ref word i)]\n            [(zero? i) \"\"]\n  \
    \          [else (loop (substring word 0 i) (sub1 i))])))\n  (define (find-closest-vowel\
    \ word)\n    (let loop ([word word] [i (sub1 (string-length word))])\n      (cond\
    \ [(and (is_vowel? (string-ref word i))\n                  (is_consonant? (string-ref\
    \ word (sub1 i))))\n             (string-ref word i)]\n            [(zero? i)\
    \ \"\"]\n            [else (loop (substring word 0 i) (sub1 i))])))\n  (find-closest-vowel\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [prev-consonant #f]\n               [prev-vowel #f])\n\
    \      (cond [(empty? word) prev-vowel]\n            [(is-vowel? (first word))\n\
    \             (loop (rest word) prev-consonant (first word))]\n            [(is-consonant?\
    \ (first word))\n             (loop (rest word) (first word) prev-vowel)])))\n\
    \  (find-closest-vowel word))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n \
    \   (if (empty? word)\n        \"\"\n        (if (is-vowel? (first word))\n  \
    \          (first word)\n            (find-vowel (rest word)))))\n  (define (find-consonant\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (is-consonant? (first\
    \ word))\n            (first word)\n            (find-consonant (rest word)))))\n\
    \  (define (find-vowel-between-consonants word)\n    (if (empty? word)\n     \
    \   \"\"\n        (if (and (is-consonant? (first word))\n                 (is-vowel?\
    \ (second word))\n                 (is-consonant? (third word)))\n           \
    \ (second word)\n            (find-vowel-between-consonants (rest word)))))\n\
    \  (find-vowel-between-consonants word))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper (rest\
    \ word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (get-closest-vowel\
    \ word i)\n    (cond\n      [(= i (string-length word)) \"\"]\n      [(and (not\
    \ (vowel? (string-ref word i)))\n            (vowel? (string-ref word (+ i 1))))\n\
    \       (string-ref word (+ i 1))]\n      [else (get-closest-vowel word (+ i 1))]))\n\
    \  (get-closest-vowel word (- (string-length word) 1)))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (cond [(empty? word) empty]\n          [(vowel? (first word)) (first\
    \ word)]\n          [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop ([word\
    \ (string-&gt;list word)]\n               [prev-consonant #f]\n              \
    \ [prev-vowel #f])\n      (cond [(null? word) prev-vowel]\n            [(is-vowel?\
    \ (car word)) (loop (cdr word) prev-consonant (car word))]\n            [(is-consonant?\
    \ (car word)) (loop (cdr word) (car word) prev-vowel)]\n            [else (error\
    \ 'get-closest-vowel \"invalid input\")])))\n  (let ([closest-vowel (get-closest-vowel\
    \ word)])\n    (if closest-vowel\n        (list-&gt;string (list closest-vowel))\n\
    \        \"\")))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (first word))\n       \
    \          (is-vowel? (second word)))\n            (first word)\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond\n        [(empty? word) (if\
    \ prev-vowel (list-&gt;string (reverse prev-vowel)) \"\")]\n        [(is-vowel?\
    \ (first word))\n         (loop (rest word) prev-consonant (cons (first word)\
    \ prev-vowel))]\n        [(is-consonant? (first word))\n         (if prev-vowel\n\
    \             (list-&gt;string (reverse prev-vowel))\n             (loop (rest\
    \ word) (cons (first word) prev-consonant) prev-vowel))])))\n  (get-closest-vowel\
    \ word))\n</code>\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n\
    \    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if\
    \ (empty? word)\n        \"\"\n        (if (is_vowel? (first word))\n        \
    \    (if (is_consonant? (second word))\n                (first word)\n       \
    \         (get-closest-vowel-helper (rest word)))\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse (string->list word))))\n",
  "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (let loop ([word (string-&gt;list word)]\n\
    \               [prev-consonant #f]\n               [closest-vowel #f])\n    \
    \  (cond [(empty? word) closest-vowel]\n            [(is_vowel? (first word))\n\
    \             (loop (rest word) prev-consonant (first word))]\n            [(is_consonant?\
    \ (first word))\n             (if prev-consonant\n                 closest-vowel\n\
    \                 (loop (rest word) (first word) closest-vowel))])))\n  (if (is_vowel?\
    \ (string-ref word 0))\n      \"\"\n      (list-&gt;string (find-closest-vowel\
    \ word))))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel word)\n    (if (or (empty? word)\
    \ (empty? (rest word)))\n        \"\"\n        (if (and (is-consonant? (first\
    \ word))\n                 (is-vowel? (second word)))\n            (second word)\n\
    \            (get-closest-vowel (rest word)))))\n  (get-closest-vowel (reverse\
    \ word)))\n", "  (define vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\"))\n  (define (is-vowel? c)\n    (member c vowels))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))))\n  (define (get-closest-vowel\
    \ word)\n    (cond ((is-consonant-vowel-consonant? word)\n           (string-ref\
    \ word 1))\n          ((string-length word) &gt; 3\n           (get-closest-vowel\
    \ (substring word 1)))))\n  (get-closest-vowel word))\n</code>\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (let loop ([word (string-reverse word)]\n               [prev-vowel\
    \ #f]\n               [prev-consonant #f])\n      (cond [(empty? word) (if prev-vowel\n\
    \                               (string-reverse prev-vowel)\n                \
    \               \"\")]\n            [(is-vowel? (first word))\n             (loop\
    \ (rest word) (cons (first word) prev-vowel) prev-consonant)]\n            [(is-consonant?\
    \ (first word))\n             (if prev-vowel\n                 (string-reverse\
    \ prev-vowel)\n                 (loop (rest word) prev-vowel (cons (first word)\
    \ prev-consonant)))])))\n  (find-closest-vowel word))\n", "  (define vowels \"\
    aeiouAEIOU\")\n  (define (is-vowel? c)\n    (string-contains? vowels c))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word word] [i (sub1 (string-length word))])\n      (cond [(is-vowel?\
    \ (string-ref word i)) (string-ref word i)]\n            [(zero? i) \"\"]\n  \
    \          [else (loop (substring word 0 i) (sub1 i))])))\n  (define (find-closest-consonant\
    \ word)\n    (let loop ([word word] [i (sub1 (string-length word))])\n      (cond\
    \ [(is-consonant? (string-ref word i)) (string-ref word i)]\n            [(zero?\
    \ i) \"\"]\n            [else (loop (substring word 0 i) (sub1 i))])))\n  (define\
    \ (find-closest-vowel-from-right word)\n    (let loop ([word word] [i (sub1 (string-length\
    \ word))])\n      (cond [(and (is-vowel? (string-ref word i))\n              \
    \    (is-consonant? (string-ref word (sub1 i))))\n             (string-ref word\
    \ i)]\n            [(zero? i) \"\"]\n            [else (loop (substring word 0\
    \ i) (sub1 i))])))\n  (find-closest-vowel-from-right word))\n", "  (let loop ([word\
    \ (string-&gt;list word)]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [vowel-positions '()])\n    (cond\
    \ [(empty? word) (if (empty? vowel-positions) \"\" (list-ref word (car vowel-positions)))]\n\
    \          [(member (car word) vowels) (loop (cdr word) vowels (cons (sub1 (length\
    \ word)) vowel-positions))]\n          [else (loop (cdr word) vowels vowel-positions)])))\n\
    </code>\n", "  (define (get-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(member (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (first word)]\n\
    \      [else (get-vowel (rest word))]))\n  (define (get-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(member (first word) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\")) empty]\n      [else (first word)]))\n  (define (get-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(member (first word) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")) empty]\n      [else (get-vowel (rest word))]))\n\
    \  (get-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let\
    \ loop ([word (string-&gt;list word)]\n               [prev-consonant #f]\n  \
    \             [prev-vowel #f])\n      (cond [(empty? word) prev-vowel]\n     \
    \       [(is-vowel? (first word))\n             (loop (rest word) prev-consonant\
    \ (first word))]\n            [(is-consonant? (first word))\n             (loop\
    \ (rest word) (first word) prev-vowel)])))\n  (if (is-vowel? (string-ref word\
    \ 0))\n      (find-closest-vowel (substring word 1))\n      (find-closest-vowel\
    \ word)))\n</code>\n", "  (define (get-vowel-index word)\n    (define (is-vowel?\
    \ c)\n      (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (get-vowel-index-helper\
    \ word i)\n      (if (string-empty? word)\n          -1\n          (if (and (is-vowel?\
    \ (string-ref word 0))\n                   (not (is-vowel? (string-ref word 1))))\n\
    \              i\n              (get-vowel-index-helper (substring word 1) (+\
    \ i 1)))))\n    (get-vowel-index-helper word 0))\n  (define (get-vowel-from-index\
    \ word index)\n    (if (= index -1)\n        \"\"\n        (string (string-ref\
    \ word index))))\n  (get-vowel-from-index word (get-vowel-index word)))\n", " \
    \ (define (is-vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E\
    \ #\\I #\\O #\\U)))\n  (define (is-consonant? ch)\n    (not (is-vowel? ch)))\n\
    \  (define (find-closest-vowel word)\n    (cond [(empty? word) empty]\n      \
    \    [(is-vowel? (first word)) empty]\n          [(is-consonant? (first word))\n\
    \           (cond [(empty? (rest word)) empty]\n                 [(is-vowel? (second\
    \ word)) (first word)]\n                 [else (find-closest-vowel (rest word))])]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is_vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (is_consonant?\
    \ (first word))\n                 (is_vowel? (second word)))\n            (second\
    \ word)\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\"\
    \ \"E\" \"I\" \"O\" \"U\"))\n  (define (is-vowel? ch)\n    (member ch vowels))\n\
    \  (define (is-consonant? ch)\n    (not (is-vowel? ch)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (define (get-closest-vowel-from-right-iter word i)\n      (if (or\
    \ (= i (string-length word))\n              (and (is-vowel? (string-ref word i))\n\
    \                   (is-consonant? (string-ref word (- i 1)))))\n          (string-ref\
    \ word i)\n          (get-closest-vowel-from-right-iter word (+ i 1))))\n    (get-closest-vowel-from-right-iter\
    \ word (- (string-length word) 1)))\n  (get-closest-vowel-from-right word))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (if (empty? word)\n        \"\"\n        (if (is-vowel?\
    \ (first word))\n            (first word)\n            (find-vowel (rest word)))))\n\
    \  (define (find-consonant word)\n    (if (empty? word)\n        \"\"\n      \
    \  (if (is-consonant? (first word))\n            (first word)\n            (find-consonant\
    \ (rest word)))))\n  (define (find-vowel-between-consonants word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (first word))\n       \
    \          (is-vowel? (second word))\n                 (is-consonant? (third word)))\n\
    \            (second word)\n            (find-vowel-between-consonants (rest word)))))\n\
    \  (find-vowel-between-consonants (reverse word)))\n", "  (define (is-vowel? c)\n\
    \    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond ((is-consonant-vowel-consonant? word)\n           (string-ref\
    \ word 1))\n          ((&gt; (string-length word) 3)\n           (get-closest-vowel-from-right\
    \ (substring word 1)))\n          (else \"\")))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [prev-consonant #f]\n       \
    \        [prev-vowel #f])\n      (cond [(empty? word) prev-vowel]\n          \
    \  [(is-vowel? (first word))\n             (loop (rest word) prev-consonant (first\
    \ word))]\n            [(is-consonant? (first word))\n             (loop (rest\
    \ word) (first word) prev-vowel)])))\n  (if (is-vowel? (string-ref word 0))\n\
    \      (find-closest-vowel (substring word 1))\n      (find-closest-vowel word)))\n\
    </code>\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is_vowel? (first word)) (first word)]\n      [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_consonant? (first word)) (first word)]\n      [else\
    \ (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is_consonant? (first word))\n\
    \            (is_vowel? (second word))\n            (is_consonant? (third word)))\n\
    \       (second word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first word)) empty]\n  \
    \  [(is_consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is_vowel? (second word)) empty]\n       [(is_consonant? (second word))\n\
    \        (cond\n          [(empty? (rest (rest word))) empty]\n          [(is_vowel?\
    \ (third word)) (third word)]\n          [(is_consonant? (third word))\n     \
    \      (cond\n             [(empty? (rest (rest (rest word)))) empty]\n      \
    \       [(is_vowel? (fourth word)) (fourth word)]\n             [(is_consonant?\
    \ (fourth word))\n              (cond\n                [(empty? (rest (rest (rest\
    \ (rest word))))) empty]\n                [(is_vowel? (fifth word)) (fifth word)]\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (is-consonant-vowel-consonant? w)\n    (and (is-consonant? (string-ref\
    \ w 0))\n         (is-vowel? (string-ref w 1))\n         (is-consonant? (string-ref\
    \ w 2))))\n  (define (get-closest-vowel-from-right word)\n    (cond\n      [(is-consonant-vowel-consonant?\
    \ word)\n       (string-ref word 1)]\n      [else\n       (get-closest-vowel-from-right\
    \ (substring word 1))]))\n  (get-closest-vowel-from-right word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond [(empty? word) empty]\n          [(is-vowel?\
    \ (first word)) empty]\n          [(is-consonant? (first word))\n           (cond\
    \ [(is-vowel? (second word)) (first word)]\n                 [else (find-closest-vowel\
    \ (rest word))])]))\n  (find-closest-vowel (reverse word)))\n", "  (let ([vowels\
    \ (string-&gt;list \"aeiouAEIOU\")]\n        [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )])\n    (let loop ([word (string-&gt;list word)]\n               [vowel #f]\n\
    \               [consonant #f])\n      (cond [(empty? word) (if vowel vowel \"\
    \")]\n            [(member (first word) vowels)\n             (loop (rest word)\
    \ (first word) consonant)]\n            [(member (first word) consonants)\n  \
    \           (loop (rest word) vowel (first word))]\n            [else (loop (rest\
    \ word) vowel consonant)]))))\n</code>\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [vowel #\\])\n              \
    \ [distance 0])\n      (cond [(null? word) (list-&gt;string (reverse vowel))]\n\
    \            [(is_vowel? (car word))\n             (loop (cdr word) (car word)\
    \ distance)]\n            [(is_consonant? (car word))\n             (loop (cdr\
    \ word) vowel (+ distance 1))]\n            [else (loop (cdr word) vowel distance)])))\n\
    \  (get-closest-vowel word))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n  (define\
    \ (find-closest-consonant word)\n    (cond\n      [(empty? word) empty]\n    \
    \  [(is-consonant? (first word)) (first word)]\n      [(is-vowel? (first word))\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel-from-right\
    \ (rest word))]))\n  (define (find-closest-consonant-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [(is-vowel? (first word)) (find-closest-consonant-from-right (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel-between-consonants (rest word))]))\n  (define\
    \ (find-closest-consonant-between-vowels word)\n    (cond\n      [(empty? word)",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word word]\n               [prev-char #\\])\n               [prev-prev-char\
    \ #\\])\n      (cond [(empty? word) #f]\n            [(is-vowel? (first word))\n\
    \             (if (and (is-consonant? prev-char)\n                      (is-consonant?\
    \ prev-prev-char))\n                 (first word)\n                 (loop (rest\
    \ word) (first word) prev-char))]\n            [else (loop (rest word) (first\
    \ word) prev-char)])))\n  (define (to-string c)\n    (string c))\n  (cond [(find-closest-vowel\
    \ word) (to-string (find-closest-vowel word))]\n        [else \"\"]))\n", "  (define\
    \ (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n  \
    \    [(vowel? (first word)) (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word))]))\n  (define (vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"\
    o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (consonant? c)\n    (not\
    \ (vowel? c)))\n  (define (get-closest-vowel-from-right word)\n    (cond\n   \
    \   [(empty? word) empty]\n      [(consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]\n      [else (get-closest-vowel-from-right (rest word))]))\n \
    \ (get-closest-vowel-from-right (reverse word)))\n", "  (define (is-vowel? c)\n\
    \    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (and (not (is-vowel? c)) (not (char=? c #\\\
    space))))\n  (define (find-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowel-pos -1]\n               [consonant-pos -1])\n\
    \      (cond [(empty? word) (list-ref word vowel-pos)]\n            [(is-vowel?\
    \ (first word))\n             (loop (rest word) (+ vowel-pos 1) consonant-pos)]\n\
    \            [(is-consonant? (first word))\n             (if (&gt; consonant-pos\
    \ vowel-pos)\n                 (loop (rest word) vowel-pos (+ consonant-pos 1))\n\
    \                 (list-ref word vowel-pos))]\n            [else (loop (rest word)\
    \ vowel-pos consonant-pos)])))\n  (if (is-vowel? (string-ref word 0))\n      (string\
    \ (find-closest-vowel (substring word 1)))\n      (find-closest-vowel word)))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [prev-consonant #f]\n               [next-consonant #f]\n\
    \               [closest-vowel #f])\n      (cond [(empty? word) closest-vowel]\n\
    \            [(is-vowel? (first word))\n             (loop (rest word)\n     \
    \              prev-consonant\n                   next-consonant\n           \
    \        (if (and prev-consonant next-consonant)\n                       (if (and\
    \ (not closest-vowel)\n                                (not (is-vowel? (first\
    \ word))))\n                           (first word)\n                        \
    \   (if (and closest-vowel\n                                    (not (is-vowel?\
    \ (first word))))\n                               (if (&lt; (string-length (list-&gt;string\
    \ word))\n                                       (string-length (list-&gt;string\
    \ (cons closest-vowel (rest word)))))\n                                   (first\
    \ word)\n                                   closest-vowel)\n                 \
    \              closest-vowel))\n                       (if (and (not closest-vowel)\n\
    \                                (not (is-vowel? (first word))))\n           \
    \                (first word)\n                           closest-vowel))))]\n\
    \            [(is-consonant? (first word))\n             (loop (rest word)\n \
    \                  (if (is-consonant? (first word))\n                       (first\
    \ word)\n                       prev-consonant)\n                   next-consonant\n\
    \                   closest-vowel)])))\n  (let ([closest-vowel (get-closest-vowel\
    \ word)])\n    (if closest-vowel\n        (list-&gt;string (list closest-vowel))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (is-consonant-vowel-consonant? c1 c2 c3)\n    (and (is-consonant? c1)\
    \ (is-vowel? c2) (is-consonant? c3)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (for/first ([c1 (in-list (string-&gt;list word))]\n             \
    \   [c2 (in-list (string-&gt;list word))]\n                [c3 (in-list (string-&gt;list\
    \ word))])\n      (and (is-consonant-vowel-consonant? c1 c2 c3) c2)))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\\
    j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\\
    C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\\
    W #\\X #\\Y #\\Z)])\n    (let loop ([i (sub1 (string-length word))]\n        \
    \       [prev-cons #f]\n               [prev-vowel #f])\n      (if (&lt; i 0)\n\
    \          (if prev-vowel\n              (string-ref word prev-vowel)\n      \
    \        \"\")\n          (let ([c (string-ref word i)])\n            (if (member\
    \ c vowels)\n                (if prev-cons\n                    (loop (- i 1)\
    \ prev-cons i)\n                    (loop (- i 1) prev-cons prev-vowel))\n   \
    \             (if (member c consonants)\n                    (loop (- i 1) i prev-vowel)\n\
    \                    (loop (- i 1) prev-cons prev-vowel))))))))\n</code>\n", " \
    \ (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (cond [(empty? word) empty]\n         \
    \ [(is-vowel? (first word)) empty]\n          [(is-consonant? (first word))\n\
    \           (cond [(empty? (rest word)) empty]\n                 [(is-vowel? (second\
    \ word)) (first word)]\n                 [else (get-closest-vowel-helper (rest\
    \ word))])]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_consonant? c)\n\
    \    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\
    \ [(empty? word) empty]\n          [(is_vowel? (first word)) empty]\n        \
    \  [(is_consonant? (first word))\n           (cond [(is_vowel? (second word))\
    \ (first word)]\n                 [else (get-closest-vowel-helper (rest word))])]\n\
    \          [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n  \
    \    [(empty? word) \"\"]\n      [(is-vowel? (first word)) (first word)]\n   \
    \   [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel\
    \ (reverse word)))\n", "  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(member (first word) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n       (first word)]\n      [else\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(vowel? (first word)) (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word))]))\n  (define (vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (consonant? c)\n    (not (vowel? c)))\n\
    \  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-vowel-between-consonants word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(and (consonant? (first word))\n            (vowel? (second word))\n\
    \            (consonant? (third word)))\n       (second word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(vowel? (first word))\
    \ empty]\n    [(consonant? (first word))\n     (cond\n       [(empty? (rest word))\
    \ empty]\n       [(vowel? (second word)) empty]\n       [(consonant? (second word))\n\
    \        (cond\n          [(empty? (rest (rest word))) empty]\n          [(vowel?\
    \ (third word)) (third word)]\n          [(consonant? (third word))\n        \
    \   (cond\n             [(empty? (rest (rest (rest word)))) empty]\n         \
    \    [(vowel? (fourth word)) (fourth word)]\n             [(consonant? (fourth\
    \ word))\n             ", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word))\n       (cond\n         [(is-vowel? (second word)) (first word)]\n\
    \         [else (find-closest-vowel (rest word))])]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (if (empty? word)\n        \"\"\
    \n        (if (is-vowel? (first word))\n            (first word)\n           \
    \ (get-closest-vowel (rest word)))))\n  (define (get-closest-consonant word)\n\
    \    (if (empty? word)\n        \"\"\n        (if (is-consonant? (first word))\n\
    \            (first word)\n            (get-closest-consonant (rest word)))))\n\
    \  (define (get-closest-vowel-between-consonants word)\n    (if (empty? word)\n\
    \        \"\"\n        (if (and (is-consonant? (first word))\n               \
    \  (is-vowel? (second word))\n                 (is-consonant? (third word)))\n\
    \            (second word)\n            (get-closest-vowel-between-consonants\
    \ (rest word)))))\n  (get-closest-vowel-between-consonants word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-consonant (rest word))]))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [(is-consonant? (first word)) (find-vowel\
    \ (rest word))]\n      [else (find-closest-vowel (rest word))]))\n  (cond\n  \
    \  [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]\n    [else empty]))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond ((null? word) \"\")\n          ((and (is-vowel?\
    \ (car word))\n                (is-consonant? (cadr word)))\n           (car word))\n\
    \          (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n",
  "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (define (find-closest-vowel-iter word\
    \ i)\n      (if (= i 0)\n          \"\"\n          (if (is_vowel? (string-ref\
    \ word (- i 1)))\n              (string-ref word (- i 1))\n              (find-closest-vowel-iter\
    \ word (- i 1)))))\n    (find-closest-vowel-iter word (string-length word)))\n\
    \  (if (or (is_vowel? (string-ref word 0))\n          (is_vowel? (string-ref word\
    \ (- (string-length word) 1))))\n      \"\"\n      (find-closest-vowel word)))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (cond ((string-empty? word) \"\")\n\
    \          ((and (is-vowel? (string-ref word 0))\n                (is-consonant?\
    \ (string-ref word 1)))\n           (string-ref word 0))\n          (else (find-closest-vowel\
    \ (string-drop word 1)))))\n  (find-closest-vowel (string-reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond [(empty? word) empty]\n          [(is-vowel?\
    \ (first word)) (first word)]\n          [(and (is-consonant? (first word)) (is-vowel?\
    \ (second word))) (second word)]\n          [else (find-closest-vowel (rest word))]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [prev-consonant #f]\n               [prev-vowel #f])\n\
    \      (cond [(empty? word) prev-vowel]\n            [(is-vowel? (first word))\n\
    \             (loop (rest word)\n                   prev-consonant\n         \
    \          (first word))]\n            [(is-consonant? (first word))\n       \
    \      (loop (rest word)\n                   (first word)\n                  \
    \ prev-vowel)])))\n  (define (get-closest-vowel-from-right word)\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [prev-consonant #f]\n       \
    \        [prev-vowel #f])\n      (cond [(empty? word) prev-vowel]\n          \
    \  [(is-vowel? (first word))\n             (loop (rest word)\n               \
    \    prev-consonant\n                   (first word))]\n            [(is-consonant?\
    \ (first word))\n             (loop (rest word)\n                   (first word)\n\
    \                   prev-vowel)])))\n  (let ([closest-vowel (get-closest-vowel\
    \ word)])\n    (if (char? closest-vowel)\n        (list-&gt;string (list closest-vowel))\n\
    \        \"\")))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let loop ([word\
    \ (string-&gt;list word)]\n               [prev-consonant #f]\n              \
    \ [closest-vowel #f])\n      (cond [(empty? word)\n             (if closest-vowel\n\
    \                 (list-&gt;string (reverse closest-vowel))\n                \
    \ \"\")]\n            [(is-vowel? (first word))\n             (if prev-consonant\n\
    \                 (loop (rest word) #f (cons (first word) closest-vowel))\n  \
    \               (loop (rest word) #f closest-vowel))]\n            [(is-consonant?\
    \ (first word))\n             (loop (rest word) (first word) closest-vowel)])))\n\
    \  (find-closest-vowel word))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(empty? word) prev-vowel]\n\
    \            [(is-vowel? (first word))\n             (loop (rest word) prev-consonant\
    \ (first word))]\n            [(is-consonant? (first word))\n             (loop\
    \ (rest word) (first word) prev-vowel)])))\n  (let ([closest-vowel (get-closest-vowel-from-right\
    \ word)])\n    (if closest-vowel\n        (list-&gt;string (list closest-vowel))\n\
    \        \"\")))\n</code>\n", "  (define vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\"))\n  (define (is-vowel? ch)\n    (member ch vowels))\n\
    \  (define (is-consonant? ch)\n    (not (is-vowel? ch)))\n  (define (find-vowel\
    \ word)\n    (define (find-vowel-iter word i)\n      (if (or (= i 0) (= i (- (string-length\
    \ word) 1)))\n          \"\"\n          (if (and (is-consonant? (string-ref word\
    \ (- i 1)))\n                   (is-vowel? (string-ref word i))\n            \
    \       (is-consonant? (string-ref word (+ i 1))))\n              (string-ref\
    \ word i)\n              (find-vowel-iter word (+ i 1)))))\n    (find-vowel-iter\
    \ word 0))\n  (find-vowel word))\n", "  (define (get-closest-vowel-helper word\
    \ i)\n    (if (or (= i (string-length word))\n            (and (char-vowel? (string-ref\
    \ word i))\n                 (char-vowel? (string-ref word (- i 1)))))\n     \
    \   \"\"\n        (if (char-vowel? (string-ref word i))\n            (string-ref\
    \ word i)\n            (get-closest-vowel-helper word (+ i 1)))))\n  (get-closest-vowel-helper\
    \ word 1))\n", "  (let loop ([word word] [i (sub1 (string-length word))])\n  \
    \  (cond\n      [(= i -1) \"\"]\n      [(and (char-vowel? (string-ref word i))\
    \ (char-consonant? (string-ref word (sub1 i))))\n       (string-ref word i)]\n\
    \      [else (loop word (sub1 i))])))\n", "  (define (get-closest-vowel-helper\
    \ word index)\n    (if (or (= index 0) (= index (- (string-length word) 1)))\n\
    \        \"\"\n        (if (and (is-consonant (string-ref word index))\n     \
    \            (is-consonant (string-ref word (- index 1))))\n            (string-ref\
    \ word index)\n            (get-closest-vowel-helper word (- index 1)))))\n  (get-closest-vowel-helper\
    \ word (- (string-length word) 1)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word))\n            (is-vowel? (second word))\n            (is-consonant? (third\
    \ word)))\n       (second word)]\n      [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word))\
    \ empty]\n    [(is-consonant? (first word))\n     (cond\n       [(is-vowel? (second\
    \ word)) empty]\n       [(is-consonant? (second word))\n        (cond\n      \
    \    [(is-vowel? (third word)) (third word)]\n          [(is-consonant? (third\
    \ word))\n           (find-vowel-between-consonants (rest word))])]\n       [(is-vowel?\
    \ (second word)) empty])]\n    [(is-vowel? (first word)) empty]))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [(is-vowel?\
    \ (first word)) (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-from-right\
    \ word)\n    (find-closest-vowel (reverse word)))\n  (define (find-closest-consonant-from-right\
    \ word)\n    (find-closest-consonant (reverse word)))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word))\n            (is-vowel? (second word))\n            (is-consonant? (third\
    \ word)))\n       (second word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (find-closest-vowel-between-consonants word))\n", "  (let\
    \ loop ([word (string-&gt;list word)]\n             [vowels '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [result '()])\n  \
    \  (cond [(empty? word) (list-&gt;string result)]\n          [(member (car word)\
    \ vowels) (loop (cdr word) vowels (cons (car word) result))]\n          [else\
    \ (loop (cdr word) vowels result)])))\n</code>\nI am not sure if this is the best\
    \ way to do it, but it works.\n\n\nA:\n\nYou can use <code>regexp-match</code>\
    \ to find the last vowel in the string:\n<code>(define (get-closest-vowel word)\n\
    \  (define vowels #rx\"[aeiou]\")\n  (define (find-last-vowel word)\n    (regexp-match*\
    \ #:partial #f vowels word))\n  (define (find-first-consonant word)\n    (regexp-match*\
    \ #:partial #f #rx\"[^aeiou]\" word))\n  (define (find-last-consonant word)\n\
    \    (regexp-match* #:partial #f #rx\"[^aeiou]\" (reverse word)))\n  (define (find-first-vowel\
    \ word)\n    (regexp-match* #:partial #f vowels word))\n  (define (find-next-vowel\
    \ word)\n    (regexp-match* #:partial #f vowels (cdr word)))\n  (define (find-next-consonant\
    \ word)\n    (regexp-match* #:partial #f #rx\"[^aeiou]\" (cdr word)))\n  (define\
    \ (find-previous-vowel word)\n    (regexp-match* #:partial #f vowels (reverse\
    \ (cdr (reverse word)))))\n  (define (find-previous-consonant word)\n    (regexp-match*\
    \ #:partial #f #rx\"[^aeiou]\" (reverse (cdr (reverse word))", "  (let loop ([i\
    \ (sub1 (string-length word))]\n             [vowel \"\"])\n    (if (or (= i -1)\n\
    \            (and (not (char-vowel? (string-ref word i)))\n                 (not\
    \ (char-vowel? (string-ref word (sub1 i))))))\n        vowel\n        (loop (sub1\
    \ i)\n              (if (char-vowel? (string-ref word i))\n                  (string-ref\
    \ word i)\n                  vowel)))))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [vowel-pos -1]\n\
    \               [consonant-pos -1])\n      (cond [(null? word)\n             (if\
    \ (&gt; (- vowel-pos consonant-pos) 1)\n                 (list-ref word vowel-pos)\n\
    \                 \"\")]\n            [(and (is-vowel? (car word))\n         \
    \         (&gt; vowel-pos consonant-pos))\n             (loop (cdr word)\n   \
    \                (+ vowel-pos 1)\n                   consonant-pos)]\n       \
    \     [(and (is-consonant? (car word))\n                  (&gt; consonant-pos\
    \ vowel-pos))\n             (loop (cdr word)\n                   vowel-pos\n \
    \                  (+ consonant-pos 1))]\n            [else\n             (loop\
    \ (cdr word)\n                   vowel-pos\n                   consonant-pos)])))\n\
    \  (find-closest-vowel word))\n</code>\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (find-closest-vowel word)\n    (let\
    \ loop ([word (string-&gt;list word)]\n               [vowel #\\])\n         \
    \      [distance 0])\n      (cond [(null? word) (list-&gt;string (list vowel))]\n\
    \            [(is_vowel? (car word))\n             (loop (cdr word) (car word)\
    \ distance)]\n            [(is_consonant? (car word))\n             (loop (cdr\
    \ word) vowel (+ distance 1))]\n            [else (loop (cdr word) vowel distance)])))\n\
    \  (find-closest-vowel word))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-vowel-from-right word)\n    (define\
    \ (get-vowel-from-right-iter word prev-consonant prev-vowel)\n      (cond\n  \
    \      [(empty? word) prev-vowel]\n        [(is-vowel? (first word))\n       \
    \  (get-vowel-from-right-iter (rest word) #f (first word))]\n        [(is-consonant?\
    \ (first word))\n         (if prev-consonant\n             (get-vowel-from-right-iter\
    \ (rest word) #t prev-vowel)\n             (get-vowel-from-right-iter (rest word)\
    \ #t prev-vowel))]))\n    (get-vowel-from-right-iter word #f #f))\n  (get-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(null? word) #f]\n      \
    \      [(is-vowel? (car word))\n             (loop (cdr word) prev-consonant (car\
    \ word))]\n            [(is-consonant? (car word))\n             (if prev-vowel\n\
    \                 prev-vowel\n                 (loop (cdr word) (car word) prev-vowel))])))\n\
    \  (let ([vowel (get-closest-vowel word)])\n    (if vowel\n        (list-&gt;string\
    \ (list vowel))\n        \"\")))\n</code>\n", "  (define vowels '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n  (define (is-vowel? c)\n\
    \    (member c vowels))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (let loop ([word word] [i (sub1 (string-length\
    \ word))])\n      (cond\n        [(or (zero? i) (is-vowel? (string-ref word i)))\n\
    \         (string-ref word i)]\n        [(and (is-consonant? (string-ref word\
    \ i))\n              (is-consonant? (string-ref word (sub1 i))))\n         (loop\
    \ word (sub1 i))]\n        [else (loop word (sub1 i))])))\n  (if (is-vowel? (string-ref\
    \ word 0))\n      \"\"\n      (find-closest-vowel word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (if (or (empty? word)\n            (and (is-vowel? (first word))\n\
    \                 (is-vowel? (second word))))\n        \"\"\n        (if (and\
    \ (is-consonant? (first word))\n                 (is-vowel? (second word)))\n\
    \            (second word)\n            (find-closest-vowel (rest word)))))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let\
    \ loop ([word (string-&gt;list word)]\n               [prev-consonant #f]\n  \
    \             [prev-vowel #f])\n      (cond [(empty? word) (if prev-vowel\n  \
    \                             (list-&gt;string (reverse prev-vowel))\n       \
    \                        \"\")]\n            [(is-vowel? (first word))\n     \
    \        (loop (rest word)\n                   prev-consonant\n              \
    \     (cons (first word) prev-vowel))]\n            [(is-consonant? (first word))\n\
    \             (if prev-vowel\n                 (list-&gt;string (reverse prev-vowel))\n\
    \                 (loop (rest word)\n                       (cons (first word)\
    \ prev-consonant)\n                       prev-vowel))])))\n  (find-closest-vowel\
    \ word))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word))\n       (cond\n         [(is-vowel? (second word)) (first word)]\n\
    \         [else (find-closest-vowel (rest word))])]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_vowel? (first word)) (first word)]\n      [(is_consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (cond\n    [(empty? word) \"\"]\n    [(or (char-vowel? (last\
    \ word)) (char-vowel? (first word))) \"\"]\n    [(char-vowel? (second-to-last\
    \ word)) (string (second-to-last word)))\n    [(char-vowel? (third-to-last word))\
    \ (string (third-to-last word)))\n    [(char-vowel? (fourth-to-last word)) (string\
    \ (fourth-to-last word)))\n    [(char-vowel? (fifth-to-last word)) (string (fifth-to-last\
    \ word)))\n    [else \"\"]))\n", "  (define (is-vowel? c)\n    (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond [(empty?\
    \ word) empty]\n          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is_vowel? (first word)) (first word)]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is_consonant? (first word)) (first word)]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is_consonant? (first word)) (is_vowel?\
    \ (second word)) (is_consonant? (third word)))\n       (second word)]\n      [else\
    \ (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty? word)\
    \ empty]\n    [(is_vowel? (first word)) empty]\n    [(is_consonant? (first word))\
    \ (find-vowel-between-consonants word)]\n    [(is_vowel? (first word)) (find-consonant\
    \ word)]))\n", "  (define vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\"))\n  (define (is-vowel? c)\n    (member c vowels))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n \
    \   (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word)) (is-vowel? (second word))) (second word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (find-closest-vowel word))\n", "  (define (is_vowel? c)\n\
    \    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_consonant? (first\
    \ word)) (first word)]\n      [else (find-consonant (rest word))]))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(and\
    \ (is_consonant? (first word)) (is_vowel? (second word))) (second word)]\n   \
    \   [else (find-closest-vowel (rest word))]))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (null? word)\n        \"\"\n        (if (and\
    \ (is-consonant? (car word))\n                 (is-vowel? (cadr word)))\n    \
    \        (string (cadr word))\n            (find-closest-vowel (cdr word)))))\n\
    \  (find-closest-vowel word))\n", "  (define (is_vowel? c)\n    (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [prev-char #\\a]\n          \
    \     [next-char #\\a])\n      (cond\n        [(empty? word) \"\"]\n        [(and\
    \ (is_consonant? (car word))\n              (is_vowel? prev-char)\n          \
    \    (is_consonant? next-char))\n         (list-&gt;string (list prev-char))]\n\
    \        [else (loop (cdr word) (car word) (car (cdr word)))])))\n  (get-closest-vowel\
    \ word))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n    (cond\n   \
    \   [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n   \
    \   [(is-consonant? (first word)) (get-closest-vowel (rest word))]))\n  (get-closest-vowel\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n\
    \    (not (is_vowel? c)))\n  (define (get-vowel-index word)\n    (let loop ([i\
    \ (sub1 (string-length word))])\n      (if (and (is_consonant? (string-ref word\
    \ i))\n               (is_vowel? (string-ref word (sub1 i))))\n          i\n \
    \         (if (zero? i)\n              -1\n              (loop (sub1 i))))))\n\
    \  (define (get-vowel word index)\n    (string-ref word index))\n  (define (get-closest-vowel\
    \ word)\n    (let ([index (get-vowel-index word)])\n      (if (negative? index)\n\
    \          \"\"\n          (get-vowel word index))))\n  (get-closest-vowel word))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n   \
    \     [word (string->list word)])\n    (let loop ([word word]\n              \
    \ [vowels vowels]\n               [prev-char #\\])\n      (cond [(empty? word)\
    \ \"\"]\n            [(member (first word) vowels)\n             (if (and (not\
    \ (char=? prev-char #\\))\n                      (not (char=? (first word) #\\\
    )))\n                 (string (first word))\n                 (loop (rest word)\
    \ vowels (first word)))]\n            [else (loop (rest word) vowels (first word))]))))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [closest-vowel #f])\n      (cond [(empty? word)\n      \
    \       (if closest-vowel\n                 (list-&gt;string (reverse closest-vowel))\n\
    \                 \"\")]\n            [(is-vowel? (first word))\n            \
    \ (if prev-consonant\n                 (loop (rest word) #f (cons (first word)\
    \ closest-vowel))\n                 (loop (rest word) #f closest-vowel))]\n  \
    \          [(is-consonant? (first word))\n             (loop (rest word) (first\
    \ word) closest-vowel)])))\n  (get-closest-vowel word))\n</code>\n", "  (define\
    \ (get-vowel-pos word)\n    (let loop ([i (sub1 (string-length word))])\n    \
    \  (cond [(negative? i) #f]\n            [(char-vowel? (string-ref word i)) i]\n\
    \            [else (loop (sub1 i))])))\n  (define (get-consonant-pos word)\n \
    \   (let loop ([i (sub1 (string-length word))])\n      (cond [(negative? i) #f]\n\
    \            [(char-consonant? (string-ref word i)) i]\n            [else (loop\
    \ (sub1 i))])))\n  (define (char-vowel? c)\n    (member c '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (char-consonant? c)\n\
    \    (not (char-vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop\
    \ ([i (sub1 (string-length word))])\n      (cond [(negative? i) \"\"]\n      \
    \      [(and (char-vowel? (string-ref word i))\n                  (char-consonant?\
    \ (string-ref word (sub1 i))))\n             (string-ref word i)]\n          \
    \  [else (loop (sub1 i))])))\n  (get-closest-vowel word))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (is_consonant_pair?\
    \ c1 c2)\n    (and (is_consonant? c1) (is_consonant? c2)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (is_consonant_pair? (car\
    \ word) (cadr word))\n            (if (is_vowel? (caddr word))\n             \
    \   (caddr word)\n                (get-closest-vowel-helper (cdr word)))\n   \
    \         (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (string->list word)))\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (is_consonant_pair? c1 c2)\n    (and\
    \ (is_consonant? c1) (is_consonant? c2)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (is_consonant_pair? (car\
    \ word) (cadr word))\n            (if (is_vowel? (caddr word))\n             \
    \   (caddr word)\n                (get-closest-vowel-helper (cdr word)))\n   \
    \         (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let\
    \ loop ([word (string-&gt;list word)]\n               [prev-char #\\])\n     \
    \          [prev-prev-char #\\])\n      (cond\n        [(null? word) #f]\n   \
    \     [(and (is-consonant? prev-char)\n              (is-vowel? (car word))\n\
    \              (is-consonant? prev-prev-char))\n         (car word)]\n       \
    \ [else (loop (cdr word) (car word) prev-char)])))\n  (let ([closest-vowel (find-closest-vowel\
    \ word)])\n    (if closest-vowel\n        (string closest-vowel)\n        \"\"\
    )))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (let loop ([word (string-reverse\
    \ word)]\n               [prev-consonant? #f]\n               [prev-vowel? #f])\n\
    \      (cond [(empty? word) \"\"]\n            [(is-vowel? (first word))\n   \
    \          (if prev-consonant?\n                 (string (first word))\n     \
    \            (loop (rest word) #f #t))]\n            [(is-consonant? (first word))\n\
    \             (if prev-vowel?\n                 \"\"\n                 (loop (rest\
    \ word) #t #f))])))\n  (get-closest-vowel-from-right word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(empty? word) #f]\n     \
    \       [(is-vowel? (first word))\n             (loop (rest word) prev-consonant\
    \ (first word))]\n            [(is-consonant? (first word))\n             (loop\
    \ (rest word) (first word) prev-vowel)]\n            [else (if prev-vowel\n  \
    \                    prev-vowel\n                      (loop (rest word) prev-consonant\
    \ prev-vowel))])))\n  (let ([closest-vowel (get-closest-vowel word)])\n    (if\
    \ closest-vowel\n        (list-&gt;string (list closest-vowel))\n        \"\"\
    )))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (define (find-closest-vowel-iter\
    \ word i)\n      (if (or (= i 0) (= i (- (string-length word) 1)))\n         \
    \ \"\"\n          (let ((c (string-ref word i)))\n            (if (and (is-vowel?\
    \ c)\n                     (is-consonant? (string-ref word (- i 1)))\n       \
    \              (is-consonant? (string-ref word (+ i 1))))\n                (string\
    \ c)\n                (find-closest-vowel-iter word (+ i 1))))))\n    (find-closest-vowel-iter\
    \ word 0))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) \"\"]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word)) (is-vowel? (second word)) (is-consonant? (third word)))\n       (second\
    \ word)]\n      [else (find-vowel-between-consonants (rest word))]))\n  (cond\n\
    \    [(empty? word) empty]\n    [(and (is-vowel? (first word)) (is-consonant?\
    \ (second word))) (first word)]\n    [(and (is-consonant? (first word)) (is-vowel?\
    \ (second word))) (second word)]\n    [(and (is-consonant? (first word)) (is-consonant?\
    \ (second word)))\n     (find-vowel-between-consonants (rest word))]\n    [else\
    \ (get_closest_vowel (rest word))]))\n", "  (define vowels '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U))\n  (define (is-vowel? c)\n    (member c vowels))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (define (get-closest-vowel-from-right-iter word i)\n      (if (or\
    \ (= i 0) (= i (- (string-length word) 1)))\n          \"\"\n          (if (and\
    \ (is-consonant? (string-ref word i))\n                   (is-vowel? (string-ref\
    \ word (- i 1)))\n                   (is-consonant? (string-ref word (- i 2))))\n\
    \              (string (string-ref word (- i 1)))\n              (get-closest-vowel-from-right-iter\
    \ word (- i 1)))))\n    (get-closest-vowel-from-right-iter word (- (string-length\
    \ word) 1)))\n  (get-closest-vowel-from-right word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (string-reverse word)]\n               [prev-char\
    \ #\\])\n               [next-char #\\])\n      (cond [(empty? word) \"\"]\n \
    \           [(is-vowel? (first word))\n             (if (is-consonant? prev-char)\n\
    \                 (string (first word))\n                 (loop (rest word) (first\
    \ word) next-char))]\n            [(is-consonant? (first word))\n            \
    \ (loop (rest word) (first word) prev-char)]\n            [else (loop (rest word)\
    \ prev-char next-char)])))\n  (get-closest-vowel-from-right word))\n", "  (let\
    \ loop ([word (string-&gt;list word)]\n             [vowels '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [prev-char #\\space]\n\
    \             [next-char #\\space])\n    (cond [(null? word) \"\"]\n         \
    \ [(member (string-&gt;list (car word)) vowels)\n           (if (and (not (char=?\
    \ prev-char #\\space))\n                    (not (char=? next-char #\\space)))\n\
    \               (list-&gt;string (car word))\n               (loop (cdr word)\
    \ vowels (car word) next-char))]\n          [else (loop (cdr word) vowels prev-char\
    \ (car word))])))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word)) (get-closest-vowel (rest word))]\n      [else (first word)]))\n\
    \  (get-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(empty? word) prev-vowel]\n\
    \            [(is-vowel? (first word))\n             (loop (rest word) prev-consonant\
    \ (first word))]\n            [(is-consonant? (first word))\n             (loop\
    \ (rest word) (first word) prev-vowel)])))\n  (find-closest-vowel word))\n</code>\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) empty]\n      [(is-consonant? (first word))\n       (cond\n  \
    \       [(is-vowel? (second word)) (first word)]\n         [else (find-closest-vowel\
    \ (rest word))])]))\n  (find-closest-vowel (reverse word)))\n", "  (define vowels\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n  (define (is-vowel?\
    \ c)\n    (member c vowels))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (define (get-closest-vowel-from-right-iter\
    \ word i)\n      (if (or (= i 0) (= i (- (string-length word) 1)))\n         \
    \ \"\"\n          (if (and (is-consonant? (string-ref word i))\n             \
    \      (is-vowel? (string-ref word (- i 1)))\n                   (is-consonant?\
    \ (string-ref word (- i 2))))\n              (string-ref word (- i 1))\n     \
    \         (get-closest-vowel-from-right-iter word (- i 1)))))\n    (get-closest-vowel-from-right-iter\
    \ word (- (string-length word) 1)))\n  (get-closest-vowel-from-right word))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (let loop ([word (string-reverse word)]\n   \
    \            [prev-vowel #f]\n               [prev-consonant #f])\n      (cond\
    \ [(empty? word) #f]\n            [(is-vowel? (first word))\n             (loop\
    \ (rest word) (first word) prev-consonant)]\n            [(is-consonant? (first\
    \ word))\n             (if prev-vowel\n                 prev-vowel\n         \
    \        (loop (rest word) prev-vowel (first word)))]\n            [else (loop\
    \ (rest word) prev-vowel prev-consonant)])))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (is-consonant-pair? c1 c2)\n    (and (is-consonant? c1) (is-consonant?\
    \ c2)))\n  (define (is-vowel-consonant-pair? c1 c2)\n    (and (is-vowel? c1) (is-consonant?\
    \ c2)))\n  (define (is-consonant-vowel-pair? c1 c2)\n    (and (is-consonant? c1)\
    \ (is-vowel? c2)))\n  (define (is-vowel-consonant-pair? c1 c2)\n    (and (is-vowel?\
    \ c1) (is-consonant? c2)))\n  (define (is-consonant-vowel-pair? c1 c2)\n    (and\
    \ (is-consonant? c1) (is-vowel? c2)))\n  (define (is-vowel-consonant-pair? c1\
    \ c2)\n    (and (is-vowel? c1) (is-consonant? c2)))\n  (define (is-consonant-vowel-pair?\
    \ c1 c2)\n    (and (is-consonant? c1) (is-vowel? c2)))\n  (define (is-vowel-consonant-pair?\
    \ c1 c2)\n    (and (is-vowel? c1) (is-consonant? c2)))\n  (define (is-consonant-vowel-pair?\
    \ c1 c2)\n    (and (is-consonant? c1) (is-vowel? c2)))\n  (define (is-vowel-consonant-pair?\
    \ c1 c2)\n    (and", "  (define (get-closest-vowel-helper word)\n    (cond\n \
    \     [(empty? word) empty]\n      [(consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]\n      [(vowel? (first word)) (first word)]\n      [else empty]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n \
    \   (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ c1 c2 c3)\n    (and (is-consonant? c1) (is-vowel? c2) (is-consonant? c3)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (cond [(is-consonant-vowel-consonant?\
    \ (string-ref word 0) (string-ref word 1) (string-ref word 2))\n           (string-ref\
    \ word 1)]\n          [(is-consonant-vowel-consonant? (string-ref word 1) (string-ref\
    \ word 2) (string-ref word 3))\n           (string-ref word 2)]\n          [(is-consonant-vowel-consonant?\
    \ (string-ref word 2) (string-ref word 3) (string-ref word 4))\n           (string-ref\
    \ word 3)]\n          [(is-consonant-vowel-consonant? (string-ref word 3) (string-ref\
    \ word 4) (string-ref word 5))\n           (string-ref word 4)]\n          [(is-consonant-vowel-consonant?\
    \ (string-ref word 4) (string-ref word 5) (string-ref word 6))\n           (string-ref\
    \ word 5)]\n          [else\n           \"\"]))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (let loop ([word (string-&gt;list word)]\n             [vowels\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n          \
    \   [result \"\"])\n    (cond [(null? word) result]\n          [(member (car word)\
    \ vowels)\n           (loop (cdr word) vowels (string-append result (car word)))]\n\
    \          [else (loop (cdr word) vowels result)])))\n</code>\n", "  (let loop\
    \ ([word (string-&gt;list word)]\n             [vowels '(\"a\" \"e\" \"i\" \"\
    o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [result \"\"])\n    (cond\
    \ [(empty? word) result]\n          [(member (first word) vowels) (loop (rest\
    \ word) vowels (first word))]\n          [else (loop (rest word) vowels result)])))\n\
    </code>\n", "  (define vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U))\n  (define (is-vowel? c)\n    (member c vowels))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word))\n       (cond\n         [(is-vowel? (second word)) (second word)]\n\
    \         [else (find-closest-vowel (rest word))])]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) (first word)]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is-consonant? (first word))\n     \
    \       (is-vowel? (second word))\n            (is-consonant? (third word)))\n\
    \       (second word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (define (find-vowel-between-consonants-from-right word)\n    (find-vowel-between-consonants\
    \ (reverse word)))\n  (find-vowel-between-consonants-from-right word))\n", " \
    \ (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (define (find-closest-vowel-helper word\
    \ i)\n      (cond\n        [(= i (string-length word)) \"\"]\n        [(and (is-consonant?\
    \ (string-ref word i))\n              (is-vowel? (string-ref word (+ i 1))))\n\
    \         (string-ref word (+ i 1))]\n        [else (find-closest-vowel-helper\
    \ word (+ i 1))]))\n    (find-closest-vowel-helper word (- (string-length word)\
    \ 2)))\n  (find-closest-vowel word))\n", "  (define (is-vowel? ch)\n    (member\
    \ ch '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? ch)\n    (not (is-vowel? ch)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word word] [prev-ch #f] [prev-prev-ch #f])\n      (cond\n\
    \        [(empty? word) #f]\n        [(and (is-vowel? (first word)) (is-consonant?\
    \ prev-ch) (is-consonant? prev-prev-ch)) (first word)]\n        [else (loop (rest\
    \ word) (first word) prev-ch)])))\n  (get-closest-vowel-from-right word))\n",
  "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is_vowel? (first word)) (first word)]\n      [(is_consonant? (first word))\
    \ (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (is-last-vowel? c)\n    (and (is-vowel? c)\n         (not (is-vowel? (string-ref\
    \ word (sub1 (string-length word)))))))\n  (define (is-first-consonant? c)\n \
    \   (and (is-consonant? c)\n         (not (is-consonant? (string-ref word 1)))))\n\
    \  (define (is-last-consonant? c)\n    (and (is-consonant? c)\n         (not (is-consonant?\
    \ (string-ref word (sub1 (string-length word)))))))\n  (define (is-first-vowel?\
    \ c)\n    (and (is-vowel? c)\n         (not (is-vowel? (string-ref word 1)))))\n\
    \  (define (is-first-consonant-and-last-vowel? c)\n    (and (is-first-consonant?\
    \ c)\n         (is-last-vowel? c)))\n  (define (is-first-vowel-and-last-consonant?\
    \ c)\n    (and (is-first-vowel? c)\n         (is-last-consonant? c)))\n  (define\
    \ (is-first-consonant-and-last-consonant? c)\n    (and (is-first-consonant? c)\n\
    \         (is-last-consonant? c)))\n  (define (is-first-vowel-and-last-vowel?\
    \ c)\n    (and (is-first-vowel? c)\n         (is-last-vowel? c)))\n  (define (is-first-consonant-and-last-vowel?\
    \ c)\n    (and (is-", "  (let loop ([word word] [i (sub1 (string-length word))])\n\
    \    (cond [(or (vowel? (string-ref word i)) (zero? i))\n           (string-ref\
    \ word i)]\n          [else (loop (substring word 0 i) (sub1 i))])))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(empty? word) (if prev-vowel\
    \ (list-&gt;string (reverse prev-vowel)) \"\")]\n            [(is-vowel? (first\
    \ word)) (loop (rest word) prev-consonant (cons (first word) prev-vowel))]\n \
    \           [(is-consonant? (first word)) (loop (rest word) (cons (first word)\
    \ prev-consonant) prev-vowel)])))\n  (get-closest-vowel word))\n</code>\n", " \
    \ (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel word)\n    (define (get-closest-vowel-iter word\
    \ result)\n      (cond [(empty? word) result]\n            [(is-vowel? (first\
    \ word)) (get-closest-vowel-iter (rest word) (first word))]\n            [(is-consonant?\
    \ (first word)) (get-closest-vowel-iter (rest word) result)]))\n    (get-closest-vowel-iter\
    \ word \"\"))\n  (get-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (let loop ([word (string-reverse word)]\n               [prev-char #\\])\n\
    \               [next-char #\\])\n      (cond [(empty? word) \"\"]\n         \
    \   [(is-vowel? (first word))\n             (if (and (is-consonant? prev-char)\n\
    \                      (is-consonant? next-char))\n                 (string (first\
    \ word))\n                 (loop (rest word) (first word) prev-char))]\n     \
    \       [else (loop (rest word) (first word) prev-char)])))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"\
    ]\n    [(and (consonant? (first word)) (vowel? (second word))) (second word)]\n\
    \    [(and (consonant? (first word)) (consonant? (second word))) (get_closest_vowel\
    \ (rest word))]\n    [else (get_closest_vowel (rest word))]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (or (null? word)\n            (null? (cdr word)))\n        \"\"\n     \
    \   (if (and (is-consonant? (car word))\n                 (is-vowel? (cadr word)))\n\
    \            (string (cadr word))\n            (get-closest-vowel-helper (cdr\
    \ word)))))\n  (get-closest-vowel-helper (string-reverse word)))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel-from-right\
    \ word)\n    (let loop ([word (string-reverse word)]\n               [prev-char\
    \ #\\])\n               [vowel #\\])\n      (cond [(empty? word) vowel]\n    \
    \        [(is_vowel? (first word))\n             (loop (rest word) (first word)\
    \ (first word))]\n            [(and (is_consonant? (first word))\n           \
    \       (is_consonant? prev-char))\n             (loop (rest word) (first word)\
    \ vowel)]\n            [else (loop (rest word) (first word) vowel)])))\n  (find-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (get-closest-vowel (rest word))]))\n  (get-closest-vowel (reverse\
    \ word)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
