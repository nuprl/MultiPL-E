language: rkt
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond ((> a-sum\
    \ b-sum) #t)\n                       ((< a-sum b-sum) #f)\n                  \
    \     (else (< (index-of nums a) (index-of nums b))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6gfkz6i9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6gfkz6i9.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu9va98_5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu9va98_5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (if (= (sum-digits x)\
    \ (sum-digits y))\n              (< (index nums x) (index nums y))\n         \
    \     (< (sum-digits x) (sum-digits y))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdgzskdlw.rkt:15:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdgzskdlw.rkt:15:18\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cadr x) (cadr y)) #t]\n           \
    \ [(> (cadr x) (cadr y)) #f]\n            [(< (car x) (car y)) #t]\n         \
    \   [(> (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp98zr216s.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp98zr216s.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(= x-sum y-sum)\n               (cond\n                 [(= x y)\n     \
    \             #f]\n                 [(< x y)\n                  #t]\n        \
    \         [else\n                  #f])]\n              [(< x-sum y-sum)\n   \
    \            #t]\n              [else\n               #f])))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp51y6w453.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp51y6w453.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (cond\n            [(=\
    \ (sum-digits x) (sum-digits y))\n             (< (index-of x nums) (index-of\
    \ y nums))]\n            [(< (sum-digits x) (sum-digits y)) #t]\n            [else\
    \ #f]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjpvcbcp4.rkt:16:17: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjpvcbcp4.rkt:16:17\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             ((< x-sum y-sum) #t)\n                   ((> x-sum y-sum) #f)\n\
    \                   ((< (index nums x) (index nums y)) #t)\n                 \
    \  ((> (index nums x) (index nums y)) #f)\n                   (else #f))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7lyjmjqe.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7lyjmjqe.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb_fabdv_.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpb_fabdv_.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (if (= (sum-digits x) (sum-digits\
    \ y))\n                   (< (index-of x nums) (index-of y nums))\n          \
    \         (< (sum-digits x) (sum-digits y))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphd3u8hlw.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphd3u8hlw.rkt:14:23\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (cond\n            [(=\
    \ (sum-digits x) (sum-digits y))\n             (< (index-of x nums) (index-of\
    \ y nums))]\n            [(< (sum-digits x) (sum-digits y)) #t]\n            [else\
    \ #f]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjpvcbcp4.rkt:16:17: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjpvcbcp4.rkt:16:17\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp70eokheu.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp70eokheu.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond ((> a-sum\
    \ b-sum) #t)\n                       ((< a-sum b-sum) #f)\n                  \
    \     (else (< (index-of nums a) (index-of nums b))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6gfkz6i9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6gfkz6i9.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (if (= (cdr x) (cdr y))\n              (< (car x) (car y))\n\
    \              (< (cdr x) (cdr y))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3iqb_ew4.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3iqb_ew4.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (a b)\n          (< (sum-digits a) (sum-digits\
    \ b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm598ewxs.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpm598ewxs.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\n\
    \               (let ((x-index (index-of nums x))\n                     (y-index\
    \ (index-of nums y)))\n                 (< x-index y-index))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv5k0fo6j.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpv5k0fo6j.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((< x-sum y-sum) #f)\n                  \
    \     (else (< (index-of nums x) (index-of nums y))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7m3ej6p5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7m3ej6p5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(>\
    \ (cdr x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(>\
    \ (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdcjk02w.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqdcjk02w.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4i0zng7x.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4i0zng7x.rkt:14:19\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [(< (index-of nums x) (index-of nums y)) #t]\n           \
    \        [else #f])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph05vq3jg.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmph05vq3jg.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((< x-sum\
    \ y-sum) #t)\n                       ((> x-sum y-sum) #f)\n                  \
    \     (else (< (index nums x) (index nums y))))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpprwb6fr5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpprwb6fr5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ([a-sum (sum-digits a)]\n\
    \                     [b-sum (sum-digits b)])\n                 (if (= a-sum b-sum)\n\
    \                     (< (index nums a) (index nums b))\n                    \
    \ (< a-sum b-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsq_bief8.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpsq_bief8.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ([a-sum (sum-digits a)]\n\
    \                     [b-sum (sum-digits b)])\n                 (cond\n      \
    \             [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n\
    \                   [else (< (list-ref nums a) (list-ref nums b))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjba7guu9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjba7guu9.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((< x-sum y-sum) #f)\n                  \
    \     (else (< (index-of nums x) (index-of nums y))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7m3ej6p5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7m3ej6p5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(> (cadr x) (cadr y)) #t]\n           \
    \ [(< (cadr x) (cadr y)) #f]\n            [(> (car x) (car y)) #f]\n         \
    \   [(< (car x) (car y)) #t]\n            [else #f]))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmx_li7a3.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmx_li7a3.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (if (= (sum-digits a) (sum-digits\
    \ b))\n                   (< (index-of nums a) (index-of nums b))\n          \
    \         (< (sum-digits a) (sum-digits b))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprr1rthci.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprr1rthci.rkt:14:23\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(>\
    \ (cdr x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(>\
    \ (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdcjk02w.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqdcjk02w.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp85ghjij.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp85ghjij.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond\n      \
    \             [(< a-sum b-sum) #t]\n                   [(> a-sum b-sum) #f]\n\
    \                   [else (< (index-of nums a) (index-of nums b))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr3h2ulho.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr3h2ulho.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4i0zng7x.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4i0zng7x.rkt:14:19\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index-of x nums) (index-of y nums))])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6o7jq791.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6o7jq791.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (if (= x-sum y-sum)\n\
    \                (< (index nums x) (index nums y))\n                (< x-sum y-sum))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo7tskd1y.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo7tskd1y.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index nums x) (index nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfwl9pxg7.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpfwl9pxg7.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeowyq8nl.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpeowyq8nl.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             ((> x-sum y-sum) #t)\n                   ((< x-sum y-sum) #f)\n\
    \                   (else (< (index nums x) (index nums y))))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqvhor_6_.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqvhor_6_.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (a b)\n          (let ((a-sum (sum-digits\
    \ a))\n                (b-sum (sum-digits b)))\n            (if (= a-sum b-sum)\n\
    \                (< (index-of nums a) (index-of nums b))\n                (< a-sum\
    \ b-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx28_yjqk.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpx28_yjqk.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (cond\n                 [(=\
    \ (sum-digits x) (sum-digits y))\n                  (< (index-of x nums) (index-of\
    \ y nums))]\n                 [else\n                  (< (sum-digits x) (sum-digits\
    \ y))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpykoo2rkc.rkt:15:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpykoo2rkc.rkt:15:22\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4i0zng7x.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4i0zng7x.rkt:14:19\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(> (cdr x) (cdr y)) #t]\n            [(<\
    \ (cdr x) (cdr y)) #f]\n            [else (< (car x) (car y))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf657g2p1.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpf657g2p1.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond ((> a-sum\
    \ b-sum) #t)\n                       ((< a-sum b-sum) #f)\n                  \
    \     (else (< (list-ref nums a) (list-ref nums b))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphkhr01rc.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphkhr01rc.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((< x-sum y-sum) #f)\n                  \
    \     (else (< (index-of nums x) (index-of nums y))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7m3ej6p5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7m3ej6p5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (if (= a-sum b-sum)\n\
    \                     (< (index nums a) (index nums b))\n                    \
    \ (< a-sum b-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprb3m5fe8.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprb3m5fe8.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (n) (cons n (sum-digits n))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(> (cdr x) (cdr y)) #t]\n            [(<\
    \ (cdr x) (cdr y)) #f]\n            [else (< (car x) (car y))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpww9z3s07.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpww9z3s07.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (if (= (sum-digits a) (sum-digits\
    \ b))\n                   (< (index-of a nums) (index-of b nums))\n          \
    \         (< (sum-digits a) (sum-digits b))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp17iebsas.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp17iebsas.rkt:14:23\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of x nums) (index-of y nums))\n              \
    \       (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkxucue8o.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkxucue8o.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let* ([x-sum (sum-digits\
    \ x)]\n                 [y-sum (sum-digits y)])\n            (if (= x-sum y-sum)\n\
    \                (< (index-of x nums) (index-of y nums))\n                (< x-sum\
    \ y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkxaqegod.rkt:15:25: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkxaqegod.rkt:15:25\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(= (cdr x) (cdr y))\n             (< (car\
    \ x) (car y))]\n            [else\n             (< (cdr x) (cdr y))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6w872n80.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6w872n80.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index nums x) (index nums y))\n                    \
    \ (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5oaw9vya.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5oaw9vya.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((< x-sum y-sum) #f)\n                  \
    \     (else (< (index-of x nums) (index-of y nums))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxo7exnic.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxo7exnic.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cadr x) (cadr y)) #t]\n           \
    \ [(> (cadr x) (cadr y)) #f]\n            [(< (car x) (car y)) #t]\n         \
    \   [(> (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp98zr216s.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp98zr216s.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (< (sum-digits a) (sum-digits\
    \ b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4hf6ud_y.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4hf6ud_y.rkt:14:19\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [(< (list-ref nums x) (list-ref nums y)) #t]\n           \
    \        [else #f])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoeebh7gr.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpoeebh7gr.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (cond\n          \
    \    [(< x-sum y-sum) #t]\n              [(> x-sum y-sum) #f]\n              [(<\
    \ x y) #t]\n              [(> x y) #f])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe_6jvyf5.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpe_6jvyf5.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index nums x) (index nums y))\n                    \
    \ (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5oaw9vya.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5oaw9vya.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [else (< (index nums x) (index nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt3kssxq.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbt3kssxq.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (cond\n                 [(=\
    \ (sum-digits x) (sum-digits y))\n                  (< (index-of nums x) (index-of\
    \ nums y))]\n                 [else\n                  (< (sum-digits x) (sum-digits\
    \ y))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1i47w01t.rkt:15:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp1i47w01t.rkt:15:22\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(= x-sum y-sum) (< (index-of nums x)\
    \ (index-of nums y))]\n              [else #f])))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_s1sd23b.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_s1sd23b.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [(< x y) #t]\n                   [(> x y) #f])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx8fqitfn.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpx8fqitfn.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index-of nums x) (index-of nums y))])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphnkkbwgi.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphnkkbwgi.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons (sum-digits x) x)) nums)\n        (lambda\
    \ (a b)\n          (cond\n            [(< (car a) (car b)) #t]\n            [(>\
    \ (car a) (car b)) #f]\n            [else (< (cdr a) (cdr b))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph898pq0w.rkt:13:32: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmph898pq0w.rkt:13:32\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu9va98_5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu9va98_5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cadr x) (cadr y)) #t]\n           \
    \ [(> (cadr x) (cadr y)) #f]\n            [(< (car x) (car y)) #t]\n         \
    \   [(> (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp98zr216s.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp98zr216s.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of x nums) (index-of y nums))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy_k32ppc.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy_k32ppc.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (if (= (cdr x) (cdr y))\n              (< (car x) (car y))\n\
    \              (< (cdr x) (cdr y))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3iqb_ew4.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3iqb_ew4.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp85ghjij.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp85ghjij.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (a b)\n          (< (sum-digits a) (sum-digits\
    \ b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm598ewxs.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpm598ewxs.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (if (= x-sum y-sum)\n\
    \                (< (index-of nums x) (index-of nums y))\n                (< x-sum\
    \ y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkvgnuc1v.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkvgnuc1v.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp1g_r6og.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp1g_r6og.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (a b)\n          (let ((a-sum (sum-digits\
    \ a))\n                (b-sum (sum-digits b)))\n            (if (= a-sum b-sum)\n\
    \                (< (index nums a) (index nums b))\n                (< a-sum b-sum))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuhlsgk3f.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpuhlsgk3f.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (list-ref nums x) (list-ref nums y))])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprkkjgmrf.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprkkjgmrf.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of x nums) (index-of y nums))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy_k32ppc.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy_k32ppc.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((= x-sum y-sum) (< x y))\n             \
    \          (#t #f))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpob7ywgy1.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpob7ywgy1.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index-of nums x) (index-of nums y))])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphnkkbwgi.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphnkkbwgi.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeowyq8nl.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpeowyq8nl.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (cond [(> x-sum y-sum)\
    \ #t]\n                  [(< x-sum y-sum) #f]\n                  [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzxx573o7.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzxx573o7.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (if (= (sum-digits x) (sum-digits\
    \ y))\n                   (< (index-of x nums) (index-of y nums))\n          \
    \         (< (sum-digits x) (sum-digits y))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphd3u8hlw.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphd3u8hlw.rkt:14:23\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond\n      \
    \             [(< a-sum b-sum) #t]\n                   [(> a-sum b-sum) #f]\n\
    \                   [else (< (index-of nums a) (index-of nums b))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr3h2ulho.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr3h2ulho.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x)\n               (list x (sum-digits x)))\n \
    \            nums)\n        (lambda (x y)\n          (cond\n            [(< (cadr\
    \ x) (cadr y)) #t]\n            [(> (cadr x) (cadr y)) #f]\n            [(< (car\
    \ x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1dy8ku4w.rkt:14:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp1dy8ku4w.rkt:14:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(>\
    \ (cdr x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(>\
    \ (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdcjk02w.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqdcjk02w.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             ((> x-sum y-sum) #t)\n                   ((< x-sum y-sum) #f)\n\
    \                   (else\n                    (let ((x-index (index-of nums x))\n\
    \                          (y-index (index-of nums y)))\n                    \
    \  (< x-index y-index))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvs8y3tb3.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvs8y3tb3.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index nums x) (index nums y))\n                    \
    \ (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5oaw9vya.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5oaw9vya.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (n) (list n (sum-digits n))) nums)\n        (lambda\
    \ (n1 n2) (< (cadr n1) (cadr n2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph6nnayqa.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmph6nnayqa.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (if (= x-sum y-sum)\n\
    \                (< (index nums x) (index nums y))\n                (< x-sum y-sum))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf3o5rxi2.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpf3o5rxi2.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (a b)\n          (< (sum-digits a) (sum-digits\
    \ b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm598ewxs.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpm598ewxs.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvuqzwq80.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvuqzwq80.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb_fabdv_.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpb_fabdv_.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu9va98_5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu9va98_5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9pjqqlwt.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9pjqqlwt.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (or (< (sum-digits x) (sum-digits\
    \ y))\n                   (and (= (sum-digits x) (sum-digits y))\n           \
    \             (< (index-of x nums) (index-of y nums)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppoqddqlo.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmppoqddqlo.rkt:14:23\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu9va98_5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu9va98_5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cadr x) (cadr y)) #t]\n           \
    \ [(> (cadr x) (cadr y)) #f]\n            [(< (car x) (car y)) #t]\n         \
    \   [(> (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp98zr216s.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp98zr216s.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (cond\n          \
    \    [(< x-sum y-sum) #t]\n              [(> x-sum y-sum) #f]\n              [(<\
    \ x y) #t]\n              [(> x y) #f]\n              [else #f])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3ek_pgak.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3ek_pgak.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond\n      \
    \             [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n\
    \                   [else (< (index-of nums a) (index-of nums b))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp01qvs30v.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp01qvs30v.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp1g_r6og.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp1g_r6og.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((< x-sum y-sum) #f)\n                  \
    \     (else (< (index-of nums x) (index-of nums y))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7m3ej6p5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7m3ej6p5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(>\
    \ (cdr x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(>\
    \ (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdcjk02w.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqdcjk02w.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp1g_r6og.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp1g_r6og.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (list-ref nums (index nums x))\n                       (list-ref nums (index\
    \ nums y)))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp80_5la8r.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp80_5la8r.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (num) (cons (sum-digits num) num)) nums)\n     \
    \   (lambda (a b)\n          (cond\n            [(< (car a) (car b)) #t]\n   \
    \         [(> (car a) (car b)) #f]\n            [else (< (cdr a) (cdr b))]))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe43sqj92.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpe43sqj92.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond\n      \
    \             [(< a-sum b-sum) #t]\n                   [(> a-sum b-sum) #f]\n\
    \                   [else (< (index-of nums a) (index-of nums b))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr3h2ulho.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr3h2ulho.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x)\n               (cons x (sum-digits x)))\n \
    \            nums)\n        (lambda (x y)\n          (cond\n            [(< (cdr\
    \ x) (cdr y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n            [else (<\
    \ (car x) (car y))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplxy8joxv.rkt:14:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplxy8joxv.rkt:14:24\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(< x-sum y-sum) #t]\n              [(> x-sum y-sum) #f]\n              [(<\
    \ (index-of x nums) (index-of y nums)) #t]\n              [else #f])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkhf6g1bv.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkhf6g1bv.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (cond\n                 [(=\
    \ (sum-digits a) (sum-digits b))\n                  (< (index-of a nums) (index-of\
    \ b nums))]\n                 [else\n                  (< (sum-digits a) (sum-digits\
    \ b))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdejambj0.rkt:15:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdejambj0.rkt:15:22\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(>\
    \ (cdr x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(>\
    \ (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdcjk02w.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqdcjk02w.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond [(< x-sum\
    \ y-sum) #t]\n                       [(> x-sum y-sum) #f]\n                  \
    \     [else (< (index-of nums x) (index-of nums y))])))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmtksihal.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmtksihal.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp85ghjij.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp85ghjij.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ([a-sum (sum-digits a)]\n\
    \                     [b-sum (sum-digits b)])\n                 (if (= a-sum b-sum)\n\
    \                     (< (index-of nums a) (index-of nums b))\n              \
    \       (< a-sum b-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu2oy3sf0.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu2oy3sf0.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (if (= (cadr x) (cadr y))\n              (< (car x) (car y))\n\
    \              (< (cadr x) (cadr y))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyevnqwnh.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpyevnqwnh.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((< x-sum\
    \ y-sum) #t)\n                       ((> x-sum y-sum) #f)\n                  \
    \     (else (< (index-of x nums) (index-of y nums))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwyhxntih.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwyhxntih.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb_fabdv_.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpb_fabdv_.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (if (= (cdr x) (cdr y))\n                         (< (car x) (car y))\n\
    \                         (< (cdr x) (cdr y))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp57wyy0z7.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp57wyy0z7.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        <\n\
    \        (lambda (x y) (or (and (eq? (car x) (car y))\n                      \
    \         (< (cdr x) (cdr y)))\n                          (< (cdr x) (cdr y))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0rqmuzaj.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0rqmuzaj.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((< x-sum y-sum) #f)\n                  \
    \     (else (< (index nums x) (index nums y))))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbupvp0j9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbupvp0j9.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp70eokheu.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp70eokheu.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb_fabdv_.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpb_fabdv_.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (if (= (sum-digits x)\
    \ (sum-digits y))\n              (< (index-of nums x) (index-of nums y))\n   \
    \           (< (sum-digits x) (sum-digits y))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdr31oldd.rkt:15:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdr31oldd.rkt:15:18\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond\n      \
    \             [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n\
    \                   [else (< (index nums a) (index nums b))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps1rt577a.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmps1rt577a.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (n) (cons n (sum-digits n))) nums)\n        (lambda\
    \ (a b)\n          (cond\n            [(< (cdr a) (cdr b)) #t]\n            [(>\
    \ (cdr a) (cdr b)) #f]\n            [else (< (car a) (car b))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5gncf4nw.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5gncf4nw.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of x nums) (index-of y nums))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy_k32ppc.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy_k32ppc.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (index-of x nums) < (index-of y nums)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1jd60cor.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp1jd60cor.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpley0w2zk.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpley0w2zk.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(< x-sum y-sum) #t]\n              [(> x-sum y-sum) #f]\n              [(<\
    \ (index nums x) (index nums y)) #t]\n              [else #f])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpog0geyxx.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpog0geyxx.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((= x-sum\
    \ y-sum)\n                        (< (index nums x) (index nums y)))\n       \
    \                ((< x-sum y-sum) #t)\n                       (else #f))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7bprwod8.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7bprwod8.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index nums x) (index nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfwl9pxg7.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpfwl9pxg7.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (if (= (sum-digits x)\
    \ (sum-digits y))\n              (< (index-of x nums) (index-of y nums))\n   \
    \           (< (sum-digits x) (sum-digits y))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpisl4sr5a.rkt:15:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpisl4sr5a.rkt:15:18\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (if (= x-sum y-sum)\n\
    \                (< (index-of nums x) (index-of nums y))\n                (< x-sum\
    \ y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkvgnuc1v.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkvgnuc1v.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (num) (cons num (sum-digits num))) nums)\n     \
    \   (lambda (num1 num2) (< (cdr num1) (cdr num2)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptmshojaj.rkt:13:38: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmptmshojaj.rkt:13:38\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond ((> x-sum y-sum)\
    \ #t)\n                  ((< x-sum y-sum) #f)\n                  (else (< (index-of\
    \ nums x) (index-of nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpygzmp53p.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpygzmp53p.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (if (= a-sum b-sum)\n\
    \                     (< (index nums a) (index nums b))\n                    \
    \ (< a-sum b-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprb3m5fe8.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprb3m5fe8.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n\
    \                     [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwjbsq4tj.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwjbsq4tj.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond\n      \
    \             [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n\
    \                   [else\n                    (let ((a-index (index-of nums a))\n\
    \                          (b-index (index-of nums b)))\n                    \
    \  (< a-index b-index))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpebg7ecxr.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpebg7ecxr.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (or (< (cadr x) (cadr y))\n                          (and (= (cadr x)\
    \ (cadr y))\n                               (< (car x) (car y)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0y673shv.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0y673shv.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp85ghjij.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp85ghjij.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp1g_r6og.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp1g_r6og.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (a b)\n          (< (sum-digits a) (sum-digits\
    \ b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm598ewxs.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpm598ewxs.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (or (< (cadr x) (cadr y))\n                          (and (= (cadr x)\
    \ (cadr y))\n                               (< (car x) (car y)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0y673shv.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0y673shv.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(>\
    \ (cdr x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(>\
    \ (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdcjk02w.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqdcjk02w.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb_fabdv_.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpb_fabdv_.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ([a-sum (sum-digits a)]\n\
    \                     [b-sum (sum-digits b)])\n                 (cond\n      \
    \             [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n\
    \                   [else (< (index-of nums a) (index-of nums b))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp662cbpru.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp662cbpru.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0zxvm089.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0zxvm089.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n\
    \                   [else (< (index-of nums x) (index-of nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu9va98_5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu9va98_5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index-of x nums) (index-of y nums))])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9uji36yl.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9uji36yl.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index-of x nums) (index-of y nums))])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9uji36yl.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9uji36yl.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond\n      \
    \             [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n\
    \                   [else (< (list-ref nums x) (list-ref nums y))])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9wjakc9f.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9wjakc9f.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (cond\n          \
    \    [(> x-sum y-sum) #t]\n              [(< x-sum y-sum) #f]\n              [else\
    \ (< (index nums x) (index nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqmv_ct3u.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqmv_ct3u.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (cond ((> x-sum\
    \ y-sum) #t)\n                       ((< x-sum y-sum) #f)\n                  \
    \     (else (< (index nums x) (index nums y))))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbupvp0j9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbupvp0j9.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (if (= x-sum y-sum)\n\
    \                (< (index-of nums x) (index-of nums y))\n                (< x-sum\
    \ y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9rybtv4n.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9rybtv4n.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(> (cdr x) (cdr y)) #t]\n            [(<\
    \ (cdr x) (cdr y)) #f]\n            [else (< (car x) (car y))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf657g2p1.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpf657g2p1.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (if (= a-sum b-sum)\n\
    \                     (< (index-of nums a) (index-of nums b))\n              \
    \       (< a-sum b-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7t5j2s02.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7t5j2s02.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(= (cdr x) (cdr y))\n             (< (car\
    \ x) (car y))]\n            [else\n             (< (cdr x) (cdr y))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6w872n80.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6w872n80.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219005
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (or (< (cadr x) (cadr y))\n                          (and (= (cadr x)\
    \ (cadr y))\n                               (< (car x) (car y)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0y673shv.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0y673shv.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cadr x) (cadr y)) #t]\n           \
    \ [(> (cadr x) (cadr y)) #f]\n            [(< (car x) (car y)) #t]\n         \
    \   [(> (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp98zr216s.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp98zr216s.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(>\
    \ (cdr x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(>\
    \ (car x) (car y)) #f]\n            [else #f]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdcjk02w.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqdcjk02w.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits\
    \ x))\n                (y-sum (sum-digits y)))\n            (cond ((> x-sum y-sum)\
    \ #t)\n                  ((< x-sum y-sum) #f)\n                  (else (< (index-of\
    \ nums x) (index-of nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpygzmp53p.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpygzmp53p.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219007
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n        (lambda\
    \ (x y) (or (< (cadr x) (cadr y))\n                          (and (= (cadr x)\
    \ (cadr y))\n                               (< (car x) (car y)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0y673shv.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0y673shv.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (or (< (sum-digits x) (sum-digits\
    \ y))\n                   (and (= (sum-digits x) (sum-digits y))\n           \
    \             (< (index-of x nums) (index-of y nums)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppoqddqlo.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmppoqddqlo.rkt:14:23\n"
  stdout: ''
  timestamp: 1660219006
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot8sybty.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpot8sybty.rkt:15:14\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let ([x-sum (sum-digits\
    \ x)]\n                [y-sum (sum-digits y)])\n            (cond\n          \
    \    [(< x-sum y-sum) #t]\n              [(> x-sum y-sum) #f]\n              [(<\
    \ (list-ref nums (position x nums))\n                  (list-ref nums (position\
    \ y nums))) #t]\n              [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7rvvf4ku.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7rvvf4ku.rkt:15:24\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (let* ([x-sum (sum-digits\
    \ x)]\n                 [y-sum (sum-digits y)])\n            (if (= x-sum y-sum)\n\
    \                (< (index nums x) (index nums y))\n                (< x-sum y-sum))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_1eqk5mj.rkt:15:25: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_1eqk5mj.rkt:15:25\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda\
    \ (x y)\n          (if (= (cdr x) (cdr y))\n              (< (car x) (car y))\n\
    \              (< (cdr x) (cdr y))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3iqb_ew4.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3iqb_ew4.rkt:13:34\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n\
    \                     (b-sum (sum-digits b)))\n                 (cond ((> a-sum\
    \ b-sum) #t)\n                       ((< a-sum b-sum) #f)\n                  \
    \     (else (< (index-of nums a) (index-of nums b))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6gfkz6i9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6gfkz6i9.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219003
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums\n        (lambda (x y)\n          (or (< (sum-digits x)\
    \ (sum-digits y))\n              (and (= (sum-digits x) (sum-digits y))\n    \
    \               (< (index-of nums x) (index-of nums y)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkk6b9b05.rkt:15:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkk6b9b05.rkt:15:18\n"
  stdout: ''
  timestamp: 1660219008
- exit_code: 1
  program: "#lang racket\n\n#| Write a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.\nFor example:\n>>> (order_by_points (list 1 11 -1 -11 -12))\n\
    (list -1 -11 1 -12 11)\n>>> (order_by_points (list ))\n(list )|#\n(define (order_by_points\
    \ nums)\n  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n\
    \                     (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp85ghjij.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp85ghjij.rkt:14:29\n"
  stdout: ''
  timestamp: 1660219004
