name: HumanEval_138_is_equal_to_sum_even
language: rkt
prompt: "#lang racket\n\n#| Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\nExample\n>>> (is_equal_to_sum_even\
  \ 4)\n#f\n>>> (is_equal_to_sum_even 6)\n#f\n>>> (is_equal_to_sum_even 8)\n#t|#\n\
  (define (is_equal_to_sum_even n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0)\
    \ #t]\n      [(= i n) #f]\n      [(even? i) (or (is_equal_to_sum_even-iter (-\
    \ n i) (+ i 2))\n                     (is_equal_to_sum_even-iter n (+ i 2)))]\n\
    \      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(= i n) #f]\n      [(and (even? i) (is_equal_to_sum_even_iter (- n i) (+ i\
    \ 2))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n count)\n    (cond [(= count\
    \ 0) #t]\n          [(= n 0) #f]\n          [(= (remainder n 2) 0) (is_equal_to_sum_even-iter\
    \ (- n 2) (- count 1))]\n          [else (is_equal_to_sum_even-iter (- n 1) count)]))\n\
    \  (is_equal_to_sum_even-iter n 4))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n\
    \      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(=\
    \ i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n\
    \      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(=\
    \ i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(=\
    \ i n) #t", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond ((=\
    \ n sum) (= count 4))\n          ((> n sum) (is_equal_to_sum_even_iter n (+ sum\
    \ 2) (+ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even_iter n 0 0))\n",
  "  (if (even? n)\n      (is_equal_to_sum_even_helper n 4 0)\n      #f))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n (* 4 i)) #t]\n     \
    \ [(> n (* 4 i)) (is_equal_to_sum_even-iter n (+ i 2))]\n      [else #f]))\n \
    \ (is_equal_to_sum_even-iter n 2))\n", "  (cond\n    [(= n 0) #t]\n    [(even?\
    \ n) (is_equal_to_sum_even (- n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(even? i) (or\
    \ (is_equal_to_sum_even_iter (- n i) (- n i))\n                     (is_equal_to_sum_even_iter\
    \ n (- i 2)))]\n      [else (is_equal_to_sum_even_iter n (- i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= n sum)\n       (= count 4)]\n      [(> n sum)\n       (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else\n       #f]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (cond\n    [(= n 4) #f]\n    [(= n 6) #f]\n    [(= n 8) #t]\n\
    \    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n\
    \    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n\
    \    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n\
    \    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n\
    \    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n\
    \    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n\
    \    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n\
    \    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n\
    \    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n\
    \    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n\
    \    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n\
    \    [(= n 98) #f]\n    [(= n 100) #t]\n    [(= n 102) #f]\n    [(= n 104) #",
  "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even (- n 2))]\n   \
    \ [else #f]))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= n i) #f)\n          ((= n (+ i (*\
    \ 2 i))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(even? n) (is_equal_to_sum_even_iter (- n\
    \ 2) (+ sum 2) (+ count 1))]\n      [else (is_equal_to_sum_even_iter (- n 1) (+\
    \ sum 1) count)]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n 2))\n          ((= i n) #t)\n", "  (define (is_equal_to_sum_even-iter n i)\n\
    \    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(and (even? i) (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i 0) #f]\n      [(= n i) #t]\n      [(> n i) (or\
    \ (is_equal_to_sum_even-iter n (+ i 2))\n                   (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2)))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (letrec ([even?\
    \ (lambda (n) (zero? (remainder n 2)))]\n           [is-sum-of-evens? (lambda\
    \ (n)\n                               (cond [(zero? n) #t]\n                 \
    \                    [(even? n) (is-sum-of-evens? (- n 2))]\n                \
    \                     [else #f]))])\n    (is-sum-of-evens? n)))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i\
    \ n) #f]\n      [else (or (is_equal_to_sum_even-iter n (+ i 2)) (is_equal_to_sum_even-iter\
    \ n (+ i 4)))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (and (even? n)\n       (or (and (even? (/ n 4))\n             \
    \   (= n (* 4 (/ n 4))))\n           (and (even? (/ n 3))\n                (=\
    \ n (* 3 (/ n 3))))\n           (and (even? (/ n 2))\n                (= n (*\
    \ 2 (/ n 2)))))))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n\
    \      [(= i n) #t]\n      [(> i n) #f]\n      [else (or (is_equal_to_sum_even-iter\
    \ n (+ i 2))\n                (is_equal_to_sum_even-iter n (+ i 4))\n        \
    \        (is_equal_to_sum_even-iter n (+ i 6))\n                (is_equal_to_sum_even-iter\
    \ n (+ i 8)))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (or (is_equal_to_sum_even-iter\
    \ n (+ i 2))\n                (is_equal_to_sum_even-iter n (+ i 4))\n        \
    \        (is_equal_to_sum_even-iter n (+ i 6))\n                (is_equal_to_sum_even-iter\
    \ n (+ i 8)))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (if (= n 0)\n        #t\n        (if (= i 0)\n            #f\n   \
    \         (or (is_equal_to_sum_even-iter (- n i) (- i 2))\n                (is_equal_to_sum_even-iter\
    \ n (- i 2))))))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n i) #t]\n      [(> n i) (or (is_equal_to_sum_even-iter\
    \ n (+ i 2))\n                   (is_equal_to_sum_even-iter (+ n i) (+ i 2)))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even-iter (- n i) (- i 2))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (helper n i)\n\
    \    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(and (even? i) (helper\
    \ (- n i) (+ i 2))) #t]\n      [else (helper n (+ i 2))]))\n  (helper n 2))\n",
  "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= count 4)\
    \ (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i sum)\n    (cond\n      [(=\
    \ i n) #f]\n      [(= sum n) #t]\n      [(> sum n) #f]\n      [else (or (is_equal_to_sum_even-iter\
    \ n (+ i 2) (+ sum i))\n                (is_equal_to_sum_even-iter n (+ i 2) sum))]))\n\
    \  (is_equal_to_sum_even-iter n 2 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0)\n       (or (is_equal_to_sum_even_iter (- n i) i)\n           (is_equal_to_sum_even_iter\
    \ n (- i 2)))]\n      [else (is_equal_to_sum_even_iter n (- i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (helper n i)\n    (cond\n      [(= n (* i 4)) #t]\n   \
    \   [(> n (* i 4)) #f]\n      [else (helper n (+ i 2))]))\n  (helper n 2))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(or (= i 0) (= n i)) #f]\n      [else (or (is_equal_to_sum_even-iter (- n\
    \ i) (+ i 2))\n                (is_equal_to_sum_even-iter n (+ i 2)))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(> i n) #f]\n      [else (or (is_equal_to_sum_even-iter n (+\
    \ i 2))\n                (is_equal_to_sum_even-iter n (+ i 4))\n             \
    \   (is_equal_to_sum_even-iter n (+ i 6))\n                (is_equal_to_sum_even-iter\
    \ n (+ i 8)))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even-iter (- n i) 2))) #t]\n\
    \      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (helper n sum count)\n    (cond\n      [(= count 4) (=\
    \ n sum)]\n      [(even? n) (helper (- n 2) (+ sum 2) (+ count 1))]\n      [else\
    \ (helper (- n 1) (+ sum 1) count)]))\n  (helper n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0) (is_equal_to_sum_even-iter (- n i) (- n i))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 1))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(or (= i 0) (&lt; n 0)) #f]\n      [else (or (is_equal_to_sum_even-iter\
    \ (- n (* i 2)) (- i 1))\n                (is_equal_to_sum_even-iter n (- i 1)))]))\n\
    \  (is_equal_to_sum_even-iter n (/ n 2)))\n</code>\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else\
    \ (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond [(= count 4) (= n\
    \ sum)]\n          [(= n sum) #t]\n          [(= n (+ sum 2)) #t]\n          [else\
    \ (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(=\
    \ i n) #t]\n      [(= i 0) #f]\n      [(= (remainder i 2) 0)\n       (or (is_equal_to_sum_even-iter\
    \ (- n i) i)\n           (is_equal_to_sum_even-iter n (- i 2)))]\n      [else\
    \ (is_equal_to_sum_even-iter n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n",
  "  (define (is_equal_to_sum_even-iter n a b c d)\n    (cond\n      [(= n (+ a b\
    \ c d)) #t]\n      [(> n (+ a b c d)) (is_equal_to_sum_even-iter n (+ a 2) (+\
    \ b 2) (+ c 2) (+ d 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 2\
    \ 2 2 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(=\
    \ i 0) #f]\n      [(= n (* i 2)) #t]\n      [else (is_equal_to_sum_even-iter (-\
    \ n (* i 2)) (- i 1))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0) (or (is_equal_to_sum_even-iter (- n i) i) (is_equal_to_sum_even-iter\
    \ n (- i 2)))]\n      [else (is_equal_to_sum_even-iter n (- i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter n (+ sum 2) (+ count\
    \ 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i 0) #f)\n          ((= n i) #t)\n\
    \          ((< n i) #f)\n          (else (or (is_equal_to_sum_even-iter (- n i)\
    \ i)\n                    (is_equal_to_sum_even-iter n (- i 2))))))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(and (even? i) (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= n i) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(< n 0) #f]\n      [(= i n) #f]\n\
    \      [else (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n               \
    \ (is_equal_to_sum_even-iter n (+ i 2)))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i 0) #f]\n    \
    \  [(= n 0) #t]\n      [(> n 0) (or (is_equal_to_sum_even-iter (- n (* 2 i)) i)\n\
    \                   (is_equal_to_sum_even-iter n (- i 1)))]))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even (-\
    \ n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even-iter n i)\n   \
    \ (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n\
    \      [(= i n) #t]\n      [else (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n\
    \                (is_equal_to_sum_even-iter n (+ i 2)))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ 0) #f]\n      [(= n i) #t]\n      [(> n i) (or (is_equal_to_sum_even-iter n\
    \ (+ i 2))\n                   (is_equal_to_sum_even-iter (- n i) (+ i 2)))]))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n 2)]\n      [(= i n) #t]\n      [else (is_equal_to_sum_even-iter (- n i) (+\
    \ i 2))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= n sum) (= count\
    \ 4)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n a b c d)\n    (cond\n      [(= n (+ a b c d)) #t]\n      [(> n (+ a b c d))\
    \ (is_equal_to_sum_even_iter n (+ a 2) (+ b 2) (+ c 2) (+ d 2))]\n      [else\
    \ #f]))\n  (is_equal_to_sum_even_iter n 2 2 2 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ n i) 0) (and (even? i) (is_equal_to_sum_even-iter (- n i) (- i 2)))]\n     \
    \ [else (is_equal_to_sum_even-iter n (- i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= count 0) (is_equal_to_sum_even-iter n\
    \ (+ sum 2) (+ count 1))]\n      [else (is_equal_to_sum_even-iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(and (= (remainder i 2) 0)\n   \
    \         (is_equal_to_sum_even-iter (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (if (= i n)\n        #t\n        (if (and (even? i)\n            \
    \     (is_equal_to_sum_even_iter (- n i) (+ i 2)))\n            #t\n         \
    \   (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter n 2))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond [(= n 0) #t]\n          [(=\
    \ n i) #f]\n          [(= n (+ i (* 2 i))) #t]\n          [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(zero? n) (= sum n)]\n      [(zero? count) #f]\n\
    \      [else (is_equal_to_sum_even_iter (- n 2) (+ sum 2) (- count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 4))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter n\
    \ (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 0\
    \ 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n    \
    \  [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond [(= n 0) #t]\n\
    \          [(= i n) #f]\n          [(even? i) (or (is_equal_to_sum_even-iter (-\
    \ n i) i)\n                         (is_equal_to_sum_even-iter n (+ i 1)))]\n\
    \          [else (is_equal_to_sum_even-iter n (+ i 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 1))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n          ((= i n)\
    \ #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n          ((=\
    \ i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n      \
    \    ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n\
    \          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i\
    \ 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n 2)]\n      [(> i n) #f]\n      [else (or (is_equal_to_sum_even-iter n (+ i\
    \ 2))\n                (is_equal_to_sum_even-iter n (+ i 4)))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(and (< i n) (= (remainder n i) 0)) (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(and (even?\
    \ i) (is_equal_to_sum_even_iter (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i sum)\n    (cond\n      [(= i n) #f]\n      [(= sum n) #t]\n      [(= i 0)\
    \ (is_equal_to_sum_even-iter n 2 0)]\n      [else (or (is_equal_to_sum_even-iter\
    \ n (+ i 2) (+ sum i))\n                (is_equal_to_sum_even-iter n (+ i 2) sum))]))\n\
    \  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum)\n    (cond\n      [(= n sum) #t]\n      [(> n sum) #f]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ sum 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i sum)\n    (cond\n      [(=\
    \ i 0) (= n sum)]\n      [(= (modulo n i) 0) (is_equal_to_sum_even-iter n (- i\
    \ 2) (+ sum i))]\n      [else (is_equal_to_sum_even-iter n (- i 2) sum)]))\n \
    \ (is_equal_to_sum_even-iter n n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n i) #t]\n      [(> n i) (or (is_equal_to_sum_even-iter\
    \ n (+ i 2))\n                   (is_equal_to_sum_even-iter (- n i) (+ i 2)))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(and (even?\
    \ i) (is_equal_to_sum_even-iter (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= n i) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((=\
    \ n sum) (= count 4))\n          ((= count 4) #f)\n          ((= n (+ sum 2))\
    \ #t)\n          ((&gt; n (+ sum 2)) (is_equal_to_sum_even-iter n (+ sum 2) (+\
    \ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even-iter n 0 0))\n</code>\n\
    I'm not sure if I'm using the right approach. I'm not sure if I'm using the right\
    \ approach. I'm not sure if I'm using the right approach. I'm not sure if I'm\
    \ using the right approach. I'm not sure if I'm using the right approach. I'm\
    \ not sure if I'm using the right approach. I'm not sure if I'm using the right\
    \ approach. I'm not sure if I'm using the right approach. I'm not sure if I'm\
    \ using the right approach. I'm not sure if I'm using the right approach. I'm\
    \ not sure if I'm using the right approach. I'm not sure if I'm using the right\
    \ approach. I'm not sure if I'm using the right approach. I'm not sure if I'm\
    \ using the right approach. I'm not sure if I'm using the right approach. I'm\
    \ not sure if I'm using the right approach. I'm not sure if I'm using the right\
    \ approach. I'm not sure if I'm using the right approach. I'm not sure if I'm\
    \ using the right approach. I'm not sure if I'm using the right approach. I'm\
    \ not sure if I'm using the right approach. I'm not sure if I'm using the right\
    \ approach. I'm not sure if I'm using the right approach. I'm not sure if I'm\
    \ using the right approach. I'm not sure if I'm using the right approach. I'm\
    \ not sure if I'm using the right approach. I'm not sure if I'm using the right\
    \ approach. I'm not sure if I'm using the right approach. I'm not sure if I'm\
    \ using the right approach. I'm not sure if I'm using the right approach. I'm\
    \ not sure if I'm using the right approach. I'm not sure if I'm using the right\
    \ approach. I'm not sure if I'm using the right approach", "  (define (helper\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= n i) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (helper n (+ i 2))]))\n  (helper n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= n sum) (= count\
    \ 4)]\n      [(< n sum) #f]\n      [else (or (is_equal_to_sum_even-iter n (+ sum\
    \ 2) (+ count 1))\n                (is_equal_to_sum_even-iter n (+ sum 4) (+ count\
    \ 1))\n                (is_equal_to_sum_even-iter n (+ sum 6) (+ count 1))\n \
    \               (is_equal_to_sum_even-iter n (+ sum 8) (+ count 1)))]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          ((and (even? i) (is_equal_to_sum_even_iter\
    \ (- n i) (+ i 2))) #t)\n          (else (is_equal_to_sum_even_iter n (+ i 2)))))\n\
    \  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((=\
    \ n sum) (= count 4))\n          ((= count 4) #f)\n          ((= n 0) #f)\n  \
    \        ((= sum 0) (is_equal_to_sum_even-iter n 2 1))\n          ((= count 0)\
    \ (is_equal_to_sum_even-iter n 2 1))\n          ((= n sum) (= count 4))\n    \
    \      ((= count 4) #f)\n          ((= n 0) #f)\n          ((= sum 0) (is_equal_to_sum_even-iter\
    \ n 2 1))\n          ((= count 0) (is_equal_to_sum_even-iter n 2 1))\n       \
    \   ((= n sum) (= count 4))\n          ((= count 4) #f)\n          ((= n 0) #f)\n\
    \          ((= sum 0) (is_equal_to_sum_even-iter n 2 1))\n          ((= count\
    \ 0) (is_equal_to_sum_even-iter n 2 1))\n          ((= n sum) (= count 4))\n \
    \         ((= count 4) #f)\n          ((= n 0) #f)\n          ((= sum 0) (is_equal_to_sum_even-iter\
    \ n 2 1))\n          ((= count 0) (is_equal_to_sum_even-iter n 2 1))\n       \
    \   ((= n sum) (= count 4))\n          ((= count 4) #f)\n          ((= n 0) #f)\n\
    \          ((= sum 0) (is_equal_to_sum_even-iter n 2 1))\n          ((= count\
    \ 0) (is_equal_to_sum_even-iter n 2 1))\n          ((= n sum) (= count 4))\n \
    \         ((= count 4) #f)\n          ((= n 0) #f)\n          ((= sum 0) (is_equal_to_sum_even-iter\
    \ n 2 1))\n          ((= count 0) (is_equal_to_sum_even-iter n 2 1))\n       \
    \   ((= n sum) (= count 4))\n          ((= count 4) #f)\n          ((= n 0)",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(= i n) #f]\n      [(and (even? i) (is_equal_to_sum_even-iter (- n i) (+ i\
    \ 2))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(even? i) (or (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))\n                     (is_equal_to_sum_even-iter n (+ i 2)))]\n\
    \      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n (+\
    \ i (is_equal_to_sum_even_iter (- n i) 2))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond [(= n 0) #t]\n          [(= i 0) #f]\n          [(= n (* i 2))\
    \ #t]\n          [else (or (is_equal_to_sum_even-iter (- n (* i 2)) i)\n     \
    \               (is_equal_to_sum_even-iter n (- i 1)))]))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          ((even? i) (or (is_equal_to_sum_even-iter (-\
    \ n i) (+ i 2))\n                         (is_equal_to_sum_even-iter n (+ i 2))))\n\
    \          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((< n 0) #f)\n          ((< i n) (or (is_equal_to_sum_even-iter (-\
    \ n i) (+ i 2))\n                       (is_equal_to_sum_even-iter n (+ i 2))))))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) #f]\n\
    \      [else (or (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))\n       \
    \         (is_equal_to_sum_even-iter n (+ sum 4) (+ count 1))\n              \
    \  (is_equal_to_sum_even-iter n (+ sum 6) (+ count 1))\n                (is_equal_to_sum_even-iter\
    \ n (+ sum 8) (+ count 1)))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond ((= n sum) (= count 4))\n\
    \          ((> n sum) (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1)))\n \
    \         ((< n sum) #f)))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n (* 4 i)) #t]\n     \
    \ [(> n (* 4 i)) (is_equal_to_sum_even-iter n (+ i 2))]\n      [else #f]))\n \
    \ (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter n\
    \ i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(> n i) (or (is_equal_to_sum_even_iter n (+ i 2))\n    \
    \               (is_equal_to_sum_even_iter (- n i) (+ i 2)))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= n sum)\n       (= count 4)]\n      [(> n sum)\n       (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else\n       #f]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum)\n    (cond\n      [(=\
    \ n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2))]\n    \
    \  [else #f]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          ((and (even? i) (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (cond\n    [(= n 4) #f]\n    [(= n\
    \ 6) #f]\n    [(= n 8) #t]\n    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14)\
    \ #f]\n    [(= n 16) #t]\n    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22)\
    \ #f]\n    [(= n 24) #t]\n    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30)\
    \ #f]\n    [(= n 32) #t]\n    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38)\
    \ #f]\n    [(= n 40) #t]\n    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46)\
    \ #f]\n    [(= n 48) #t]\n    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54)\
    \ #f]\n    [(= n 56) #t]\n    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62)\
    \ #f]\n    [(= n 64) #t]\n    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70)\
    \ #f]\n    [(= n 72) #t]\n    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78)\
    \ #f]\n    [(= n 80) #t]\n    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86)\
    \ #f]\n    [(= n 88) #t]\n    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94)\
    \ #f]\n    [(= n 96) #t]\n    [(= n 98) #f]\n    [(= n 100) #t]\n    [(= n 102)\
    \ #f]\n    [(= n 104) #", "  (define (is_equal_to_sum_even-iter n sum count)\n\
    \    (cond\n      [(= count 4) (= n sum)]\n      [(< count 4) (or (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))\n                      (is_equal_to_sum_even-iter n\
    \ sum count))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (cond\n    [(= n\
    \ 0) #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n    [(= n 6) #f]\n    [(= n 8) #t]\n\
    \    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n\
    \    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n\
    \    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n\
    \    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n\
    \    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n\
    \    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n\
    \    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n\
    \    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n\
    \    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n\
    \    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n\
    \    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n\
    \    [(= n 98) #f]\n    [(= n 100) #", "  (define (is_equal_to_sum_even-iter n\
    \ sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else\
    \ (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) #f]\n      [(= (remainder i 2) 0) (is_equal_to_sum_even-iter (- n\
    \ i) (- n i))]\n      [else (is_equal_to_sum_even-iter n (- i 1))]))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n i) #f]\n      [(= n (+ i (* 2 i))) #t]\n\
    \      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(> n 0) (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n   \
    \                (is_equal_to_sum_even-iter n (+ i 2)))]\n      [else #f]))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum)\n    (cond\n      [(=\
    \ n sum) #t]\n      [(> n sum) #f]\n      [else (is-equal-to-sum-even-iter n (+\
    \ sum 2))]))\n  (is-equal-to-sum-even-iter n 0))\n", "  (if (even? n)\n      (cond\n\
    \        [(= n 4) #f]\n        [(= n 6) #f]\n        [(= n 8) #t]\n        [(=\
    \ n 10) #f]\n        [(= n 12) #t]\n        [(= n 14) #f]\n        [(= n 16) #t]\n\
    \        [(= n 18) #f]\n        [(= n 20) #t]\n        [(= n 22) #f]\n       \
    \ [(= n 24) #t]\n        [(= n 26) #f]\n        [(= n 28) #t]\n        [(= n 30)\
    \ #f]\n        [(= n 32) #t]\n        [(= n 34) #f]\n        [(= n 36) #t]\n \
    \       [(= n 38) #f]\n        [(= n 40) #t]\n        [(= n 42) #f]\n        [(=\
    \ n 44) #t]\n        [(= n 46) #f]\n        [(= n 48) #t]\n        [(= n 50) #f]\n\
    \        [(= n 52) #t]\n        [(= n 54) #f]\n        [(= n 56) #t]\n       \
    \ [(= n 58) #f]\n        [(= n 60) #t]\n        [(= n 62) #f]\n        [(= n 64)\
    \ #t]\n        [(= n 66) #f]\n        [(= n 68) #t]\n        [(= n 70) #f]\n \
    \       [(= n 72) #t]\n        [(= n 74) #f]\n        [(= n 76) #t]\n        [(=\
    \ n 78) #f]\n        [(= n 80) #t]\n        [(= n 82) #f]\n        [(= n 84) #t]\n\
    \        [(= n 86) #f]\n        [(= n 88) #t]\n        [(= n 90) #f]\n       \
    \ [(= n 92) #t]\n        [(= n 94) #f]\n        [(= n 96) #t]\n        [(= n 98)\
    \ #f]\n        [(= n 100) #t]\n        [(= n 102) #f", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (letrec ([evens (in-naturals 2)]\n           [evens-sum (in-naturals\
    \ 2)])\n    (stream-for-each (lambda (x) (set! evens-sum (stream-map + evens-sum\
    \ (stream-cons x (stream-map (lambda (y) (* y 2)) evens))))) evens)\n    (stream-exists\
    \ (lambda (x) (= x n)) evens-sum)))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (cond\n    [(= n\
    \ 0) #t]\n    [(< n 0) #f]\n    [else (or (is_equal_to_sum_even (- n 2))\n   \
    \           (is_equal_to_sum_even (- n 4))\n              (is_equal_to_sum_even\
    \ (- n 6))\n              (is_equal_to_sum_even (- n 8)))]))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          ((and (even? i) (is_equal_to_sum_even_iter\
    \ (- n i) (+ i 2))) #t)\n          (else (is_equal_to_sum_even_iter n (+ i 2)))))\n\
    \  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(even? i)\n       (or (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))\n           (is_equal_to_sum_even-iter n (+ i 2)))]\n     \
    \ [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ 0) #f]\n      [(= n (* i 2)) #t]\n      [else (is_equal_to_sum_even-iter (-\
    \ n (* i 2)) (- i 1))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n (* i 4)) #t]\n     \
    \ [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n \
    \ (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter n\
    \ i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0) (is_equal_to_sum_even_iter (- n i) (- i 2))]\n      [else (is_equal_to_sum_even_iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even_iter n n))\n", "  (cond\n    [(= n 0)\
    \ #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n    [(= n 6) #f]\n    [(= n 8) #t]\n\
    \    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n\
    \    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n\
    \    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n\
    \    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n\
    \    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n\
    \    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n\
    \    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n\
    \    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n\
    \    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n\
    \    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n\
    \    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n\
    \    [(= n 98) #f]\n    [(= n 100) #", "  (define (is_equal_to_sum_even-iter n\
    \ sum count)\n    (cond\n      [(= n sum)\n       (= count 4)]\n      [(> n sum)\n\
    \       (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n      [else\n  \
    \     #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (if (zero? n)\n     \
    \ #f\n      (let* ([evens (filter even? (range 1 n))]\n             [sums (map\
    \ (lambda (x) (sum (filter (lambda (y) (= x y)) evens))) evens)])\n        (member\
    \ n sums))))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n     \
    \ [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n)\
    \ #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n \
    \     [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(=\
    \ i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n\
    \      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(=\
    \ i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t]\n\
    \      [(= i 0) (is_equal_to_sum_even_iter n 2)]\n      [(= i n) #t", "  (if (even?\
    \ n)\n      (is_equal_to_sum_even_helper n 4 0)\n      #f))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n\
    \      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n      [(=\
    \ i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n\
    \      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n      [(=\
    \ i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n 2)]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n\
    \      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n      [(=\
    \ i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t", "  (define (is_equal_to_sum_even-iter\
    \ n i count)\n    (cond ((= count 4) #t)\n          ((= n 0) #f)\n          ((=\
    \ i n) (is_equal_to_sum_even-iter n 2 (+ count 1)))\n          ((= 0 (modulo n\
    \ i)) (is_equal_to_sum_even-iter (- n i) i (+ count 1)))\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2) count))))\n  (is_equal_to_sum_even-iter n 2 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n count)\n    (cond\n      [(=\
    \ count 0) #t]\n      [(= n 0) #f]\n      [(= (remainder n 2) 0) (is_equal_to_sum_even_iter\
    \ (- n 2) (- count 1))]\n      [else (is_equal_to_sum_even_iter (- n 1) count)]))\n\
    \  (is_equal_to_sum_even_iter n 4))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n 2)]\n      [(= i n) #t]\n      [else (is_equal_to_sum_even-iter (- n i) (+\
    \ i 2))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(and (even?\
    \ i) (is_equal_to_sum_even-iter (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (cond\n    [(= n 0)\
    \ #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n    [(= n 6) #f]\n    [(= n 8) #t]\n\
    \    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n\
    \    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n\
    \    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n\
    \    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n\
    \    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n\
    \    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n\
    \    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n\
    \    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n\
    \    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n\
    \    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n\
    \    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n\
    \    [(= n 98) #f]\n    [(= n 100) #", "  (define (is_equal_to_sum_even-iter n\
    \ i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n      [(= i\
    \ 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= i n) #t]\n      [else (or\
    \ (is_equal_to_sum_even_iter n (+ i 2))\n                (is_equal_to_sum_even_iter\
    \ (- n i) (+ i 2)))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(even? n) (is_equal_to_sum_even-iter\
    \ (- n 2) (+ sum 2) (+ count 1))]\n      [else (is_equal_to_sum_even-iter (- n\
    \ 1) (+ sum 1) count)]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n i) #t]\n      [(> n\
    \ i) (or (is_equal_to_sum_even-iter n (+ i 2))\n                   (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2)))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(= i 0) #f]\n      [(= n i) #t]\n      [(= n (+ i (* 2 i))) #t]\n      [else\
    \ (is_equal_to_sum_even-iter n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n (* i 4)) #t]\n\
    \      [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n\
    \  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else\
    \ (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= count 4)\
    \ (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= i\
    \ n) #f]\n      [(= n (+ (* 2 i) (* 2 (- n i)))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 1))]))\n  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [(> n (+ sum 2)) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ (* 2\
    \ i) (* 2 (+ i 1)))) (is_equal_to_sum_even-iter n (+ i 1))]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 1))]))\n  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((even? n) (is_equal_to_sum_even_iter\
    \ (- n 2) (+ sum 2) (+ count 1)))\n          (else (is_equal_to_sum_even_iter\
    \ (- n 1) (+ sum 1) (+ count 1)))))\n  (is_equal_to_sum_even_iter n 0 0))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(= i n) #f]\n      [(= n (+ i (* 2 (+ i (* 2 (+ i (* 2 (+ i (* 2 i)))))))))\
    \ #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((=\
    \ count 4) (= n sum))\n          ((= n sum) #t)\n          ((&gt; n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n</code>\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((=\
    \ n 0) #t)\n          ((= n i) #f)\n          ((= n (+ i (* 2 2))) #t)\n     \
    \     ((= n (+ i (* 2 2) (* 2 2))) #t)\n          ((= n (+ i (* 2 2) (* 2 2) (*\
    \ 2 2))) #t)\n          ((= n (+ i (* 2 2) (* 2 2) (* 2 2) (* 2 2))) #t)\n   \
    \       (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i n) #t]\n\
    \      [else (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n               \
    \ (is_equal_to_sum_even-iter n (+ i 2)))]))\n  (is_equal_to_sum_even-iter n 0))\n",
  "  (define (helper n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n    \
    \  [(even? n) (helper (- n 2) (+ sum 2) (+ count 1))]\n      [else (helper (-\
    \ n 1) (+ sum 1) count)]))\n  (helper n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(> n 0) (or (is_equal_to_sum_even_iter\
    \ (- n i) (+ i 2))\n                   (is_equal_to_sum_even_iter n (+ i 2)))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(and (even? i) (is_equal_to_sum_even_iter\
    \ (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n\
    \  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else\
    \ (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (let loop ([i 1] [j 2] [k 3] [l 4])\n    (cond\n      [(= (+ i j k l) n) #t]\n\
    \      [(> (+ i j k l) n) #f]\n      [(= i n) #f]\n      [(= j n) #f]\n      [(=\
    \ k n) #f]\n      [(= l n) #f]\n      [else (loop (+ i 2) (+ j 2) (+ k 2) (+ l\
    \ 2))])))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond ((=\
    \ count 4) (= n sum))\n          ((= n sum) #t)\n          ((&gt; n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n</code>\nI am trying to understand how to write a test case for this\
    \ function. I have written the following test case:\n<code>#lang racket\n", " \
    \ (and (even? n)\n       (or (equal? n 8)\n           (equal? n 12)\n        \
    \   (equal? n 16)\n           (equal? n 20)\n           (equal? n 24)\n      \
    \     (equal? n 28)\n           (equal? n 32)\n           (equal? n 36)\n    \
    \       (equal? n 40)\n           (equal? n 44)\n           (equal? n 48)\n  \
    \         (equal? n 52)\n           (equal? n 56)\n           (equal? n 60)\n\
    \           (equal? n 64)\n           (equal? n 68)\n           (equal? n 72)\n\
    \           (equal? n 76)\n           (equal? n 80)\n           (equal? n 84)\n\
    \           (equal? n 88)\n           (equal? n 92)\n           (equal? n 96)\n\
    \           (equal? n 100)\n           (equal? n 104)\n           (equal? n 108)\n\
    \           (equal? n 112)\n           (equal? n 116)\n           (equal? n 120)\n\
    \           (equal? n 124)\n           (equal? n 128)\n           (equal? n 132)\n\
    \           (equal? n 136)\n           (equal? n 140)\n           (equal? n 144)\n\
    \           (equal? n 148)\n           (equal? n 152)\n           (equal? n 156)\n\
    \           (equal? n 160)\n           (equal? n 164)\n           (equal? n 168)\n\
    \           (equal? n 172)\n           (equal? n 176)\n           (equal? n 180)\n\
    \           (equal? n 184)\n           (equal? n 188)\n           (equal? n 192)\n\
    \           (equal? n 196)\n           (equal? n 200)\n           (equal? n 204)\n\
    \           (equal? n 208)\n           (equal? n 212)\n           (equal? n 216)\n\
    \           (equal? n 220)\n           (equal? n 224)\n           (equal? n 228)\n\
    \           (equal? n 232)\n           (equal? n 236)\n           (equal? n 240)\n\
    \           (equal? n 244)\n           (equal? n 248)\n           (equal? n 252)\n\
    \           (equal?", "  (define (is_equal_to_sum_even_iter n sum count)\n   \
    \ (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (cond\n    [(= n 4) #f]\n    [(= n 6) #f]\n    [(= n 8) #t]\n \
    \   [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n \
    \   [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n \
    \   [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n \
    \   [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n \
    \   [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n \
    \   [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n \
    \   [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n \
    \   [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n \
    \   [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n \
    \   [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n \
    \   [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n \
    \   [(= n 98) #f]\n    [(= n 100) #t]\n    [(= n 102) #f]\n    [(= n 104) #",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(= n (+ i i)) #t]\n\
    \      [else (or (is_equal_to_sum_even-iter n (+ i 2)) (is_equal_to_sum_even-iter\
    \ (- n i) 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((zero? n) #f)\n\
    \          ((zero? (remainder n 2)) (is_equal_to_sum_even_iter (- n 2) (+ sum\
    \ 2) (+ count 1)))\n          (else (is_equal_to_sum_even_iter (- n 1) (+ sum\
    \ 1) (+ count 1)))))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even-iter (- n i) (- i 2))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(<= n sum) #f]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond\n      [(= n sum) (= count\
    \ 4)]\n      [(> n sum) (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even-iter (- n i) (- i 2))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0) (or (is_equal_to_sum_even-iter (- n i) (- n i))\n                  \
    \              (is_equal_to_sum_even-iter n (- i 2)))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n i) #t]\n\
    \      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (- i\
    \ 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n      [(< n\
    \ 0) #f]\n      [(= i 0) #f]\n      [else (or (is_equal_to_sum_even-iter (- n\
    \ i) i)\n                (is_equal_to_sum_even-iter n (- i 2)))]))\n  (is_equal_to_sum-even-iter\
    \ n n))\n```\n\n### Exercise 1.20\n\n```racket\n#lang racket\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(< n 0) #f]\n      [(= i n) #f]\n\
    \      [else (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n               \
    \ (is_equal_to_sum_even-iter n (+ i 2)))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) #f]\n      [(and (even? i) (is_equal_to_sum_even_iter (- n i) (- n\
    \ i))) #t]\n      [else (is_equal_to_sum_even_iter n (- i 1))]))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) #f]\n      [(= (remainder i 2) 0) (or (is_equal_to_sum_even-iter\
    \ (- n i) i) (is_equal_to_sum_even-iter n (- i 2)))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n acc)\n    (cond\n      [(= n 0) (equal? acc 4)]\n      [(even? n) (is_equal_to_sum_even-iter\
    \ (- n 2) (+ acc 1))]\n      [else (is_equal_to_sum_even-iter (- n 1) acc)]))\n\
    \  (is_equal_to_sum_even-iter n 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
