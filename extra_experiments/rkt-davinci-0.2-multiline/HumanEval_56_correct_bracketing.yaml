name: HumanEval_56_correct_bracketing
language: rkt
prompt: "#lang racket\n\n#| brackets is a string of \"<\" and \">\".\nreturn #t if\
  \ every opening bracket has a corresponding closing bracket.\n>>> (correct_bracketing\
  \ \"<\")\n#f\n>>> (correct_bracketing \"<>\")\n#t\n>>> (correct_bracketing \"<<><>>\"\
  )\n#t\n>>> (correct_bracketing \"><<>\")\n#f|#\n(define (correct_bracketing brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"<>\") #t)\n    (check-equal? (candidate \"<<><>>\"\
  ) #t)\n    (check-equal? (candidate \"<><><<><>><>\") #t)\n    (check-equal? (candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") #t)\n    (check-equal? (candidate \"<<<><>>>>\"\
  ) #f)\n    (check-equal? (candidate \"><<>\") #f)\n    (check-equal? (candidate\
  \ \"<\") #f)\n    (check-equal? (candidate \"<<<<\") #f)\n    (check-equal? (candidate\
  \ \">\") #f)\n    (check-equal? (candidate \"<<>\") #f)\n    (check-equal? (candidate\
  \ \"<><><<><>><>><<>\") #f)\n    (check-equal? (candidate \"<><><<><>><>>><>\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n  \
    \        [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(string=? (first brackets) \"<\")\n           (helper\
    \ (rest brackets) (+ count 1))]\n          [(string=? (first brackets) \">\")\n\
    \           (and (> count 0)\n                (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (positive? count) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond [(empty? brackets)\n           (=\
    \ count 0)]\n          [(char=? (first brackets) #\\<)\n           (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>)\n       \
    \    (and (not (= count 0))\n                (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n \
    \   [(empty? (rest brackets)) #f]\n    [(string=? (first brackets) \"<\")\n  \
    \   (and (string=? (first (rest brackets)) \">\")\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets)\
    \ (helper (rest brackets) (+ count 1))]\n      [else (and (not (zero? count))\n\
    \                 (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (cond\n      [(empty? brackets) (= count 0)]\n   \
    \   [(char=? (first brackets) #\\<) (loop (rest brackets) (+ count 1))]\n    \
    \  [(char=? (first brackets) #\\>) (loop (rest brackets) (- count 1))]\n     \
    \ [else (loop (rest brackets) count)])))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(equal? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(equal? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond\
    \ [(empty? brackets) (= count 0)]\n          [(char=? (first brackets) #\\<)\n\
    \           (loop (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\>)\n           (loop (rest brackets) (- count 1))]\n          [else (error\
    \ \"invalid character\")])))\n", "  (let loop ([brackets brackets] [count 0])\n\
    \    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\<)\n           (loop (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\>)\n           (loop (rest brackets) (- count 1))]\n          [else\
    \ (error \"invalid character in brackets\")])))\n", "  (define (helper brackets\
    \ count)\n    (cond ((empty? brackets)\n           (= count 0))\n          ((char=?\
    \ (first brackets) #\\<)\n           (helper (rest brackets) (+ count 1)))\n \
    \         ((char=? (first brackets) #\\>)\n           (and (> count 0)\n     \
    \           (helper (rest brackets) (- count 1))))))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper str)\n\
    \    (cond\n      [(empty? str) #t]\n      [(string=? (first str) \"<\") (helper\
    \ (rest str))]\n      [(string=? (first str) \">\") #f]))\n  (helper brackets))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets)\
    \ (helper (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\<)\n           (loop (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>)\n       \
    \    (loop (rest brackets) (- count 1))]\n          [else (error \"invalid character\"\
    )])))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(string=? (first brackets) \"<\")\n           (loop\
    \ (rest brackets) (+ count 1))]\n          [(string=? (first brackets) \">\")\n\
    \           (loop (rest brackets) (- count 1))]\n          [else (error \"not\
    \ a bracket\")])))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(first brackets) (helper (rest brackets) (+ count\
    \ 1))]\n      [else (and (not (zero? count))\n                 (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) #\\<)\n     (if (correct_bracketing (rest\
    \ brackets))\n         (if (equal? (first (rest brackets)) #\\>)\n           \
    \  (correct_bracketing (rest (rest brackets)))\n             #f)\n         #f)]\n\
    \    [else #f]))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\<)\n        \
    \   (loop (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\\
    >)\n           (loop (rest brackets) (- count 1))]\n          [else (loop (rest\
    \ brackets) count)])))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (zero? count)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (positive? count)\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (> count 0) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (negative? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (positive? count)\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(first brackets) (helper (rest brackets) (+ count 1))]\n      [else (and\
    \ (positive? count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (helper (rest brackets) (- count 1))\n\
    \                                          (> count 0))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (positive? count) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n          [(string=? (first brackets) \">\") (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty?\
    \ (rest brackets)) #f]\n    [(equal? (first brackets) \"<\")\n     (and (correct_bracketing\
    \ (rest brackets))\n          (correct_bracketing (rest (rest brackets))))]\n\
    \    [(equal? (first brackets) \">\")\n     (and (correct_bracketing (rest brackets))\n\
    \          (correct_bracketing (rest (rest brackets))))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper\
    \ (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond [(empty? brackets) (= count 0)]\n          [(= (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n          [(= (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n  \
    \        [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (positive?\
    \ count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \          [(char=? (first brackets) #\\>) (and (> count 0) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (negative? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (positive? count)\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (-\
    \ count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper\
    \ (rest brackets) (+ count 1))]\n      [else (helper (rest brackets) (- count\
    \ 1))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper (rest\
    \ brackets) (+ count 1))]\n      [else (and (positive? count) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"<\")\n     (if (string=? (last brackets) \">\")\n       \
    \  (correct_bracketing (substring brackets 1 (- (string-length brackets) 1)))\n\
    \         #f)]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(first brackets) (helper (rest brackets) (+ count 1))]\n      [else\
    \ (and (positive? count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (> count 0) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (< count 1) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (> count 0) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (zero? count)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (positive? count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond ((empty? brackets) (zero?\
    \ count))\n          ((char=? (first brackets) #\\<) (helper (rest brackets) (+\
    \ count 1)))\n          ((char=? (first brackets) #\\>) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1))))\n          (else (error \"invalid character\"\
    ))))\n  (helper brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n\
    \    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first brackets)\
    \ #\\<)\n       (loop (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>)\n       (loop (rest brackets) (- count 1))]\n      [else (loop (rest brackets)\
    \ count)])))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(symbol=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(symbol=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(first brackets) (helper (rest brackets) (+ count 1))]\n      [else\
    \ (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (positive? count) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"<\")\n     (and (correct_bracketing (rest brackets))\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [(equal? (first brackets) \">\")\n     (and (correct_bracketing\
    \ (rest brackets))\n          (correct_bracketing (rest (rest brackets))))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (if (empty? brackets)\n        (zero? count)\n   \
    \     (cond [(equal? (first brackets) #\\<)\n               (loop (rest brackets)\
    \ (+ count 1))]\n              [(equal? (first brackets) #\\>)\n             \
    \  (loop (rest brackets) (- count 1))]\n              [else (loop (rest brackets)\
    \ count)]))))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(string=? (first brackets) \"<\")\n     (and (string=? (last brackets)\
    \ \">\")\n          (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1))))]\n    [else #f]))\n```\n\n### Exercise 2.5\n\n```racket\n#lang\
    \ racket\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n       \
    \   ((char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1)))\n  \
    \        ((char=? (first brackets) #\\>) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1))))))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets)\
    \ (helper (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond [(empty? brackets) (zero? count)]\n          [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\>) (and (positive? count) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(eq? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(eq? (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (correct_bracketing (rest brackets))]\n\
    \    [(equal? (first brackets) \">\")\n     (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \          [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (if (string=? (last\
    \ brackets) \">\")\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets)\
    \ (helper (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"<\")\n     (and (correct_bracketing (rest brackets))\n          (equal? (first\
    \ (rest brackets)) \">\"))]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (positive? count) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (cond [(empty? brackets) #t]\n\
    \        [(empty? (rest brackets)) #f]\n        [(equal? (first brackets) \"<\"\
    )\n         (and (correct_bracketing (rest brackets))\n              (equal? (first\
    \ (rest brackets)) \">\"))]\n        [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\n      \
    \ (zero? count)]\n      [(char=? (first brackets) #\\<)\n       (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\n       (and\
    \ (positive? count)\n            (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond [(empty? brackets)\
    \ #t]\n        [(string=? (first brackets) \"<\")\n         (if (string=? (last\
    \ brackets) \">\")\n             (correct_bracketing (substring brackets 1 (-\
    \ (string-length brackets) 1)))\n             #f)]\n        [else #f]))\n", " \
    \ (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n          [(string=? (first brackets) \">\") (and (positive? count) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (positive?\
    \ count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\<)\n           (loop (rest brackets) (+ count 1))]\n   \
    \       [(char=? (first brackets) #\\>)\n           (loop (rest brackets) (- count\
    \ 1))]\n          [else (error \"invalid input\")])))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets)\
    \ (helper (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (and (correct_bracketing\
    \ (rest brackets))\n          (not (empty? brackets))\n          (string=? (first\
    \ brackets) \">\"))]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper\
    \ (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (positive?\
    \ count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (correct_bracketing-iter brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\<)\n           (correct_bracketing-iter\
    \ (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>)\n \
    \          (correct_bracketing-iter (rest brackets) (- count 1))]\n          [else\
    \ (correct_bracketing-iter (rest brackets) count)]))\n  (correct_bracketing-iter\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (> count\
    \ 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets)\
    \ (helper (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (positive? count) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(symbol=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(symbol=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(not (equal? (first brackets) (last brackets)))\
    \ #f]\n    [else (correct_bracketing (rest (butlast brackets)))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n    \
    \  [(= (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty?\
    \ (rest brackets)) #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal?\
    \ (first (rest brackets)) \">\")\n          (correct_bracketing (rest (rest brackets))))]\n\
    \    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(char=? (first brackets) #\\<)\n     (if (char=? (last brackets)\
    \ #\\>)\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty?\
    \ (rest brackets)) #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal?\
    \ (first (rest brackets)) \">\")\n          (correct_bracketing (rest (rest brackets))))]\n\
    \    [else #f]))\n", "  (define (helper brackets count)\n    (cond ((string=?\
    \ brackets \"\") (= count 0))\n          ((string=? (substring brackets 0 1) \"\
    <\") (helper (substring brackets 1) (+ count 1)))\n          ((string=? (substring\
    \ brackets 0 1) \">\") (helper (substring brackets 1) (- count 1)))\n        \
    \  (else #f)))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (positive? count) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n          [(string=? (first brackets) \">\") (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \          [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets)\
    \ (helper (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(first brackets) (helper (rest brackets) (+ count 1))]\n\
    \      [else (and (positive? count) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n   \
    \ (cond [(empty? brackets) (= count 0)]\n          [(string=? (first brackets)\
    \ \"<\")\n           (loop (rest brackets) (+ count 1))]\n          [(string=?\
    \ (first brackets) \">\")\n           (loop (rest brackets) (- count 1))]\n  \
    \        [else (error \"invalid input\")])))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(first brackets) (helper (rest brackets) (+ count\
    \ 1))]\n      [else (and (positive? count) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (positive?\
    \ count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (-\
    \ count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(first brackets) (helper (rest brackets)\
    \ (+ count 1))]\n      [else (helper (rest brackets) (- count 1))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(equal? (first brackets) \"<\") (helper\
    \ (rest brackets) (+ count 1))]\n      [(equal? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=?\
    \ (first brackets) #\\>) (and (positive? count) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(string=? (first brackets) \"<\")\n     (and (string=? (first (rest\
    \ brackets)) \">\")\n          (correct_bracketing (rest (rest brackets))))]\n\
    \    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (> count\
    \ 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(empty? (rest brackets)) #f]\n    [(char=? (first brackets) #\\<)\n\
    \     (and (char=? (first (rest brackets)) #\\>)\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(= (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\")\
    \ (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (> count\
    \ 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \"<\")\n     (if (correct_bracketing\
    \ (rest brackets))\n         (if (equal? (first (rest brackets)) \">\")\n    \
    \         (correct_bracketing (rest (rest brackets)))\n             #f)\n    \
    \     #f)]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\
    \ [(empty? brackets) (= count 0)]\n          [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>) (and\
    \ (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n\
    \          ((char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1)))\n\
    \          ((char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1))))))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n          [(string=?\
    \ (first brackets) \">\") (helper (rest brackets) (- count 1))]\n          [else\
    \ (error \"invalid input\")]))\n  (helper brackets 0))\n```\n\n## Exercise 3\n\
    \n```racket\n#lang racket\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (positive? count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (and (correct_bracketing (rest\
    \ brackets))\n          (correct_bracketing (rest (rest brackets))))]\n    [(equal?\
    \ (first brackets) \">\")\n     (and (correct_bracketing (rest brackets))\n  \
    \        (correct_bracketing (rest (rest brackets))))]))\n", "  (define (helper\
    \ brackets count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=?\
    \ (first brackets) #\\>) (and (= count 1) (helper (rest brackets) (- count 1)))]\n\
    \          [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond ((empty? brackets) (zero? count))\n\
    \          ((char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1)))\n\
    \          ((char=? (first brackets) #\\>) (and (positive? count) (helper (rest\
    \ brackets) (- count 1))))\n          (else (error \"invalid character\"))))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (> count\
    \ 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n  \
    \        [(char=? (first brackets) #\\>) (and (positive? count) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond [(empty? brackets)\
    \ #t]\n        [(string=? (first brackets) \"<\")\n         (if (string=? (last\
    \ brackets) \">\")\n             (correct_bracketing (substring brackets 1 (-\
    \ (string-length brackets) 1)))\n             #f)]\n        [else #f]))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \"<\")\n\
    \     (if (string=? (last brackets) \">\")\n         (correct_bracketing (substring\
    \ brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n\
    \          ((string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1)))\n          ((string=? (first brackets) \">\") (and (> count 0) (helper\
    \ (rest brackets) (- count 1))))))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (-\
    \ count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper\
    \ (rest brackets) (+ count 1))]\n      [else (and (positive? count) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (correct_bracketing-helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\")\n       (correct_bracketing-helper (rest brackets) (+\
    \ count 1))]\n      [(string=? (first brackets) \">\")\n       (correct_bracketing-helper\
    \ (rest brackets) (- count 1))]))\n  (correct_bracketing-helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(first brackets) (helper (rest brackets) (+ count 1))]\n      [else\
    \ (and (positive? count) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
