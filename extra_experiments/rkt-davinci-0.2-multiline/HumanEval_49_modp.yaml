name: HumanEval_49_modp
language: rkt
prompt: "#lang racket\n\n#| Return 2^n modulo p (be aware of numerics).\n>>> (modp\
  \ 3 5)\n3\n>>> (modp 1101 101)\n2\n>>> (modp 0 101)\n1\n>>> (modp 3 11)\n8\n>>>\
  \ (modp 100 101)\n1|#\n(define (modp n p)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n\
  \    (check-equal? (candidate 3 5) 3)\n    (check-equal? (candidate 1101 101) 2)\n\
  \    (check-equal? (candidate 0 101) 1)\n    (check-equal? (candidate 3 11) 8)\n\
  \    (check-equal? (candidate 100 101) 1)\n    (check-equal? (candidate 30 5) 4)\n\
  \    (check-equal? (candidate 31 5) 3)\n))\n\n(test-humaneval)"
completions: ["  (define (modp-iter n p result)\n    (if (zero? n)\n        result\n\
    \        (modp-iter (quotient n 2) p\n                   (if (odd? n)\n      \
    \                 (modulo (* result result 2) p)\n                       (modulo\
    \ (* result result) p)))))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (/ n\
    \ 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc p))]))\n  (modp-iter\
    \ n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n      \
    \    [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n          [else\
    \ (modp-iter (- n 1) p (* acc acc p))]))\n  (modp-iter n p 1))\n", "  (if (zero?\
    \ n)\n      1\n      (let ([n (modulo n p)])\n        (if (zero? n)\n        \
    \    1\n            (let ([n (modulo (* n n) p)])\n              (if (zero? n)\n\
    \                  1\n                  (let ([n (modulo (* n n) p)])\n      \
    \              (if (zero? n)\n                        1\n                    \
    \    (let ([n (modulo (* n n) p)])\n                          (if (zero? n)\n\
    \                              1\n                              (let ([n (modulo\
    \ (* n n) p)])\n                                (if (zero? n)\n              \
    \                      1\n                                    (let ([n (modulo\
    \ (* n n) p)])\n                                      (if (zero? n)\n        \
    \                                  1\n                                       \
    \   (let ([n (modulo (* n n) p)])\n                                          \
    \  (if (zero? n)\n                                                1\n        \
    \                                        (let ([n (modulo (* n n) p)])\n     \
    \                                             (if (zero? n)\n                \
    \                                      1\n                                   \
    \                   (let ([n (modulo (* n n) p)])\n                          \
    \                              (if (zero? n)\n                               \
    \                             1\n                                            \
    \                (let ([n (modulo (* n n) p)])\n                             \
    \                                 (if (zero? n)\n                            \
    \                                      1\n                                   \
    \                               (let ([n (modulo (* n n) p)])\n              \
    \                                                      (if (zero? n)\n       \
    \                                                                 1\n        \
    \                                                                (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \             (if (zero? n)\n                                                \
    \                              1\n                                           \
    \                                   (let ([n (modulo (* n n) p)])\n          \
    \                                                                      (if (zero?\
    \ n)\n                                                                       \
    \             1\n                                                            \
    \                        (let ([n (modulo (* n n) p)])\n                     \
    \                                                                 (if (zero? n)\n\
    \                                                                            \
    \              1\n                                                           \
    \                               (let ([n (modulo (* n n) p)])\n              \
    \                                                                            \
    \  (", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp\
    \ (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let ([x (modp (/ n 2) p)])\n\
    \       (modulo (* x x) p))]\n    [else\n     (let ([x (modp (/ n 2) p)])\n  \
    \     (modulo (* x x x) p))]))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 2]\n\
    \        [(= n 2) 4]\n        [(= n 3) 8]\n        [(= n 4) 16]\n        [(= n\
    \ 5) 32]\n        [(= n 6) 64]\n        [(= n 7) 128]\n        [(= n 8) 256]\n\
    \        [(= n 9) 512]\n        [(= n 10) 1024]\n        [(= n 11) 2048]\n   \
    \     [(= n 12) 4096]\n        [(= n 13) 8192]\n        [(= n 14) 16384]\n   \
    \     [(= n 15) 32768]\n        [(= n 16) 65536]\n        [(= n 17) 131072]\n\
    \        [(= n 18) 262144]\n        [(= n 19) 524288]\n        [(= n 20) 1048576]\n\
    \        [(= n 21) 2097152]\n        [(= n 22) 4194304]\n        [(= n 23) 8388608]\n\
    \        [(= n 24) 16777216]\n        [(= n 25) 33554432]\n        [(= n 26) 67108864]\n\
    \        [(= n 27) 134217728]\n        [(= n 28) 268435456]\n        [(= n 29)\
    \ 536870912]\n        [(= n 30) 1073741824]\n        [(= n 31) 2147483648]\n \
    \       [(= n 32) 4294967296]\n        [(= n 33) 8589934592]\n        [(= n 34)\
    \ 17179869184]\n        [(= n 35) 34359738368]\n        [(= n 36) 68719476736]\n\
    \        [(= n 37) 137438953472]\n        [(= n 38) 274877906944]\n        [(=\
    \ n 39) 549755813888]\n        [(= n 40) 1099511627776]\n        [(= n 41) 2199023255552]\n\
    \        [(= n 42) 4398046511104]\n        [(= n 43) 8796093022208]\n        [(=\
    \ n 44) 17592186044416]\n        [(=", "  (if (= n 0)\n      1\n      (let ([n\
    \ (modulo n p)])\n        (if (= n 1)\n            1\n            (let ([n (modulo\
    \ (* n n) p)])\n              (if (= n 1)\n                  2\n             \
    \     (let ([n (modulo (* n n) p)])\n                    (if (= n 1)\n       \
    \                 4\n                        (let ([n (modulo (* n n) p)])\n \
    \                         (if (= n 1)\n                              8\n     \
    \                         (let ([n (modulo (* n n) p)])\n                    \
    \            (if (= n 1)\n                                    16\n           \
    \                         (let ([n (modulo (* n n) p)])\n                    \
    \                  (if (= n 1)\n                                          32\n\
    \                                          (let ([n (modulo (* n n) p)])\n   \
    \                                         (if (= n 1)\n                      \
    \                          64\n                                              \
    \  (let ([n (modulo (* n n) p)])\n                                           \
    \       (if (= n 1)\n                                                      128\n\
    \                                                      (let ([n (modulo (* n n)\
    \ p)])\n                                                        (if (= n 1)\n\
    \                                                            256\n           \
    \                                                 (let ([n (modulo (* n n) p)])\n\
    \                                                              (if (= n 1)\n \
    \                                                                 512\n      \
    \                                                            (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \       (if (= n 1)\n                                                        \
    \                1024\n                                                      \
    \                  (let ([n (modulo (* n n) p)])\n                           \
    \                                               (if (= n 1)\n                \
    \                                                              2048\n        \
    \                                                                      (let ([n\
    \ (modulo (* n n) p)])\n                                                     \
    \                           (if (= n 1)\n                                    \
    \                                                4096\n                      \
    \                                                              (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \                         (if (= n 1)\n                                      \
    \                                                    8192\n                  \
    \                                                                        (let\
    \ ([n (modulo (* n n) p)])\n                                                 \
    \                                           (if (= n 1)\n                    \
    \                                                                            16384",
  "  (if (= n 0)\n      1\n      (let ([n (modulo n p)])\n        (if (= n 0)\n  \
    \          1\n            (let ([n (modulo (* n n) p)])\n              (if (=\
    \ n 0)\n                  1\n                  (let ([n (modulo (* n n) p)])\n\
    \                    (if (= n 0)\n                        1\n                \
    \        (let ([n (modulo (* n n) p)])\n                          (if (= n 0)\n\
    \                              1\n                              (let ([n (modulo\
    \ (* n n) p)])\n                                (if (= n 0)\n                \
    \                    1\n                                    (let ([n (modulo (*\
    \ n n) p)])\n                                      (if (= n 0)\n             \
    \                             1\n                                          (let\
    \ ([n (modulo (* n n) p)])\n                                            (if (=\
    \ n 0)\n                                                1\n                  \
    \                              (let ([n (modulo (* n n) p)])\n               \
    \                                   (if (= n 0)\n                            \
    \                          1\n                                               \
    \       (let ([n (modulo (* n n) p)])\n                                      \
    \                  (if (= n 0)\n                                             \
    \               1\n                                                          \
    \  (let ([n (modulo (* n n) p)])\n                                           \
    \                   (if (= n 0)\n                                            \
    \                      1\n                                                   \
    \               (let ([n (modulo (* n n) p)])\n                              \
    \                                      (if (= n 0)\n                         \
    \                                               1\n                          \
    \                                              (let ([n (modulo (* n n) p)])\n\
    \                                                                          (if\
    \ (= n 0)\n                                                                  \
    \            1\n                                                             \
    \                 (let ([n (modulo (* n n) p)])\n                            \
    \                                                    (if (= n 0)\n           \
    \                                                                         1\n\
    \                                                                            \
    \        (let ([n (modulo (* n n) p)])\n                                     \
    \                                                 (if (= n 0)\n              \
    \                                                                            1\n\
    \                                                                            \
    \              (let ([n (modulo (* n n) p)])\n                               \
    \                                                             (if (= n 0)\n  \
    \                                                                            \
    \                  1\n                ", "  (cond\n    [(= n 0) 1]\n    [(even?\
    \ n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp\
    \ (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(even?\
    \ n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp\
    \ (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n      (let ([n (modulo n\
    \ p)])\n        (if (even? n)\n            (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p)) p)\n            (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) n) p)))))\n",
  "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p) 2) p))))\n", "  (define (modp-iter n p acc)\n    (cond [(zero? n) acc]\n\
    \          [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n        \
    \  [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n  \
    \  [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let ([m (modp (/ n 2) p)])\n\
    \       (remainder (* m m) p))]\n    [else\n     (let ([m (modp (/ n 2) p)])\n\
    \       (remainder (* m m 2) p))]))\n", "  (if (zero? n)\n      1\n      (if (even?\
    \ n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (- n 1) p) 2) p))))\n", "  (if (zero? n)\n      1\n      (let ([x (modp\
    \ (quotient n 2) p)])\n        (if (even? n)\n            (modulo (* x x) p)\n\
    \            (modulo (* x x x) p)))))\n", "  (define (modp-iter n p acc)\n   \
    \ (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0) (modulo (* (modp (/ n 2) p)\
    \ (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)\
    \ 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond [(zero? n) acc]\n   \
    \       [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n          [else\
    \ (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(zero? n) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (modulo (* acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo\
    \ (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(= (remainder n 2) 0) (modp-iter (/ n 2)\
    \ p (remainder (* acc acc) p))]\n          [else (modp-iter (- n 1) p (remainder\
    \ (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(zero? n) acc]\n          [(even? n) (modp-iter (/ n 2) p (modulo\
    \ (* acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n\
    \  (modp-iter n p 1))\n", "  (if (= n 0)\n      1\n      (let ([x (modp (- n 1)\
    \ p)])\n        (modulo (* x 2) p))))\n", "  (define (modp-iter n p acc)\n   \
    \ (cond [(zero? n) acc]\n          [(even? n) (modp-iter (/ n 2) p (modulo (*\
    \ acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(=\
    \ n 0) acc]\n      [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \      [else (modp-iter (/ n 2) p (* acc acc p (* acc 2 p)))]))\n  (modp-iter\
    \ n p 1))\n", "  (if (zero? n)\n      1\n      (let ([n (modulo n p)])\n     \
    \   (if (even? n)\n            (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n\
    \            (modulo (* n (modp (- n 1) p)) p)))))\n</code>\n", "  (cond\n   \
    \ [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (define (modp-iter n p\
    \ acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (*\
    \ acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p) 2) p))))\n", "  (if (zero? n)\n      1\n      (let ([r (modulo\
    \ (* 2 (modp (sub1 n) p)) p)])\n        (if (zero? r)\n            p\n       \
    \     r))))\n", "  (if (zero? n)\n      1\n      (let ([n (modulo n p)])\n   \
    \     (if (odd? n)\n            (modulo (* 2 (modp (quotient n 2) p)) p)\n   \
    \         (modp (quotient n 2) p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(even?\
    \ n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp\
    \ (- n 1) p) 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(=\
    \ n 0) acc]\n      [(= n 1) (* acc 2 acc)]\n      [(even? n) (modp-iter (/ n 2)\
    \ p (* acc acc))]\n      [else (modp-iter (- n 1) p (* acc 2 acc))]))\n  (modp-iter\
    \ n p 1))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 4]\n  \
    \  [(= n 3) 8]\n    [(= n 4) 16]\n    [(= n 5) 32]\n    [(= n 6) 64]\n    [(=\
    \ n 7) 128]\n    [(= n 8) 256]\n    [(= n 9) 512]\n    [(= n 10) 1024]\n    [(=\
    \ n 11) 2048]\n    [(= n 12) 4096]\n    [(= n 13) 8192]\n    [(= n 14) 16384]\n\
    \    [(= n 15) 32768]\n    [(= n 16) 65536]\n    [(= n 17) 131072]\n    [(= n\
    \ 18) 262144]\n    [(= n 19) 524288]\n    [(= n 20) 1048576]\n    [(= n 21) 2097152]\n\
    \    [(= n 22) 4194304]\n    [(= n 23) 8388608]\n    [(= n 24) 16777216]\n   \
    \ [(= n 25) 33554432]\n    [(= n 26) 67108864]\n    [(= n 27) 134217728]\n   \
    \ [(= n 28) 268435456]\n    [(= n 29) 536870912]\n    [(= n 30) 1073741824]\n\
    \    [(= n 31) 2147483648]\n    [(= n 32) 4294967296]\n    [(= n 33) 8589934592]\n\
    \    [(= n 34) 17179869184]\n    [(= n 35) 34359738368]\n    [(= n 36) 68719476736]\n\
    \    [(= n 37) 137438953472]\n    [(= n 38) 274877906944]\n    [(= n 39) 549755813888]\n\
    \    [(= n 40) 1099511627776]\n    [(= n 41) 2199023255552]\n    [(= n 42) 4398046511104]\n\
    \    [(= n 43) 8796093022208]\n    [(= n 44) 17592186044416]\n   ", "  (define\
    \ (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (* acc 2\
    \ acc)]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc))]\n      [else (modp-iter\
    \ (- n 1) p (* acc 2 acc))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p\
    \ (modulo (* acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo (* acc\
    \ 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\
    \ [(= n 0) acc]\n          [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc\
    \ acc p))]\n          [else (modp-iter (/ n 2) p (* acc acc p (* 2 acc)))]))\n\
    \  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (if (zero? n)\n\
    \        acc\n        (modp-iter (quotient n 2) p\n                   (if (odd?\
    \ n)\n                       (modulo (* acc acc p) p)\n                      \
    \ (modulo (* acc acc) p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (*\
    \ acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (if (= n 0)\n      1\n      (let ([n (modulo n p)])\n       \
    \ (if (= n 0)\n            0\n            (let ([n (modulo (* n n) p)])\n    \
    \          (if (= n 0)\n                  0\n                  (let ([n (modulo\
    \ (* n n) p)])\n                    (if (= n 0)\n                        0\n \
    \                       (let ([n (modulo (* n n) p)])\n                      \
    \    (if (= n 0)\n                              0\n                          \
    \    (let ([n (modulo (* n n) p)])\n                                (if (= n 0)\n\
    \                                    0\n                                    (let\
    \ ([n (modulo (* n n) p)])\n                                      (if (= n 0)\n\
    \                                          0\n                               \
    \           (let ([n (modulo (* n n) p)])\n                                  \
    \          (if (= n 0)\n                                                0\n  \
    \                                              (let ([n (modulo (* n n) p)])\n\
    \                                                  (if (= n 0)\n             \
    \                                         0\n                                \
    \                      (let ([n (modulo (* n n) p)])\n                       \
    \                                 (if (= n 0)\n                              \
    \                              0\n                                           \
    \                 (let ([n (modulo (* n n) p)])\n                            \
    \                                  (if (= n 0)\n                             \
    \                                     0\n                                    \
    \                              (let ([n (modulo (* n n) p)])\n               \
    \                                                     (if (= n 0)\n          \
    \                                                              0\n           \
    \                                                             (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \             (if (= n 0)\n                                                  \
    \                            0\n                                             \
    \                                 (let ([n (modulo (* n n) p)])\n            \
    \                                                                    (if (= n\
    \ 0)\n                                                                       \
    \             0\n                                                            \
    \                        (let ([n (modulo (* n n) p)])\n                     \
    \                                                                 (if (= n 0)\n\
    \                                                                            \
    \              0\n                                                           \
    \                               (let ([n (modulo (* n n) p)])\n              \
    \                                                                            \
    \  (if (= n 0)\n                                                             \
    \                                   0\n                ", "  (define (modp-iter\
    \ n p acc)\n    (cond [(zero? n) acc]\n          [(even? n) (modp-iter (/ n 2)\
    \ p (modulo (* acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo (*\
    \ acc 2) p))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n      (let\
    \ ([m (modulo (modp (sub1 n) p) p)])\n        (modulo (* m m) p))))\n", "  (cond\n\
    \    [(zero? n) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n   \
    \ [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (let loop ([n n] [r 1])\n\
    \    (cond\n      [(zero? n) r]\n      [(zero? (remainder n 2)) (loop (quotient\
    \ n 2) (remainder (* r 2) p))]\n      [else (loop (quotient n 2) (remainder (*\
    \ r 2) p))])))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n \
    \         [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n      \
    \    [else (modp-iter (- n 1) p (* acc acc p))]))\n  (modp-iter n p 1))\n", " \
    \ (if (zero? n)\n      1\n      (let ([n (modulo n p)])\n        (if (zero? n)\n\
    \            1\n            (let ([n (modulo (* n n) p)])\n              (if (zero?\
    \ n)\n                  1\n                  (let ([n (modulo (* n n) p)])\n \
    \                   (if (zero? n)\n                        1\n               \
    \         (let ([n (modulo (* n n) p)])\n                          (if (zero?\
    \ n)\n                              1\n                              (let ([n\
    \ (modulo (* n n) p)])\n                                (if (zero? n)\n      \
    \                              1\n                                    (let ([n\
    \ (modulo (* n n) p)])\n                                      (if (zero? n)\n\
    \                                          1\n                               \
    \           (let ([n (modulo (* n n) p)])\n                                  \
    \          (if (zero? n)\n                                                1\n\
    \                                                (let ([n (modulo (* n n) p)])\n\
    \                                                  (if (zero? n)\n           \
    \                                           1\n                              \
    \                        (let ([n (modulo (* n n) p)])\n                     \
    \                                   (if (zero? n)\n                          \
    \                                  1\n                                       \
    \                     (let ([n (modulo (* n n) p)])\n                        \
    \                                      (if (zero? n)\n                       \
    \                                           1\n                              \
    \                                    (let ([n (modulo (* n n) p)])\n         \
    \                                                           (if (zero? n)\n  \
    \                                                                      1\n   \
    \                                                                     (let ([n\
    \ (modulo (* n n) p)])\n                                                     \
    \                     (if (zero? n)\n                                        \
    \                                      1\n                                   \
    \                                           (let ([n (modulo (* n n) p)])\n  \
    \                                                                            \
    \  (if (zero? n)\n                                                           \
    \                         1\n                                                \
    \                                    (let ([n (modulo (* n n) p)])\n         \
    \                                                                            \
    \ (if (zero? n)\n                                                            \
    \                              1\n                                           \
    \                                               (let ([n (modulo (* n n) p)])\n\
    \                                                                            \
    \                (", "  (if (= n 0)\n      1\n      (let ([r (modulo (* 2 (modp\
    \ (- n 1) p)) p)])\n        (if (= r 0)\n            p\n            r))))\n",
  "  (if (= n 0)\n      1\n      (let ([r (modulo (* 2 (modp (- n 1) p)) p)])\n  \
    \      (if (= r 0)\n            p\n            r))))\n", "  (cond [(= n 0) 1]\n\
    \        [(odd? n) (modulo (* (modp (- n 1) p) 2) p)]\n        [else (modulo (square\
    \ (modp (/ n 2) p)) p)]))\n", "  (define (modp-iter n p acc)\n    (cond [(zero?\
    \ n) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n       \
    \   [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (if\
    \ (zero? n)\n      1\n      (let ((r (modp (quotient n 2) p)))\n        (if (even?\
    \ n)\n            (modulo (* r r) p)\n            (modulo (* r r r) p)))))\n",
  "  (cond\n    [(zero? n) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (define (modp-iter n p\
    \ acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (* acc acc)]\n      [(even?\
    \ n) (modp-iter (/ n 2) p (* acc acc))]\n      [else (modp-iter (- n 1) p (* acc\
    \ acc))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n      (let ([n\
    \ (modulo n p)])\n        (if (even? n)\n            (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)\n            (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p) n) p)))))\n</code>\n", "  (define (modp-iter n p acc)\n    (cond [(= n\
    \ 0) acc]\n          [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \          [else (modp-iter (/ n 2) p (* acc acc p (* 2 acc)))]))\n  (modp-iter\
    \ n p 1))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (cond [(zero? n) 1]\n        [(zero? (remainder n 2)) (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)]\n        [else (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p) 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n\
    \          [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n        \
    \  [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p) 2) p))))\n", "  (if (zero? n)\n      1\n      (let ([n (modulo n p)])\n\
    \        (if (even? n)\n            (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p)) p)\n            (modulo (* n (modp (- n 1) p)) p)))))\n</code>\n", "  (if\
    \ (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (- n 1) p) 2) p))))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p) 2) p))))\n```\n\n## Problem 3\n\n```racket\n#lang racket\n", "  (define\
    \ (modp-iter x n)\n    (cond\n      [(= n 0) x]\n      [(even? n) (modp-iter (*\
    \ x x) (/ n 2))]\n      [else (modp-iter (* x x x) (/ (- n 1) 2))]))\n  (modp-iter\
    \ 1 n))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n \
    \     [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n\
    \ p acc)\n    (if (= n 0)\n        acc\n        (modp-iter (quotient n 2) p\n\
    \                   (if (odd? n)\n                       (modulo (* acc acc 2)\
    \ p)\n                       (modulo (* acc acc) p)))))\n  (modp-iter n p 1))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (- n 1) p) (modp (- n\
    \ 1) p) 2) p))))\n", "  (if (= n 0)\n      1\n      (let ([x (modp (- n 1) p)])\n\
    \        (modulo (* x 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder\
    \ n 2) 0) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo\
    \ (* (modp (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n      (if (even?\
    \ n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* n (modp (- n 1) p)) p))))\n", "  (cond [(= n 0) 1]\n        [(even? n) (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else (modulo (* (modp (-\
    \ n 1) p) 2) p)]))\n", "  (if (= n 0)\n      1\n      (let ([m (modulo (* 2 (modp\
    \ (- n 1) p)) p)])\n        (if (= m 0)\n            p\n            m))))\n",
  "  (cond\n    [(zero? n) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else\
    \ (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n      1\n      (let\
    \ ([x (modp (- n 1) p)])\n        (modulo (* x 2) p))))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (/ n\
    \ 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (- n 1) p (modulo (* acc\
    \ 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter a b)\n    (cond [(zero?\
    \ b) a]\n          [(even? b) (modp-iter a (quotient b 2))]\n          [else (modp-iter\
    \ (modulo (* a a) p) (quotient b 2))]))\n  (modp-iter 1 n))\n", "  (if (zero?\
    \ n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp\
    \ (/ n 2) p)) p)\n          (modulo (* (modp (- n 1) p) (modp (- n 1) p) 2) p))))\n",
  "  (define (modp-iter n p r)\n    (cond [(zero? n) r]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* r r p))]\n          [else (modp-iter (- n 1) p (* r 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (if (= n 0)\n      1\n      (let ([x (modp (quotient\
    \ n 2) p)])\n        (if (even? n)\n            (modulo (* x x) p)\n         \
    \   (modulo (* x x x) p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1)\
    \ p) 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter\
    \ (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (cond [(= n 0) 1]\n \
    \       [(= n 1) 2]\n        [(= n 2) 4]\n        [(= n 3) 8]\n        [(= n 4)\
    \ 16]\n        [(= n 5) 32]\n        [(= n 6) 64]\n        [(= n 7) 128]\n   \
    \     [(= n 8) 256]\n        [(= n 9) 512]\n        [(= n 10) 1024]\n        [(=\
    \ n 11) 2048]\n        [(= n 12) 4096]\n        [(= n 13) 8192]\n        [(= n\
    \ 14) 16384]\n        [(= n 15) 32768]\n        [(= n 16) 65536]\n        [(=\
    \ n 17) 131072]\n        [(= n 18) 262144]\n        [(= n 19) 524288]\n      \
    \  [(= n 20) 1048576]\n        [(= n 21) 2097152]\n        [(= n 22) 4194304]\n\
    \        [(= n 23) 8388608]\n        [(= n 24) 16777216]\n        [(= n 25) 33554432]\n\
    \        [(= n 26) 67108864]\n        [(= n 27) 134217728]\n        [(= n 28)\
    \ 268435456]\n        [(= n 29) 536870912]\n        [(= n 30) 1073741824]\n  \
    \      [(= n 31) 2147483648]\n        [(= n 32) 4294967296]\n        [(= n 33)\
    \ 8589934592]\n        [(= n 34) 17179869184]\n        [(= n 35) 34359738368]\n\
    \        [(= n 36) 68719476736]\n        [(= n 37) 137438953472]\n        [(=\
    \ n 38) 274877906944]\n        [(= n 39) 549755813888]\n        [(= n 40) 1099511627776]\n\
    \        [(= n 41) 2199023255552]\n        [(= n 42) 4398046511104]\n        [(=\
    \ n 43) 8796093022208]\n        [(= n 44) 17592186044416]\n        [(=", "  (define\
    \ (modp-iter n p acc)\n    (if (zero? n)\n        acc\n        (modp-iter (quotient\
    \ n 2) p\n                   (if (odd? n)\n                       (modulo (* acc\
    \ 2) p)\n                       (modulo acc p)))))\n  (modp-iter n p 1))\n", " \
    \ (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1)\
    \ (* 2 acc)]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc))]\n      [else\
    \ (modp-iter (- n 1) p (* 2 acc))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n\
    \      1\n      (let ([n (modulo n p)])\n        (if (even? n)\n            (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (* n (modp (-\
    \ n 1) p)) p)))))\n</code>\n", "  (if (= n 0)\n      1\n      (let ([a (modp (quotient\
    \ n 2) p)])\n        (if (even? n)\n            (modulo (* a a) p)\n         \
    \   (modulo (* a a a) p)))))\n", "  (if (= n 0)\n      1\n      (let ([n (modulo\
    \ n p)])\n        (if (= n 0)\n            1\n            (let ([n (modulo (*\
    \ n n) p)])\n              (if (= n 0)\n                  1\n                \
    \  (let ([n (modulo (* n n) p)])\n                    (if (= n 0)\n          \
    \              1\n                        (let ([n (modulo (* n n) p)])\n    \
    \                      (if (= n 0)\n                              1\n        \
    \                      (let ([n (modulo (* n n) p)])\n                       \
    \         (if (= n 0)\n                                    1\n               \
    \                     (let ([n (modulo (* n n) p)])\n                        \
    \              (if (= n 0)\n                                          1\n    \
    \                                      (let ([n (modulo (* n n) p)])\n       \
    \                                     (if (= n 0)\n                          \
    \                      1\n                                                (let\
    \ ([n (modulo (* n n) p)])\n                                                 \
    \ (if (= n 0)\n                                                      1\n     \
    \                                                 (let ([n (modulo (* n n) p)])\n\
    \                                                        (if (= n 0)\n       \
    \                                                     1\n                    \
    \                                        (let ([n (modulo (* n n) p)])\n     \
    \                                                         (if (= n 0)\n      \
    \                                                            1\n             \
    \                                                     (let ([n (modulo (* n n)\
    \ p)])\n                                                                    (if\
    \ (= n 0)\n                                                                  \
    \      1\n                                                                   \
    \     (let ([n (modulo (* n n) p)])\n                                        \
    \                                  (if (= n 0)\n                             \
    \                                                 1\n                        \
    \                                                      (let ([n (modulo (* n n)\
    \ p)])\n                                                                     \
    \           (if (= n 0)\n                                                    \
    \                                1\n                                         \
    \                                           (let ([n (modulo (* n n) p)])\n  \
    \                                                                            \
    \        (if (= n 0)\n                                                       \
    \                                   1\n                                      \
    \                                                    (let ([n (modulo (* n n)\
    \ p)])\n                                                                     \
    \                       (if (= n 0)\n                                        \
    \                                                        1\n                ",
  "  (if (= n 0)\n      1\n      (let ([n (modulo n p)])\n        (if (= n 0)\n  \
    \          1\n            (let ([n (modulo (* n (modp (- n 1) p)) p)])\n     \
    \         (if (= n 0)\n                  1\n                  n))))))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(= n 1) (* acc 2 acc)]\n\
    \          [(even? n) (modp-iter (/ n 2) p (* acc acc))]\n          [else (modp-iter\
    \ (- n 1) p (* acc 2 acc))]))\n  (modp-iter n p 1))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(= (remainder n 2) 0) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)]\n    [else (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p)]))\n", " \
    \ (cond [(= n 0) 1]\n        [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p)) p)]\n        [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (zero?\
    \ n)\n      1\n      (let ([x (modp (quotient n 2) p)])\n        (if (even? n)\n\
    \            (modulo (* x x) p)\n            (modulo (* x x x) p)))))\n", "  (cond\
    \ [(= n 0) 1]\n        [(= n 1) 2]\n        [(= n 2) 4]\n        [(= n 3) 8]\n\
    \        [(= n 4) 16]\n        [(= n 5) 32]\n        [(= n 6) 64]\n        [(=\
    \ n 7) 128]\n        [(= n 8) 256]\n        [(= n 9) 512]\n        [(= n 10) 1024]\n\
    \        [(= n 11) 2048]\n        [(= n 12) 4096]\n        [(= n 13) 8192]\n \
    \       [(= n 14) 16384]\n        [(= n 15) 32768]\n        [(= n 16) 65536]\n\
    \        [(= n 17) 131072]\n        [(= n 18) 262144]\n        [(= n 19) 524288]\n\
    \        [(= n 20) 1048576]\n        [(= n 21) 2097152]\n        [(= n 22) 4194304]\n\
    \        [(= n 23) 8388608]\n        [(= n 24) 16777216]\n        [(= n 25) 33554432]\n\
    \        [(= n 26) 67108864]\n        [(= n 27) 134217728]\n        [(= n 28)\
    \ 268435456]\n        [(= n 29) 536870912]\n        [(= n 30) 1073741824]\n  \
    \      [(= n 31) 2147483648]\n        [(= n 32) 4294967296]\n        [(= n 33)\
    \ 8589934592]\n        [(= n 34) 17179869184]\n        [(= n 35) 34359738368]\n\
    \        [(= n 36) 68719476736]\n        [(= n 37) 137438953472]\n        [(=\
    \ n 38) 274877906944]\n        [(= n 39) 549755813888]\n        [(= n 40) 1099511627776]\n\
    \        [(= n 41) 2199023255552]\n        [(= n 42) 4398046511104]\n        [(=\
    \ n 43) 8796093022208]\n        [(= n 44) 17592186044416]\n        [(=", "  (if\
    \ (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p) 2) p))))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p) 2) p))))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", " \
    \ (let loop ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n)\
    \ (loop (quotient n 2) p (* r r p))]\n          [else (loop (sub1 n) p (* r p))])))\n",
  "  (cond [(zero? n) 1]\n        [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \        [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n     \
    \ 1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (define (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(= n 1) (* acc\
    \ acc)]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc))]\n          [else\
    \ (modp-iter (- n 1) p (* acc acc))]))\n  (modp-iter n p 1))\n", "  (if (= n 0)\n\
    \      1\n      (let ([r (modulo (* 2 (modp (- n 1) p)) p)])\n        (if (= r\
    \ 0)\n            p\n            r))))\n", "  (if (zero? n)\n      1\n      (let\
    \ ([x (modp (quotient n 2) p)])\n        (if (even? n)\n            (modulo (*\
    \ x x) p)\n            (modulo (* x x x) p)))))\n", "  (cond [(= n 0) 1]\n   \
    \     [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else\
    \ (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (define (modp-iter n p acc)\n  \
    \  (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n\
    \          [else (modp-iter (- n 1) p (* acc p))]))\n  (modp-iter n p 1))\n",
  "  (if (zero? n)\n      1\n      (let ([m (modulo n 2)])\n        (if (zero? m)\n\
    \            (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p)))))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else\
    \ (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(even?\
    \ n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp\
    \ (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n      (let ([n (modulo n\
    \ p)])\n        (if (even? n)\n            (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p)) p)\n            (modulo (* n (modp (- n 1) p)) p)))))\n</code>\n",
  "  (if (= n 0)\n      1\n      (let ([x (modp (quotient n 2) p)])\n        (if (even?\
    \ n)\n            (modulo (* x x) p)\n            (modulo (* x x x) p)))))\n",
  "  (let loop ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(even? n)\
    \ (loop (quotient n 2) p (modulo (* r r) p))]\n          [else (loop (sub1 n)\
    \ p (modulo (* r n) p))])))\n", "  (if (= n 0)\n      1\n      (let ([x (modp\
    \ (quotient n 2) p)])\n        (if (even? n)\n            (modulo (* x x) p)\n\
    \            (modulo (* x x x) p)))))\n", "  (if (zero? n)\n      1\n      (let\
    \ ([x (modp (quotient n 2) p)])\n        (if (even? n)\n            (modulo (*\
    \ x x) p)\n            (modulo (* x x x) p)))))\n", "  (cond [(= n 0) 1]\n   \
    \     [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else\
    \ (modulo (* 2 (modp (- n 1) p)) p)]))\n", "  (define (modp-iter n acc)\n    (cond\
    \ [(zero? n) acc]\n          [(even? n) (modp-iter (/ n 2) (* acc acc p))]\n \
    \         [else (modp-iter (- n 1) (* acc 2 p))]))\n  (modp-iter n 1))\n", " \
    \ (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n)\
    \ (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc\
    \ 2 p))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n      (let ([n\
    \ (modulo n p)])\n        (if (zero? n)\n            1\n            (let ([n (modulo\
    \ (* n n) p)])\n              (if (zero? n)\n                  1\n           \
    \       (let ([n (modulo (* n n) p)])\n                    (if (zero? n)\n   \
    \                     1\n                        (let ([n (modulo (* n n) p)])\n\
    \                          (if (zero? n)\n                              1\n  \
    \                            (let ([n (modulo (* n n) p)])\n                 \
    \               (if (zero? n)\n                                    1\n       \
    \                             (let ([n (modulo (* n n) p)])\n                \
    \                      (if (zero? n)\n                                       \
    \   1\n                                          (let ([n (modulo (* n n) p)])\n\
    \                                            (if (zero? n)\n                 \
    \                               1\n                                          \
    \      (let ([n (modulo (* n n) p)])\n                                       \
    \           (if (zero? n)\n                                                  \
    \    1\n                                                      (let ([n (modulo\
    \ (* n n) p)])\n                                                        (if (zero?\
    \ n)\n                                                            1\n        \
    \                                                    (let ([n (modulo (* n n)\
    \ p)])\n                                                              (if (zero?\
    \ n)\n                                                                  1\n  \
    \                                                                (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \       (if (zero? n)\n                                                      \
    \                  1\n                                                       \
    \                 (let ([n (modulo (* n n) p)])\n                            \
    \                                              (if (zero? n)\n               \
    \                                                               1\n          \
    \                                                                    (let ([n\
    \ (modulo (* n n) p)])\n                                                     \
    \                           (if (zero? n)\n                                  \
    \                                                  1\n                       \
    \                                                             (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \                         (if (zero? n)\n                                    \
    \                                                      1\n                   \
    \                                                                       (let ([n\
    \ (modulo (* n n) p)])\n                                                     \
    \                                       (", "  (define (modp-iter n p acc)\n \
    \   (cond\n      [(= n 0) acc]\n      [(= n 1) (* acc 2) (modulo p)]\n      [else\
    \ (modp-iter (quotient n 2) p (* acc 2 (modulo p)))]))\n  (modp-iter n p 1))\n",
  "  (if (zero? n)\n      1\n      (let ([n (modulo n p)])\n        (if (zero? n)\n\
    \            1\n            (let ([m (modp (- n 1) p)])\n              (modulo\
    \ (* 2 m) p))))))\n</code>\n", "  (define (modp-iter n p a)\n    (cond\n     \
    \ [(= n 0) a]\n      [(even? n) (modp-iter (/ n 2) p (* a a p))]\n      [else\
    \ (modp-iter (- n 1) p (* a 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2)\
    \ p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter\
    \ n p 1))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 2]\n        [(= n 2) 4]\n        [(= n 3)\
    \ 8]\n        [(= n 4) 16]\n        [(= n 5) 32]\n        [(= n 6) 64]\n     \
    \   [(= n 7) 128]\n        [(= n 8) 256]\n        [(= n 9) 512]\n        [(= n\
    \ 10) 1024]\n        [(= n 11) 2048]\n        [(= n 12) 4096]\n        [(= n 13)\
    \ 8192]\n        [(= n 14) 16384]\n        [(= n 15) 32768]\n        [(= n 16)\
    \ 65536]\n        [(= n 17) 131072]\n        [(= n 18) 262144]\n        [(= n\
    \ 19) 524288]\n        [(= n 20) 1048576]\n        [(= n 21) 2097152]\n      \
    \  [(= n 22) 4194304]\n        [(= n 23) 8388608]\n        [(= n 24) 16777216]\n\
    \        [(= n 25) 33554432]\n        [(= n 26) 67108864]\n        [(= n 27) 134217728]\n\
    \        [(= n 28) 268435456]\n        [(= n 29) 536870912]\n        [(= n 30)\
    \ 1073741824]\n        [(= n 31) 2147483648]\n        [(= n 32) 4294967296]\n\
    \        [(= n 33) 8589934592]\n        [(= n 34) 17179869184]\n        [(= n\
    \ 35) 34359738368]\n        [(= n 36) 68719476736]\n        [(= n 37) 137438953472]\n\
    \        [(= n 38) 274877906944]\n        [(= n 39) 549755813888]\n        [(=\
    \ n 40) 1099511627776]\n        [(= n 41) 2199023255552]\n        [(= n 42) 4398046511104]\n\
    \        [(= n 43) 8796093022208]\n        [(= n 44) 17592186044416]\n       \
    \ [(=", "  (cond\n    [(zero? n) 1]\n    [(even? n) (modulo (square (modp (/ n\
    \ 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p\
    \ (modulo (* acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo (* acc\
    \ 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p result)\n    (cond\
    \ [(zero? n) result]\n          [(even? n) (modp-iter (/ n 2) p (modulo (* result\
    \ result) p))]\n          [else (modp-iter (- n 1) p (modulo (* result 2) p))]))\n\
    \  (modp-iter n p 1))\n", "  (let loop ([n n] [p p] [a 1])\n    (cond [(zero?\
    \ n) a]\n          [(even? n) (loop (quotient n 2) p (remainder (* a a) p))]\n\
    \          [else (loop (sub1 n) p (remainder (* a p) p))])))\n", "  (define (modp-iter\
    \ n p acc)\n    (if (zero? n)\n        acc\n        (modp-iter (quotient n 2)\
    \ p\n                   (if (odd? n)\n                       (modulo (* acc acc\
    \ p) p)\n                       (modulo (* acc acc) p)))))\n  (modp-iter n p 1))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n  \
    \  [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n      1\n\
    \      (let ([m (modulo n 2)])\n        (if (= m 0)\n            (modulo (* (modp\
    \ (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (* (modp (/ n 2) p) (modp\
    \ (/ n 2) p) 2) p)))))\n", "  (define (modp-iter n p a)\n    (cond [(= n 0) a]\n\
    \          [(even? n) (modp-iter (/ n 2) p (* a a p))]\n          [else (modp-iter\
    \ (- n 1) p (* a 2 p))]))\n  (modp-iter n p 1))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(= (remainder n 2) 0)\n     (let ([x (modp (/ n 2) p)])\n       (modulo\
    \ (* x x) p))]\n    [else\n     (let ([x (modp (/ n 2) p)])\n       (modulo (*\
    \ x x x) p))]))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp\
    \ (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (cond [(= n 0) 1]\n        [(= (remainder n 2) 0)\n         (let ([m (modp (/\
    \ n 2) p)])\n           (remainder (* m m) p))]\n        [else\n         (let\
    \ ([m (modp (/ n 2) p)])\n           (remainder (* m m p) p))]))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n   \
    \   1\n      (let ([m (modulo n 2)])\n        (if (= m 0)\n            (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p) 2) p)))))\n", "  (define (iter n acc)\n    (cond\n  \
    \    [(zero? n) acc]\n      [(even? n) (iter (/ n 2) (modulo (* acc acc) p))]\n\
    \      [else (iter (- n 1) (modulo (* acc 2) p))]))\n  (iter n 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(zero? n) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (* acc acc p))]\n          [else (modp-iter (- n 1) p (* acc 2 p))]))\n\
    \  (modp-iter n p 1))\n", "  (cond [(= n 0) 1]\n        [(even? n) (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else (modulo (* (modp (- n\
    \ 1) p) 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0)\
    \ acc]\n      [(= (remainder n 2) 0) (modp-iter (/ n 2) p (remainder (* acc acc)\
    \ p))]\n      [else (modp-iter (/ n 2) p (remainder (* acc acc acc) p))]))\n \
    \ (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(zero?\
    \ n) acc]\n      [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n  \
    \    [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n",
  "  (if (zero? n)\n      1\n      (let ([n (modulo n p)])\n        (if (even? n)\n\
    \            (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) n) p)))))\n</code>\n", "  (if (= n 0)\n\
    \      1\n      (let ([n (modulo n p)])\n        (if (even? n)\n            (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (* n (modp (-\
    \ n 1) p)) p)))))\n", "  (define (square x) (* x x))\n  (define (modp-iter n a)\n\
    \    (cond [(= n 0) a]\n          [(even? n) (modp-iter (/ n 2) (square a) p)]\n\
    \          [else (modp-iter (- n 1) (* a n) p)]))\n  (modp-iter n 1))\n", "  (define\
    \ (modp-iter n p acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (modulo (* acc acc) p))]\n          [else (modp-iter (- n 1) p (modulo\
    \ (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n\
    \    (cond [(= n 0) acc]\n          [(= n 1) (* acc 2) (modulo p)]\n         \
    \ [else (modp-iter (quotient n 2) p (* acc 2 (modulo p)))]))\n  (modp-iter n p\
    \ 1))\n", "  (if (= n 0)\n      1\n      (let* ([n (modulo n p)]\n           \
    \  [n (if (&lt; n 0) (+ n p) n)])\n        (if (even? n)\n            (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p) n) p)))))\n</code>\n", "  (define (modp-iter n p acc)\n\
    \    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (/ n 2) p (modulo\
    \ (* acc acc) p))]\n      [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n\
    \  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n   \
    \       (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (define (modp-iter n p acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(= n 1) (* acc acc)]\n      [(even? n)\
    \ (modp-iter (/ n 2) p (* acc acc))]\n      [else (modp-iter (- n 1) p (* acc\
    \ acc))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n      (let ([n\
    \ (modulo n p)])\n        (if (even? n)\n            (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)\n            (modulo (* n (modp (- n 1) p)) p)))))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p) 2) p))))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(zero?\
    \ n) acc]\n      [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n  \
    \    [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n",
  "  (cond\n    [(zero? n) 1]\n    [(zero? (modulo n 2)) (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p) 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond [(zero? n) acc]\n\
    \          [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n        \
    \  [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n",
  "  (define (modp-iter n p acc)\n    (if (zero? n)\n        acc\n        (modp-iter\
    \ (quotient n 2) p\n                   (if (odd? n)\n                       (modulo\
    \ (* acc acc 2) p)\n                       (modulo (* acc acc) p)))))\n  (modp-iter\
    \ n p 1))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(even? n)\
    \ (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1) p (* acc\
    \ 2 p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc)\
    \ p))]\n      [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter\
    \ n p 1))\n", "  (if (zero? n)\n      1\n      (let ([x (modp (quotient n 2) p)])\n\
    \        (if (even? n)\n            (modulo (* x x) p)\n            (modulo (*\
    \ x x x) p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 4]\n\
    \    [(= n 3) 8]\n    [(= n 4) 16]\n    [(= n 5) 32]\n    [(= n 6) 64]\n    [(=\
    \ n 7) 128]\n    [(= n 8) 256]\n    [(= n 9) 512]\n    [(= n 10) 1024]\n    [(=\
    \ n 11) 2048]\n    [(= n 12) 4096]\n    [(= n 13) 8192]\n    [(= n 14) 16384]\n\
    \    [(= n 15) 32768]\n    [(= n 16) 65536]\n    [(= n 17) 131072]\n    [(= n\
    \ 18) 262144]\n    [(= n 19) 524288]\n    [(= n 20) 1048576]\n    [(= n 21) 2097152]\n\
    \    [(= n 22) 4194304]\n    [(= n 23) 8388608]\n    [(= n 24) 16777216]\n   \
    \ [(= n 25) 33554432]\n    [(= n 26) 67108864]\n    [(= n 27) 134217728]\n   \
    \ [(= n 28) 268435456]\n    [(= n 29) 536870912]\n    [(= n 30) 1073741824]\n\
    \    [(= n 31) 2147483648]\n    [(= n 32) 4294967296]\n    [(= n 33) 8589934592]\n\
    \    [(= n 34) 17179869184]\n    [(= n 35) 34359738368]\n    [(= n 36) 68719476736]\n\
    \    [(= n 37) 137438953472]\n    [(= n 38) 274877906944]\n    [(= n 39) 549755813888]\n\
    \    [(= n 40) 1099511627776]\n    [(= n 41) 2199023255552]\n    [(= n 42) 4398046511104]\n\
    \    [(= n 43) 8796093022208]\n    [(= n 44) 17592186044416]\n   ", "  (if (zero?\
    \ n)\n      1\n      (let ([n (modulo n p)])\n        (if (even? n)\n        \
    \    (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (*\
    \ n (modp (- n 1) p)) p)))))\n</code>\n", "  (cond [(= n 0) 1]\n        [(even?\
    \ n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else (modulo\
    \ (* (modp (- n 1) p) 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond [(zero?\
    \ n) acc]\n          [(even? n) (modp-iter (/ n 2) p (* acc acc p))]\n       \
    \   [else (modp-iter (- n 1) p (* acc p))]))\n  (modp-iter n p 1))\n", "  (if\
    \ (zero? n)\n      1\n      (let ([n (modulo n p)])\n        (if (zero? n)\n \
    \           1\n            (let ([n (modulo (* n n) p)])\n              (if (zero?\
    \ n)\n                  1\n                  (let ([n (modulo (* n n) p)])\n \
    \                   (if (zero? n)\n                        1\n               \
    \         (let ([n (modulo (* n n) p)])\n                          (if (zero?\
    \ n)\n                              1\n                              (let ([n\
    \ (modulo (* n n) p)])\n                                (if (zero? n)\n      \
    \                              1\n                                    (let ([n\
    \ (modulo (* n n) p)])\n                                      (if (zero? n)\n\
    \                                          1\n                               \
    \           (let ([n (modulo (* n n) p)])\n                                  \
    \          (if (zero? n)\n                                                1\n\
    \                                                (let ([n (modulo (* n n) p)])\n\
    \                                                  (if (zero? n)\n           \
    \                                           1\n                              \
    \                        (let ([n (modulo (* n n) p)])\n                     \
    \                                   (if (zero? n)\n                          \
    \                                  1\n                                       \
    \                     (let ([n (modulo (* n n) p)])\n                        \
    \                                      (if (zero? n)\n                       \
    \                                           1\n                              \
    \                                    (let ([n (modulo (* n n) p)])\n         \
    \                                                           (if (zero? n)\n  \
    \                                                                      1\n   \
    \                                                                     (let ([n\
    \ (modulo (* n n) p)])\n                                                     \
    \                     (if (zero? n)\n                                        \
    \                                      1\n                                   \
    \                                           (let ([n (modulo (* n n) p)])\n  \
    \                                                                            \
    \  (if (zero? n)\n                                                           \
    \                         1\n                                                \
    \                                    (let ([n (modulo (* n n) p)])\n         \
    \                                                                            \
    \ (if (zero? n)\n                                                            \
    \                              1\n                                           \
    \                                               (let ([n (modulo (* n n) p)])\n\
    \                                                                            \
    \                (", "  (if (zero? n)\n      1\n      (let ([m (modulo n 2)])\n\
    \        (if (zero? m)\n            (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p)) p)\n            (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p)))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let ([m (modp (/ n\
    \ 2) p)])\n       (remainder (* m m) p))]\n    [else\n     (let ([m (modp (/ n\
    \ 2) p)])\n       (remainder (* m m 2) p))]))\n", "  (cond [(= n 0) 1]\n     \
    \   [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else\
    \ (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n      (let\
    \ ([m (modulo (modp (quotient n 2) p) p)])\n        (if (even? n)\n          \
    \  (modulo (* m m) p)\n            (modulo (* m m m) p)))))\n", "  (cond\n   \
    \ [(= n 0) 1]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* 2 (modp (- n 1) p)) p)]))\n", "  (if (= n 0)\n      1\n\
    \      (let ([m (modulo n 2)])\n        (if (= m 0)\n            (modulo (* (modp\
    \ (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (* (modp (/ n 2) p) (modp\
    \ (/ n 2) p) 2) p)))))\n", "  (cond [(= n 0) 1]\n        [(even? n) (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else (modulo (* (modp (- n\
    \ 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (* (modp\
    \ (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n      [(= (remainder\
    \ n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n      [else (modp-iter (- n 1)\
    \ p (* acc acc p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p result)\n\
    \    (cond\n      [(= n 0) result]\n      [(= (remainder n 2) 0) (modp-iter (/\
    \ n 2) p (* result result p))]\n      [else (modp-iter (- n 1) p (* result result\
    \ p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter n p acc)\n    (cond [(=\
    \ n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n\
    \          [else (modp-iter (- n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n\
    \ p 1))\n", "  (if (zero? n)\n      1\n      (let ([n (modulo n p)])\n       \
    \ (if (even? n)\n            (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n\
    \            (modulo (* (modp (- n 1) p) (modp (- n 1) p) 2) p)))))\n", "  (if\
    \ (= n 0)\n      1\n      (let ([x (modp (- n 1) p)])\n        (modulo (* x 2)\
    \ p))))\n", "  (if (= n 0)\n      1\n      (let ([a (modp (quotient n 2) p)])\n\
    \        (if (even? n)\n            (modulo (* a a) p)\n            (modulo (*\
    \ a a a) p)))))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 2]\n        [(= n 2)\
    \ 4]\n        [(= n 3) 8]\n        [(= n 4) 16]\n        [(= n 5) 32]\n      \
    \  [(= n 6) 64]\n        [(= n 7) 128]\n        [(= n 8) 256]\n        [(= n 9)\
    \ 512]\n        [(= n 10) 1024]\n        [(= n 11) 2048]\n        [(= n 12) 4096]\n\
    \        [(= n 13) 8192]\n        [(= n 14) 16384]\n        [(= n 15) 32768]\n\
    \        [(= n 16) 65536]\n        [(= n 17) 131072]\n        [(= n 18) 262144]\n\
    \        [(= n 19) 524288]\n        [(= n 20) 1048576]\n        [(= n 21) 2097152]\n\
    \        [(= n 22) 4194304]\n        [(= n 23) 8388608]\n        [(= n 24) 16777216]\n\
    \        [(= n 25) 33554432]\n        [(= n 26) 67108864]\n        [(= n 27) 134217728]\n\
    \        [(= n 28) 268435456]\n        [(= n 29) 536870912]\n        [(= n 30)\
    \ 1073741824]\n        [(= n 31) 2147483648]\n        [(= n 32) 4294967296]\n\
    \        [(= n 33) 8589934592]\n        [(= n 34) 17179869184]\n        [(= n\
    \ 35) 34359738368]\n        [(= n 36) 68719476736]\n        [(= n 37) 137438953472]\n\
    \        [(= n 38) 274877906944]\n        [(= n 39) 549755813888]\n        [(=\
    \ n 40) 1099511627776]\n        [(= n 41) 2199023255552]\n        [(= n 42) 4398046511104]\n\
    \        [(= n 43) 8796093022208]\n        [(= n 44) 17592186044416]\n       \
    \ [(=", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 4]\n    [(= n\
    \ 3) 8]\n    [(= n 4) 16]\n    [(= n 5) 32]\n    [(= n 6) 64]\n    [(= n 7) 128]\n\
    \    [(= n 8) 256]\n    [(= n 9) 512]\n    [(= n 10) 1024]\n    [(= n 11) 2048]\n\
    \    [(= n 12) 4096]\n    [(= n 13) 8192]\n    [(= n 14) 16384]\n    [(= n 15)\
    \ 32768]\n    [(= n 16) 65536]\n    [(= n 17) 131072]\n    [(= n 18) 262144]\n\
    \    [(= n 19) 524288]\n    [(= n 20) 1048576]\n    [(= n 21) 2097152]\n    [(=\
    \ n 22) 4194304]\n    [(= n 23) 8388608]\n    [(= n 24) 16777216]\n    [(= n 25)\
    \ 33554432]\n    [(= n 26) 67108864]\n    [(= n 27) 134217728]\n    [(= n 28)\
    \ 268435456]\n    [(= n 29) 536870912]\n    [(= n 30) 1073741824]\n    [(= n 31)\
    \ 2147483648]\n    [(= n 32) 4294967296]\n    [(= n 33) 8589934592]\n    [(= n\
    \ 34) 17179869184]\n    [(= n 35) 34359738368]\n    [(= n 36) 68719476736]\n \
    \   [(= n 37) 137438953472]\n    [(= n 38) 274877906944]\n    [(= n 39) 549755813888]\n\
    \    [(= n 40) 1099511627776]\n    [(= n 41) 2199023255552]\n    [(= n 42) 4398046511104]\n\
    \    [(= n 43) 8796093022208]\n    [(= n 44) 17592186044416]\n   ", "  (cond\n\
    \    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let* ([x (modp (/ n 2) p)]\n\
    \            [y (modulo (* x x) p)])\n       y)]\n    [else\n     (let* ([x (modp\
    \ (- n 1) p)]\n            [y (modulo (* x 2) p)])\n       y)]))\n", "  (define\
    \ (modp-iter n p result)\n    (cond [(= n 0) result]\n          [(even? n) (modp-iter\
    \ (/ n 2) p (modulo (* result result) p))]\n          [else (modp-iter (- n 1)\
    \ p (modulo (* result 2) p))]))\n  (modp-iter n p 1))\n", "  (define (modp-iter\
    \ n p r)\n    (if (= n 0)\n        r\n        (modp-iter (quotient n 2) p\n  \
    \                 (if (odd? n)\n                       (modulo (* r r p) p)\n\
    \                       (modulo (* r r) p)))))\n  (modp-iter n p 1))\n", "  (cond\n\
    \    [(zero? n) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n   \
    \ [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (define (modp-iter n p acc)\n\
    \    (if (zero? n)\n        acc\n        (modp-iter (quotient n 2) p\n       \
    \            (if (odd? n)\n                       (modulo (* acc 2) p)\n     \
    \                  (modulo acc p)))))\n  (modp-iter n p 1))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (/ n\
    \ 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (- n 1) p (modulo (* acc\
    \ 2) p))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n      (if (even?\
    \ n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (- n 1) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n\
    \    [(= n 2) 4]\n    [(= n 3) 8]\n    [(= n 4) 16]\n    [(= n 5) 32]\n    [(=\
    \ n 6) 64]\n    [(= n 7) 128]\n    [(= n 8) 256]\n    [(= n 9) 512]\n    [(= n\
    \ 10) 1024]\n    [(= n 11) 2048]\n    [(= n 12) 4096]\n    [(= n 13) 8192]\n \
    \   [(= n 14) 16384]\n    [(= n 15) 32768]\n    [(= n 16) 65536]\n    [(= n 17)\
    \ 131072]\n    [(= n 18) 262144]\n    [(= n 19) 524288]\n    [(= n 20) 1048576]\n\
    \    [(= n 21) 2097152]\n    [(= n 22) 4194304]\n    [(= n 23) 8388608]\n    [(=\
    \ n 24) 16777216]\n    [(= n 25) 33554432]\n    [(= n 26) 67108864]\n    [(= n\
    \ 27) 134217728]\n    [(= n 28) 268435456]\n    [(= n 29) 536870912]\n    [(=\
    \ n 30) 1073741824]\n    [(= n 31) 2147483648]\n    [(= n 32) 4294967296]\n  \
    \  [(= n 33) 8589934592]\n    [(= n 34) 17179869184]\n    [(= n 35) 34359738368]\n\
    \    [(= n 36) 68719476736]\n    [(= n 37) 137438953472]\n    [(= n 38) 274877906944]\n\
    \    [(= n 39) 549755813888]\n    [(= n 40) 1099511627776]\n    [(= n 41) 2199023255552]\n\
    \    [(= n 42) 4398046511104]\n    [(= n 43) 8796093022208]\n    [(= n 44) 17592186044416]\n\
    \   ", "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [(= n 2) 2]\n      \
    \  [(= n 3) 3]\n        [(= n 4) 4]\n        [(= n 5) 5]\n        [(= n 6) 6]\n\
    \        [(= n 7) 7]\n        [(= n 8) 8]\n        [(= n 9) 9]\n        [(= n\
    \ 10) 10]\n        [(= n 11) 11]\n        [(= n 12) 12]\n        [(= n 13) 13]\n\
    \        [(= n 14) 14]\n        [(= n 15) 15]\n        [(= n 16) 16]\n       \
    \ [(= n 17) 17]\n        [(= n 18) 18]\n        [(= n 19) 19]\n        [(= n 20)\
    \ 20]\n        [(= n 21) 21]\n        [(= n 22) 22]\n        [(= n 23) 23]\n \
    \       [(= n 24) 24]\n        [(= n 25) 25]\n        [(= n 26) 26]\n        [(=\
    \ n 27) 27]\n        [(= n 28) 28]\n        [(= n 29) 29]\n        [(= n 30) 30]\n\
    \        [(= n 31) 31]\n        [(= n 32) 32]\n        [(= n 33) 33]\n       \
    \ [(= n 34) 34]\n        [(= n 35) 35]\n        [(= n 36) 36]\n        [(= n 37)\
    \ 37]\n        [(= n 38) 38]\n        [(= n 39) 39]\n        [(= n 40) 40]\n \
    \       [(= n 41) 41]\n        [(= n 42) 42]\n        [(= n 43) 43]\n        [(=\
    \ n 44) 44]\n        [(= n 45) 45]\n        [(= n 46) 46]\n        [(= n 47) 47]\n\
    \        [(= n 48) 48]\n        [(= n 49) 49]\n        [(= n 50) 50]\n       \
    \ [(= n 51) 51]\n        [(= n 52) 52]\n        [(= n 53) 53]\n        [(= n 54)\
    \ 54]\n        [(= n 55) 55]\n        [(= n 56", "  (cond\n    [(zero? n) 1]\n\
    \    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp\
    \ (- n 1) p) 2) p)]))\n", "  (cond [(= n 0) 1]\n        [(even? n) (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n        [else (modulo (* (modp (- n\
    \ 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n        \
    \  (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp\
    \ (- n 1) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p)\
    \ 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(= n 1) (* acc acc)]\n      [(even? n) (modp-iter (/ n 2) p (* acc acc))]\n\
    \      [else (modp-iter (- n 1) p (* acc acc))]))\n  (modp-iter n p 1))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
