name: HumanEval_57_monotonic
language: rkt
prompt: "#lang racket\n\n#| Return #t is list elements are monotonically increasing\
  \ or decreasing.\n>>> (monotonic (list 1 2 4 20))\n#t\n>>> (monotonic (list 1 20\
  \ 4 10))\n#f\n>>> (monotonic (list 4 1 0 -10))\n#t|#\n(define (monotonic l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
  \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
  \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n   \
  \ (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list\
  \ 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9\
  \ 9)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (positive? (difference (first l) (second\
    \ l)))\n          (monotonic (rest l))) #t]\n    [(and (negative? (difference\
    \ (first l) (second l)))\n          (monotonic (rest l))) #t]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l)) (not (member (first l) (rest\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\
    \ (not (member (first l) (rest l))))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (first l)) (positive?\
    \ (second l)))\n     (and (monotonic (rest l)) (positive? (sub1 (first l)) (second\
    \ l)))]\n    [(and (negative? (first l)) (negative? (second l)))\n     (and (monotonic\
    \ (rest l)) (negative? (sub1 (first l)) (second l)))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (or (empty? (rest (rest l)))\n                  (< (second\
    \ l) (third l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (or (empty? (rest (rest l)))\n                  (>\
    \ (second l) (third l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (every < (rest l)))]\n\
    \        [(< (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (every > (rest l)))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n\
    \        [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (positive? (first l))\n          (positive? (second l)))\n     (and\
    \ (positive? (first l))\n          (monotonic (rest l)))]\n    [(and (negative?\
    \ (first l))\n          (negative? (second l)))\n     (and (negative? (first l))\n\
    \          (monotonic (rest l)))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n\
    \        [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n         (and\
    \ (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n         \
    \         (< (second l) (third l))))]\n        [(> (first l) (second l))\n   \
    \      (and (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n\
    \                  (> (second l) (third l))))]\n        [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first l)\
    \ (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n", "  (cond\n    [(empty? l) #t]\n   \
    \ [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n   \
    \ [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n      \
    \  [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (or (empty? (rest (rest l)))\n                  (<\
    \ (second l) (third l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (or (empty? (rest (rest l)))\n                  (>\
    \ (second l) (third l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest\
    \ l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (> (second\
    \ l) (third l))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l))\n  \
    \        (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\n    \
    \      (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n\
    \        [(empty? (rest l)) #t]\n        [(and (<= (first l) (second l))\n   \
    \           (monotonic (rest l))) #t]\n        [(and (>= (first l) (second l))\n\
    \              (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond\n \
    \   [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(and (>= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [(and (<= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (for/and ([x (in-list (rest l))])\n                (< (first\
    \ l) x)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (for/and ([x (in-list (rest l))])\n                (> (first\
    \ l) x)))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (<= (first l) (second l)))]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (>= (first l) (second\
    \ l)))]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n     \
    \   [(> (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n  \
    \      [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest\
    \ l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (and (monotonic (rest l)) (not (member (first l)\
    \ (rest l))))]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (not (member\
    \ (first l) (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(< (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n        [(and\
    \ (>= (first l) (second l)) (monotonic (rest l))) #t]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (> (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (< (first l) (second l)) (monotonic (rest l))))\n     #t]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest\
    \ l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n  \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first\
    \ l)))\n          (positive? (sub1 (second l))))\n     (and (monotonic (rest l))\n\
    \          (positive? (sub1 (first l)))\n          (positive? (sub1 (second l))))]\n\
    \    [(and (negative? (sub1 (first l)))\n          (negative? (sub1 (second l))))\n\
    \     (and (monotonic (rest l))\n          (negative? (sub1 (first l)))\n    \
    \      (negative? (sub1 (second l))))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second l))\n\
    \         (and (monotonic (rest l))\n              (for/and ([x (rest l)]\n  \
    \                      [y (rest (rest l))])\n                (< x y)))]\n    \
    \    [(< (first l) (second l))\n         (and (monotonic (rest l))\n         \
    \     (for/and ([x (rest l)]\n                        [y (rest (rest l))])\n \
    \               (> x y)))]\n        [else #f]))\n", "  (cond\n    [(null? l) #t]\n\
    \    [(null? (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n  \
    \  [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (positive? (first l)) (negative? (second l))) #f]\n\
    \    [(and (negative? (first l)) (positive? (second l))) #f]\n    [else (monotonic\
    \ (rest l))]))\n", "  (define (monotonic-helper l direction)\n    (cond\n    \
    \  [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(and (= direction 1)\
    \ (< (first l) (second l)))\n       (monotonic-helper (rest l) direction)]\n \
    \     [(and (= direction -1) (> (first l) (second l)))\n       (monotonic-helper\
    \ (rest l) direction)]\n      [(and (= direction 0) (< (first l) (second l)))\n\
    \       (monotonic-helper (rest l) 1)]\n      [(and (= direction 0) (> (first\
    \ l) (second l)))\n       (monotonic-helper (rest l) -1)]\n      [else #f]))\n\
    \  (monotonic-helper l 0))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (first l)) (positive? (second l)))\n     (and (positive? (first l)) (positive?\
    \ (second l)) (monotonic (rest l)))]\n    [(and (negative? (first l)) (negative?\
    \ (second l)))\n     (and (negative? (first l)) (negative? (second l)) (monotonic\
    \ (rest l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n\
    \         (and (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n\
    \                  (< (second l) (third l))))]\n        [(> (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (or (empty? (rest (rest\
    \ l)))\n                  (> (second l) (third l))))]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(< (first l) (second l))\n         (and (monotonic (rest l))\n            \
    \  (or (empty? (rest (rest l)))\n                  (< (second l) (third l))))]\n\
    \        [(> (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(and (<= (first l) (second l))\n              (monotonic (rest\
    \ l))) #t]\n        [(and (>= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(and (<= (first l) (second l)) (monotonic (rest l)))\
    \ #t]\n        [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n   \
    \     [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n    [(>\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (> (second l) (third l))))]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(< (first l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (difference (first l)\
    \ (second l)))\n          (monotonic (rest l))) #t]\n    [(and (negative? (difference\
    \ (first l) (second l)))\n          (monotonic (rest l))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n  \
    \      [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n         (and\
    \ (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n         \
    \         (< (second l) (third l))))]\n        [(> (first l) (second l))\n   \
    \      (and (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n\
    \                  (> (second l) (third l))))]\n        [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (and (first l) (second\
    \ l)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (and (first l) (second l)))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (every < (rest l)))]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (every > (rest l)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest\
    \ l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n  \
    \  [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n        [(and\
    \ (>= (first l) (second l)) (monotonic (rest l))) #t]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l)\
    \ #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n   \
    \      (and (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n\
    \                  (< (second l) (third l))))]\n        [(> (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (or (empty? (rest (rest\
    \ l)))\n                  (> (second l) (third l))))]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n    [(>\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (> (second l) (third l))))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (<= (first l) (second l)))]\n        [(> (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (>= (first l) (second\
    \ l)))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(and (<= (first l) (second l))\n              (monotonic (rest\
    \ l))) #t]\n        [(and (>= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \        [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n\
    \    [(and (or (positive? (sub1 (car l))) (negative? (sub1 (car l))))\n      \
    \    (or (positive? (sub1 (cadr l))) (negative? (sub1 (cadr l)))))\n     (and\
    \ (positive? (sub1 (car l))) (positive? (sub1 (cadr l))))\n     (monotonic (cdr\
    \ l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l))\
    \ #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (apply < (rest l)))]\n        [(> (first l) (second l))\n     \
    \    (and (monotonic (rest l))\n              (apply > (rest l)))]\n        [else\
    \ #f]))\n", "  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n", "  (cond\n    [(empty? l) #t]\n   \
    \ [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n   \
    \ [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (< (second l) (third l))))]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (> (second l) (third l))))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (positive? (sub1 (length l))))]\n    [(> (first l) (second l)) (and\
    \ (monotonic (rest l)) (negative? (sub1 (length l))))]\n    [else #f]))\n", " \
    \ (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l)\
    \ #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n   \
    \      (and (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n\
    \                  (< (second l) (third l))))]\n        [(> (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (or (empty? (rest (rest\
    \ l)))\n                  (> (second l) (third l))))]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first\
    \ l) (second l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n\
    \         (and (monotonic (rest l))\n              (for/and ([x (in-list (rest\
    \ l))]\n                        [y (in-list (rest (rest l)))])\n             \
    \   (< x y)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (for/and ([x (in-list (rest l))]\n                      \
    \  [y (in-list (rest (rest l)))])\n                (> x y)))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first l) (second\
    \ l))\n              (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l))\n              (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (or (empty? (rest (rest\
    \ l)))\n                  (< (second l) (third l))))]\n        [(> (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (or (empty? (rest (rest\
    \ l)))\n                  (> (second l) (third l))))]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (< (second l) (third l))))]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (> (second l) (third l))))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive?\
    \ (sub1 (second l))))\n     (and (positive? (sub1 (first l))) (monotonic (rest\
    \ l)))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second l))))\n\
    \     (and (negative? (sub1 (first l))) (monotonic (rest l)))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(or (and (< (first\
    \ l) (second l))\n                  (monotonic (rest l)))\n             (and (>\
    \ (first l) (second l))\n                  (monotonic (rest l)))) #t]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(and (<= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [(and (>= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(< (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n    \
    \    [(and (positive? (sub1 (first l)))\n              (negative? (sub1 (second\
    \ l))))\n         (monotonic (rest l))]\n        [(and (negative? (sub1 (first\
    \ l)))\n              (positive? (sub1 (second l))))\n         (monotonic (rest\
    \ l))]\n        [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr\
    \ l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) #t)]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) #t)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l))))\n     #t]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n   \
    \ [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l)\
    \ (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (or (empty? (rest (rest l)))\n                  (< (second\
    \ l) (third l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (or (empty? (rest (rest l)))\n                  (>\
    \ (second l) (third l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest\
    \ l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [(> (first\
    \ l) (second l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n        [(and\
    \ (>= (first l) (second l)) (monotonic (rest l))) #t]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n", "  (cond\n    [(empty? l) #t]\n   \
    \ [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (or (empty? (rest (rest\
    \ l)))\n                  (< (second l) (third l))))]\n        [(> (first l) (second\
    \ l))\n         (and (monotonic (rest l))\n              (or (empty? (rest (rest\
    \ l)))\n                  (> (second l) (third l))))]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (not (member (first l) (rest l))))]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [else #f]))\n",
  "  (if (null? l)\n      #t\n      (let ([rest (cdr l)])\n        (if (null? rest)\n\
    \            #t\n            (let ([first (car l)]\n                  [second\
    \ (car rest)])\n              (if (< first second)\n                  (and (monotonic\
    \ rest)\n                       (every (\u03BB (x) (<= first x)) rest))\n    \
    \              (and (monotonic rest)\n                       (every (\u03BB (x)\
    \ (>= first x)) rest))))))))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (and (monotonic (rest l))\n         \
    \                          (or (empty? (rest (rest l)))\n                    \
    \                   (< (second l) (third l))))]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l))\n                                   (or (empty? (rest\
    \ (rest l)))\n                                       (> (second l) (third l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(or (and (< (first\
    \ l) (second l))\n                  (monotonic (rest l)))\n             (and (>\
    \ (first l) (second l))\n                  (monotonic (rest l))))\n         #t]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n       \
    \   (<= (first l) (second l)))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (>= (first l) (second l)))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (or (empty? (rest\
    \ (rest l)))\n                  (< (second l) (third l))))]\n        [(> (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (> (second l) (third l))))]\n        [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(< (first l) (second l))\n         (and (monotonic (rest l))\n            \
    \  (or (empty? (rest (rest l)))\n                  (< (second l) (third l))))]\n\
    \        [(> (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(or (= (first l) (second l))\n             (and (<\
    \ (first l) (second l))\n                  (monotonic (rest l)))\n           \
    \  (and (> (first l) (second l))\n                  (monotonic (rest l))))\n \
    \        true]\n        [else false]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(and (<= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [(and (>= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(< (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (difference (first l) (second l)))\n          (monotonic (rest l))) #t]\n  \
    \  [(and (negative? (difference (first l) (second l)))\n          (monotonic (rest\
    \ l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n  \
    \  [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l)))\n        \
    \  (positive? (sub1 (second l))))\n     (and (monotonic (rest l))\n          (positive?\
    \ (sub1 (first l)))\n          (positive? (sub1 (second l))))]\n    [(and (negative?\
    \ (sub1 (first l)))\n          (negative? (sub1 (second l))))\n     (and (monotonic\
    \ (rest l))\n          (negative? (sub1 (first l)))\n          (negative? (sub1\
    \ (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (> (second\
    \ l) (third l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l))\
    \ #t]\n        [(and (<= (first l) (second l))\n              (monotonic (rest\
    \ l))) #t]\n        [(and (>= (first l) (second l))\n              (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(and (>= (first l) (second l)) (monotonic (rest l)))\
    \ #t]\n        [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n   \
    \     [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(< (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \        [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n        [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(and (<= (first l) (second l))\n              (monotonic (rest l))) #t]\n \
    \       [(and (>= (first l) (second l))\n              (monotonic (rest l))) #t]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n       \
    \   (not (member (first l) (rest l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (not (member (first l) (rest l))))]\n    [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(< (first l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]))\n", "  (define (loop l prev)\n    (cond\n      [(empty? l) #t]\n  \
    \    [(> (first l) prev) (loop (rest l) (first l))]\n      [(< (first l) prev)\
    \ (loop (rest l) (first l))]\n      [else #f]))\n  (loop (rest l) (first l)))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (> (second\
    \ l) (third l))))]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l))\
    \ #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(< (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \        [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n        [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(and (positive? (sub1 (first l)))\n              (negative? (sub1 (second l))))\n\
    \         (and (monotonic (rest l))\n              (positive? (sub1 (first (rest\
    \ l)))))]\n        [(and (negative? (sub1 (first l)))\n              (positive?\
    \ (sub1 (second l))))\n         (and (monotonic (rest l))\n              (negative?\
    \ (sub1 (first (rest l)))))]\n        [else\n         (and (monotonic (rest l))\n\
    \              (positive? (sub1 (first (rest l)))))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n    [(>\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (> (second l) (third l))))]))\n", "  (let loop\
    \ ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (let ([cur (car\
    \ l)])\n          (if (and (< prev cur) (loop (cdr l) cur))\n              #t\n\
    \              (and (> prev cur) (loop (cdr l) cur)))))))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (<= (first l) (second l)))]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (>= (first l) (second\
    \ l)))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (< (second l) (third l))))]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (> (second l) (third l))))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) #t)]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) #t)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
