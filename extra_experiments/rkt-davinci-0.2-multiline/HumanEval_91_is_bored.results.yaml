language: rkt
name: HumanEval_91_is_bored
results:
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (count-boredoms\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (count-boredoms (rest S)))]\n      [else (count-boredoms (rest S))]))\n  (count-boredoms\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2hcooayq.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2hcooayq.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2hcooayq.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2hcooayq.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2hcooayq.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (count-boredoms\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (count-boredoms (rest S)))]\n      [else (count-boredoms (rest S))]))\n  (count-boredoms\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2hcooayq.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2hcooayq.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2hcooayq.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2hcooayq.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2hcooayq.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([boredoms (regexp-match*\
    \ #rx\"I\" S)])\n    (length boredoms)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:21:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:22:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:23:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:24:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:25:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([boredoms (regexp-match*\
    \ #rx\"I\" S)])\n    (length boredoms)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:21:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:22:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:23:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:24:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp08g6tj1i.rkt:25:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond [(empty? S) 0]\n\
    \        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \        [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6jog4uyg.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (s) (string=?\
    \ (substring s 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq44zjujl.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpq44zjujl.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq44zjujl.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (string-split\
    \ S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"I\" s)) sentences))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp71a6m_ba.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp71a6m_ba.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp71a6m_ba.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp71a6m_ba.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp71a6m_ba.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (regexp-split\
    \ #rx\"[.?!]\" S)])\n    (for/fold ([boredoms 0]) ([sentence sentences])\n   \
    \   (if (regexp-match #rx\"^I\" sentence)\n          (+ boredoms 1)\n        \
    \  boredoms))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hdfwu3l.rkt:24:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hdfwu3l.rkt:27:4

    actual:     1

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (string-length (regexp-match\
    \ #rx\"I\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyjs8sbkg.rkt:19:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyjs8sbkg.rkt:20:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: '(\"I\")\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyjs8sbkg.rkt:21:4\n\nstring-length: contract violation\n \
    \ expected: string?\n  given: '(\"I\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyjs8sbkg.rkt:22:4\n\nstring-length:\
    \ contract violation\n  expected: string?\n  given: '(\"I\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyjs8sbkg.rkt:23:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: '(\"I\")\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyjs8sbkg.rkt:24:4\n\nstring-length: contract vio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (s) (string-prefix? \"I\" (string-trim s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:24:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: '(\"I feel good today\"\
    \ \" I will be productive\" \" will kill It\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:25:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"You and I are\
    \ going for a walk\")\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (cond [(empty? words) 0]\n          [(string=? (first words)\
    \ \"I\") (+ 1 (is_bored (string-join (rest words) #\\space)))]\n          [else\
    \ (is_bored (string-join (rest words) #\\space))])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tfe7ylf.rkt:22:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2tfe7ylf.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tfe7ylf.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2tfe7ylf.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tfe7ylf.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (regexp-match #rx\"\
    I\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:20:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:22:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:23:4\nactual:     1\nexpected:\
    \   2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdrq3r24e.rkt:24:4\nactual:     1\nexpected:   0\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (s) (string-contains? s \"I\"))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp57yy_7mv.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmp57yy_7mv.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp57yy_7mv.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmp57yy_7mv.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp57yy_7mv.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmp57yy_7mv.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp57yy_7mv.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  ot"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([bored 0]) ([s S])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ bored 1)\n          bored))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4z1k1n7r.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4z1k1n7r.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4z1k1n7r.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4z1k1n7r.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4z1k1n7r.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([s (string-split\
    \ S #\\.)])\n    (for/fold ([bored 0]) ([s s])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ bored 1)\n          bored))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpravtc0rr.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpravtc0rr.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpravtc0rr.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpravtc0rr.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpravtc0rr.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (cond\n      [(empty? words) 0]\n      [(string=? (first\
    \ words) \"I\") (+ 1 (is_bored (string-join (rest words) \" \")))]\n      [else\
    \ (is_bored (string-join (rest words) \" \"))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhauaero.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnhauaero.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhauaero.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnhauaero.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhauaero.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (s) (string=?\
    \ (string-upcase (substring s 0 1)) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp96b_zcc3.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp96b_zcc3.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp96b_zcc3.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (s) (string-prefix? \"I\" (string-trim s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:24:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: '(\"I feel good today\"\
    \ \" I will be productive\" \" will kill It\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:25:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"You and I are\
    \ going for a walk\")\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond [(empty? S) 0]\n\
    \        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \        [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6jog4uyg.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6jog4uyg.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (string-split\
    \ S #\\.)])\n    (count (lambda (s) (and (string-prefix? \"I\" s) (string-trim\
    \ s))) sentences)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl25fu2s3.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl25fu2s3.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl25fu2s3.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl25fu2s3.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl25fu2s3.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (string-take x 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcywr_jfb.rkt:12:32: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmpcywr_jfb.rkt:12:32\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(string=? S\
    \ \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mo6lui3.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9mo6lui3.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mo6lui3.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mo6lui3.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9mo6lui3.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is_bored-iter\
    \ S i)\n    (cond\n      [(= i (string-length S)) 0]\n      [(string=? (substring\
    \ S i (+ i 2)) \"I \") (+ 1 (is_bored-iter S (+ i 2)))]\n      [else (is_bored-iter\
    \ S (+ i 1))]))\n  (is_bored-iter S 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqaeh20v.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 12\n  valid range:\
    \ [0, 11]\n  string: \"Hello world\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqaeh20v.rkt:25:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 17\n  valid range: [0, 16]\n \
    \ string: \"Is the sky blue?\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpyqaeh20v.rkt:26:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 12\n  valid range: [0, 11]\n \
    \ string: \"I love It !\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpyqaeh20v.rkt:27:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 4\n  valid range: [0, 3]\n  string:\
    \ \"bIt\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyqaeh20v.rkt:28:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 54\n  valid"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-contains?\
    \ (first S) \"I\") (loop (rest S) (+ count 1))]\n          [else (loop (rest S)\
    \ count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0u0a9of.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf0u0a9of.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0u0a9of.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0u0a9of.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf0u0a9of.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (cond [(null? words) 0]\n          [(string=? (car words)\
    \ \"I\")\n           (+ 1 (is_bored (string-join (cdr words) #\\space)))]\n  \
    \        [else (is_bored (string-join (cdr words) #\\space))])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl585byvi.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl585byvi.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl585byvi.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl585byvi.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl585byvi.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([sentence sentences])\n      (if (string-prefix?\
    \ \"I\" sentence)\n          (+ boredoms 1)\n          boredoms))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (regexp-match #rx\"\
    I\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:20:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:22:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:23:4\nactual:     1\nexpected:\
    \   2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdrq3r24e.rkt:24:4\nactual:     1\nexpected:   0\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (x) (string-prefix? \"I\" x))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  ot"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (x) (string-prefix? \"I\" x))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  ot"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (s) (string=?\
    \ (substring s 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq44zjujl.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpq44zjujl.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq44zjujl.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6tptxu9b.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6tptxu9b.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6tptxu9b.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6tptxu9b.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6tptxu9b.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill "
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond [(empty? S) 0]\n          [(string=? (first S) \"I\") (+ 1 (is-bored-helper\
    \ (rest S)))]\n          [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnsoxr24.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprnsoxr24.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprnsoxr24.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnsoxr24.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprnsoxr24.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x)\n  \
    \         (and (string=? (substring x 0 1) \"I\")\n                (or (string=?\
    \ (substring x (sub1 (string-length x)) (string-length x)) \".\")\n          \
    \          (string=? (substring x (sub1 (string-length x)) (string-length x))\
    \ \"?\")\n                    (string=? (substring x (sub1 (string-length x))\
    \ (string-length x)) \"!\"))))\n         (string-split S #\\space)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_wboatl.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_wboatl.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_wboatl.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_wboatl.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_wboatl.rkt:28:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (length (filter (lambda (w) (string=? w \"I\")) words))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmklkwcx.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqmklkwcx.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmklkwcx.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqmklkwcx.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmklkwcx.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqmklkwcx.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (equal? (substring x 0 1) \"I\") (not (equal? x \"\"))))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukicmwj0.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpukicmwj0.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpukicmwj0.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([L (string-split\
    \ S #\\.)])\n    (for/fold ([count 0]) ([sentence L])\n      (if (string-prefix?\
    \ \"I\" sentence)\n          (+ count 1)\n          count))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpao3r8qve.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpao3r8qve.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpao3r8qve.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpao3r8qve.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpao3r8qve.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps75vpkmh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (regexp-match #rx\"\
    I\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:20:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:22:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:23:4\nactual:     1\nexpected:\
    \   2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdrq3r24e.rkt:24:4\nactual:     1\nexpected:   0\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #\\.)\n         (lambda (s) (string-prefix? \"I\" s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpar9r8qew.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpar9r8qew.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpar9r8qew.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpar9r8qew.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpar9r8qew.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (filter (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n                  (regexp-split #rx\"\
    [.?!]\" S))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yobzv1t.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6yobzv1t.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6yobzv1t.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([bored 0]) ([s S])\n      (if (and (string-contains?\
    \ s #\\I)\n               (not (string-contains? s #\\i)))\n          (+ bored\
    \ 1)\n          bored))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwipfds1x.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwipfds1x.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwipfds1x.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwipfds1x.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwipfds1x.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpopc0c28d.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmpopc0c28d.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (split-string S \"[.!?]\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn98_t33c.rkt:13:10: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpn98_t33c.rkt:13:10\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([s (string-split\
    \ S #\\.)])\n    (for/fold ([bored 0]) ([s s])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ bored 1)\n          bored))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpravtc0rr.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpravtc0rr.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpravtc0rr.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpravtc0rr.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpravtc0rr.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpopc0c28d.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmpopc0c28d.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? (substring x 0 1) \"I\")\n                          (or (string=?\
    \ (substring x (substring-length x -1) (substring-length x)) \".\")\n        \
    \                      (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \"?\")\n                              (string=? (substring x (substring-length\
    \ x -1) (substring-length x)) \"!\"))\n                          ))\n        \
    \ (string-split S \" \")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsmpe0p4m.rkt:13:54: substring-length: unbound identifier\n  in:\
    \ substring-length\n  location...:\n   /tmp/tmpsmpe0p4m.rkt:13:54\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (cond\n      [(empty? words) 0]\n      [(equal? (first words)\
    \ \"I\") (+ 1 (is_bored (string-join (rest words) #\\space)))]\n      [else (is_bored\
    \ (string-join (rest words) #\\space))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp12e68ut1.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp12e68ut1.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp12e68ut1.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp12e68ut1.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp12e68ut1.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (first S))\n           (loop (rest S) (+ count 1))]\n          [else (loop\
    \ (rest S) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (first S))\n           (loop (rest S) (+ count 1))]\n          [else (loop\
    \ (rest S) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvnt2flti.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps75vpkmh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpopc0c28d.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmpopc0c28d.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2 (string-length\
    \ S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31ovzcz3.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp31ovzcz3.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp31ovzcz3.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31ovzcz3.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp31ovzcz3.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp85upu8kz.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp85upu8kz.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp85upu8kz.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp85upu8kz.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp85upu8kz.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp85upu8kz.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ x \"I\")) (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn9ja891j.rkt:19:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn9ja891j.rkt:20:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn9ja891j.rkt:21:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn9ja891j.rkt:22:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn9ja891j.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (s) (string-prefix? \"I\" (string-trim s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:24:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: '(\"I feel good today\"\
    \ \" I will be productive\" \" will kill It\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:25:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"You and I are\
    \ going for a walk\")\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\")\n     (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n2pjhq5.rkt:23:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n2pjhq5.rkt:24:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n2pjhq5.rkt:25:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n2pjhq5.rkt:26:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3n2pjhq5.rkt:27:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([count 0]) ([s S])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ count 1)\n          count))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjhwi7j.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjhwi7j.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (equal?\
    \ (string-upcase (substring x 0 1)) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp43yf_3oo.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp43yf_3oo.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp43yf_3oo.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? \"I\" (car x)) (string=? \" \" (cadr x))))\n         (regexp-split\
    \ #rx\"\\\\.|\\\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp740c7icd.rkt:20:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp740c7icd.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Is the sky blue\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp740c7icd.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"I love It \"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp740c7icd.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp740c7icd.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"I feel good today\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp740c7icd.rkt:25:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  giv"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length\
    \ S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsbzkuqb9.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"I\" s)) S))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp596po4ud.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp596po4ud.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp596po4ud.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp596po4ud.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp596po4ud.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (s) (string=?\
    \ (string-upcase (substring s 0 1)) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp96b_zcc3.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp96b_zcc3.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp96b_zcc3.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored? s)\n\
    \    (string-contains? s \"I\"))\n  (define (count-boredoms s)\n    (cond [(is-bored?\
    \ s) 1]\n          [else 0]))\n  (define (split-sentences s)\n    (regexp-split\
    \ #rx\"[.?!]\" s))\n  (define (count-boredoms-in-sentences s)\n    (apply + (map\
    \ count-boredoms (split-sentences s))))\n  (count-boredoms-in-sentences S))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3cmbtcv7.rkt:29:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3cmbtcv7.rkt:31:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3cmbtcv7.rkt:32:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3cmbtcv7.rkt:33:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ x \"I\")) (split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyrkmsf1i.rkt:12:40: split: unbound identifier\n  in: split\n  location...:\n\
    \   /tmp/tmpyrkmsf1i.rkt:12:40\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (split-string S \"[.?!]\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptvwbhhpw.rkt:13:10: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmptvwbhhpw.rkt:13:10\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([count 0]) ([s S])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ count 1)\n          count))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjhwi7j.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjhwi7j.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(string=? S\
    \ \"\") 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptgo8d58e.rkt:23:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptgo8d58e.rkt:24:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptgo8d58e.rkt:25:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptgo8d58e.rkt:26:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptgo8d58e.rkt:27:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps75vpkmh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond [(string=? S \"\"\
    ) 0]\n        [(string-contains S \"I\") (+ 1 (is_bored (string-drop S 1)))]\n\
    \        [else (is_bored (string-drop S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjb1d60_2.rkt:13:10: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpjb1d60_2.rkt:13:10\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond [(empty? S) 0]\n\
    \        [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n        [else\
    \ (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4kg0xa55.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4kg0xa55.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4kg0xa55.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4kg0xa55.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4kg0xa55.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill "
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(equal? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split\
    \ S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppd2ezrir.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppd2ezrir.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppd2ezrir.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppd2ezrir.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppd2ezrir.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppd2ezrir.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (x) (string-prefix? \"I\" x))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  ot"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? (string-take x 1) \"I\")\n                          (string=? (string-take\
    \ x 2) \"I \")))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp09apf41c.rkt:12:37: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmp09apf41c.rkt:12:37\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (regexp-split\
    \ #rx\"[.?!]\" S)])\n    (length (filter (lambda (s) (regexp-match #rx\"^I\" s))\
    \ sentences))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1lc9om_d.rkt:21:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1lc9om_d.rkt:24:4

    actual:     1

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([sentence sentences])\n      (if (string-prefix?\
    \ \"I\" sentence)\n          (+ boredoms 1)\n          boredoms))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([sentence sentences])\n      (if (string-prefix?\
    \ \"I\" sentence)\n          (+ boredoms 1)\n          boredoms))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [boredoms 0])\n    (cond [(empty? S) boredoms]\n    \
    \      [(string-prefix? \"I\" (first S))\n           (loop (rest S) (+ boredoms\
    \ 1))]\n          [else (loop (rest S) boredoms)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiq5oaz14.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiq5oaz14.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiq5oaz14.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiq5oaz14.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiq5oaz14.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (length (filter (lambda (w) (string=? w \"I\")) words))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmklkwcx.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqmklkwcx.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmklkwcx.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqmklkwcx.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmklkwcx.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqmklkwcx.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? (substring x 0 1) \"I\")\n                          (not (string=?\
    \ (substring x 1 2) \" \"))))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvupcd8ys.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvupcd8ys.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvupcd8ys.rkt:25:4\nactual:     0\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (regexp-match #rx\"\
    ^I\" (string-split S #rx\"[.?!]\"))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2783zffv.rkt:19:4\n\
    \nregexp-match: contract violation\n  expected: (or/c bytes? string? input-port?\
    \ path?)\n  given: '(\"Hello world\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2783zffv.rkt:20:4\n\nregexp-match:\
    \ contract violation\n  expected: (or/c bytes? string? input-port? path?)\n  given:\
    \ '(\"Is the sky blue\")\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2783zffv.rkt:21:4\n\nregexp-match:\
    \ contract violation\n  expected: (or/c bytes? string? input-port? path?)\n  given:\
    \ '(\"I love It \")\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2783zffv.rkt:22:4\n\nregexp-match: contract\
    \ violation\n  expected: (or/c bytes? string? input-port? path?)\n  given: '(\"\
    bIt\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2783zffv.rkt:23:4\n\nregexp-match: contract violation\n  expected:\
    \ ("
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ((count 0))\n    (for\
    \ ((word (in-string (string-split S #\\space)))\n          (sentence (in-string\
    \ (string-split S #\\.))))\n      (when (and (string=? word \"I\")\n         \
    \        (string-contains? sentence \"I\"))\n        (set! count (+ count 1))))\n\
    \    count))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt4zz__c.rkt:25:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdt4zz__c.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt4zz__c.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdt4zz__c.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt4zz__c.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (x) (string-prefix? \"I\" x))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  ot"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? (substring x 0 1) \"I\")\n                          (or (string=?\
    \ (substring x (substring-length x -1) (substring-length x)) \".\")\n        \
    \                      (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \"?\")\n                              (string=? (substring x (substring-length\
    \ x -1) (substring-length x)) \"!\")))))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpp14b2sam.rkt:16:37: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is_bored-helper\
    \ S i)\n    (if (= i (string-length S))\n        0\n        (if (string=? (substring\
    \ S i (+ i 1)) \"I\")\n            (+ 1 (is_bored-helper S (+ i 1)))\n       \
    \     (is_bored-helper S (+ i 1)))))\n  (is_bored-helper S 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjesp88pf.rkt:26:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjesp88pf.rkt:27:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjesp88pf.rkt:28:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjesp88pf.rkt:29:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjesp88pf.rkt:30:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpopc0c28d.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmpopc0c28d.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (equal?\
    \ (string-upcase (substring x 0 1)) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp43yf_3oo.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp43yf_3oo.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp43yf_3oo.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (s) (string-prefix? \"I\" (string-trim s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6q5chmx.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:24:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: '(\"I feel good today\"\
    \ \" I will be productive\" \" will kill It\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6q5chmx.rkt:25:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"You and I are\
    \ going for a walk\")\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpd6q5chmx.rkt:13:9>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond [(string=? S \"\"\
    ) 0]\n        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n        [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm5azt4s.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmplm5azt4s.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplm5azt4s.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplm5azt4s.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmplm5azt4s.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-boredoms (string-split\
    \ S #\\.)\n                  (string-split S #\\?)\n                  (string-split\
    \ S #\\!)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoqr1k00m.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmpoqr1k00m.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is_bored-helper\
    \ S)\n    (cond [(empty? S) 0]\n          [(string=? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n          [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu789m_8c.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu789m_8c.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu789m_8c.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu789m_8c.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu789m_8c.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (string-split\
    \ S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"I\" s)) sentences))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp71a6m_ba.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp71a6m_ba.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp71a6m_ba.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp71a6m_ba.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp71a6m_ba.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length\
    \ S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsbzkuqb9.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length\
    \ S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsbzkuqb9.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsbzkuqb9.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond [(empty? S) 0]\n\
    \        [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \        [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmjlyo633.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S \" \")])\n    (if (empty? words)\n        0\n        (if (string=? (first\
    \ words) \"I\")\n            (+ 1 (is_bored (string-join (rest words) \" \")))\n\
    \            (is_bored (string-join (rest words) \" \"))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt685jdgj.rkt:29:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps75vpkmh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (if (string-empty? S)\n\
    \      0\n      (if (string-prefix? \"I\" S)\n          (+ 1 (is_bored (string-drop\
    \ S 1)))\n          (is_bored (string-drop S 1)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvagt3_ox.rkt:12:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpvagt3_ox.rkt:12:7\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps75vpkmh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-if (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n            (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2x00tnv5.rkt:12:3: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp2x00tnv5.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-matches (regexp\
    \ #rx\"^I\") (string-split S #rx\"[.?!]\")))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9ln58qcc.rkt:12:3: count-matches: unbound identifier\n  in: count-matches\n\
    \  location...:\n   /tmp/tmp9ln58qcc.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (regexp-match #rx\"I\"\
    \ S))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjpbqhl7k.rkt:19:4

    actual:     #f

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjpbqhl7k.rkt:20:4

    actual:     ''("I")

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjpbqhl7k.rkt:21:4

    actual:     ''("I")

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjpbqhl7k.rkt:22:4

    actual:     ''("I")

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjpbqhl7k.rkt:23:4

    actual:     ''("I")

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjpbqhl7k.rkt:24:4

    actual:     ''("I")

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? (substring x 0 1) \"I\")\n                           (or (string=?\
    \ (substring x (substring-length x -1) (substring-length x)) \".\")\n        \
    \                       (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \"?\")\n                               (string=? (substring x (substring-length\
    \ x -1) (substring-length x)) \"!\"))\n                           ))\n       \
    \  (regexp-split #rx\"[.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmzsgjrzu.rkt:13:55: substring-length: unbound identifier\n  in:\
    \ substring-length\n  location...:\n   /tmp/tmpmzsgjrzu.rkt:13:55\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (for/fold ([count 0]) ([word words])\n      (if (string=?\
    \ word \"I\")\n          (+ count 1)\n          count))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4au98j_k.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4au98j_k.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4au98j_k.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4au98j_k.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4au98j_k.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (car S)) (loop (cdr S) (+ count 1))]\n          [else (loop (cdr S) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbv9g8tr2.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbv9g8tr2.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbv9g8tr2.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbv9g8tr2.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbv9g8tr2.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ x \"I\")) (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n```\n\n```racket\n#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpdbuhf6xh.rkt:16:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ x \"I\")) (split-string S \"[.?!]\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0gbhwy3c.rkt:12:40: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp0gbhwy3c.rkt:12:40\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([sentences (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([sentence sentences])\n      (if (string-prefix?\
    \ \"I\" sentence)\n          (+ boredoms 1)\n          boredoms))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgml614ti.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgml614ti.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps75vpkmh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond [(empty? S) 0]\n\
    \        [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \        [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmjlyo633.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmjlyo633.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (first S))\n           (loop (rest S) (+ count 1))]\n          [else (loop\
    \ (rest S) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (equal? (first x) \"I\") (not (null? x))))\n         (split-string S \"[.?!]\"\
    )))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsph_yjw8.rkt:13:10: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpsph_yjw8.rkt:13:10\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpopc0c28d.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmpopc0c28d.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-if (lambda (x) (string=?\
    \ (string-upcase (substring x 0 1)) \"I\"))\n            (regexp-split #rx\"\\\
    \\.|\\\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4mpxwlzp.rkt:12:3: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp4mpxwlzp.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix? \"\
    I\" s)\n          (+ boredoms 1)\n          boredoms))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplioft35o.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplioft35o.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ x \"I\")) (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn9ja891j.rkt:19:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn9ja891j.rkt:20:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn9ja891j.rkt:21:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn9ja891j.rkt:22:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn9ja891j.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (cond\n      [(empty? words) 0]\n      [(equal? (first words)\
    \ \"I\") (+ 1 (is_bored (string-join (rest words) #\\space)))]\n      [else (is_bored\
    \ (string-join (rest words) #\\space))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp12e68ut1.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp12e68ut1.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp12e68ut1.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp12e68ut1.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp12e68ut1.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (length (filter (lambda (x) (string-prefix? \"I\" x)) S))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk37neyp.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdk37neyp.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk37neyp.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk37neyp.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdk37neyp.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (if (string-empty? S)\n\
    \      0\n      (if (string-prefix? \"I\" S)\n          (+ 1 (is_bored (string-drop\
    \ S 1)))\n          (is_bored (string-drop S 1)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvagt3_ox.rkt:12:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpvagt3_ox.rkt:12:7\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (regexp-match #rx\"\
    I\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:20:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:22:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpdrq3r24e.rkt:23:4\nactual:     1\nexpected:\
    \   2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdrq3r24e.rkt:24:4\nactual:     1\nexpected:   0\n--------------------\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (first S))\n           (loop (rest S) (+ count 1))]\n          [else (loop\
    \ (rest S) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bo77tnf.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bo77tnf.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvnt2flti.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (filter (lambda\
    \ (x) (string=? (substring x 0 1) \"I\")) (regexp-split #rx\"[.?!]\" S))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ofghwqv.rkt:20:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9ofghwqv.rkt:21:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9ofghwqv.rkt:23:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (filter (lambda\
    \ (x) (string=? (substring x 0 1) \"I\")) (regexp-split #rx\"[.?!]\" S))))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwmr151_f.rkt:13:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpwmr151_f.rkt:13:0\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? (substring x 0 1) \"I\")\n                          (or (string=?\
    \ (substring x (substring-length x -1) (substring-length x)) \".\")\n        \
    \                      (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \"?\")\n                              (string=? (substring x (substring-length\
    \ x -1) (substring-length x)) \"!\"))\n                          ))\n        \
    \ (regexp-split #rx\"[.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5smkivup.rkt:13:54: substring-length: unbound identifier\n  in:\
    \ substring-length\n  location...:\n   /tmp/tmp5smkivup.rkt:13:54\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"I\" s)) S))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp596po4ud.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp596po4ud.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp596po4ud.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp596po4ud.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp596po4ud.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvnt2flti.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count-if (lambda (s) (string=?\
    \ (string-upcase (substring s 0 1)) \"I\"))\n            (regexp-split #rx\"[.?!]\"\
    \ S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbl86d0ht.rkt:12:3: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpbl86d0ht.rkt:12:3\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let loop ([S (string-split\
    \ S #\\.)]\n             [count 0])\n    (cond [(empty? S) count]\n          [(string-prefix?\
    \ \"I\" (car S)) (loop (cdr S) (+ count 1))]\n          [else (loop (cdr S) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbv9g8tr2.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbv9g8tr2.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbv9g8tr2.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbv9g8tr2.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbv9g8tr2.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7kwr4_f.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7kwr4_f.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (length (filter (lambda (word) (string=? word \"I\")) words))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_826hivf.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_826hivf.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_826hivf.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_826hivf.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_826hivf.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (string-take x 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcywr_jfb.rkt:12:32: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmpcywr_jfb.rkt:12:32\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (for/fold ([boredoms 0]) ([word words])\n      (if (string=?\
    \ word \"I\")\n          (+ boredoms 1)\n          boredoms))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpot2aknkf.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpot2aknkf.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpot2aknkf.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpot2aknkf.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpot2aknkf.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (string-trim (substring S 0 2)) \"I \") (+ 1 (is_bored (substring\
    \ S 2 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbs_ag0z.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjbs_ag0z.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjbs_ag0z.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbs_ag0z.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjbs_ag0z.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #rx\"[.?!]\")\n         (lambda (x) (string-prefix? \"I\" x))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuusuvr3v.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmpuusuvr3v.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuusuvr3v.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  ot"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvnt2flti.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvnt2flti.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (string-split S\
    \ #\"[.?!]\")\n         (lambda (S) (string-prefix? \"I\" (string-trim S)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpivfe_8xy.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\"[.?!]\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpivfe_8xy.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\"[.?!]\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpivfe_8xy.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\"[.?!]\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpivfe_8xy.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\"[.?!]\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpivfe_8xy.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\"[.?!]\"\n\
    --------------------\n--------------------\nERROR\nname:  "
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([words (string-split\
    \ S #\\space)])\n    (cond [(empty? words) 0]\n          [(string=? (first words)\
    \ \"I\") (+ 1 (is_bored (string-join (rest words) #\\space)))]\n          [else\
    \ (is_bored (string-join (rest words) #\\space))])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tfe7ylf.rkt:22:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2tfe7ylf.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tfe7ylf.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2tfe7ylf.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tfe7ylf.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       "
  stdout: ''
  timestamp: 1660219124
- exit_code: 1
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (and\
    \ (string=? (substring x 0 1) \"I\")\n                           (or (string=?\
    \ (substring x (substring-length x -1) (substring-length x)) \".\")\n        \
    \                       (string=? (substring x (substring-length x -1) (substring-length\
    \ x)) \"?\")\n                               (string=? (substring x (substring-length\
    \ x -1) (substring-length x)) \"!\")))))\n         (string-split S #\\.)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpg89k3w0t.rkt:16:30: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp13rtiat8.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13rtiat8.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (is-bored-helper\
    \ S)\n    (cond [(empty? S) 0]\n          [(string=? (first S) \"I\") (+ 1 (is-bored-helper\
    \ (rest S)))]\n          [else (is-bored-helper (rest S))]))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnsoxr24.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprnsoxr24.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprnsoxr24.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnsoxr24.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprnsoxr24.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (regexp-match*\
    \ #rx\"I\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpga72cgaq.rkt:20:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpga72cgaq.rkt:21:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpga72cgaq.rkt:22:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpga72cgaq.rkt:23:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpga72cgaq.rkt:24:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (define (helper S count)\n\
    \    (cond\n      [(empty? S) count]\n      [(string=? (first S) \"I\") (helper\
    \ (rest S) (+ count 1))]\n      [else (helper (rest S) count)]))\n  (helper (string-split\
    \ S #\\.) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t4nn888.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1t4nn888.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t4nn888.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t4nn888.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1t4nn888.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuy082a68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuy082a68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n---------------"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([L (string-split\
    \ S #\\.)])\n    (for/fold ([bored 0]) ([s L])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ bored 1)\n          bored))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgyz42n0.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdgyz42n0.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgyz42n0.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgyz42n0.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdgyz42n0.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps75vpkmh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps75vpkmh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([S (string-split\
    \ S #\\.)])\n    (for/fold ([count 0]) ([s S])\n      (if (string-prefix? \"I\"\
    \ s)\n          (+ count 1)\n          count))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjhwi7j.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjhwi7j.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjhwi7j.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (length (filter (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n                  (regexp-split #rx\"\
    [.?!]\" S))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yobzv1t.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6yobzv1t.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6yobzv1t.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| You'll be given a string of words, and your task is\
    \ to count the number\nof boredoms. A boredom is a sentence that starts with the\
    \ word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>>\
    \ (is_bored \"Hello world\")\n0\n>>> (is_bored \"The sky is blue. The sun is shining.\
    \ I love this weather\")\n1|#\n(define (is_bored S)\n  (let ([L (string-split\
    \ S #\\.)])\n    (for/fold ([n 0]) ([s L])\n      (if (string-prefix? \"I\" s)\n\
    \          (+ n 1)\n          n))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpje9ie01v.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpje9ie01v.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpje9ie01v.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpje9ie01v.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpje9ie01v.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocatio"
  stdout: ''
  timestamp: 1660219128
